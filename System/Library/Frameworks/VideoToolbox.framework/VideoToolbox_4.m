uint64_t vt_CopyAvg_tf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * (v16[1] >> 4))) >> 32) >> 2);
      *v23 = (32
            * ((((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v23[1] = (32 * v40 + 4128) & 0xFFC0;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38 >> 4;
      v43 = v38[1] >> 4;
      v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 4;
      v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 4;
      v38 += 2;
      *v39 = (32
            * (((4195329 * (unint64_t)(896 * v44)) >> 34)
             + (((4195329 * (unint64_t)(896 * v42)) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v39[1] = (32
              * ((((4195329 * (unint64_t)(896 * v45)) >> 32) >> 2)
               + (((4195329 * (unint64_t)(896 * v43)) >> 32) >> 2))
              + 4128) & 0xFFC0;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v16[1] >> 4))) >> 32) >> 2);
        *v23 = (32
              * (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v23[1] = (32 * v51 + 4128) & 0xFFC0;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49 >> 4;
          v54 = v49[1] >> 4;
          v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 4;
          v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 4;
          v49 += 2;
          *v50 = (32
                * (((4195329 * (unint64_t)(896 * v55)) >> 34)
                 + (((4195329 * (unint64_t)(896 * v53)) >> 32) >> 2))
                + 4128) & 0xFFC0;
          v50[1] = (32
                  * ((((4195329 * (unint64_t)(896 * v56)) >> 32) >> 2)
                   + (((4195329 * (unint64_t)(896 * v54)) >> 32) >> 2))
                  + 4128) & 0xFFC0;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1] >> 4;
      v38 = v16 + 2;
      *v23 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v23[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v40)) >> 34) << 6) + 4096;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (4195329 * (unint64_t)(896 * (v38[1] >> 4))) >> 34;
      *v39 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v38 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 4;
        v47 = v16 + 2;
        *v23 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v23[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v49)) >> 34) << 6) + 4096;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (4195329 * (unint64_t)(896 * (v47[1] >> 4))) >> 34;
          *v48 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (4195329 * (unint64_t)(1023 * (v16[1] >> 4))) >> 34;
      v41 = 1023 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4);
      *v23 = (32
            * (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 34)
             + (((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2))
            + 32) & 0xFFC0;
      v23[1] = (32 * ((((4195329 * (unint64_t)v41) >> 32) >> 2) + v40) + 32) & 0xFFC0;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = *v38;
      v44 = v38[1];
      v45 = *(unsigned __int16 *)((char *)v38 + v15);
      v46 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *v39 = (32
            * (((4195329 * (unint64_t)(1023 * (v45 >> 4))) >> 34)
             + (((4195329 * (unint64_t)(1023 * (v43 >> 4))) >> 32) >> 2))
            + 32) & 0xFFC0;
      v39[1] = (32
              * ((((4195329 * (unint64_t)(1023 * (v46 >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(1023 * (v44 >> 4))) >> 34))
              + 32) & 0xFFC0;
      v39 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v48 = 0;
    v49 = v26 - v35;
    do
    {
      v50 = v16;
      v51 = v23;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v16[1] >> 4))) >> 32) >> 2);
        *v23 = (32
              * (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 34)
               + (((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2))
              + 32) & 0xFFC0;
        v23[1] = (32 * v52 + 32) & 0xFFC0;
        v51 = v23 + 2;
      }
      if (v37)
      {
        v53 = -(uint64_t)v37;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = *(unsigned __int16 *)((char *)v50 + v15);
          v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2);
          v50 += 2;
          *v51 = (32
                * (((4195329 * (unint64_t)(1023 * (v56 >> 4))) >> 34)
                 + (((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2))
                + 32) & 0xFFC0;
          v51[1] = (32
                  * ((((4195329 * (unint64_t)(1023 * (v57 >> 4))) >> 32) >> 2)
                   + ((4195329 * (unint64_t)(1023 * (v55 >> 4))) >> 34))
                  + 32) & 0xFFC0;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1];
      v38 = v16 + 2;
      *v23 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2) << 6;
      v23[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v40 >> 4))) >> 34) << 6;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (4195329 * (unint64_t)(1023 * (v38[1] >> 4))) >> 34;
      *v39 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v38 >> 4))) >> 32) >> 2) << 6;
      v39[1] = (_WORD)v42 << 6;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2) << 6;
        v23[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 34) << 6;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (4195329 * (unint64_t)(1023 * (v47[1] >> 4))) >> 34;
          *v48 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v47 >> 4))) >> 32) >> 2) << 6;
          v48[1] = (_WORD)v51 << 6;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_tf22_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = v23 + v14;
    v27 = v24 + v14;
    v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = v12[1] >> 4;
      v34 = v12 + 2;
      *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_20:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34 >> 4;
          v38 = v34[1] >> 4;
          v34 += 2;
          *v35 = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((1048833 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_20;
    }
    v40 = 0;
LABEL_26:
    if ((v40 | (unint64_t)v33) < v19)
    {
      v42 = *v34 >> 4;
      v43 = v34[1] >> 4;
      *v35 = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
      v35[1] = ((1048833 * (unint64_t)(224 * v43)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v30)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v10 - v30;
    do
    {
      v46 = v12;
      v47 = v18;
      if ((v31 & 1) != 0)
      {
        v48 = v12[1] >> 4;
        v46 = v12 + 2;
        *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
        v47 = v18 + 2;
      }
      if (v32)
      {
        v49 = -(uint64_t)v32;
        do
        {
          v50 = v46[1] >> 4;
          v51 = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          *v47 = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          v52 = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
          v47[1] = v52;
          v46 += 2;
          v47[2] = v51;
          v47[3] = v52;
          v47 += 4;
          v39 = __CFADD__(v49++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v53 = *v46 >> 4;
        v54 = v46[1] >> 4;
        *v47 = ((1048833 * (unint64_t)(224 * v53)) >> 32) + 16;
        v47[1] = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + (v8 & 1) < v10)
  {
    if ((v31 & 1) != 0)
    {
      v55 = *v12 >> 4;
      v56 = v12[1] >> 4;
      v12 += 2;
      *v18 = ((1048833 * (unint64_t)(224 * v55)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v56)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      v57 = -(uint64_t)v32;
      do
      {
        v58 = *v12 >> 4;
        v59 = v12[1] >> 4;
        v12 += 2;
        *v18 = ((1048833 * (unint64_t)(224 * v58)) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v59)) >> 32) + 16;
        v18 += 2;
        v39 = __CFADD__(v57++, 1);
      }
      while (!v39);
      v60 = 2 * v32;
    }
    else
    {
      v60 = 0;
    }
    if ((v60 | (unint64_t)v33) < v19)
    {
      v61 = *v12 >> 4;
      v62 = v12[1] >> 4;
      *v18 = ((1048833 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v62)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf22_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v24 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v19 >> 1;
  v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1)
    v28 = (v19 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1] >> 4;
      v30 = v12 + 2;
      *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
      v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30 >> 4;
          v34 = v30[1] >> 4;
          v30 += 2;
          *v31 = ((1048833 * (unint64_t)(224 * v33)) >> 32) + 16;
          v31[1] = ((1048833 * (unint64_t)(224 * v34)) >> 32) + 16;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v12;
      v31 = v18;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      v38 = *v30 >> 4;
      v39 = v30[1] >> 4;
      *v31 = ((1048833 * (unint64_t)(224 * v38)) >> 32) + 16;
      v31[1] = ((1048833 * (unint64_t)(224 * v39)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v18;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1] >> 4;
        v42 = v12 + 2;
        *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v44)) >> 32) + 16;
        v43 = v18 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1] >> 4;
          v47 = ((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32) + 16;
          *v43 = ((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32) + 16;
          v48 = ((1048833 * (unint64_t)(224 * v46)) >> 32) + 16;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        v49 = *v42 >> 4;
        v50 = v42[1] >> 4;
        *v43 = ((1048833 * (unint64_t)(224 * v49)) >> 32) + 16;
        v43[1] = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12 >> 4;
      v52 = v12[1] >> 4;
      v12 += 2;
      *v18 = ((1048833 * (unint64_t)(224 * v51)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v52)) >> 32) + 16;
      v18 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12 >> 4;
        v55 = v12[1] >> 4;
        v12 += 2;
        *v18 = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v55)) >> 32) + 16;
        v18 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v19)
    {
      v57 = *v12 >> 4;
      v58 = v12[1] >> 4;
      *v18 = ((1048833 * (unint64_t)(224 * v57)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v58)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf22_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v24 + 2 * i) >> 4))) >> 32;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v10 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v19 >> 1;
  v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = v12[1];
      v31 = v12 + 2;
      *v18 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v32 = (1048833 * (unint64_t)(255 * (v34 >> 4))) >> 32;
          v32[1] = (1048833 * (unint64_t)(255 * (v35 >> 4))) >> 32;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      v31 = v12;
      v32 = v18;
      if (v29)
        goto LABEL_20;
    }
    v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *v31;
      v40 = v31[1];
      *v32 = (1048833 * (unint64_t)(255 * (v39 >> 4))) >> 32;
      v32[1] = (1048833 * (unint64_t)(255 * (v40 >> 4))) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v10 - v27;
    do
    {
      v43 = v12;
      v44 = v18;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v18 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
        v18[1] = (1048833 * (unint64_t)(255 * (v45 >> 4))) >> 32;
        v44 = v18 + 2;
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = (1048833 * (unint64_t)(255 * (*v43 >> 4))) >> 32;
          v48 = (1048833 * (unint64_t)(255 * (v43[1] >> 4))) >> 32;
          *v44 = v47;
          v44[1] = v48;
          v43 += 2;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *v43;
        v50 = (1048833 * (unint64_t)(255 * (v43[1] >> 4))) >> 32;
        *v44 = (1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32;
        v44[1] = v50;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v12;
      v52 = v12[1];
      v12 += 2;
      *v18 = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v52 >> 4))) >> 32;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *v12;
        v55 = v12[1];
        v12 += 2;
        *v18 = (1048833 * (unint64_t)(255 * (v54 >> 4))) >> 32;
        v18[1] = (1048833 * (unint64_t)(255 * (v55 >> 4))) >> 32;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *v12;
      v58 = v12[1];
      *v18 = (1048833 * (unint64_t)(255 * (v57 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v58 >> 4))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf22_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = *a4;
    v26 = a7[2] + v24 * v18 + v16;
    v27 = *a7 + *a8 * v18 + v16;
    v28 = *a3 + v25 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v23;
      v26 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v11 & 1;
  if (v8 >= v30)
    v31 = v11 & 1;
  else
    v31 = 0;
  v32 = v21 >> 1;
  v33 = v21 - v10;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v14[1] >> 4;
      v35 = v14 + 2;
      *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_26;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = (1048833 * (unint64_t)(224 * (v35[1] >> 4))) >> 32;
      *v36 = ((1048833 * (unint64_t)(224 * (*v35 >> 4))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v31;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v9 & 1) != 0)
      {
        v45 = v14[1] >> 4;
        v43 = v14 + 2;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = ((1048833 * (unint64_t)(224 * v45)) >> 32) + 16;
        v44 = v20 + 2;
      }
      if (v34)
      {
        v46 = -(uint64_t)v34;
        do
        {
          v47 = (1048833 * (unint64_t)(224 * (v43[1] >> 4))) >> 32;
          *v44 = ((1048833 * (unint64_t)(224 * (*v43 >> 4))) >> 32) + 16;
          v44[1] = v47 + 16;
          v44 += 2;
          v43 += 2;
          v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v48 = *v14 >> 4;
      v49 = v14[1] >> 4;
      v14 += 2;
      *v20 = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v49)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      v50 = -(uint64_t)v34;
      do
      {
        v51 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = v51 + 16;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf22_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = v14[1] >> 4;
      v33 = v14 + 2;
      *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v35)) >> 32) + 16;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = (1048833 * (unint64_t)(224 * (v33[1] >> 4))) >> 32;
      *v34 = ((1048833 * (unint64_t)(224 * (*v33 >> 4))) >> 32) + 16;
      v34[1] = v37 + 16;
      v34 += 2;
      v33 += 2;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = v14[1] >> 4;
        v41 = v14 + 2;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = ((1048833 * (unint64_t)(224 * v43)) >> 32) + 16;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = (1048833 * (unint64_t)(224 * (v41[1] >> 4))) >> 32;
          *v42 = ((1048833 * (unint64_t)(224 * (*v41 >> 4))) >> 32) + 16;
          v42[1] = v45 + 16;
          v42 += 2;
          v41 += 2;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *v14 >> 4;
      v47 = v14[1] >> 4;
      v14 += 2;
      *v20 = ((1048833 * (unint64_t)(224 * v46)) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = v49 + 16;
        v20 += 2;
        v14 += 2;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf22_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 4))) >> 32;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = v14[1];
      v33 = v14 + 2;
      *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v35 >> 4))) >> 32;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = v33[1];
      *v34 = (1048833 * (unint64_t)(255 * (*v33 >> 4))) >> 32;
      v34[1] = (1048833 * (unint64_t)(255 * (v37 >> 4))) >> 32;
      v34 += 2;
      v33 += 2;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = v14[1];
        v41 = v14 + 2;
        *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v20[1] = (1048833 * (unint64_t)(255 * (v43 >> 4))) >> 32;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = v41[1];
          *v42 = (1048833 * (unint64_t)(255 * (*v41 >> 4))) >> 32;
          v42[1] = (1048833 * (unint64_t)(255 * (v45 >> 4))) >> 32;
          v42 += 2;
          v41 += 2;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *v14;
      v47 = v14[1];
      v14 += 2;
      *v20 = (1048833 * (unint64_t)(255 * (v46 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = v14[1];
        *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v20[1] = (1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32;
        v20 += 2;
        v14 += 2;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 2;
      v42 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                         + 33) >> 1;
      *v22 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                          + 33) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *v40 >> 4;
      v45 = v40[1] >> 4;
      v46 = *(unsigned __int16 *)((char *)v40 + v15) >> 4;
      v47 = *(unsigned __int16 *)((char *)v40 + v15 + 2) >> 4;
      v40 += 2;
      *v41 = (((1048833 * (unint64_t)(224 * v44)) >> 32)
                          + ((1048833 * (unint64_t)(224 * v46)) >> 32)
                          + 33) >> 1;
      v41[1] = (((1048833 * (unint64_t)(224 * v45)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      v41 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v48 = 0;
    v49 = v24 - v36;
    do
    {
      v50 = v16;
      v51 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                           + 33) >> 1;
        *v22 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                            + 33) >> 1;
        v22[1] = v52;
        v51 = v22 + 2;
      }
      if (v39)
      {
        v53 = -(uint64_t)v39;
        do
        {
          v54 = *v50 >> 4;
          v55 = v50[1] >> 4;
          v56 = *(unsigned __int16 *)((char *)v50 + v15) >> 4;
          v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2) >> 4;
          v50 += 2;
          *v51 = (((1048833 * (unint64_t)(224 * v54)) >> 32)
                              + ((1048833 * (unint64_t)(224 * v56)) >> 32)
                              + 33) >> 1;
          v51[1] = (((1048833 * (unint64_t)(224 * v55)) >> 32)
                                + ((1048833 * (unint64_t)(224 * v57)) >> 32)
                                + 33) >> 1;
          v51 += 2;
          v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v40 = v16 + 2;
      *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v22[1] = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (1048833 * (unint64_t)(224 * (v40[1] >> 4))) >> 32;
      *v41 = ((1048833 * (unint64_t)(224 * (*v40 >> 4))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v45 = 0;
    v46 = v24 - v36;
    v47 = 2 * v15;
    do
    {
      v48 = v16;
      v49 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16[1] >> 4;
        v48 = v16 + 2;
        *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v22[1] = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = (1048833 * (unint64_t)(224 * (v48[1] >> 4))) >> 32;
          *v49 = ((1048833 * (unint64_t)(224 * (*v48 >> 4))) >> 32) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v47);
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 2;
      v38 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                         + 33) >> 1;
      *v22 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                          + 33) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *v36 >> 4;
      v41 = v36[1] >> 4;
      v42 = *(unsigned __int16 *)((char *)v36 + v15) >> 4;
      v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2) >> 4;
      v36 += 2;
      *v37 = (((1048833 * (unint64_t)(224 * v40)) >> 32)
                          + ((1048833 * (unint64_t)(224 * v42)) >> 32)
                          + 33) >> 1;
      v37[1] = (((1048833 * (unint64_t)(224 * v41)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v43)) >> 32)
                            + 33) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                           + 33) >> 1;
        *v22 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                            + 33) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *v47 >> 4;
          v52 = v47[1] >> 4;
          v53 = *(unsigned __int16 *)((char *)v47 + v15) >> 4;
          v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2) >> 4;
          v47 += 2;
          *v48 = (((1048833 * (unint64_t)(224 * v51)) >> 32)
                              + ((1048833 * (unint64_t)(224 * v53)) >> 32)
                              + 33) >> 1;
          v48[1] = (((1048833 * (unint64_t)(224 * v52)) >> 32)
                                + ((1048833 * (unint64_t)(224 * v54)) >> 32)
                                + 33) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16[1] >> 4;
      v36 = v16 + 2;
      *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v22[1] = ((1048833 * (unint64_t)(224 * v38)) >> 32) + 16;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = (1048833 * (unint64_t)(224 * (v36[1] >> 4))) >> 32;
      *v37 = ((1048833 * (unint64_t)(224 * (*v36 >> 4))) >> 32) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16[1] >> 4;
        v45 = v16 + 2;
        *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v22[1] = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = (1048833 * (unint64_t)(224 * (v45[1] >> 4))) >> 32;
          *v46 = ((1048833 * (unint64_t)(224 * (*v45 >> 4))) >> 32) + 16;
          v46[1] = v49 + 16;
          v46 += 2;
          v45 += 2;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 2;
      v38 = (((1048833 * (unint64_t)(255 * (v16[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                         + 1) >> 1;
      *v22 = (((1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                          + 1) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *v36;
      v41 = v36[1];
      v42 = *(unsigned __int16 *)((char *)v36 + v15);
      v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2);
      v36 += 2;
      *v37 = (((1048833 * (unint64_t)(255 * (v40 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v42 >> 4))) >> 32)
                          + 1) >> 1;
      v37[1] = (((1048833 * (unint64_t)(255 * (v41 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v43 >> 4))) >> 32)
                            + 1) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = (((1048833 * (unint64_t)(255 * (v16[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                           + 1) >> 1;
        *v22 = (((1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                            + 1) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *v47;
          v52 = v47[1];
          v53 = *(unsigned __int16 *)((char *)v47 + v15);
          v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2);
          v47 += 2;
          *v48 = (((1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (v53 >> 4))) >> 32)
                              + 1) >> 1;
          v48[1] = (((1048833 * (unint64_t)(255 * (v52 >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(255 * (v54 >> 4))) >> 32)
                                + 1) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16[1];
      v36 = v16 + 2;
      *v22 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
      v22[1] = (1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = v36[1];
      *v37 = (1048833 * (unint64_t)(255 * (*v36 >> 4))) >> 32;
      v37[1] = (1048833 * (unint64_t)(255 * (v40 >> 4))) >> 32;
      v37 += 2;
      v36 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16[1];
        v45 = v16 + 2;
        *v22 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
        v22[1] = (1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = v45[1];
          *v46 = (1048833 * (unint64_t)(255 * (*v45 >> 4))) >> 32;
          v46[1] = (1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32;
          v46 += 2;
          v45 += 2;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16 + 2;
      v42 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                         + 33) >> 1;
      *v23 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                          + 33) >> 1;
      v40 = v23 + 1;
      *v24 = v42;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = *v39 >> 4;
      v45 = v39[1] >> 4;
      v46 = *(unsigned __int16 *)((char *)v39 + v15) >> 4;
      v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2) >> 4;
      v39 += 2;
      *v40++ = (((1048833 * (unint64_t)(224 * v44)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v46)) >> 32)
                            + 33) >> 1;
      *v41++ = (((1048833 * (unint64_t)(224 * v45)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v49 = 0;
    v50 = v26 - v35;
    do
    {
      v51 = v16;
      v52 = v23;
      v53 = v24;
      if ((v8 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (((1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                           + 33) >> 1;
        *v23 = (((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                            + 33) >> 1;
        v52 = v23 + 1;
        *v24 = v54;
        v53 = v24 + 1;
      }
      if (v38)
      {
        v55 = -(uint64_t)v38;
        do
        {
          v56 = *v51 >> 4;
          v57 = v51[1] >> 4;
          v58 = *(unsigned __int16 *)((char *)v51 + v15) >> 4;
          v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2) >> 4;
          v51 += 2;
          *v52++ = (((1048833 * (unint64_t)(224 * v56)) >> 32)
                                + ((1048833 * (unint64_t)(224 * v58)) >> 32)
                                + 33) >> 1;
          *v53++ = (((1048833 * (unint64_t)(224 * v57)) >> 32)
                                + ((1048833 * (unint64_t)(224 * v59)) >> 32)
                                + 33) >> 1;
          v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v39 = v16 + 2;
      *v23 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v40 = v23 + 1;
      *v24 = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = 234938592 * (v39[1] >> 4);
      *v40++ = ((1048833 * (unint64_t)(224 * (*v39 >> 4))) >> 32) + 16;
      *v41++ = BYTE4(v44) + 16;
      v39 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v46 = 0;
    v47 = v26 - v35;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v23;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v49 = v16 + 2;
        v52 = (1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32;
        *v23 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v50 = v23 + 1;
        *v24 = v52 + 16;
        v51 = v24 + 1;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = 234938592 * (v49[1] >> 4);
          *v50++ = ((1048833 * (unint64_t)(224 * (*v49 >> 4))) >> 32) + 16;
          *v51++ = BYTE4(v54) + 16;
          v49 += 2;
          v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v16 + 2;
      v42 = (((1048833 * (unint64_t)(255 * (v16[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                         + 1) >> 1;
      *v23 = (((1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                          + 1) >> 1;
      v40 = v23 + 1;
      *v24 = v42;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = *v39;
      v45 = v39[1];
      v46 = *(unsigned __int16 *)((char *)v39 + v15);
      v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2);
      v39 += 2;
      *v40++ = (((1048833 * (unint64_t)(255 * (v44 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v46 >> 4))) >> 32)
                            + 1) >> 1;
      *v41++ = (((1048833 * (unint64_t)(255 * (v45 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32)
                            + 1) >> 1;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v49 = 0;
    v50 = v26 - v35;
    do
    {
      v51 = v16;
      v52 = v23;
      v53 = v24;
      if ((v8 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (((1048833 * (unint64_t)(255 * (v16[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4))) >> 32)
                           + 1) >> 1;
        *v23 = (((1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 4))) >> 32)
                            + 1) >> 1;
        v52 = v23 + 1;
        *v24 = v54;
        v53 = v24 + 1;
      }
      if (v38)
      {
        v55 = -(uint64_t)v38;
        do
        {
          v56 = *v51;
          v57 = v51[1];
          v58 = *(unsigned __int16 *)((char *)v51 + v15);
          v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2);
          v51 += 2;
          *v52++ = (((1048833 * (unint64_t)(255 * (v56 >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(255 * (v58 >> 4))) >> 32)
                                + 1) >> 1;
          *v53++ = (((1048833 * (unint64_t)(255 * (v57 >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(255 * (v59 >> 4))) >> 32)
                                + 1) >> 1;
          v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_tf22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v33 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v35 = v11;
  else
    v35 = 0;
  v36 = v25 >> 1;
  v37 = v25 - v10;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1];
      v39 = v16 + 2;
      *v23 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
      v40 = v23 + 1;
      *v24 = (1048833 * (unint64_t)(255 * (v42 >> 4))) >> 32;
      v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v39 = v16;
      v40 = v23;
      v41 = v24;
      if (!v38)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = v39[1];
      *v40++ = (1048833 * (unint64_t)(255 * (*v39 >> 4))) >> 32;
      *v41++ = (1048833 * (unint64_t)(255 * (v44 >> 4))) >> 32;
      v39 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v46 = 0;
    v47 = v26 - v35;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v23;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v52 = v16[1];
        v49 = v16 + 2;
        *v23 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
        v50 = v23 + 1;
        *v24 = (1048833 * (unint64_t)(255 * (v52 >> 4))) >> 32;
        v51 = v24 + 1;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = v49[1];
          *v50++ = (1048833 * (unint64_t)(255 * (*v49 >> 4))) >> 32;
          *v51++ = (1048833 * (unint64_t)(255 * (v54 >> 4))) >> 32;
          v49 += 2;
          v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_Copy_tf20_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  _WORD *v27;
  unint64_t v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24 >> 4;
            v26 = v24[1] >> 4;
            v24 += 2;
            v23 = (((268501009 * (unint64_t)(57344 * v25)) >> 32) >> 8) + 4096;
            v22 = (((268501009 * (unint64_t)(57344 * v26)) >> 32) >> 8) + 4096;
          }
          v27 = (_WORD *)(v17 + v20);
          v28 = (268501009 * (unint64_t)(56064 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 4))) >> 40;
          *v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_tf20_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  _BYTE *v27;
  unint64_t v28;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v25 = *v24 >> 4;
            v26 = v24[1] >> 4;
            v24 += 2;
            v23 = ((1048833 * (unint64_t)(224 * v25)) >> 32) + 16;
            v22 = ((1048833 * (unint64_t)(224 * v26)) >> 32) + 16;
          }
          v27 = (_BYTE *)(v17 + v20);
          v28 = (1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 4))) >> 32;
          *v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_tf20_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  int32x4_t v30;
  int32x4_t v31;

  v13 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v14 = *(_QWORD *)(a7 + 40) & 0xFFFFFFFELL;
  v16 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v17 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16)
    v17 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  v15 = *(_QWORD *)(a7 + 24) + *(_QWORD *)(a7 + 40);
  v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(_QWORD *)(a11 + 24))
    v18 = *(_QWORD *)(a11 + 24);
  if (v18)
  {
    v19 = 0;
    v20 = *a9;
    v21 = a9[1];
    v22 = *a13;
    v23 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + 2 * v16;
    v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    v25 = *a8 + *a9 * v14 + 2 * v13;
    v26 = (uint32x4_t)vdupq_n_s32(0x100101u);
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        for (i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 4uLL), (uint16x4_t)0xDB00DB00E000E000);
          v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v26));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 0xBuLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *(double *)(v23 + v28) = *(double *)&a4;
          v28 += 8;
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_tf20_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint32x4_t v26;
  uint64_t v27;
  unint64_t i;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;

  v13 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v14 = *(_QWORD *)(a7 + 40) & 0xFFFFFFFELL;
  v16 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v17 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16)
    v17 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  v15 = *(_QWORD *)(a7 + 24) + *(_QWORD *)(a7 + 40);
  v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(_QWORD *)(a11 + 24))
    v18 = *(_QWORD *)(a11 + 24);
  if (v18)
  {
    v19 = 0;
    v20 = *a9;
    v21 = a9[1];
    v22 = *a13;
    v23 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + v16;
    v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    v25 = *a8 + *a9 * v14 + 2 * v13;
    v26 = (uint32x4_t)vdupq_n_s32(0x100101u);
    do
    {
      if (v17)
      {
        v27 = 0;
        for (i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 4uLL), (uint16x4_t)0xDB00DB00E000E0);
          v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v26));
          v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 0xBuLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v23 + v27) = a4.i32[0];
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_tf20_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _WORD *v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _WORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 4;
      v39 = v16 + 2;
      *v22 = (((268501009 * (unint64_t)(57344 * (*v16 >> 4))) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v46)) >> 32) >> 8) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 4;
          v43 = v39[1] >> 4;
          v39 += 2;
          *v40 = (((268501009 * (unint64_t)(57344 * v42)) >> 32) >> 8) + 4096;
          v40[1] = (((268501009 * (unint64_t)(57344 * v43)) >> 32) >> 8) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 4;
      v48 = v39[1] >> 4;
      *v40 = (((268501009 * (unint64_t)(57344 * v47)) >> 32) >> 8) + 4096;
      v40[1] = (((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8) + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (268501009 * (unint64_t)(57344 * (v16[1] >> 4))) >> 40;
        v53 = (((268501009 * (unint64_t)(57344 * (*v16 >> 4))) >> 32) >> 8) + 4096;
        *v22 = v53;
        LOWORD(v52) = v52 + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 57344 * (v50[1] >> 4);
          v57 = (((268501009 * (unint64_t)(57344 * (*v50 >> 4))) >> 32) >> 8) + 4096;
          *v51 = (((268501009 * (unint64_t)(57344 * (*v50 >> 4))) >> 32) >> 8) + 4096;
          v58 = (((268501009 * (unint64_t)v56) >> 32) >> 8) + 4096;
          v51[1] = v58;
          v51[2] = v57;
          v51[3] = v58;
          v59 = (_WORD *)((char *)v51 + v21);
          *v59 = v57;
          v59[1] = v58;
          v50 += 2;
          v59[2] = v57;
          v59[3] = v58;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v60 = *v50 >> 4;
        v61 = v50[1] >> 4;
        v62 = (((268501009 * (unint64_t)(57344 * v60)) >> 32) >> 8) + 4096;
        *v51 = v62;
        v63 = (((268501009 * (unint64_t)(57344 * v61)) >> 32) >> 8) + 4096;
        v51[1] = v63;
        v64 = (_WORD *)((char *)v51 + v21);
        *v64 = v62;
        v64[1] = v63;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v65 = 2 * v35;
  }
  else
  {
    v65 = 0;
  }
  if ((v65 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v66 = *v16 >> 4;
      v67 = v16[1] >> 4;
      v16 += 2;
      *v22 = (((268501009 * (unint64_t)(57344 * v66)) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v67)) >> 32) >> 8) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v68 = -(uint64_t)v37;
      do
      {
        v69 = *v16 >> 4;
        v70 = v16[1] >> 4;
        v16 += 2;
        *v22 = (((268501009 * (unint64_t)(57344 * v69)) >> 32) >> 8) + 4096;
        v22[1] = (((268501009 * (unint64_t)(57344 * v70)) >> 32) >> 8) + 4096;
        v22 += 2;
        v44 = __CFADD__(v68++, 1);
      }
      while (!v44);
      v71 = 2 * v37;
    }
    else
    {
      v71 = 0;
    }
    if ((v71 | (unint64_t)v38) < v23)
    {
      v72 = *v16 >> 4;
      v73 = v16[1] >> 4;
      *v22 = (((268501009 * (unint64_t)(57344 * v72)) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v73)) >> 32) >> 8) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _WORD *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 4;
      v36 = v14 + 2;
      *v20 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
      v20[1] = (((268501009 * (unint64_t)(57344 * v43)) >> 32) >> 8) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 4;
          v40 = v36[1] >> 4;
          v36 += 2;
          *v37 = (((268501009 * (unint64_t)(57344 * v39)) >> 32) >> 8) + 4096;
          v37[1] = (((268501009 * (unint64_t)(57344 * v40)) >> 32) >> 8) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 4;
      v45 = v36[1] >> 4;
      *v37 = (((268501009 * (unint64_t)(57344 * v44)) >> 32) >> 8) + 4096;
      v37[1] = (((268501009 * (unint64_t)(57344 * v45)) >> 32) >> 8) + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 40;
        v50 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
        *v20 = v50;
        LOWORD(v49) = v49 + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 57344 * (v47[1] >> 4);
          v54 = (((268501009 * (unint64_t)(57344 * (*v47 >> 4))) >> 32) >> 8) + 4096;
          *v48 = (((268501009 * (unint64_t)(57344 * (*v47 >> 4))) >> 32) >> 8) + 4096;
          v55 = (((268501009 * (unint64_t)v53) >> 32) >> 8) + 4096;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          v56 = (_WORD *)((char *)v48 + v19);
          *v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v57 = *v47 >> 4;
        v58 = v47[1] >> 4;
        v59 = (((268501009 * (unint64_t)(57344 * v57)) >> 32) >> 8) + 4096;
        *v48 = v59;
        v60 = (((268501009 * (unint64_t)(57344 * v58)) >> 32) >> 8) + 4096;
        v48[1] = v60;
        v61 = (_WORD *)((char *)v48 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v62 = 2 * v32;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v63 = *v14 >> 4;
      v64 = v14[1] >> 4;
      v14 += 2;
      *v20 = (((268501009 * (unint64_t)(57344 * v63)) >> 32) >> 8) + 4096;
      v20[1] = (((268501009 * (unint64_t)(57344 * v64)) >> 32) >> 8) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v65 = -(uint64_t)v34;
      do
      {
        v66 = *v14 >> 4;
        v67 = v14[1] >> 4;
        v14 += 2;
        *v20 = (((268501009 * (unint64_t)(57344 * v66)) >> 32) >> 8) + 4096;
        v20[1] = (((268501009 * (unint64_t)(57344 * v67)) >> 32) >> 8) + 4096;
        v20 += 2;
        v41 = __CFADD__(v65++, 1);
      }
      while (!v41);
      v68 = 2 * v34;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v35) < v21)
    {
      v69 = *v14 >> 4;
      v70 = v14[1] >> 4;
      *v20 = (((268501009 * (unint64_t)(57344 * v69)) >> 32) >> 8) + 4096;
      v20[1] = (((268501009 * (unint64_t)(57344 * v70)) >> 32) >> 8) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  _WORD *v56;
  unint64_t v57;
  unint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1];
      v36 = v14 + 2;
      *v20 = ((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8;
      v20[1] = ((268501009 * (unint64_t)(0xFFFF * (v43 >> 4))) >> 32) >> 8;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = ((268501009 * (unint64_t)(0xFFFF * (v39 >> 4))) >> 32) >> 8;
          v37[1] = ((268501009 * (unint64_t)(0xFFFF * (v40 >> 4))) >> 32) >> 8;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36;
      v45 = v36[1];
      *v37 = ((268501009 * (unint64_t)(0xFFFF * (v44 >> 4))) >> 32) >> 8;
      v37[1] = ((268501009 * (unint64_t)(0xFFFF * (v45 >> 4))) >> 32) >> 8;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 40;
        v50 = (268501009 * (unint64_t)(0xFFFF * (v14[1] >> 4))) >> 40;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = v47[1];
          v54 = (268501009 * (unint64_t)(0xFFFF * (*v47 >> 4))) >> 40;
          *v48 = v54;
          v55 = (268501009 * (unint64_t)(0xFFFF * (v53 >> 4))) >> 40;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          v56 = (_WORD *)((char *)v48 + v19);
          *v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v57 = (268501009 * (unint64_t)(0xFFFF * (*v47 >> 4))) >> 40;
        v58 = (268501009 * (unint64_t)(0xFFFF * (v47[1] >> 4))) >> 40;
        *v48 = v57;
        v48[1] = v58;
        v59 = (_WORD *)((char *)v48 + v19);
        *v59 = v57;
        v59[1] = v58;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v60 = 2 * v32;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v61 = *v14;
      v62 = v14[1];
      v14 += 2;
      *v20 = ((268501009 * (unint64_t)(0xFFFF * (v61 >> 4))) >> 32) >> 8;
      v20[1] = ((268501009 * (unint64_t)(0xFFFF * (v62 >> 4))) >> 32) >> 8;
      v20 += 2;
    }
    if (v34)
    {
      v63 = -(uint64_t)v34;
      do
      {
        v64 = *v14;
        v65 = v14[1];
        v14 += 2;
        *v20 = ((268501009 * (unint64_t)(0xFFFF * (v64 >> 4))) >> 32) >> 8;
        v20[1] = ((268501009 * (unint64_t)(0xFFFF * (v65 >> 4))) >> 32) >> 8;
        v20 += 2;
        v41 = __CFADD__(v63++, 1);
      }
      while (!v41);
      v66 = 2 * v34;
    }
    else
    {
      v66 = 0;
    }
    if ((v66 | (unint64_t)v35) < v21)
    {
      v67 = *v14;
      v68 = v14[1];
      *v20 = ((268501009 * (unint64_t)(0xFFFF * (v67 >> 4))) >> 32) >> 8;
      v20[1] = ((268501009 * (unint64_t)(0xFFFF * (v68 >> 4))) >> 32) >> 8;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 4;
      v40 = v15 + 2;
      *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v42)) >> 32) >> 8) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (268501009 * (unint64_t)(57344 * (v40[1] >> 4))) >> 40;
      *v41 = (((268501009 * (unint64_t)(57344 * (*v40 >> 4))) >> 32) >> 8) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 4;
        v47 = v15 + 2;
        *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
        v22[1] = (((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (268501009 * (unint64_t)(57344 * (v47[1] >> 4))) >> 40;
          v52 = (((268501009 * (unint64_t)(57344 * (*v47 >> 4))) >> 32) >> 8) + 4096;
          *v48 = (((268501009 * (unint64_t)(57344 * (*v47 >> 4))) >> 32) >> 8) + 4096;
          LOWORD(v51) = v51 + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 4;
      v56 = v15[1] >> 4;
      v15 += 2;
      *v22 = (((268501009 * (unint64_t)(57344 * v55)) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v56)) >> 32) >> 8) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (268501009 * (unint64_t)(57344 * (v15[1] >> 4))) >> 40;
        *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
        v22[1] = v58 + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 4;
      v38 = v15 + 2;
      *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v40)) >> 32) >> 8) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (268501009 * (unint64_t)(57344 * (v38[1] >> 4))) >> 40;
      *v39 = (((268501009 * (unint64_t)(57344 * (*v38 >> 4))) >> 32) >> 8) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 4;
        v45 = v15 + 2;
        *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
        v22[1] = (((268501009 * (unint64_t)(57344 * v47)) >> 32) >> 8) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (268501009 * (unint64_t)(57344 * (v45[1] >> 4))) >> 40;
          v50 = (((268501009 * (unint64_t)(57344 * (*v45 >> 4))) >> 32) >> 8) + 4096;
          *v46 = (((268501009 * (unint64_t)(57344 * (*v45 >> 4))) >> 32) >> 8) + 4096;
          LOWORD(v49) = v49 + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 4;
      v54 = v15[1] >> 4;
      v15 += 2;
      *v22 = (((268501009 * (unint64_t)(57344 * v53)) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v54)) >> 32) >> 8) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (268501009 * (unint64_t)(57344 * (v15[1] >> 4))) >> 40;
        *v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
        v22[1] = v56 + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1];
      v38 = v15 + 2;
      *v22 = ((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8;
      v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v40 >> 4))) >> 32) >> 8;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1];
      *v39 = ((268501009 * (unint64_t)(0xFFFF * (*v38 >> 4))) >> 32) >> 8;
      v39[1] = ((268501009 * (unint64_t)(0xFFFF * (v42 >> 4))) >> 32) >> 8;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1];
        v45 = v15 + 2;
        *v22 = ((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8;
        v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v47 >> 4))) >> 32) >> 8;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (268501009 * (unint64_t)(0xFFFF * (*v45 >> 4))) >> 40;
          v50 = (268501009 * (unint64_t)(0xFFFF * (v45[1] >> 4))) >> 40;
          *v46 = v49;
          v46[1] = v50;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15;
      v54 = v15[1];
      v15 += 2;
      *v22 = ((268501009 * (unint64_t)(0xFFFF * (v53 >> 4))) >> 32) >> 8;
      v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v54 >> 4))) >> 32) >> 8;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = v15[1];
        *v22 = ((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8;
        v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v56 >> 4))) >> 32) >> 8;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v40 = v16 + 2;
      *v23 = (((268501009 * (unint64_t)(57344 * (*v16 >> 4))) >> 32) >> 8) + 4096;
      v23[1] = (((268501009 * (unint64_t)(57344 * v42)) >> 32) >> 8) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (268501009 * (unint64_t)(57344 * (v40[1] >> 4))) >> 40;
      *v41 = (((268501009 * (unint64_t)(57344 * (*v40 >> 4))) >> 32) >> 8) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 4;
        v47 = v16 + 2;
        *v23 = (((268501009 * (unint64_t)(57344 * (*v16 >> 4))) >> 32) >> 8) + 4096;
        v23[1] = (((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (268501009 * (unint64_t)(57344 * (v47[1] >> 4))) >> 40;
          *v48 = (((268501009 * (unint64_t)(57344 * (*v47 >> 4))) >> 32) >> 8) + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1];
      v40 = v16 + 2;
      *v23 = ((268501009 * (unint64_t)(0xFFFF * (*v16 >> 4))) >> 32) >> 8;
      v23[1] = ((268501009 * (unint64_t)(0xFFFF * (v42 >> 4))) >> 32) >> 8;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1];
      *v41 = ((268501009 * (unint64_t)(0xFFFF * (*v40 >> 4))) >> 32) >> 8;
      v41[1] = ((268501009 * (unint64_t)(0xFFFF * (v44 >> 4))) >> 32) >> 8;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = ((268501009 * (unint64_t)(0xFFFF * (*v16 >> 4))) >> 32) >> 8;
        v23[1] = ((268501009 * (unint64_t)(0xFFFF * (v49 >> 4))) >> 32) >> 8;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1];
          *v48 = ((268501009 * (unint64_t)(0xFFFF * (*v47 >> 4))) >> 32) >> 8;
          v48[1] = ((268501009 * (unint64_t)(0xFFFF * (v51 >> 4))) >> 32) >> 8;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  _WORD *v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _WORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 4;
      v39 = v16 + 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v16 >> 4))) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v46)) >> 35) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 4;
          v43 = v39[1] >> 4;
          v39 += 2;
          *v40 = 16 * (((8390657 * (unint64_t)(3584 * v42)) >> 32) >> 3) + 4096;
          v40[1] = 16 * ((8390657 * (unint64_t)(3584 * v43)) >> 35) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 4;
      v48 = v39[1] >> 4;
      *v40 = 16 * (((8390657 * (unint64_t)(3584 * v47)) >> 32) >> 3) + 4096;
      v40[1] = 16 * (((8390657 * (unint64_t)(3584 * v48)) >> 32) >> 3) + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (8390657 * (unint64_t)(3584 * (v16[1] >> 4))) >> 35;
        v53 = 16 * (((8390657 * (unint64_t)(3584 * (*v16 >> 4))) >> 32) >> 3) + 4096;
        *v22 = v53;
        LOWORD(v52) = 16 * v52 + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 30072114688 * (v50[1] >> 4);
          v57 = 16 * (((8390657 * (unint64_t)(3584 * (*v50 >> 4))) >> 32) >> 3) + 4096;
          *v51 = 16 * (((8390657 * (unint64_t)(3584 * (*v50 >> 4))) >> 32) >> 3) + 4096;
          LODWORD(v56) = 16 * (v56 >> 35) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          v58 = (_WORD *)((char *)v51 + v21);
          *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v59 = *v50 >> 4;
        v60 = v50[1] >> 4;
        v61 = 16 * (((8390657 * (unint64_t)(3584 * v59)) >> 32) >> 3) + 4096;
        *v51 = v61;
        v62 = 16 * (((8390657 * (unint64_t)(3584 * v60)) >> 32) >> 3) + 4096;
        v51[1] = v62;
        v63 = (_WORD *)((char *)v51 + v21);
        *v63 = v61;
        v63[1] = v62;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v64 = 2 * v35;
  }
  else
  {
    v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v65 = *v16 >> 4;
      v66 = v16[1] >> 4;
      v16 += 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * v65)) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v66)) >> 35) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v67 = -(uint64_t)v37;
      do
      {
        v68 = *v16 >> 4;
        v69 = v16[1] >> 4;
        v16 += 2;
        *v22 = 16 * (((8390657 * (unint64_t)(3584 * v68)) >> 32) >> 3) + 4096;
        v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v69)) >> 35) + 4096;
        v22 += 2;
        v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      v70 = 2 * v37;
    }
    else
    {
      v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      v71 = *v16 >> 4;
      v72 = v16[1] >> 4;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * v71)) >> 32) >> 3) + 4096;
      v22[1] = 16 * (((8390657 * (unint64_t)(3584 * v72)) >> 32) >> 3) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _WORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 4;
      v36 = v14 + 2;
      *v20 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
      v20[1] = 16 * ((8390657 * (unint64_t)(3584 * v43)) >> 35) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 4;
          v40 = v36[1] >> 4;
          v36 += 2;
          *v37 = 16 * (((8390657 * (unint64_t)(3584 * v39)) >> 32) >> 3) + 4096;
          v37[1] = 16 * ((8390657 * (unint64_t)(3584 * v40)) >> 35) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 4;
      v45 = v36[1] >> 4;
      *v37 = 16 * (((8390657 * (unint64_t)(3584 * v44)) >> 32) >> 3) + 4096;
      v37[1] = 16 * (((8390657 * (unint64_t)(3584 * v45)) >> 32) >> 3) + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 35;
        v50 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
        *v20 = v50;
        LOWORD(v49) = 16 * v49 + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 30072114688 * (v47[1] >> 4);
          v54 = 16 * (((8390657 * (unint64_t)(3584 * (*v47 >> 4))) >> 32) >> 3) + 4096;
          *v48 = 16 * (((8390657 * (unint64_t)(3584 * (*v47 >> 4))) >> 32) >> 3) + 4096;
          LODWORD(v53) = 16 * (v53 >> 35) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 >> 4;
        v57 = v47[1] >> 4;
        v58 = 16 * (((8390657 * (unint64_t)(3584 * v56)) >> 32) >> 3) + 4096;
        *v48 = v58;
        v59 = 16 * (((8390657 * (unint64_t)(3584 * v57)) >> 32) >> 3) + 4096;
        v48[1] = v59;
        v60 = (_WORD *)((char *)v48 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v14 >> 4;
      v63 = v14[1] >> 4;
      v14 += 2;
      *v20 = 16 * (((8390657 * (unint64_t)(3584 * v62)) >> 32) >> 3) + 4096;
      v20[1] = 16 * ((8390657 * (unint64_t)(3584 * v63)) >> 35) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v14 >> 4;
        v66 = v14[1] >> 4;
        v14 += 2;
        *v20 = 16 * (((8390657 * (unint64_t)(3584 * v65)) >> 32) >> 3) + 4096;
        v20[1] = 16 * ((8390657 * (unint64_t)(3584 * v66)) >> 35) + 4096;
        v20 += 2;
        v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v67 = *v14 >> 4;
      v68 = v14[1] >> 4;
      *v20 = 16 * (((8390657 * (unint64_t)(3584 * v67)) >> 32) >> 3) + 4096;
      v20[1] = 16 * (((8390657 * (unint64_t)(3584 * v68)) >> 32) >> 3) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  uint64_t i;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  __int16 v55;
  __int16 v56;
  _WORD *v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  unint64_t v66;
  unint64_t v67;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + 4 * v14);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v66 = v20;
    v21 = *a4;
    v22 = 2 * (v8 & 0xFFFFFFFE);
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + v22 + v25);
    v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    v67 = v19;
    v28 = 2 * v19;
    v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    v20 = v66;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v67;
  }
  v31 = v9 & 1;
  v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v8;
  v34 = v19 >> 1;
  v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v42 = v13[1] & 0xFFF0;
      v36 = v13 + 2;
      *v18 = *v13 & 0xFFF0;
      v18[1] = v42;
      v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 & 0xFFF0;
          v40 = v36[1] & 0xFFF0;
          v36 += 2;
          *v37 = v39;
          v37[1] = v40;
          v37 += 2;
          v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v13;
      v37 = v18;
      if (v34)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      v43 = *v36 & 0xFFF0;
      v44 = v36[1] & 0xFFF0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v32)
  {
    for (i = 0; i != v32; ++i)
    {
      v46 = v13;
      v47 = v18;
      if ((v33 & 1) != 0)
      {
        v48 = *v13 & 0xFFF0;
        v49 = v13[1] & 0xFFF0;
        v46 = v13 + 2;
        *v18 = v48;
        v18[1] = v49;
        v50 = (_WORD *)((char *)v18 + v17);
        *v50 = v48;
        v50[1] = v49;
        v47 = v18 + 2;
      }
      if (v34)
      {
        v51 = -(uint64_t)v34;
        do
        {
          v52 = *v46 & 0xFFF0;
          v53 = v46[1] & 0xFFF0;
          v46 += 2;
          *v47 = v52;
          v47[1] = v53;
          v47[2] = v52;
          v47[3] = v53;
          v54 = (_WORD *)((char *)v47 + v17);
          *v54 = v52;
          v54[1] = v53;
          v54[2] = v52;
          v54[3] = v53;
          v47 += 4;
          v30 = __CFADD__(v51++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v55 = *v46 & 0xFFF0;
        v56 = v46[1] & 0xFFF0;
        *v47 = v55;
        v47[1] = v56;
        v57 = (_WORD *)((char *)v47 + v17);
        *v57 = v55;
        v57[1] = v56;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 += v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v58 = *v13 & 0xFFF0;
      v59 = v13[1] & 0xFFF0;
      v13 += 2;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v34)
    {
      v60 = -(uint64_t)v34;
      do
      {
        v61 = *v13 & 0xFFF0;
        v62 = v13[1] & 0xFFF0;
        v13 += 2;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v30 = __CFADD__(v60++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19)
    {
      v63 = v13[1] & 0xFFF0;
      *v18 = *v13 & 0xFFF0;
      v18[1] = v63;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 4;
      v40 = v15 + 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v42)) >> 35) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (8390657 * (unint64_t)(3584 * (v40[1] >> 4))) >> 35;
      *v41 = 16 * (((8390657 * (unint64_t)(3584 * (*v40 >> 4))) >> 32) >> 3) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 4;
        v47 = v15 + 2;
        *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
        v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v49)) >> 35) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (8390657 * (unint64_t)(3584 * (v47[1] >> 4))) >> 35;
          v52 = 16 * (((8390657 * (unint64_t)(3584 * (*v47 >> 4))) >> 32) >> 3) + 4096;
          *v48 = 16 * (((8390657 * (unint64_t)(3584 * (*v47 >> 4))) >> 32) >> 3) + 4096;
          LOWORD(v51) = 16 * v51 + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 4;
      v56 = v15[1] >> 4;
      v15 += 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * v55)) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v56)) >> 35) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (8390657 * (unint64_t)(3584 * (v15[1] >> 4))) >> 35;
        *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
        v22[1] = 16 * v58 + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 4;
      v38 = v15 + 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v40)) >> 35) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (8390657 * (unint64_t)(3584 * (v38[1] >> 4))) >> 35;
      *v39 = 16 * (((8390657 * (unint64_t)(3584 * (*v38 >> 4))) >> 32) >> 3) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 4;
        v45 = v15 + 2;
        *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
        v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v47)) >> 35) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (8390657 * (unint64_t)(3584 * (v45[1] >> 4))) >> 35;
          v50 = 16 * (((8390657 * (unint64_t)(3584 * (*v45 >> 4))) >> 32) >> 3) + 4096;
          *v46 = 16 * (((8390657 * (unint64_t)(3584 * (*v45 >> 4))) >> 32) >> 3) + 4096;
          LOWORD(v49) = 16 * v49 + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 4;
      v54 = v15[1] >> 4;
      v15 += 2;
      *v22 = 16 * (((8390657 * (unint64_t)(3584 * v53)) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v54)) >> 35) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (8390657 * (unint64_t)(3584 * (v15[1] >> 4))) >> 35;
        *v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
        v22[1] = 16 * v56 + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t i;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v54 = v21;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (char *)(v25 + v13 + v26);
    v28 = (char *)(*a7 + v24 * v17 + v18);
    v29 = 2 * v21;
    v56 = v22;
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v22 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v21 = v54;
  }
  v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v33 = (v22 - (v10 & 1)) >> 1;
  else
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v35 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v15[1] & 0xFFF0;
      v36 = v15 + 2;
      *v20 = *v15 & 0xFFF0;
      v20[1] = v38;
      v37 = v20 + 2;
      if (!v35)
      {
LABEL_27:
        v15 = (_WORD *)((char *)v15 + v14);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v15;
      v37 = v20;
      if (!v35)
        goto LABEL_27;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = v36[1] & 0xFFF0;
      *v37 = *v36 & 0xFFF0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v31 = __CFADD__(v39++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v42 = v15;
      v43 = v20;
      if ((v34 & 1) != 0)
      {
        v44 = v15[1] & 0xFFF0;
        v42 = v15 + 2;
        *v20 = *v15 & 0xFFF0;
        v20[1] = v44;
        v43 = v20 + 2;
      }
      if (v35)
      {
        v45 = -(uint64_t)v35;
        do
        {
          v46 = *v42 & 0xFFF0;
          v47 = v42[1] & 0xFFF0;
          *v43 = v46;
          v43[1] = v47;
          v48 = (_WORD *)((char *)v43 + v19);
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          v31 = __CFADD__(v45++, 1);
        }
        while (!v31);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v49 = *v15 & 0xFFF0;
      v50 = v15[1] & 0xFFF0;
      v15 += 2;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v35)
    {
      v51 = -(uint64_t)v35;
      do
      {
        v52 = v15[1] & 0xFFF0;
        *v20 = *v15 & 0xFFF0;
        v20[1] = v52;
        v15 += 2;
        v20 += 2;
        v31 = __CFADD__(v51++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v40 = v16 + 2;
      *v23 = 16 * (((8390657 * (unint64_t)(3584 * (*v16 >> 4))) >> 32) >> 3) + 4096;
      v23[1] = 16 * ((8390657 * (unint64_t)(3584 * v42)) >> 35) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (8390657 * (unint64_t)(3584 * (v40[1] >> 4))) >> 35;
      *v41 = 16 * (((8390657 * (unint64_t)(3584 * (*v40 >> 4))) >> 32) >> 3) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 4;
        v47 = v16 + 2;
        *v23 = 16 * (((8390657 * (unint64_t)(3584 * (*v16 >> 4))) >> 32) >> 3) + 4096;
        v23[1] = 16 * ((8390657 * (unint64_t)(3584 * v49)) >> 35) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (8390657 * (unint64_t)(3584 * (v47[1] >> 4))) >> 35;
          *v48 = 16 * (((8390657 * (unint64_t)(3584 * (*v47 >> 4))) >> 32) >> 3) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t j;
  unsigned __int16 *v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  _WORD *v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _WORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = v8 & 0xFFFFFFFE;
  v13 = v10 + v8;
  v14 = (v10 + v8) & 1;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[2];
  v20 = a6[3];
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19)
    v23 = v19;
  v24 = v13 - v12 + v14;
  if (v24 >= v20)
    v24 = v20;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    v32 = a7[2] + v28 * v18 + 2 * v17;
    v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35)
    v35 = v24 >> 1;
  v36 = v9;
  v37 = v23 >> 1;
  v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1)
    v37 = (v23 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v16[1] >> 4;
      v39 = v16 + 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v46)) >> 34) << 6) + 4096;
      v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 >> 4;
          v43 = v39[1] >> 4;
          v39 += 2;
          *v40 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v42)) >> 32) >> 2) << 6)
               + 4096;
          v40[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v43)) >> 34) << 6) + 4096;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v16;
      v40 = v22;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      v47 = *v39 >> 4;
      v48 = v39[1] >> 4;
      *v40 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v47)) >> 32) >> 2) << 6)
           + 4096;
      v40[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v48)) >> 32) >> 2) << 6)
             + 4096;
    }
    v16 = (unsigned __int16 *)((char *)v16 + v15);
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v16;
      v51 = v22;
      if ((v36 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = (4195329 * (unint64_t)(896 * (v16[1] >> 4))) >> 34;
        v53 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
            + 4096;
        *v22 = v53;
        LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
        v22[1] = v52;
        v54 = (_WORD *)((char *)v22 + v21);
        *v54 = v53;
        v54[1] = v52;
        v51 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = 3759014784 * (v50[1] >> 4);
          v57 = (((4195329 * (unint64_t)(896 * (*v50 >> 4))) >> 32) >> 2 << 6) + 4096;
          *v51 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v50 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          LODWORD(v56) = (v56 >> 34 << 6) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          v58 = (_WORD *)((char *)v51 + v21);
          *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        v59 = *v50 >> 4;
        v60 = v50[1] >> 4;
        v61 = (((4195329 * (unint64_t)(896 * v59)) >> 32) >> 2 << 6) + 4096;
        *v51 = v61;
        v62 = (((4195329 * (unint64_t)(896 * v60)) >> 32) >> 2 << 6) + 4096;
        v51[1] = v62;
        v63 = (_WORD *)((char *)v51 + v21);
        *v63 = v61;
        v63[1] = v62;
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    v64 = 2 * v35;
  }
  else
  {
    v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v65 = *v16 >> 4;
      v66 = v16[1] >> 4;
      v16 += 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v65)) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v66)) >> 34) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      v67 = -(uint64_t)v37;
      do
      {
        v68 = *v16 >> 4;
        v69 = v16[1] >> 4;
        v16 += 2;
        *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v68)) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v69)) >> 34) << 6) + 4096;
        v22 += 2;
        v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      v70 = 2 * v37;
    }
    else
    {
      v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      v71 = *v16 >> 4;
      v72 = v16[1] >> 4;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v71)) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v72)) >> 32) >> 2) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unint64_t v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _WORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] >> 4;
      v36 = v14 + 2;
      *v20 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v43)) >> 34) << 6) + 4096;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 4;
          v40 = v36[1] >> 4;
          v36 += 2;
          *v37 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v39)) >> 32) >> 2) << 6)
               + 4096;
          v37[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v40)) >> 34) << 6) + 4096;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 >> 4;
      v45 = v36[1] >> 4;
      *v37 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v44)) >> 32) >> 2) << 6)
           + 4096;
      v37[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v45)) >> 32) >> 2) << 6)
             + 4096;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = (4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 34;
        v50 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
            + 4096;
        *v20 = v50;
        LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
        v20[1] = v49;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v50;
        v51[1] = v49;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = 3759014784 * (v47[1] >> 4);
          v54 = (((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2 << 6) + 4096;
          *v48 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          LODWORD(v53) = (v53 >> 34 << 6) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 >> 4;
        v57 = v47[1] >> 4;
        v58 = (((4195329 * (unint64_t)(896 * v56)) >> 32) >> 2 << 6) + 4096;
        *v48 = v58;
        v59 = (((4195329 * (unint64_t)(896 * v57)) >> 32) >> 2 << 6) + 4096;
        v48[1] = v59;
        v60 = (_WORD *)((char *)v48 + v19);
        *v60 = v58;
        v60[1] = v59;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v14 >> 4;
      v63 = v14[1] >> 4;
      v14 += 2;
      *v20 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v62)) >> 32) >> 2) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v63)) >> 34) << 6) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v14 >> 4;
        v66 = v14[1] >> 4;
        v14 += 2;
        *v20 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v65)) >> 32) >> 2) << 6)
             + 4096;
        v20[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v66)) >> 34) << 6) + 4096;
        v20 += 2;
        v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      v67 = *v14 >> 4;
      v68 = v14[1] >> 4;
      *v20 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v67)) >> 32) >> 2) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v68)) >> 32) >> 2) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _WORD *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  _WORD *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1];
      v36 = v14 + 2;
      *v20 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2) << 6;
      v20[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v43 >> 4))) >> 34) << 6;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v39 >> 4))) >> 32) >> 2) << 6;
          v37[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v40 >> 4))) >> 34) << 6;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36;
      v45 = v36[1];
      *v37 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v44 >> 4))) >> 32) >> 2) << 6;
      v37[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v45 >> 4))) >> 32) >> 2) << 6;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v49 = v14[1];
        v47 = v14 + 2;
        v50 = ((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2 << 6;
        *v20 = v50;
        v51 = ((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2 << 6;
        v20[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2) << 6;
        v52 = (_WORD *)((char *)v20 + v19);
        *v52 = v50;
        v52[1] = v51;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v53 = -(uint64_t)v34;
        do
        {
          v54 = v47[1];
          v55 = ((4195329 * (unint64_t)(1023 * (*v47 >> 4))) >> 32) >> 2 << 6;
          *v48 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v47 >> 4))) >> 32) >> 2) << 6;
          v56 = ((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2 << 6;
          v48[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2) << 6;
          v48[2] = v55;
          v48[3] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2) << 6;
          v57 = (_WORD *)((char *)v48 + v19);
          *v57 = v55;
          v57[1] = v56;
          v47 += 2;
          v57[2] = v55;
          v57[3] = v56;
          v48 += 4;
          v41 = __CFADD__(v53++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v58 = *v47;
        v59 = v47[1];
        v60 = ((4195329 * (unint64_t)(1023 * (v58 >> 4))) >> 32) >> 2 << 6;
        *v48 = v60;
        v61 = ((4195329 * (unint64_t)(1023 * (v59 >> 4))) >> 32) >> 2 << 6;
        v48[1] = v61;
        v62 = (_WORD *)((char *)v48 + v19);
        *v62 = v60;
        v62[1] = v61;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v63 = 2 * v32;
  }
  else
  {
    v63 = 0;
  }
  if ((v63 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v64 = *v14;
      v65 = v14[1];
      v14 += 2;
      *v20 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v64 >> 4))) >> 32) >> 2) << 6;
      v20[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v65 >> 4))) >> 34) << 6;
      v20 += 2;
    }
    if (v34)
    {
      v66 = -(uint64_t)v34;
      do
      {
        v67 = *v14;
        v68 = v14[1];
        v14 += 2;
        *v20 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v67 >> 4))) >> 32) >> 2) << 6;
        v20[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v68 >> 4))) >> 34) << 6;
        v20 += 2;
        v41 = __CFADD__(v66++, 1);
      }
      while (!v41);
      v69 = 2 * v34;
    }
    else
    {
      v69 = 0;
    }
    if ((v69 | (unint64_t)v35) < v21)
    {
      v70 = *v14;
      v71 = v14[1];
      *v20 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v70 >> 4))) >> 32) >> 2) << 6;
      v20[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v71 >> 4))) >> 32) >> 2) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = *a3 + v26 * v12;
    if (v12 >= v11)
      v30 = 0;
    else
      v30 = v26;
    v31 = v29 + 2 * (v9 + v8) + v30;
    v32 = a7[2] + v28 * v19 + v20;
    v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1)
    v36 = (v24 - (v11 & 1)) >> 1;
  else
    v36 = v24 >> 1;
  v37 = v8;
  v38 = v23 >> 1;
  v39 = (v23 - v9) >> 1;
  if (v38 >= v39)
    v38 = v39;
  if ((v11 & 1) != 0)
  {
    if ((v37 & 1) != 0)
    {
      v42 = v15[1] >> 4;
      v40 = v15 + 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v42)) >> 34) << 6) + 4096;
      v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v15;
      v41 = v22;
      if (!v38)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v38;
    do
    {
      v44 = (4195329 * (unint64_t)(896 * (v40[1] >> 4))) >> 34;
      *v41 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v40 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v15;
      v48 = v22;
      if ((v37 & 1) != 0)
      {
        v49 = v15[1] >> 4;
        v47 = v15 + 2;
        *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v49)) >> 34) << 6) + 4096;
        v48 = v22 + 2;
      }
      if (v38)
      {
        v50 = -(uint64_t)v38;
        do
        {
          v51 = (4195329 * (unint64_t)(896 * (v47[1] >> 4))) >> 34;
          v52 = (((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2 << 6) + 4096;
          *v48 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          LOWORD(v51) = ((_WORD)v51 << 6) + 4096;
          v48[1] = v51;
          v53 = (_WORD *)((char *)v48 + v21);
          *v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v54 = 2 * v36;
  }
  else
  {
    v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if ((v37 & 1) != 0)
    {
      v55 = *v15 >> 4;
      v56 = v15[1] >> 4;
      v15 += 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v55)) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v56)) >> 34) << 6) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      v57 = -(uint64_t)v38;
      do
      {
        v58 = (4195329 * (unint64_t)(896 * (v15[1] >> 4))) >> 34;
        *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((_WORD)v58 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] >> 4;
      v38 = v15 + 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v40)) >> 34) << 6) + 4096;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (4195329 * (unint64_t)(896 * (v38[1] >> 4))) >> 34;
      *v39 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v38 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] >> 4;
        v45 = v15 + 2;
        *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v47)) >> 34) << 6) + 4096;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = (4195329 * (unint64_t)(896 * (v45[1] >> 4))) >> 34;
          v50 = (((4195329 * (unint64_t)(896 * (*v45 >> 4))) >> 32) >> 2 << 6) + 4096;
          *v46 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v45 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
          v46[1] = v49;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 >> 4;
      v54 = v15[1] >> 4;
      v15 += 2;
      *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v53)) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v54)) >> 34) << 6) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = (4195329 * (unint64_t)(896 * (v15[1] >> 4))) >> 34;
        *v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((_WORD)v56 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t j;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1];
      v38 = v15 + 2;
      *v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2) << 6;
      v22[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v40 >> 4))) >> 34) << 6;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = (4195329 * (unint64_t)(1023 * (v38[1] >> 4))) >> 34;
      *v39 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v38 >> 4))) >> 32) >> 2) << 6;
      v39[1] = (_WORD)v42 << 6;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1];
        v45 = v15 + 2;
        *v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2) << 6;
        v22[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v47 >> 4))) >> 34) << 6;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = v45[1];
          v50 = ((4195329 * (unint64_t)(1023 * (*v45 >> 4))) >> 32) >> 2 << 6;
          *v46 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v45 >> 4))) >> 32) >> 2) << 6;
          v51 = ((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2 << 6;
          v46[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2) << 6;
          v52 = (_WORD *)((char *)v46 + v21);
          *v52 = v50;
          v52[1] = v51;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v53 = 2 * v34;
  }
  else
  {
    v53 = 0;
  }
  if ((v53 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v54 = *v15;
      v55 = v15[1];
      v15 += 2;
      *v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2) << 6;
      v22[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v55 >> 4))) >> 34) << 6;
      v22 += 2;
    }
    if (v36)
    {
      v56 = -(uint64_t)v36;
      do
      {
        v57 = (4195329 * (unint64_t)(1023 * (v15[1] >> 4))) >> 34;
        *v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2) << 6;
        v22[1] = (_WORD)v57 << 6;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v56++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v40 = v16 + 2;
      *v23 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v23[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v42)) >> 34) << 6) + 4096;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4195329 * (unint64_t)(896 * (v40[1] >> 4))) >> 34;
      *v41 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v40 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 4;
        v47 = v16 + 2;
        *v23 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v16 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v23[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v49)) >> 34) << 6) + 4096;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4195329 * (unint64_t)(896 * (v47[1] >> 4))) >> 34;
          *v48 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v47 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v18 - v17)
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  v35 = v26 >> 1;
  v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v42 = v16[1];
      v40 = v16 + 2;
      *v23 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2) << 6;
      v23[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v42 >> 4))) >> 34) << 6;
      v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
        goto LABEL_28;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (4195329 * (unint64_t)(1023 * (v40[1] >> 4))) >> 34;
      *v41 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v40 >> 4))) >> 32) >> 2) << 6;
      v41[1] = (_WORD)v44 << 6;
      v40 += 2;
      v41 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v16 >> 4))) >> 32) >> 2) << 6;
        v23[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 34) << 6;
        v48 = v23 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (4195329 * (unint64_t)(1023 * (v47[1] >> 4))) >> 34;
          *v48 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v47 >> 4))) >> 32) >> 2) << 6;
          v48[1] = (_WORD)v51 << 6;
          v47 += 2;
          v48 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t j;
  unsigned __int16 *v46;
  _BYTE *v47;
  unint64_t v48;
  char v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _BYTE *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = v10 >= v8;
    v24 = *a8;
    v25 = a8[2];
    v26 = *a3 + *a4 * v10;
    if (v23)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    v29 = a7[2] + v25 * v14 + v13;
    v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v29 + i) = -1;
          *(_BYTE *)(v30 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v32 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v9;
  v34 = v19 >> 1;
  v35 = v9 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v42 = v12[1] >> 4;
      v36 = v12 + 2;
      *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
      v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 >> 4;
          v40 = v36[1] >> 4;
          v36 += 2;
          *v37 = ((1048833 * (unint64_t)(224 * v39)) >> 32) + 16;
          v37[1] = ((1048833 * (unint64_t)(224 * v40)) >> 32) + 16;
          v37 += 2;
          v23 = __CFADD__(v38++, 1);
        }
        while (!v23);
        v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v12;
      v37 = v18;
      if (v34)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      v43 = *v36 >> 4;
      v44 = v36[1] >> 4;
      *v37 = ((1048833 * (unint64_t)(224 * v43)) >> 32) + 16;
      v37[1] = ((1048833 * (unint64_t)(224 * v44)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v46 = v12;
      v47 = v18;
      if ((v33 & 1) != 0)
      {
        v46 = v12 + 2;
        v48 = (1048833 * (unint64_t)(224 * (v12[1] >> 4))) >> 32;
        v49 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
        *v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        v50 = &v18[v17];
        *v50 = v49;
        v50[1] = v48;
        v47 = v18 + 2;
      }
      if (v34)
      {
        v51 = -(uint64_t)v34;
        do
        {
          v52 = 224 * (v46[1] >> 4);
          v53 = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          *v47 = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          v54 = ((1048833 * (unint64_t)v52) >> 32) + 16;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          *v55 = v54;
          v46 += 2;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          v23 = __CFADD__(v51++, 1);
        }
        while (!v23);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v56 = *v46 >> 4;
        v57 = v46[1] >> 4;
        v58 = ((1048833 * (unint64_t)(224 * v56)) >> 32) + 16;
        *v47 = v58;
        v59 = ((1048833 * (unint64_t)(224 * v57)) >> 32) + 16;
        v47[1] = v59;
        v60 = &v47[v17];
        *v60 = v58;
        v60[1] = v59;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v61 = 2 * v32;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | v8 & 1) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v62 = *v12 >> 4;
      v63 = v12[1] >> 4;
      v12 += 2;
      *v18 = ((1048833 * (unint64_t)(224 * v62)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v63)) >> 32) + 16;
      v18 += 2;
    }
    if (v34)
    {
      v64 = -(uint64_t)v34;
      do
      {
        v65 = *v12 >> 4;
        v66 = v12[1] >> 4;
        v12 += 2;
        *v18 = ((1048833 * (unint64_t)(224 * v65)) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v66)) >> 32) + 16;
        v18 += 2;
        v23 = __CFADD__(v64++, 1);
      }
      while (!v23);
      v67 = 2 * v34;
    }
    else
    {
      v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v19)
    {
      v68 = *v12 >> 4;
      v69 = v12[1] >> 4;
      *v18 = ((1048833 * (unint64_t)(224 * v68)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v69)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t j;
  unsigned __int16 *v44;
  _BYTE *v45;
  unint64_t v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = v10 >= v8;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v10;
    if (v22)
      v26 = 0;
    else
      v26 = *a4;
    v27 = v25 + 2 * (a2[4] & 0xFFFFFFFELL) + v26;
    v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v28 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v30)
    v30 = v20 >> 1;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v40 = v12[1] >> 4;
      v34 = v12 + 2;
      *v18 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v40)) >> 32) + 16;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34 >> 4;
          v38 = v34[1] >> 4;
          v34 += 2;
          *v35 = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((1048833 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          v22 = __CFADD__(v36++, 1);
        }
        while (!v22);
        v39 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_22;
    }
    v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v33) < v19)
    {
      v41 = *v34 >> 4;
      v42 = v34[1] >> 4;
      *v35 = ((1048833 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v44 = v12;
      v45 = v18;
      if ((v31 & 1) != 0)
      {
        v44 = v12 + 2;
        v46 = (1048833 * (unint64_t)(224 * (v12[1] >> 4))) >> 32;
        v47 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
        *v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        v48 = &v18[v17];
        *v48 = v47;
        v48[1] = v46;
        v45 = v18 + 2;
      }
      if (v32)
      {
        v49 = -(uint64_t)v32;
        do
        {
          v50 = 224 * (v44[1] >> 4);
          v51 = ((1048833 * (unint64_t)(224 * (*v44 >> 4))) >> 32) + 16;
          *v45 = ((1048833 * (unint64_t)(224 * (*v44 >> 4))) >> 32) + 16;
          v52 = ((1048833 * (unint64_t)v50) >> 32) + 16;
          v45[1] = v52;
          v45[2] = v51;
          v45[3] = v52;
          v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *v53 = v52;
          v44 += 2;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          v22 = __CFADD__(v49++, 1);
        }
        while (!v22);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v54 = *v44 >> 4;
        v55 = v44[1] >> 4;
        v56 = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
        *v45 = v56;
        v57 = ((1048833 * (unint64_t)(224 * v55)) >> 32) + 16;
        v45[1] = v57;
        v58 = &v45[v17];
        *v58 = v56;
        v58[1] = v57;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v59 = 2 * v30;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | v8 & 1) < v20)
  {
    if ((v31 & 1) != 0)
    {
      v60 = *v12 >> 4;
      v61 = v12[1] >> 4;
      v12 += 2;
      *v18 = ((1048833 * (unint64_t)(224 * v60)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      v62 = -(uint64_t)v32;
      do
      {
        v63 = *v12 >> 4;
        v64 = v12[1] >> 4;
        v12 += 2;
        *v18 = ((1048833 * (unint64_t)(224 * v63)) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v64)) >> 32) + 16;
        v18 += 2;
        v22 = __CFADD__(v62++, 1);
      }
      while (!v22);
      v65 = 2 * v32;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v33) < v19)
    {
      v66 = *v12 >> 4;
      v67 = v12[1] >> 4;
      *v18 = ((1048833 * (unint64_t)(224 * v66)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v67)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t j;
  unsigned __int16 *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v8)
      v25 = 0;
    else
      v25 = *a4;
    v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v27 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 4))) >> 32;
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v29 = v8 & 1;
  v30 = (v20 - v29) >> 1;
  if (v20 >> 1 < v30)
    v30 = v20 >> 1;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = v12[1];
      v34 = v12 + 2;
      *v18 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v41 >> 4))) >> 32;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          v34 += 2;
          *v35 = (1048833 * (unint64_t)(255 * (v37 >> 4))) >> 32;
          v35[1] = (1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_22;
    }
    v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v33) < v19)
    {
      v42 = *v34;
      v43 = v34[1];
      *v35 = (1048833 * (unint64_t)(255 * (v42 >> 4))) >> 32;
      v35[1] = (1048833 * (unint64_t)(255 * (v43 >> 4))) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v45 = v12;
      v46 = v18;
      if ((v31 & 1) != 0)
      {
        v45 = v12 + 2;
        v47 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
        v48 = (1048833 * (unint64_t)(255 * (v12[1] >> 4))) >> 32;
        *v18 = v47;
        v18[1] = v48;
        v49 = &v18[v17];
        *v49 = v47;
        v49[1] = v48;
        v46 = v18 + 2;
      }
      if (v32)
      {
        v50 = -(uint64_t)v32;
        do
        {
          v51 = v45[1];
          v52 = (1048833 * (unint64_t)(255 * (*v45 >> 4))) >> 32;
          *v46 = v52;
          v53 = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
          v46[1] = v53;
          v46[2] = v52;
          v46[3] = v53;
          v54 = &v46[v17 + 1];
          *(v54 - 1) = v52;
          *v54 = v53;
          v45 += 2;
          v54[1] = v52;
          v54[2] = v53;
          v46 += 4;
          v39 = __CFADD__(v50++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v55 = (1048833 * (unint64_t)(255 * (*v45 >> 4))) >> 32;
        v56 = (1048833 * (unint64_t)(255 * (v45[1] >> 4))) >> 32;
        *v46 = v55;
        v46[1] = v56;
        v57 = &v46[v17];
        *v57 = v55;
        v57[1] = v56;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    v58 = 2 * v30;
  }
  else
  {
    v58 = 0;
  }
  if ((v58 | (unint64_t)v29) < v20)
  {
    if ((v31 & 1) != 0)
    {
      v59 = *v12;
      v60 = v12[1];
      v12 += 2;
      *v18 = (1048833 * (unint64_t)(255 * (v59 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v60 >> 4))) >> 32;
      v18 += 2;
    }
    if (v32)
    {
      v61 = -(uint64_t)v32;
      do
      {
        v62 = *v12;
        v63 = v12[1];
        v12 += 2;
        *v18 = (1048833 * (unint64_t)(255 * (v62 >> 4))) >> 32;
        v18[1] = (1048833 * (unint64_t)(255 * (v63 >> 4))) >> 32;
        v18 += 2;
        v39 = __CFADD__(v61++, 1);
      }
      while (!v39);
      v64 = 2 * v32;
    }
    else
    {
      v64 = 0;
    }
    if ((v64 | (unint64_t)v33) < v19)
    {
      v65 = *v12;
      v66 = v12[1];
      *v18 = (1048833 * (unint64_t)(255 * (v65 >> 4))) >> 32;
      v18[1] = (1048833 * (unint64_t)(255 * (v66 >> 4))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t j;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = v11 >= v10;
    v26 = *a8;
    v27 = a8[2];
    v28 = *a3 + *a4 * v11;
    if (v25)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v12 + v29;
    v31 = a7[2] + v27 * v18 + v16;
    v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v31 + i) = -1;
          *(_BYTE *)(v32 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v34 = v22 >> 1;
  v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1)
    v34 = (v22 - (v10 & 1)) >> 1;
  v36 = v21 >> 1;
  v37 = v21 - v9;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v14[1] >> 4;
      v39 = v14 + 2;
      *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v41)) >> 32) + 16;
      v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (1048833 * (unint64_t)(224 * (v39[1] >> 4))) >> 32;
      *v40 = ((1048833 * (unint64_t)(224 * (*v39 >> 4))) >> 32) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v14;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v47 = v14[1] >> 4;
        v45 = v14 + 2;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
        v46 = v20 + 2;
      }
      if (v38)
      {
        v48 = -(uint64_t)v38;
        do
        {
          v49 = (1048833 * (unint64_t)(224 * (v45[1] >> 4))) >> 32;
          v50 = ((1048833 * (unint64_t)(224 * (*v45 >> 4))) >> 32) + 16;
          *v46 = ((1048833 * (unint64_t)(224 * (*v45 >> 4))) >> 32) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          v51 = &v46[v19];
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v53 = *v14 >> 4;
      v54 = v14[1] >> 4;
      v14 += 2;
      *v20 = ((1048833 * (unint64_t)(224 * v53)) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
      v20 += 2;
    }
    if (v38)
    {
      v55 = -(uint64_t)v38;
      do
      {
        v56 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t j;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v28 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v30 = v22 >> 1;
  v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v30 = (v22 - (v10 & 1)) >> 1;
  v32 = v21 >> 1;
  v33 = v21 - v9;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v14[1] >> 4;
      v35 = v14 + 2;
      *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = (1048833 * (unint64_t)(224 * (v35[1] >> 4))) >> 32;
      *v36 = ((1048833 * (unint64_t)(224 * (*v35 >> 4))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v42 = v14;
      v43 = v20;
      if ((v8 & 1) != 0)
      {
        v44 = v14[1] >> 4;
        v42 = v14 + 2;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = ((1048833 * (unint64_t)(224 * v44)) >> 32) + 16;
        v43 = v20 + 2;
      }
      if (v34)
      {
        v45 = -(uint64_t)v34;
        do
        {
          v46 = (1048833 * (unint64_t)(224 * (v42[1] >> 4))) >> 32;
          v47 = ((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32) + 16;
          *v43 = ((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          v48 = &v43[v19];
          *v48 = v47;
          v48[1] = v46;
          v43 += 2;
          v42 += 2;
          v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v49 = 2 * v30;
  }
  else
  {
    v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v50 = *v14 >> 4;
      v51 = v14[1] >> 4;
      v14 += 2;
      *v20 = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v51)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      v52 = -(uint64_t)v34;
      do
      {
        v53 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        *v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = v53 + 16;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t j;
  unsigned __int16 *v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v28 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v30 = v22 >> 1;
  v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v30 = (v22 - (v10 & 1)) >> 1;
  v32 = v21 >> 1;
  v33 = v21 - v9;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v14[1];
      v35 = v14 + 2;
      *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v37 >> 4))) >> 32;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = v35[1];
      *v36 = (1048833 * (unint64_t)(255 * (*v35 >> 4))) >> 32;
      v36[1] = (1048833 * (unint64_t)(255 * (v39 >> 4))) >> 32;
      v36 += 2;
      v35 += 2;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v42 = v14;
      v43 = v20;
      if ((v8 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 2;
        *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v20[1] = (1048833 * (unint64_t)(255 * (v44 >> 4))) >> 32;
        v43 = v20 + 2;
      }
      if (v34)
      {
        v45 = -(uint64_t)v34;
        do
        {
          v46 = (1048833 * (unint64_t)(255 * (*v42 >> 4))) >> 32;
          v47 = (1048833 * (unint64_t)(255 * (v42[1] >> 4))) >> 32;
          *v43 = v46;
          v43[1] = v47;
          v48 = &v43[v19];
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v49 = 2 * v30;
  }
  else
  {
    v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 2;
      *v20 = (1048833 * (unint64_t)(255 * (v50 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
      v20 += 2;
    }
    if (v34)
    {
      v52 = -(uint64_t)v34;
      do
      {
        v53 = v14[1];
        *v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v20[1] = (1048833 * (unint64_t)(255 * (v53 >> 4))) >> 32;
        v20 += 2;
        v14 += 2;
        v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t j;
  unsigned __int16 *v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = v12 >= v9;
    v29 = *a8;
    v30 = a8[2];
    v31 = *a3 + *a4 * v12;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v14 + v32;
    v34 = a7[2] + v30 * v19 + v17;
    v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v34 + i) = -1;
          *(_BYTE *)(v35 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v33 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v37 = v24 >> 1;
  v38 = v24 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v23 >> 1;
  v41 = v23 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v45 = v16[1] >> 4;
      v43 = v16 + 2;
      *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v22[1] = ((1048833 * (unint64_t)(224 * v45)) >> 32) + 16;
      v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v22;
      if (!v42)
        goto LABEL_29;
    }
    v46 = -(uint64_t)v42;
    do
    {
      v47 = (1048833 * (unint64_t)(224 * (v43[1] >> 4))) >> 32;
      *v44 = ((1048833 * (unint64_t)(224 * (*v43 >> 4))) >> 32) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v49 = v16;
      v50 = v22;
      if ((v8 & 1) != 0)
      {
        v51 = v16[1] >> 4;
        v49 = v16 + 2;
        *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v22[1] = ((1048833 * (unint64_t)(224 * v51)) >> 32) + 16;
        v50 = v22 + 2;
      }
      if (v42)
      {
        v52 = -(uint64_t)v42;
        do
        {
          v53 = (1048833 * (unint64_t)(224 * (v49[1] >> 4))) >> 32;
          *v50 = ((1048833 * (unint64_t)(224 * (*v49 >> 4))) >> 32) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v14 + v30;
    v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v32 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v34 = v24 >> 1;
  v35 = v24 - v11;
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1] >> 4;
      v40 = v16 + 2;
      *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v22[1] = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = (1048833 * (unint64_t)(224 * (v40[1] >> 4))) >> 32;
      *v41 = ((1048833 * (unint64_t)(224 * (*v40 >> 4))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = v16[1] >> 4;
        v47 = v16 + 2;
        *v22 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v22[1] = ((1048833 * (unint64_t)(224 * v49)) >> 32) + 16;
        v48 = v22 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = (1048833 * (unint64_t)(224 * (v47[1] >> 4))) >> 32;
          *v48 = ((1048833 * (unint64_t)(224 * (*v47 >> 4))) >> 32) + 16;
          v48[1] = v51 + 16;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t j;
  unsigned __int16 *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12;
    if (v12 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v14 + v30;
    v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v32 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v34 = v24 >> 1;
  v35 = v24 - v11;
  if (v34 >= v35 >> 1)
    v36 = v35 >> 1;
  else
    v36 = v34;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = v16[1];
      v40 = v16 + 2;
      *v22 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
      v22[1] = (1048833 * (unint64_t)(255 * (v42 >> 4))) >> 32;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = v40[1];
      *v41 = (1048833 * (unint64_t)(255 * (*v40 >> 4))) >> 32;
      v41[1] = (1048833 * (unint64_t)(255 * (v44 >> 4))) >> 32;
      v41 += 2;
      v40 += 2;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v22 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
        v22[1] = (1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32;
        v48 = v22 + 2;
      }
      if (v39)
      {
        v50 = -(uint64_t)v39;
        do
        {
          v51 = v47[1];
          *v48 = (1048833 * (unint64_t)(255 * (*v47 >> 4))) >> 32;
          v48[1] = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
          v48 += 2;
          v47 += 2;
          v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t j;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v34 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v27 >> 1;
  v38 = v27 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 >> 1;
  v41 = v26 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = v16[1] >> 4;
      v43 = v16 + 2;
      *v24 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
      v44 = v24 + 1;
      *v25 = ((1048833 * (unint64_t)(224 * v46)) >> 32) + 16;
      v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v24;
      v45 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42)
        goto LABEL_29;
    }
    v47 = -(uint64_t)v42;
    do
    {
      v48 = 234938592 * (v43[1] >> 4);
      *v44++ = ((1048833 * (unint64_t)(224 * (*v43 >> 4))) >> 32) + 16;
      *v45++ = BYTE4(v48) + 16;
      v43 += 2;
      v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v9 & 1) != 0)
      {
        v51 = v16 + 2;
        v54 = (1048833 * (unint64_t)(224 * (v16[1] >> 4))) >> 32;
        *v24 = ((1048833 * (unint64_t)(224 * (*v16 >> 4))) >> 32) + 16;
        v52 = v24 + 1;
        *v25 = v54 + 16;
        v53 = v25 + 1;
      }
      if (v42)
      {
        v55 = -(uint64_t)v42;
        do
        {
          v56 = 234938592 * (v51[1] >> 4);
          *v52++ = ((1048833 * (unint64_t)(224 * (*v51 >> 4))) >> 32) + 16;
          *v53++ = BYTE4(v56) + 16;
          v51 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf20_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int16 *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v34 + 2 * i) >> 4))) >> 32;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v27 >> 1;
  v38 = v27 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 >> 1;
  v41 = v26 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = v16[1];
      v43 = v16 + 2;
      *v24 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
      v44 = v24 + 1;
      *v25 = (1048833 * (unint64_t)(255 * (v46 >> 4))) >> 32;
      v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v24;
      v45 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42)
        goto LABEL_29;
    }
    v47 = -(uint64_t)v42;
    do
    {
      v48 = v43[1];
      *v44++ = (1048833 * (unint64_t)(255 * (*v43 >> 4))) >> 32;
      *v45++ = (1048833 * (unint64_t)(255 * (v48 >> 4))) >> 32;
      v43 += 2;
      v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v9 & 1) != 0)
      {
        v54 = v16[1];
        v51 = v16 + 2;
        *v24 = (1048833 * (unint64_t)(255 * (*v16 >> 4))) >> 32;
        v52 = v24 + 1;
        *v25 = (1048833 * (unint64_t)(255 * (v54 >> 4))) >> 32;
        v53 = v25 + 1;
      }
      if (v42)
      {
        v55 = -(uint64_t)v42;
        do
        {
          v56 = v51[1];
          *v52++ = (1048833 * (unint64_t)(255 * (*v51 >> 4))) >> 32;
          *v53++ = (1048833 * (unint64_t)(255 * (v56 >> 4))) >> 32;
          v51 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_x4as_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  _WORD *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 4 * v16;
    v23 = v20 + 2 * v16;
    v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          v27 = (_WORD *)(v15 + 2 * v25);
          v28 = *(_WORD *)(v22 + v25) & 0xFFC0;
          v29 = *(_WORD *)(v22 + v25 + 2) & 0xFFC0;
          v30 = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
          *v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_x4as_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  _BYTE *v27;
  char v28;
  char v29;
  char v30;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 4 * v16;
    v23 = v20 + 2 * v16;
    v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          v27 = (_BYTE *)(v15 + v25);
          v28 = *(_BYTE *)(v22 + v25 + 1);
          v29 = *(_BYTE *)(v22 + v25 + 3);
          v30 = *(_BYTE *)(v24 + 2 * i + 1);
          *v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_x4as_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v38 = v13[1] & 0xFFC0;
      v36 = v13 + 2;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36 & 0xFFC0;
        v42 = v36[1] & 0xFFC0;
        v36 += 2;
        *v37 = v41;
        v37[1] = v42;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 & 0xFFC0;
      v44 = v36[1] & 0xFFC0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v49 = v13[1] & 0xFFC0;
        v47 = v13 + 2;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47 & 0xFFC0;
          v53 = v47[1] & 0xFFC0;
          v47 += 2;
          *v48 = v52;
          v48[1] = v53;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 & 0xFFC0;
        v55 = v47[1] & 0xFFC0;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13 & 0xFFC0;
      v57 = v13[1] & 0xFFC0;
      v13 += 2;
      *v17 = v56;
      v17[1] = v57;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13 & 0xFFC0;
        v60 = v13[1] & 0xFFC0;
        v13 += 2;
        *v17 = v59;
        v17[1] = v60;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 & 0xFFC0;
      v62 = v13[1] & 0xFFC0;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  unsigned int v48;
  unint64_t v49;
  _WORD *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  _WORD *v57;
  unsigned int v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
      *v19 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = ((v38[3] & 0xFFC0) + (v38[1] & 0xFFC0u)) >> 1;
        *v42 = ((v38[2] & 0xFFC0) + (*v38 & 0xFFC0u)) >> 1;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v19 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = ((v46[3] & 0xFFC0) + (v46[1] & 0xFFC0u)) >> 1;
          *v50 = ((v46[2] & 0xFFC0) + (*v46 & 0xFFC0u)) >> 1;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14 & 0xFFC0;
      v53 = v14[1] & 0xFFC0;
      v54 = v14[2] & 0xFFC0;
      v55 = v14[3] & 0xFFC0;
      v14 += 4;
      *v19 = (v54 + v52) >> 1;
      v19[1] = (v55 + v53) >> 1;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v57 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v40 = v14[1] & 0xFFC0;
      v38 = v14 + 4;
      *v19 = *v14 & 0xFFC0;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v48 = v14[1] & 0xFFC0;
        v46 = v14 + 4;
        *v19 = *v14 & 0xFFC0;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] & 0xFFC0;
          *v50 = *v46 & 0xFFC0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14 & 0xFFC0;
      v53 = v14[1] & 0xFFC0;
      v14 += 4;
      *v19 = v52;
      v19[1] = v53;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] & 0xFFC0;
        *v55 = *v14 & 0xFFC0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_Copy_x4as_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  __int16 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 & 0xFFC0;
        v37[1] = v42 & 0xFFC0;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 & 0xFFC0;
      v44 = v36[1] & 0xFFC0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 & 0xFFC0;
          v48[1] = v53 & 0xFFC0;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 & 0xFFC0;
        v55 = v47[1] & 0xFFC0;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 & 0xFFC0;
      v17[1] = v57 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 & 0xFFC0;
        v17[1] = v60 & 0xFFC0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 & 0xFFC0;
      v62 = v13[1] & 0xFFC0;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  _WORD *v57;
  int v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
      *v19 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
      v19[1] = 8 * v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = (((unsigned __int16)v38[3] >> 4) & 0xFFC) + (((unsigned __int16)v38[1] >> 4) & 0xFFC);
        *v42 = 8 * (((v38[2] >> 4) & 0xFFC) + ((*v38 >> 4) & 0xFFC));
        v42[1] = 8 * v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v19 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v19[1] = 8 * v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (((unsigned __int16)v46[3] >> 4) & 0xFFC) + (((unsigned __int16)v46[1] >> 4) & 0xFFC);
          *v50 = 8 * (((v46[2] >> 4) & 0xFFC) + ((*v46 >> 4) & 0xFFC));
          v50[1] = 8 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = 8 * (((v54 >> 4) & 0xFFC) + ((v52 >> 4) & 0xFFC));
      v19[1] = 8 * (((v55 >> 4) & 0xFFC) + ((v53 >> 4) & 0xFFC));
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v57 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v57[1] = 8 * v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] & 0xFFC0;
      *v19 = *v14 & 0xFFC0;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] & 0xFFC0;
        *v19 = *v14 & 0xFFC0;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] & 0xFFC0;
          *v50 = *v46 & 0xFFC0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] & 0xFFC0;
        *v55 = *v14 & 0xFFC0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  int v37;
  unint64_t v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  int v55;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v58 = a8[1];
    v60 = a4[1];
    v62 = a8[2];
    v63 = *a8;
    v24 = (char *)(a7[2] + v62 * v17 + v18);
    v25 = (char *)(*a7 + *a8 * v17 + v18);
    v26 = a4[2];
    v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v61 = v22;
    v30 = 2 * v22;
    v59 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v63;
      v27 += v26;
      v24 += v62;
      --v23;
    }
    while (v23);
    v19 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v60;
    v22 = v61;
    v23 = v59;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 4;
      v37 = (v13[3] >> 6) + (v13[1] >> 6);
      *v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * v37 + 32) & 0xFFC0;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = ((unsigned __int16)v35[3] >> 6) + ((unsigned __int16)v35[1] >> 6);
        *v39 = (32 * ((v35[2] >> 6) + (*v35 >> 6)) + 32) & 0xFFC0;
        v39[1] = (32 * v40 + 32) & 0xFFC0;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v13 + 4;
        v45 = (v13[3] >> 6) + (v13[1] >> 6);
        *v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v20[1] = (32 * v45 + 32) & 0xFFC0;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = ((unsigned __int16)v43[3] >> 6) + ((unsigned __int16)v43[1] >> 6);
          *v47 = (32 * ((v43[2] >> 6) + (*v43 >> 6)) + 32) & 0xFFC0;
          v47[1] = (32 * v48 + 32) & 0xFFC0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13;
      v50 = v13[1];
      v51 = v13[2] >> 6;
      v52 = v13[3] >> 6;
      v13 += 4;
      *v20 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v13[3] >> 6) + (v13[1] >> 6);
        *v54 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v54[1] = (32 * v55 + 32) & 0xFFC0;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  __int16 v37;
  unint64_t v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  _WORD *v52;
  __int16 v53;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v56 = a8[1];
    v58 = a4[1];
    v60 = a8[2];
    v61 = *a8;
    v24 = (char *)(a7[2] + v60 * v17 + v18);
    v25 = (char *)(*a7 + *a8 * v17 + v18);
    v26 = a4[2];
    v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v59 = v22;
    v30 = 2 * v22;
    v57 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v61;
      v27 += v26;
      v24 += v60;
      --v23;
    }
    while (v23);
    v19 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v58;
    v22 = v59;
    v23 = v57;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = v13[1] & 0xFFC0;
      v35 = v13 + 4;
      *v20 = *v13 & 0xFFC0;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = v35[1] & 0xFFC0;
        *v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v45 = v13[1] & 0xFFC0;
        v43 = v13 + 4;
        *v20 = *v13 & 0xFFC0;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1] & 0xFFC0;
          *v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13 & 0xFFC0;
      v50 = v13[1] & 0xFFC0;
      v13 += 4;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = v13[1] & 0xFFC0;
        *v52 = *v13 & 0xFFC0;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_Copy_x4as_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + v15;
    v26 = v22 + v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v25 + i) = *(_WORD *)(v27 + 2 * i);
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9 & 1;
  if (v10 >= v32)
    v33 = v9 & 1;
  else
    v33 = 0;
  v34 = v10 - v33;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = *(_BYTE *)(v13 + 3);
      v35 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v37;
      v36 = v17 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v17;
    }
    if (v10 == v33)
    {
      v38 = 0;
    }
    else
    {
      v39 = v10 - v33;
      do
      {
        v40 = *(_BYTE *)(v35 + 1);
        v41 = *(_BYTE *)(v35 + 3);
        v35 += 4;
        *v36 = v40;
        v36[1] = v41;
        v36 += 2;
        --v39;
      }
      while (v39);
      v38 = v10 - v33;
    }
    if (v38 + v32 < v10)
    {
      v42 = *(_BYTE *)(v35 + 1);
      v43 = *(_BYTE *)(v35 + 3);
      *v36 = v42;
      v36[1] = v43;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v11 - v31;
    do
    {
      v46 = v13;
      v47 = v17;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v13 + 3);
        v46 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v48;
        v47 = v17 + 2;
      }
      if (v10 == v33)
      {
        v49 = 0;
      }
      else
      {
        v50 = v10 - v33;
        do
        {
          v51 = *(_BYTE *)(v46 + 1);
          v52 = *(_BYTE *)(v46 + 3);
          v46 += 4;
          *v47 = v51;
          v47[1] = v52;
          v47 += 2;
          --v50;
        }
        while (v50);
        v49 = v10 - v33;
      }
      if (v49 + v32 < v10)
      {
        v53 = *(_BYTE *)(v46 + 1);
        v54 = *(_BYTE *)(v46 + 3);
        *v47 = v53;
        v47[1] = v54;
      }
      v13 += v12;
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v11)
  {
    if ((v9 & 1) != 0)
    {
      v55 = *(_BYTE *)(v13 + 1);
      v56 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v55;
      v17[1] = v56;
      v17 += 2;
    }
    if (v10 == v33)
    {
      v34 = 0;
    }
    else
    {
      v57 = v10 - v33;
      do
      {
        v58 = *(_BYTE *)(v13 + 1);
        v59 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v58;
        v17[1] = v59;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v34 + v32 < v10)
    {
      v60 = *(_BYTE *)(v13 + 1);
      v61 = *(_BYTE *)(v13 + 3);
      *v17 = v60;
      v17[1] = v61;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = a4[2];
    v27 = v23 + v15;
    v28 = v24 + v15;
    v29 = a3[2] + v26 * v12 + 2 * v11;
    v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v19 < v10)
    v10 = 0;
  v35 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 8;
      v38 = (v14[3] + v14[7] + 1) >> 1;
      *v18 = (v14[1] + v14[5] + 1) >> 1;
      v18[1] = v38;
      v37 = v18 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v18;
    }
    if (v19 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (v36[3] + v36[7] + 1) >> 1;
        *v40 = (v36[1] + v36[5] + 1) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v18;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 8;
        v46 = (v14[3] + v14[7] + 1) >> 1;
        *v18 = (v14[1] + v14[5] + 1) >> 1;
        v18[1] = v46;
        v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (v44[3] + v44[7] + 1) >> 1;
          *v48 = (v44[1] + v44[5] + 1) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = v14[1];
      v51 = v14[3];
      v52 = v14[5];
      v53 = v14[7];
      v14 += 8;
      *v18 = (v50 + v52 + 1) >> 1;
      v18[1] = (v51 + v53 + 1) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v18[v54];
        v56 = (v14[3] + v14[7] + 1) >> 1;
        *v55 = (v14[1] + v14[5] + 1) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 8;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char v46;
  unint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  _BYTE *v53;
  char v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = a4[2];
    v27 = v23 + v15;
    v28 = v24 + v15;
    v29 = a3[2] + v26 * v12 + 2 * v11;
    v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v19 < v10)
    v10 = 0;
  v35 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = *(_BYTE *)(v14 + 3);
      v36 = v14 + 8;
      *v18 = *(_BYTE *)(v14 + 1);
      v18[1] = v38;
      v37 = v18 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v18;
    }
    if (v19 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = *(_BYTE *)(v36 + 3);
        *v40 = *(_BYTE *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v18;
      if ((v34 & 1) != 0)
      {
        v46 = *(_BYTE *)(v14 + 3);
        v44 = v14 + 8;
        *v18 = *(_BYTE *)(v14 + 1);
        v18[1] = v46;
        v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = *(_BYTE *)(v44 + 3);
          *v48 = *(_BYTE *)(v44 + 1);
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *(_BYTE *)(v14 + 1);
      v51 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v18 = v50;
      v18[1] = v51;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v18[v52];
        v54 = *(_BYTE *)(v14 + 3);
        *v53 = *(_BYTE *)(v14 + 1);
        v53[1] = v54;
        v52 += 2;
        v14 += 8;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _BYTE *v50;
  unsigned int v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16)
    v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  v22 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17)
    v22 = v18 - v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    v29 = a4[2];
    v30 = a7[2] + v26 * v17 + v16;
    v31 = *a7 + v25 * v17 + v16;
    v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(_BYTE *)(v31 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v22 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v21 < v10)
    v10 = 0;
  v35 = v21 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v15 + 8;
      v38 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v20[1] = v38;
      v37 = v20 + 2;
    }
    else
    {
      v36 = v15;
      v37 = v20;
    }
    if (v21 != v10)
    {
      v39 = 0;
      v40 = v36 + 4;
      do
      {
        v41 = &v37[v39];
        v42 = (*(v40 - 1) + v40[3] + v40[v14 - 1] + v40[v14 + 3] + 2) >> 2;
        *v41 = (*(v40 - 3) + v40[1] + v40[v14 - 3] + v40[v14 + 1] + 2) >> 2;
        v41[1] = v42;
        v39 += 2;
        v40 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    v43 = 0;
    v44 = v22 - v34;
    do
    {
      v45 = v15;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v45 = v15 + 8;
        v47 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v20[1] = v47;
        v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        v48 = 0;
        v49 = v45 + 4;
        do
        {
          v50 = &v46[v48];
          v51 = (*(v49 - 1) + v49[3] + v49[v14 - 1] + v49[v14 + 3] + 2) >> 2;
          *v50 = (*(v49 - 3) + v49[1] + v49[v14 - 3] + v49[v14 + 1] + 2) >> 2;
          v50[1] = v51;
          v48 += 2;
          v49 += 8;
        }
        while (v48 < v35);
      }
      v15 += 2 * v14;
      v20 += v19;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_x4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  _BYTE *v49;
  char v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16)
    v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  v22 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17)
    v22 = v18 - v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    v29 = a4[2];
    v30 = a7[2] + v26 * v17 + v16;
    v31 = *a7 + v25 * v17 + v16;
    v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(_BYTE *)(v31 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v22 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v21 < v10)
    v10 = 0;
  v35 = v21 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = *(_BYTE *)(v15 + 3);
      v36 = v15 + 8;
      *v20 = *(_BYTE *)(v15 + 1);
      v20[1] = v38;
      v37 = v20 + 2;
    }
    else
    {
      v36 = v15;
      v37 = v20;
    }
    if (v21 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = *(_BYTE *)(v36 + 3);
        *v40 = *(_BYTE *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    v42 = 0;
    v43 = v22 - v34;
    v44 = 2 * v14;
    do
    {
      v45 = v15;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v47 = *(_BYTE *)(v15 + 3);
        v45 = v15 + 8;
        *v20 = *(_BYTE *)(v15 + 1);
        v20[1] = v47;
        v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        v48 = 0;
        do
        {
          v49 = &v46[v48];
          v50 = *(_BYTE *)(v45 + 3);
          *v49 = *(_BYTE *)(v45 + 1);
          v49[1] = v50;
          v48 += 2;
          v45 += 8;
        }
        while (v48 < v35);
      }
      v15 += v44;
      v20 += v19;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_Copy_x2as_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  _WORD *v29;
  _WORD *v30;
  __int16 v31;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = (_WORD *)(v19 + 2 * v8);
    v23 = v20 + 2 * v8;
    v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v28 = *v29 & 0xFFC0;
            v27 = v29[1] & 0xFFC0;
            v29 += 2;
          }
          v30 = (_WORD *)(v16 + v25);
          v31 = *(_WORD *)(v24 + 2 * v26) & 0xFFC0;
          *v30 = *(_WORD *)(v23 + 2 * v26);
          v30[1] = v31;
          v30[2] = v28;
          v30[3] = v27;
          ++v26;
          v25 += 8;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v13);
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_x2as_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 2 * v8;
    v23 = v20 + 2 * v8;
    v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v28 = *(_BYTE *)(v29 + 1);
            v27 = *(_BYTE *)(v29 + 3);
            v29 += 4;
          }
          v30 = (_BYTE *)(v16 + v25);
          v31 = *(_BYTE *)(v24 + 2 * v26 + 1);
          *v30 = *(_WORD *)(v23 + 2 * v26);
          v30[1] = v31;
          v30[2] = v28;
          v30[3] = v27;
          ++v26;
          v25 += 4;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_x422_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  __int16 v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v18 + 2 * i);
          v23 = (_WORD *)(v19 + 2 * i);
          v24 = (_WORD *)(v16 + v20);
          v25 = *v22 & 0xFFC0;
          LOWORD(v22) = v22[1] & 0xFFC0;
          v26 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          *v24 = v25;
          v24[1] = v26;
          v24[2] = (_WORD)v22;
          v24[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_x422_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = v16;
        do
        {
          v22 = v18 + 2 * v20;
          v23 = v19 + 2 * v20;
          v24 = *(_BYTE *)(v22 + 1);
          LOBYTE(v22) = *(_BYTE *)(v22 + 3);
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v21 = v24;
          v21[1] = v25;
          v21[2] = v22;
          v21[3] = v23;
          v21 += 4;
          v20 += 2;
        }
        while (v20 < v11);
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_x2as_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  BOOL v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  int16x4_t *v50;
  __int16 v51;
  uint64_t v52;
  _WORD *v53;
  int16x4_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14;
    v23 = *a7 + *a8 * v14;
    v24 = *a4;
    v25 = 2 * (v9 & 0xFFFFFFFE);
    v26 = a4[2];
    v27 = v22 + 2 * v15;
    v28 = v23 + 2 * v15;
    v29 = a3[2] + v26 * v8 + v25;
    v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  v32 = v8 & 1;
  if (v10 >= v32)
    v33 = v8 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v18 >> 1;
  v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1)
    v35 = (v18 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v44 = v13[1] & 0xFFC0;
      v37 = v13 + 2;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v44;
      v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37 & 0xFFC0;
          v41 = v37[1] & 0xFFC0;
          v37 += 2;
          *v38 = v40;
          v38[1] = v41;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      v37 = v13;
      v38 = v17;
      if (v35)
        goto LABEL_19;
    }
    v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      v45 = *v37 & 0xFFC0;
      v46 = v37[1] & 0xFFC0;
      *v38 = v45;
      v38[1] = v46;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v10 - v33;
    do
    {
      v49 = v13;
      v50 = (int16x4_t *)v17;
      if ((v34 & 1) != 0)
      {
        v51 = v13[1] & 0xFFC0;
        v49 = v13 + 2;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v51;
        v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFC0;
          v54.i32[1] = v49[1] & 0xFFC0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        v55 = *v53 & 0xFFC0;
        v56 = v53[1] & 0xFFC0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if ((v34 & 1) != 0)
    {
      v57 = *v13 & 0xFFC0;
      v58 = v13[1] & 0xFFC0;
      v13 += 2;
      *v17 = v57;
      v17[1] = v58;
      v17 += 2;
    }
    if (v35)
    {
      v59 = -(uint64_t)v35;
      do
      {
        v60 = *v13 & 0xFFC0;
        v61 = v13[1] & 0xFFC0;
        v13 += 2;
        *v17 = v60;
        v17[1] = v61;
        v17 += 2;
        v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      v62 = 2 * v35;
    }
    else
    {
      v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      v63 = *v13 & 0xFFC0;
      v64 = v13[1] & 0xFFC0;
      *v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  int16x4_t *v45;
  __int16 v46;
  uint64_t v47;
  _WORD *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v10 = v16;
  if (v10)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFC0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  v27 = v8 & 1;
  if (v10 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = v13[1] & 0xFFC0;
      v32 = v13 + 2;
      *v19 = *v13 & 0xFFC0;
      v19[1] = v39;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32 & 0xFFC0;
          v36 = v32[1] & 0xFFC0;
          v32 += 2;
          *v33 = v35;
          v33[1] = v36;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 & 0xFFC0;
      v41 = v32[1] & 0xFFC0;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v10 - v28;
    do
    {
      v44 = v13;
      v45 = (int16x4_t *)v19;
      if ((v29 & 1) != 0)
      {
        v46 = v13[1] & 0xFFC0;
        v44 = v13 + 2;
        *v19 = *v13 & 0xFFC0;
        v19[1] = v46;
        v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFC0;
          v49.i32[1] = v44[1] & 0xFFC0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v50 = *v48 & 0xFFC0;
        v51 = v48[1] & 0xFFC0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13 & 0xFFC0;
      v53 = v13[1] & 0xFFC0;
      v13 += 2;
      *v19 = v52;
      v19[1] = v53;
      v19 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13 & 0xFFC0;
        v56 = v13[1] & 0xFFC0;
        v13 += 2;
        *v19 = v55;
        v19[1] = v56;
        v19 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      v58 = *v13 & 0xFFC0;
      v59 = v13[1] & 0xFFC0;
      *v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  unsigned __int16 *v60;
  int16x4_t *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint32x2_t v69;
  int32x4_t v70;
  unsigned __int16 *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v28 >= 0x3AC)
            v28 = 940;
          if (v28 <= 0x40)
            v28 = 64;
          *(_WORD *)(v25 + 2 * i) = (-4194240 - v28 + (v28 << 16)) / 0x36C;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v44 = *v13;
      v45 = v44 >> 6;
      v46 = v13[1];
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v47 = v45;
      else
        v47 = 64;
      if (v46 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v46 >> 6;
      if (v46 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v34 = v13 + 2;
      *v19 = (613566757 * (unint64_t)((-4194240 - v47 + (v47 << 16)) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-4194240 - v49 + (v49 << 16)) >> 7)) >> 32;
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v37 >> 6;
          v39 = v34[1];
          if (v37 >> 6 >= 0x3C0)
            v38 = 960;
          if (v37 >= 0x1000)
            v40 = v38;
          else
            v40 = 64;
          if (v39 >> 6 >= 0x3C0)
            v41 = 960;
          else
            v41 = v39 >> 6;
          if (v39 < 0x1000)
            v41 = 64;
          v34 += 2;
          *v35 = (613566757 * (unint64_t)((-4194240 - v40 + (v40 << 16)) >> 7)) >> 32;
          v35[1] = (613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32;
          v35 += 2;
          v42 = __CFADD__(v36++, 1);
        }
        while (!v42);
        v43 = 2 * v32;
        goto LABEL_51;
      }
    }
    v43 = 0;
LABEL_51:
    if ((v43 | (unint64_t)v33) < v20)
    {
      v50 = *v34;
      v51 = v50 >> 6;
      v52 = v34[1];
      v53 = v52 >> 6;
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 < 0x1000)
        v51 = 64;
      if (v53 >= 0x3C0)
        v53 = 960;
      if (v52 >= 0x1000)
        v54 = v53;
      else
        v54 = 64;
      *v35 = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-4194240 - v54 + (v54 << 16)) >> 7)) >> 32;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v55 = 0;
  }
  else
  {
    v56 = 0;
    v55 = v21 - v30;
    v57 = (uint32x2_t)vdup_n_s32(0x3C0u);
    v58 = vdup_n_s32(0xFFC00040);
    v59 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v60 = v13;
      v61 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v62 = *v13;
        v63 = v62 >> 6;
        v64 = v13[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 >= 0x1000)
          v65 = v63;
        else
          v65 = 64;
        if (v64 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v64 >> 6;
        if (v64 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v60 = v13 + 2;
        *v19 = (613566757 * (unint64_t)((-4194240 - v65 + (v65 << 16)) >> 7)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32;
        v61 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v68 = -(uint64_t)v32;
        do
        {
          v69.i32[0] = *v60;
          v69.i32[1] = v60[1];
          v70 = (int32x4_t)vshrq_n_u64(vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v58, (int32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x100000001000, v69), (int8x8_t)0x4000000040, (int8x8_t)vmin_u32(vshr_n_u32(v69, 6uLL), v57)), (int32x2_t)0xFFFF0000FFFFLL), 7uLL), v59), 0x20uLL);
          v71 = v60 + 2;
          *v61++ = vmovn_s32(vuzp1q_s32(v70, v70));
          v60 += 2;
          v42 = __CFADD__(v68++, 1);
        }
        while (!v42);
      }
      else
      {
        v71 = v60;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v72 = *v71;
        v73 = v72 >> 6;
        v74 = v71[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        v61->i16[0] = (613566757 * (unint64_t)((-4194240 - v75 + (v75 << 16)) >> 7)) >> 32;
        v61->i16[1] = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v56;
    }
    while (v56 != v55);
  }
  if (v55 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v77 = *v13;
      v78 = v77 >> 6;
      v79 = v13[1];
      v80 = v79 >> 6;
      if (v77 >> 6 >= 0x3C0)
        v78 = 960;
      if (v77 < 0x1000)
        v78 = 64;
      if (v80 >= 0x3C0)
        v80 = 960;
      if (v79 >= 0x1000)
        v81 = v80;
      else
        v81 = 64;
      v13 += 2;
      *v19 = (613566757 * (unint64_t)((-4194240 - v78 + (v78 << 16)) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-4194240 - v81 + (v81 << 16)) >> 7)) >> 32;
      v19 += 2;
    }
    if (v32)
    {
      v82 = -(uint64_t)v32;
      do
      {
        v83 = *v13;
        v84 = v83 >> 6;
        v85 = v13[1];
        if (v83 >> 6 >= 0x3C0)
          v84 = 960;
        if (v83 >= 0x1000)
          v86 = v84;
        else
          v86 = 64;
        if (v85 >> 6 >= 0x3C0)
          v87 = 960;
        else
          v87 = v85 >> 6;
        if (v85 < 0x1000)
          v87 = 64;
        v13 += 2;
        *v19 = (613566757 * (unint64_t)((-4194240 - v86 + (v86 << 16)) >> 7)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32;
        v19 += 2;
        v42 = __CFADD__(v82++, 1);
      }
      while (!v42);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v88 = *v13;
      v89 = v88 >> 6;
      v90 = v13[1];
      v91 = v90 >> 6;
      if (v88 >> 6 >= 0x3C0)
        v89 = 960;
      if (v88 < 0x1000)
        v89 = 64;
      if (v91 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v92 = v91;
      else
        v92 = 64;
      *v19 = (613566757 * (unint64_t)((-4194240 - v89 + (v89 << 16)) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-4194240 - v92 + (v92 << 16)) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_x2as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15)
    v21 = v16 - v15;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v17;
    v26 = *a7 + *a8 * v17;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v18;
    v30 = v26 + v18;
    v31 = a3[2] + v28 * v11 + v12;
    v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v11 & 1;
  if (v8 >= v34)
    v35 = v11 & 1;
  else
    v35 = 0;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = (v21 - v10) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = v14[1] & 0xFFC0;
      v39 = v14 + 2;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v41;
      v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v37)
        goto LABEL_25;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v8 - v35;
    do
    {
      v47 = v14;
      v48 = v20;
      if ((v36 & 1) != 0)
      {
        v49 = v14[1] & 0xFFC0;
        v47 = v14 + 2;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v49;
        v48 = v20 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] & 0xFFC0;
          *v48 = *v47 & 0xFFC0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14 & 0xFFC0;
      v53 = v14[1] & 0xFFC0;
      v14 += 2;
      *v20 = v52;
      v20[1] = v53;
      v20 += 2;
    }
    if (v37)
    {
      v54 = -(uint64_t)v37;
      do
      {
        v55 = v14[1] & 0xFFC0;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFC0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1] & 0xFFC0;
      v34 = v14 + 2;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = v34[1] & 0xFFC0;
      *v35 = *v34 & 0xFFC0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1] & 0xFFC0;
        v42 = v14 + 2;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = v42[1] & 0xFFC0;
          *v43 = *v42 & 0xFFC0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 & 0xFFC0;
      v48 = v14[1] & 0xFFC0;
      v14 += 2;
      *v21 = v47;
      v21[1] = v48;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v29 >= 0x3AC)
            v29 = 940;
          if (v29 <= 0x40)
            v29 = 64;
          *(_WORD *)(v26 + 2 * i) = (-4194240 - v29 + (v29 << 16)) / 0x36C;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1)
    v33 = (v22 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      v37 = v36 >> 6;
      v38 = v14[1];
      v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0)
        v37 = 960;
      if (v36 < 0x1000)
        v37 = 64;
      if (v39 >= 0x3C0)
        v39 = 960;
      if (v38 >= 0x1000)
        v40 = v39;
      else
        v40 = 64;
      v34 = v14 + 2;
      *v21 = (613566757 * (unint64_t)((-4194240 - v37 + (v37 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v40 + (v40 << 16)) >> 7)) >> 32;
      v35 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v41 = -(uint64_t)v33;
    do
    {
      v42 = *v34;
      v43 = v42 >> 6;
      v44 = v34[1];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      *v35 = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32;
      v34 += 2;
      v35 += 2;
      v47 = __CFADD__(v41++, 1);
    }
    while (!v47);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v8 - v31;
    do
    {
      v50 = v14;
      v51 = v21;
      if ((v32 & 1) != 0)
      {
        v52 = *v14;
        v53 = v52 >> 6;
        v54 = v14[1];
        if (v52 >> 6 >= 0x3C0)
          v53 = 960;
        if (v52 < 0x1000)
          v53 = 64;
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        else
          v55 = v54 >> 6;
        if (v54 >= 0x1000)
          v56 = v55;
        else
          v56 = 64;
        v50 = v14 + 2;
        *v21 = (613566757 * (unint64_t)((-4194240 - v53 + (v53 << 16)) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-4194240 - v56 + (v56 << 16)) >> 7)) >> 32;
        v51 = v21 + 2;
      }
      if (v33)
      {
        v57 = -(uint64_t)v33;
        do
        {
          v58 = *v50;
          v59 = v58 >> 6;
          v60 = v50[1];
          if (v58 >> 6 >= 0x3C0)
            v59 = 960;
          if (v58 >= 0x1000)
            v61 = v59;
          else
            v61 = 64;
          if (v60 >> 6 >= 0x3C0)
            v62 = 960;
          else
            v62 = v60 >> 6;
          if (v60 < 0x1000)
            v62 = 64;
          *v51 = (613566757 * (unint64_t)((-4194240 - v61 + (v61 << 16)) >> 7)) >> 32;
          v51[1] = (613566757 * (unint64_t)((-4194240 - v62 + (v62 << 16)) >> 7)) >> 32;
          v50 += 2;
          v51 += 2;
          v47 = __CFADD__(v57++, 1);
        }
        while (!v47);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v63 = *v14;
      v64 = v63 >> 6;
      v65 = v14[1];
      v66 = v65 >> 6;
      if (v63 >> 6 >= 0x3C0)
        v64 = 960;
      if (v63 < 0x1000)
        v64 = 64;
      if (v66 >= 0x3C0)
        v66 = 960;
      if (v65 >= 0x1000)
        v67 = v66;
      else
        v67 = 64;
      v14 += 2;
      *v21 = (613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32;
      v21 += 2;
    }
    if (v33)
    {
      v68 = -(uint64_t)v33;
      do
      {
        v69 = *v14;
        v70 = v69 >> 6;
        v71 = v14[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 < 0x1000)
          v73 = 64;
        *v21 = (613566757 * (unint64_t)((-4194240 - v72 + (v72 << 16)) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-4194240 - v73 + (v73 << 16)) >> 7)) >> 32;
        v14 += 2;
        v21 += 2;
        v47 = __CFADD__(v68++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  _WORD *v50;
  _WORD *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = ((*(_WORD *)((char *)v17 + v16 + 2) & 0xFFC0) + (v17[1] & 0xFFC0u)) >> 1;
      *v24 = ((*(_WORD *)((char *)v17 + v16) & 0xFFC0) + (*v17 & 0xFFC0u)) >> 1;
      v24[1] = v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *v39 & 0xFFC0;
      v44 = v39[1] & 0xFFC0;
      v45 = *(_WORD *)((char *)v39 + v16) & 0xFFC0;
      v46 = *(_WORD *)((char *)v39 + v16 + 2) & 0xFFC0;
      v39 += 2;
      *v40 = (v45 + v43) >> 1;
      v40[1] = (v46 + v44) >> 1;
      v40 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v17;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17 + 2;
        v52 = ((*(_WORD *)((char *)v17 + v16 + 2) & 0xFFC0) + (v17[1] & 0xFFC0u)) >> 1;
        *v24 = ((*(_WORD *)((char *)v17 + v16) & 0xFFC0) + (*v17 & 0xFFC0u)) >> 1;
        v24[1] = v52;
        v51 = v24 + 2;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = *v50 & 0xFFC0;
          v55 = v50[1] & 0xFFC0;
          v56 = *(_WORD *)((char *)v50 + v16) & 0xFFC0;
          v57 = *(_WORD *)((char *)v50 + v16 + 2) & 0xFFC0;
          v50 += 2;
          *v51 = (v56 + v54) >> 1;
          v51[1] = (v57 + v55) >> 1;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v17[1] & 0xFFC0;
      v39 = v17 + 2;
      *v24 = *v17 & 0xFFC0;
      v24[1] = v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v45 = 0;
    v46 = v27 - v36;
    v47 = 2 * v16;
    do
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17[1] & 0xFFC0;
        v48 = v17 + 2;
        *v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v38)
      {
        v51 = -(uint64_t)v38;
        do
        {
          v52 = v48[1] & 0xFFC0;
          *v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v17 = (_WORD *)((char *)v17 + v47);
      v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  _WORD *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = (-4194240 - v36 + (v36 << 16)) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      v43 = v42 >> 6;
      v44 = v17[1];
      v45 = v44 >> 6;
      v46 = *(unsigned __int16 *)((char *)v17 + v16);
      v47 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v48 = v45;
      else
        v48 = 64;
      if (v46 >> 6 >= 0x3C0)
        v49 = 960;
      else
        v49 = v46 >> 6;
      if (v46 < 0x1000)
        v49 = 64;
      if (v47 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v47 >> 6;
      if (v47 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      v40 = v17 + 2;
      *v24 = (((613566757 * (unint64_t)((-4194240 - v43 + (v43 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v49 + (v49 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v24[1] = (((613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_73;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_73:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_74;
      }
    }
    v52 = -(uint64_t)v39;
    do
    {
      v53 = *v40;
      v54 = v53 >> 6;
      v55 = v40[1];
      v56 = *(unsigned __int16 *)((char *)v40 + v16);
      v57 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v53 >> 6 >= 0x3C0)
        v54 = 960;
      if (v53 >= 0x1000)
        v58 = v54;
      else
        v58 = 64;
      if (v55 >> 6 >= 0x3C0)
        v59 = 960;
      else
        v59 = v55 >> 6;
      if (v55 < 0x1000)
        v59 = 64;
      if (v56 >> 6 >= 0x3C0)
        v60 = 960;
      else
        v60 = v56 >> 6;
      if (v56 < 0x1000)
        v60 = 64;
      if (v57 >> 6 >= 0x3C0)
        v61 = 960;
      else
        v61 = v57 >> 6;
      if (v57 < 0x1000)
        v61 = 64;
      v40 += 2;
      *v41 = (((613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v60 + (v60 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v61 + (v61 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      v62 = __CFADD__(v52++, 1);
    }
    while (!v62);
    goto LABEL_73;
  }
LABEL_74:
  if (v27 != v37)
  {
    v63 = 0;
    v64 = v27 - v37;
    do
    {
      v65 = v17;
      v66 = v24;
      if ((v9 & 1) != 0)
      {
        v67 = *v17;
        v68 = v67 >> 6;
        v69 = v17[1];
        v70 = *(unsigned __int16 *)((char *)v17 + v16);
        v71 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v67 >> 6 >= 0x3C0)
          v68 = 960;
        if (v67 < 0x1000)
          v68 = 64;
        if (v69 >> 6 >= 0x3C0)
          v72 = 960;
        else
          v72 = v69 >> 6;
        if (v69 >= 0x1000)
          v73 = v72;
        else
          v73 = 64;
        if (v70 >> 6 >= 0x3C0)
          v74 = 960;
        else
          v74 = v70 >> 6;
        if (v70 >= 0x1000)
          v75 = v74;
        else
          v75 = 64;
        if (v71 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v71 >> 6;
        if (v71 >= 0x1000)
          v77 = v76;
        else
          v77 = 64;
        v65 = v17 + 2;
        *v24 = (((613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v75 + (v75 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v24[1] = (((613566757 * (unint64_t)((-4194240 - v73 + (v73 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v77 + (v77 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v66 = v24 + 2;
      }
      if (v39)
      {
        v78 = -(uint64_t)v39;
        do
        {
          v79 = *v65;
          v80 = v79 >> 6;
          v81 = v65[1];
          v82 = *(unsigned __int16 *)((char *)v65 + v16);
          v83 = *(unsigned __int16 *)((char *)v65 + v16 + 2);
          if (v79 >> 6 >= 0x3C0)
            v80 = 960;
          if (v79 >= 0x1000)
            v84 = v80;
          else
            v84 = 64;
          if (v81 >> 6 >= 0x3C0)
            v85 = 960;
          else
            v85 = v81 >> 6;
          if (v81 < 0x1000)
            v85 = 64;
          if (v82 >> 6 >= 0x3C0)
            v86 = 960;
          else
            v86 = v82 >> 6;
          if (v82 < 0x1000)
            v86 = 64;
          if (v83 >> 6 >= 0x3C0)
            v87 = 960;
          else
            v87 = v83 >> 6;
          if (v83 < 0x1000)
            v87 = 64;
          v65 += 2;
          *v66 = (((613566757 * (unint64_t)((-4194240 - v84 + (v84 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v86 + (v86 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
          v66[1] = (((613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32)
                                + 1) >> 1;
          v66 += 2;
          v62 = __CFADD__(v78++, 1);
        }
        while (!v62);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v63 += 2;
    }
    while (v63 < v64);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = (-4194240 - v36 + (v36 << 16)) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      v43 = v42 >> 6;
      v44 = v17[1];
      v45 = v44 >> 6;
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v46 = v45;
      else
        v46 = 64;
      v40 = v17 + 2;
      *v24 = (613566757 * (unint64_t)((-4194240 - v43 + (v43 << 16)) >> 7)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v47 = -(uint64_t)v39;
    do
    {
      v48 = *v40;
      v49 = v48 >> 6;
      v50 = v40[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v51 = v49;
      else
        v51 = 64;
      if (v50 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v50 >> 6;
      if (v50 < 0x1000)
        v52 = 64;
      *v41 = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
      v41[1] = (613566757 * (unint64_t)((-4194240 - v52 + (v52 << 16)) >> 7)) >> 32;
      v40 += 2;
      v41 += 2;
      v53 = __CFADD__(v47++, 1);
    }
    while (!v53);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    v54 = 0;
    v55 = v27 - v37;
    v56 = 2 * v16;
    do
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = (613566757 * (unint64_t)((-4194240 - v60 + (v60 << 16)) >> 7)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-4194240 - v63 + (v63 << 16)) >> 7)) >> 32;
        v58 = v24 + 2;
      }
      if (v39)
      {
        v64 = -(uint64_t)v39;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v58[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
          v57 += 2;
          v58 += 2;
          v53 = __CFADD__(v64++, 1);
        }
        while (!v53);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v56);
      v24 = (_WORD *)((char *)v24 + v23);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_Copy_x2as_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  BOOL v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t *v50;
  __int16 v51;
  uint64_t v52;
  __int16 *v53;
  int16x4_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14;
    v23 = *a7 + *a8 * v14;
    v24 = *a4;
    v25 = 2 * (v9 & 0xFFFFFFFE);
    v26 = a4[2];
    v27 = v22 + 2 * v15;
    v28 = v23 + 2 * v15;
    v29 = a3[2] + v26 * v8 + v25;
    v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  v32 = v8 & 1;
  if (v10 >= v32)
    v33 = v8 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v18 >> 1;
  v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1)
    v35 = (v18 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v37 = v13 + 2;
      v44 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v44;
      v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = v40 & 0xFFC0;
          v38[1] = v41 & 0xFFC0;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      v37 = v13;
      v38 = v17;
      if (v35)
        goto LABEL_19;
    }
    v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      v45 = *v37 & 0xFFC0;
      v46 = v37[1] & 0xFFC0;
      *v38 = v45;
      v38[1] = v46;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v10 - v33;
    do
    {
      v49 = v13;
      v50 = (int16x4_t *)v17;
      if ((v34 & 1) != 0)
      {
        v49 = v13 + 2;
        v51 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v51;
        v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFC0;
          v54.i32[1] = v49[1] & 0xFFC0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        v55 = *v53 & 0xFFC0;
        v56 = v53[1] & 0xFFC0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if ((v34 & 1) != 0)
    {
      v57 = *v13;
      v58 = v13[1];
      v13 += 2;
      *v17 = v57 & 0xFFC0;
      v17[1] = v58 & 0xFFC0;
      v17 += 2;
    }
    if (v35)
    {
      v59 = -(uint64_t)v35;
      do
      {
        v60 = *v13;
        v61 = v13[1];
        v13 += 2;
        *v17 = v60 & 0xFFC0;
        v17[1] = v61 & 0xFFC0;
        v17 += 2;
        v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      v62 = 2 * v35;
    }
    else
    {
      v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      v63 = *v13 & 0xFFC0;
      v64 = v13[1] & 0xFFC0;
      *v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  int16x4_t *v45;
  __int16 v46;
  uint64_t v47;
  __int16 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v10 = v16;
  if (v10)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFC0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  v27 = v8 & 1;
  if (v10 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] & 0xFFC0;
      *v19 = *v13 & 0xFFC0;
      v19[1] = v39;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 & 0xFFC0;
          v33[1] = v36 & 0xFFC0;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 & 0xFFC0;
      v41 = v32[1] & 0xFFC0;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v10 - v28;
    do
    {
      v44 = v13;
      v45 = (int16x4_t *)v19;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] & 0xFFC0;
        *v19 = *v13 & 0xFFC0;
        v19[1] = v46;
        v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFC0;
          v49.i32[1] = v44[1] & 0xFFC0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v50 = *v48 & 0xFFC0;
        v51 = v48[1] & 0xFFC0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v19 = v55 & 0xFFC0;
        v19[1] = v56 & 0xFFC0;
        v19 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      v58 = *v13 & 0xFFC0;
      v59 = v13[1] & 0xFFC0;
      *v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  unsigned __int16 *v60;
  int16x4_t *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint32x2_t v69;
  unsigned __int16 *v70;
  int16x4_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v28 >= 0x3AC)
            v28 = 940;
          if (v28 <= 0x40)
            v28 = 64;
          *(_WORD *)(v25 + 2 * i) = 16 * ((-262080 - v28 + (v28 << 12)) / 0x36C);
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v44 = *v13;
      v45 = v44 >> 6;
      v46 = v13[1];
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v47 = v45;
      else
        v47 = 64;
      if (v46 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v46 >> 6;
      if (v46 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v34 = v13 + 2;
      *v19 = 16 * ((613566757 * (unint64_t)((-262080 - v47 + (v47 << 12)) >> 7)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-262080 - v49 + (v49 << 12)) >> 7)) >> 32);
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v37 >> 6;
          v39 = v34[1];
          if (v37 >> 6 >= 0x3C0)
            v38 = 960;
          if (v37 >= 0x1000)
            v40 = v38;
          else
            v40 = 64;
          if (v39 >> 6 >= 0x3C0)
            v41 = 960;
          else
            v41 = v39 >> 6;
          if (v39 < 0x1000)
            v41 = 64;
          v34 += 2;
          *v35 = 16 * ((613566757 * (unint64_t)((-262080 - v40 + (v40 << 12)) >> 7)) >> 32);
          v35[1] = 16 * ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32);
          v35 += 2;
          v42 = __CFADD__(v36++, 1);
        }
        while (!v42);
        v43 = 2 * v32;
        goto LABEL_51;
      }
    }
    v43 = 0;
LABEL_51:
    if ((v43 | (unint64_t)v33) < v20)
    {
      v50 = *v34;
      v51 = v50 >> 6;
      v52 = v34[1];
      v53 = v52 >> 6;
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 < 0x1000)
        v51 = 64;
      if (v53 >= 0x3C0)
        v53 = 960;
      if (v52 >= 0x1000)
        v54 = v53;
      else
        v54 = 64;
      *v35 = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-262080 - v54 + (v54 << 12)) >> 7)) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v55 = 0;
  }
  else
  {
    v56 = 0;
    v55 = v21 - v30;
    v57 = (uint32x2_t)vdup_n_s32(0x3C0u);
    v58 = vdup_n_s32(0xFFFC0040);
    v59 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v60 = v13;
      v61 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v62 = *v13;
        v63 = v62 >> 6;
        v64 = v13[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 >= 0x1000)
          v65 = v63;
        else
          v65 = 64;
        if (v64 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v64 >> 6;
        if (v64 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v60 = v13 + 2;
        *v19 = 16 * ((613566757 * (unint64_t)((-262080 - v65 + (v65 << 12)) >> 7)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32);
        v61 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v68 = -(uint64_t)v32;
        do
        {
          v69.i32[0] = *v60;
          v69.i32[1] = v60[1];
          v70 = v60 + 2;
          v71 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v58, (int32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x100000001000, v69), (int8x8_t)0x4000000040, (int8x8_t)vmin_u32(vshr_n_u32(v69, 6uLL), v57)), (int32x2_t)0xF0000000FLL), 7uLL), v59), 0x20uLL), 4uLL);
          *v61++ = vuzp1_s16(v71, v71);
          v60 += 2;
          v42 = __CFADD__(v68++, 1);
        }
        while (!v42);
      }
      else
      {
        v70 = v60;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v72 = *v70;
        v73 = v72 >> 6;
        v74 = v70[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        v61->i16[0] = 16 * ((613566757 * (unint64_t)((-262080 - v75 + (v75 << 12)) >> 7)) >> 32);
        v61->i16[1] = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v56;
    }
    while (v56 != v55);
  }
  if (v55 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v77 = *v13;
      v78 = v77 >> 6;
      v79 = v13[1];
      v80 = v79 >> 6;
      if (v77 >> 6 >= 0x3C0)
        v78 = 960;
      if (v77 < 0x1000)
        v78 = 64;
      if (v80 >= 0x3C0)
        v80 = 960;
      if (v79 >= 0x1000)
        v81 = v80;
      else
        v81 = 64;
      v13 += 2;
      *v19 = 16 * ((613566757 * (unint64_t)((-262080 - v78 + (v78 << 12)) >> 7)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-262080 - v81 + (v81 << 12)) >> 7)) >> 32);
      v19 += 2;
    }
    if (v32)
    {
      v82 = -(uint64_t)v32;
      do
      {
        v83 = *v13;
        v84 = v83 >> 6;
        v85 = v13[1];
        if (v83 >> 6 >= 0x3C0)
          v84 = 960;
        if (v83 >= 0x1000)
          v86 = v84;
        else
          v86 = 64;
        if (v85 >> 6 >= 0x3C0)
          v87 = 960;
        else
          v87 = v85 >> 6;
        if (v85 < 0x1000)
          v87 = 64;
        v13 += 2;
        *v19 = 16 * ((613566757 * (unint64_t)((-262080 - v86 + (v86 << 12)) >> 7)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-262080 - v87 + (v87 << 12)) >> 7)) >> 32);
        v19 += 2;
        v42 = __CFADD__(v82++, 1);
      }
      while (!v42);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v88 = *v13;
      v89 = v88 >> 6;
      v90 = v13[1];
      v91 = v90 >> 6;
      if (v88 >> 6 >= 0x3C0)
        v89 = 960;
      if (v88 < 0x1000)
        v89 = 64;
      if (v91 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v92 = v91;
      else
        v92 = 64;
      *v19 = 16 * ((613566757 * (unint64_t)((-262080 - v89 + (v89 << 12)) >> 7)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-262080 - v92 + (v92 << 12)) >> 7)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_x2as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15)
    v21 = v16 - v15;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v17;
    v26 = *a7 + *a8 * v17;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v18;
    v30 = v26 + v18;
    v31 = a3[2] + v28 * v11 + v12;
    v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v11 & 1;
  if (v8 >= v34)
    v35 = v11 & 1;
  else
    v35 = 0;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = (v21 - v10) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v41 = v14[1] & 0xFFC0;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v41;
      v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v37)
        goto LABEL_25;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v8 - v35;
    do
    {
      v47 = v14;
      v48 = v20;
      if ((v36 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = v14[1] & 0xFFC0;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v49;
        v48 = v20 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] & 0xFFC0;
          *v48 = *v47 & 0xFFC0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 2;
      *v20 = v52 & 0xFFC0;
      v20[1] = v53 & 0xFFC0;
      v20 += 2;
    }
    if (v37)
    {
      v54 = -(uint64_t)v37;
      do
      {
        v55 = v14[1] & 0xFFC0;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFC0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v14 + 2;
      v36 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = v34[1] & 0xFFC0;
      *v35 = *v34 & 0xFFC0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v42 = v14 + 2;
        v44 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = v42[1] & 0xFFC0;
          *v43 = *v42 & 0xFFC0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v21 = v47 & 0xFFC0;
      v21[1] = v48 & 0xFFC0;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v29 >= 0x3AC)
            v29 = 940;
          if (v29 <= 0x40)
            v29 = 64;
          *(_WORD *)(v26 + 2 * i) = 16 * ((-262080 - v29 + (v29 << 12)) / 0x36C);
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1)
    v33 = (v22 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      v37 = v36 >> 6;
      v38 = v14[1];
      v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0)
        v37 = 960;
      if (v36 < 0x1000)
        v37 = 64;
      if (v39 >= 0x3C0)
        v39 = 960;
      if (v38 >= 0x1000)
        v40 = v39;
      else
        v40 = 64;
      v34 = v14 + 2;
      *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v37 + (v37 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v40 + (v40 << 12)) >> 7)) >> 32);
      v35 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v41 = -(uint64_t)v33;
    do
    {
      v42 = *v34;
      v43 = v42 >> 6;
      v44 = v34[1];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      *v35 = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32);
      v34 += 2;
      v35 += 2;
      v47 = __CFADD__(v41++, 1);
    }
    while (!v47);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v8 - v31;
    do
    {
      v50 = v14;
      v51 = v21;
      if ((v32 & 1) != 0)
      {
        v52 = *v14;
        v53 = v52 >> 6;
        v54 = v14[1];
        if (v52 >> 6 >= 0x3C0)
          v53 = 960;
        if (v52 < 0x1000)
          v53 = 64;
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        else
          v55 = v54 >> 6;
        if (v54 >= 0x1000)
          v56 = v55;
        else
          v56 = 64;
        v50 = v14 + 2;
        *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v53 + (v53 << 12)) >> 7)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v56 + (v56 << 12)) >> 7)) >> 32);
        v51 = v21 + 2;
      }
      if (v33)
      {
        v57 = -(uint64_t)v33;
        do
        {
          v58 = *v50;
          v59 = v58 >> 6;
          v60 = v50[1];
          if (v58 >> 6 >= 0x3C0)
            v59 = 960;
          if (v58 >= 0x1000)
            v61 = v59;
          else
            v61 = 64;
          if (v60 >> 6 >= 0x3C0)
            v62 = 960;
          else
            v62 = v60 >> 6;
          if (v60 < 0x1000)
            v62 = 64;
          *v51 = 16 * ((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32);
          v51[1] = 16 * ((613566757 * (unint64_t)((-262080 - v62 + (v62 << 12)) >> 7)) >> 32);
          v50 += 2;
          v51 += 2;
          v47 = __CFADD__(v57++, 1);
        }
        while (!v47);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v63 = *v14;
      v64 = v63 >> 6;
      v65 = v14[1];
      v66 = v65 >> 6;
      if (v63 >> 6 >= 0x3C0)
        v64 = 960;
      if (v63 < 0x1000)
        v64 = 64;
      if (v66 >= 0x3C0)
        v66 = 960;
      if (v65 >= 0x1000)
        v67 = v66;
      else
        v67 = 64;
      v14 += 2;
      *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32);
      v21 += 2;
    }
    if (v33)
    {
      v68 = -(uint64_t)v33;
      do
      {
        v69 = *v14;
        v70 = v69 >> 6;
        v71 = v14[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 < 0x1000)
          v73 = 64;
        *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v73 + (v73 << 12)) >> 7)) >> 32);
        v14 += 2;
        v21 += 2;
        v47 = __CFADD__(v68++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = ((*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) & 0xFFC) + ((v17[1] >> 4) & 0xFFC);
      *v24 = 8 * (((*(unsigned __int16 *)((char *)v17 + v16) >> 4) & 0xFFC) + ((*v17 >> 4) & 0xFFC));
      v24[1] = 8 * v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *v39;
      v44 = v39[1];
      v45 = *(unsigned __int16 *)((char *)v39 + v16);
      v46 = *(unsigned __int16 *)((char *)v39 + v16 + 2);
      v39 += 2;
      *v40 = 8 * (((v45 >> 4) & 0xFFC) + ((v43 >> 4) & 0xFFC));
      v40[1] = 8 * (((v46 >> 4) & 0xFFC) + ((v44 >> 4) & 0xFFC));
      v40 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v17;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17 + 2;
        v52 = ((*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) & 0xFFC) + ((v17[1] >> 4) & 0xFFC);
        *v24 = 8 * (((*(unsigned __int16 *)((char *)v17 + v16) >> 4) & 0xFFC) + ((*v17 >> 4) & 0xFFC));
        v24[1] = 8 * v52;
        v51 = v24 + 2;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = *(unsigned __int16 *)((char *)v50 + v16);
          v57 = *(unsigned __int16 *)((char *)v50 + v16 + 2);
          v50 += 2;
          *v51 = 8 * (((v56 >> 4) & 0xFFC) + ((v54 >> 4) & 0xFFC));
          v51[1] = 8 * (((v57 >> 4) & 0xFFC) + ((v55 >> 4) & 0xFFC));
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = v17[1] & 0xFFC0;
      *v24 = *v17 & 0xFFC0;
      v24[1] = v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v45 = 0;
    v46 = v27 - v36;
    v47 = 2 * v16;
    do
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v48 = v17 + 2;
        v50 = v17[1] & 0xFFC0;
        *v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v38)
      {
        v51 = -(uint64_t)v38;
        do
        {
          v52 = v48[1] & 0xFFC0;
          *v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v17 = (_WORD *)((char *)v17 + v47);
      v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  _WORD *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-262080 - v36 + (v36 << 12)) / 0x36C);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      v43 = v42 >> 6;
      v44 = v17[1];
      v45 = v44 >> 6;
      v46 = *(unsigned __int16 *)((char *)v17 + v16);
      v47 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v48 = v45;
      else
        v48 = 64;
      if (v46 >> 6 >= 0x3C0)
        v49 = 960;
      else
        v49 = v46 >> 6;
      if (v46 < 0x1000)
        v49 = 64;
      if (v47 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v47 >> 6;
      if (v47 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      v40 = v17 + 2;
      *v24 = (8
            * (((613566757 * (unint64_t)((-262080 - v49 + (v49 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v43 + (v43 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v24[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_73;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_73:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_74;
      }
    }
    v52 = -(uint64_t)v39;
    do
    {
      v53 = *v40;
      v54 = v53 >> 6;
      v55 = v40[1];
      v56 = *(unsigned __int16 *)((char *)v40 + v16);
      v57 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v53 >> 6 >= 0x3C0)
        v54 = 960;
      if (v53 >= 0x1000)
        v58 = v54;
      else
        v58 = 64;
      if (v55 >> 6 >= 0x3C0)
        v59 = 960;
      else
        v59 = v55 >> 6;
      if (v55 < 0x1000)
        v59 = 64;
      if (v56 >> 6 >= 0x3C0)
        v60 = 960;
      else
        v60 = v56 >> 6;
      if (v56 < 0x1000)
        v60 = 64;
      if (v57 >> 6 >= 0x3C0)
        v61 = 960;
      else
        v61 = v57 >> 6;
      if (v57 < 0x1000)
        v61 = 64;
      v40 += 2;
      *v41 = (8
            * (((613566757 * (unint64_t)((-262080 - v60 + (v60 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v41[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v41 += 2;
      v62 = __CFADD__(v52++, 1);
    }
    while (!v62);
    goto LABEL_73;
  }
LABEL_74:
  if (v27 != v37)
  {
    v63 = 0;
    v64 = v27 - v37;
    do
    {
      v65 = v17;
      v66 = v24;
      if ((v9 & 1) != 0)
      {
        v67 = *v17;
        v68 = v67 >> 6;
        v69 = v17[1];
        v70 = *(unsigned __int16 *)((char *)v17 + v16);
        v71 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v67 >> 6 >= 0x3C0)
          v68 = 960;
        if (v67 < 0x1000)
          v68 = 64;
        if (v69 >> 6 >= 0x3C0)
          v72 = 960;
        else
          v72 = v69 >> 6;
        if (v69 >= 0x1000)
          v73 = v72;
        else
          v73 = 64;
        if (v70 >> 6 >= 0x3C0)
          v74 = 960;
        else
          v74 = v70 >> 6;
        if (v70 >= 0x1000)
          v75 = v74;
        else
          v75 = 64;
        if (v71 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v71 >> 6;
        if (v71 >= 0x1000)
          v77 = v76;
        else
          v77 = 64;
        v65 = v17 + 2;
        *v24 = (8
              * (((613566757 * (unint64_t)((-262080 - v75 + (v75 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v24[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v77 + (v77 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v73 + (v73 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v66 = v24 + 2;
      }
      if (v39)
      {
        v78 = -(uint64_t)v39;
        do
        {
          v79 = *v65;
          v80 = v79 >> 6;
          v81 = v65[1];
          v82 = *(unsigned __int16 *)((char *)v65 + v16);
          v83 = *(unsigned __int16 *)((char *)v65 + v16 + 2);
          if (v79 >> 6 >= 0x3C0)
            v80 = 960;
          if (v79 >= 0x1000)
            v84 = v80;
          else
            v84 = 64;
          if (v81 >> 6 >= 0x3C0)
            v85 = 960;
          else
            v85 = v81 >> 6;
          if (v81 < 0x1000)
            v85 = 64;
          if (v82 >> 6 >= 0x3C0)
            v86 = 960;
          else
            v86 = v82 >> 6;
          if (v82 < 0x1000)
            v86 = 64;
          if (v83 >> 6 >= 0x3C0)
            v87 = 960;
          else
            v87 = v83 >> 6;
          if (v83 < 0x1000)
            v87 = 64;
          v65 += 2;
          *v66 = (8
                * (((613566757 * (unint64_t)((-262080 - v86 + (v86 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
          v66[1] = (8
                  * (((613566757 * (unint64_t)((-262080 - v87 + (v87 << 12)) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((-262080 - v85 + (v85 << 12)) >> 7)) >> 32))
                  + 8) & 0xFFF0;
          v66 += 2;
          v62 = __CFADD__(v78++, 1);
        }
        while (!v62);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v63 += 2;
    }
    while (v63 < v64);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-262080 - v36 + (v36 << 12)) / 0x36C);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      v43 = v42 >> 6;
      v44 = v17[1];
      v45 = v44 >> 6;
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v46 = v45;
      else
        v46 = 64;
      v40 = v17 + 2;
      *v24 = 16 * ((613566757 * (unint64_t)((-262080 - v43 + (v43 << 12)) >> 7)) >> 32);
      v24[1] = 16 * ((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32);
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v47 = -(uint64_t)v39;
    do
    {
      v48 = *v40;
      v49 = v48 >> 6;
      v50 = v40[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v51 = v49;
      else
        v51 = 64;
      if (v50 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v50 >> 6;
      if (v50 < 0x1000)
        v52 = 64;
      *v41 = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((-262080 - v52 + (v52 << 12)) >> 7)) >> 32);
      v40 += 2;
      v41 += 2;
      v53 = __CFADD__(v47++, 1);
    }
    while (!v53);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    v54 = 0;
    v55 = v27 - v37;
    v56 = 2 * v16;
    do
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = 16 * ((613566757 * (unint64_t)((-262080 - v60 + (v60 << 12)) >> 7)) >> 32);
        v24[1] = 16 * ((613566757 * (unint64_t)((-262080 - v63 + (v63 << 12)) >> 7)) >> 32);
        v58 = v24 + 2;
      }
      if (v39)
      {
        v64 = -(uint64_t)v39;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v58[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
          v57 += 2;
          v58 += 2;
          v53 = __CFADD__(v64++, 1);
        }
        while (!v53);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v56);
      v24 = (_WORD *)((char *)v24 + v23);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_Copy_x2as_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  BOOL v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  _WORD *v45;
  int16x4_t *v46;
  __int16 v47;
  uint64_t v48;
  _WORD *v49;
  int16x4_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (_WORD *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14)
    v18 = v14;
  else
    v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v61 = a8[1];
    v63 = a4[1];
    v20 = 2 * (v8 & 0xFFFFFFFE);
    v65 = a8[2];
    v66 = *a8;
    v21 = (char *)(a7[2] + v65 * v13 + 2 * v12);
    v22 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v23 = a4[2];
    v24 = (char *)(a3[2] + v23 * v9 + v20);
    v25 = *a4;
    v26 = (char *)(*a3 + *a4 * v9 + v20);
    v64 = v18;
    v27 = 2 * v18;
    v62 = v19;
    do
    {
      memcpy(v22, v26, v27);
      memcpy(v21, v24, v27);
      v26 += v25;
      v22 += v66;
      v24 += v23;
      v21 += v65;
      --v19;
    }
    while (v19);
    v16 = v61;
    v8 = a2[4];
    v9 = a2[5];
    v10 = v63;
    v18 = v64;
    v19 = v62;
  }
  v28 = v9 & 1;
  if (v19 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v8;
  v31 = v18 >> 1;
  v32 = v8 & 1;
  if (v18 >> 1 >= (v18 - v32) >> 1)
    v31 = (v18 - v32) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v40 = v11[1] & 0xFFC0;
      v33 = v11 + 2;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v40;
      v34 = v17 + 2;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33 & 0xFFC0;
          v37 = v33[1] & 0xFFC0;
          v33 += 2;
          *v34 = v36;
          v34[1] = v37;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v11;
      v34 = v17;
      if (v31)
        goto LABEL_19;
    }
    v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v18)
    {
      v41 = *v33 & 0xFFC0;
      v42 = v33[1] & 0xFFC0;
      *v34 = v41;
      v34[1] = v42;
    }
    v11 = (_WORD *)((char *)v11 + v10);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v19 - v29;
    do
    {
      v45 = v11;
      v46 = (int16x4_t *)v17;
      if ((v30 & 1) != 0)
      {
        v47 = v11[1] & 0xFFC0;
        v45 = v11 + 2;
        *v17 = *v11 & 0xFFC0;
        v17[1] = v47;
        v46 = (int16x4_t *)(v17 + 2);
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFC0;
          v50.i32[1] = v45[1] & 0xFFC0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        v49 = v45;
      }
      if ((v32 | (2 * v31)) < v18)
      {
        v51 = *v49 & 0xFFC0;
        v52 = v49[1] & 0xFFC0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      v11 = (_WORD *)((char *)v11 + v10);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v19)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v11 & 0xFFC0;
      v54 = v11[1] & 0xFFC0;
      v11 += 2;
      *v17 = v53;
      v17[1] = v54;
      v17 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v11 & 0xFFC0;
        v57 = v11[1] & 0xFFC0;
        v11 += 2;
        *v17 = v56;
        v17[1] = v57;
        v17 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v31 *= 2;
    }
    if ((v31 | v32) < v18)
    {
      v58 = v11[1] & 0xFFC0;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  BOOL v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  _WORD *v41;
  int16x4_t *v42;
  __int16 v43;
  uint64_t v44;
  _WORD *v45;
  int16x4_t v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (_WORD *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (_WORD *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v57 = a4[1];
    v58 = v16;
    v19 = *a4;
    v20 = *a8;
    v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    v23 = 2 * v16;
    v56 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v8 = a2[4];
    v9 = a2[5];
    v10 = v57;
    v16 = v58;
    v17 = v56;
  }
  v24 = v9 & 1;
  if (v17 >= v24)
    v25 = v9 & 1;
  else
    v25 = 0;
  v26 = v8;
  v27 = v16 >> 1;
  v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1)
    v27 = (v16 - v28) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v36 = v11[1] & 0xFFC0;
      v29 = v11 + 2;
      *v15 = *v11 & 0xFFC0;
      v15[1] = v36;
      v30 = v15 + 2;
      if (v27)
      {
LABEL_19:
        v31 = -(uint64_t)v27;
        do
        {
          v32 = *v29 & 0xFFC0;
          v33 = v29[1] & 0xFFC0;
          v29 += 2;
          *v30 = v32;
          v30[1] = v33;
          v30 += 2;
          v34 = __CFADD__(v31++, 1);
        }
        while (!v34);
        v35 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      v29 = v11;
      v30 = v15;
      if (v27)
        goto LABEL_19;
    }
    v35 = 0;
LABEL_25:
    if ((v35 | (unint64_t)v28) < v16)
    {
      v37 = *v29 & 0xFFC0;
      v38 = v29[1] & 0xFFC0;
      *v30 = v37;
      v30[1] = v38;
    }
    v11 = (_WORD *)((char *)v11 + v10);
    v15 = (_WORD *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v17 - v25;
    do
    {
      v41 = v11;
      v42 = (int16x4_t *)v15;
      if ((v26 & 1) != 0)
      {
        v43 = v11[1] & 0xFFC0;
        v41 = v11 + 2;
        *v15 = *v11 & 0xFFC0;
        v15[1] = v43;
        v42 = (int16x4_t *)(v15 + 2);
      }
      if (v27)
      {
        v44 = -(uint64_t)v27;
        do
        {
          v45 = v41 + 2;
          v46.i32[0] = *v41 & 0xFFC0;
          v46.i32[1] = v41[1] & 0xFFC0;
          *v42++ = vuzp1_s16(v46, v46);
          v41 += 2;
          v34 = __CFADD__(v44++, 1);
        }
        while (!v34);
      }
      else
      {
        v45 = v41;
      }
      if ((v28 | (2 * v27)) < v16)
      {
        v47 = *v45 & 0xFFC0;
        v48 = v45[1] & 0xFFC0;
        v42->i16[0] = v47;
        v42->i16[1] = v48;
      }
      v11 = (_WORD *)((char *)v11 + v10);
      v15 = (_WORD *)((char *)v15 + v14);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v49 = *v11 & 0xFFC0;
      v50 = v11[1] & 0xFFC0;
      v11 += 2;
      *v15 = v49;
      v15[1] = v50;
      v15 += 2;
    }
    if (v27)
    {
      v51 = -(uint64_t)v27;
      do
      {
        v52 = *v11 & 0xFFC0;
        v53 = v11[1] & 0xFFC0;
        v11 += 2;
        *v15 = v52;
        v15[1] = v53;
        v15 += 2;
        v34 = __CFADD__(v51++, 1);
      }
      while (!v34);
      v27 *= 2;
    }
    if ((v27 | v28) < v16)
    {
      v54 = v11[1] & 0xFFC0;
      *v15 = *v11 & 0xFFC0;
      v15[1] = v54;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  unsigned __int16 *v60;
  int16x4_t *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint32x2_t v69;
  unsigned __int16 *v70;
  int16x4_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v28 >= 0x3AC)
            v28 = 940;
          if (v28 <= 0x40)
            v28 = 64;
          *(_WORD *)(v25 + 2 * i) = (unsigned __int16)((1023 * v28 - 65472) / 0x36C) << 6;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v44 = *v13;
      v45 = v44 >> 6;
      v46 = v13[1];
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v47 = v45;
      else
        v47 = 64;
      if (v46 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v46 >> 6;
      if (v46 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v34 = v13 + 2;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 65472) >> 7)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 65472) >> 7)) >> 32) << 6;
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v37 >> 6;
          v39 = v34[1];
          if (v37 >> 6 >= 0x3C0)
            v38 = 960;
          if (v37 >= 0x1000)
            v40 = v38;
          else
            v40 = 64;
          if (v39 >> 6 >= 0x3C0)
            v41 = 960;
          else
            v41 = v39 >> 6;
          if (v39 < 0x1000)
            v41 = 64;
          v34 += 2;
          *v35 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 65472) >> 7)) >> 32) << 6;
          v35[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
          v35 += 2;
          v42 = __CFADD__(v36++, 1);
        }
        while (!v42);
        v43 = 2 * v32;
        goto LABEL_51;
      }
    }
    v43 = 0;
LABEL_51:
    if ((v43 | (unint64_t)v33) < v20)
    {
      v50 = *v34;
      v51 = v50 >> 6;
      v52 = v34[1];
      v53 = v52 >> 6;
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 < 0x1000)
        v51 = 64;
      if (v53 >= 0x3C0)
        v53 = 960;
      if (v52 >= 0x1000)
        v54 = v53;
      else
        v54 = 64;
      *v35 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
      v35[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v55 = 0;
  }
  else
  {
    v56 = 0;
    v55 = v21 - v30;
    v57 = (uint32x2_t)vdup_n_s32(0x3C0u);
    v58 = vdup_n_s32(0xFFFF0040);
    v59 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v60 = v13;
      v61 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v62 = *v13;
        v63 = v62 >> 6;
        v64 = v13[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 >= 0x1000)
          v65 = v63;
        else
          v65 = 64;
        if (v64 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v64 >> 6;
        if (v64 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v60 = v13 + 2;
        *v19 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v65 - 65472) >> 7)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32) << 6;
        v61 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v68 = -(uint64_t)v32;
        do
        {
          v69.i32[0] = *v60;
          v69.i32[1] = v60[1];
          v70 = v60 + 2;
          v71 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v58, (int32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x100000001000, v69), (int8x8_t)0x4000000040, (int8x8_t)vmin_u32(vshr_n_u32(v69, 6uLL), v57)), (int32x2_t)0x300000003), 7uLL), v59), 0x20uLL), 6uLL);
          *v61++ = vuzp1_s16(v71, v71);
          v60 += 2;
          v42 = __CFADD__(v68++, 1);
        }
        while (!v42);
      }
      else
      {
        v70 = v60;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v72 = *v70;
        v73 = v72 >> 6;
        v74 = v70[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        v61->i16[0] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32) << 6;
        v61->i16[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v76 - 65472) >> 7)) >> 32) << 6;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v56;
    }
    while (v56 != v55);
  }
  if (v55 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v77 = *v13;
      v78 = v77 >> 6;
      v79 = v13[1];
      v80 = v79 >> 6;
      if (v77 >> 6 >= 0x3C0)
        v78 = 960;
      if (v77 < 0x1000)
        v78 = 64;
      if (v80 >= 0x3C0)
        v80 = 960;
      if (v79 >= 0x1000)
        v81 = v80;
      else
        v81 = 64;
      v13 += 2;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v78 - 65472) >> 7)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v81 - 65472) >> 7)) >> 32) << 6;
      v19 += 2;
    }
    if (v32)
    {
      v82 = -(uint64_t)v32;
      do
      {
        v83 = *v13;
        v84 = v83 >> 6;
        v85 = v13[1];
        if (v83 >> 6 >= 0x3C0)
          v84 = 960;
        if (v83 >= 0x1000)
          v86 = v84;
        else
          v86 = 64;
        if (v85 >> 6 >= 0x3C0)
          v87 = 960;
        else
          v87 = v85 >> 6;
        if (v85 < 0x1000)
          v87 = 64;
        v13 += 2;
        *v19 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v86 - 65472) >> 7)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v87 - 65472) >> 7)) >> 32) << 6;
        v19 += 2;
        v42 = __CFADD__(v82++, 1);
      }
      while (!v42);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v88 = *v13;
      v89 = v88 >> 6;
      v90 = v13[1];
      v91 = v90 >> 6;
      if (v88 >> 6 >= 0x3C0)
        v89 = 960;
      if (v88 < 0x1000)
        v89 = 64;
      if (v91 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v92 = v91;
      else
        v92 = 64;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v89 - 65472) >> 7)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v92 - 65472) >> 7)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v29 >= 0x3AC)
            v29 = 940;
          if (v29 <= 0x40)
            v29 = 64;
          *(_WORD *)(v26 + 2 * i) = (unsigned __int16)((1023 * v29 - 65472) / 0x36C) << 6;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  v34 = (v22 - v10) >> 1;
  if (v33 >= v34)
    v33 = v34;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v35 = v14 + 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
      v36 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v35 = v14;
      v36 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v42 = -(uint64_t)v33;
    do
    {
      v43 = *v35;
      v44 = v43 >> 6;
      v45 = v35[1];
      if (v43 >> 6 >= 0x3C0)
        v44 = 960;
      if (v43 >= 0x1000)
        v46 = v44;
      else
        v46 = 64;
      if (v45 >> 6 >= 0x3C0)
        v47 = 960;
      else
        v47 = v45 >> 6;
      if (v45 < 0x1000)
        v47 = 64;
      *v36 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32) << 6;
      v36[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 65472) >> 7)) >> 32) << 6;
      v35 += 2;
      v36 += 2;
      v48 = __CFADD__(v42++, 1);
    }
    while (!v48);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v49 = 0;
  }
  else
  {
    v50 = 0;
    v49 = v8 - v31;
    do
    {
      v51 = v14;
      v52 = v21;
      if ((v32 & 1) != 0)
      {
        v53 = *v14;
        v54 = v53 >> 6;
        v55 = v14[1];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 < 0x1000)
          v54 = 64;
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        else
          v56 = v55 >> 6;
        if (v55 >= 0x1000)
          v57 = v56;
        else
          v57 = 64;
        v51 = v14 + 2;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32) << 6;
        v52 = v21 + 2;
      }
      if (v33)
      {
        v58 = -(uint64_t)v33;
        do
        {
          v59 = *v51;
          v60 = v59 >> 6;
          v61 = v51[1];
          if (v59 >> 6 >= 0x3C0)
            v60 = 960;
          if (v59 >= 0x1000)
            v62 = v60;
          else
            v62 = 64;
          if (v61 >> 6 >= 0x3C0)
            v63 = 960;
          else
            v63 = v61 >> 6;
          if (v61 < 0x1000)
            v63 = 64;
          *v52 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 65472) >> 7)) >> 32) << 6;
          v52[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 65472) >> 7)) >> 32) << 6;
          v51 += 2;
          v52 += 2;
          v48 = __CFADD__(v58++, 1);
        }
        while (!v48);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v64 = *v14;
      v65 = v64 >> 6;
      v66 = v14[1];
      v67 = v66 >> 6;
      if (v64 >> 6 >= 0x3C0)
        v65 = 960;
      if (v64 < 0x1000)
        v65 = 64;
      if (v67 >= 0x3C0)
        v67 = 960;
      if (v66 >= 0x1000)
        v68 = v67;
      else
        v68 = 64;
      v14 += 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v65 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
      v21 += 2;
    }
    if (v33)
    {
      v69 = -(uint64_t)v33;
      do
      {
        v70 = *v14;
        v71 = v70 >> 6;
        v72 = v14[1];
        if (v70 >> 6 >= 0x3C0)
          v71 = 960;
        if (v70 >= 0x1000)
          v73 = v71;
        else
          v73 = 64;
        if (v72 >> 6 >= 0x3C0)
          v74 = 960;
        else
          v74 = v72 >> 6;
        if (v72 < 0x1000)
          v74 = 64;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v73 - 65472) >> 7)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32) << 6;
        v14 += 2;
        v21 += 2;
        v48 = __CFADD__(v69++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v13 - v12;
  if (v24)
  {
    v54 = v23;
    v25 = *a4;
    v26 = *a8;
    if (v12 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    v30 = 2 * v23;
    v56 = v24;
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v24 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v23 = v54;
  }
  if (v24 >= v11)
    v33 = v11;
  else
    v33 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v34 = (v23 - v10) >> 1;
  else
    v34 = v23 >> 1;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v35 = v16 + 2;
      v37 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
      *v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
      v22[1] = (32 * v37 + 32) & 0xFFC0;
      v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      v35 = v16;
      v36 = v22;
      if (!v34)
        goto LABEL_29;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *v35;
      v40 = v35[1];
      v41 = *(unsigned __int16 *)((char *)v35 + v15) >> 6;
      v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2) >> 6;
      v35 += 2;
      *v36 = (32 * (v41 + (v39 >> 6)) + 32) & 0xFFC0;
      v36[1] = (32 * (v42 + (v40 >> 6)) + 32) & 0xFFC0;
      v36 += 2;
      v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16 + 2;
        v47 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
        *v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
        v22[1] = (32 * v47 + 32) & 0xFFC0;
        v46 = v22 + 2;
      }
      if (v34)
      {
        v48 = -(uint64_t)v34;
        do
        {
          v49 = *v45;
          v50 = v45[1];
          v51 = *(unsigned __int16 *)((char *)v45 + v15) >> 6;
          v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6;
          v45 += 2;
          *v46 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
          v46 += 2;
          v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  _WORD *v45;
  _WORD *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = 2 * (v11 + v9);
  v17 = a4[1];
  v18 = (_WORD *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  v19 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v20 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v21 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v22 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v23 = 2 * v19;
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19))
    v26 = v20 - v19;
  else
    v26 = v12 - (v11 + v9);
  v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21)
    v27 = v22 - v21;
  if (v27)
  {
    v52 = v27;
    v53 = a4[1];
    v28 = *a4;
    v29 = *a8;
    if (v14 >= v10)
      v30 = 0;
    else
      v30 = *a4;
    v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    v32 = (char *)(*a7 + v29 * v21 + v23);
    v51 = v26;
    v33 = 2 * v26;
    v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v27 = v52;
    v17 = v53;
    v26 = v51;
  }
  if (v27 >= v13)
    v36 = v13;
  else
    v36 = 0;
  if (v26 >> 1 >= (v26 - v11) >> 1)
    v37 = (v26 - v11) >> 1;
  else
    v37 = v26 >> 1;
  if (v13)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v18[1] & 0xFFC0;
      v38 = v18 + 2;
      *v25 = *v18 & 0xFFC0;
      v25[1] = v40;
      v39 = v25 + 2;
      if (!v37)
      {
LABEL_28:
        v18 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v18;
      v39 = v25;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] & 0xFFC0;
      *v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v35 = __CFADD__(v41++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v43 = 0;
    v44 = v27 - v36;
    do
    {
      v45 = v18;
      v46 = v25;
      if ((v9 & 1) != 0)
      {
        v47 = v18[1] & 0xFFC0;
        v45 = v18 + 2;
        *v25 = *v18 & 0xFFC0;
        v25[1] = v47;
        v46 = v25 + 2;
      }
      if (v37)
      {
        v48 = -(uint64_t)v37;
        do
        {
          v49 = v45[1] & 0xFFC0;
          *v46 = *v45 & 0xFFC0;
          v46[1] = v49;
          v45 += 2;
          v46 += 2;
          v35 = __CFADD__(v48++, 1);
        }
        while (!v35);
      }
      v18 += v17;
      v25 = (_WORD *)((char *)v25 + v24);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  _WORD *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v15 + v33;
    v35 = *a7 + v31 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i) >> 6;
          if (v37 >= 0x3AC)
            v37 = 940;
          if (v37 <= 0x40)
            v37 = 64;
          *(_WORD *)(v35 + 2 * i) = (unsigned __int16)((1023 * v37 - 65472) / 0x36C) << 6;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  v39 = v26 - (v9 & 1);
  if (v26 >> 1 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v43 = *v17;
      v44 = v43 >> 6;
      v45 = v17[1];
      v46 = v45 >> 6;
      v47 = *(unsigned __int16 *)((char *)v17 + v16);
      v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v43 >> 6 >= 0x3C0)
        v44 = 960;
      if (v43 < 0x1000)
        v44 = 64;
      if (v46 >= 0x3C0)
        v46 = 960;
      if (v45 >= 0x1000)
        v49 = v46;
      else
        v49 = 64;
      if (v47 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v47 >> 6;
      if (v47 < 0x1000)
        v50 = 64;
      if (v48 >> 6 >= 0x3C0)
        v51 = 960;
      else
        v51 = v48 >> 6;
      if (v48 >= 0x1000)
        v52 = v51;
      else
        v52 = 64;
      v41 = v17 + 2;
      *v24 = (32
            * (((613566757 * (unint64_t)((1023 * v50 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v44 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v24[1] = (32
              * (((613566757 * (unint64_t)((1023 * v52 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v49 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v42 = v24 + 2;
      if (!v40)
        goto LABEL_73;
    }
    else
    {
      v41 = v17;
      v42 = v24;
      if (!v40)
      {
LABEL_73:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_74;
      }
    }
    v53 = -(uint64_t)v40;
    do
    {
      v54 = *v41;
      v55 = v54 >> 6;
      v56 = v41[1];
      v57 = *(unsigned __int16 *)((char *)v41 + v16);
      v58 = *(unsigned __int16 *)((char *)v41 + v16 + 2);
      if (v54 >> 6 >= 0x3C0)
        v55 = 960;
      if (v54 >= 0x1000)
        v59 = v55;
      else
        v59 = 64;
      if (v56 >> 6 >= 0x3C0)
        v60 = 960;
      else
        v60 = v56 >> 6;
      if (v56 < 0x1000)
        v60 = 64;
      if (v57 >> 6 >= 0x3C0)
        v61 = 960;
      else
        v61 = v57 >> 6;
      if (v57 < 0x1000)
        v61 = 64;
      if (v58 >> 6 >= 0x3C0)
        v62 = 960;
      else
        v62 = v58 >> 6;
      if (v58 < 0x1000)
        v62 = 64;
      v41 += 2;
      *v42 = (32
            * (((613566757 * (unint64_t)((1023 * v61 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v59 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v42[1] = (32
              * (((613566757 * (unint64_t)((1023 * v62 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v60 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v42 += 2;
      v29 = __CFADD__(v53++, 1);
    }
    while (!v29);
    goto LABEL_73;
  }
LABEL_74:
  if (v27 != v38)
  {
    v63 = 0;
    v64 = v27 - v38;
    do
    {
      v65 = v17;
      v66 = v24;
      if ((v9 & 1) != 0)
      {
        v67 = *v17;
        v68 = v67 >> 6;
        v69 = v17[1];
        v70 = *(unsigned __int16 *)((char *)v17 + v16);
        v71 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v67 >> 6 >= 0x3C0)
          v68 = 960;
        if (v67 < 0x1000)
          v68 = 64;
        if (v69 >> 6 >= 0x3C0)
          v72 = 960;
        else
          v72 = v69 >> 6;
        if (v69 >= 0x1000)
          v73 = v72;
        else
          v73 = 64;
        if (v70 >> 6 >= 0x3C0)
          v74 = 960;
        else
          v74 = v70 >> 6;
        if (v70 >= 0x1000)
          v75 = v74;
        else
          v75 = 64;
        if (v71 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v71 >> 6;
        if (v71 >= 0x1000)
          v77 = v76;
        else
          v77 = 64;
        v65 = v17 + 2;
        *v24 = (32
              * (((613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v24[1] = (32
                * (((613566757 * (unint64_t)((1023 * v77 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v73 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v66 = v24 + 2;
      }
      if (v40)
      {
        v78 = -(uint64_t)v40;
        do
        {
          v79 = *v65;
          v80 = v79 >> 6;
          v81 = v65[1];
          v82 = *(unsigned __int16 *)((char *)v65 + v16);
          v83 = *(unsigned __int16 *)((char *)v65 + v16 + 2);
          if (v79 >> 6 >= 0x3C0)
            v80 = 960;
          if (v79 >= 0x1000)
            v84 = v80;
          else
            v84 = 64;
          if (v81 >> 6 >= 0x3C0)
            v85 = 960;
          else
            v85 = v81 >> 6;
          if (v81 < 0x1000)
            v85 = 64;
          if (v82 >> 6 >= 0x3C0)
            v86 = 960;
          else
            v86 = v82 >> 6;
          if (v82 < 0x1000)
            v86 = 64;
          if (v83 >> 6 >= 0x3C0)
            v87 = 960;
          else
            v87 = v83 >> 6;
          if (v83 < 0x1000)
            v87 = 64;
          v65 += 2;
          *v66 = (32
                * (((613566757 * (unint64_t)((1023 * v86 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
          v66[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v87 - 65472) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v85 - 65472) >> 7)) >> 32))
                  + 32) & 0xFFC0;
          v66 += 2;
          v29 = __CFADD__(v78++, 1);
        }
        while (!v29);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v63 += 2;
    }
    while (v63 < v64);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v15 + v33;
    v35 = *a7 + v31 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i) >> 6;
          if (v37 >= 0x3AC)
            v37 = 940;
          if (v37 <= 0x40)
            v37 = 64;
          *(_WORD *)(v35 + 2 * i) = (unsigned __int16)((1023 * v37 - 65472) / 0x36C) << 6;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v38 = v12;
  else
    v38 = 0;
  v39 = v26 - (v9 & 1);
  if (v26 >> 1 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v43 = *v17;
      v44 = v43 >> 6;
      v45 = v17[1];
      v46 = v45 >> 6;
      if (v43 >> 6 >= 0x3C0)
        v44 = 960;
      if (v43 < 0x1000)
        v44 = 64;
      if (v46 >= 0x3C0)
        v46 = 960;
      if (v45 >= 0x1000)
        v47 = v46;
      else
        v47 = 64;
      v41 = v17 + 2;
      *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 65472) >> 7)) >> 32) << 6;
      v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 65472) >> 7)) >> 32) << 6;
      v42 = v24 + 2;
      if (!v40)
        goto LABEL_52;
    }
    else
    {
      v41 = v17;
      v42 = v24;
      if (!v40)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v48 = -(uint64_t)v40;
    do
    {
      v49 = *v41;
      v50 = v49 >> 6;
      v51 = v41[1];
      if (v49 >> 6 >= 0x3C0)
        v50 = 960;
      if (v49 >= 0x1000)
        v52 = v50;
      else
        v52 = 64;
      if (v51 >> 6 >= 0x3C0)
        v53 = 960;
      else
        v53 = v51 >> 6;
      if (v51 < 0x1000)
        v53 = 64;
      *v42 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 65472) >> 7)) >> 32) << 6;
      v42[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v53 - 65472) >> 7)) >> 32) << 6;
      v41 += 2;
      v42 += 2;
      v29 = __CFADD__(v48++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v38)
  {
    v54 = 0;
    v55 = v27 - v38;
    v56 = 2 * v16;
    do
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 65472) >> 7)) >> 32) << 6;
        v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 65472) >> 7)) >> 32) << 6;
        v58 = v24 + 2;
      }
      if (v40)
      {
        v64 = -(uint64_t)v40;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v58[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32) << 6;
          v57 += 2;
          v58 += 2;
          v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v56);
      v24 = (_WORD *)((char *)v24 + v23);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_Copy_x2as_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = 2 * (a2[4] & 0xFFFFFFFELL);
    v27 = a4[2];
    v28 = v23 + v14;
    v29 = v24 + v14;
    v30 = a3[2] + v27 * v8 + v26;
    v31 = *a3 + v25 * v8 + v26;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(_BYTE *)(v29 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v25;
      v29 += v21;
      v30 += v27;
      v28 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v33 = v8 & 1;
  if (v10 >= v33)
    v34 = v8 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v19 >> 1;
  v37 = v9 & 1;
  if (v19 >> 1 >= (v19 - v37) >> 1)
    v36 = (v19 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v45 = *(_BYTE *)(v12 + 3);
      v38 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v45;
      v39 = v18 + 2;
      if (v36)
      {
LABEL_20:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *(_BYTE *)(v38 + 1);
          v42 = *(_BYTE *)(v38 + 3);
          v38 += 4;
          *v39 = v41;
          v39[1] = v42;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v12;
      v39 = v18;
      if (v36)
        goto LABEL_20;
    }
    v44 = 0;
LABEL_26:
    if ((v44 | (unint64_t)v37) < v19)
    {
      v46 = *(_BYTE *)(v38 + 1);
      v47 = *(_BYTE *)(v38 + 3);
      *v39 = v46;
      v39[1] = v47;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v34)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v10 - v34;
    do
    {
      v50 = v12;
      v51 = v18;
      if ((v35 & 1) != 0)
      {
        v52 = *(_BYTE *)(v12 + 3);
        v50 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v52;
        v51 = v18 + 2;
      }
      if (v36)
      {
        v53 = -(uint64_t)v36;
        do
        {
          v54 = *(_BYTE *)(v50 + 1);
          v55 = *(_BYTE *)(v50 + 3);
          v50 += 4;
          *v51 = v54;
          v51[1] = v55;
          v51[2] = v54;
          v51[3] = v55;
          v51 += 4;
          v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v19)
      {
        v56 = *(_BYTE *)(v50 + 1);
        v57 = *(_BYTE *)(v50 + 3);
        *v51 = v56;
        v51[1] = v57;
      }
      v12 += v11;
      v18 += v17;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v10)
  {
    if ((v35 & 1) != 0)
    {
      v58 = *(_BYTE *)(v12 + 1);
      v59 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v36)
    {
      v60 = -(uint64_t)v36;
      do
      {
        v61 = *(_BYTE *)(v12 + 1);
        v62 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      v63 = 2 * v36;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v19)
    {
      v64 = *(_BYTE *)(v12 + 1);
      v65 = *(_BYTE *)(v12 + 3);
      *v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = *(_BYTE *)(v24 + 2 * i + 1);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v10 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v19 >> 1;
  v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = *(_BYTE *)(v12 + 3);
      v31 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v38;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *(_BYTE *)(v31 + 1);
          v35 = *(_BYTE *)(v31 + 3);
          v31 += 4;
          *v32 = v34;
          v32[1] = v35;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      v31 = v12;
      v32 = v18;
      if (v29)
        goto LABEL_20;
    }
    v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *(_BYTE *)(v31 + 1);
      v40 = *(_BYTE *)(v31 + 3);
      *v32 = v39;
      v32[1] = v40;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v10 - v27;
    do
    {
      v43 = v12;
      v44 = v18;
      if ((v28 & 1) != 0)
      {
        v45 = *(_BYTE *)(v12 + 3);
        v43 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v45;
        v44 = v18 + 2;
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = *(_BYTE *)(v43 + 1);
          v48 = *(_BYTE *)(v43 + 3);
          v43 += 4;
          *v44 = v47;
          v44[1] = v48;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *(_BYTE *)(v43 + 1);
        v50 = *(_BYTE *)(v43 + 3);
        *v44 = v49;
        v44[1] = v50;
      }
      v12 += v11;
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *(_BYTE *)(v12 + 1);
      v52 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v51;
      v18[1] = v52;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *(_BYTE *)(v12 + 1);
        v55 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v54;
        v18[1] = v55;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *(_BYTE *)(v12 + 1);
      v58 = *(_BYTE *)(v12 + 3);
      *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _BYTE *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a4[1];
  v11 = (unsigned __int16 *)(a3[1] + v10 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v12 = a6[5];
  v15 = a6[2];
  v14 = a6[3];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v12 + 2 * v13);
  v18 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v18 >= v15)
    v18 = v15;
  if (a2[3] >= v14)
    v19 = v14;
  else
    v19 = a2[3];
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v12 + v13;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v26 = *(unsigned __int16 *)(v24 + 2 * i) >> 6;
          if (v26 >= 0x3AC)
            v26 = 940;
          if (v26 <= 0x40)
            v26 = 64;
          *(_BYTE *)(v23 + i) = (255 * v26 - 16320) / 0x36C;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
    v9 = a2[4];
    v8 = a2[5];
  }
  v27 = v8 & 1;
  if (v19 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v18 >> 1;
  v31 = v9 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v42 = *v11;
      v43 = v42 >> 6;
      v44 = v11[1];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 >= 0x1000)
        v47 = v46;
      else
        v47 = 64;
      v32 = v11 + 2;
      *v17 = (613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
      v33 = v17 + 2;
      if (v30)
        goto LABEL_25;
    }
    else
    {
      v32 = v11;
      v33 = v17;
      if (v30)
      {
LABEL_25:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v35 >> 6;
          v37 = v32[1];
          if (v35 >> 6 >= 0x3C0)
            v36 = 960;
          if (v35 >= 0x1000)
            v38 = v36;
          else
            v38 = 64;
          if (v37 >> 6 >= 0x3C0)
            v39 = 960;
          else
            v39 = v37 >> 6;
          if (v37 < 0x1000)
            v39 = 64;
          v32 += 2;
          *v33 = (613566757 * (unint64_t)((255 * v38 - 16320) >> 7)) >> 32;
          v33[1] = (613566757 * (unint64_t)((255 * v39 - 16320) >> 7)) >> 32;
          v33 += 2;
          v40 = __CFADD__(v34++, 1);
        }
        while (!v40);
        v41 = 2 * v30;
        goto LABEL_52;
      }
    }
    v41 = 0;
LABEL_52:
    if ((v41 | (unint64_t)v31) < v18)
    {
      v48 = *v32;
      v49 = v48 >> 6;
      v50 = v32[1];
      v51 = v50 >> 6;
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 < 0x1000)
        v49 = 64;
      if (v51 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v52 = v51;
      else
        v52 = 64;
      *v33 = (613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32;
      v33[1] = (613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32;
    }
    v11 = (unsigned __int16 *)((char *)v11 + v10);
    v17 += v16;
  }
  if (v19 == v28)
  {
    v53 = 0;
  }
  else
  {
    v54 = 0;
    v53 = v19 - v28;
    do
    {
      v55 = v11;
      v56 = v17;
      if ((v29 & 1) != 0)
      {
        v57 = *v11;
        v58 = v57 >> 6;
        v59 = v11[1];
        if (v57 >> 6 >= 0x3C0)
          v58 = 960;
        if (v57 >= 0x1000)
          v60 = v58;
        else
          v60 = 64;
        if (v59 >> 6 >= 0x3C0)
          v61 = 960;
        else
          v61 = v59 >> 6;
        if (v59 >= 0x1000)
          v62 = v61;
        else
          v62 = 64;
        v55 = v11 + 2;
        *v17 = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
        v56 = v17 + 2;
      }
      if (v30)
      {
        v63 = -(uint64_t)v30;
        do
        {
          v64 = *v55;
          v65 = v64 >> 6;
          v66 = v55[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          v69 = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v70 = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
          *v56 = v69;
          v56[1] = v70;
          v55 += 2;
          v56[2] = v69;
          v56[3] = v70;
          v56 += 4;
          v40 = __CFADD__(v63++, 1);
        }
        while (!v40);
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v71 = *v55;
        v72 = v71 >> 6;
        v73 = v55[1];
        if (v71 >> 6 >= 0x3C0)
          v72 = 960;
        if (v71 >= 0x1000)
          v74 = v72;
        else
          v74 = 64;
        if (v73 >> 6 >= 0x3C0)
          v75 = 960;
        else
          v75 = v73 >> 6;
        if (v73 >= 0x1000)
          v76 = v75;
        else
          v76 = 64;
        *v56 = (613566757 * (unint64_t)((255 * v74 - 16320) >> 7)) >> 32;
        v56[1] = (613566757 * (unint64_t)((255 * v76 - 16320) >> 7)) >> 32;
      }
      v11 = (unsigned __int16 *)((char *)v11 + v10);
      v17 += v16;
      ++v54;
    }
    while (v54 != v53);
  }
  if (v53 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v77 = *v11;
      v78 = v77 >> 6;
      v79 = v11[1];
      v80 = v79 >> 6;
      if (v77 >> 6 >= 0x3C0)
        v78 = 960;
      if (v77 < 0x1000)
        v78 = 64;
      if (v80 >= 0x3C0)
        v80 = 960;
      if (v79 >= 0x1000)
        v81 = v80;
      else
        v81 = 64;
      v11 += 2;
      *v17 = (613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v81 - 16320) >> 7)) >> 32;
      v17 += 2;
    }
    if (v30)
    {
      v82 = -(uint64_t)v30;
      do
      {
        v83 = *v11;
        v84 = v83 >> 6;
        v85 = v11[1];
        if (v83 >> 6 >= 0x3C0)
          v84 = 960;
        if (v83 >= 0x1000)
          v86 = v84;
        else
          v86 = 64;
        if (v85 >> 6 >= 0x3C0)
          v87 = 960;
        else
          v87 = v85 >> 6;
        if (v85 < 0x1000)
          v87 = 64;
        v11 += 2;
        *v17 = (613566757 * (unint64_t)((255 * v86 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v87 - 16320) >> 7)) >> 32;
        v17 += 2;
        v40 = __CFADD__(v82++, 1);
      }
      while (!v40);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      v88 = *v11;
      v89 = v88 >> 6;
      v90 = v11[1];
      v91 = v90 >> 6;
      if (v88 >> 6 >= 0x3C0)
        v89 = 960;
      if (v88 < 0x1000)
        v89 = 64;
      if (v91 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v92 = v91;
      else
        v92 = 64;
      *v17 = (613566757 * (unint64_t)((255 * v89 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v92 - 16320) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_x2as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (_BYTE *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v20 >= v16 - v15)
    v20 = v16 - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v21 = 0;
    v22 = *a8;
    v23 = a8[2];
    v24 = a7[2] + v23 * v17;
    v25 = *a7 + *a8 * v17;
    v26 = *a4;
    v27 = a4[2];
    v28 = v24 + v15;
    v29 = v25 + v15;
    v30 = a3[2] + v27 * v11 + v12;
    v31 = *a3 + v26 * v11 + v12;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_BYTE *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(_BYTE *)(v29 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v33 = v11 & 1;
  if (v8 >= v33)
    v34 = v11 & 1;
  else
    v34 = 0;
  v35 = v20 >> 1;
  v36 = v20 - v10;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = *(_BYTE *)(v14 + 3);
      v38 = v14 + 4;
      *v19 = *(_BYTE *)(v14 + 1);
      v19[1] = v40;
      v39 = v19 + 2;
      if (!v37)
      {
LABEL_26:
        v14 += v13;
        v19 += v18;
        goto LABEL_27;
      }
    }
    else
    {
      v38 = v14;
      v39 = v19;
      if (!v37)
        goto LABEL_26;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *(_BYTE *)(v38 + 3);
      *v39 = *(_BYTE *)(v38 + 1);
      v39[1] = v42;
      v39 += 2;
      v38 += 4;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v14 + 3);
        v46 = v14 + 4;
        *v19 = *(_BYTE *)(v14 + 1);
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *(_BYTE *)(v46 + 3);
          *v47 = *(_BYTE *)(v46 + 1);
          v47[1] = v50;
          v47 += 2;
          v46 += 4;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 += v18;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v51 = *(_BYTE *)(v14 + 1);
      v52 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v19 = v51;
      v19[1] = v52;
      v19 += 2;
    }
    if (v37)
    {
      v53 = -(uint64_t)v37;
      do
      {
        v54 = *(_BYTE *)(v14 + 3);
        *v19 = *(_BYTE *)(v14 + 1);
        v19[1] = v54;
        v19 += 2;
        v14 += 4;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = *(_BYTE *)(v26 + 2 * i + 1);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = *(_BYTE *)(v14 + 3);
      v33 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v35;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = *(_BYTE *)(v33 + 3);
      *v34 = *(_BYTE *)(v33 + 1);
      v34[1] = v37;
      v34 += 2;
      v33 += 4;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = *(_BYTE *)(v14 + 3);
        v41 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = *(_BYTE *)(v41 + 3);
          *v42 = *(_BYTE *)(v41 + 1);
          v42[1] = v45;
          v42 += 2;
          v41 += 4;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *(_BYTE *)(v14 + 1);
      v47 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v46;
      v20[1] = v47;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v49;
        v20 += 2;
        v14 += 4;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v28 >= 0x3AC)
            v28 = 940;
          if (v28 <= 0x40)
            v28 = 64;
          *(_BYTE *)(v25 + i) = (255 * v28 - 16320) / 0x36C;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v11 & 1;
  if (v8 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v21 >> 1;
  v32 = v21 - v10;
  if (v31 >= v32 >> 1)
    v33 = v32 >> 1;
  else
    v33 = v31;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v36 = *v14;
      v37 = v36 >> 6;
      v38 = v14[1];
      v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0)
        v37 = 960;
      if (v36 < 0x1000)
        v37 = 64;
      if (v39 >= 0x3C0)
        v39 = 960;
      if (v38 >= 0x1000)
        v40 = v39;
      else
        v40 = 64;
      v34 = v14 + 2;
      *v20 = (613566757 * (unint64_t)((255 * v37 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32;
      v35 = v20 + 2;
      if (!v33)
        goto LABEL_49;
    }
    else
    {
      v34 = v14;
      v35 = v20;
      if (!v33)
      {
LABEL_49:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_50;
      }
    }
    v41 = -(uint64_t)v33;
    do
    {
      v42 = *v34;
      v43 = v42 >> 6;
      v44 = v34[1];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      *v35 = (613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32;
      v35[1] = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
      v35 += 2;
      v34 += 2;
      v47 = __CFADD__(v41++, 1);
    }
    while (!v47);
    goto LABEL_49;
  }
LABEL_50:
  if (v8 == v30)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v8 - v30;
    do
    {
      v50 = v14;
      v51 = v20;
      if ((v9 & 1) != 0)
      {
        v52 = *v14;
        v53 = v52 >> 6;
        v54 = v14[1];
        if (v52 >> 6 >= 0x3C0)
          v53 = 960;
        if (v52 < 0x1000)
          v53 = 64;
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        else
          v55 = v54 >> 6;
        if (v54 >= 0x1000)
          v56 = v55;
        else
          v56 = 64;
        v50 = v14 + 2;
        *v20 = (613566757 * (unint64_t)((255 * v53 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32;
        v51 = v20 + 2;
      }
      if (v33)
      {
        v57 = -(uint64_t)v33;
        do
        {
          v58 = *v50;
          v59 = v58 >> 6;
          v60 = v50[1];
          if (v58 >> 6 >= 0x3C0)
            v59 = 960;
          if (v58 >= 0x1000)
            v61 = v59;
          else
            v61 = 64;
          if (v60 >> 6 >= 0x3C0)
            v62 = 960;
          else
            v62 = v60 >> 6;
          if (v60 < 0x1000)
            v62 = 64;
          *v51 = (613566757 * (unint64_t)((255 * v61 - 16320) >> 7)) >> 32;
          v51[1] = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
          v51 += 2;
          v50 += 2;
          v47 = __CFADD__(v57++, 1);
        }
        while (!v47);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v29 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v63 = *v14;
      v64 = v63 >> 6;
      v65 = v14[1];
      v66 = v65 >> 6;
      if (v63 >> 6 >= 0x3C0)
        v64 = 960;
      if (v63 < 0x1000)
        v64 = 64;
      if (v66 >= 0x3C0)
        v66 = 960;
      if (v65 >= 0x1000)
        v67 = v66;
      else
        v67 = 64;
      v14 += 2;
      *v20 = (613566757 * (unint64_t)((255 * v64 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
      v20 += 2;
    }
    if (v33)
    {
      v68 = -(uint64_t)v33;
      do
      {
        v69 = *v14;
        v70 = v69 >> 6;
        v71 = v14[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 < 0x1000)
          v73 = 64;
        *v20 = (613566757 * (unint64_t)((255 * v72 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v73 - 16320) >> 7)) >> 32;
        v20 += 2;
        v14 += 2;
        v47 = __CFADD__(v68++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v12 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v12 + v14 + v29;
    v31 = a4[2];
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 4;
      v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(unsigned __int8 *)(v40 + 1);
      v45 = *(unsigned __int8 *)(v40 + 3);
      v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v49 = 0;
    v50 = v24 - v36;
    do
    {
      v51 = v16;
      v52 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = v16 + 4;
        v53 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v53;
        v52 = v22 + 2;
      }
      if (v39)
      {
        v54 = -(uint64_t)v39;
        do
        {
          v55 = *(unsigned __int8 *)(v51 + 1);
          v56 = *(unsigned __int8 *)(v51 + 3);
          v57 = *(unsigned __int8 *)(v51 + v15 + 1);
          v58 = *(unsigned __int8 *)(v51 + v15 + 3);
          v51 += 4;
          *v52 = (v55 + v57 + 1) >> 1;
          v52[1] = (v56 + v58 + 1) >> 1;
          v52 += 2;
          v48 = __CFADD__(v54++, 1);
        }
        while (!v48);
      }
      v16 += 2 * v15;
      v22 += v21;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_x2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  char v53;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v12 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v12 + v14 + v29;
    v31 = a4[2];
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *(_BYTE *)(v16 + 3);
      v40 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(_BYTE *)(v40 + 3);
      *v41 = *(_BYTE *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v46 = 0;
    v47 = v24 - v36;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = *(_BYTE *)(v16 + 3);
        v49 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v39)
      {
        v52 = -(uint64_t)v39;
        do
        {
          v53 = *(_BYTE *)(v49 + 3);
          *v50 = *(_BYTE *)(v49 + 1);
          v50[1] = v53;
          v50 += 2;
          v49 += 4;
          v45 = __CFADD__(v52++, 1);
        }
        while (!v45);
      }
      v16 += v48;
      v22 += v21;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 4;
      v38 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *(unsigned __int8 *)(v36 + 1);
      v41 = *(unsigned __int8 *)(v36 + 3);
      v42 = *(unsigned __int8 *)(v36 + v15 + 1);
      v43 = *(unsigned __int8 *)(v36 + v15 + 3);
      v36 += 4;
      *v37 = (v40 + v42 + 1) >> 1;
      v37[1] = (v41 + v43 + 1) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 4;
        v49 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *(unsigned __int8 *)(v47 + 1);
          v52 = *(unsigned __int8 *)(v47 + 3);
          v53 = *(unsigned __int8 *)(v47 + v15 + 1);
          v54 = *(unsigned __int8 *)(v47 + v15 + 3);
          v47 += 4;
          *v48 = (v51 + v53 + 1) >> 1;
          v48[1] = (v52 + v54 + 1) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += 2 * v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  char v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = *(_BYTE *)(v16 + 3);
      v36 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *(_BYTE *)(v36 + 3);
      *v37 = *(_BYTE *)(v36 + 1);
      v37[1] = v40;
      v37 += 2;
      v36 += 4;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = *(_BYTE *)(v16 + 3);
        v45 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = *(_BYTE *)(v45 + 3);
          *v46 = *(_BYTE *)(v45 + 1);
          v46[1] = v49;
          v46 += 2;
          v45 += 4;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 += v44;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int16 *v64;
  _BYTE *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v12 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_BYTE *)(v33 + i) = (255 * v35 - 16320) / 0x36C;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      v43 = v42 >> 6;
      v44 = v16[1];
      v45 = v44 >> 6;
      v46 = *(unsigned __int16 *)((char *)v16 + v15);
      v47 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v48 = v45;
      else
        v48 = 64;
      if (v46 >> 6 >= 0x3C0)
        v49 = 960;
      else
        v49 = v46 >> 6;
      if (v46 < 0x1000)
        v49 = 64;
      if (v47 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v47 >> 6;
      if (v47 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      v40 = v16 + 2;
      *v22 = (((613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v22[1] = (((613566757 * (unint64_t)((255 * v48 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v41 = v22 + 2;
      if (!v39)
        goto LABEL_73;
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
      {
LABEL_73:
        v16 += v15;
        v22 += v21;
        goto LABEL_74;
      }
    }
    v52 = -(uint64_t)v39;
    do
    {
      v53 = *v40;
      v54 = v53 >> 6;
      v55 = v40[1];
      v56 = *(unsigned __int16 *)((char *)v40 + v15);
      v57 = *(unsigned __int16 *)((char *)v40 + v15 + 2);
      if (v53 >> 6 >= 0x3C0)
        v54 = 960;
      if (v53 >= 0x1000)
        v58 = v54;
      else
        v58 = 64;
      if (v55 >> 6 >= 0x3C0)
        v59 = 960;
      else
        v59 = v55 >> 6;
      if (v55 < 0x1000)
        v59 = 64;
      if (v56 >> 6 >= 0x3C0)
        v60 = 960;
      else
        v60 = v56 >> 6;
      if (v56 < 0x1000)
        v60 = 64;
      if (v57 >> 6 >= 0x3C0)
        v61 = 960;
      else
        v61 = v57 >> 6;
      if (v57 < 0x1000)
        v61 = 64;
      v40 += 2;
      *v41 = (((613566757 * (unint64_t)((255 * v58 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((255 * v59 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v61 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      v27 = __CFADD__(v52++, 1);
    }
    while (!v27);
    goto LABEL_73;
  }
LABEL_74:
  if (v24 != v36)
  {
    v62 = 0;
    v63 = v24 - v36;
    do
    {
      v64 = v16;
      v65 = v22;
      if ((v8 & 1) != 0)
      {
        v66 = *v16;
        v67 = v66 >> 6;
        v68 = v16[1];
        v69 = *(unsigned __int16 *)((char *)v16 + v15);
        v70 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v66 >> 6 >= 0x3C0)
          v67 = 960;
        if (v66 < 0x1000)
          v67 = 64;
        if (v68 >> 6 >= 0x3C0)
          v71 = 960;
        else
          v71 = v68 >> 6;
        if (v68 >= 0x1000)
          v72 = v71;
        else
          v72 = 64;
        if (v69 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v69 >> 6;
        if (v69 >= 0x1000)
          v74 = v73;
        else
          v74 = 64;
        if (v70 >> 6 >= 0x3C0)
          v75 = 960;
        else
          v75 = v70 >> 6;
        if (v70 >= 0x1000)
          v76 = v75;
        else
          v76 = 64;
        v64 = v16 + 2;
        *v22 = (((613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v74 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v22[1] = (((613566757 * (unint64_t)((255 * v72 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v76 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v65 = v22 + 2;
      }
      if (v39)
      {
        v77 = -(uint64_t)v39;
        do
        {
          v78 = *v64;
          v79 = v78 >> 6;
          v80 = v64[1];
          v81 = *(unsigned __int16 *)((char *)v64 + v15);
          v82 = *(unsigned __int16 *)((char *)v64 + v15 + 2);
          if (v78 >> 6 >= 0x3C0)
            v79 = 960;
          if (v78 >= 0x1000)
            v83 = v79;
          else
            v83 = 64;
          if (v80 >> 6 >= 0x3C0)
            v84 = 960;
          else
            v84 = v80 >> 6;
          if (v80 < 0x1000)
            v84 = 64;
          if (v81 >> 6 >= 0x3C0)
            v85 = 960;
          else
            v85 = v81 >> 6;
          if (v81 < 0x1000)
            v85 = 64;
          if (v82 >> 6 >= 0x3C0)
            v86 = 960;
          else
            v86 = v82 >> 6;
          if (v82 < 0x1000)
            v86 = 64;
          v64 += 2;
          *v65 = (((613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v85 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
          v65[1] = (((613566757 * (unint64_t)((255 * v84 - 16320) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v86 - 16320) >> 7)) >> 32)
                                + 1) >> 1;
          v65 += 2;
          v27 = __CFADD__(v77++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v62 += 2;
    }
    while (v62 < v63);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v12 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_BYTE *)(v33 + i) = (255 * v35 - 16320) / 0x36C;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      v43 = v42 >> 6;
      v44 = v16[1];
      v45 = v44 >> 6;
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v46 = v45;
      else
        v46 = 64;
      v40 = v16 + 2;
      *v22 = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
      v22[1] = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
      v41 = v22 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
      {
LABEL_52:
        v16 += v15;
        v22 += v21;
        goto LABEL_53;
      }
    }
    v47 = -(uint64_t)v39;
    do
    {
      v48 = *v40;
      v49 = v48 >> 6;
      v50 = v40[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v51 = v49;
      else
        v51 = 64;
      if (v50 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v50 >> 6;
      if (v50 < 0x1000)
        v52 = 64;
      *v41 = (613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32;
      v41[1] = (613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32;
      v41 += 2;
      v40 += 2;
      v27 = __CFADD__(v47++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v24 != v36)
  {
    v53 = 0;
    v54 = v24 - v36;
    v55 = 2 * v15;
    do
    {
      v56 = v16;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = *v16;
        v59 = v58 >> 6;
        v60 = v16[1];
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        if (v58 < 0x1000)
          v59 = 64;
        if (v60 >> 6 >= 0x3C0)
          v61 = 960;
        else
          v61 = v60 >> 6;
        if (v60 >= 0x1000)
          v62 = v61;
        else
          v62 = 64;
        v56 = v16 + 2;
        *v22 = (613566757 * (unint64_t)((255 * v59 - 16320) >> 7)) >> 32;
        v22[1] = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
        v57 = v22 + 2;
      }
      if (v39)
      {
        v63 = -(uint64_t)v39;
        do
        {
          v64 = *v56;
          v65 = v64 >> 6;
          v66 = v56[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          *v57 = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v57[1] = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
          v57 += 2;
          v56 += 2;
          v27 = __CFADD__(v63++, 1);
        }
        while (!v27);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v55);
      v22 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v12;
    if (v12 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v14 + v32;
    v34 = *a7 + v30 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v25 >> 1;
  v38 = v25 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v16 + 4;
      v43 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v41 = v23 + 1;
      *v24 = v43;
      v42 = v24 + 1;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      v42 = v24;
      if (!v39)
        goto LABEL_29;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = *(unsigned __int8 *)(v40 + 1);
      v46 = *(unsigned __int8 *)(v40 + 3);
      v47 = *(unsigned __int8 *)(v40 + v15 + 1);
      v48 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41++ = (v45 + v47 + 1) >> 1;
      *v42++ = (v46 + v48 + 1) >> 1;
      v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    v50 = 0;
    v51 = v26 - v36;
    do
    {
      v52 = v16;
      v53 = v23;
      v54 = v24;
      if ((v8 & 1) != 0)
      {
        v52 = v16 + 4;
        v55 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v53 = v23 + 1;
        *v24 = v55;
        v54 = v24 + 1;
      }
      if (v39)
      {
        v56 = -(uint64_t)v39;
        do
        {
          v57 = *(unsigned __int8 *)(v52 + 1);
          v58 = *(unsigned __int8 *)(v52 + 3);
          v59 = *(unsigned __int8 *)(v52 + v15 + 1);
          v60 = *(unsigned __int8 *)(v52 + v15 + 3);
          v52 += 4;
          *v53++ = (v57 + v59 + 1) >> 1;
          *v54++ = (v58 + v60 + 1) >> 1;
          v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  char v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + v30 * v12;
    if (v12 >= v9)
      v33 = 0;
    else
      v33 = v30;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = *(_BYTE *)(v34 + 2 * i + 1);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v27 >= v11)
    v37 = v11;
  else
    v37 = 0;
  v38 = v26 >> 1;
  v39 = v26 - v10;
  if (v38 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v38;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v44 = *(_BYTE *)(v16 + 3);
      v41 = v16 + 4;
      *v24 = *(_BYTE *)(v16 + 1);
      v42 = v24 + 1;
      *v25 = v44;
      v43 = v25 + 1;
      if (!v40)
      {
LABEL_29:
        v16 += 2 * v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v41 = v16;
      v42 = v24;
      v43 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v40)
        goto LABEL_29;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v46 = *(_BYTE *)(v41 + 3);
      *v42++ = *(_BYTE *)(v41 + 1);
      *v43++ = v46;
      v41 += 4;
      v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v27 != v37)
  {
    v48 = 0;
    v49 = v27 - v37;
    v50 = 2 * v15;
    do
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v8 & 1) != 0)
      {
        v54 = *(_BYTE *)(v16 + 3);
        v51 = v16 + 4;
        *v24 = *(_BYTE *)(v16 + 1);
        v52 = v24 + 1;
        *v25 = v54;
        v53 = v25 + 1;
      }
      if (v40)
      {
        v55 = -(uint64_t)v40;
        do
        {
          v56 = *(_BYTE *)(v51 + 3);
          *v52++ = *(_BYTE *)(v51 + 1);
          *v53++ = v56;
          v51 += 4;
          v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      v16 += v50;
      v24 += v21;
      v25 += v22;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v12 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i) >> 6;
          if (v37 >= 0x3AC)
            v37 = 940;
          if (v37 <= 0x40)
            v37 = 64;
          *(_BYTE *)(v35 + i) = (255 * v37 - 16320) / 0x36C;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v38 = v11;
  else
    v38 = 0;
  v39 = v25 >> 1;
  v40 = v25 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v45 = *v16;
      v46 = v45 >> 6;
      v47 = v16[1];
      v48 = v47 >> 6;
      v49 = *(unsigned __int16 *)((char *)v16 + v15);
      v50 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v45 >> 6 >= 0x3C0)
        v46 = 960;
      if (v45 < 0x1000)
        v46 = 64;
      if (v48 >= 0x3C0)
        v48 = 960;
      if (v47 >= 0x1000)
        v51 = v48;
      else
        v51 = 64;
      if (v49 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v49 >> 6;
      if (v49 < 0x1000)
        v52 = 64;
      if (v50 >> 6 >= 0x3C0)
        v53 = 960;
      else
        v53 = v50 >> 6;
      if (v50 >= 0x1000)
        v54 = v53;
      else
        v54 = 64;
      v42 = v16 + 2;
      *v23 = (((613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v43 = v23 + 1;
      *v24 = (((613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v44 = v24 + 1;
      if (!v41)
        goto LABEL_73;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      v44 = v24;
      if (!v41)
      {
LABEL_73:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_74;
      }
    }
    v55 = -(uint64_t)v41;
    do
    {
      v56 = *v42;
      v57 = v56 >> 6;
      v58 = v42[1];
      v59 = *(unsigned __int16 *)((char *)v42 + v15);
      v60 = *(unsigned __int16 *)((char *)v42 + v15 + 2);
      if (v56 >> 6 >= 0x3C0)
        v57 = 960;
      if (v56 >= 0x1000)
        v61 = v57;
      else
        v61 = 64;
      if (v58 >> 6 >= 0x3C0)
        v62 = 960;
      else
        v62 = v58 >> 6;
      if (v58 < 0x1000)
        v62 = 64;
      if (v59 >> 6 >= 0x3C0)
        v63 = 960;
      else
        v63 = v59 >> 6;
      if (v59 < 0x1000)
        v63 = 64;
      if (v60 >> 6 >= 0x3C0)
        v64 = 960;
      else
        v64 = v60 >> 6;
      if (v60 < 0x1000)
        v64 = 64;
      v42 += 2;
      *v43++ = (((613566757 * (unint64_t)((255 * v61 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      *v44++ = (((613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v64 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v29 = __CFADD__(v55++, 1);
    }
    while (!v29);
    goto LABEL_73;
  }
LABEL_74:
  if (v26 != v38)
  {
    v65 = 0;
    v66 = v26 - v38;
    do
    {
      v67 = v16;
      v68 = v23;
      v69 = v24;
      if ((v8 & 1) != 0)
      {
        v70 = *v16;
        v71 = v70 >> 6;
        v72 = v16[1];
        v73 = *(unsigned __int16 *)((char *)v16 + v15);
        v74 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v70 >> 6 >= 0x3C0)
          v71 = 960;
        if (v70 < 0x1000)
          v71 = 64;
        if (v72 >> 6 >= 0x3C0)
          v75 = 960;
        else
          v75 = v72 >> 6;
        if (v72 >= 0x1000)
          v76 = v75;
        else
          v76 = 64;
        if (v73 >> 6 >= 0x3C0)
          v77 = 960;
        else
          v77 = v73 >> 6;
        if (v73 >= 0x1000)
          v78 = v77;
        else
          v78 = 64;
        if (v74 >> 6 >= 0x3C0)
          v79 = 960;
        else
          v79 = v74 >> 6;
        if (v74 >= 0x1000)
          v80 = v79;
        else
          v80 = 64;
        v67 = v16 + 2;
        *v23 = (((613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v68 = v23 + 1;
        *v24 = (((613566757 * (unint64_t)((255 * v76 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v80 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v69 = v24 + 1;
      }
      if (v41)
      {
        v81 = -(uint64_t)v41;
        do
        {
          v82 = *v67;
          v83 = v82 >> 6;
          v84 = v67[1];
          v85 = *(unsigned __int16 *)((char *)v67 + v15);
          v86 = *(unsigned __int16 *)((char *)v67 + v15 + 2);
          if (v82 >> 6 >= 0x3C0)
            v83 = 960;
          if (v82 >= 0x1000)
            v87 = v83;
          else
            v87 = 64;
          if (v84 >> 6 >= 0x3C0)
            v88 = 960;
          else
            v88 = v84 >> 6;
          if (v84 < 0x1000)
            v88 = 64;
          if (v85 >> 6 >= 0x3C0)
            v89 = 960;
          else
            v89 = v85 >> 6;
          if (v85 < 0x1000)
            v89 = 64;
          if (v86 >> 6 >= 0x3C0)
            v90 = 960;
          else
            v90 = v86 >> 6;
          if (v86 < 0x1000)
            v90 = 64;
          v67 += 2;
          *v68++ = (((613566757 * (unint64_t)((255 * v87 - 16320) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v89 - 16320) >> 7)) >> 32)
                                + 1) >> 1;
          *v69++ = (((613566757 * (unint64_t)((255 * v88 - 16320) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v90 - 16320) >> 7)) >> 32)
                                + 1) >> 1;
          v29 = __CFADD__(v81++, 1);
        }
        while (!v29);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v65 += 2;
    }
    while (v65 < v66);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int16 *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v12 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i) >> 6;
          if (v37 >= 0x3AC)
            v37 = 940;
          if (v37 <= 0x40)
            v37 = 64;
          *(_BYTE *)(v35 + i) = (255 * v37 - 16320) / 0x36C;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v38 = v11;
  else
    v38 = 0;
  v39 = v25 >> 1;
  v40 = v25 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v45 = *v16;
      v46 = v45 >> 6;
      v47 = v16[1];
      v48 = v47 >> 6;
      if (v45 >> 6 >= 0x3C0)
        v46 = 960;
      if (v45 < 0x1000)
        v46 = 64;
      if (v48 >= 0x3C0)
        v48 = 960;
      if (v47 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v42 = v16 + 2;
      *v23 = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
      v43 = v23 + 1;
      *v24 = (613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32;
      v44 = v24 + 1;
      if (!v41)
        goto LABEL_52;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      v44 = v24;
      if (!v41)
      {
LABEL_52:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_53;
      }
    }
    v50 = -(uint64_t)v41;
    do
    {
      v51 = *v42;
      v52 = v51 >> 6;
      v53 = v42[1];
      if (v51 >> 6 >= 0x3C0)
        v52 = 960;
      if (v51 >= 0x1000)
        v54 = v52;
      else
        v54 = 64;
      if (v53 >> 6 >= 0x3C0)
        v55 = 960;
      else
        v55 = v53 >> 6;
      if (v53 < 0x1000)
        v55 = 64;
      *v43++ = (613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32;
      *v44++ = (613566757 * (unint64_t)((255 * v55 - 16320) >> 7)) >> 32;
      v42 += 2;
      v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v26 != v38)
  {
    v56 = 0;
    v57 = v26 - v38;
    v58 = 2 * v15;
    do
    {
      v59 = v16;
      v60 = v23;
      v61 = v24;
      if ((v8 & 1) != 0)
      {
        v62 = *v16;
        v63 = v62 >> 6;
        v64 = v16[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 < 0x1000)
          v63 = 64;
        if (v64 >> 6 >= 0x3C0)
          v65 = 960;
        else
          v65 = v64 >> 6;
        if (v64 >= 0x1000)
          v66 = v65;
        else
          v66 = 64;
        v59 = v16 + 2;
        *v23 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
        v60 = v23 + 1;
        *v24 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
        v61 = v24 + 1;
      }
      if (v41)
      {
        v67 = -(uint64_t)v41;
        do
        {
          v68 = *v59;
          v69 = v68 >> 6;
          v70 = v59[1];
          if (v68 >> 6 >= 0x3C0)
            v69 = 960;
          if (v68 >= 0x1000)
            v71 = v69;
          else
            v71 = 64;
          if (v70 >> 6 >= 0x3C0)
            v72 = 960;
          else
            v72 = v70 >> 6;
          if (v70 < 0x1000)
            v72 = 64;
          *v60++ = (613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32;
          *v61++ = (613566757 * (unint64_t)((255 * v72 - 16320) >> 7)) >> 32;
          v59 += 2;
          v29 = __CFADD__(v67++, 1);
        }
        while (!v29);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v58);
      v23 += v21;
      v24 += v22;
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_x422_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_x422_w30r;
  *a11 = vt_VImage_Cleanup_x422_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_x422_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[5];
    v17 = a3[1] + v14 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v22 = *v23 & 0xFFC0;
            v21 = v23[1] & 0xFFC0;
            v23 += 2;
          }
          v24 = (_WORD *)(v15 + v19);
          v25 = *(_WORD *)(v18 + 2 * v20) & 0xFFC0;
          *v24 = -1;
          v24[1] = v25;
          v24[2] = v22;
          v24[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_x422_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[5];
    v17 = a3[1] + v14 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v22 = *(_BYTE *)(v23 + 1);
            v21 = *(_BYTE *)(v23 + 3);
            v23 += 4;
          }
          v24 = *(_BYTE *)(v18 + 2 * v20 + 1);
          v25 = (_BYTE *)(v15 + v19);
          *v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_x422_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  BOOL v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  _WORD *v45;
  int16x4_t *v46;
  __int16 v47;
  uint64_t v48;
  _WORD *v49;
  int16x4_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (_WORD *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v13;
    v22 = *a7 + *a8 * v13;
    v23 = *a4;
    v24 = v21 + 2 * v14;
    v25 = v22 + 2 * v14;
    v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFC0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  v28 = v8 & 1;
  if (v10 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v17 >> 1;
  v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1)
    v31 = (v17 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v40 = v12[1] & 0xFFC0;
      v33 = v12 + 2;
      *v16 = *v12 & 0xFFC0;
      v16[1] = v40;
      v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33 & 0xFFC0;
          v37 = v33[1] & 0xFFC0;
          v33 += 2;
          *v34 = v36;
          v34[1] = v37;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v12;
      v34 = v16;
      if (v31)
        goto LABEL_19;
    }
    v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      v41 = *v33 & 0xFFC0;
      v42 = v33[1] & 0xFFC0;
      *v34 = v41;
      v34[1] = v42;
    }
    v12 = (_WORD *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v10 - v29;
    do
    {
      v45 = v12;
      v46 = (int16x4_t *)v16;
      if ((v30 & 1) != 0)
      {
        v47 = v12[1] & 0xFFC0;
        v45 = v12 + 2;
        *v16 = *v12 & 0xFFC0;
        v16[1] = v47;
        v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFC0;
          v50.i32[1] = v45[1] & 0xFFC0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        v51 = *v49 & 0xFFC0;
        v52 = v49[1] & 0xFFC0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      v12 = (_WORD *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v12 & 0xFFC0;
      v54 = v12[1] & 0xFFC0;
      v12 += 2;
      *v16 = v53;
      v16[1] = v54;
      v16 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v12 & 0xFFC0;
        v57 = v12[1] & 0xFFC0;
        v12 += 2;
        *v16 = v56;
        v16[1] = v57;
        v16 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v58 = 2 * v31;
    }
    else
    {
      v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      v59 = *v12 & 0xFFC0;
      v60 = v12[1] & 0xFFC0;
      *v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFC0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1] & 0xFFC0;
      v36 = v14 + 2;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] & 0xFFC0;
      *v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1] & 0xFFC0;
        v44 = v14 + 2;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] & 0xFFC0;
          *v45 = *v44 & 0xFFC0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14 & 0xFFC0;
      v50 = v14[1] & 0xFFC0;
      v14 += 2;
      *v21 = v49;
      v21[1] = v50;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  __int16 *v33;
  _WORD *v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  BOOL v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  __int16 *v45;
  int16x4_t *v46;
  __int16 v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v13;
    v22 = *a7 + *a8 * v13;
    v23 = *a4;
    v24 = v21 + 2 * v14;
    v25 = v22 + 2 * v14;
    v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFC0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  v28 = v8 & 1;
  if (v10 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v17 >> 1;
  v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1)
    v31 = (v17 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v33 = v12 + 2;
      v40 = v12[1] & 0xFFC0;
      *v16 = *v12 & 0xFFC0;
      v16[1] = v40;
      v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = v36 & 0xFFC0;
          v34[1] = v37 & 0xFFC0;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v12;
      v34 = v16;
      if (v31)
        goto LABEL_19;
    }
    v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      v41 = *v33 & 0xFFC0;
      v42 = v33[1] & 0xFFC0;
      *v34 = v41;
      v34[1] = v42;
    }
    v12 = (__int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v10 - v29;
    do
    {
      v45 = v12;
      v46 = (int16x4_t *)v16;
      if ((v30 & 1) != 0)
      {
        v45 = v12 + 2;
        v47 = v12[1] & 0xFFC0;
        *v16 = *v12 & 0xFFC0;
        v16[1] = v47;
        v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFC0;
          v50.i32[1] = v45[1] & 0xFFC0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        v51 = *v49 & 0xFFC0;
        v52 = v49[1] & 0xFFC0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      v12 = (__int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v12;
      v54 = v12[1];
      v12 += 2;
      *v16 = v53 & 0xFFC0;
      v16[1] = v54 & 0xFFC0;
      v16 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v12;
        v57 = v12[1];
        v12 += 2;
        *v16 = v56 & 0xFFC0;
        v16[1] = v57 & 0xFFC0;
        v16 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v58 = 2 * v31;
    }
    else
    {
      v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      v59 = *v12 & 0xFFC0;
      v60 = v12[1] & 0xFFC0;
      *v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFC0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] & 0xFFC0;
      *v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] & 0xFFC0;
          *v45 = *v44 & 0xFFC0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 & 0xFFC0;
      v21[1] = v50 & 0xFFC0;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  int16x4_t *v45;
  __int16 v46;
  uint64_t v47;
  _WORD *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (_WORD *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14)
    v18 = v14;
  else
    v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v60 = a8[1];
    v62 = a4[1];
    v63 = v18;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[2];
    v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v25 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    v26 = 2 * v18;
    v61 = v19;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    v16 = v60;
    v8 = a2[4];
    v9 = a2[5];
    v10 = v62;
    v18 = v63;
    v19 = v61;
  }
  v27 = v9 & 1;
  if (v19 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v8;
  v30 = v18 >> 1;
  v31 = v8 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = v11[1] & 0xFFC0;
      v32 = v11 + 2;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v39;
      v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32 & 0xFFC0;
          v36 = v32[1] & 0xFFC0;
          v32 += 2;
          *v33 = v35;
          v33[1] = v36;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v11;
      v33 = v17;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v40 = *v32 & 0xFFC0;
      v41 = v32[1] & 0xFFC0;
      *v33 = v40;
      v33[1] = v41;
    }
    v11 = (_WORD *)((char *)v11 + v10);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v19 - v28;
    do
    {
      v44 = v11;
      v45 = (int16x4_t *)v17;
      if ((v29 & 1) != 0)
      {
        v46 = v11[1] & 0xFFC0;
        v44 = v11 + 2;
        *v17 = *v11 & 0xFFC0;
        v17[1] = v46;
        v45 = (int16x4_t *)(v17 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFC0;
          v49.i32[1] = v44[1] & 0xFFC0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v50 = *v48 & 0xFFC0;
        v51 = v48[1] & 0xFFC0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      v11 = (_WORD *)((char *)v11 + v10);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v11 & 0xFFC0;
      v53 = v11[1] & 0xFFC0;
      v11 += 2;
      *v17 = v52;
      v17[1] = v53;
      v17 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v11 & 0xFFC0;
        v56 = v11[1] & 0xFFC0;
        v11 += 2;
        *v17 = v55;
        v17[1] = v56;
        v17 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      v57 = v11[1] & 0xFFC0;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  _WORD *v32;
  _WORD *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  _WORD *v40;
  _WORD *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = a4[1];
  v12 = (_WORD *)(a3[1] + v11 * v10 + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v13;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v13) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v19 >= v14 - v13)
    v19 = v14 - v13;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v20 = *(_QWORD *)(a6 + 24);
  else
    v20 = *(_QWORD *)(a2 + 24);
  if (v20)
  {
    v52 = a8[1];
    v53 = v20;
    v54 = a4[1];
    v21 = *a4;
    v22 = *a8;
    v23 = a8[2];
    v24 = (char *)(a7[2] + v23 * v15 + v16);
    v25 = (char *)(*a7 + *a8 * v15 + v16);
    v26 = (char *)(*a3 + *a4 * v10 + 2 * (v9 + v8));
    v50 = v19;
    v27 = 2 * v19;
    do
    {
      memcpy(v25, v26, v27);
      memset(v24, 255, v27);
      v26 += v21;
      v25 += v22;
      v24 += v23;
      --v20;
    }
    while (v20);
    v17 = v52;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v20 = v53;
    v11 = v54;
    v19 = v50;
  }
  v28 = v10 & 1;
  if (v20 >= v28)
    v29 = v10 & 1;
  else
    v29 = 0;
  v30 = v8;
  v31 = v19 >> 1;
  if (v19 >> 1 >= (v19 - v9) >> 1)
    v31 = (v19 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v34 = v12[1] & 0xFFC0;
      v32 = v12 + 2;
      *v18 = *v12 & 0xFFC0;
      v18[1] = v34;
      v33 = v18 + 2;
      if (!v31)
      {
LABEL_23:
        v12 = (_WORD *)((char *)v12 + v11);
        v18 = (_WORD *)((char *)v18 + v17);
        goto LABEL_24;
      }
    }
    else
    {
      v32 = v12;
      v33 = v18;
      if (!v31)
        goto LABEL_23;
    }
    v35 = -(uint64_t)v31;
    do
    {
      v36 = v32[1] & 0xFFC0;
      *v33 = *v32 & 0xFFC0;
      v33[1] = v36;
      v32 += 2;
      v33 += 2;
      v37 = __CFADD__(v35++, 1);
    }
    while (!v37);
    goto LABEL_23;
  }
LABEL_24:
  if (v20 == v29)
  {
    v38 = 0;
  }
  else
  {
    v39 = 0;
    v38 = v20 - v29;
    do
    {
      v40 = v12;
      v41 = v18;
      if ((v30 & 1) != 0)
      {
        v42 = v12[1] & 0xFFC0;
        v40 = v12 + 2;
        *v18 = *v12 & 0xFFC0;
        v18[1] = v42;
        v41 = v18 + 2;
      }
      if (v31)
      {
        v43 = -(uint64_t)v31;
        do
        {
          v44 = v40[1] & 0xFFC0;
          *v41 = *v40 & 0xFFC0;
          v41[1] = v44;
          v40 += 2;
          v41 += 2;
          v37 = __CFADD__(v43++, 1);
        }
        while (!v37);
      }
      v12 = (_WORD *)((char *)v12 + v11);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v28 < v20)
  {
    if ((v30 & 1) != 0)
    {
      v45 = *v12 & 0xFFC0;
      v46 = v12[1] & 0xFFC0;
      v12 += 2;
      *v18 = v45;
      v18[1] = v46;
      v18 += 2;
    }
    if (v31)
    {
      v47 = -(uint64_t)v31;
      do
      {
        v48 = v12[1] & 0xFFC0;
        *v18 = *v12 & 0xFFC0;
        v18[1] = v48;
        v12 += 2;
        v18 += 2;
        v37 = __CFADD__(v47++, 1);
      }
      while (!v37);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = v23 + v14;
    v27 = v24 + v14;
    v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = v8 & 1;
  if (v10 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v19 >> 1;
  v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1)
    v33 = (v19 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = *(_BYTE *)(v12 + 3);
      v35 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v42;
      v36 = v18 + 2;
      if (v33)
      {
LABEL_20:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *(_BYTE *)(v35 + 1);
          v39 = *(_BYTE *)(v35 + 3);
          v35 += 4;
          *v36 = v38;
          v36[1] = v39;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_26;
      }
    }
    else
    {
      v35 = v12;
      v36 = v18;
      if (v33)
        goto LABEL_20;
    }
    v41 = 0;
LABEL_26:
    if ((v41 | (unint64_t)v34) < v19)
    {
      v43 = *(_BYTE *)(v35 + 1);
      v44 = *(_BYTE *)(v35 + 3);
      *v36 = v43;
      v36[1] = v44;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v10 - v31;
    do
    {
      v47 = v12;
      v48 = v18;
      if ((v32 & 1) != 0)
      {
        v49 = *(_BYTE *)(v12 + 3);
        v47 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v49;
        v48 = v18 + 2;
      }
      if (v33)
      {
        v50 = -(uint64_t)v33;
        do
        {
          v51 = *(_BYTE *)(v47 + 1);
          v52 = *(_BYTE *)(v47 + 3);
          v47 += 4;
          *v48 = v51;
          v48[1] = v52;
          v48[2] = v51;
          v48[3] = v52;
          v48 += 4;
          v40 = __CFADD__(v50++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        v53 = *(_BYTE *)(v47 + 1);
        v54 = *(_BYTE *)(v47 + 3);
        *v48 = v53;
        v48[1] = v54;
      }
      v12 += v11;
      v18 += v17;
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v10)
  {
    if ((v32 & 1) != 0)
    {
      v55 = *(_BYTE *)(v12 + 1);
      v56 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v55;
      v18[1] = v56;
      v18 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *(_BYTE *)(v12 + 1);
        v59 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v58;
        v18[1] = v59;
        v18 += 2;
        v40 = __CFADD__(v57++, 1);
      }
      while (!v40);
      v60 = 2 * v33;
    }
    else
    {
      v60 = 0;
    }
    if ((v60 | (unint64_t)v34) < v19)
    {
      v61 = *(_BYTE *)(v12 + 1);
      v62 = *(_BYTE *)(v12 + 3);
      *v18 = v61;
      v18[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = a8[2];
    v26 = a7[2] + v25 * v18 + v16;
    v27 = *a7 + *a8 * v18 + v16;
    v28 = *a3 + v23 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v27 += v24;
      v26 += v25;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v11 & 1;
  if (v8 >= v30)
    v31 = v11 & 1;
  else
    v31 = 0;
  v32 = v21 >> 1;
  v33 = v21 - v10;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = *(_BYTE *)(v14 + 3);
      v35 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v37;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_26;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *(_BYTE *)(v35 + 3);
      *v36 = *(_BYTE *)(v35 + 1);
      v36[1] = v39;
      v36 += 2;
      v35 += 4;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v31;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v9 & 1) != 0)
      {
        v45 = *(_BYTE *)(v14 + 3);
        v43 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v34)
      {
        v46 = -(uint64_t)v34;
        do
        {
          v47 = *(_BYTE *)(v43 + 3);
          *v44 = *(_BYTE *)(v43 + 1);
          v44[1] = v47;
          v44 += 2;
          v43 += 4;
          v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v48 = *(_BYTE *)(v14 + 1);
      v49 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v48;
      v20[1] = v49;
      v20 += 2;
    }
    if (v34)
    {
      v50 = -(uint64_t)v34;
      do
      {
        v51 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v51;
        v20 += 2;
        v14 += 4;
        v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x422_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 4;
      v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(unsigned __int8 *)(v40 + 1);
      v45 = *(unsigned __int8 *)(v40 + 3);
      v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v48 = 0;
    v49 = v24 - v36;
    do
    {
      v50 = v16;
      v51 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 4;
        v52 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v52;
        v51 = v22 + 2;
      }
      if (v39)
      {
        v53 = -(uint64_t)v39;
        do
        {
          v54 = *(unsigned __int8 *)(v50 + 1);
          v55 = *(unsigned __int8 *)(v50 + 3);
          v56 = *(unsigned __int8 *)(v50 + v15 + 1);
          v57 = *(unsigned __int8 *)(v50 + v15 + 3);
          v50 += 4;
          *v51 = (v54 + v56 + 1) >> 1;
          v51[1] = (v55 + v57 + 1) >> 1;
          v51 += 2;
          v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += 2 * v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_x422_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char v50;
  uint64_t v51;
  char v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *(_BYTE *)(v16 + 3);
      v40 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(_BYTE *)(v40 + 3);
      *v41 = *(_BYTE *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v45 = 0;
    v46 = v24 - v36;
    v47 = 2 * v15;
    do
    {
      v48 = v16;
      v49 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = *(_BYTE *)(v16 + 3);
        v48 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = *(_BYTE *)(v48 + 3);
          *v49 = *(_BYTE *)(v48 + 1);
          v49[1] = v52;
          v49 += 2;
          v48 += 4;
          v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      v16 += v47;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_x420_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_x420_w30r;
  *a11 = vt_VImage_Cleanup_x420_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_x420_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  _WORD *v24;
  _WORD *v25;
  __int16 v26;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = (_WORD *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v23 = *v24 & 0xFFC0;
            v22 = v24[1] & 0xFFC0;
            v24 += 2;
          }
          v25 = (_WORD *)(v17 + v20);
          v26 = *(_WORD *)(v19 + 2 * v21) & 0xFFC0;
          *v25 = -1;
          v25[1] = v26;
          v25[2] = v23;
          v25[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_x420_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v23 = *(_BYTE *)(v24 + 1);
            v22 = *(_BYTE *)(v24 + 3);
            v24 += 4;
          }
          v25 = *(_BYTE *)(v19 + 2 * v21 + 1);
          v26 = (_BYTE *)(v17 + v20);
          *v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_x420_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  _WORD *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v11;
    v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        for (i = 0; i < v12; i += 2)
        {
          v23 = (_WORD *)(v19 + 2 * i);
          v24 = (_WORD *)(v20 + 2 * i);
          v25 = (_WORD *)(v18 + v21);
          v26 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          v27 = *v24 & 0xFFC0;
          LOWORD(v24) = v24[1] & 0xFFC0;
          *v25 = v26;
          v25[1] = v27;
          v25[2] = (_WORD)v23;
          v25[3] = (_WORD)v24;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_x420_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v11);
    v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        v22 = v18;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = v20 + 2 * v21;
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          v26 = *(_BYTE *)(v24 + 1);
          LOBYTE(v24) = *(_BYTE *)(v24 + 3);
          *v22 = v25;
          v22[1] = v26;
          v22[2] = v23;
          v22[3] = v24;
          v22 += 4;
          v21 += 2;
        }
        while (v21 < v12);
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_x420_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  _WORD *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v46 = v14[1] & 0xFFC0;
      v39 = v14 + 2;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39 & 0xFFC0;
          v43 = v39[1] & 0xFFC0;
          v39 += 2;
          *v40 = v42;
          v40[1] = v43;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 & 0xFFC0;
      v48 = v39[1] & 0xFFC0;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v52 = *v14 & 0xFFC0;
        v53 = v14[1] & 0xFFC0;
        v50 = v14 + 2;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50 & 0xFFC0;
          v57 = v50[1] & 0xFFC0;
          v50 += 2;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 & 0xFFC0;
        v60 = v50[1] & 0xFFC0;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14 & 0xFFC0;
      v64 = v14[1] & 0xFFC0;
      v14 += 2;
      *v20 = v63;
      v20[1] = v64;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14 & 0xFFC0;
        v67 = v14[1] & 0xFFC0;
        v14 += 2;
        *v20 = v66;
        v20[1] = v67;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 & 0xFFC0;
      v70 = v14[1] & 0xFFC0;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v43 = v14[1] & 0xFFC0;
      v36 = v14 + 2;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 & 0xFFC0;
          v40 = v36[1] & 0xFFC0;
          v36 += 2;
          *v37 = v39;
          v37[1] = v40;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 & 0xFFC0;
      v45 = v36[1] & 0xFFC0;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v49 = *v14 & 0xFFC0;
        v50 = v14[1] & 0xFFC0;
        v47 = v14 + 2;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47 & 0xFFC0;
          v54 = v47[1] & 0xFFC0;
          v47 += 2;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 & 0xFFC0;
        v57 = v47[1] & 0xFFC0;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14 & 0xFFC0;
      v61 = v14[1] & 0xFFC0;
      v14 += 2;
      *v20 = v60;
      v20[1] = v61;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14 & 0xFFC0;
        v64 = v14[1] & 0xFFC0;
        v14 += 2;
        *v20 = v63;
        v20[1] = v64;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 & 0xFFC0;
      v67 = v14[1] & 0xFFC0;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t j;
  unsigned __int16 *v60;
  _WORD *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  _WORD *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _WORD *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  _WORD *v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  if (v12 - v11 + (v12 & 1) >= v18)
    v22 = v18;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v32 = *(unsigned __int16 *)(v29 + 2 * i) >> 6;
          if (v32 >= 0x3AC)
            v32 = 940;
          if (v32 <= 0x40)
            v32 = 64;
          *(_WORD *)(v30 + 2 * i) = (-4194240 - v32 + (v32 << 16)) / 0x36C;
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = v8 & 1;
  v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34)
    v34 = v22 >> 1;
  v35 = v9;
  v36 = v21 >> 1;
  v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1)
    v36 = (v21 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v48 = *v14;
      v49 = v48 >> 6;
      v50 = v14[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v51 = v49;
      else
        v51 = 64;
      if (v50 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v50 >> 6;
      if (v50 >= 0x1000)
        v53 = v52;
      else
        v53 = 64;
      v38 = v14 + 2;
      *v20 = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-4194240 - v53 + (v53 << 16)) >> 7)) >> 32;
      v39 = v20 + 2;
      if (v36)
        goto LABEL_26;
    }
    else
    {
      v38 = v14;
      v39 = v20;
      if (v36)
      {
LABEL_26:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v41 >> 6;
          v43 = v38[1];
          if (v41 >> 6 >= 0x3C0)
            v42 = 960;
          if (v41 >= 0x1000)
            v44 = v42;
          else
            v44 = 64;
          if (v43 >> 6 >= 0x3C0)
            v45 = 960;
          else
            v45 = v43 >> 6;
          if (v43 < 0x1000)
            v45 = 64;
          v38 += 2;
          *v39 = (613566757 * (unint64_t)((-4194240 - v44 + (v44 << 16)) >> 7)) >> 32;
          v39[1] = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
          v39 += 2;
          v46 = __CFADD__(v40++, 1);
        }
        while (!v46);
        v47 = 2 * v36;
        goto LABEL_53;
      }
    }
    v47 = 0;
LABEL_53:
    if ((v47 | (unint64_t)v37) < v21)
    {
      v54 = *v38;
      v55 = v54 >> 6;
      v56 = v38[1];
      v57 = v56 >> 6;
      if (v54 >> 6 >= 0x3C0)
        v55 = 960;
      if (v54 < 0x1000)
        v55 = 64;
      if (v57 >= 0x3C0)
        v57 = 960;
      if (v56 >= 0x1000)
        v58 = v57;
      else
        v58 = 64;
      *v39 = (613566757 * (unint64_t)((-4194240 - v55 + (v55 << 16)) >> 7)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v60 = v14;
      v61 = v20;
      if ((v35 & 1) != 0)
      {
        v62 = *v14;
        v63 = v62 >> 6;
        v64 = v14[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 >= 0x1000)
          v65 = v63;
        else
          v65 = 64;
        if (v64 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v64 >> 6;
        if (v64 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v60 = v14 + 2;
        v68 = (613566757 * (unint64_t)((-4194240 - v65 + (v65 << 16)) >> 7)) >> 32;
        v69 = (613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32;
        *v20 = v68;
        v20[1] = v69;
        v70 = (_WORD *)((char *)v20 + v19);
        *v70 = v68;
        v70[1] = v69;
        v61 = v20 + 2;
      }
      if (v36)
      {
        v71 = -(uint64_t)v36;
        do
        {
          v72 = *v60;
          v73 = v72 >> 6;
          v74 = v60[1];
          if (v72 >> 6 >= 0x3C0)
            v73 = 960;
          if (v72 >= 0x1000)
            v75 = v73;
          else
            v75 = 64;
          if (v74 >> 6 >= 0x3C0)
            v76 = 960;
          else
            v76 = v74 >> 6;
          if (v74 < 0x1000)
            v76 = 64;
          v77 = (613566757 * (unint64_t)((-4194240 - v75 + (v75 << 16)) >> 7)) >> 32;
          *v61 = v77;
          v78 = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
          v61[1] = v78;
          v61[2] = v77;
          v61[3] = v78;
          v79 = (_WORD *)((char *)v61 + v19);
          *v79 = v77;
          v79[1] = v78;
          v60 += 2;
          v79[2] = v77;
          v79[3] = v78;
          v61 += 4;
          v46 = __CFADD__(v71++, 1);
        }
        while (!v46);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        v80 = *v60;
        v81 = v80 >> 6;
        v82 = v60[1];
        if (v80 >> 6 >= 0x3C0)
          v81 = 960;
        if (v80 >= 0x1000)
          v83 = v81;
        else
          v83 = 64;
        if (v82 >> 6 >= 0x3C0)
          v84 = 960;
        else
          v84 = v82 >> 6;
        if (v82 >= 0x1000)
          v85 = v84;
        else
          v85 = 64;
        v86 = (613566757 * (unint64_t)((-4194240 - v83 + (v83 << 16)) >> 7)) >> 32;
        v87 = (613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32;
        *v61 = v86;
        v61[1] = v87;
        v88 = (_WORD *)((char *)v61 + v19);
        *v88 = v86;
        v88[1] = v87;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v89 = 2 * v34;
  }
  else
  {
    v89 = 0;
  }
  if ((v89 | (unint64_t)v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v90 = *v14;
      v91 = v90 >> 6;
      v92 = v14[1];
      v93 = v92 >> 6;
      if (v90 >> 6 >= 0x3C0)
        v91 = 960;
      if (v90 < 0x1000)
        v91 = 64;
      if (v93 >= 0x3C0)
        v93 = 960;
      if (v92 >= 0x1000)
        v94 = v93;
      else
        v94 = 64;
      v14 += 2;
      *v20 = (613566757 * (unint64_t)((-4194240 - v91 + (v91 << 16)) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-4194240 - v94 + (v94 << 16)) >> 7)) >> 32;
      v20 += 2;
    }
    if (v36)
    {
      v95 = -(uint64_t)v36;
      do
      {
        v96 = *v14;
        v97 = v96 >> 6;
        v98 = v14[1];
        if (v96 >> 6 >= 0x3C0)
          v97 = 960;
        if (v96 >= 0x1000)
          v99 = v97;
        else
          v99 = 64;
        if (v98 >> 6 >= 0x3C0)
          v100 = 960;
        else
          v100 = v98 >> 6;
        if (v98 < 0x1000)
          v100 = 64;
        v14 += 2;
        *v20 = (613566757 * (unint64_t)((-4194240 - v99 + (v99 << 16)) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-4194240 - v100 + (v100 << 16)) >> 7)) >> 32;
        v20 += 2;
        v46 = __CFADD__(v95++, 1);
      }
      while (!v46);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      v101 = *v14;
      v102 = v101 >> 6;
      v103 = v14[1];
      v104 = v103 >> 6;
      if (v101 >> 6 >= 0x3C0)
        v102 = 960;
      if (v101 < 0x1000)
        v102 = 64;
      if (v104 >= 0x3C0)
        v104 = 960;
      if (v103 >= 0x1000)
        v105 = v104;
      else
        v105 = 64;
      *v20 = (613566757 * (unint64_t)((-4194240 - v102 + (v102 << 16)) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-4194240 - v105 + (v105 << 16)) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  BOOL v46;
  uint64_t j;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = v26;
    v29 = 2 * (v9 + v8) + v28;
    v30 = *a8;
    v31 = a8[2];
    v32 = v27 + v29;
    v33 = a7[2] + v31 * v19 + v20;
    v34 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v26;
      v34 += v30;
      v33 += v31;
      ++v25;
    }
    while (v25 != v24);
  }
  v36 = v11 & 1;
  if (v24 >> 1 >= (v24 - v36) >> 1)
    v37 = (v24 - (v11 & 1)) >> 1;
  else
    v37 = v24 >> 1;
  v38 = v8;
  v39 = v23 >> 1;
  v40 = (v23 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v43 = v15[1] & 0xFFC0;
      v41 = v15 + 2;
      *v22 = *v15 & 0xFFC0;
      v22[1] = v43;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_28:
        v15 = (_WORD *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_28;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = v41[1] & 0xFFC0;
      *v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v50 = v15[1] & 0xFFC0;
        v48 = v15 + 2;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = *v48 & 0xFFC0;
          v53 = v48[1] & 0xFFC0;
          *v49 = v52;
          v49[1] = v53;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v52;
          v54[1] = v53;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v24)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15 & 0xFFC0;
      v57 = v15[1] & 0xFFC0;
      v15 += 2;
      *v22 = v56;
      v22[1] = v57;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v59;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  uint64_t j;
  _WORD *v45;
  _WORD *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v40 = v15[1] & 0xFFC0;
      v38 = v15 + 2;
      *v22 = *v15 & 0xFFC0;
      v22[1] = v40;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (_WORD *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] & 0xFFC0;
      *v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v47 = v15[1] & 0xFFC0;
        v45 = v15 + 2;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = *v45 & 0xFFC0;
          v50 = v45[1] & 0xFFC0;
          *v46 = v49;
          v46[1] = v50;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15 & 0xFFC0;
      v54 = v15[1] & 0xFFC0;
      v15 += 2;
      *v22 = v53;
      v22[1] = v54;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v56;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t j;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  _WORD *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a8;
    v30 = v27 + 2 * (v9 + v8) + v28;
    v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 6;
          if (v33 >= 0x3AC)
            v33 = 940;
          if (v33 <= 0x40)
            v33 = 64;
          *(_WORD *)(v31 + 2 * i) = (-4194240 - v33 + (v33 << 16)) / 0x36C;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1)
    v35 = (v24 - (v11 & 1)) >> 1;
  else
    v35 = v24 >> 1;
  v36 = v8;
  v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1)
    v37 = (v23 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v40 = *v15;
      v41 = v40 >> 6;
      v42 = v15[1];
      v43 = v42 >> 6;
      if (v40 >> 6 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v43 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v44 = v43;
      else
        v44 = 64;
      v38 = v15 + 2;
      *v22 = (613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-4194240 - v44 + (v44 << 16)) >> 7)) >> 32;
      v39 = v22 + 2;
      if (!v37)
        goto LABEL_51;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v37)
      {
LABEL_51:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    v45 = -(uint64_t)v37;
    do
    {
      v46 = *v38;
      v47 = v46 >> 6;
      v48 = v38[1];
      if (v46 >> 6 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v49 = v47;
      else
        v49 = 64;
      if (v48 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v48 >> 6;
      if (v48 < 0x1000)
        v50 = 64;
      *v39 = (613566757 * (unint64_t)((-4194240 - v49 + (v49 << 16)) >> 7)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-4194240 - v50 + (v50 << 16)) >> 7)) >> 32;
      v38 += 2;
      v39 += 2;
      v51 = __CFADD__(v45++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v53 = v15;
      v54 = v22;
      if ((v36 & 1) != 0)
      {
        v55 = *v15;
        v56 = v55 >> 6;
        v57 = v15[1];
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        if (v55 < 0x1000)
          v56 = 64;
        if (v57 >> 6 >= 0x3C0)
          v58 = 960;
        else
          v58 = v57 >> 6;
        if (v57 >= 0x1000)
          v59 = v58;
        else
          v59 = 64;
        v53 = v15 + 2;
        *v22 = (613566757 * (unint64_t)((-4194240 - v56 + (v56 << 16)) >> 7)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32;
        v54 = v22 + 2;
      }
      if (v37)
      {
        v60 = -(uint64_t)v37;
        do
        {
          v61 = *v53;
          v62 = v61 >> 6;
          v63 = v53[1];
          if (v61 >> 6 >= 0x3C0)
            v62 = 960;
          if (v61 >= 0x1000)
            v64 = v62;
          else
            v64 = 64;
          if (v63 >> 6 >= 0x3C0)
            v65 = 960;
          else
            v65 = v63 >> 6;
          if (v63 < 0x1000)
            v65 = 64;
          v66 = (613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32;
          v67 = (613566757 * (unint64_t)((-4194240 - v65 + (v65 << 16)) >> 7)) >> 32;
          *v54 = v66;
          v54[1] = v67;
          v68 = (_WORD *)((char *)v54 + v21);
          *v68 = v66;
          v68[1] = v67;
          v54 += 2;
          v53 += 2;
          v51 = __CFADD__(v60++, 1);
        }
        while (!v51);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v69 = 2 * v35;
  }
  else
  {
    v69 = 0;
  }
  if ((v69 | (unint64_t)v34) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v70 = *v15;
      v71 = v70 >> 6;
      v72 = v15[1];
      v73 = v72 >> 6;
      if (v70 >> 6 >= 0x3C0)
        v71 = 960;
      if (v70 < 0x1000)
        v71 = 64;
      if (v73 >= 0x3C0)
        v73 = 960;
      if (v72 >= 0x1000)
        v74 = v73;
      else
        v74 = 64;
      v15 += 2;
      *v22 = (613566757 * (unint64_t)((-4194240 - v71 + (v71 << 16)) >> 7)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-4194240 - v74 + (v74 << 16)) >> 7)) >> 32;
      v22 += 2;
    }
    if (v37)
    {
      v75 = -(uint64_t)v37;
      do
      {
        v76 = *v15;
        v77 = v76 >> 6;
        v78 = v15[1];
        if (v76 >> 6 >= 0x3C0)
          v77 = 960;
        if (v76 >= 0x1000)
          v79 = v77;
        else
          v79 = 64;
        if (v78 >> 6 >= 0x3C0)
          v80 = 960;
        else
          v80 = v78 >> 6;
        if (v78 < 0x1000)
          v80 = 64;
        *v22 = (613566757 * (unint64_t)((-4194240 - v79 + (v79 << 16)) >> 7)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-4194240 - v80 + (v80 << 16)) >> 7)) >> 32;
        v15 += 2;
        v22 += 2;
        v51 = __CFADD__(v75++, 1);
      }
      while (!v51);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  BOOL v46;
  uint64_t j;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * ((v12 + v9) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  v36 = v27 >> 1;
  v37 = v27 - v12;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  v39 = v26 - (v8 & 1);
  if (v26 >> 1 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v43 = v17[1] & 0xFFC0;
      v41 = v17 + 2;
      *v24 = *v17 & 0xFFC0;
      v24[1] = v43;
      v42 = v24 + 2;
      if (!v40)
      {
LABEL_28:
        v17 = (_WORD *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v41 = v17;
      v42 = v24;
      if (!v40)
        goto LABEL_28;
    }
    v44 = -(uint64_t)v40;
    do
    {
      v45 = v41[1] & 0xFFC0;
      *v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17[1] & 0xFFC0;
        v48 = v17 + 2;
        *v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v40)
      {
        v51 = -(uint64_t)v40;
        do
        {
          v52 = v48[1] & 0xFFC0;
          *v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v17 = (_WORD *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t j;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = (-4194240 - v36 + (v36 << 16)) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  v37 = v27 >> 1;
  v38 = v27 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v44 = *v17;
      v45 = v44 >> 6;
      v46 = v17[1];
      v47 = v46 >> 6;
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 < 0x1000)
        v45 = 64;
      if (v47 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v48 = v47;
      else
        v48 = 64;
      v42 = v17 + 2;
      *v24 = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32;
      v43 = v24 + 2;
      if (!v41)
        goto LABEL_51;
    }
    else
    {
      v42 = v17;
      v43 = v24;
      if (!v41)
      {
LABEL_51:
        v17 = (unsigned __int16 *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    v49 = -(uint64_t)v41;
    do
    {
      v50 = *v42;
      v51 = v50 >> 6;
      v52 = v42[1];
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v53 = v51;
      else
        v53 = 64;
      if (v52 >> 6 >= 0x3C0)
        v54 = 960;
      else
        v54 = v52 >> 6;
      if (v52 < 0x1000)
        v54 = 64;
      *v43 = (613566757 * (unint64_t)((-4194240 - v53 + (v53 << 16)) >> 7)) >> 32;
      v43[1] = (613566757 * (unint64_t)((-4194240 - v54 + (v54 << 16)) >> 7)) >> 32;
      v42 += 2;
      v43 += 2;
      v55 = __CFADD__(v49++, 1);
    }
    while (!v55);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = (613566757 * (unint64_t)((-4194240 - v60 + (v60 << 16)) >> 7)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-4194240 - v63 + (v63 << 16)) >> 7)) >> 32;
        v58 = v24 + 2;
      }
      if (v41)
      {
        v64 = -(uint64_t)v41;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v58[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
          v57 += 2;
          v58 += 2;
          v55 = __CFADD__(v64++, 1);
        }
        while (!v55);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  __int16 *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v46 = v14[1] & 0xFFC0;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *v40 = v42 & 0xFFC0;
          v40[1] = v43 & 0xFFC0;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 & 0xFFC0;
      v48 = v39[1] & 0xFFC0;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 = (__int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v50 = v14 + 2;
        v52 = *v14 & 0xFFC0;
        v53 = v14[1] & 0xFFC0;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v56 &= 0xFFC0u;
          v57 &= 0xFFC0u;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 & 0xFFC0;
        v60 = v50[1] & 0xFFC0;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      *v20 = v63 & 0xFFC0;
      v20[1] = v64 & 0xFFC0;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14;
        v67 = v14[1];
        v14 += 2;
        *v20 = v66 & 0xFFC0;
        v20[1] = v67 & 0xFFC0;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 & 0xFFC0;
      v70 = v14[1] & 0xFFC0;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  __int16 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] & 0xFFC0;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 & 0xFFC0;
          v37[1] = v40 & 0xFFC0;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 & 0xFFC0;
      v45 = v36[1] & 0xFFC0;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 = (__int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 & 0xFFC0;
        v50 = v14[1] & 0xFFC0;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 &= 0xFFC0u;
          v54 &= 0xFFC0u;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 & 0xFFC0;
        v57 = v47[1] & 0xFFC0;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14;
      v61 = v14[1];
      v14 += 2;
      *v20 = v60 & 0xFFC0;
      v20[1] = v61 & 0xFFC0;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14;
        v64 = v14[1];
        v14 += 2;
        *v20 = v63 & 0xFFC0;
        v20[1] = v64 & 0xFFC0;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 & 0xFFC0;
      v67 = v14[1] & 0xFFC0;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t j;
  unsigned __int16 *v60;
  _WORD *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _WORD *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  _WORD *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  _WORD *v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  if (v12 - v11 + (v12 & 1) >= v18)
    v22 = v18;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v32 = *(unsigned __int16 *)(v29 + 2 * i) >> 6;
          if (v32 >= 0x3AC)
            v32 = 940;
          if (v32 <= 0x40)
            v32 = 64;
          *(_WORD *)(v30 + 2 * i) = 16 * ((-262080 - v32 + (v32 << 12)) / 0x36C);
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = v8 & 1;
  v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34)
    v34 = v22 >> 1;
  v35 = v9;
  v36 = v21 >> 1;
  v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1)
    v36 = (v21 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v48 = *v14;
      v49 = v48 >> 6;
      v50 = v14[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v51 = v49;
      else
        v51 = 64;
      if (v50 >> 6 >= 0x3C0)
        v52 = 960;
      else
        v52 = v50 >> 6;
      if (v50 >= 0x1000)
        v53 = v52;
      else
        v53 = 64;
      v38 = v14 + 2;
      *v20 = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-262080 - v53 + (v53 << 12)) >> 7)) >> 32);
      v39 = v20 + 2;
      if (v36)
        goto LABEL_26;
    }
    else
    {
      v38 = v14;
      v39 = v20;
      if (v36)
      {
LABEL_26:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v41 >> 6;
          v43 = v38[1];
          if (v41 >> 6 >= 0x3C0)
            v42 = 960;
          if (v41 >= 0x1000)
            v44 = v42;
          else
            v44 = 64;
          if (v43 >> 6 >= 0x3C0)
            v45 = 960;
          else
            v45 = v43 >> 6;
          if (v43 < 0x1000)
            v45 = 64;
          v38 += 2;
          *v39 = 16 * ((613566757 * (unint64_t)((-262080 - v44 + (v44 << 12)) >> 7)) >> 32);
          v39[1] = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
          v39 += 2;
          v46 = __CFADD__(v40++, 1);
        }
        while (!v46);
        v47 = 2 * v36;
        goto LABEL_53;
      }
    }
    v47 = 0;
LABEL_53:
    if ((v47 | (unint64_t)v37) < v21)
    {
      v54 = *v38;
      v55 = v54 >> 6;
      v56 = v38[1];
      v57 = v56 >> 6;
      if (v54 >> 6 >= 0x3C0)
        v55 = 960;
      if (v54 < 0x1000)
        v55 = 64;
      if (v57 >= 0x3C0)
        v57 = 960;
      if (v56 >= 0x1000)
        v58 = v57;
      else
        v58 = 64;
      *v39 = 16 * ((613566757 * (unint64_t)((-262080 - v55 + (v55 << 12)) >> 7)) >> 32);
      v39[1] = 16 * ((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v60 = v14;
      v61 = v20;
      if ((v35 & 1) != 0)
      {
        v62 = *v14;
        v63 = v62 >> 6;
        v64 = v14[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 >= 0x1000)
          v65 = v63;
        else
          v65 = 64;
        if (v64 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v64 >> 6;
        if (v64 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v60 = v14 + 2;
        v68 = 16 * ((613566757 * (unint64_t)((-262080 - v65 + (v65 << 12)) >> 7)) >> 32);
        *v20 = v68;
        v69 = 16 * ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32);
        v20[1] = v69;
        v70 = (_WORD *)((char *)v20 + v19);
        *v70 = v68;
        v70[1] = v69;
        v61 = v20 + 2;
      }
      if (v36)
      {
        v71 = -(uint64_t)v36;
        do
        {
          v72 = *v60;
          v73 = v72 >> 6;
          v74 = v60[1];
          if (v72 >> 6 >= 0x3C0)
            v73 = 960;
          if (v72 >= 0x1000)
            v75 = v73;
          else
            v75 = 64;
          if (v74 >> 6 >= 0x3C0)
            v76 = 960;
          else
            v76 = v74 >> 6;
          if (v74 < 0x1000)
            v76 = 64;
          v77 = 16 * ((613566757 * (unint64_t)((-262080 - v75 + (v75 << 12)) >> 7)) >> 32);
          *v61 = v77;
          v78 = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
          v61[1] = v78;
          v61[2] = v77;
          v61[3] = v78;
          v79 = (_WORD *)((char *)v61 + v19);
          *v79 = v77;
          v79[1] = v78;
          v60 += 2;
          v79[2] = v77;
          v79[3] = v78;
          v61 += 4;
          v46 = __CFADD__(v71++, 1);
        }
        while (!v46);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        v80 = *v60;
        v81 = v80 >> 6;
        v82 = v60[1];
        if (v80 >> 6 >= 0x3C0)
          v81 = 960;
        if (v80 >= 0x1000)
          v83 = v81;
        else
          v83 = 64;
        if (v82 >> 6 >= 0x3C0)
          v84 = 960;
        else
          v84 = v82 >> 6;
        if (v82 >= 0x1000)
          v85 = v84;
        else
          v85 = 64;
        v86 = 16 * ((613566757 * (unint64_t)((-262080 - v83 + (v83 << 12)) >> 7)) >> 32);
        *v61 = v86;
        v87 = 16 * ((613566757 * (unint64_t)((-262080 - v85 + (v85 << 12)) >> 7)) >> 32);
        v61[1] = v87;
        v88 = (_WORD *)((char *)v61 + v19);
        *v88 = v86;
        v88[1] = v87;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v89 = 2 * v34;
  }
  else
  {
    v89 = 0;
  }
  if ((v89 | (unint64_t)v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v90 = *v14;
      v91 = v90 >> 6;
      v92 = v14[1];
      v93 = v92 >> 6;
      if (v90 >> 6 >= 0x3C0)
        v91 = 960;
      if (v90 < 0x1000)
        v91 = 64;
      if (v93 >= 0x3C0)
        v93 = 960;
      if (v92 >= 0x1000)
        v94 = v93;
      else
        v94 = 64;
      v14 += 2;
      *v20 = 16 * ((613566757 * (unint64_t)((-262080 - v91 + (v91 << 12)) >> 7)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-262080 - v94 + (v94 << 12)) >> 7)) >> 32);
      v20 += 2;
    }
    if (v36)
    {
      v95 = -(uint64_t)v36;
      do
      {
        v96 = *v14;
        v97 = v96 >> 6;
        v98 = v14[1];
        if (v96 >> 6 >= 0x3C0)
          v97 = 960;
        if (v96 >= 0x1000)
          v99 = v97;
        else
          v99 = 64;
        if (v98 >> 6 >= 0x3C0)
          v100 = 960;
        else
          v100 = v98 >> 6;
        if (v98 < 0x1000)
          v100 = 64;
        v14 += 2;
        *v20 = 16 * ((613566757 * (unint64_t)((-262080 - v99 + (v99 << 12)) >> 7)) >> 32);
        v20[1] = 16 * ((613566757 * (unint64_t)((-262080 - v100 + (v100 << 12)) >> 7)) >> 32);
        v20 += 2;
        v46 = __CFADD__(v95++, 1);
      }
      while (!v46);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      v101 = *v14;
      v102 = v101 >> 6;
      v103 = v14[1];
      v104 = v103 >> 6;
      if (v101 >> 6 >= 0x3C0)
        v102 = 960;
      if (v101 < 0x1000)
        v102 = 64;
      if (v104 >= 0x3C0)
        v104 = 960;
      if (v103 >= 0x1000)
        v105 = v104;
      else
        v105 = 64;
      *v20 = 16 * ((613566757 * (unint64_t)((-262080 - v102 + (v102 << 12)) >> 7)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-262080 - v105 + (v105 << 12)) >> 7)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  BOOL v46;
  uint64_t j;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = v26;
    v29 = 2 * (v9 + v8) + v28;
    v30 = *a8;
    v31 = a8[2];
    v32 = v27 + v29;
    v33 = a7[2] + v31 * v19 + v20;
    v34 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v26;
      v34 += v30;
      v33 += v31;
      ++v25;
    }
    while (v25 != v24);
  }
  v36 = v11 & 1;
  if (v24 >> 1 >= (v24 - v36) >> 1)
    v37 = (v24 - (v11 & 1)) >> 1;
  else
    v37 = v24 >> 1;
  v38 = v8;
  v39 = v23 >> 1;
  v40 = (v23 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v41 = v15 + 2;
      v43 = v15[1] & 0xFFC0;
      *v22 = *v15 & 0xFFC0;
      v22[1] = v43;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_28:
        v15 = (_WORD *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_28;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = v41[1] & 0xFFC0;
      *v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = *v48 & 0xFFC0;
          v53 = v48[1] & 0xFFC0;
          *v49 = v52;
          v49[1] = v53;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v52;
          v54[1] = v53;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v24)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15;
      v57 = v15[1];
      v15 += 2;
      *v22 = v56 & 0xFFC0;
      v22[1] = v57 & 0xFFC0;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v59;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  uint64_t j;
  _WORD *v45;
  _WORD *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1)
    v34 = (v24 - (v11 & 1)) >> 1;
  else
    v34 = v24 >> 1;
  v35 = v8;
  v36 = v23 >> 1;
  v37 = (v23 - v9) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v11 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v15 + 2;
      v40 = v15[1] & 0xFFC0;
      *v22 = *v15 & 0xFFC0;
      v22[1] = v40;
      v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 = (_WORD *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v36)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] & 0xFFC0;
      *v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v15;
      v46 = v22;
      if ((v35 & 1) != 0)
      {
        v45 = v15 + 2;
        v47 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v36)
      {
        v48 = -(uint64_t)v36;
        do
        {
          v49 = *v45 & 0xFFC0;
          v50 = v45[1] & 0xFFC0;
          *v46 = v49;
          v46[1] = v50;
          v51 = (_WORD *)((char *)v46 + v21);
          *v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if ((v35 & 1) != 0)
    {
      v53 = *v15;
      v54 = v15[1];
      v15 += 2;
      *v22 = v53 & 0xFFC0;
      v22[1] = v54 & 0xFFC0;
      v22 += 2;
    }
    if (v36)
    {
      v55 = -(uint64_t)v36;
      do
      {
        v56 = v15[1] & 0xFFC0;
        *v22 = *v15 & 0xFFC0;
        v22[1] = v56;
        v15 += 2;
        v22 += 2;
        v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t j;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _WORD *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a8;
    v30 = v27 + 2 * (v9 + v8) + v28;
    v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 6;
          if (v33 >= 0x3AC)
            v33 = 940;
          if (v33 <= 0x40)
            v33 = 64;
          *(_WORD *)(v31 + 2 * i) = 16 * ((-262080 - v33 + (v33 << 12)) / 0x36C);
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1)
    v35 = (v24 - (v11 & 1)) >> 1;
  else
    v35 = v24 >> 1;
  v36 = v8;
  v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1)
    v37 = (v23 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v40 = *v15;
      v41 = v40 >> 6;
      v42 = v15[1];
      v43 = v42 >> 6;
      if (v40 >> 6 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v43 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v44 = v43;
      else
        v44 = 64;
      v38 = v15 + 2;
      *v22 = 16 * ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((-262080 - v44 + (v44 << 12)) >> 7)) >> 32);
      v39 = v22 + 2;
      if (!v37)
        goto LABEL_51;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v37)
      {
LABEL_51:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    v45 = -(uint64_t)v37;
    do
    {
      v46 = *v38;
      v47 = v46 >> 6;
      v48 = v38[1];
      if (v46 >> 6 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v49 = v47;
      else
        v49 = 64;
      if (v48 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v48 >> 6;
      if (v48 < 0x1000)
        v50 = 64;
      *v39 = 16 * ((613566757 * (unint64_t)((-262080 - v49 + (v49 << 12)) >> 7)) >> 32);
      v39[1] = 16 * ((613566757 * (unint64_t)((-262080 - v50 + (v50 << 12)) >> 7)) >> 32);
      v38 += 2;
      v39 += 2;
      v51 = __CFADD__(v45++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v53 = v15;
      v54 = v22;
      if ((v36 & 1) != 0)
      {
        v55 = *v15;
        v56 = v55 >> 6;
        v57 = v15[1];
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        if (v55 < 0x1000)
          v56 = 64;
        if (v57 >> 6 >= 0x3C0)
          v58 = 960;
        else
          v58 = v57 >> 6;
        if (v57 >= 0x1000)
          v59 = v58;
        else
          v59 = 64;
        v53 = v15 + 2;
        *v22 = 16 * ((613566757 * (unint64_t)((-262080 - v56 + (v56 << 12)) >> 7)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32);
        v54 = v22 + 2;
      }
      if (v37)
      {
        v60 = -(uint64_t)v37;
        do
        {
          v61 = *v53;
          v62 = v61 >> 6;
          v63 = v53[1];
          if (v61 >> 6 >= 0x3C0)
            v62 = 960;
          if (v61 >= 0x1000)
            v64 = v62;
          else
            v64 = 64;
          if (v63 >> 6 >= 0x3C0)
            v65 = 960;
          else
            v65 = v63 >> 6;
          if (v63 < 0x1000)
            v65 = 64;
          v66 = 16 * ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32);
          *v54 = v66;
          v67 = 16 * ((613566757 * (unint64_t)((-262080 - v65 + (v65 << 12)) >> 7)) >> 32);
          v54[1] = v67;
          v68 = (_WORD *)((char *)v54 + v21);
          *v68 = v66;
          v68[1] = v67;
          v54 += 2;
          v53 += 2;
          v51 = __CFADD__(v60++, 1);
        }
        while (!v51);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v69 = 2 * v35;
  }
  else
  {
    v69 = 0;
  }
  if ((v69 | (unint64_t)v34) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v70 = *v15;
      v71 = v70 >> 6;
      v72 = v15[1];
      v73 = v72 >> 6;
      if (v70 >> 6 >= 0x3C0)
        v71 = 960;
      if (v70 < 0x1000)
        v71 = 64;
      if (v73 >= 0x3C0)
        v73 = 960;
      if (v72 >= 0x1000)
        v74 = v73;
      else
        v74 = 64;
      v15 += 2;
      *v22 = 16 * ((613566757 * (unint64_t)((-262080 - v71 + (v71 << 12)) >> 7)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((-262080 - v74 + (v74 << 12)) >> 7)) >> 32);
      v22 += 2;
    }
    if (v37)
    {
      v75 = -(uint64_t)v37;
      do
      {
        v76 = *v15;
        v77 = v76 >> 6;
        v78 = v15[1];
        if (v76 >> 6 >= 0x3C0)
          v77 = 960;
        if (v76 >= 0x1000)
          v79 = v77;
        else
          v79 = 64;
        if (v78 >> 6 >= 0x3C0)
          v80 = 960;
        else
          v80 = v78 >> 6;
        if (v78 < 0x1000)
          v80 = 64;
        *v22 = 16 * ((613566757 * (unint64_t)((-262080 - v79 + (v79 << 12)) >> 7)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((-262080 - v80 + (v80 << 12)) >> 7)) >> 32);
        v15 += 2;
        v22 += 2;
        v51 = __CFADD__(v75++, 1);
      }
      while (!v51);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  BOOL v46;
  uint64_t j;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * ((v12 + v9) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  v36 = v27 >> 1;
  v37 = v27 - v12;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  v39 = v26 - (v8 & 1);
  if (v26 >> 1 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = v17 + 2;
      v43 = v17[1] & 0xFFC0;
      *v24 = *v17 & 0xFFC0;
      v24[1] = v43;
      v42 = v24 + 2;
      if (!v40)
      {
LABEL_28:
        v17 = (_WORD *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v41 = v17;
      v42 = v24;
      if (!v40)
        goto LABEL_28;
    }
    v44 = -(uint64_t)v40;
    do
    {
      v45 = v41[1] & 0xFFC0;
      *v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v48 = v17 + 2;
        v50 = v17[1] & 0xFFC0;
        *v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v40)
      {
        v51 = -(uint64_t)v40;
        do
        {
          v52 = v48[1] & 0xFFC0;
          *v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v17 = (_WORD *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t j;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-262080 - v36 + (v36 << 12)) / 0x36C);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  v37 = v27 >> 1;
  v38 = v27 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v44 = *v17;
      v45 = v44 >> 6;
      v46 = v17[1];
      v47 = v46 >> 6;
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 < 0x1000)
        v45 = 64;
      if (v47 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v48 = v47;
      else
        v48 = 64;
      v42 = v17 + 2;
      *v24 = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
      v24[1] = 16 * ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32);
      v43 = v24 + 2;
      if (!v41)
        goto LABEL_51;
    }
    else
    {
      v42 = v17;
      v43 = v24;
      if (!v41)
      {
LABEL_51:
        v17 = (unsigned __int16 *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    v49 = -(uint64_t)v41;
    do
    {
      v50 = *v42;
      v51 = v50 >> 6;
      v52 = v42[1];
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v53 = v51;
      else
        v53 = 64;
      if (v52 >> 6 >= 0x3C0)
        v54 = 960;
      else
        v54 = v52 >> 6;
      if (v52 < 0x1000)
        v54 = 64;
      *v43 = 16 * ((613566757 * (unint64_t)((-262080 - v53 + (v53 << 12)) >> 7)) >> 32);
      v43[1] = 16 * ((613566757 * (unint64_t)((-262080 - v54 + (v54 << 12)) >> 7)) >> 32);
      v42 += 2;
      v43 += 2;
      v55 = __CFADD__(v49++, 1);
    }
    while (!v55);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = 16 * ((613566757 * (unint64_t)((-262080 - v60 + (v60 << 12)) >> 7)) >> 32);
        v24[1] = 16 * ((613566757 * (unint64_t)((-262080 - v63 + (v63 << 12)) >> 7)) >> 32);
        v58 = v24 + 2;
      }
      if (v41)
      {
        v64 = -(uint64_t)v41;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v58[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
          v57 += 2;
          v58 += 2;
          v55 = __CFADD__(v64++, 1);
        }
        while (!v55);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t i;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + 4 * v14);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v68 = a4[1];
    v69 = v19;
    v21 = 2 * (v8 & 0xFFFFFFFE);
    v22 = *a3 + *a4 * v10;
    v70 = *a4;
    if (v10 >= v9)
      v23 = 0;
    else
      v23 = *a4;
    v24 = (char *)(v22 + v21 + v23);
    v25 = a8[2];
    v26 = (char *)(a7[2] + v25 * v15 + 2 * v14);
    v27 = *a8;
    v28 = (char *)(*a7 + *a8 * v15 + 2 * v14);
    v29 = 2 * v19;
    v67 = v20;
    v30 = -(uint64_t)v20;
    do
    {
      memcpy(v28, v24, v29);
      memset(v26, 255, v29);
      v24 += v70;
      v28 += v27;
      v26 += v25;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v20 = v67;
    v8 = a2[4];
    v9 = a2[5];
    v12 = v68;
    v19 = v69;
  }
  v32 = v9 & 1;
  v33 = (v20 - v32) >> 1;
  if (v20 >> 1 < v33)
    v33 = v20 >> 1;
  v34 = v8;
  v35 = v19 >> 1;
  v36 = v8 & 1;
  if (v19 >> 1 >= (v19 - v36) >> 1)
    v35 = (v19 - v36) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v43 = v13[1] & 0xFFC0;
      v37 = v13 + 2;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v43;
      v38 = v18 + 2;
      if (v35)
      {
LABEL_22:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37 & 0xFFC0;
          v41 = v37[1] & 0xFFC0;
          v37 += 2;
          *v38 = v40;
          v38[1] = v41;
          v38 += 2;
          v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        v42 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v13;
      v38 = v18;
      if (v35)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v36) < v19)
    {
      v44 = *v37 & 0xFFC0;
      v45 = v37[1] & 0xFFC0;
      *v38 = v44;
      v38[1] = v45;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v47 = v13;
      v48 = v18;
      if ((v34 & 1) != 0)
      {
        v49 = *v13 & 0xFFC0;
        v50 = v13[1] & 0xFFC0;
        v47 = v13 + 2;
        *v18 = v49;
        v18[1] = v50;
        v51 = (_WORD *)((char *)v18 + v17);
        *v51 = v49;
        v51[1] = v50;
        v48 = v18 + 2;
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = *v47 & 0xFFC0;
          v54 = v47[1] & 0xFFC0;
          v47 += 2;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v17);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v31 = __CFADD__(v52++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v19)
      {
        v56 = *v47 & 0xFFC0;
        v57 = v47[1] & 0xFFC0;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v17);
        *v58 = v56;
        v58[1] = v57;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 += v17;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v20)
  {
    if ((v34 & 1) != 0)
    {
      v59 = *v13 & 0xFFC0;
      v60 = v13[1] & 0xFFC0;
      v13 += 2;
      *v18 = v59;
      v18[1] = v60;
      v18 += 2;
    }
    if (v35)
    {
      v61 = -(uint64_t)v35;
      do
      {
        v62 = *v13 & 0xFFC0;
        v63 = v13[1] & 0xFFC0;
        v13 += 2;
        *v18 = v62;
        v18[1] = v63;
        v18 += 2;
        v31 = __CFADD__(v61++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v19)
    {
      v64 = v13[1] & 0xFFC0;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  uint64_t i;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  __int16 v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  __int16 v55;
  __int16 v56;
  _WORD *v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  unint64_t v66;
  unint64_t v67;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + 4 * v14);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v66 = v20;
    v21 = *a4;
    v22 = 2 * (v8 & 0xFFFFFFFE);
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + v22 + v25);
    v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    v67 = v19;
    v28 = 2 * v19;
    v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    v20 = v66;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v67;
  }
  v31 = v9 & 1;
  v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v8;
  v34 = v19 >> 1;
  v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v42 = v13[1] & 0xFFC0;
      v36 = v13 + 2;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v42;
      v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36 & 0xFFC0;
          v40 = v36[1] & 0xFFC0;
          v36 += 2;
          *v37 = v39;
          v37[1] = v40;
          v37 += 2;
          v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v13;
      v37 = v18;
      if (v34)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      v43 = *v36 & 0xFFC0;
      v44 = v36[1] & 0xFFC0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v32)
  {
    for (i = 0; i != v32; ++i)
    {
      v46 = v13;
      v47 = v18;
      if ((v33 & 1) != 0)
      {
        v48 = *v13 & 0xFFC0;
        v49 = v13[1] & 0xFFC0;
        v46 = v13 + 2;
        *v18 = v48;
        v18[1] = v49;
        v50 = (_WORD *)((char *)v18 + v17);
        *v50 = v48;
        v50[1] = v49;
        v47 = v18 + 2;
      }
      if (v34)
      {
        v51 = -(uint64_t)v34;
        do
        {
          v52 = *v46 & 0xFFC0;
          v53 = v46[1] & 0xFFC0;
          v46 += 2;
          *v47 = v52;
          v47[1] = v53;
          v47[2] = v52;
          v47[3] = v53;
          v54 = (_WORD *)((char *)v47 + v17);
          *v54 = v52;
          v54[1] = v53;
          v54[2] = v52;
          v54[3] = v53;
          v47 += 4;
          v30 = __CFADD__(v51++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v55 = *v46 & 0xFFC0;
        v56 = v46[1] & 0xFFC0;
        *v47 = v55;
        v47[1] = v56;
        v57 = (_WORD *)((char *)v47 + v17);
        *v57 = v55;
        v57[1] = v56;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 += v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v58 = *v13 & 0xFFC0;
      v59 = v13[1] & 0xFFC0;
      v13 += 2;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v34)
    {
      v60 = -(uint64_t)v34;
      do
      {
        v61 = *v13 & 0xFFC0;
        v62 = v13[1] & 0xFFC0;
        v13 += 2;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v30 = __CFADD__(v60++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19)
    {
      v63 = v13[1] & 0xFFC0;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v63;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t j;
  unsigned __int16 *v59;
  _WORD *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _WORD *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  _WORD *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _WORD *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  if (v12 - v11 + (v12 & 1) >= v17)
    v22 = v17;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v31 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v31 >= 0x3AC)
            v31 = 940;
          if (v31 <= 0x40)
            v31 = 64;
          *(_WORD *)(v29 + 2 * i) = (unsigned __int16)((1023 * v31 - 65472) / 0x36C) << 6;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v32 = v8 & 1;
  v33 = (v22 - v32) >> 1;
  if (v22 >> 1 < v33)
    v33 = v22 >> 1;
  v34 = v9;
  v35 = v21 >> 1;
  v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1)
    v35 = (v21 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v47 = *v14;
      v48 = v47 >> 6;
      v49 = v14[1];
      if (v47 >> 6 >= 0x3C0)
        v48 = 960;
      if (v47 >= 0x1000)
        v50 = v48;
      else
        v50 = 64;
      if (v49 >> 6 >= 0x3C0)
        v51 = 960;
      else
        v51 = v49 >> 6;
      if (v49 >= 0x1000)
        v52 = v51;
      else
        v52 = 64;
      v37 = v14 + 2;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 65472) >> 7)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 65472) >> 7)) >> 32) << 6;
      v38 = v20 + 2;
      if (v35)
        goto LABEL_26;
    }
    else
    {
      v37 = v14;
      v38 = v20;
      if (v35)
      {
LABEL_26:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v40 >> 6;
          v42 = v37[1];
          if (v40 >> 6 >= 0x3C0)
            v41 = 960;
          if (v40 >= 0x1000)
            v43 = v41;
          else
            v43 = 64;
          if (v42 >> 6 >= 0x3C0)
            v44 = 960;
          else
            v44 = v42 >> 6;
          if (v42 < 0x1000)
            v44 = 64;
          v37 += 2;
          *v38 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 65472) >> 7)) >> 32) << 6;
          v38[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 65472) >> 7)) >> 32) << 6;
          v38 += 2;
          v45 = __CFADD__(v39++, 1);
        }
        while (!v45);
        v46 = 2 * v35;
        goto LABEL_53;
      }
    }
    v46 = 0;
LABEL_53:
    if ((v46 | (unint64_t)v36) < v21)
    {
      v53 = *v37;
      v54 = v53 >> 6;
      v55 = v37[1];
      v56 = v55 >> 6;
      if (v53 >> 6 >= 0x3C0)
        v54 = 960;
      if (v53 < 0x1000)
        v54 = 64;
      if (v56 >= 0x3C0)
        v56 = 960;
      if (v55 >= 0x1000)
        v57 = v56;
      else
        v57 = 64;
      *v38 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
      v38[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32) << 6;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v59 = v14;
      v60 = v20;
      if ((v34 & 1) != 0)
      {
        v61 = *v14;
        v62 = v61 >> 6;
        v63 = v14[1];
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        if (v61 >= 0x1000)
          v64 = v62;
        else
          v64 = 64;
        if (v63 >> 6 >= 0x3C0)
          v65 = 960;
        else
          v65 = v63 >> 6;
        if (v63 >= 0x1000)
          v66 = v65;
        else
          v66 = 64;
        v59 = v14 + 2;
        v67 = (613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32 << 6;
        *v20 = v67;
        v68 = (613566757 * (unint64_t)((1023 * v66 - 65472) >> 7)) >> 32 << 6;
        v20[1] = v68;
        v69 = (_WORD *)((char *)v20 + v19);
        *v69 = v67;
        v69[1] = v68;
        v60 = v20 + 2;
      }
      if (v35)
      {
        v70 = -(uint64_t)v35;
        do
        {
          v71 = *v59;
          v72 = v71 >> 6;
          v73 = v59[1];
          if (v71 >> 6 >= 0x3C0)
            v72 = 960;
          if (v71 >= 0x1000)
            v74 = v72;
          else
            v74 = 64;
          if (v73 >> 6 >= 0x3C0)
            v75 = 960;
          else
            v75 = v73 >> 6;
          if (v73 < 0x1000)
            v75 = 64;
          v76 = (613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32 << 6;
          *v60 = v76;
          v77 = (613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32 << 6;
          v60[1] = v77;
          v60[2] = v76;
          v60[3] = v77;
          v78 = (_WORD *)((char *)v60 + v19);
          *v78 = v76;
          v78[1] = v77;
          v59 += 2;
          v78[2] = v76;
          v78[3] = v77;
          v60 += 4;
          v45 = __CFADD__(v70++, 1);
        }
        while (!v45);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        v79 = *v59;
        v80 = v79 >> 6;
        v81 = v59[1];
        if (v79 >> 6 >= 0x3C0)
          v80 = 960;
        if (v79 >= 0x1000)
          v82 = v80;
        else
          v82 = 64;
        if (v81 >> 6 >= 0x3C0)
          v83 = 960;
        else
          v83 = v81 >> 6;
        if (v81 >= 0x1000)
          v84 = v83;
        else
          v84 = 64;
        v85 = (613566757 * (unint64_t)((1023 * v82 - 65472) >> 7)) >> 32 << 6;
        *v60 = v85;
        v86 = (613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32 << 6;
        v60[1] = v86;
        v87 = (_WORD *)((char *)v60 + v19);
        *v87 = v85;
        v87[1] = v86;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v88 = 2 * v33;
  }
  else
  {
    v88 = 0;
  }
  if ((v88 | (unint64_t)v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v89 = *v14;
      v90 = v89 >> 6;
      v91 = v14[1];
      v92 = v91 >> 6;
      if (v89 >> 6 >= 0x3C0)
        v90 = 960;
      if (v89 < 0x1000)
        v90 = 64;
      if (v92 >= 0x3C0)
        v92 = 960;
      if (v91 >= 0x1000)
        v93 = v92;
      else
        v93 = 64;
      v14 += 2;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v90 - 65472) >> 7)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v93 - 65472) >> 7)) >> 32) << 6;
      v20 += 2;
    }
    if (v35)
    {
      v94 = -(uint64_t)v35;
      do
      {
        v95 = *v14;
        v96 = v95 >> 6;
        v97 = v14[1];
        if (v95 >> 6 >= 0x3C0)
          v96 = 960;
        if (v95 >= 0x1000)
          v98 = v96;
        else
          v98 = 64;
        if (v97 >> 6 >= 0x3C0)
          v99 = 960;
        else
          v99 = v97 >> 6;
        if (v97 < 0x1000)
          v99 = 64;
        v14 += 2;
        *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v98 - 65472) >> 7)) >> 32) << 6;
        v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v99 - 65472) >> 7)) >> 32) << 6;
        v20 += 2;
        v45 = __CFADD__(v94++, 1);
      }
      while (!v45);
      v35 *= 2;
    }
    if ((v35 | v36) < v21)
    {
      v100 = *v14;
      v101 = v100 >> 6;
      v102 = v14[1];
      v103 = v102 >> 6;
      if (v100 >> 6 >= 0x3C0)
        v101 = 960;
      if (v100 < 0x1000)
        v101 = 64;
      if (v103 >= 0x3C0)
        v103 = 960;
      if (v102 >= 0x1000)
        v104 = v103;
      else
        v104 = 64;
      *v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v101 - 65472) >> 7)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v104 - 65472) >> 7)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  _WORD *v37;
  _WORD *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t i;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  _WORD *v49;
  __int16 v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  unint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v55 = v21;
    v23 = *a3 + *a4 * v11;
    v58 = a4[1];
    v59 = *a4;
    if (v11 >= v10)
      v24 = 0;
    else
      v24 = *a4;
    v25 = (char *)(v23 + v13 + v24);
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = *a8;
    v29 = (char *)(*a7 + *a8 * v17 + v18);
    v30 = 2 * v21;
    v57 = v22;
    v31 = -(uint64_t)v22;
    do
    {
      memcpy(v29, v25, v30);
      memset(v27, 255, v30);
      v25 += v59;
      v29 += v28;
      v27 += v26;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v22 = v57;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v14 = v58;
    v21 = v55;
  }
  v33 = v10 & 1;
  if (v22 >> 1 >= (v22 - v33) >> 1)
    v34 = (v22 - (v10 & 1)) >> 1;
  else
    v34 = v22 >> 1;
  v35 = v8;
  v36 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v36 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v39 = v15[1] & 0xFFC0;
      v37 = v15 + 2;
      *v20 = *v15 & 0xFFC0;
      v20[1] = v39;
      v38 = v20 + 2;
      if (!v36)
      {
LABEL_27:
        v15 = (_WORD *)((char *)v15 + v14);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v15;
      v38 = v20;
      if (!v36)
        goto LABEL_27;
    }
    v40 = -(uint64_t)v36;
    do
    {
      v41 = v37[1] & 0xFFC0;
      *v38 = *v37 & 0xFFC0;
      v38[1] = v41;
      v37 += 2;
      v38 += 2;
      v32 = __CFADD__(v40++, 1);
    }
    while (!v32);
    goto LABEL_27;
  }
LABEL_28:
  if (v34)
  {
    for (i = 0; i != v34; ++i)
    {
      v43 = v15;
      v44 = v20;
      if ((v35 & 1) != 0)
      {
        v45 = v15[1] & 0xFFC0;
        v43 = v15 + 2;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v36)
      {
        v46 = -(uint64_t)v36;
        do
        {
          v47 = *v43 & 0xFFC0;
          v48 = v43[1] & 0xFFC0;
          *v44 = v47;
          v44[1] = v48;
          v49 = (_WORD *)((char *)v44 + v19);
          *v49 = v47;
          v49[1] = v48;
          v44 += 2;
          v43 += 2;
          v32 = __CFADD__(v46++, 1);
        }
        while (!v32);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v20 += v19;
    }
    v34 *= 2;
  }
  if ((v34 | v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v50 = *v15 & 0xFFC0;
      v51 = v15[1] & 0xFFC0;
      v15 += 2;
      *v20 = v50;
      v20[1] = v51;
      v20 += 2;
    }
    if (v36)
    {
      v52 = -(uint64_t)v36;
      do
      {
        v53 = v15[1] & 0xFFC0;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v53;
        v15 += 2;
        v20 += 2;
        v32 = __CFADD__(v52++, 1);
      }
      while (!v32);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t i;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v54 = v21;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (char *)(v25 + v13 + v26);
    v28 = (char *)(*a7 + v24 * v17 + v18);
    v29 = 2 * v21;
    v56 = v22;
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v22 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v21 = v54;
  }
  v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v33 = (v22 - (v10 & 1)) >> 1;
  else
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v35 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v15[1] & 0xFFC0;
      v36 = v15 + 2;
      *v20 = *v15 & 0xFFC0;
      v20[1] = v38;
      v37 = v20 + 2;
      if (!v35)
      {
LABEL_27:
        v15 = (_WORD *)((char *)v15 + v14);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v36 = v15;
      v37 = v20;
      if (!v35)
        goto LABEL_27;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = v36[1] & 0xFFC0;
      *v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v31 = __CFADD__(v39++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v42 = v15;
      v43 = v20;
      if ((v34 & 1) != 0)
      {
        v44 = v15[1] & 0xFFC0;
        v42 = v15 + 2;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v44;
        v43 = v20 + 2;
      }
      if (v35)
      {
        v45 = -(uint64_t)v35;
        do
        {
          v46 = *v42 & 0xFFC0;
          v47 = v42[1] & 0xFFC0;
          *v43 = v46;
          v43[1] = v47;
          v48 = (_WORD *)((char *)v43 + v19);
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          v31 = __CFADD__(v45++, 1);
        }
        while (!v31);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v49 = *v15 & 0xFFC0;
      v50 = v15[1] & 0xFFC0;
      v15 += 2;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v35)
    {
      v51 = -(uint64_t)v35;
      do
      {
        v52 = v15[1] & 0xFFC0;
        *v20 = *v15 & 0xFFC0;
        v20[1] = v52;
        v15 += 2;
        v20 += 2;
        v31 = __CFADD__(v51++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t j;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _WORD *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + 2 * (v9 + v8) + v29;
    v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 6;
          if (v33 >= 0x3AC)
            v33 = 940;
          if (v33 <= 0x40)
            v33 = 64;
          *(_WORD *)(v31 + 2 * i) = (unsigned __int16)((1023 * v33 - 65472) / 0x36C) << 6;
        }
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1)
    v35 = (v24 - (v11 & 1)) >> 1;
  else
    v35 = v24 >> 1;
  v36 = v8;
  v37 = v23 >> 1;
  v38 = (v23 - v9) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v41 = *v15;
      v42 = v41 >> 6;
      v43 = v15[1];
      v44 = v43 >> 6;
      if (v41 >> 6 >= 0x3C0)
        v42 = 960;
      if (v41 < 0x1000)
        v42 = 64;
      if (v44 >= 0x3C0)
        v44 = 960;
      if (v43 >= 0x1000)
        v45 = v44;
      else
        v45 = 64;
      v39 = v15 + 2;
      *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 65472) >> 7)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 65472) >> 7)) >> 32) << 6;
      v40 = v22 + 2;
      if (!v37)
        goto LABEL_51;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      if (!v37)
      {
LABEL_51:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    v46 = -(uint64_t)v37;
    do
    {
      v47 = *v39;
      v48 = v47 >> 6;
      v49 = v39[1];
      if (v47 >> 6 >= 0x3C0)
        v48 = 960;
      if (v47 >= 0x1000)
        v50 = v48;
      else
        v50 = 64;
      if (v49 >> 6 >= 0x3C0)
        v51 = 960;
      else
        v51 = v49 >> 6;
      if (v49 < 0x1000)
        v51 = 64;
      *v40 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 65472) >> 7)) >> 32) << 6;
      v40[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
      v39 += 2;
      v40 += 2;
      v52 = __CFADD__(v46++, 1);
    }
    while (!v52);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v54 = v15;
      v55 = v22;
      if ((v36 & 1) != 0)
      {
        v56 = *v15;
        v57 = v56 >> 6;
        v58 = v15[1];
        if (v56 >> 6 >= 0x3C0)
          v57 = 960;
        if (v56 < 0x1000)
          v57 = 64;
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        else
          v59 = v58 >> 6;
        if (v58 >= 0x1000)
          v60 = v59;
        else
          v60 = 64;
        v54 = v15 + 2;
        *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 65472) >> 7)) >> 32) << 6;
        v55 = v22 + 2;
      }
      if (v37)
      {
        v61 = -(uint64_t)v37;
        do
        {
          v62 = *v54;
          v63 = v62 >> 6;
          v64 = v54[1];
          if (v62 >> 6 >= 0x3C0)
            v63 = 960;
          if (v62 >= 0x1000)
            v65 = v63;
          else
            v65 = 64;
          if (v64 >> 6 >= 0x3C0)
            v66 = 960;
          else
            v66 = v64 >> 6;
          if (v64 < 0x1000)
            v66 = 64;
          v67 = (613566757 * (unint64_t)((1023 * v65 - 65472) >> 7)) >> 32 << 6;
          *v55 = v67;
          v68 = (613566757 * (unint64_t)((1023 * v66 - 65472) >> 7)) >> 32 << 6;
          v55[1] = v68;
          v69 = (_WORD *)((char *)v55 + v21);
          *v69 = v67;
          v69[1] = v68;
          v55 += 2;
          v54 += 2;
          v52 = __CFADD__(v61++, 1);
        }
        while (!v52);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v70 = 2 * v35;
  }
  else
  {
    v70 = 0;
  }
  if ((v70 | (unint64_t)v34) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v71 = *v15;
      v72 = v71 >> 6;
      v73 = v15[1];
      v74 = v73 >> 6;
      if (v71 >> 6 >= 0x3C0)
        v72 = 960;
      if (v71 < 0x1000)
        v72 = 64;
      if (v74 >= 0x3C0)
        v74 = 960;
      if (v73 >= 0x1000)
        v75 = v74;
      else
        v75 = 64;
      v15 += 2;
      *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32) << 6;
      v22 += 2;
    }
    if (v37)
    {
      v76 = -(uint64_t)v37;
      do
      {
        v77 = *v15;
        v78 = v77 >> 6;
        v79 = v15[1];
        if (v77 >> 6 >= 0x3C0)
          v78 = 960;
        if (v77 >= 0x1000)
          v80 = v78;
        else
          v80 = 64;
        if (v79 >> 6 >= 0x3C0)
          v81 = 960;
        else
          v81 = v79 >> 6;
        if (v79 < 0x1000)
          v81 = 64;
        *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v80 - 65472) >> 7)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v81 - 65472) >> 7)) >> 32) << 6;
        v15 += 2;
        v22 += 2;
        v52 = __CFADD__(v76++, 1);
      }
      while (!v52);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t j;
  unsigned __int16 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = v13 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v15 + v33;
    v35 = *a7 + v31 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i) >> 6;
          if (v37 >= 0x3AC)
            v37 = 940;
          if (v37 <= 0x40)
            v37 = 64;
          *(_WORD *)(v35 + 2 * i) = (unsigned __int16)((1023 * v37 - 65472) / 0x36C) << 6;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  v38 = v27 >> 1;
  v39 = v27 - v12;
  if (v38 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v38;
  v41 = v26 - (v9 & 1);
  if (v26 >> 1 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v45 = *v17;
      v46 = v45 >> 6;
      v47 = v17[1];
      v48 = v47 >> 6;
      if (v45 >> 6 >= 0x3C0)
        v46 = 960;
      if (v45 < 0x1000)
        v46 = 64;
      if (v48 >= 0x3C0)
        v48 = 960;
      if (v47 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v43 = v17 + 2;
      *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32) << 6;
      v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 65472) >> 7)) >> 32) << 6;
      v44 = v24 + 2;
      if (!v42)
        goto LABEL_51;
    }
    else
    {
      v43 = v17;
      v44 = v24;
      if (!v42)
      {
LABEL_51:
        v17 = (unsigned __int16 *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    v50 = -(uint64_t)v42;
    do
    {
      v51 = *v43;
      v52 = v51 >> 6;
      v53 = v43[1];
      if (v51 >> 6 >= 0x3C0)
        v52 = 960;
      if (v51 >= 0x1000)
        v54 = v52;
      else
        v54 = 64;
      if (v53 >> 6 >= 0x3C0)
        v55 = 960;
      else
        v55 = v53 >> 6;
      if (v53 < 0x1000)
        v55 = 64;
      *v44 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
      v44[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 65472) >> 7)) >> 32) << 6;
      v43 += 2;
      v44 += 2;
      v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_51;
  }
LABEL_52:
  if (v40)
  {
    for (j = 0; j != v40; ++j)
    {
      v57 = v17;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v17;
        v60 = v59 >> 6;
        v61 = v17[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v57 = v17 + 2;
        *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 65472) >> 7)) >> 32) << 6;
        v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 65472) >> 7)) >> 32) << 6;
        v58 = v24 + 2;
      }
      if (v42)
      {
        v64 = -(uint64_t)v42;
        do
        {
          v65 = *v57;
          v66 = v65 >> 6;
          v67 = v57[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v58 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v58[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32) << 6;
          v57 += 2;
          v58 += 2;
          v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t j;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  char v54;
  _BYTE *v55;
  char v56;
  char v57;
  _BYTE *v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE);
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = v10 >= v8;
    v24 = *a8;
    v25 = a8[2];
    v26 = *a3 + *a4 * v10;
    if (v23)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    v29 = a7[2] + v25 * v14 + v13;
    v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v29 + i) = -1;
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v32 = v8 & 1;
  v33 = (v20 - v32) >> 1;
  if (v20 >> 1 < v33)
    v33 = v20 >> 1;
  v34 = v9;
  v35 = v19 >> 1;
  v36 = v9 & 1;
  if (v19 >> 1 >= (v19 - v36) >> 1)
    v35 = (v19 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v43 = *(_BYTE *)(v12 + 3);
      v37 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v43;
      v38 = v18 + 2;
      if (v35)
      {
LABEL_22:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *(_BYTE *)(v37 + 1);
          v41 = *(_BYTE *)(v37 + 3);
          v37 += 4;
          *v38 = v40;
          v38[1] = v41;
          v38 += 2;
          v23 = __CFADD__(v39++, 1);
        }
        while (!v23);
        v42 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v12;
      v38 = v18;
      if (v35)
        goto LABEL_22;
    }
    v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v36) < v19)
    {
      v44 = *(_BYTE *)(v37 + 1);
      v45 = *(_BYTE *)(v37 + 3);
      *v38 = v44;
      v38[1] = v45;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v47 = v12;
      v48 = v18;
      if ((v34 & 1) != 0)
      {
        v49 = *(_BYTE *)(v12 + 1);
        v50 = *(_BYTE *)(v12 + 3);
        v47 = v12 + 4;
        *v18 = v49;
        v18[1] = v50;
        v51 = &v18[v17];
        *v51 = v49;
        v51[1] = v50;
        v48 = v18 + 2;
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = *(_BYTE *)(v47 + 1);
          v54 = *(_BYTE *)(v47 + 3);
          v47 += 4;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = &v48[v17 + 1];
          *(v55 - 1) = v53;
          *v55 = v54;
          v55[1] = v53;
          v55[2] = v54;
          v48 += 4;
          v23 = __CFADD__(v52++, 1);
        }
        while (!v23);
      }
      if ((v36 | (2 * v35)) < v19)
      {
        v56 = *(_BYTE *)(v47 + 1);
        v57 = *(_BYTE *)(v47 + 3);
        *v48 = v56;
        v48[1] = v57;
        v58 = &v48[v17];
        *v58 = v56;
        v58[1] = v57;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    v59 = 2 * v33;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v32) < v20)
  {
    if ((v34 & 1) != 0)
    {
      v60 = *(_BYTE *)(v12 + 1);
      v61 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v60;
      v18[1] = v61;
      v18 += 2;
    }
    if (v35)
    {
      v62 = -(uint64_t)v35;
      do
      {
        v63 = *(_BYTE *)(v12 + 1);
        v64 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v63;
        v18[1] = v64;
        v18 += 2;
        v23 = __CFADD__(v62++, 1);
      }
      while (!v23);
      v65 = 2 * v35;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v36) < v19)
    {
      v66 = *(_BYTE *)(v12 + 1);
      v67 = *(_BYTE *)(v12 + 3);
      *v18 = v66;
      v18[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t j;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  char v48;
  _BYTE *v49;
  uint64_t v50;
  char v51;
  char v52;
  _BYTE *v53;
  char v54;
  char v55;
  _BYTE *v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE);
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15)
    v20 = v15;
  if (v20)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v8)
      v25 = 0;
    else
      v25 = *a4;
    v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v27 + i) = *(_BYTE *)(v26 + 2 * i + 1);
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    v9 = a2[4];
    v8 = a2[5];
  }
  v29 = v8 & 1;
  v30 = (v20 - v29) >> 1;
  if (v20 >> 1 < v30)
    v30 = v20 >> 1;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = *(_BYTE *)(v12 + 3);
      v34 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v41;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *(_BYTE *)(v34 + 1);
          v38 = *(_BYTE *)(v34 + 3);
          v34 += 4;
          *v35 = v37;
          v35[1] = v38;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_22;
    }
    v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v33) < v19)
    {
      v42 = *(_BYTE *)(v34 + 1);
      v43 = *(_BYTE *)(v34 + 3);
      *v35 = v42;
      v35[1] = v43;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v45 = v12;
      v46 = v18;
      if ((v31 & 1) != 0)
      {
        v47 = *(_BYTE *)(v12 + 1);
        v48 = *(_BYTE *)(v12 + 3);
        v45 = v12 + 4;
        *v18 = v47;
        v18[1] = v48;
        v49 = &v18[v17];
        *v49 = v47;
        v49[1] = v48;
        v46 = v18 + 2;
      }
      if (v32)
      {
        v50 = -(uint64_t)v32;
        do
        {
          v51 = *(_BYTE *)(v45 + 1);
          v52 = *(_BYTE *)(v45 + 3);
          v45 += 4;
          *v46 = v51;
          v46[1] = v52;
          v46[2] = v51;
          v46[3] = v52;
          v53 = &v46[v17 + 1];
          *(v53 - 1) = v51;
          *v53 = v52;
          v53[1] = v51;
          v53[2] = v52;
          v46 += 4;
          v39 = __CFADD__(v50++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v54 = *(_BYTE *)(v45 + 1);
        v55 = *(_BYTE *)(v45 + 3);
        *v46 = v54;
        v46[1] = v55;
        v56 = &v46[v17];
        *v56 = v54;
        v56[1] = v55;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    v57 = 2 * v30;
  }
  else
  {
    v57 = 0;
  }
  if ((v57 | (unint64_t)v29) < v20)
  {
    if ((v31 & 1) != 0)
    {
      v58 = *(_BYTE *)(v12 + 1);
      v59 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v32)
    {
      v60 = -(uint64_t)v32;
      do
      {
        v61 = *(_BYTE *)(v12 + 1);
        v62 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v39 = __CFADD__(v60++, 1);
      }
      while (!v39);
      v63 = 2 * v32;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v33) < v19)
    {
      v64 = *(_BYTE *)(v12 + 1);
      v65 = *(_BYTE *)(v12 + 3);
      *v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t j;
  unsigned __int16 *v58;
  _BYTE *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;

  v9 = a2[4];
  v8 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a2[3] + v8;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_BYTE *)(a7[1] + v18 * v15 + 2 * v14);
  v20 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v11 - v10 + (v11 & 1) >= v16)
    v21 = v16;
  else
    v21 = v11 - v10 + (v11 & 1);
  if (v21)
  {
    v22 = 0;
    v23 = v10 >= v8;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v10;
    if (v23)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    v29 = *a7 + v25 * v15 + v14;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v31 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v31 >= 0x3AC)
            v31 = 940;
          if (v31 <= 0x40)
            v31 = 64;
          *(_BYTE *)(v29 + i) = (255 * v31 - 16320) / 0x36C;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v22;
    }
    while (v22 != v21);
    v9 = a2[4];
    v8 = a2[5];
  }
  v32 = v8 & 1;
  v33 = (v21 - v32) >> 1;
  if (v21 >> 1 < v33)
    v33 = v21 >> 1;
  v34 = v9;
  v35 = v20 >> 1;
  v36 = v9 & 1;
  if (v20 >> 1 >= (v20 - v36) >> 1)
    v35 = (v20 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v46 = *v13;
      v47 = v46 >> 6;
      v48 = v13[1];
      if (v46 >> 6 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v49 = v47;
      else
        v49 = 64;
      if (v48 >> 6 >= 0x3C0)
        v50 = 960;
      else
        v50 = v48 >> 6;
      if (v48 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      v37 = v13 + 2;
      *v19 = (613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32;
      v38 = v19 + 2;
      if (v35)
        goto LABEL_27;
    }
    else
    {
      v37 = v13;
      v38 = v19;
      if (v35)
      {
LABEL_27:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v40 >> 6;
          v42 = v37[1];
          if (v40 >> 6 >= 0x3C0)
            v41 = 960;
          if (v40 >= 0x1000)
            v43 = v41;
          else
            v43 = 64;
          if (v42 >> 6 >= 0x3C0)
            v44 = 960;
          else
            v44 = v42 >> 6;
          if (v42 < 0x1000)
            v44 = 64;
          v37 += 2;
          *v38 = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
          v38[1] = (613566757 * (unint64_t)((255 * v44 - 16320) >> 7)) >> 32;
          v38 += 2;
          v23 = __CFADD__(v39++, 1);
        }
        while (!v23);
        v45 = 2 * v35;
        goto LABEL_54;
      }
    }
    v45 = 0;
LABEL_54:
    if ((v45 | (unint64_t)v36) < v20)
    {
      v52 = *v37;
      v53 = v52 >> 6;
      v54 = v37[1];
      v55 = v54 >> 6;
      if (v52 >> 6 >= 0x3C0)
        v53 = 960;
      if (v52 < 0x1000)
        v53 = 64;
      if (v55 >= 0x3C0)
        v55 = 960;
      if (v54 >= 0x1000)
        v56 = v55;
      else
        v56 = 64;
      *v38 = (613566757 * (unint64_t)((255 * v53 - 16320) >> 7)) >> 32;
      v38[1] = (613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 += v18;
  }
  if (v33)
  {
    for (j = 0; j != v33; ++j)
    {
      v58 = v13;
      v59 = v19;
      if ((v34 & 1) != 0)
      {
        v60 = *v13;
        v61 = v60 >> 6;
        v62 = v13[1];
        if (v60 >> 6 >= 0x3C0)
          v61 = 960;
        if (v60 >= 0x1000)
          v63 = v61;
        else
          v63 = 64;
        if (v62 >> 6 >= 0x3C0)
          v64 = 960;
        else
          v64 = v62 >> 6;
        if (v62 >= 0x1000)
          v65 = v64;
        else
          v65 = 64;
        v58 = v13 + 2;
        v66 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
        v67 = (613566757 * (unint64_t)((255 * v65 - 16320) >> 7)) >> 32;
        *v19 = v66;
        v19[1] = v67;
        v68 = &v19[v18];
        *v68 = v66;
        v68[1] = v67;
        v59 = v19 + 2;
      }
      if (v35)
      {
        v69 = -(uint64_t)v35;
        do
        {
          v70 = *v58;
          v71 = v70 >> 6;
          v72 = v58[1];
          if (v70 >> 6 >= 0x3C0)
            v71 = 960;
          if (v70 >= 0x1000)
            v73 = v71;
          else
            v73 = 64;
          if (v72 >> 6 >= 0x3C0)
            v74 = 960;
          else
            v74 = v72 >> 6;
          if (v72 < 0x1000)
            v74 = 64;
          v75 = (613566757 * (unint64_t)((255 * v73 - 16320) >> 7)) >> 32;
          *v59 = v75;
          v76 = (613566757 * (unint64_t)((255 * v74 - 16320) >> 7)) >> 32;
          v59[1] = v76;
          v59[2] = v75;
          v59[3] = v76;
          v77 = &v59[v18 + 1];
          *(v77 - 1) = v75;
          *v77 = v76;
          v58 += 2;
          v77[1] = v75;
          v77[2] = v76;
          v59 += 4;
          v23 = __CFADD__(v69++, 1);
        }
        while (!v23);
      }
      if ((v36 | (2 * v35)) < v20)
      {
        v78 = *v58;
        v79 = v78 >> 6;
        v80 = v58[1];
        if (v78 >> 6 >= 0x3C0)
          v79 = 960;
        if (v78 >= 0x1000)
          v81 = v79;
        else
          v81 = 64;
        if (v80 >> 6 >= 0x3C0)
          v82 = 960;
        else
          v82 = v80 >> 6;
        if (v80 >= 0x1000)
          v83 = v82;
        else
          v83 = 64;
        v84 = (613566757 * (unint64_t)((255 * v81 - 16320) >> 7)) >> 32;
        v85 = (613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32;
        *v59 = v84;
        v59[1] = v85;
        v86 = &v59[v18];
        *v86 = v84;
        v86[1] = v85;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 += 2 * v18;
    }
    v87 = 2 * v33;
  }
  else
  {
    v87 = 0;
  }
  if ((v87 | (unint64_t)v32) < v21)
  {
    if ((v34 & 1) != 0)
    {
      v88 = *v13;
      v89 = v88 >> 6;
      v90 = v13[1];
      v91 = v90 >> 6;
      if (v88 >> 6 >= 0x3C0)
        v89 = 960;
      if (v88 < 0x1000)
        v89 = 64;
      if (v91 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v92 = v91;
      else
        v92 = 64;
      v13 += 2;
      *v19 = (613566757 * (unint64_t)((255 * v89 - 16320) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((255 * v92 - 16320) >> 7)) >> 32;
      v19 += 2;
    }
    if (v35)
    {
      v93 = -(uint64_t)v35;
      do
      {
        v94 = *v13;
        v95 = v94 >> 6;
        v96 = v13[1];
        if (v94 >> 6 >= 0x3C0)
          v95 = 960;
        if (v94 >= 0x1000)
          v97 = v95;
        else
          v97 = 64;
        if (v96 >> 6 >= 0x3C0)
          v98 = 960;
        else
          v98 = v96 >> 6;
        if (v96 < 0x1000)
          v98 = 64;
        v13 += 2;
        *v19 = (613566757 * (unint64_t)((255 * v97 - 16320) >> 7)) >> 32;
        v19[1] = (613566757 * (unint64_t)((255 * v98 - 16320) >> 7)) >> 32;
        v19 += 2;
        v23 = __CFADD__(v93++, 1);
      }
      while (!v23);
      v35 *= 2;
    }
    if ((v35 | v36) < v20)
    {
      v99 = *v13;
      v100 = v99 >> 6;
      v101 = v13[1];
      v102 = v101 >> 6;
      if (v99 >> 6 >= 0x3C0)
        v100 = 960;
      if (v99 < 0x1000)
        v100 = 64;
      if (v102 >= 0x3C0)
        v102 = 960;
      if (v101 >= 0x1000)
        v103 = v102;
      else
        v103 = 64;
      *v19 = (613566757 * (unint64_t)((255 * v100 - 16320) >> 7)) >> 32;
      v19[1] = (613566757 * (unint64_t)((255 * v103 - 16320) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t j;
  unint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = v11 >= v10;
    v26 = *a8;
    v27 = a8[2];
    v28 = *a3 + *a4 * v11;
    if (v25)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v12 + v29;
    v31 = a7[2] + v27 * v18 + v16;
    v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v31 + i) = -1;
          *(_BYTE *)(v32 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v34 = v22 >> 1;
  v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1)
    v34 = (v22 - (v10 & 1)) >> 1;
  v36 = v21 >> 1;
  v37 = v21 - v9;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *(_BYTE *)(v14 + 3);
      v39 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v41;
      v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *(_BYTE *)(v39 + 3);
      *v40 = *(_BYTE *)(v39 + 1);
      v40[1] = v43;
      v40 += 2;
      v39 += 4;
      v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v14;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v47 = *(_BYTE *)(v14 + 3);
        v45 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v47;
        v46 = v20 + 2;
      }
      if (v38)
      {
        v48 = -(uint64_t)v38;
        do
        {
          v49 = *(_BYTE *)(v45 + 1);
          v50 = *(_BYTE *)(v45 + 3);
          *v46 = v49;
          v46[1] = v50;
          v51 = &v46[v19];
          *v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 4;
          v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v53 = *(_BYTE *)(v14 + 1);
      v54 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v53;
      v20[1] = v54;
      v20 += 2;
    }
    if (v38)
    {
      v55 = -(uint64_t)v38;
      do
      {
        v56 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v56;
        v20 += 2;
        v14 += 4;
        v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  uint64_t j;
  unint64_t v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v30 = v22 >> 1;
  v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1)
    v30 = (v22 - (v10 & 1)) >> 1;
  v32 = v21 >> 1;
  v33 = v21 - v9;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v37 = *(_BYTE *)(v14 + 3);
      v35 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v37;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *(_BYTE *)(v35 + 3);
      *v36 = *(_BYTE *)(v35 + 1);
      v36[1] = v39;
      v36 += 2;
      v35 += 4;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (j = 0; j != v30; ++j)
    {
      v42 = v14;
      v43 = v20;
      if ((v8 & 1) != 0)
      {
        v44 = *(_BYTE *)(v14 + 3);
        v42 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v44;
        v43 = v20 + 2;
      }
      if (v34)
      {
        v45 = -(uint64_t)v34;
        do
        {
          v46 = *(_BYTE *)(v42 + 1);
          v47 = *(_BYTE *)(v42 + 3);
          *v43 = v46;
          v43[1] = v47;
          v48 = &v43[v19];
          *v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 4;
          v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v49 = 2 * v30;
  }
  else
  {
    v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v50 = *(_BYTE *)(v14 + 1);
      v51 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v50;
      v20[1] = v51;
      v20 += 2;
    }
    if (v34)
    {
      v52 = -(uint64_t)v34;
      do
      {
        v53 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v53;
        v20 += 2;
        v14 += 4;
        v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  uint64_t j;
  unsigned __int16 *v51;
  _BYTE *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = 2 * (v9 + v8);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  v22 = *(_QWORD *)(a2 + 24) + v10 - v11 + ((*(_QWORD *)(a2 + 24) + v10) & 1);
  if (v22 >= v15)
    v22 = v15;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = *a3 + *a4 * v11 + v12 + v26;
    v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v30 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_BYTE *)(v28 + i) = (255 * v30 - 16320) / 0x36C;
        }
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
  }
  v31 = v22 >> 1;
  v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v31 = (v22 - (v10 & 1)) >> 1;
  v33 = v21 >> 1;
  v34 = v21 - v9;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v38 = *v14;
      v39 = v38 >> 6;
      v40 = v14[1];
      v41 = v40 >> 6;
      if (v38 >> 6 >= 0x3C0)
        v39 = 960;
      if (v38 < 0x1000)
        v39 = 64;
      if (v41 >= 0x3C0)
        v41 = 960;
      if (v40 >= 0x1000)
        v42 = v41;
      else
        v42 = 64;
      v36 = v14 + 2;
      *v20 = (613566757 * (unint64_t)((255 * v39 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v42 - 16320) >> 7)) >> 32;
      v37 = v20 + 2;
      if (!v35)
        goto LABEL_51;
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (!v35)
      {
LABEL_51:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_52;
      }
    }
    v43 = -(uint64_t)v35;
    do
    {
      v44 = *v36;
      v45 = v44 >> 6;
      v46 = v36[1];
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v47 = v45;
      else
        v47 = 64;
      if (v46 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v46 >> 6;
      if (v46 < 0x1000)
        v48 = 64;
      *v37 = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
      v37[1] = (613566757 * (unint64_t)((255 * v48 - 16320) >> 7)) >> 32;
      v37 += 2;
      v36 += 2;
      v49 = __CFADD__(v43++, 1);
    }
    while (!v49);
    goto LABEL_51;
  }
LABEL_52:
  if (v31)
  {
    for (j = 0; j != v31; ++j)
    {
      v51 = v14;
      v52 = v20;
      if ((v8 & 1) != 0)
      {
        v53 = *v14;
        v54 = v53 >> 6;
        v55 = v14[1];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 < 0x1000)
          v54 = 64;
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        else
          v56 = v55 >> 6;
        if (v55 >= 0x1000)
          v57 = v56;
        else
          v57 = 64;
        v51 = v14 + 2;
        *v20 = (613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v57 - 16320) >> 7)) >> 32;
        v52 = v20 + 2;
      }
      if (v35)
      {
        v58 = -(uint64_t)v35;
        do
        {
          v59 = *v51;
          v60 = v59 >> 6;
          v61 = v51[1];
          if (v59 >> 6 >= 0x3C0)
            v60 = 960;
          if (v59 >= 0x1000)
            v62 = v60;
          else
            v62 = 64;
          if (v61 >> 6 >= 0x3C0)
            v63 = 960;
          else
            v63 = v61 >> 6;
          if (v61 < 0x1000)
            v63 = 64;
          v64 = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
          v65 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
          *v52 = v64;
          v52[1] = v65;
          v66 = &v52[v19];
          *v66 = v64;
          v66[1] = v65;
          v52 += 2;
          v51 += 2;
          v49 = __CFADD__(v58++, 1);
        }
        while (!v49);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    v67 = 2 * v31;
  }
  else
  {
    v67 = 0;
  }
  if ((v67 | (unint64_t)v32) < v22)
  {
    if ((v8 & 1) != 0)
    {
      v68 = *v14;
      v69 = v68 >> 6;
      v70 = v14[1];
      v71 = v70 >> 6;
      if (v68 >> 6 >= 0x3C0)
        v69 = 960;
      if (v68 < 0x1000)
        v69 = 64;
      if (v71 >= 0x3C0)
        v71 = 960;
      if (v70 >= 0x1000)
        v72 = v71;
      else
        v72 = 64;
      v14 += 2;
      *v20 = (613566757 * (unint64_t)((255 * v69 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v72 - 16320) >> 7)) >> 32;
      v20 += 2;
    }
    if (v35)
    {
      v73 = -(uint64_t)v35;
      do
      {
        v74 = *v14;
        v75 = v74 >> 6;
        v76 = v14[1];
        if (v74 >> 6 >= 0x3C0)
          v75 = 960;
        if (v74 >= 0x1000)
          v77 = v75;
        else
          v77 = 64;
        if (v76 >> 6 >= 0x3C0)
          v78 = 960;
        else
          v78 = v76 >> 6;
        if (v76 < 0x1000)
          v78 = 64;
        *v20 = (613566757 * (unint64_t)((255 * v77 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32;
        v20 += 2;
        v14 += 2;
        v49 = __CFADD__(v73++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t j;
  unint64_t v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  char v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = v12 >= v9;
    v29 = *a8;
    v30 = a8[2];
    v31 = *a3 + *a4 * v12;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v14 + v32;
    v34 = a7[2] + v30 * v19 + v17;
    v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v34 + i) = -1;
          *(_BYTE *)(v35 + i) = *(_BYTE *)(v33 + 2 * i + 1);
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v37 = v24 >> 1;
  v38 = v24 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v23 >> 1;
  v41 = v23 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v45 = *(_BYTE *)(v16 + 3);
      v43 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v45;
      v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v22;
      if (!v42)
        goto LABEL_29;
    }
    v46 = -(uint64_t)v42;
    do
    {
      v47 = *(_BYTE *)(v43 + 3);
      *v44 = *(_BYTE *)(v43 + 1);
      v44[1] = v47;
      v44 += 2;
      v43 += 4;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v49 = v16;
      v50 = v22;
      if ((v8 & 1) != 0)
      {
        v51 = *(_BYTE *)(v16 + 3);
        v49 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v42)
      {
        v52 = -(uint64_t)v42;
        do
        {
          v53 = *(_BYTE *)(v49 + 3);
          *v50 = *(_BYTE *)(v49 + 1);
          v50[1] = v53;
          v50 += 2;
          v49 += 4;
          v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_420v(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[3];

  v6 = 0;
  v20[2] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = a1;
  v19[0] = a2;
  v19[1] = a2 >> 1;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = v19[v6];
    if (v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a3 + 8 * v6);
      v12 = *(_QWORD *)(a5 + 8 * v6);
      v13 = *(_QWORD *)(a6 + 8 * v6);
      v14 = *(_QWORD *)(a4 + 8 * v6);
      v15 = v20[v6];
      do
      {
        if (v15)
        {
          v16 = 0;
          v17 = 1;
          do
          {
            *(_BYTE *)(v13 + v16++) = *(_BYTE *)(v14 + v17);
            v17 += 2;
          }
          while (v15 != v16);
        }
        v14 += v11;
        v13 += v12;
        ++v10;
      }
      while (v10 != v9);
    }
    v7 = 0;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x420_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t j;
  unsigned __int16 *v56;
  _BYTE *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v12 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_BYTE *)(v33 + i) = (255 * v35 - 16320) / 0x36C;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  v36 = v24 >> 1;
  v37 = v24 - v11;
  if (v36 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v36;
  v39 = v23 >> 1;
  v40 = v23 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v44 = *v16;
      v45 = v44 >> 6;
      v46 = v16[1];
      v47 = v46 >> 6;
      if (v44 >> 6 >= 0x3C0)
        v45 = 960;
      if (v44 < 0x1000)
        v45 = 64;
      if (v47 >= 0x3C0)
        v47 = 960;
      if (v46 >= 0x1000)
        v48 = v47;
      else
        v48 = 64;
      v42 = v16 + 2;
      *v22 = (613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32;
      v22[1] = (613566757 * (unint64_t)((255 * v48 - 16320) >> 7)) >> 32;
      v43 = v22 + 2;
      if (!v41)
        goto LABEL_52;
    }
    else
    {
      v42 = v16;
      v43 = v22;
      if (!v41)
      {
LABEL_52:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_53;
      }
    }
    v49 = -(uint64_t)v41;
    do
    {
      v50 = *v42;
      v51 = v50 >> 6;
      v52 = v42[1];
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v53 = v51;
      else
        v53 = 64;
      if (v52 >> 6 >= 0x3C0)
        v54 = 960;
      else
        v54 = v52 >> 6;
      if (v52 < 0x1000)
        v54 = 64;
      *v43 = (613566757 * (unint64_t)((255 * v53 - 16320) >> 7)) >> 32;
      v43[1] = (613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32;
      v43 += 2;
      v42 += 2;
      v27 = __CFADD__(v49++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v56 = v16;
      v57 = v22;
      if ((v8 & 1) != 0)
      {
        v58 = *v16;
        v59 = v58 >> 6;
        v60 = v16[1];
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        if (v58 < 0x1000)
          v59 = 64;
        if (v60 >> 6 >= 0x3C0)
          v61 = 960;
        else
          v61 = v60 >> 6;
        if (v60 >= 0x1000)
          v62 = v61;
        else
          v62 = 64;
        v56 = v16 + 2;
        *v22 = (613566757 * (unint64_t)((255 * v59 - 16320) >> 7)) >> 32;
        v22[1] = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
        v57 = v22 + 2;
      }
      if (v41)
      {
        v63 = -(uint64_t)v41;
        do
        {
          v64 = *v56;
          v65 = v64 >> 6;
          v66 = v56[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          *v57 = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v57[1] = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
          v57 += 2;
          v56 += 2;
          v27 = __CFADD__(v63++, 1);
        }
        while (!v27);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  uint64_t j;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  char v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = *(_BYTE *)(v34 + 2 * i + 1);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v27 >> 1;
  v38 = v27 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 >> 1;
  v41 = v26 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *(_BYTE *)(v16 + 3);
      v43 = v16 + 4;
      *v24 = *(_BYTE *)(v16 + 1);
      v44 = v24 + 1;
      *v25 = v46;
      v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v24;
      v45 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42)
        goto LABEL_29;
    }
    v47 = -(uint64_t)v42;
    do
    {
      v48 = *(_BYTE *)(v43 + 3);
      *v44++ = *(_BYTE *)(v43 + 1);
      *v45++ = v48;
      v43 += 4;
      v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v9 & 1) != 0)
      {
        v54 = *(_BYTE *)(v16 + 3);
        v51 = v16 + 4;
        *v24 = *(_BYTE *)(v16 + 1);
        v52 = v24 + 1;
        *v25 = v54;
        v53 = v25 + 1;
      }
      if (v42)
      {
        v55 = -(uint64_t)v42;
        do
        {
          v56 = *(_BYTE *)(v51 + 3);
          *v52++ = *(_BYTE *)(v51 + 1);
          *v53++ = v56;
          v51 += 4;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 += v15;
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_x420_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  BOOL v57;
  uint64_t j;
  unsigned __int16 *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v14 + v32;
    v34 = *a7 + v30 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_BYTE *)(v34 + i) = (255 * v36 - 16320) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  v37 = v26 >> 1;
  v38 = v26 - v11;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v25 >> 1;
  v41 = v25 - v10;
  if (v40 >= v41 >> 1)
    v42 = v41 >> 1;
  else
    v42 = v40;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *v16;
      v47 = v46 >> 6;
      v48 = v16[1];
      v49 = v48 >> 6;
      if (v46 >> 6 >= 0x3C0)
        v47 = 960;
      if (v46 < 0x1000)
        v47 = 64;
      if (v49 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v50 = v49;
      else
        v50 = 64;
      v43 = v16 + 2;
      *v23 = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
      v44 = v23 + 1;
      *v24 = (613566757 * (unint64_t)((255 * v50 - 16320) >> 7)) >> 32;
      v45 = v24 + 1;
      if (!v42)
        goto LABEL_52;
    }
    else
    {
      v43 = v16;
      v44 = v23;
      v45 = v24;
      if (!v42)
      {
LABEL_52:
        v16 = (unsigned __int16 *)((char *)v16 + v15);
        v23 += v21;
        v24 += v22;
        goto LABEL_53;
      }
    }
    v51 = -(uint64_t)v42;
    do
    {
      v52 = *v43;
      v53 = v52 >> 6;
      v54 = v43[1];
      if (v52 >> 6 >= 0x3C0)
        v53 = 960;
      if (v52 >= 0x1000)
        v55 = v53;
      else
        v55 = 64;
      if (v54 >> 6 >= 0x3C0)
        v56 = 960;
      else
        v56 = v54 >> 6;
      if (v54 < 0x1000)
        v56 = 64;
      *v44++ = (613566757 * (unint64_t)((255 * v55 - 16320) >> 7)) >> 32;
      *v45++ = (613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32;
      v43 += 2;
      v57 = __CFADD__(v51++, 1);
    }
    while (!v57);
    goto LABEL_52;
  }
LABEL_53:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v59 = v16;
      v60 = v23;
      v61 = v24;
      if ((v9 & 1) != 0)
      {
        v62 = *v16;
        v63 = v62 >> 6;
        v64 = v16[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 < 0x1000)
          v63 = 64;
        if (v64 >> 6 >= 0x3C0)
          v65 = 960;
        else
          v65 = v64 >> 6;
        if (v64 >= 0x1000)
          v66 = v65;
        else
          v66 = 64;
        v59 = v16 + 2;
        *v23 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
        v60 = v23 + 1;
        *v24 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
        v61 = v24 + 1;
      }
      if (v42)
      {
        v67 = -(uint64_t)v42;
        do
        {
          v68 = *v59;
          v69 = v68 >> 6;
          v70 = v59[1];
          if (v68 >> 6 >= 0x3C0)
            v69 = 960;
          if (v68 >= 0x1000)
            v71 = v69;
          else
            v71 = 64;
          if (v70 >> 6 >= 0x3C0)
            v72 = 960;
          else
            v72 = v70 >> 6;
          if (v70 < 0x1000)
            v72 = 64;
          *v60++ = (613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32;
          *v61++ = (613566757 * (unint64_t)((255 * v72 - 16320) >> 7)) >> 32;
          v59 += 2;
          v57 = __CFADD__(v67++, 1);
        }
        while (!v57);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v15);
      v23 += v21;
      v24 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_420v(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v19 = *a8;
    v20 = a8[1];
    v21 = *a7;
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v9) >> 1) + v18);
    v24 = v10 >> 1;
    v25 = 3 * ((v12 + 2) / 3);
    v26 = v13 - v12;
    v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
    if (v13 - v12 >= v27)
      v26 = v27;
    v28 = (_BYTE *)(v21 + v19 * v9 + v18);
    v29 = v16 + 4 * v14 * v8 + 4 * (v12 / 3);
    v30 = v26 + v18;
    do
    {
      v31 = v28;
      v32 = v12;
      v33 = (unsigned int *)v29;
      if (v25 > v12)
      {
        v34 = 0;
        v35 = 10 * v12;
        v33 = (unsigned int *)v29;
        v36 = v12;
        do
        {
          v37 = *v33 >> (v35 - 30 * (v36 / 3));
          v33 += 2 - v12 + 3 * (v36 / 3) == v34;
          v28[v34] = v37 >> 2;
          ++v36;
          ++v34;
          v35 += 10;
        }
        while (v25 - v12 != v34);
        v31 = &v28[v34];
        v32 = 3 * ((v12 + 2) / 3);
      }
      while (v32 < v13 - v13 % 3)
      {
        v38 = *v33++;
        *v31 = v38 >> 2;
        v31[1] = v38 >> 12;
        v31[2] = v38 >> 22;
        v31 += 3;
        v32 += 3;
      }
      if (v32 < v30)
      {
        v39 = 10 * v32;
        do
        {
          v40 = *v33 >> (v39 - 30 * (v32 / 3));
          v33 += 3 * (v32 / 3) + 2 == v32;
          *v31++ = v40 >> 2;
          ++v32;
          v39 += 10;
        }
        while (v32 < v30);
      }
      v29 += 4 * v14;
      v28 += v19;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = 6 * ((v12 + 5) / 6);
      v43 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v13) >> 64);
      if (v24 <= 1)
        v44 = 1;
      else
        v44 = v24;
      do
      {
        v45 = (unsigned int *)v17;
        v46 = v23;
        v47 = v12;
        if (v42 > v12)
        {
          v48 = 0;
          v49 = 10 * v12;
          v50 = v12;
          v45 = (unsigned int *)v17;
          do
          {
            v51 = *v45 >> (v49 - 30 * (v50 / 3));
            v45 += 2 - v12 + 3 * (v50 / 3) == v48;
            v23[v48] = v51 >> 2;
            ++v50;
            ++v48;
            v49 += 10;
          }
          while (v42 - v12 != v48);
          v46 = &v23[v48];
          v47 = 6 * ((v12 + 5) / 6);
        }
        while (v47 < v43)
        {
          v52 = *v45++;
          *v46 = v52 >> 2;
          v46[1] = v52 >> 12;
          v46[2] = v52 >> 22;
          v46 += 3;
          v47 += 3;
        }
        if (v47 < v30)
        {
          v53 = 10 * v47;
          do
          {
            v54 = *v45 >> (v53 - 30 * (v47 / 3));
            v45 += 3 * (v47 / 3) + 2 == v47;
            *v46++ = v54 >> 2;
            ++v47;
            v53 += 10;
          }
          while (v47 < v30);
        }
        v17 += 4 * v15;
        v23 += v20;
        ++v41;
      }
      while (v41 != v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_420f(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v56;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v19 = *a8;
    v20 = a8[1];
    v21 = *a7;
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v9) >> 1) + v18);
    v56 = v10 >> 1;
    v24 = 3 * ((v12 + 2) / 3);
    v25 = v13 - v12;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
    if (v13 - v12 >= v26)
      v25 = v26;
    v27 = (_BYTE *)(v21 + v19 * v9 + v18);
    v28 = v16 + 4 * v14 * v8 + 4 * (v12 / 3);
    v29 = v25 + v18;
    do
    {
      v30 = v27;
      v31 = v12;
      v32 = (unsigned int *)v28;
      if (v24 > v12)
      {
        v33 = 0;
        v34 = 10 * v12;
        v32 = (unsigned int *)v28;
        v35 = v12;
        do
        {
          v36 = (*v32 >> (v34 - 30 * (v35 / 3))) & 0x3FF;
          v32 += 2 - v12 + 3 * (v35 / 3) == v33;
          v37 = (unint64_t)(2510300521 * (255 * v36 - 15882)) >> 32;
          v27[v33] = (v37 >> 9) + (v37 < 0);
          ++v35;
          ++v33;
          v34 += 10;
        }
        while (v24 - v12 != v33);
        v30 = &v27[v33];
        v31 = 3 * ((v12 + 2) / 3);
      }
      while (v31 < v13 - v13 % 3)
      {
        v38 = *v32++;
        *v30 = (int)(255 * (v38 & 0x3FF) - 15882) / 876;
        v30[1] = (int)(255 * ((v38 >> 10) & 0x3FF) - 15882) / 876;
        v30[2] = (int)(255 * ((v38 >> 20) & 0x3FF) - 15882) / 876;
        v30 += 3;
        v31 += 3;
      }
      if (v31 < v29)
      {
        v39 = 10 * v31;
        do
        {
          v40 = (*v32 >> (v39 - 30 * (v31 / 3))) & 0x3FF;
          v32 += 3 * (v31 / 3) + 2 == v31;
          *v30++ = (char)(-(char)v40 - 10) / 108;
          ++v31;
          v39 += 10;
        }
        while (v31 < v29);
      }
      v28 += 4 * v14;
      v27 += v19;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = v13;
      v43 = 6 * ((v12 + 5) / 6);
      v44 = v56;
      if (v56 <= 1)
        v44 = 1;
      do
      {
        v45 = (unsigned int *)v17;
        v46 = v23;
        v47 = v12;
        if (v43 > v12)
        {
          v48 = 0;
          v49 = 10 * v12;
          v50 = v12;
          v45 = (unsigned int *)v17;
          do
          {
            v51 = (*v45 >> (v49 - 30 * (v50 / 3))) & 0x3FF;
            v45 += 2 - v12 + 3 * (v50 / 3) == v48;
            v23[v48] = (char)-(char)v51 / -128;
            ++v50;
            ++v48;
            v49 += 10;
          }
          while (v43 - v12 != v48);
          v46 = &v23[v48];
          v47 = 6 * ((v12 + 5) / 6);
        }
        while (v47 < (unint64_t)(2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v42) >> 64)))
        {
          v52 = *v45++;
          *v46 = (int)(255 * (v52 & 0x3FF) - 15872) / 896;
          v46[1] = (int)(255 * ((v52 >> 10) & 0x3FF) - 15872) / 896;
          v46[2] = (int)(255 * ((v52 >> 20) & 0x3FF) - 15872) / 896;
          v46 += 3;
          v47 += 3;
        }
        if (v47 < v29)
        {
          v53 = 10 * v47;
          do
          {
            v54 = (*v45 >> (v53 - 30 * (v47 / 3))) & 0x3FF;
            v45 += 3 * (v47 / 3) + 2 == v47;
            *v46++ = (char)-(char)v54 / -128;
            ++v47;
            v53 += 10;
          }
          while (v47 < v29);
        }
        v17 += 4 * v15;
        v23 += v20;
        ++v41;
      }
      while (v41 != v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_x420(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  _WORD *v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  _WORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = *a4 >> 2;
    v13 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v14 = a4[1] >> 2;
    v15 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v14 * v8) >> 1) + 4 * (v13 / 3);
    v18 = *a8 >> 1;
    v19 = a8[1] >> 1;
    v20 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v21 = a7[1] + ((v19 * v9) & 0xFFFFFFFFFFFFFFFELL) + 2 * v20;
    v22 = v10 >> 1;
    v23 = 3 * ((v13 + 2) / 3);
    v24 = *a7 + 2 * v18 * v9 + 2 * v20;
    v25 = v16 + 4 * v12 * v8;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v20;
    if (v15 - v13 >= v26)
      v27 = v26;
    else
      v27 = v15 - v13;
    v28 = (unsigned int *)(v25 + 4 * (v13 / 3));
    v29 = v27 + v20;
    v30 = 2 * v18;
    do
    {
      v31 = (_WORD *)v24;
      v32 = v13;
      v33 = v28;
      if (v23 > v13)
      {
        v34 = 0;
        v35 = 0;
        v36 = 10 * v13;
        v33 = v28;
        v37 = v13;
        do
        {
          *(_WORD *)(v24 + 2 * v35) = (unsigned __int16)(*v33 >> (v36 - 30 * (v37 / 3))) << 6;
          v33 += 2 - v13 + 3 * (v37 / 3) == v35;
          ++v37;
          ++v35;
          v36 += 10;
          v34 -= 2;
        }
        while (v23 - v13 != v35);
        v31 = (_WORD *)(v24 - v34);
        v32 = 3 * ((v13 + 2) / 3);
      }
      while (v32 < v15 - v15 % 3)
      {
        v38 = *v33++;
        *v31 = (_WORD)v38 << 6;
        v31[1] = (v38 >> 4) & 0xFFC0;
        v31[2] = (v38 >> 14) & 0xFFC0;
        v31 += 3;
        v32 += 3;
      }
      if (v32 < v29)
      {
        v39 = 10 * v32;
        do
        {
          v40 = *v33 >> (v39 - 30 * (v32 / 3));
          v33 += 3 * (v32 / 3) + 2 == v32;
          *v31++ = (_WORD)v40 << 6;
          ++v32;
          v39 += 10;
        }
        while (v32 < v29);
      }
      v28 += v12;
      v24 += v30;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = 6 * ((v13 + 5) / 6);
      v43 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v15) >> 64);
      if (v22 <= 1)
        v44 = 1;
      else
        v44 = v22;
      v45 = 2 * v19;
      do
      {
        v46 = (unsigned int *)v17;
        v47 = (_WORD *)v21;
        v48 = v13;
        if (v42 > v13)
        {
          v49 = 0;
          v50 = 0;
          v51 = 10 * v13;
          v52 = v13;
          v46 = (unsigned int *)v17;
          do
          {
            *(_WORD *)(v21 + 2 * v50) = (unsigned __int16)(*v46 >> (v51 - 30 * (v52 / 3))) << 6;
            v46 += 2 - v13 + 3 * (v52 / 3) == v50;
            ++v52;
            ++v50;
            v51 += 10;
            v49 -= 2;
          }
          while (v42 - v13 != v50);
          v47 = (_WORD *)(v21 - v49);
          v48 = 6 * ((v13 + 5) / 6);
        }
        while (v48 < v43)
        {
          v53 = *v46++;
          *v47 = (_WORD)v53 << 6;
          v47[1] = (v53 >> 4) & 0xFFC0;
          v47[2] = (v53 >> 14) & 0xFFC0;
          v47 += 3;
          v48 += 3;
        }
        if (v48 < v29)
        {
          v54 = 10 * v48;
          do
          {
            v55 = *v46 >> (v54 - 30 * (v48 / 3));
            v46 += 3 * (v48 / 3) + 2 == v48;
            *v47++ = (_WORD)v55 << 6;
            ++v48;
            v54 += 10;
          }
          while (v48 < v29);
        }
        v17 += 4 * v14;
        v21 += v45;
        ++v41;
      }
      while (v41 != v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_xf20(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v54;
  uint64_t v55;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = *a4 >> 2;
    v13 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v14 = a4[1] >> 2;
    v15 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v14 * v8) >> 1) + 4 * (v13 / 3);
    v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v19 = *a8 >> 1;
    v55 = a8[1] >> 1;
    v20 = *a7;
    v22 = a7[1] + ((v55 * v9) & 0xFFFFFFFFFFFFFFFELL) + 2 * v18;
    v54 = v10 >> 1;
    v23 = 3 * ((v13 + 2) / 3);
    v24 = v15 - v13;
    v25 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
    if (v15 - v13 >= v25)
      v24 = v25;
    v26 = v20 + 2 * v19 * v9 + 2 * v18;
    v27 = v16 + 4 * v12 * v8 + 4 * (v13 / 3);
    v28 = v24 + v18;
    do
    {
      v29 = (_WORD *)v26;
      v30 = v13;
      v31 = (unsigned int *)v27;
      if (v23 > v13)
      {
        v32 = 0;
        v33 = 0;
        v34 = 10 * v13;
        v31 = (unsigned int *)v27;
        v35 = v13;
        do
        {
          *(_WORD *)(v26 + 2 * v33) = ((__int16)(1023 * ((*v31 >> (v34 - 30 * (v35 / 3))) & 0x3FF) + 502) / 876) << 6;
          v31 += 2 - v13 + 3 * (v35 / 3) == v33;
          ++v35;
          ++v33;
          v34 += 10;
          v32 -= 2;
        }
        while (v23 - v13 != v33);
        v29 = (_WORD *)(v26 - v32);
        v30 = 3 * ((v13 + 2) / 3);
      }
      while (v30 < v15 - v15 % 3)
      {
        v36 = *v31++;
        *v29 = ((__int16)(1023 * (v36 & 0x3FF) + 502) / 876) << 6;
        v29[1] = (unsigned __int16)((int)(1023 * ((v36 >> 10) & 0x3FF) - 65034) / 876) << 6;
        v29[2] = (unsigned __int16)((int)(1023 * ((v36 >> 20) & 0x3FF) - 65034) / 876) << 6;
        v29 += 3;
        v30 += 3;
      }
      if (v30 < v28)
      {
        v37 = 10 * v30;
        do
        {
          v38 = (*v31 >> (v37 - 30 * (v30 / 3))) & 0x3FF;
          v31 += 3 * (v30 / 3) + 2 == v30;
          *v29++ = ((__int16)(1023 * v38 + 502) / 876) << 6;
          ++v30;
          v37 += 10;
        }
        while (v30 < v28);
      }
      v27 += 4 * v12;
      v26 += 2 * v19;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v39 = 0;
      v40 = v15;
      v41 = 6 * ((v13 + 5) / 6);
      v42 = v54;
      if (v54 <= 1)
        v42 = 1;
      do
      {
        v43 = (unsigned int *)v17;
        v44 = (_WORD *)v22;
        v45 = v13;
        if (v41 > v13)
        {
          v46 = 0;
          v47 = 0;
          v48 = 10 * v13;
          v49 = v13;
          v43 = (unsigned int *)v17;
          do
          {
            *(_WORD *)(v22 + 2 * v47) = ((__int16)(1023 * ((*v43 >> (v48 - 30 * (v49 / 3))) & 0x3FF) + 512) / 896) << 6;
            v43 += 2 - v13 + 3 * (v49 / 3) == v47;
            ++v49;
            ++v47;
            v48 += 10;
            v46 -= 2;
          }
          while (v41 - v13 != v47);
          v44 = (_WORD *)(v22 - v46);
          v45 = 6 * ((v13 + 5) / 6);
        }
        while (v45 < (unint64_t)(2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v40) >> 64)))
        {
          v50 = *v43++;
          *v44 = ((__int16)(1023 * (v50 & 0x3FF) + 512) / 896) << 6;
          v44[1] = (unsigned __int16)((int)(1023 * ((v50 >> 10) & 0x3FF) - 65024) / 896) << 6;
          v44[2] = (unsigned __int16)((int)(1023 * ((v50 >> 20) & 0x3FF) - 65024) / 896) << 6;
          v44 += 3;
          v45 += 3;
        }
        if (v45 < v28)
        {
          v51 = 10 * v45;
          do
          {
            v52 = (*v43 >> (v51 - 30 * (v45 / 3))) & 0x3FF;
            v43 += 3 * (v45 / 3) + 2 == v45;
            *v44++ = ((__int16)(1023 * v52 + 512) / 896) << 6;
            ++v45;
            v51 += 10;
          }
          while (v45 < v28);
        }
        v17 += 4 * v14;
        v22 += 2 * v55;
        ++v39;
      }
      while (v39 != v42);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_y420(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _DWORD *v51;
  unsigned int v52;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unint64_t v61;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a7;
    v22 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v9) >> 1) + v17);
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v9) >> 1) + v17);
    v61 = v10 >> 1;
    v24 = 3 * ((v12 + 2) / 3);
    v25 = v13 - v12;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
    if (v13 - v12 >= v26)
      v25 = v26;
    v27 = (_BYTE *)(v21 + v18 * v9 + v17);
    v28 = *a3 + 4 * v14 * v8 + 4 * (v12 / 3);
    v29 = v25 + v17;
    do
    {
      v30 = v27;
      v31 = v12;
      v32 = (unsigned int *)v28;
      if (v24 > v12)
      {
        v33 = 0;
        v34 = 10 * v12;
        v32 = (unsigned int *)v28;
        v35 = v12;
        do
        {
          v36 = *v32 >> (v34 - 30 * (v35 / 3));
          v32 += 2 - v12 + 3 * (v35 / 3) == v33;
          v27[v33] = v36 >> 2;
          ++v35;
          ++v33;
          v34 += 10;
        }
        while (v24 - v12 != v33);
        v30 = &v27[v33];
        v31 = 3 * ((v12 + 2) / 3);
      }
      while (v31 < v13 - v13 % 3)
      {
        v37 = *v32++;
        *v30 = v37 >> 2;
        v30[1] = v37 >> 12;
        v30[2] = v37 >> 22;
        v30 += 3;
        v31 += 3;
      }
      if (v31 < v29)
      {
        v38 = 10 * v31;
        do
        {
          v39 = *v32 >> (v38 - 30 * (v31 / 3));
          v32 += 3 * (v31 / 3) + 2 == v31;
          *v30++ = v39 >> 2;
          ++v31;
          v38 += 10;
        }
        while (v31 < v29);
      }
      v28 += 4 * v14;
      v27 += v18;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v40 = 0;
      v41 = 6 * ((v12 + 5) / 6);
      v42 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v13) >> 64);
      v43 = v61;
      if (v61 <= 1)
        v43 = 1;
      do
      {
        v44 = 1;
        if (v12 >= v41)
        {
          v51 = (_DWORD *)v16;
          v50 = v22;
          v49 = v23;
          v54 = v12;
        }
        else
        {
          v45 = v12 - 2;
          v46 = 10 * v12;
          v47 = v12 - v41;
          v48 = v12;
          v49 = v23;
          v50 = v22;
          v51 = (_DWORD *)v16;
          do
          {
            v52 = *v51 >> (v46 - 30 * (v48 / 3));
            if (v44)
            {
              v44 = 0;
              *v50++ = v52 >> 2;
            }
            else
            {
              *v49++ = v52 >> 2;
              v44 = 1;
            }
            v51 += v45 == 3 * (v48 / 3);
            ++v48;
            v46 += 10;
            ++v45;
          }
          while (!__CFADD__(v47++, 1));
          v54 = 6 * ((v12 + 5) / 6);
        }
        while (v54 < v42)
        {
          v55 = *v51 >> 12;
          v56 = *v51 >> 22;
          *v50 = *v51 >> 2;
          *v49 = v55;
          v50[1] = v56;
          v57 = v51[1];
          v51 += 2;
          v49[1] = v57 >> 2;
          v50[2] = v57 >> 12;
          v49[2] = v57 >> 22;
          v50 += 3;
          v49 += 3;
          v54 += 6;
        }
        if (v54 < v29)
        {
          v58 = 10 * v54;
          do
          {
            v59 = *v51 >> (v58 - 30 * (v54 / 3));
            if (v44)
            {
              v44 = 0;
              *v50++ = v59 >> 2;
            }
            else
            {
              *v49++ = v59 >> 2;
              v44 = 1;
            }
            v51 += 3 * (v54 / 3) + 2 == v54;
            ++v54;
            v58 += 10;
          }
          while (v54 < v29);
        }
        v16 += 4 * v15;
        v22 += v19;
        v23 += v20;
        ++v40;
      }
      while (v40 != v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420_f420(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _DWORD *v51;
  int v52;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  int v62;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v66 = a4[1] >> 2;
    v15 = a3[1] + 4 * ((unint64_t)(v66 * v8) >> 1) + 4 * (v12 / 3);
    v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v17 = *a8;
    v18 = a8[1];
    v19 = a8[2];
    v20 = *a7;
    v21 = (_BYTE *)(a7[1] + ((unint64_t)(v18 * v9) >> 1) + v16);
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v19 * v9) >> 1) + v16);
    v64 = v10 >> 1;
    v65 = v13;
    v23 = 3 * ((v12 + 2) / 3);
    v24 = v13 - v13 % 3;
    v25 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
    if (v13 - v12 >= v25)
      v26 = v25;
    else
      v26 = v13 - v12;
    v27 = (_BYTE *)(v20 + v17 * v9 + v16);
    v28 = *a3 + 4 * v14 * v8 + 4 * (v12 / 3);
    v29 = v26 + v16;
    do
    {
      v30 = v27;
      v31 = v12;
      v32 = (unsigned int *)v28;
      if (v23 > v12)
      {
        v33 = 0;
        v34 = 10 * v12;
        v32 = (unsigned int *)v28;
        v35 = v12;
        do
        {
          v36 = (*v32 >> (v34 - 30 * (v35 / 3))) & 0x3FF;
          v32 += 2 - v12 + 3 * (v35 / 3) == v33;
          v37 = (unint64_t)(2510300521 * (255 * v36 - 15882)) >> 32;
          v27[v33] = (v37 >> 9) + (v37 < 0);
          ++v35;
          ++v33;
          v34 += 10;
        }
        while (v23 - v12 != v33);
        v30 = &v27[v33];
        v31 = 3 * ((v12 + 2) / 3);
      }
      while (v31 < v24)
      {
        v38 = *v32++;
        *v30 = (int)(255 * (v38 & 0x3FF) - 15882) / 876;
        v30[1] = (int)(255 * ((v38 >> 10) & 0x3FF) - 15882) / 876;
        v30[2] = (int)(255 * ((v38 >> 20) & 0x3FF) - 15882) / 876;
        v30 += 3;
        v31 += 3;
      }
      if (v31 < v29)
      {
        v39 = 10 * v31;
        do
        {
          v40 = (*v32 >> (v39 - 30 * (v31 / 3))) & 0x3FF;
          v32 += 3 * (v31 / 3) + 2 == v31;
          *v30++ = (char)(-(char)v40 - 10) / 108;
          ++v31;
          v39 += 10;
        }
        while (v31 < v29);
      }
      v28 += 4 * v14;
      v27 += v17;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = 6 * ((v12 + 5) / 6);
      if (v64 <= 1)
        v43 = 1;
      else
        v43 = v64;
      do
      {
        v44 = 1;
        if (v12 >= v42)
        {
          v51 = (_DWORD *)v15;
          v50 = v21;
          v49 = v22;
          v54 = v12;
        }
        else
        {
          v45 = v12 - 2;
          v46 = 10 * v12;
          v47 = v12 - v42;
          v48 = v12;
          v49 = v22;
          v50 = v21;
          v51 = (_DWORD *)v15;
          do
          {
            v52 = (255 * ((*v51 >> (v46 - 30 * (v48 / 3))) & 0x3FF) - 15872) / 896;
            if (v44)
            {
              v44 = 0;
              *v50++ = v52;
            }
            else
            {
              *v49++ = v52;
              v44 = 1;
            }
            v51 += v45 == 3 * (v48 / 3);
            ++v48;
            v46 += 10;
            ++v45;
          }
          while (!__CFADD__(v47++, 1));
          v54 = 6 * ((v12 + 5) / 6);
        }
        while (v54 < (unint64_t)(6 * ((v65 * (unsigned __int128)0x2AAAAAAAAAAAAAABuLL) >> 64)))
        {
          v55 = (unint64_t)(2454267027 * (255 * ((*v51 >> 10) & 0x3FF) - 15872)) >> 32;
          v56 = (unint64_t)(2454267027 * (255 * ((*v51 >> 20) & 0x3FF) - 15872)) >> 32;
          *v50 = (char)-*(_BYTE *)v51 / -128;
          *v49 = (v55 >> 9) + (v55 < 0);
          v50[1] = (v56 >> 9) + (v56 < 0);
          v57 = v51[1];
          v51 += 2;
          v58 = (int)(255 * (v57 & 0x3FF) - 15872) / 896;
          v59 = (int)(255 * ((v57 >> 10) & 0x3FF) - 15872) / 896;
          v60 = (unint64_t)(2454267027 * (int)(255 * ((v57 >> 20) & 0x3FF) - 15872)) >> 32;
          v49[1] = v58;
          v50[2] = v59;
          v49[2] = (v60 >> 9) + (v60 < 0);
          v50 += 3;
          v49 += 3;
          v54 += 6;
        }
        if (v54 < v29)
        {
          v61 = 10 * v54;
          do
          {
            v62 = (255 * ((*v51 >> (v61 - 30 * (v54 / 3))) & 0x3FF) - 15872) / 896;
            if (v44)
            {
              v44 = 0;
              *v50++ = v62;
            }
            else
            {
              *v49++ = v62;
              v44 = 1;
            }
            v51 += 3 * (v54 / 3) + 2 == v54;
            ++v54;
            v61 += 10;
          }
          while (v54 < v29);
        }
        v15 += 4 * v66;
        v21 += v18;
        v22 += v19;
        ++v41;
      }
      while (v41 != v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_p420ITU2020_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  char v51;
  _BYTE *v52;
  _DWORD *v53;
  char v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  _BYTE *v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  _BYTE *v93;
  char v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  char v135;
  char v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  char v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  char v168;
  char v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  char v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  char v208;
  char v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  _DWORD *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  _DWORD *v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  char v240;
  char v241;
  char v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  char v254;
  char v255;
  char v256;
  _DWORD *v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unsigned int v267;
  uint64_t v268;
  _DWORD *v269;
  unint64_t v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;

  v279 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v267 = v9 % 3;
    v260 = v16 % 3;
    v265 = v12 >> 1;
    v266 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v264 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v263 = v20 >> 2;
    v261 = v11;
    v262 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v274 = v16;
    v278 = 4 * a6[4];
    do
    {
      v272 = v19;
      v273 = v17;
      v25 = 0;
      v268 = v24;
      v269 = v23;
      v26 = v19;
      v27 = v267;
      v28 = v267;
      v270 = v22;
      v271 = v21;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v279 + v27);
        v32 = *((unsigned __int8 *)&v279 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v279 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38267 * ((*v30 >> v31) & 0x3FF) - 2449088;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -6155 * v33 - 21375 * v41;
        v43 = 70388 * v33;
        v44 = 55169 * v41;
        v45 = 55169 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v48) = -1;
        v49 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v49) = -1;
        if (v47 > 33538047)
          v50 = -1;
        else
          v50 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 >= -16384)
          v51 = v48;
        else
          v51 = 0;
        v52 = (_BYTE *)(v26 + v278);
        v52[1] = v51;
        v53 = v23;
        *v52 = -1;
        if (v46 >= -16384)
          v54 = v49;
        else
          v54 = 0;
        if (v47 >= -16384)
          v55 = v50;
        else
          v55 = 0;
        v52[2] = v54;
        v52[3] = v55;
        v56 = 38267 * ((*v53 >> v31) & 0x3FF) - 2449088;
        v57 = v56 + v44;
        v58 = v56 + v42;
        v59 = v56 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v60 = (255 * ((v57 + 0x4000) >> 15) + 511) / 0x3FFu;
        v61 = (255 * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v57 > 33538047)
          LOBYTE(v60) = -1;
        if (v58 > 33538047)
          LOBYTE(v61) = -1;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        v63 = v57 < -16384;
        v64 = (_BYTE *)(v24 + v278);
        if (v63)
          LOBYTE(v60) = 0;
        v64[1] = v60;
        if (v58 >= -16384)
          v65 = v61;
        else
          v65 = 0;
        v64[2] = v65;
        v66 = v31 >> 2;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v64[3] = v67;
        *v64 = -1;
        v29 = (_DWORD *)((char *)v30 + (v66 & 0x3C));
        v23 = (_DWORD *)((char *)v53 + (v66 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v266 != v25);
      if (v266 >= v16)
      {
        v215 = (_BYTE *)(v26 + v278);
        v216 = (_BYTE *)(v24 + v278);
        v70 = v266;
        v217 = v261;
        v218 = v260;
      }
      else
      {
        v68 = 0;
        v258 = v30;
        v259 = v66;
        v275 = (char *)v53 + (v66 & 0x3C);
        v276 = (char *)v30 + (v66 & 0x3C);
        v69 = v278;
        v70 = v266;
        do
        {
          v277 = v69;
          v71 = (_BYTE *)(v26 + v69);
          v72 = v21[v68 / 4];
          v73 = *(_DWORD *)&v276[v68];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v275[v68];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38267 * (v73 & 0x3FF) - 2449088;
          v78 = -6155 * v74 - 21375 * v76;
          v79 = 70388 * v74;
          v80 = 55169 * v76;
          v81 = 55169 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v81 < -16384)
            LOBYTE(v84) = 0;
          v63 = v82 < -16384;
          v87 = 38267 * ((v73 >> 10) & 0x3FF) - 2449088;
          v88 = v87 + v80;
          v71[1] = v84;
          v89 = v78 + v87;
          if (v63)
            LOBYTE(v85) = 0;
          v90 = v87 + v79;
          v63 = v83 < -16384;
          v91 = 255 * ((v87 + v79 + 0x4000) >> 15);
          v71[2] = v85;
          v92 = ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)
              + ((255 * ((v87 + v80 + 0x4000) >> 15)
                              + 511
                              - ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)) >> 1);
          v93 = (_BYTE *)(v24 + v277);
          *v71 = -1;
          if (v63)
            v94 = 0;
          else
            v94 = v86;
          v95 = v91 + 511;
          v96 = v92 >> 9;
          v71[3] = v94;
          v97 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v96) = -1;
          if (v89 > 33538047)
            LOBYTE(v97) = -1;
          v98 = v95 / 0x3FF;
          if (v90 > 33538047)
            LOBYTE(v98) = -1;
          v71[4] = -1;
          if (v88 < -16384)
            LOBYTE(v96) = 0;
          v71[5] = v96;
          if (v89 < -16384)
            LOBYTE(v97) = 0;
          v71[6] = v97;
          v99 = 38267 * (v75 & 0x3FF) - 2449088;
          v100 = v99 + v80;
          v101 = v99 + v80 + 0x4000;
          if (v90 < -16384)
            LOBYTE(v98) = 0;
          v102 = v78 + v99;
          v71[7] = v98;
          v103 = v99 + v79;
          v104 = (255 * (v101 >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v104) = -1;
          v105 = (255 * ((v102 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v102 > 33538047)
            LOBYTE(v105) = -1;
          v106 = (255 * ((v103 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v103 > 33538047)
            LOBYTE(v106) = -1;
          if (v100 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v108 = 38267 * ((v75 >> 10) & 0x3FF) - 2449088;
          v109 = v108 + v80;
          v63 = v102 < -16384;
          v110 = 255 * ((v109 + 0x4000) >> 15);
          v111 = v108 + v78;
          v93[1] = v107;
          if (v63)
            LOBYTE(v105) = 0;
          v63 = v103 < -16384;
          *v93 = -1;
          v112 = v110 + 511;
          v113 = v108 + v79;
          v93[2] = v105;
          v114 = 4198405 * (v110 + 511);
          if (v63)
            v115 = 0;
          else
            v115 = v106;
          v116 = (HIDWORD(v114) + ((v112 - HIDWORD(v114)) >> 1)) >> 9;
          v93[3] = v115;
          v117 = (255 * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v116) = -1;
          if (v111 > 33538047)
            LOBYTE(v117) = -1;
          v118 = (255 * ((v113 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v113 > 33538047)
            LOBYTE(v118) = -1;
          v93[4] = -1;
          if (v109 < -16384)
            LOBYTE(v116) = 0;
          v93[5] = v116;
          if (v111 >= -16384)
            v119 = v117;
          else
            v119 = 0;
          if (v113 >= -16384)
            v120 = v118;
          else
            v120 = 0;
          v93[6] = v119;
          v93[7] = v120;
          v121 = ((v72 >> 20) & 0x3FF) - 512;
          v122 = v21[v68 / 4 + 1];
          v123 = (v122 & 0x3FF) - 512;
          v124 = 38267 * ((v73 >> 20) & 0x3FF) - 2449088;
          v125 = -6155 * v121 - 21375 * v123;
          v126 = 55169 * v123;
          v127 = 70388 * v121;
          v128 = 55169 * v123 + v124;
          v129 = v125 + v124;
          v130 = v124 + v127;
          v131 = (255 * ((v128 + 0x4000) >> 15) + 511) / 0x3FFu;
          v132 = (255 * ((v129 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v128 > 33538047)
            LOBYTE(v131) = -1;
          if (v129 > 33538047)
            LOBYTE(v132) = -1;
          v133 = (255 * ((v130 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v130 > 33538047)
            LOBYTE(v133) = -1;
          v71[8] = -1;
          if (v128 >= -16384)
            v134 = v131;
          else
            v134 = 0;
          v71[9] = v134;
          if (v129 >= -16384)
            v135 = v132;
          else
            v135 = 0;
          if (v130 >= -16384)
            v136 = v133;
          else
            v136 = 0;
          v71[10] = v135;
          v71[11] = v136;
          v137 = *(_DWORD *)&v276[v68 + 4];
          v138 = 38267 * (v137 & 0x3FF) - 2449088;
          v139 = v138 + v126;
          v140 = v138 + v125;
          v141 = v138 + v127;
          v142 = (255 * ((v139 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v139 > 33538047)
            LOBYTE(v142) = -1;
          v143 = (255 * ((v140 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v140 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v141 > 33538047)
            LOBYTE(v144) = -1;
          v71[12] = -1;
          if (v139 >= -16384)
            v145 = v142;
          else
            v145 = 0;
          v71[13] = v145;
          v146 = 38267 * ((v75 >> 20) & 0x3FF) - 2449088;
          v147 = v126 + v146;
          if (v140 < -16384)
            LOBYTE(v143) = 0;
          v148 = 255 * ((v126 + v146 + 0x4000) >> 15) + 511;
          v149 = v125 + v146;
          v63 = v141 < -16384;
          v150 = 255 * ((v125 + v146 + 0x4000) >> 15) + 511;
          v151 = v146 + v127;
          v71[14] = v143;
          v152 = 255 * ((v151 + 0x4000) >> 15) + 511;
          if (v63)
            LOBYTE(v144) = 0;
          v153 = v148 / 0x3FF;
          v71[15] = v144;
          v154 = ((4198405 * (unint64_t)v150) >> 32)
               + ((v150 - ((4198405 * (unint64_t)v150) >> 32)) >> 1);
          if (v147 > 33538047)
            LOBYTE(v153) = -1;
          v155 = v154 >> 9;
          v156 = (4198405 * (unint64_t)v152) >> 32;
          v157 = v152 - v156;
          if (v149 > 33538047)
            LOBYTE(v155) = -1;
          v158 = (v156 + (v157 >> 1)) >> 9;
          if (v151 > 33538047)
            LOBYTE(v158) = -1;
          v93[8] = -1;
          if (v147 >= -16384)
            v159 = v153;
          else
            v159 = 0;
          v93[9] = v159;
          if (v149 < -16384)
            LOBYTE(v155) = 0;
          v93[10] = v155;
          if (v151 >= -16384)
            v160 = v158;
          else
            v160 = 0;
          v93[11] = v160;
          v161 = *(_DWORD *)&v275[v68 + 4];
          v162 = 38267 * (v161 & 0x3FF) - 2449088;
          v163 = v162 + v126;
          v164 = v162 + v125;
          v165 = v162 + v127;
          v166 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v163 > 33538047)
            LOBYTE(v166) = -1;
          v167 = (255 * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v164 > 33538047)
            v168 = -1;
          else
            v168 = (255 * ((v164 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOBYTE(v167) = -1;
          v93[12] = -1;
          if (v163 >= -16384)
            v169 = v166;
          else
            v169 = 0;
          v63 = v164 < -16384;
          v170 = ((v122 >> 10) & 0x3FF) - 512;
          v171 = ((v122 >> 20) & 0x3FF) - 512;
          v93[13] = v169;
          v172 = 38267 * ((v137 >> 10) & 0x3FF) - 2449088;
          v173 = -21375 * v171 - 6155 * v170;
          v174 = 70388 * v170;
          v175 = 55169 * v171;
          if (v63)
            v176 = 0;
          else
            v176 = v168;
          v177 = v172 + v175;
          v63 = v165 < -16384;
          v178 = 255 * ((v172 + v175 + 0x4000) >> 15) + 511;
          v179 = v172 + v173;
          v93[14] = v176;
          v180 = 255 * ((v172 + v173 + 0x4000) >> 15) + 511;
          v181 = v172 + v174;
          v182 = v172 + v174 + 0x4000;
          if (v63)
            LOBYTE(v167) = 0;
          v183 = 255 * (v182 >> 15) + 511;
          v93[15] = v167;
          v184 = v178 / 0x3FF;
          if (v177 > 33538047)
            LOBYTE(v184) = -1;
          v185 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOBYTE(v185) = -1;
          v186 = v183 / 0x3FF;
          if (v181 > 33538047)
            LOBYTE(v186) = -1;
          v63 = v177 < -16384;
          v187 = 38267 * ((v137 >> 20) & 0x3FF) - 2449088;
          v188 = v187 + v175;
          if (v63)
            LOBYTE(v184) = 0;
          v63 = v179 < -16384;
          v189 = v187 + v173;
          v190 = 255 * ((v187 + v173 + 0x4000) >> 15);
          v71[17] = v184;
          v191 = v187 + v174;
          if (v63)
            LOBYTE(v185) = 0;
          v71[18] = v185;
          if (v181 < -16384)
            LOBYTE(v186) = 0;
          v71[19] = v186;
          v192 = (255 * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v188 > 33538047)
            LOBYTE(v192) = -1;
          v193 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOBYTE(v193) = -1;
          v194 = (255 * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOBYTE(v194) = -1;
          if (v188 < -16384)
            LOBYTE(v192) = 0;
          v71[21] = v192;
          v63 = v189 < -16384;
          v16 = v274;
          if (v63)
            v195 = 0;
          else
            v195 = v193;
          v71[22] = v195;
          if (v191 < -16384)
            LOBYTE(v194) = 0;
          v196 = 38267 * ((v161 >> 10) & 0x3FF) - 2449088;
          v197 = v196 + v175;
          v71[23] = v194;
          v198 = v196 + v173;
          v71[16] = -1;
          v199 = 255 * ((v196 + v173 + 0x4000) >> 15) + 511;
          v200 = v196 + v174;
          v71[20] = -1;
          v201 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v203) = -1;
          v63 = v197 < -16384;
          v204 = 38267 * ((v161 >> 20) & 0x3FF) - 2449088;
          v205 = v204 + v175;
          if (v63)
            LOBYTE(v201) = 0;
          v206 = v204 + v173;
          v93[17] = v201;
          v207 = v204 + v174;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v93[18] = v208;
          if (v200 >= -16384)
            v209 = v203;
          else
            v209 = 0;
          v93[19] = v209;
          v210 = (255 * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOBYTE(v211) = -1;
          v212 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v212) = -1;
          if (v205 < -16384)
            LOBYTE(v210) = 0;
          v93[21] = v210;
          if (v206 < -16384)
            LOBYTE(v211) = 0;
          v93[22] = v211;
          if (v207 >= -16384)
            v213 = v212;
          else
            v213 = 0;
          v93[23] = v213;
          v93[16] = -1;
          v93[20] = -1;
          v70 += 6;
          v68 += 8;
          v69 = v277 + 24;
        }
        while (v70 < v274);
        v214 = v259 & 0x3C;
        v29 = (_DWORD *)((char *)v258 + v214 + v68);
        v23 = (_DWORD *)((char *)v53 + v214 + v68);
        v21 = (_DWORD *)((char *)v21 + v68);
        v215 = (_BYTE *)(v26 + v69);
        v216 = (_BYTE *)(v24 + v69);
        v217 = v261;
        v218 = v260;
      }
      if (v70 < v217)
      {
        do
        {
          v219 = *((unsigned __int8 *)&v279 + v218);
          v220 = (v219 >> 2) & 0x3C;
          v221 = *((unsigned __int8 *)&v279 + v28);
          v222 = ((*v21 >> v221) & 0x3FF) - 512;
          v223 = (_DWORD *)((char *)v21 + ((v221 >> 2) & 0x3C));
          if (v28 == 2)
            v224 = 0;
          else
            v224 = v28 + 1;
          v225 = *((unsigned __int8 *)&v279 + v224);
          v226 = (*v223 >> v225) & 0x3FF;
          v227 = (_DWORD *)((char *)v223 + ((v225 >> 2) & 0x3C));
          v228 = v226 - 512;
          if (v224 == 2)
            v229 = 0;
          else
            v229 = v224 + 1;
          if ((v70 & 1) != 0)
            v28 = v229;
          v230 = 38267 * ((*v29 >> v219) & 0x3FF) - 2449088;
          if ((v70 & 1) != 0)
            v21 = v227;
          v231 = -6155 * v222 - 21375 * v228;
          v232 = 70388 * v222;
          v233 = 55169 * v228;
          v234 = v233 + v230;
          v235 = v231 + v230;
          v236 = v232 + v230;
          v237 = (255 * ((v234 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v234 > 33538047)
            LOBYTE(v237) = -1;
          v238 = (255 * ((v235 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v235 > 33538047)
            LOBYTE(v238) = -1;
          v239 = (255 * ((v236 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v236 > 33538047)
            LOBYTE(v239) = -1;
          *v215 = -1;
          if (v234 >= -16384)
            v240 = v237;
          else
            v240 = 0;
          v215[1] = v240;
          if (v235 >= -16384)
            v241 = v238;
          else
            v241 = 0;
          v215[2] = v241;
          if (v236 >= -16384)
            v242 = v239;
          else
            v242 = 0;
          v215[3] = v242;
          v29 = (_DWORD *)((char *)v29 + v220);
          v243 = (*v23 >> v219) & 0x3FF;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          v23 = (_DWORD *)((char *)v23 + v220);
          v244 = 38267 * v243 - 2449088;
          v245 = v244 + v233;
          v246 = v244 + v231;
          v247 = v244 + v232;
          v248 = 255 * ((v247 + 0x4000) >> 15) + 511;
          v249 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v245 > 33538047)
            LOBYTE(v249) = -1;
          v250 = (255 * ((v246 + 0x4000) >> 15) + 511) / 0x3FFu;
          v251 = (4198405 * (unint64_t)v248) >> 32;
          v252 = v248 - v251;
          if (v246 > 33538047)
            LOBYTE(v250) = -1;
          v253 = (v251 + (v252 >> 1)) >> 9;
          if (v247 > 33538047)
            LOBYTE(v253) = -1;
          *v216 = -1;
          if (v245 >= -16384)
            v254 = v249;
          else
            v254 = 0;
          v216[1] = v254;
          if (v246 >= -16384)
            v255 = v250;
          else
            v255 = 0;
          v216[2] = v255;
          if (v247 >= -16384)
            v256 = v253;
          else
            v256 = 0;
          v216[3] = v256;
          v216 += 4;
          ++v70;
          v215 += 4;
        }
        while (v217 != v70);
      }
      v22 = v270 + 4 * v264;
      v23 = &v269[v264];
      v17 = v273 + 1;
      v19 = v272 + v262;
      v24 = v268 + v262;
      v21 = &v271[v263];
    }
    while (v273 + 1 != v265);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU709_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  char v51;
  _BYTE *v52;
  _DWORD *v53;
  char v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  _BYTE *v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  _BYTE *v93;
  char v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  char v135;
  char v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  char v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  char v168;
  char v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  char v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  char v208;
  char v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  _DWORD *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  _DWORD *v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  char v240;
  char v241;
  char v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  char v254;
  char v255;
  char v256;
  _DWORD *v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unsigned int v267;
  uint64_t v268;
  _DWORD *v269;
  unint64_t v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;

  v279 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v267 = v9 % 3;
    v260 = v16 % 3;
    v265 = v12 >> 1;
    v266 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v264 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v263 = v20 >> 2;
    v261 = v11;
    v262 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v274 = v16;
    v278 = 4 * a6[4];
    do
    {
      v272 = v19;
      v273 = v17;
      v25 = 0;
      v268 = v24;
      v269 = v23;
      v26 = v19;
      v27 = v267;
      v28 = v267;
      v270 = v22;
      v271 = v21;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v279 + v27);
        v32 = *((unsigned __int8 *)&v279 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v279 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38155 * ((*v30 >> v31) & 0x3FF) - 2441920;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -6987 * v33 - 17461 * v41;
        v43 = 69219 * v33;
        v44 = 58745 * v41;
        v45 = 58745 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v48) = -1;
        v49 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v49) = -1;
        if (v47 > 33538047)
          v50 = -1;
        else
          v50 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 >= -16384)
          v51 = v48;
        else
          v51 = 0;
        v52 = (_BYTE *)(v26 + v278);
        v52[1] = v51;
        v53 = v23;
        *v52 = -1;
        if (v46 >= -16384)
          v54 = v49;
        else
          v54 = 0;
        if (v47 >= -16384)
          v55 = v50;
        else
          v55 = 0;
        v52[2] = v54;
        v52[3] = v55;
        v56 = 38155 * ((*v53 >> v31) & 0x3FF) - 2441920;
        v57 = v56 + v44;
        v58 = v56 + v42;
        v59 = v56 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v60 = (255 * ((v57 + 0x4000) >> 15) + 511) / 0x3FFu;
        v61 = (255 * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v57 > 33538047)
          LOBYTE(v60) = -1;
        if (v58 > 33538047)
          LOBYTE(v61) = -1;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        v63 = v57 < -16384;
        v64 = (_BYTE *)(v24 + v278);
        if (v63)
          LOBYTE(v60) = 0;
        v64[1] = v60;
        if (v58 >= -16384)
          v65 = v61;
        else
          v65 = 0;
        v64[2] = v65;
        v66 = v31 >> 2;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v64[3] = v67;
        *v64 = -1;
        v29 = (_DWORD *)((char *)v30 + (v66 & 0x3C));
        v23 = (_DWORD *)((char *)v53 + (v66 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v266 != v25);
      if (v266 >= v16)
      {
        v215 = (_BYTE *)(v26 + v278);
        v216 = (_BYTE *)(v24 + v278);
        v70 = v266;
        v217 = v261;
        v218 = v260;
      }
      else
      {
        v68 = 0;
        v258 = v30;
        v259 = v66;
        v275 = (char *)v53 + (v66 & 0x3C);
        v276 = (char *)v30 + (v66 & 0x3C);
        v69 = v278;
        v70 = v266;
        do
        {
          v277 = v69;
          v71 = (_BYTE *)(v26 + v69);
          v72 = v21[v68 / 4];
          v73 = *(_DWORD *)&v276[v68];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v275[v68];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38155 * (v73 & 0x3FF) - 2441920;
          v78 = -6987 * v74 - 17461 * v76;
          v79 = 69219 * v74;
          v80 = 58745 * v76;
          v81 = 58745 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v81 < -16384)
            LOBYTE(v84) = 0;
          v63 = v82 < -16384;
          v87 = 38155 * ((v73 >> 10) & 0x3FF) - 2441920;
          v88 = v87 + v80;
          v71[1] = v84;
          v89 = v78 + v87;
          if (v63)
            LOBYTE(v85) = 0;
          v90 = v87 + v79;
          v63 = v83 < -16384;
          v91 = 255 * ((v87 + v79 + 0x4000) >> 15);
          v71[2] = v85;
          v92 = ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)
              + ((255 * ((v87 + v80 + 0x4000) >> 15)
                              + 511
                              - ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)) >> 1);
          v93 = (_BYTE *)(v24 + v277);
          *v71 = -1;
          if (v63)
            v94 = 0;
          else
            v94 = v86;
          v95 = v91 + 511;
          v96 = v92 >> 9;
          v71[3] = v94;
          v97 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v96) = -1;
          if (v89 > 33538047)
            LOBYTE(v97) = -1;
          v98 = v95 / 0x3FF;
          if (v90 > 33538047)
            LOBYTE(v98) = -1;
          v71[4] = -1;
          if (v88 < -16384)
            LOBYTE(v96) = 0;
          v71[5] = v96;
          if (v89 < -16384)
            LOBYTE(v97) = 0;
          v71[6] = v97;
          v99 = 38155 * (v75 & 0x3FF) - 2441920;
          v100 = v99 + v80;
          v101 = v99 + v80 + 0x4000;
          if (v90 < -16384)
            LOBYTE(v98) = 0;
          v102 = v78 + v99;
          v71[7] = v98;
          v103 = v99 + v79;
          v104 = (255 * (v101 >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v104) = -1;
          v105 = (255 * ((v102 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v102 > 33538047)
            LOBYTE(v105) = -1;
          v106 = (255 * ((v103 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v103 > 33538047)
            LOBYTE(v106) = -1;
          if (v100 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v108 = 38155 * ((v75 >> 10) & 0x3FF) - 2441920;
          v109 = v108 + v80;
          v63 = v102 < -16384;
          v110 = 255 * ((v109 + 0x4000) >> 15);
          v111 = v108 + v78;
          v93[1] = v107;
          if (v63)
            LOBYTE(v105) = 0;
          v63 = v103 < -16384;
          *v93 = -1;
          v112 = v110 + 511;
          v113 = v108 + v79;
          v93[2] = v105;
          v114 = 4198405 * (v110 + 511);
          if (v63)
            v115 = 0;
          else
            v115 = v106;
          v116 = (HIDWORD(v114) + ((v112 - HIDWORD(v114)) >> 1)) >> 9;
          v93[3] = v115;
          v117 = (255 * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v116) = -1;
          if (v111 > 33538047)
            LOBYTE(v117) = -1;
          v118 = (255 * ((v113 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v113 > 33538047)
            LOBYTE(v118) = -1;
          v93[4] = -1;
          if (v109 < -16384)
            LOBYTE(v116) = 0;
          v93[5] = v116;
          if (v111 >= -16384)
            v119 = v117;
          else
            v119 = 0;
          if (v113 >= -16384)
            v120 = v118;
          else
            v120 = 0;
          v93[6] = v119;
          v93[7] = v120;
          v121 = ((v72 >> 20) & 0x3FF) - 512;
          v122 = v21[v68 / 4 + 1];
          v123 = (v122 & 0x3FF) - 512;
          v124 = 38155 * ((v73 >> 20) & 0x3FF) - 2441920;
          v125 = -6987 * v121 - 17461 * v123;
          v126 = 58745 * v123;
          v127 = 69219 * v121;
          v128 = 58745 * v123 + v124;
          v129 = v125 + v124;
          v130 = v124 + v127;
          v131 = (255 * ((v128 + 0x4000) >> 15) + 511) / 0x3FFu;
          v132 = (255 * ((v129 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v128 > 33538047)
            LOBYTE(v131) = -1;
          if (v129 > 33538047)
            LOBYTE(v132) = -1;
          v133 = (255 * ((v130 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v130 > 33538047)
            LOBYTE(v133) = -1;
          v71[8] = -1;
          if (v128 >= -16384)
            v134 = v131;
          else
            v134 = 0;
          v71[9] = v134;
          if (v129 >= -16384)
            v135 = v132;
          else
            v135 = 0;
          if (v130 >= -16384)
            v136 = v133;
          else
            v136 = 0;
          v71[10] = v135;
          v71[11] = v136;
          v137 = *(_DWORD *)&v276[v68 + 4];
          v138 = 38155 * (v137 & 0x3FF) - 2441920;
          v139 = v138 + v126;
          v140 = v138 + v125;
          v141 = v138 + v127;
          v142 = (255 * ((v139 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v139 > 33538047)
            LOBYTE(v142) = -1;
          v143 = (255 * ((v140 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v140 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v141 > 33538047)
            LOBYTE(v144) = -1;
          v71[12] = -1;
          if (v139 >= -16384)
            v145 = v142;
          else
            v145 = 0;
          v71[13] = v145;
          v146 = 38155 * ((v75 >> 20) & 0x3FF) - 2441920;
          v147 = v126 + v146;
          if (v140 < -16384)
            LOBYTE(v143) = 0;
          v148 = 255 * ((v126 + v146 + 0x4000) >> 15) + 511;
          v149 = v125 + v146;
          v63 = v141 < -16384;
          v150 = 255 * ((v125 + v146 + 0x4000) >> 15) + 511;
          v151 = v146 + v127;
          v71[14] = v143;
          v152 = 255 * ((v151 + 0x4000) >> 15) + 511;
          if (v63)
            LOBYTE(v144) = 0;
          v153 = v148 / 0x3FF;
          v71[15] = v144;
          v154 = ((4198405 * (unint64_t)v150) >> 32)
               + ((v150 - ((4198405 * (unint64_t)v150) >> 32)) >> 1);
          if (v147 > 33538047)
            LOBYTE(v153) = -1;
          v155 = v154 >> 9;
          v156 = (4198405 * (unint64_t)v152) >> 32;
          v157 = v152 - v156;
          if (v149 > 33538047)
            LOBYTE(v155) = -1;
          v158 = (v156 + (v157 >> 1)) >> 9;
          if (v151 > 33538047)
            LOBYTE(v158) = -1;
          v93[8] = -1;
          if (v147 >= -16384)
            v159 = v153;
          else
            v159 = 0;
          v93[9] = v159;
          if (v149 < -16384)
            LOBYTE(v155) = 0;
          v93[10] = v155;
          if (v151 >= -16384)
            v160 = v158;
          else
            v160 = 0;
          v93[11] = v160;
          v161 = *(_DWORD *)&v275[v68 + 4];
          v162 = 38155 * (v161 & 0x3FF) - 2441920;
          v163 = v162 + v126;
          v164 = v162 + v125;
          v165 = v162 + v127;
          v166 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v163 > 33538047)
            LOBYTE(v166) = -1;
          v167 = (255 * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v164 > 33538047)
            v168 = -1;
          else
            v168 = (255 * ((v164 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOBYTE(v167) = -1;
          v93[12] = -1;
          if (v163 >= -16384)
            v169 = v166;
          else
            v169 = 0;
          v63 = v164 < -16384;
          v170 = ((v122 >> 10) & 0x3FF) - 512;
          v171 = ((v122 >> 20) & 0x3FF) - 512;
          v93[13] = v169;
          v172 = 38155 * ((v137 >> 10) & 0x3FF) - 2441920;
          v173 = -17461 * v171 - 6987 * v170;
          v174 = 69219 * v170;
          v175 = 58745 * v171;
          if (v63)
            v176 = 0;
          else
            v176 = v168;
          v177 = v172 + v175;
          v63 = v165 < -16384;
          v178 = 255 * ((v172 + v175 + 0x4000) >> 15) + 511;
          v179 = v172 + v173;
          v93[14] = v176;
          v180 = 255 * ((v172 + v173 + 0x4000) >> 15) + 511;
          v181 = v172 + v174;
          v182 = v172 + v174 + 0x4000;
          if (v63)
            LOBYTE(v167) = 0;
          v183 = 255 * (v182 >> 15) + 511;
          v93[15] = v167;
          v184 = v178 / 0x3FF;
          if (v177 > 33538047)
            LOBYTE(v184) = -1;
          v185 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOBYTE(v185) = -1;
          v186 = v183 / 0x3FF;
          if (v181 > 33538047)
            LOBYTE(v186) = -1;
          v63 = v177 < -16384;
          v187 = 38155 * ((v137 >> 20) & 0x3FF) - 2441920;
          v188 = v187 + v175;
          if (v63)
            LOBYTE(v184) = 0;
          v63 = v179 < -16384;
          v189 = v187 + v173;
          v190 = 255 * ((v187 + v173 + 0x4000) >> 15);
          v71[17] = v184;
          v191 = v187 + v174;
          if (v63)
            LOBYTE(v185) = 0;
          v71[18] = v185;
          if (v181 < -16384)
            LOBYTE(v186) = 0;
          v71[19] = v186;
          v192 = (255 * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v188 > 33538047)
            LOBYTE(v192) = -1;
          v193 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOBYTE(v193) = -1;
          v194 = (255 * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOBYTE(v194) = -1;
          if (v188 < -16384)
            LOBYTE(v192) = 0;
          v71[21] = v192;
          v63 = v189 < -16384;
          v16 = v274;
          if (v63)
            v195 = 0;
          else
            v195 = v193;
          v71[22] = v195;
          if (v191 < -16384)
            LOBYTE(v194) = 0;
          v196 = 38155 * ((v161 >> 10) & 0x3FF) - 2441920;
          v197 = v196 + v175;
          v71[23] = v194;
          v198 = v196 + v173;
          v71[16] = -1;
          v199 = 255 * ((v196 + v173 + 0x4000) >> 15) + 511;
          v200 = v196 + v174;
          v71[20] = -1;
          v201 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v203) = -1;
          v63 = v197 < -16384;
          v204 = 38155 * ((v161 >> 20) & 0x3FF) - 2441920;
          v205 = v204 + v175;
          if (v63)
            LOBYTE(v201) = 0;
          v206 = v204 + v173;
          v93[17] = v201;
          v207 = v204 + v174;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v93[18] = v208;
          if (v200 >= -16384)
            v209 = v203;
          else
            v209 = 0;
          v93[19] = v209;
          v210 = (255 * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOBYTE(v211) = -1;
          v212 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v212) = -1;
          if (v205 < -16384)
            LOBYTE(v210) = 0;
          v93[21] = v210;
          if (v206 < -16384)
            LOBYTE(v211) = 0;
          v93[22] = v211;
          if (v207 >= -16384)
            v213 = v212;
          else
            v213 = 0;
          v93[23] = v213;
          v93[16] = -1;
          v93[20] = -1;
          v70 += 6;
          v68 += 8;
          v69 = v277 + 24;
        }
        while (v70 < v274);
        v214 = v259 & 0x3C;
        v29 = (_DWORD *)((char *)v258 + v214 + v68);
        v23 = (_DWORD *)((char *)v53 + v214 + v68);
        v21 = (_DWORD *)((char *)v21 + v68);
        v215 = (_BYTE *)(v26 + v69);
        v216 = (_BYTE *)(v24 + v69);
        v217 = v261;
        v218 = v260;
      }
      if (v70 < v217)
      {
        do
        {
          v219 = *((unsigned __int8 *)&v279 + v218);
          v220 = (v219 >> 2) & 0x3C;
          v221 = *((unsigned __int8 *)&v279 + v28);
          v222 = ((*v21 >> v221) & 0x3FF) - 512;
          v223 = (_DWORD *)((char *)v21 + ((v221 >> 2) & 0x3C));
          if (v28 == 2)
            v224 = 0;
          else
            v224 = v28 + 1;
          v225 = *((unsigned __int8 *)&v279 + v224);
          v226 = (*v223 >> v225) & 0x3FF;
          v227 = (_DWORD *)((char *)v223 + ((v225 >> 2) & 0x3C));
          v228 = v226 - 512;
          if (v224 == 2)
            v229 = 0;
          else
            v229 = v224 + 1;
          if ((v70 & 1) != 0)
            v28 = v229;
          v230 = 38155 * ((*v29 >> v219) & 0x3FF) - 2441920;
          if ((v70 & 1) != 0)
            v21 = v227;
          v231 = -6987 * v222 - 17461 * v228;
          v232 = 69219 * v222;
          v233 = 58745 * v228;
          v234 = v233 + v230;
          v235 = v231 + v230;
          v236 = v232 + v230;
          v237 = (255 * ((v234 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v234 > 33538047)
            LOBYTE(v237) = -1;
          v238 = (255 * ((v235 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v235 > 33538047)
            LOBYTE(v238) = -1;
          v239 = (255 * ((v236 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v236 > 33538047)
            LOBYTE(v239) = -1;
          *v215 = -1;
          if (v234 >= -16384)
            v240 = v237;
          else
            v240 = 0;
          v215[1] = v240;
          if (v235 >= -16384)
            v241 = v238;
          else
            v241 = 0;
          v215[2] = v241;
          if (v236 >= -16384)
            v242 = v239;
          else
            v242 = 0;
          v215[3] = v242;
          v29 = (_DWORD *)((char *)v29 + v220);
          v243 = (*v23 >> v219) & 0x3FF;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          v23 = (_DWORD *)((char *)v23 + v220);
          v244 = 38155 * v243 - 2441920;
          v245 = v244 + v233;
          v246 = v244 + v231;
          v247 = v244 + v232;
          v248 = 255 * ((v247 + 0x4000) >> 15) + 511;
          v249 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v245 > 33538047)
            LOBYTE(v249) = -1;
          v250 = (255 * ((v246 + 0x4000) >> 15) + 511) / 0x3FFu;
          v251 = (4198405 * (unint64_t)v248) >> 32;
          v252 = v248 - v251;
          if (v246 > 33538047)
            LOBYTE(v250) = -1;
          v253 = (v251 + (v252 >> 1)) >> 9;
          if (v247 > 33538047)
            LOBYTE(v253) = -1;
          *v216 = -1;
          if (v245 >= -16384)
            v254 = v249;
          else
            v254 = 0;
          v216[1] = v254;
          if (v246 >= -16384)
            v255 = v250;
          else
            v255 = 0;
          v216[2] = v255;
          if (v247 >= -16384)
            v256 = v253;
          else
            v256 = 0;
          v216[3] = v256;
          v216 += 4;
          ++v70;
          v215 += 4;
        }
        while (v217 != v70);
      }
      v22 = v270 + 4 * v264;
      v23 = &v269[v264];
      v17 = v273 + 1;
      v19 = v272 + v262;
      v24 = v268 + v262;
      v21 = &v271[v263];
    }
    while (v273 + 1 != v265);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU601_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  char v51;
  _BYTE *v52;
  _DWORD *v53;
  char v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  _BYTE *v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  _BYTE *v93;
  char v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  char v135;
  char v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  char v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  char v168;
  char v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  char v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  char v208;
  char v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  _DWORD *v223;
  unsigned int v224;
  unint64_t v225;
  int v226;
  _DWORD *v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  char v240;
  char v241;
  char v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unint64_t v251;
  unsigned int v252;
  unsigned int v253;
  char v254;
  char v255;
  char v256;
  _DWORD *v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unsigned int v267;
  uint64_t v268;
  _DWORD *v269;
  unint64_t v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;

  v279 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v267 = v9 % 3;
    v260 = v16 % 3;
    v265 = v12 >> 1;
    v266 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v264 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v263 = v20 >> 2;
    v261 = v11;
    v262 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v274 = v16;
    v278 = 4 * a6[4];
    do
    {
      v272 = v19;
      v273 = v17;
      v25 = 0;
      v268 = v24;
      v269 = v23;
      v26 = v19;
      v27 = v267;
      v28 = v267;
      v270 = v22;
      v271 = v21;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v279 + v27);
        v32 = *((unsigned __int8 *)&v279 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v279 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38155 * ((*v30 >> v31) & 0x3FF) - 2441920;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -12836 * v33 - 26638 * v41;
        v43 = 66101 * v33;
        v44 = 52299 * v41;
        v45 = 52299 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v48) = -1;
        v49 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v49) = -1;
        if (v47 > 33538047)
          v50 = -1;
        else
          v50 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 >= -16384)
          v51 = v48;
        else
          v51 = 0;
        v52 = (_BYTE *)(v26 + v278);
        v52[1] = v51;
        v53 = v23;
        *v52 = -1;
        if (v46 >= -16384)
          v54 = v49;
        else
          v54 = 0;
        if (v47 >= -16384)
          v55 = v50;
        else
          v55 = 0;
        v52[2] = v54;
        v52[3] = v55;
        v56 = 38155 * ((*v53 >> v31) & 0x3FF) - 2441920;
        v57 = v56 + v44;
        v58 = v56 + v42;
        v59 = v56 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v60 = (255 * ((v57 + 0x4000) >> 15) + 511) / 0x3FFu;
        v61 = (255 * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v57 > 33538047)
          LOBYTE(v60) = -1;
        if (v58 > 33538047)
          LOBYTE(v61) = -1;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        v63 = v57 < -16384;
        v64 = (_BYTE *)(v24 + v278);
        if (v63)
          LOBYTE(v60) = 0;
        v64[1] = v60;
        if (v58 >= -16384)
          v65 = v61;
        else
          v65 = 0;
        v64[2] = v65;
        v66 = v31 >> 2;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v64[3] = v67;
        *v64 = -1;
        v29 = (_DWORD *)((char *)v30 + (v66 & 0x3C));
        v23 = (_DWORD *)((char *)v53 + (v66 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v266 != v25);
      if (v266 >= v16)
      {
        v215 = (_BYTE *)(v26 + v278);
        v216 = (_BYTE *)(v24 + v278);
        v70 = v266;
        v217 = v261;
        v218 = v260;
      }
      else
      {
        v68 = 0;
        v258 = v30;
        v259 = v66;
        v275 = (char *)v53 + (v66 & 0x3C);
        v276 = (char *)v30 + (v66 & 0x3C);
        v69 = v278;
        v70 = v266;
        do
        {
          v277 = v69;
          v71 = (_BYTE *)(v26 + v69);
          v72 = v21[v68 / 4];
          v73 = *(_DWORD *)&v276[v68];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v275[v68];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38155 * (v73 & 0x3FF) - 2441920;
          v78 = -12836 * v74 - 26638 * v76;
          v79 = 66101 * v74;
          v80 = 52299 * v76;
          v81 = 52299 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v81 < -16384)
            LOBYTE(v84) = 0;
          v63 = v82 < -16384;
          v87 = 38155 * ((v73 >> 10) & 0x3FF) - 2441920;
          v88 = v87 + v80;
          v71[1] = v84;
          v89 = v78 + v87;
          if (v63)
            LOBYTE(v85) = 0;
          v90 = v87 + v79;
          v63 = v83 < -16384;
          v91 = 255 * ((v87 + v79 + 0x4000) >> 15);
          v71[2] = v85;
          v92 = ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)
              + ((255 * ((v87 + v80 + 0x4000) >> 15)
                              + 511
                              - ((4198405 * (unint64_t)(255 * ((v87 + v80 + 0x4000) >> 15) + 511)) >> 32)) >> 1);
          v93 = (_BYTE *)(v24 + v277);
          *v71 = -1;
          if (v63)
            v94 = 0;
          else
            v94 = v86;
          v95 = v91 + 511;
          v96 = v92 >> 9;
          v71[3] = v94;
          v97 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v96) = -1;
          if (v89 > 33538047)
            LOBYTE(v97) = -1;
          v98 = v95 / 0x3FF;
          if (v90 > 33538047)
            LOBYTE(v98) = -1;
          v71[4] = -1;
          if (v88 < -16384)
            LOBYTE(v96) = 0;
          v71[5] = v96;
          if (v89 < -16384)
            LOBYTE(v97) = 0;
          v71[6] = v97;
          v99 = 38155 * (v75 & 0x3FF) - 2441920;
          v100 = v99 + v80;
          v101 = v99 + v80 + 0x4000;
          if (v90 < -16384)
            LOBYTE(v98) = 0;
          v102 = v78 + v99;
          v71[7] = v98;
          v103 = v99 + v79;
          v104 = (255 * (v101 >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v104) = -1;
          v105 = (255 * ((v102 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v102 > 33538047)
            LOBYTE(v105) = -1;
          v106 = (255 * ((v103 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v103 > 33538047)
            LOBYTE(v106) = -1;
          if (v100 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v108 = 38155 * ((v75 >> 10) & 0x3FF) - 2441920;
          v109 = v108 + v80;
          v63 = v102 < -16384;
          v110 = 255 * ((v109 + 0x4000) >> 15);
          v111 = v108 + v78;
          v93[1] = v107;
          if (v63)
            LOBYTE(v105) = 0;
          v63 = v103 < -16384;
          *v93 = -1;
          v112 = v110 + 511;
          v113 = v108 + v79;
          v93[2] = v105;
          v114 = 4198405 * (v110 + 511);
          if (v63)
            v115 = 0;
          else
            v115 = v106;
          v116 = (HIDWORD(v114) + ((v112 - HIDWORD(v114)) >> 1)) >> 9;
          v93[3] = v115;
          v117 = (255 * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v116) = -1;
          if (v111 > 33538047)
            LOBYTE(v117) = -1;
          v118 = (255 * ((v113 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v113 > 33538047)
            LOBYTE(v118) = -1;
          v93[4] = -1;
          if (v109 < -16384)
            LOBYTE(v116) = 0;
          v93[5] = v116;
          if (v111 >= -16384)
            v119 = v117;
          else
            v119 = 0;
          if (v113 >= -16384)
            v120 = v118;
          else
            v120 = 0;
          v93[6] = v119;
          v93[7] = v120;
          v121 = ((v72 >> 20) & 0x3FF) - 512;
          v122 = v21[v68 / 4 + 1];
          v123 = (v122 & 0x3FF) - 512;
          v124 = 38155 * ((v73 >> 20) & 0x3FF) - 2441920;
          v125 = -12836 * v121 - 26638 * v123;
          v126 = 52299 * v123;
          v127 = 66101 * v121;
          v128 = 52299 * v123 + v124;
          v129 = v125 + v124;
          v130 = v124 + v127;
          v131 = (255 * ((v128 + 0x4000) >> 15) + 511) / 0x3FFu;
          v132 = (255 * ((v129 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v128 > 33538047)
            LOBYTE(v131) = -1;
          if (v129 > 33538047)
            LOBYTE(v132) = -1;
          v133 = (255 * ((v130 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v130 > 33538047)
            LOBYTE(v133) = -1;
          v71[8] = -1;
          if (v128 >= -16384)
            v134 = v131;
          else
            v134 = 0;
          v71[9] = v134;
          if (v129 >= -16384)
            v135 = v132;
          else
            v135 = 0;
          if (v130 >= -16384)
            v136 = v133;
          else
            v136 = 0;
          v71[10] = v135;
          v71[11] = v136;
          v137 = *(_DWORD *)&v276[v68 + 4];
          v138 = 38155 * (v137 & 0x3FF) - 2441920;
          v139 = v138 + v126;
          v140 = v138 + v125;
          v141 = v138 + v127;
          v142 = (255 * ((v139 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v139 > 33538047)
            LOBYTE(v142) = -1;
          v143 = (255 * ((v140 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v140 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v141 > 33538047)
            LOBYTE(v144) = -1;
          v71[12] = -1;
          if (v139 >= -16384)
            v145 = v142;
          else
            v145 = 0;
          v71[13] = v145;
          v146 = 38155 * ((v75 >> 20) & 0x3FF) - 2441920;
          v147 = v126 + v146;
          if (v140 < -16384)
            LOBYTE(v143) = 0;
          v148 = 255 * ((v126 + v146 + 0x4000) >> 15) + 511;
          v149 = v125 + v146;
          v63 = v141 < -16384;
          v150 = 255 * ((v125 + v146 + 0x4000) >> 15) + 511;
          v151 = v146 + v127;
          v71[14] = v143;
          v152 = 255 * ((v151 + 0x4000) >> 15) + 511;
          if (v63)
            LOBYTE(v144) = 0;
          v153 = v148 / 0x3FF;
          v71[15] = v144;
          v154 = ((4198405 * (unint64_t)v150) >> 32)
               + ((v150 - ((4198405 * (unint64_t)v150) >> 32)) >> 1);
          if (v147 > 33538047)
            LOBYTE(v153) = -1;
          v155 = v154 >> 9;
          v156 = (4198405 * (unint64_t)v152) >> 32;
          v157 = v152 - v156;
          if (v149 > 33538047)
            LOBYTE(v155) = -1;
          v158 = (v156 + (v157 >> 1)) >> 9;
          if (v151 > 33538047)
            LOBYTE(v158) = -1;
          v93[8] = -1;
          if (v147 >= -16384)
            v159 = v153;
          else
            v159 = 0;
          v93[9] = v159;
          if (v149 < -16384)
            LOBYTE(v155) = 0;
          v93[10] = v155;
          if (v151 >= -16384)
            v160 = v158;
          else
            v160 = 0;
          v93[11] = v160;
          v161 = *(_DWORD *)&v275[v68 + 4];
          v162 = 38155 * (v161 & 0x3FF) - 2441920;
          v163 = v162 + v126;
          v164 = v162 + v125;
          v165 = v162 + v127;
          v166 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v163 > 33538047)
            LOBYTE(v166) = -1;
          v167 = (255 * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v164 > 33538047)
            v168 = -1;
          else
            v168 = (255 * ((v164 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOBYTE(v167) = -1;
          v93[12] = -1;
          if (v163 >= -16384)
            v169 = v166;
          else
            v169 = 0;
          v63 = v164 < -16384;
          v170 = ((v122 >> 10) & 0x3FF) - 512;
          v171 = ((v122 >> 20) & 0x3FF) - 512;
          v93[13] = v169;
          v172 = 38155 * ((v137 >> 10) & 0x3FF) - 2441920;
          v173 = -26638 * v171 - 12836 * v170;
          v174 = 66101 * v170;
          v175 = 52299 * v171;
          if (v63)
            v176 = 0;
          else
            v176 = v168;
          v177 = v172 + v175;
          v63 = v165 < -16384;
          v178 = 255 * ((v172 + v175 + 0x4000) >> 15) + 511;
          v179 = v172 + v173;
          v93[14] = v176;
          v180 = 255 * ((v172 + v173 + 0x4000) >> 15) + 511;
          v181 = v172 + v174;
          v182 = v172 + v174 + 0x4000;
          if (v63)
            LOBYTE(v167) = 0;
          v183 = 255 * (v182 >> 15) + 511;
          v93[15] = v167;
          v184 = v178 / 0x3FF;
          if (v177 > 33538047)
            LOBYTE(v184) = -1;
          v185 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOBYTE(v185) = -1;
          v186 = v183 / 0x3FF;
          if (v181 > 33538047)
            LOBYTE(v186) = -1;
          v63 = v177 < -16384;
          v187 = 38155 * ((v137 >> 20) & 0x3FF) - 2441920;
          v188 = v187 + v175;
          if (v63)
            LOBYTE(v184) = 0;
          v63 = v179 < -16384;
          v189 = v187 + v173;
          v190 = 255 * ((v187 + v173 + 0x4000) >> 15);
          v71[17] = v184;
          v191 = v187 + v174;
          if (v63)
            LOBYTE(v185) = 0;
          v71[18] = v185;
          if (v181 < -16384)
            LOBYTE(v186) = 0;
          v71[19] = v186;
          v192 = (255 * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v188 > 33538047)
            LOBYTE(v192) = -1;
          v193 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOBYTE(v193) = -1;
          v194 = (255 * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOBYTE(v194) = -1;
          if (v188 < -16384)
            LOBYTE(v192) = 0;
          v71[21] = v192;
          v63 = v189 < -16384;
          v16 = v274;
          if (v63)
            v195 = 0;
          else
            v195 = v193;
          v71[22] = v195;
          if (v191 < -16384)
            LOBYTE(v194) = 0;
          v196 = 38155 * ((v161 >> 10) & 0x3FF) - 2441920;
          v197 = v196 + v175;
          v71[23] = v194;
          v198 = v196 + v173;
          v71[16] = -1;
          v199 = 255 * ((v196 + v173 + 0x4000) >> 15) + 511;
          v200 = v196 + v174;
          v71[20] = -1;
          v201 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v203) = -1;
          v63 = v197 < -16384;
          v204 = 38155 * ((v161 >> 20) & 0x3FF) - 2441920;
          v205 = v204 + v175;
          if (v63)
            LOBYTE(v201) = 0;
          v206 = v204 + v173;
          v93[17] = v201;
          v207 = v204 + v174;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v93[18] = v208;
          if (v200 >= -16384)
            v209 = v203;
          else
            v209 = 0;
          v93[19] = v209;
          v210 = (255 * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOBYTE(v211) = -1;
          v212 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v212) = -1;
          if (v205 < -16384)
            LOBYTE(v210) = 0;
          v93[21] = v210;
          if (v206 < -16384)
            LOBYTE(v211) = 0;
          v93[22] = v211;
          if (v207 >= -16384)
            v213 = v212;
          else
            v213 = 0;
          v93[23] = v213;
          v93[16] = -1;
          v93[20] = -1;
          v70 += 6;
          v68 += 8;
          v69 = v277 + 24;
        }
        while (v70 < v274);
        v214 = v259 & 0x3C;
        v29 = (_DWORD *)((char *)v258 + v214 + v68);
        v23 = (_DWORD *)((char *)v53 + v214 + v68);
        v21 = (_DWORD *)((char *)v21 + v68);
        v215 = (_BYTE *)(v26 + v69);
        v216 = (_BYTE *)(v24 + v69);
        v217 = v261;
        v218 = v260;
      }
      if (v70 < v217)
      {
        do
        {
          v219 = *((unsigned __int8 *)&v279 + v218);
          v220 = (v219 >> 2) & 0x3C;
          v221 = *((unsigned __int8 *)&v279 + v28);
          v222 = ((*v21 >> v221) & 0x3FF) - 512;
          v223 = (_DWORD *)((char *)v21 + ((v221 >> 2) & 0x3C));
          if (v28 == 2)
            v224 = 0;
          else
            v224 = v28 + 1;
          v225 = *((unsigned __int8 *)&v279 + v224);
          v226 = (*v223 >> v225) & 0x3FF;
          v227 = (_DWORD *)((char *)v223 + ((v225 >> 2) & 0x3C));
          v228 = v226 - 512;
          if (v224 == 2)
            v229 = 0;
          else
            v229 = v224 + 1;
          if ((v70 & 1) != 0)
            v28 = v229;
          v230 = 38155 * ((*v29 >> v219) & 0x3FF) - 2441920;
          if ((v70 & 1) != 0)
            v21 = v227;
          v231 = -12836 * v222 - 26638 * v228;
          v232 = 66101 * v222;
          v233 = 52299 * v228;
          v234 = v233 + v230;
          v235 = v231 + v230;
          v236 = v232 + v230;
          v237 = (255 * ((v234 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v234 > 33538047)
            LOBYTE(v237) = -1;
          v238 = (255 * ((v235 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v235 > 33538047)
            LOBYTE(v238) = -1;
          v239 = (255 * ((v236 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v236 > 33538047)
            LOBYTE(v239) = -1;
          *v215 = -1;
          if (v234 >= -16384)
            v240 = v237;
          else
            v240 = 0;
          v215[1] = v240;
          if (v235 >= -16384)
            v241 = v238;
          else
            v241 = 0;
          v215[2] = v241;
          if (v236 >= -16384)
            v242 = v239;
          else
            v242 = 0;
          v215[3] = v242;
          v29 = (_DWORD *)((char *)v29 + v220);
          v243 = (*v23 >> v219) & 0x3FF;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          v23 = (_DWORD *)((char *)v23 + v220);
          v244 = 38155 * v243 - 2441920;
          v245 = v244 + v233;
          v246 = v244 + v231;
          v247 = v244 + v232;
          v248 = 255 * ((v247 + 0x4000) >> 15) + 511;
          v249 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v245 > 33538047)
            LOBYTE(v249) = -1;
          v250 = (255 * ((v246 + 0x4000) >> 15) + 511) / 0x3FFu;
          v251 = (4198405 * (unint64_t)v248) >> 32;
          v252 = v248 - v251;
          if (v246 > 33538047)
            LOBYTE(v250) = -1;
          v253 = (v251 + (v252 >> 1)) >> 9;
          if (v247 > 33538047)
            LOBYTE(v253) = -1;
          *v216 = -1;
          if (v245 >= -16384)
            v254 = v249;
          else
            v254 = 0;
          v216[1] = v254;
          if (v246 >= -16384)
            v255 = v250;
          else
            v255 = 0;
          v216[2] = v255;
          if (v247 >= -16384)
            v256 = v253;
          else
            v256 = 0;
          v216[3] = v256;
          v216 += 4;
          ++v70;
          v215 += 4;
        }
        while (v217 != v70);
      }
      v22 = v270 + 4 * v264;
      v23 = &v269[v264];
      v17 = v273 + 1;
      v19 = v272 + v262;
      v24 = v268 + v262;
      v21 = &v271[v263];
    }
    while (v273 + 1 != v265);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU2020_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  BOOL v53;
  _BYTE *v54;
  _DWORD *v55;
  char v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  char v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  unsigned int v94;
  char v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  char v111;
  unsigned int v112;
  char v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  char v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  char v160;
  char v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  char v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  char v185;
  char v186;
  char v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  char v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  char v198;
  int v199;
  int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  char v206;
  char v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  _DWORD *v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  _DWORD *v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  char v233;
  char v234;
  char v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  char v247;
  char v248;
  char v249;
  unint64_t v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  unint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;

  v271 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v259 = v9 % 3;
    v253 = v16 % 3;
    v257 = v12 >> 1;
    v258 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v256 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v255 = v20 >> 2;
    v254 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v251 = v11;
    v266 = v16;
    v269 = 4 * a6[4];
    do
    {
      v260 = v17;
      v261 = v24;
      v25 = 0;
      v264 = v21;
      v265 = v19;
      v26 = v19;
      v27 = v259;
      v28 = v259;
      v262 = v23;
      v263 = v22;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v271 + v27);
        v32 = *((unsigned __int8 *)&v271 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v271 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38267 * ((*v30 >> v31) & 0x3FF) - 2449088;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -6155 * v33 - 21375 * v41;
        v43 = 70388 * v33;
        v44 = 55169 * v41;
        v45 = 55169 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = v269;
        v49 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v49) = -1;
        v50 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v50) = -1;
        v51 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v47 > 33538047)
          LOBYTE(v51) = -1;
        if (v47 >= -16384)
          v52 = v51;
        else
          v52 = 0;
        v53 = v46 < -16384;
        v54 = (_BYTE *)(v26 + v269);
        *(_BYTE *)(v26 + v269) = v52;
        v55 = v23;
        if (v53)
          v56 = 0;
        else
          v56 = v50;
        v54[1] = v56;
        if (v45 >= -16384)
          v57 = v49;
        else
          v57 = 0;
        v54[2] = v57;
        v54[3] = -1;
        v58 = 38267 * ((*v55 >> v31) & 0x3FF) - 2449088;
        v59 = v58 + v44;
        v60 = v58 + v42;
        v61 = v58 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        v63 = (255 * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        if (v60 > 33538047)
          LOBYTE(v63) = -1;
        v64 = (255 * ((v61 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v61 > 33538047)
          LOBYTE(v64) = -1;
        v53 = v61 < -16384;
        v65 = (_BYTE *)(v24 + v269);
        if (v53)
          LOBYTE(v64) = 0;
        *v65 = v64;
        if (v60 >= -16384)
          v66 = v63;
        else
          v66 = 0;
        v65[1] = v66;
        v67 = v31 >> 2;
        if (v59 >= -16384)
          v68 = v62;
        else
          v68 = 0;
        v65[2] = v68;
        v65[3] = -1;
        v29 = (_DWORD *)((char *)v30 + (v67 & 0x3C));
        v23 = (_DWORD *)((char *)v55 + (v67 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v258 != v25);
      if (v258 >= v16)
      {
        v209 = (_BYTE *)(v26 + v269);
        v210 = (_BYTE *)(v24 + v269);
        v70 = v258;
        v211 = v253;
      }
      else
      {
        v69 = 0;
        v252 = v67;
        v267 = (char *)v55 + (v67 & 0x3C);
        v268 = (char *)v30 + (v67 & 0x3C);
        v70 = v258;
        do
        {
          v270 = v48;
          v71 = (_BYTE *)(v26 + v48);
          v72 = v21[v69 / 4];
          v73 = *(_DWORD *)&v268[v69];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v267[v69];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38267 * (v73 & 0x3FF) - 2449088;
          v78 = -6155 * v74 - 21375 * v76;
          v79 = 70388 * v74;
          v80 = 55169 * v76;
          v81 = 55169 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v83 >= -16384)
            v87 = v86;
          else
            v87 = 0;
          v53 = v82 < -16384;
          v88 = 38267 * ((v73 >> 10) & 0x3FF) - 2449088;
          v89 = v88 + v80;
          *v71 = v87;
          v90 = 255 * ((v88 + v80 + 0x4000) >> 15);
          v91 = v78 + v88;
          if (v53)
            LOBYTE(v85) = 0;
          v92 = v88 + v79;
          v53 = v81 < -16384;
          v71[1] = v85;
          v93 = (_BYTE *)(v24 + v270);
          if (v53)
            LOBYTE(v84) = 0;
          v71[3] = -1;
          v71[2] = v84;
          v94 = (255 * ((v91 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v89 > 33538047)
            v95 = -1;
          else
            v95 = (v90 + 511) / 0x3FFu;
          if (v91 > 33538047)
            LOBYTE(v94) = -1;
          v96 = (255 * ((v92 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v92 > 33538047)
            LOBYTE(v96) = -1;
          if (v92 < -16384)
            LOBYTE(v96) = 0;
          v71[4] = v96;
          if (v91 < -16384)
            LOBYTE(v94) = 0;
          v71[7] = -1;
          v71[5] = v94;
          v97 = 38267 * (v75 & 0x3FF) - 2449088;
          v98 = v97 + v80;
          v99 = v97 + v80 + 0x4000;
          if (v89 < -16384)
            v95 = 0;
          v100 = v78 + v97;
          v71[6] = v95;
          v101 = v97 + v79;
          v102 = (255 * (v99 >> 15) + 511) / 0x3FFu;
          if (v98 > 33538047)
            LOBYTE(v102) = -1;
          v103 = (255 * ((v100 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v103) = -1;
          v104 = (255 * ((v101 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v101 > 33538047)
            LOBYTE(v104) = -1;
          if (v101 >= -16384)
            v105 = v104;
          else
            v105 = 0;
          v106 = 38267 * ((v75 >> 10) & 0x3FF) - 2449088;
          v107 = v106 + v80;
          v108 = v106 + v78;
          *v93 = v105;
          if (v100 < -16384)
            LOBYTE(v103) = 0;
          v93[3] = -1;
          v109 = v106 + v79;
          v93[1] = v103;
          if (v98 < -16384)
            LOBYTE(v102) = 0;
          v93[2] = v102;
          v110 = (255 * ((v108 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v107 > 33538047)
            v111 = -1;
          else
            v111 = (255 * ((v106 + v80 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v108 > 33538047)
            LOBYTE(v110) = -1;
          v112 = (255 * ((v109 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v112) = -1;
          if (v109 < -16384)
            LOBYTE(v112) = 0;
          v93[4] = v112;
          if (v108 < -16384)
            LOBYTE(v110) = 0;
          v93[5] = v110;
          if (v107 >= -16384)
            v113 = v111;
          else
            v113 = 0;
          v93[6] = v113;
          v93[7] = -1;
          v114 = ((v72 >> 20) & 0x3FF) - 512;
          v115 = v21[v69 / 4 + 1];
          v116 = (v115 & 0x3FF) - 512;
          v117 = 38267 * ((v73 >> 20) & 0x3FF) - 2449088;
          v118 = -6155 * v114 - 21375 * v116;
          v119 = 55169 * v116;
          v120 = 70388 * v114;
          v121 = 55169 * v116 + v117;
          v122 = v118 + v117;
          v123 = v117 + v120;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v123 >= -16384)
            v127 = v126;
          else
            v127 = 0;
          v71[8] = v127;
          if (v122 >= -16384)
            v128 = v125;
          else
            v128 = 0;
          v71[9] = v128;
          if (v121 >= -16384)
            v129 = v124;
          else
            v129 = 0;
          v71[10] = v129;
          v71[11] = -1;
          v130 = *(_DWORD *)&v268[v69 + 4];
          v131 = 38267 * (v130 & 0x3FF) - 2449088;
          v132 = v131 + v119;
          v133 = v131 + v118;
          v134 = v131 + v120;
          v135 = (255 * ((v132 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v132 > 33538047)
            LOBYTE(v135) = -1;
          v136 = (255 * ((v133 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v133 > 33538047)
            LOBYTE(v136) = -1;
          v137 = (255 * ((v134 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v134 > 33538047)
            LOBYTE(v137) = -1;
          if (v134 >= -16384)
            v138 = v137;
          else
            v138 = 0;
          v71[15] = -1;
          v71[12] = v138;
          v139 = 38267 * ((v75 >> 20) & 0x3FF) - 2449088;
          v140 = v119 + v139;
          if (v133 < -16384)
            LOBYTE(v136) = 0;
          v141 = 255 * ((v119 + v139 + 0x4000) >> 15) + 511;
          v142 = v118 + v139;
          v53 = v132 < -16384;
          v143 = 255 * ((v118 + v139 + 0x4000) >> 15) + 511;
          v144 = v139 + v120;
          v71[13] = v136;
          v145 = 255 * ((v144 + 0x4000) >> 15) + 511;
          if (v53)
            LOBYTE(v135) = 0;
          v146 = v141 / 0x3FF;
          v71[14] = v135;
          if (v140 > 33538047)
            LOBYTE(v146) = -1;
          v147 = v143 / 0x3FF;
          v148 = (4198405 * (unint64_t)v145) >> 32;
          v149 = v145 - v148;
          if (v142 > 33538047)
            LOBYTE(v147) = -1;
          v150 = (v148 + (v149 >> 1)) >> 9;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v93[8] = v151;
          if (v142 >= -16384)
            v152 = v147;
          else
            v152 = 0;
          if (v140 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v93[9] = v152;
          v93[10] = v153;
          v93[11] = -1;
          v154 = *(_DWORD *)&v267[v69 + 4];
          v155 = 38267 * (v154 & 0x3FF) - 2449088;
          v156 = v155 + v119;
          v157 = v155 + v118;
          v158 = v155 + v120;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          if (v157 > 33538047)
            v160 = -1;
          else
            v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 > 33538047)
            v161 = -1;
          else
            v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v93[15] = -1;
          v53 = v157 < -16384;
          v163 = ((v115 >> 10) & 0x3FF) - 512;
          v164 = ((v115 >> 20) & 0x3FF) - 512;
          v93[12] = v162;
          v165 = 38267 * ((v130 >> 10) & 0x3FF) - 2449088;
          v166 = -21375 * v164 - 6155 * v163;
          v167 = 70388 * v163;
          v168 = 55169 * v164;
          if (v53)
            v160 = 0;
          v169 = v165 + v168;
          v53 = v156 < -16384;
          v170 = 255 * ((v165 + v168 + 0x4000) >> 15) + 511;
          v171 = v165 + v166;
          v93[13] = v160;
          v172 = 255 * ((v165 + v166 + 0x4000) >> 15) + 511;
          v173 = v165 + v167;
          if (v53)
            LOBYTE(v159) = 0;
          v93[14] = v159;
          if (v169 > 33538047)
            v174 = -1;
          else
            v174 = v170 / 0x3FF;
          v175 = v172 / 0x3FF;
          if (v171 > 33538047)
            LOBYTE(v175) = -1;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v53 = v173 < -16384;
          v177 = 38267 * ((v130 >> 20) & 0x3FF) - 2449088;
          v178 = v177 + v168;
          if (v53)
            LOBYTE(v176) = 0;
          v53 = v171 < -16384;
          v179 = v177 + v166;
          v180 = 255 * ((v177 + v166 + 0x4000) >> 15);
          v71[16] = v176;
          v181 = v177 + v167;
          if (v53)
            LOBYTE(v175) = 0;
          v71[17] = v175;
          if (v169 < -16384)
            v174 = 0;
          v71[18] = v174;
          v182 = (255 * ((v178 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v178 > 33538047)
            LOBYTE(v182) = -1;
          v183 = (v180 + 511) / 0x3FFu;
          if (v179 > 33538047)
            LOBYTE(v183) = -1;
          v184 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            LOBYTE(v184) = -1;
          if (v181 >= -16384)
            v185 = v184;
          else
            v185 = 0;
          v71[20] = v185;
          if (v179 >= -16384)
            v186 = v183;
          else
            v186 = 0;
          v71[21] = v186;
          if (v178 >= -16384)
            v187 = v182;
          else
            v187 = 0;
          v188 = 38267 * ((v154 >> 10) & 0x3FF) - 2449088;
          v189 = v188 + v168;
          v71[22] = v187;
          v190 = v188 + v166;
          v71[19] = -1;
          v191 = 255 * ((v188 + v166 + 0x4000) >> 15) + 511;
          v192 = v188 + v167;
          v71[23] = -1;
          if (v189 > 33538047)
            v193 = -1;
          else
            v193 = (255 * ((v189 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v266;
          v194 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOBYTE(v194) = -1;
          v195 = (255 * ((v192 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v192 > 33538047)
            LOBYTE(v195) = -1;
          v53 = v192 < -16384;
          v196 = 38267 * ((v154 >> 20) & 0x3FF) - 2449088;
          v197 = v196 + v168;
          if (v53)
            v198 = 0;
          else
            v198 = v195;
          v199 = v196 + v166;
          v93[16] = v198;
          v200 = v196 + v167;
          if (v190 < -16384)
            LOBYTE(v194) = 0;
          v93[17] = v194;
          if (v189 >= -16384)
            v201 = v193;
          else
            v201 = 0;
          v93[18] = v201;
          v202 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v204) = -1;
          if (v200 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v93[20] = v205;
          if (v199 >= -16384)
            v206 = v203;
          else
            v206 = 0;
          v93[21] = v206;
          if (v197 >= -16384)
            v207 = v202;
          else
            v207 = 0;
          v93[22] = v207;
          v93[19] = -1;
          v93[23] = -1;
          v70 += 6;
          v69 += 8;
          v48 = v270 + 24;
        }
        while (v70 < v266);
        v208 = v252 & 0x3C;
        v11 = v251;
        v29 = (_DWORD *)((char *)v30 + v208 + v69);
        v23 = (_DWORD *)((char *)v55 + v208 + v69);
        v21 = (_DWORD *)((char *)v21 + v69);
        v209 = (_BYTE *)(v26 + v48);
        v210 = (_BYTE *)(v24 + v48);
        v17 = v260;
        v211 = v253;
      }
      if (v70 < v11)
      {
        do
        {
          v212 = *((unsigned __int8 *)&v271 + v211);
          v213 = (v212 >> 2) & 0x3C;
          v214 = *((unsigned __int8 *)&v271 + v28);
          v215 = ((*v21 >> v214) & 0x3FF) - 512;
          v216 = (_DWORD *)((char *)v21 + ((v214 >> 2) & 0x3C));
          if (v28 == 2)
            v217 = 0;
          else
            v217 = v28 + 1;
          v218 = *((unsigned __int8 *)&v271 + v217);
          v219 = (*v216 >> v218) & 0x3FF;
          v220 = (_DWORD *)((char *)v216 + ((v218 >> 2) & 0x3C));
          v221 = v219 - 512;
          if (v217 == 2)
            v222 = 0;
          else
            v222 = v217 + 1;
          if ((v70 & 1) != 0)
            v28 = v222;
          v223 = 38267 * ((*v29 >> v212) & 0x3FF) - 2449088;
          if ((v70 & 1) != 0)
            v21 = v220;
          v224 = -6155 * v215 - 21375 * v221;
          v225 = 70388 * v215;
          v226 = 55169 * v221;
          v227 = v226 + v223;
          v228 = v224 + v223;
          v229 = v225 + v223;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          v232 = (255 * ((v229 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v229 > 33538047)
            LOBYTE(v232) = -1;
          if (v229 >= -16384)
            v233 = v232;
          else
            v233 = 0;
          *v209 = v233;
          if (v228 >= -16384)
            v234 = v231;
          else
            v234 = 0;
          v209[1] = v234;
          if (v227 >= -16384)
            v235 = v230;
          else
            v235 = 0;
          v209[2] = v235;
          v209[3] = -1;
          v29 = (_DWORD *)((char *)v29 + v213);
          v236 = (*v23 >> v212) & 0x3FF;
          if (v211 == 2)
            v211 = 0;
          else
            ++v211;
          v23 = (_DWORD *)((char *)v23 + v213);
          v237 = 38267 * v236 - 2449088;
          v238 = v237 + v226;
          v239 = v237 + v224;
          v240 = v237 + v225;
          v241 = 255 * ((v240 + 0x4000) >> 15) + 511;
          v242 = (255 * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOBYTE(v242) = -1;
          v243 = (255 * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v244 = (4198405 * (unint64_t)v241) >> 32;
          v245 = v241 - v244;
          if (v239 > 33538047)
            LOBYTE(v243) = -1;
          v246 = (v244 + (v245 >> 1)) >> 9;
          if (v240 > 33538047)
            LOBYTE(v246) = -1;
          if (v240 >= -16384)
            v247 = v246;
          else
            v247 = 0;
          *v210 = v247;
          if (v239 >= -16384)
            v248 = v243;
          else
            v248 = 0;
          v210[1] = v248;
          if (v238 >= -16384)
            v249 = v242;
          else
            v249 = 0;
          v210[2] = v249;
          v210[3] = -1;
          v210 += 4;
          ++v70;
          v209 += 4;
        }
        while (v11 != v70);
      }
      v22 = v263 + 4 * v256;
      v23 = &v262[v256];
      ++v17;
      v19 = v265 + v254;
      v24 = v261 + v254;
      v21 = &v264[v255];
    }
    while (v17 != v257);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU709_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  BOOL v53;
  _BYTE *v54;
  _DWORD *v55;
  char v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  char v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  unsigned int v94;
  char v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  char v111;
  unsigned int v112;
  char v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  char v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  char v160;
  char v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  char v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  char v185;
  char v186;
  char v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  char v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  char v198;
  int v199;
  int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  char v206;
  char v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  _DWORD *v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  _DWORD *v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  char v233;
  char v234;
  char v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  char v247;
  char v248;
  char v249;
  unint64_t v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  unint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;

  v271 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v259 = v9 % 3;
    v253 = v16 % 3;
    v257 = v12 >> 1;
    v258 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v256 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v255 = v20 >> 2;
    v254 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v251 = v11;
    v266 = v16;
    v269 = 4 * a6[4];
    do
    {
      v260 = v17;
      v261 = v24;
      v25 = 0;
      v264 = v21;
      v265 = v19;
      v26 = v19;
      v27 = v259;
      v28 = v259;
      v262 = v23;
      v263 = v22;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v271 + v27);
        v32 = *((unsigned __int8 *)&v271 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v271 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38155 * ((*v30 >> v31) & 0x3FF) - 2441920;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -6987 * v33 - 17461 * v41;
        v43 = 69219 * v33;
        v44 = 58745 * v41;
        v45 = 58745 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = v269;
        v49 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v49) = -1;
        v50 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v50) = -1;
        v51 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v47 > 33538047)
          LOBYTE(v51) = -1;
        if (v47 >= -16384)
          v52 = v51;
        else
          v52 = 0;
        v53 = v46 < -16384;
        v54 = (_BYTE *)(v26 + v269);
        *(_BYTE *)(v26 + v269) = v52;
        v55 = v23;
        if (v53)
          v56 = 0;
        else
          v56 = v50;
        v54[1] = v56;
        if (v45 >= -16384)
          v57 = v49;
        else
          v57 = 0;
        v54[2] = v57;
        v54[3] = -1;
        v58 = 38155 * ((*v55 >> v31) & 0x3FF) - 2441920;
        v59 = v58 + v44;
        v60 = v58 + v42;
        v61 = v58 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        v63 = (255 * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        if (v60 > 33538047)
          LOBYTE(v63) = -1;
        v64 = (255 * ((v61 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v61 > 33538047)
          LOBYTE(v64) = -1;
        v53 = v61 < -16384;
        v65 = (_BYTE *)(v24 + v269);
        if (v53)
          LOBYTE(v64) = 0;
        *v65 = v64;
        if (v60 >= -16384)
          v66 = v63;
        else
          v66 = 0;
        v65[1] = v66;
        v67 = v31 >> 2;
        if (v59 >= -16384)
          v68 = v62;
        else
          v68 = 0;
        v65[2] = v68;
        v65[3] = -1;
        v29 = (_DWORD *)((char *)v30 + (v67 & 0x3C));
        v23 = (_DWORD *)((char *)v55 + (v67 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v258 != v25);
      if (v258 >= v16)
      {
        v209 = (_BYTE *)(v26 + v269);
        v210 = (_BYTE *)(v24 + v269);
        v70 = v258;
        v211 = v253;
      }
      else
      {
        v69 = 0;
        v252 = v67;
        v267 = (char *)v55 + (v67 & 0x3C);
        v268 = (char *)v30 + (v67 & 0x3C);
        v70 = v258;
        do
        {
          v270 = v48;
          v71 = (_BYTE *)(v26 + v48);
          v72 = v21[v69 / 4];
          v73 = *(_DWORD *)&v268[v69];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v267[v69];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38155 * (v73 & 0x3FF) - 2441920;
          v78 = -6987 * v74 - 17461 * v76;
          v79 = 69219 * v74;
          v80 = 58745 * v76;
          v81 = 58745 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v83 >= -16384)
            v87 = v86;
          else
            v87 = 0;
          v53 = v82 < -16384;
          v88 = 38155 * ((v73 >> 10) & 0x3FF) - 2441920;
          v89 = v88 + v80;
          *v71 = v87;
          v90 = 255 * ((v88 + v80 + 0x4000) >> 15);
          v91 = v78 + v88;
          if (v53)
            LOBYTE(v85) = 0;
          v92 = v88 + v79;
          v53 = v81 < -16384;
          v71[1] = v85;
          v93 = (_BYTE *)(v24 + v270);
          if (v53)
            LOBYTE(v84) = 0;
          v71[3] = -1;
          v71[2] = v84;
          v94 = (255 * ((v91 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v89 > 33538047)
            v95 = -1;
          else
            v95 = (v90 + 511) / 0x3FFu;
          if (v91 > 33538047)
            LOBYTE(v94) = -1;
          v96 = (255 * ((v92 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v92 > 33538047)
            LOBYTE(v96) = -1;
          if (v92 < -16384)
            LOBYTE(v96) = 0;
          v71[4] = v96;
          if (v91 < -16384)
            LOBYTE(v94) = 0;
          v71[7] = -1;
          v71[5] = v94;
          v97 = 38155 * (v75 & 0x3FF) - 2441920;
          v98 = v97 + v80;
          v99 = v97 + v80 + 0x4000;
          if (v89 < -16384)
            v95 = 0;
          v100 = v78 + v97;
          v71[6] = v95;
          v101 = v97 + v79;
          v102 = (255 * (v99 >> 15) + 511) / 0x3FFu;
          if (v98 > 33538047)
            LOBYTE(v102) = -1;
          v103 = (255 * ((v100 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v103) = -1;
          v104 = (255 * ((v101 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v101 > 33538047)
            LOBYTE(v104) = -1;
          if (v101 >= -16384)
            v105 = v104;
          else
            v105 = 0;
          v106 = 38155 * ((v75 >> 10) & 0x3FF) - 2441920;
          v107 = v106 + v80;
          v108 = v106 + v78;
          *v93 = v105;
          if (v100 < -16384)
            LOBYTE(v103) = 0;
          v93[3] = -1;
          v109 = v106 + v79;
          v93[1] = v103;
          if (v98 < -16384)
            LOBYTE(v102) = 0;
          v93[2] = v102;
          v110 = (255 * ((v108 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v107 > 33538047)
            v111 = -1;
          else
            v111 = (255 * ((v106 + v80 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v108 > 33538047)
            LOBYTE(v110) = -1;
          v112 = (255 * ((v109 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v112) = -1;
          if (v109 < -16384)
            LOBYTE(v112) = 0;
          v93[4] = v112;
          if (v108 < -16384)
            LOBYTE(v110) = 0;
          v93[5] = v110;
          if (v107 >= -16384)
            v113 = v111;
          else
            v113 = 0;
          v93[6] = v113;
          v93[7] = -1;
          v114 = ((v72 >> 20) & 0x3FF) - 512;
          v115 = v21[v69 / 4 + 1];
          v116 = (v115 & 0x3FF) - 512;
          v117 = 38155 * ((v73 >> 20) & 0x3FF) - 2441920;
          v118 = -6987 * v114 - 17461 * v116;
          v119 = 58745 * v116;
          v120 = 69219 * v114;
          v121 = 58745 * v116 + v117;
          v122 = v118 + v117;
          v123 = v117 + v120;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v123 >= -16384)
            v127 = v126;
          else
            v127 = 0;
          v71[8] = v127;
          if (v122 >= -16384)
            v128 = v125;
          else
            v128 = 0;
          v71[9] = v128;
          if (v121 >= -16384)
            v129 = v124;
          else
            v129 = 0;
          v71[10] = v129;
          v71[11] = -1;
          v130 = *(_DWORD *)&v268[v69 + 4];
          v131 = 38155 * (v130 & 0x3FF) - 2441920;
          v132 = v131 + v119;
          v133 = v131 + v118;
          v134 = v131 + v120;
          v135 = (255 * ((v132 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v132 > 33538047)
            LOBYTE(v135) = -1;
          v136 = (255 * ((v133 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v133 > 33538047)
            LOBYTE(v136) = -1;
          v137 = (255 * ((v134 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v134 > 33538047)
            LOBYTE(v137) = -1;
          if (v134 >= -16384)
            v138 = v137;
          else
            v138 = 0;
          v71[15] = -1;
          v71[12] = v138;
          v139 = 38155 * ((v75 >> 20) & 0x3FF) - 2441920;
          v140 = v119 + v139;
          if (v133 < -16384)
            LOBYTE(v136) = 0;
          v141 = 255 * ((v119 + v139 + 0x4000) >> 15) + 511;
          v142 = v118 + v139;
          v53 = v132 < -16384;
          v143 = 255 * ((v118 + v139 + 0x4000) >> 15) + 511;
          v144 = v139 + v120;
          v71[13] = v136;
          v145 = 255 * ((v144 + 0x4000) >> 15) + 511;
          if (v53)
            LOBYTE(v135) = 0;
          v146 = v141 / 0x3FF;
          v71[14] = v135;
          if (v140 > 33538047)
            LOBYTE(v146) = -1;
          v147 = v143 / 0x3FF;
          v148 = (4198405 * (unint64_t)v145) >> 32;
          v149 = v145 - v148;
          if (v142 > 33538047)
            LOBYTE(v147) = -1;
          v150 = (v148 + (v149 >> 1)) >> 9;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v93[8] = v151;
          if (v142 >= -16384)
            v152 = v147;
          else
            v152 = 0;
          if (v140 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v93[9] = v152;
          v93[10] = v153;
          v93[11] = -1;
          v154 = *(_DWORD *)&v267[v69 + 4];
          v155 = 38155 * (v154 & 0x3FF) - 2441920;
          v156 = v155 + v119;
          v157 = v155 + v118;
          v158 = v155 + v120;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          if (v157 > 33538047)
            v160 = -1;
          else
            v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 > 33538047)
            v161 = -1;
          else
            v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v93[15] = -1;
          v53 = v157 < -16384;
          v163 = ((v115 >> 10) & 0x3FF) - 512;
          v164 = ((v115 >> 20) & 0x3FF) - 512;
          v93[12] = v162;
          v165 = 38155 * ((v130 >> 10) & 0x3FF) - 2441920;
          v166 = -17461 * v164 - 6987 * v163;
          v167 = 69219 * v163;
          v168 = 58745 * v164;
          if (v53)
            v160 = 0;
          v169 = v165 + v168;
          v53 = v156 < -16384;
          v170 = 255 * ((v165 + v168 + 0x4000) >> 15) + 511;
          v171 = v165 + v166;
          v93[13] = v160;
          v172 = 255 * ((v165 + v166 + 0x4000) >> 15) + 511;
          v173 = v165 + v167;
          if (v53)
            LOBYTE(v159) = 0;
          v93[14] = v159;
          if (v169 > 33538047)
            v174 = -1;
          else
            v174 = v170 / 0x3FF;
          v175 = v172 / 0x3FF;
          if (v171 > 33538047)
            LOBYTE(v175) = -1;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v53 = v173 < -16384;
          v177 = 38155 * ((v130 >> 20) & 0x3FF) - 2441920;
          v178 = v177 + v168;
          if (v53)
            LOBYTE(v176) = 0;
          v53 = v171 < -16384;
          v179 = v177 + v166;
          v180 = 255 * ((v177 + v166 + 0x4000) >> 15);
          v71[16] = v176;
          v181 = v177 + v167;
          if (v53)
            LOBYTE(v175) = 0;
          v71[17] = v175;
          if (v169 < -16384)
            v174 = 0;
          v71[18] = v174;
          v182 = (255 * ((v178 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v178 > 33538047)
            LOBYTE(v182) = -1;
          v183 = (v180 + 511) / 0x3FFu;
          if (v179 > 33538047)
            LOBYTE(v183) = -1;
          v184 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            LOBYTE(v184) = -1;
          if (v181 >= -16384)
            v185 = v184;
          else
            v185 = 0;
          v71[20] = v185;
          if (v179 >= -16384)
            v186 = v183;
          else
            v186 = 0;
          v71[21] = v186;
          if (v178 >= -16384)
            v187 = v182;
          else
            v187 = 0;
          v188 = 38155 * ((v154 >> 10) & 0x3FF) - 2441920;
          v189 = v188 + v168;
          v71[22] = v187;
          v190 = v188 + v166;
          v71[19] = -1;
          v191 = 255 * ((v188 + v166 + 0x4000) >> 15) + 511;
          v192 = v188 + v167;
          v71[23] = -1;
          if (v189 > 33538047)
            v193 = -1;
          else
            v193 = (255 * ((v189 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v266;
          v194 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOBYTE(v194) = -1;
          v195 = (255 * ((v192 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v192 > 33538047)
            LOBYTE(v195) = -1;
          v53 = v192 < -16384;
          v196 = 38155 * ((v154 >> 20) & 0x3FF) - 2441920;
          v197 = v196 + v168;
          if (v53)
            v198 = 0;
          else
            v198 = v195;
          v199 = v196 + v166;
          v93[16] = v198;
          v200 = v196 + v167;
          if (v190 < -16384)
            LOBYTE(v194) = 0;
          v93[17] = v194;
          if (v189 >= -16384)
            v201 = v193;
          else
            v201 = 0;
          v93[18] = v201;
          v202 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v204) = -1;
          if (v200 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v93[20] = v205;
          if (v199 >= -16384)
            v206 = v203;
          else
            v206 = 0;
          v93[21] = v206;
          if (v197 >= -16384)
            v207 = v202;
          else
            v207 = 0;
          v93[22] = v207;
          v93[19] = -1;
          v93[23] = -1;
          v70 += 6;
          v69 += 8;
          v48 = v270 + 24;
        }
        while (v70 < v266);
        v208 = v252 & 0x3C;
        v11 = v251;
        v29 = (_DWORD *)((char *)v30 + v208 + v69);
        v23 = (_DWORD *)((char *)v55 + v208 + v69);
        v21 = (_DWORD *)((char *)v21 + v69);
        v209 = (_BYTE *)(v26 + v48);
        v210 = (_BYTE *)(v24 + v48);
        v17 = v260;
        v211 = v253;
      }
      if (v70 < v11)
      {
        do
        {
          v212 = *((unsigned __int8 *)&v271 + v211);
          v213 = (v212 >> 2) & 0x3C;
          v214 = *((unsigned __int8 *)&v271 + v28);
          v215 = ((*v21 >> v214) & 0x3FF) - 512;
          v216 = (_DWORD *)((char *)v21 + ((v214 >> 2) & 0x3C));
          if (v28 == 2)
            v217 = 0;
          else
            v217 = v28 + 1;
          v218 = *((unsigned __int8 *)&v271 + v217);
          v219 = (*v216 >> v218) & 0x3FF;
          v220 = (_DWORD *)((char *)v216 + ((v218 >> 2) & 0x3C));
          v221 = v219 - 512;
          if (v217 == 2)
            v222 = 0;
          else
            v222 = v217 + 1;
          if ((v70 & 1) != 0)
            v28 = v222;
          v223 = 38155 * ((*v29 >> v212) & 0x3FF) - 2441920;
          if ((v70 & 1) != 0)
            v21 = v220;
          v224 = -6987 * v215 - 17461 * v221;
          v225 = 69219 * v215;
          v226 = 58745 * v221;
          v227 = v226 + v223;
          v228 = v224 + v223;
          v229 = v225 + v223;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          v232 = (255 * ((v229 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v229 > 33538047)
            LOBYTE(v232) = -1;
          if (v229 >= -16384)
            v233 = v232;
          else
            v233 = 0;
          *v209 = v233;
          if (v228 >= -16384)
            v234 = v231;
          else
            v234 = 0;
          v209[1] = v234;
          if (v227 >= -16384)
            v235 = v230;
          else
            v235 = 0;
          v209[2] = v235;
          v209[3] = -1;
          v29 = (_DWORD *)((char *)v29 + v213);
          v236 = (*v23 >> v212) & 0x3FF;
          if (v211 == 2)
            v211 = 0;
          else
            ++v211;
          v23 = (_DWORD *)((char *)v23 + v213);
          v237 = 38155 * v236 - 2441920;
          v238 = v237 + v226;
          v239 = v237 + v224;
          v240 = v237 + v225;
          v241 = 255 * ((v240 + 0x4000) >> 15) + 511;
          v242 = (255 * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOBYTE(v242) = -1;
          v243 = (255 * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v244 = (4198405 * (unint64_t)v241) >> 32;
          v245 = v241 - v244;
          if (v239 > 33538047)
            LOBYTE(v243) = -1;
          v246 = (v244 + (v245 >> 1)) >> 9;
          if (v240 > 33538047)
            LOBYTE(v246) = -1;
          if (v240 >= -16384)
            v247 = v246;
          else
            v247 = 0;
          *v210 = v247;
          if (v239 >= -16384)
            v248 = v243;
          else
            v248 = 0;
          v210[1] = v248;
          if (v238 >= -16384)
            v249 = v242;
          else
            v249 = 0;
          v210[2] = v249;
          v210[3] = -1;
          v210 += 4;
          ++v70;
          v209 += 4;
        }
        while (v11 != v70);
      }
      v22 = v263 + 4 * v256;
      v23 = &v262[v256];
      ++v17;
      v19 = v265 + v254;
      v24 = v261 + v254;
      v21 = &v264[v255];
    }
    while (v17 != v257);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU601_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  BOOL v53;
  _BYTE *v54;
  _DWORD *v55;
  char v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  char v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  unsigned int v94;
  char v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  char v111;
  unsigned int v112;
  char v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  char v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  char v160;
  char v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  char v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  char v185;
  char v186;
  char v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  char v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  char v198;
  int v199;
  int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  char v206;
  char v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  _DWORD *v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  _DWORD *v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  char v233;
  char v234;
  char v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  char v247;
  char v248;
  char v249;
  unint64_t v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  unint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;

  v271 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v259 = v9 % 3;
    v253 = v16 % 3;
    v257 = v12 >> 1;
    v258 = 6 * (v9 / 6) - v9 + 6;
    v18 = *a8 * a6[5];
    v19 = *a7 + v18;
    v20 = a4[1];
    v21 = (_DWORD *)(a3[1] + v20 * (v8 >> 1) + 4 * (v9 / 3));
    v22 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v23 = (_DWORD *)(v22 + *a4);
    v256 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v255 = v20 >> 2;
    v254 = 2 * *a8;
    v24 = *a7 + *a8 + v18;
    v251 = v11;
    v266 = v16;
    v269 = 4 * a6[4];
    do
    {
      v260 = v17;
      v261 = v24;
      v25 = 0;
      v264 = v21;
      v265 = v19;
      v26 = v19;
      v27 = v259;
      v28 = v259;
      v262 = v23;
      v263 = v22;
      v29 = (_DWORD *)v22;
      do
      {
        v30 = v29;
        v31 = *((unsigned __int8 *)&v271 + v27);
        v32 = *((unsigned __int8 *)&v271 + v28);
        v33 = ((*v21 >> v32) & 0x3FF) - 512;
        v34 = (_DWORD *)((char *)v21 + ((v32 >> 2) & 0x3C));
        if (v28 == 2)
          v35 = 0;
        else
          v35 = v28 + 1;
        v36 = *((unsigned __int8 *)&v271 + v35);
        v37 = *v34 >> v36;
        v38 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        if (v35 == 2)
          v39 = 0;
        else
          v39 = v35 + 1;
        if ((v25 & 1) != 0)
        {
          v21 = v38;
          v28 = v39;
        }
        v40 = 38155 * ((*v30 >> v31) & 0x3FF) - 2441920;
        v41 = (v37 & 0x3FF) - 512;
        v42 = -12836 * v33 - 26638 * v41;
        v43 = 66101 * v33;
        v44 = 52299 * v41;
        v45 = 52299 * v41 + v40;
        v46 = v42 + v40;
        v47 = v43 + v40;
        v48 = v269;
        v49 = (255 * ((v45 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v45 > 33538047)
          LOBYTE(v49) = -1;
        v50 = (255 * ((v46 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v46 > 33538047)
          LOBYTE(v50) = -1;
        v51 = (255 * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v47 > 33538047)
          LOBYTE(v51) = -1;
        if (v47 >= -16384)
          v52 = v51;
        else
          v52 = 0;
        v53 = v46 < -16384;
        v54 = (_BYTE *)(v26 + v269);
        *(_BYTE *)(v26 + v269) = v52;
        v55 = v23;
        if (v53)
          v56 = 0;
        else
          v56 = v50;
        v54[1] = v56;
        if (v45 >= -16384)
          v57 = v49;
        else
          v57 = 0;
        v54[2] = v57;
        v54[3] = -1;
        v58 = 38155 * ((*v55 >> v31) & 0x3FF) - 2441920;
        v59 = v58 + v44;
        v60 = v58 + v42;
        v61 = v58 + v43;
        if (v27 == 2)
          v27 = 0;
        else
          ++v27;
        v62 = (255 * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        v63 = (255 * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOBYTE(v62) = -1;
        if (v60 > 33538047)
          LOBYTE(v63) = -1;
        v64 = (255 * ((v61 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v61 > 33538047)
          LOBYTE(v64) = -1;
        v53 = v61 < -16384;
        v65 = (_BYTE *)(v24 + v269);
        if (v53)
          LOBYTE(v64) = 0;
        *v65 = v64;
        if (v60 >= -16384)
          v66 = v63;
        else
          v66 = 0;
        v65[1] = v66;
        v67 = v31 >> 2;
        if (v59 >= -16384)
          v68 = v62;
        else
          v68 = 0;
        v65[2] = v68;
        v65[3] = -1;
        v29 = (_DWORD *)((char *)v30 + (v67 & 0x3C));
        v23 = (_DWORD *)((char *)v55 + (v67 & 0x3C));
        ++v25;
        v26 += 4;
        v24 += 4;
      }
      while (v258 != v25);
      if (v258 >= v16)
      {
        v209 = (_BYTE *)(v26 + v269);
        v210 = (_BYTE *)(v24 + v269);
        v70 = v258;
        v211 = v253;
      }
      else
      {
        v69 = 0;
        v252 = v67;
        v267 = (char *)v55 + (v67 & 0x3C);
        v268 = (char *)v30 + (v67 & 0x3C);
        v70 = v258;
        do
        {
          v270 = v48;
          v71 = (_BYTE *)(v26 + v48);
          v72 = v21[v69 / 4];
          v73 = *(_DWORD *)&v268[v69];
          v74 = (v72 & 0x3FF) - 512;
          v75 = *(_DWORD *)&v267[v69];
          v76 = ((v72 >> 10) & 0x3FF) - 512;
          v77 = 38155 * (v73 & 0x3FF) - 2441920;
          v78 = -12836 * v74 - 26638 * v76;
          v79 = 66101 * v74;
          v80 = 52299 * v76;
          v81 = 52299 * v76 + v77;
          v82 = v78 + v77;
          v83 = v77 + v79;
          v84 = (255 * ((v81 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v81 > 33538047)
            LOBYTE(v84) = -1;
          v85 = (255 * ((v78 + v77 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v82 > 33538047)
            LOBYTE(v85) = -1;
          v86 = (255 * ((v77 + v79 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOBYTE(v86) = -1;
          if (v83 >= -16384)
            v87 = v86;
          else
            v87 = 0;
          v53 = v82 < -16384;
          v88 = 38155 * ((v73 >> 10) & 0x3FF) - 2441920;
          v89 = v88 + v80;
          *v71 = v87;
          v90 = 255 * ((v88 + v80 + 0x4000) >> 15);
          v91 = v78 + v88;
          if (v53)
            LOBYTE(v85) = 0;
          v92 = v88 + v79;
          v53 = v81 < -16384;
          v71[1] = v85;
          v93 = (_BYTE *)(v24 + v270);
          if (v53)
            LOBYTE(v84) = 0;
          v71[3] = -1;
          v71[2] = v84;
          v94 = (255 * ((v91 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v89 > 33538047)
            v95 = -1;
          else
            v95 = (v90 + 511) / 0x3FFu;
          if (v91 > 33538047)
            LOBYTE(v94) = -1;
          v96 = (255 * ((v92 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v92 > 33538047)
            LOBYTE(v96) = -1;
          if (v92 < -16384)
            LOBYTE(v96) = 0;
          v71[4] = v96;
          if (v91 < -16384)
            LOBYTE(v94) = 0;
          v71[7] = -1;
          v71[5] = v94;
          v97 = 38155 * (v75 & 0x3FF) - 2441920;
          v98 = v97 + v80;
          v99 = v97 + v80 + 0x4000;
          if (v89 < -16384)
            v95 = 0;
          v100 = v78 + v97;
          v71[6] = v95;
          v101 = v97 + v79;
          v102 = (255 * (v99 >> 15) + 511) / 0x3FFu;
          if (v98 > 33538047)
            LOBYTE(v102) = -1;
          v103 = (255 * ((v100 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v100 > 33538047)
            LOBYTE(v103) = -1;
          v104 = (255 * ((v101 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v101 > 33538047)
            LOBYTE(v104) = -1;
          if (v101 >= -16384)
            v105 = v104;
          else
            v105 = 0;
          v106 = 38155 * ((v75 >> 10) & 0x3FF) - 2441920;
          v107 = v106 + v80;
          v108 = v106 + v78;
          *v93 = v105;
          if (v100 < -16384)
            LOBYTE(v103) = 0;
          v93[3] = -1;
          v109 = v106 + v79;
          v93[1] = v103;
          if (v98 < -16384)
            LOBYTE(v102) = 0;
          v93[2] = v102;
          v110 = (255 * ((v108 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v107 > 33538047)
            v111 = -1;
          else
            v111 = (255 * ((v106 + v80 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v108 > 33538047)
            LOBYTE(v110) = -1;
          v112 = (255 * ((v109 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOBYTE(v112) = -1;
          if (v109 < -16384)
            LOBYTE(v112) = 0;
          v93[4] = v112;
          if (v108 < -16384)
            LOBYTE(v110) = 0;
          v93[5] = v110;
          if (v107 >= -16384)
            v113 = v111;
          else
            v113 = 0;
          v93[6] = v113;
          v93[7] = -1;
          v114 = ((v72 >> 20) & 0x3FF) - 512;
          v115 = v21[v69 / 4 + 1];
          v116 = (v115 & 0x3FF) - 512;
          v117 = 38155 * ((v73 >> 20) & 0x3FF) - 2441920;
          v118 = -12836 * v114 - 26638 * v116;
          v119 = 52299 * v116;
          v120 = 66101 * v114;
          v121 = 52299 * v116 + v117;
          v122 = v118 + v117;
          v123 = v117 + v120;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v123 >= -16384)
            v127 = v126;
          else
            v127 = 0;
          v71[8] = v127;
          if (v122 >= -16384)
            v128 = v125;
          else
            v128 = 0;
          v71[9] = v128;
          if (v121 >= -16384)
            v129 = v124;
          else
            v129 = 0;
          v71[10] = v129;
          v71[11] = -1;
          v130 = *(_DWORD *)&v268[v69 + 4];
          v131 = 38155 * (v130 & 0x3FF) - 2441920;
          v132 = v131 + v119;
          v133 = v131 + v118;
          v134 = v131 + v120;
          v135 = (255 * ((v132 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v132 > 33538047)
            LOBYTE(v135) = -1;
          v136 = (255 * ((v133 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v133 > 33538047)
            LOBYTE(v136) = -1;
          v137 = (255 * ((v134 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v134 > 33538047)
            LOBYTE(v137) = -1;
          if (v134 >= -16384)
            v138 = v137;
          else
            v138 = 0;
          v71[15] = -1;
          v71[12] = v138;
          v139 = 38155 * ((v75 >> 20) & 0x3FF) - 2441920;
          v140 = v119 + v139;
          if (v133 < -16384)
            LOBYTE(v136) = 0;
          v141 = 255 * ((v119 + v139 + 0x4000) >> 15) + 511;
          v142 = v118 + v139;
          v53 = v132 < -16384;
          v143 = 255 * ((v118 + v139 + 0x4000) >> 15) + 511;
          v144 = v139 + v120;
          v71[13] = v136;
          v145 = 255 * ((v144 + 0x4000) >> 15) + 511;
          if (v53)
            LOBYTE(v135) = 0;
          v146 = v141 / 0x3FF;
          v71[14] = v135;
          if (v140 > 33538047)
            LOBYTE(v146) = -1;
          v147 = v143 / 0x3FF;
          v148 = (4198405 * (unint64_t)v145) >> 32;
          v149 = v145 - v148;
          if (v142 > 33538047)
            LOBYTE(v147) = -1;
          v150 = (v148 + (v149 >> 1)) >> 9;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v93[8] = v151;
          if (v142 >= -16384)
            v152 = v147;
          else
            v152 = 0;
          if (v140 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v93[9] = v152;
          v93[10] = v153;
          v93[11] = -1;
          v154 = *(_DWORD *)&v267[v69 + 4];
          v155 = 38155 * (v154 & 0x3FF) - 2441920;
          v156 = v155 + v119;
          v157 = v155 + v118;
          v158 = v155 + v120;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          if (v157 > 33538047)
            v160 = -1;
          else
            v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 > 33538047)
            v161 = -1;
          else
            v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v93[15] = -1;
          v53 = v157 < -16384;
          v163 = ((v115 >> 10) & 0x3FF) - 512;
          v164 = ((v115 >> 20) & 0x3FF) - 512;
          v93[12] = v162;
          v165 = 38155 * ((v130 >> 10) & 0x3FF) - 2441920;
          v166 = -26638 * v164 - 12836 * v163;
          v167 = 66101 * v163;
          v168 = 52299 * v164;
          if (v53)
            v160 = 0;
          v169 = v165 + v168;
          v53 = v156 < -16384;
          v170 = 255 * ((v165 + v168 + 0x4000) >> 15) + 511;
          v171 = v165 + v166;
          v93[13] = v160;
          v172 = 255 * ((v165 + v166 + 0x4000) >> 15) + 511;
          v173 = v165 + v167;
          if (v53)
            LOBYTE(v159) = 0;
          v93[14] = v159;
          if (v169 > 33538047)
            v174 = -1;
          else
            v174 = v170 / 0x3FF;
          v175 = v172 / 0x3FF;
          if (v171 > 33538047)
            LOBYTE(v175) = -1;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v53 = v173 < -16384;
          v177 = 38155 * ((v130 >> 20) & 0x3FF) - 2441920;
          v178 = v177 + v168;
          if (v53)
            LOBYTE(v176) = 0;
          v53 = v171 < -16384;
          v179 = v177 + v166;
          v180 = 255 * ((v177 + v166 + 0x4000) >> 15);
          v71[16] = v176;
          v181 = v177 + v167;
          if (v53)
            LOBYTE(v175) = 0;
          v71[17] = v175;
          if (v169 < -16384)
            v174 = 0;
          v71[18] = v174;
          v182 = (255 * ((v178 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v178 > 33538047)
            LOBYTE(v182) = -1;
          v183 = (v180 + 511) / 0x3FFu;
          if (v179 > 33538047)
            LOBYTE(v183) = -1;
          v184 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            LOBYTE(v184) = -1;
          if (v181 >= -16384)
            v185 = v184;
          else
            v185 = 0;
          v71[20] = v185;
          if (v179 >= -16384)
            v186 = v183;
          else
            v186 = 0;
          v71[21] = v186;
          if (v178 >= -16384)
            v187 = v182;
          else
            v187 = 0;
          v188 = 38155 * ((v154 >> 10) & 0x3FF) - 2441920;
          v189 = v188 + v168;
          v71[22] = v187;
          v190 = v188 + v166;
          v71[19] = -1;
          v191 = 255 * ((v188 + v166 + 0x4000) >> 15) + 511;
          v192 = v188 + v167;
          v71[23] = -1;
          if (v189 > 33538047)
            v193 = -1;
          else
            v193 = (255 * ((v189 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v266;
          v194 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOBYTE(v194) = -1;
          v195 = (255 * ((v192 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v192 > 33538047)
            LOBYTE(v195) = -1;
          v53 = v192 < -16384;
          v196 = 38155 * ((v154 >> 20) & 0x3FF) - 2441920;
          v197 = v196 + v168;
          if (v53)
            v198 = 0;
          else
            v198 = v195;
          v199 = v196 + v166;
          v93[16] = v198;
          v200 = v196 + v167;
          if (v190 < -16384)
            LOBYTE(v194) = 0;
          v93[17] = v194;
          if (v189 >= -16384)
            v201 = v193;
          else
            v201 = 0;
          v93[18] = v201;
          v202 = (255 * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (255 * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOBYTE(v204) = -1;
          if (v200 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v93[20] = v205;
          if (v199 >= -16384)
            v206 = v203;
          else
            v206 = 0;
          v93[21] = v206;
          if (v197 >= -16384)
            v207 = v202;
          else
            v207 = 0;
          v93[22] = v207;
          v93[19] = -1;
          v93[23] = -1;
          v70 += 6;
          v69 += 8;
          v48 = v270 + 24;
        }
        while (v70 < v266);
        v208 = v252 & 0x3C;
        v11 = v251;
        v29 = (_DWORD *)((char *)v30 + v208 + v69);
        v23 = (_DWORD *)((char *)v55 + v208 + v69);
        v21 = (_DWORD *)((char *)v21 + v69);
        v209 = (_BYTE *)(v26 + v48);
        v210 = (_BYTE *)(v24 + v48);
        v17 = v260;
        v211 = v253;
      }
      if (v70 < v11)
      {
        do
        {
          v212 = *((unsigned __int8 *)&v271 + v211);
          v213 = (v212 >> 2) & 0x3C;
          v214 = *((unsigned __int8 *)&v271 + v28);
          v215 = ((*v21 >> v214) & 0x3FF) - 512;
          v216 = (_DWORD *)((char *)v21 + ((v214 >> 2) & 0x3C));
          if (v28 == 2)
            v217 = 0;
          else
            v217 = v28 + 1;
          v218 = *((unsigned __int8 *)&v271 + v217);
          v219 = (*v216 >> v218) & 0x3FF;
          v220 = (_DWORD *)((char *)v216 + ((v218 >> 2) & 0x3C));
          v221 = v219 - 512;
          if (v217 == 2)
            v222 = 0;
          else
            v222 = v217 + 1;
          if ((v70 & 1) != 0)
            v28 = v222;
          v223 = 38155 * ((*v29 >> v212) & 0x3FF) - 2441920;
          if ((v70 & 1) != 0)
            v21 = v220;
          v224 = -12836 * v215 - 26638 * v221;
          v225 = 66101 * v215;
          v226 = 52299 * v221;
          v227 = v226 + v223;
          v228 = v224 + v223;
          v229 = v225 + v223;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          v232 = (255 * ((v229 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v229 > 33538047)
            LOBYTE(v232) = -1;
          if (v229 >= -16384)
            v233 = v232;
          else
            v233 = 0;
          *v209 = v233;
          if (v228 >= -16384)
            v234 = v231;
          else
            v234 = 0;
          v209[1] = v234;
          if (v227 >= -16384)
            v235 = v230;
          else
            v235 = 0;
          v209[2] = v235;
          v209[3] = -1;
          v29 = (_DWORD *)((char *)v29 + v213);
          v236 = (*v23 >> v212) & 0x3FF;
          if (v211 == 2)
            v211 = 0;
          else
            ++v211;
          v23 = (_DWORD *)((char *)v23 + v213);
          v237 = 38155 * v236 - 2441920;
          v238 = v237 + v226;
          v239 = v237 + v224;
          v240 = v237 + v225;
          v241 = 255 * ((v240 + 0x4000) >> 15) + 511;
          v242 = (255 * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOBYTE(v242) = -1;
          v243 = (255 * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v244 = (4198405 * (unint64_t)v241) >> 32;
          v245 = v241 - v244;
          if (v239 > 33538047)
            LOBYTE(v243) = -1;
          v246 = (v244 + (v245 >> 1)) >> 9;
          if (v240 > 33538047)
            LOBYTE(v246) = -1;
          if (v240 >= -16384)
            v247 = v246;
          else
            v247 = 0;
          *v210 = v247;
          if (v239 >= -16384)
            v248 = v243;
          else
            v248 = 0;
          v210[1] = v248;
          if (v238 >= -16384)
            v249 = v242;
          else
            v249 = 0;
          v210[2] = v249;
          v210[3] = -1;
          v210 += 4;
          ++v70;
          v209 += 4;
        }
        while (v11 != v70);
      }
      v22 = v263 + 4 * v256;
      v23 = &v262[v256];
      ++v17;
      v19 = v265 + v254;
      v24 = v261 + v254;
      v21 = &v264[v255];
    }
    while (v17 != v257);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU2020_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  __int16 *v54;
  __int16 v55;
  __int16 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  _WORD *v65;
  __int16 v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int16 v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  __int16 v102;
  __int16 v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  __int16 v108;
  int v109;
  int v110;
  int v111;
  __int16 *v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  __int16 v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  __int16 v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  __int16 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  __int16 v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  __int16 v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  __int16 v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  __int16 v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  __int16 v207;
  __int16 v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  __int16 v221;
  __int16 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  __int16 v226;
  uint64_t v227;
  _WORD *v228;
  _WORD *v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  _DWORD *v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  __int16 v254;
  __int16 v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  __int16 v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int v267;
  unsigned int v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  char v273;
  _DWORD *v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  unint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  unsigned int v293;
  uint64_t v294;
  int v295;

  v295 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v282 = v9 % 3;
    v275 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v280 = v12 >> 1;
    v19 = *a8 * a6[5];
    v20 = *a7 + v19;
    v21 = 8 * a6[4];
    v22 = a4[1];
    v23 = (_DWORD *)(a3[1] + v22 * (v8 >> 1) + 4 * (v9 / 3));
    v24 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v25 = (_DWORD *)(v24 + *a4);
    v279 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v278 = v22 >> 2;
    v276 = v11;
    v277 = 2 * *a8;
    v26 = *a7 + *a8 + v19;
    v281 = v18;
    v290 = v16;
    v283 = v21;
    do
    {
      v288 = v20;
      v289 = v17;
      v27 = 0;
      v284 = v26;
      v285 = v25;
      v28 = v20;
      v29 = v282;
      v30 = v282;
      v286 = v24;
      v287 = v23;
      v31 = (_DWORD *)v24;
      do
      {
        v32 = v31;
        v33 = *((unsigned __int8 *)&v295 + v29);
        v34 = *((unsigned __int8 *)&v295 + v30);
        v35 = ((*v23 >> v34) & 0x3FF) - 512;
        v36 = (_DWORD *)((char *)v23 + ((v34 >> 2) & 0x3C));
        if (v30 == 2)
          v37 = 0;
        else
          v37 = v30 + 1;
        v38 = *((unsigned __int8 *)&v295 + v37);
        v39 = *v36 >> v38;
        v40 = (_DWORD *)((char *)v36 + ((v38 >> 2) & 0x3C));
        v41 = v39 & 0x3FF;
        if (v37 == 2)
          v42 = 0;
        else
          v42 = v37 + 1;
        if ((v27 & 1) != 0)
        {
          v23 = v40;
          v30 = v42;
        }
        v43 = 38267 * ((*v32 >> v33) & 0x3FF) - 2449088;
        v44 = -6155 * v35 - 21375 * (v41 - 512);
        v45 = 70388 * v35;
        v46 = 55169 * (v41 - 512);
        v47 = v46 + v43;
        v48 = v44 + v43;
        v49 = v45 + v43;
        v50 = v25;
        if (v47 > 33538047)
          v51 = -1;
        else
          v51 = (0xFFFF * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        v52 = (0xFFFF * ((v49 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v48 > 33538047)
          v53 = -1;
        else
          v53 = (0xFFFF * ((v48 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v49 > 33538047)
          LOWORD(v52) = -1;
        v54 = (__int16 *)(v28 + v21);
        if (v47 >= -16384)
          v55 = v51;
        else
          v55 = 0;
        *v54 = v55;
        if (v48 >= -16384)
          v56 = v53;
        else
          v56 = 0;
        v57 = 38267 * ((*v50 >> v33) & 0x3FF) - 2449088;
        v58 = v57 + v46;
        v54[1] = v56;
        v59 = v57 + v44;
        if (v49 < -16384)
          LOWORD(v52) = 0;
        v60 = v57 + v45;
        v54[2] = v52;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v61 = (0xFFFF * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v58 > 33538047)
          LOWORD(v61) = -1;
        v62 = (0xFFFF * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOWORD(v62) = -1;
        v63 = (0xFFFF * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v60 > 33538047)
          LOWORD(v63) = -1;
        v64 = v58 < -16384;
        v54[3] = -1;
        v65 = (_WORD *)(v26 + v21);
        if (v64)
          v66 = 0;
        else
          v66 = v61;
        *v65 = v66;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v65[1] = v67;
        v64 = v60 < -16384;
        v68 = v33 >> 2;
        if (v64)
          v69 = 0;
        else
          v69 = v63;
        v65[2] = v69;
        v65[3] = -1;
        v31 = (_DWORD *)((char *)v32 + (v68 & 0x3C));
        v25 = (_DWORD *)((char *)v50 + (v68 & 0x3C));
        ++v27;
        v28 += 8;
        v26 += 8;
      }
      while (v18 != v27);
      if (v18 >= v16)
      {
        v21 = v283;
        v228 = (_WORD *)(v28 + v283);
        v229 = (_WORD *)(v26 + v283);
        v72 = v18;
        v230 = v276;
        v231 = v275;
      }
      else
      {
        v70 = 0;
        v273 = v68;
        v274 = v32;
        v291 = (char *)v50 + (v68 & 0x3C);
        v292 = (char *)v32 + (v68 & 0x3C);
        v71 = v283;
        v72 = v18;
        do
        {
          v294 = v71;
          v73 = &v291[v70];
          v74 = (_WORD *)(v28 + v71);
          v75 = v23[v70 / 4 + 1];
          v293 = v23[v70 / 4];
          v76 = (v293 & 0x3FF) - 512;
          v77 = ((v293 >> 10) & 0x3FF) - 512;
          v78 = *(_DWORD *)&v292[v70];
          v79 = *(_DWORD *)&v292[v70 + 4];
          v80 = 38267 * (v78 & 0x3FF) - 2449088;
          v81 = -6155 * v76 - 21375 * v77;
          v82 = 55169 * v77;
          v83 = 55169 * v77 + v80;
          v84 = 70388 * v76;
          v85 = v81 + v80;
          v86 = v80 + 70388 * v76;
          v87 = (0xFFFF * ((v83 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOWORD(v87) = -1;
          v88 = (0xFFFF * ((v85 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v85 > 33538047)
            LOWORD(v88) = -1;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          if (v83 < -16384)
            LOWORD(v87) = 0;
          *v74 = v87;
          if (v85 >= -16384)
            v90 = v88;
          else
            v90 = 0;
          v91 = 38267 * ((v78 >> 10) & 0x3FF) - 2449088;
          v92 = v91 + v82;
          v64 = v86 < -16384;
          v93 = 0xFFFF * ((v91 + v82 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v74[1] = v90;
          v95 = 0xFFFF * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v91 + v84;
          v97 = v91 + v84 + 0x4000;
          if (v64)
            LOWORD(v89) = 0;
          v98 = 0xFFFF * (v97 >> 15) + 511;
          v74[2] = v89;
          v99 = v93 / 0x3FF;
          if (v92 > 33538047)
            LOWORD(v99) = -1;
          v100 = v95 / 0x3FF;
          v101 = v98 / 0x3FF;
          if (v94 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          if (v96 > 33538047)
            LOWORD(v101) = -1;
          if (v92 >= -16384)
            v103 = v99;
          else
            v103 = 0;
          v64 = v94 < -16384;
          v74[4] = v103;
          v104 = *(_DWORD *)v73;
          v105 = *((_DWORD *)v73 + 1);
          v106 = 38267 * (*(_DWORD *)v73 & 0x3FF) - 2449088;
          v107 = v106 + v82;
          if (v64)
            v108 = 0;
          else
            v108 = v102;
          v64 = v96 < -16384;
          v109 = v81 + v106;
          v110 = 0xFFFF * ((v81 + v106 + 0x4000) >> 15);
          v74[5] = v108;
          v111 = v106 + v84;
          v112 = (__int16 *)(v26 + v294);
          v74[3] = -1;
          if (v64)
            LOWORD(v101) = 0;
          v74[7] = -1;
          v74[6] = v101;
          v113 = (v110 + 511) / 0x3FFu;
          if (v107 > 33538047)
            v114 = -1;
          else
            v114 = (0xFFFF * ((v107 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOWORD(v113) = -1;
          v115 = (0xFFFF * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v115) = -1;
          if (v107 < -16384)
            v114 = 0;
          *v112 = v114;
          v116 = 38267 * ((v104 >> 10) & 0x3FF) - 2449088;
          v117 = v116 + v82;
          v118 = v116 + v82 + 0x4000;
          if (v109 < -16384)
            LOWORD(v113) = 0;
          v119 = 0xFFFF * (v118 >> 15) + 511;
          v120 = v116 + v81;
          v64 = v111 < -16384;
          v121 = 0xFFFF * ((v120 + 0x4000) >> 15) + 511;
          v112[1] = v113;
          v122 = v116 + v84;
          v123 = 0xFFFF * ((v116 + v84 + 0x4000) >> 15);
          if (v64)
            v124 = 0;
          else
            v124 = v115;
          v125 = v123 + 511;
          v112[2] = v124;
          v126 = v119 / 0x3FF;
          v127 = (4198405 * (unint64_t)v121) >> 32;
          v128 = v121 - v127;
          if (v117 > 33538047)
            LOWORD(v126) = -1;
          v129 = (v127 + (v128 >> 1)) >> 9;
          if (v120 > 33538047)
            LOWORD(v129) = -1;
          v130 = v125 / 0x3FF;
          if (v122 > 33538047)
            v131 = -1;
          else
            v131 = v130;
          if (v117 < -16384)
            LOWORD(v126) = 0;
          v132 = ((v293 >> 20) & 0x3FF) - 512;
          v133 = (v75 & 0x3FF) - 512;
          v64 = v120 < -16384;
          v134 = 38267 * ((v78 >> 20) & 0x3FF) - 2449088;
          v135 = -6155 * v132 - 21375 * v133;
          v136 = 70388 * v132;
          v112[4] = v126;
          v137 = 55169 * v133;
          v138 = 55169 * v133 + v134;
          if (v64)
            LOWORD(v129) = 0;
          v139 = v135 + v134;
          v64 = v122 < -16384;
          v140 = 0xFFFF * ((v135 + v134 + 0x4000) >> 15);
          v141 = v134 + v136;
          v142 = 0xFFFF * ((v134 + v136 + 0x4000) >> 15);
          v112[5] = v129;
          v112[3] = -1;
          if (v64)
            v143 = 0;
          else
            v143 = v131;
          v112[7] = -1;
          v144 = v140 + 511;
          v145 = v142 + 511;
          v112[6] = v143;
          v146 = (0xFFFF * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v144) >> 32;
          v148 = v144 - v147;
          if (v138 > 33538047)
            LOWORD(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v139 > 33538047)
            LOWORD(v149) = -1;
          v150 = v145 / 0x3FF;
          if (v141 > 33538047)
            LOWORD(v150) = -1;
          if (v138 < -16384)
            LOWORD(v146) = 0;
          v74[8] = v146;
          if (v139 < -16384)
            LOWORD(v149) = 0;
          v64 = v141 < -16384;
          v151 = 38267 * (v79 & 0x3FF) - 2449088;
          v152 = v151 + v137;
          v74[9] = v149;
          v153 = 0xFFFF * ((v151 + v137 + 0x4000) >> 15) + 511;
          v154 = v151 + v135;
          if (v64)
            LOWORD(v150) = 0;
          v155 = 0xFFFF * ((v151 + v135 + 0x4000) >> 15) + 511;
          v156 = v151 + v136;
          v74[10] = v150;
          v74[11] = -1;
          v157 = v153 / 0x3FF;
          if (v152 > 33538047)
            LOWORD(v157) = -1;
          v158 = v155 / 0x3FF;
          v159 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v154 > 33538047)
            LOWORD(v158) = -1;
          if (v156 > 33538047)
            LOWORD(v159) = -1;
          if (v152 < -16384)
            LOWORD(v157) = 0;
          v74[12] = v157;
          v74[15] = -1;
          v160 = 38267 * ((v104 >> 20) & 0x3FF) - 2449088;
          v161 = v137 + v160;
          if (v154 >= -16384)
            v162 = v158;
          else
            v162 = 0;
          v163 = 0xFFFF * ((v137 + v160 + 0x4000) >> 15) + 511;
          v164 = v135 + v160;
          v64 = v156 < -16384;
          v165 = 0xFFFF * ((v135 + v160 + 0x4000) >> 15) + 511;
          v74[13] = v162;
          v166 = v160 + v136;
          if (v64)
            LOWORD(v159) = 0;
          v74[14] = v159;
          v167 = v163 / 0x3FF;
          v168 = (4198405 * (unint64_t)v165) >> 32;
          v169 = v165 - v168;
          if (v161 > 33538047)
            LOWORD(v167) = -1;
          v170 = (v168 + (v169 >> 1)) >> 9;
          if (v164 > 33538047)
            LOWORD(v170) = -1;
          v171 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v171) = -1;
          if (v161 >= -16384)
            v172 = v167;
          else
            v172 = 0;
          v112[8] = v172;
          v112[11] = -1;
          if (v164 < -16384)
            LOWORD(v170) = 0;
          v173 = 38267 * (v105 & 0x3FF) - 2449088;
          v174 = v173 + v137;
          v175 = v173 + v135;
          v112[9] = v170;
          v176 = v173 + v136;
          v177 = v173 + v136 + 0x4000;
          if (v166 >= -16384)
            v178 = v171;
          else
            v178 = 0;
          v179 = 0xFFFF * (v177 >> 15) + 511;
          v112[10] = v178;
          v180 = (0xFFFF * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            LOWORD(v180) = -1;
          v181 = (0xFFFF * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          v182 = v179 / 0x3FF;
          if (v175 > 33538047)
            LOWORD(v181) = -1;
          if (v176 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v174 < -16384)
            LOWORD(v180) = 0;
          v112[15] = -1;
          v64 = v175 < -16384;
          v184 = ((v75 >> 10) & 0x3FF) - 512;
          v185 = ((v75 >> 20) & 0x3FF) - 512;
          v112[12] = v180;
          v186 = 38267 * ((v79 >> 10) & 0x3FF) - 2449088;
          v187 = -21375 * v185 - 6155 * v184;
          v188 = 70388 * v184;
          v189 = 55169 * v185;
          if (v64)
            LOWORD(v181) = 0;
          v190 = v186 + v189;
          v64 = v176 < -16384;
          v191 = 0xFFFF * ((v186 + v189 + 0x4000) >> 15) + 511;
          v192 = v186 + v187;
          v112[13] = v181;
          v193 = 0xFFFF * ((v186 + v187 + 0x4000) >> 15) + 511;
          v194 = v186 + v188;
          if (v64)
            v183 = 0;
          v112[14] = v183;
          v195 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOWORD(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v192 > 33538047)
            LOWORD(v196) = -1;
          v197 = (0xFFFF * ((v194 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v194 > 33538047)
            LOWORD(v197) = -1;
          v64 = v190 < -16384;
          v198 = 38267 * ((v79 >> 20) & 0x3FF) - 2449088;
          v199 = v198 + v189;
          if (v64)
            LOWORD(v195) = 0;
          v64 = v192 < -16384;
          v200 = v198 + v187;
          v201 = 0xFFFF * ((v198 + v187 + 0x4000) >> 15);
          v74[16] = v195;
          v202 = v198 + v188;
          if (v64)
            LOWORD(v196) = 0;
          v74[17] = v196;
          if (v194 >= -16384)
            v203 = v197;
          else
            v203 = 0;
          v74[18] = v203;
          v204 = (0xFFFF * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v290;
          if (v199 > 33538047)
            LOWORD(v204) = -1;
          v205 = (v201 + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v205) = -1;
          v206 = (0xFFFF * ((v202 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v202 > 33538047)
            LOWORD(v206) = -1;
          if (v199 >= -16384)
            v207 = v204;
          else
            v207 = 0;
          v74[20] = v207;
          if (v200 < -16384)
            LOWORD(v205) = 0;
          v74[21] = v205;
          if (v202 >= -16384)
            v208 = v206;
          else
            v208 = 0;
          v209 = 38267 * ((v105 >> 10) & 0x3FF) - 2449088;
          v210 = v209 + v189;
          v74[22] = v208;
          v211 = v209 + v187;
          v74[19] = -1;
          v212 = 0xFFFF * ((v209 + v187 + 0x4000) >> 15) + 511;
          v213 = v209 + v188;
          v74[23] = -1;
          v214 = (0xFFFF * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOWORD(v214) = -1;
          v215 = v212 / 0x3FF;
          if (v211 > 33538047)
            LOWORD(v215) = -1;
          v216 = (0xFFFF * ((v213 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v213 > 33538047)
            LOWORD(v216) = -1;
          v64 = v210 < -16384;
          v217 = 38267 * ((v105 >> 20) & 0x3FF) - 2449088;
          v218 = v217 + v189;
          if (v64)
            LOWORD(v214) = 0;
          v219 = v217 + v187;
          v112[16] = v214;
          v220 = v217 + v188;
          if (v211 >= -16384)
            v221 = v215;
          else
            v221 = 0;
          v112[17] = v221;
          if (v213 >= -16384)
            v222 = v216;
          else
            v222 = 0;
          v112[18] = v222;
          v223 = (0xFFFF * ((v218 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 > 33538047)
            LOWORD(v223) = -1;
          v224 = (0xFFFF * ((v219 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v219 > 33538047)
            LOWORD(v224) = -1;
          v225 = (0xFFFF * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOWORD(v225) = -1;
          if (v218 < -16384)
            LOWORD(v223) = 0;
          v112[20] = v223;
          if (v219 < -16384)
            LOWORD(v224) = 0;
          v112[21] = v224;
          if (v220 >= -16384)
            v226 = v225;
          else
            v226 = 0;
          v112[22] = v226;
          v112[19] = -1;
          v112[23] = -1;
          v72 += 6;
          v70 += 8;
          v71 = v294 + 48;
        }
        while (v72 < v290);
        v227 = v273 & 0x3C;
        v31 = (_DWORD *)((char *)v274 + v227 + v70);
        v25 = (_DWORD *)((char *)v50 + v227 + v70);
        v23 = (_DWORD *)((char *)v23 + v70);
        v228 = (_WORD *)(v28 + v71);
        v229 = (_WORD *)(v26 + v71);
        v230 = v276;
        v231 = v275;
        v21 = v283;
      }
      if (v72 < v230)
      {
        do
        {
          v232 = *((unsigned __int8 *)&v295 + v231);
          v233 = (*v31 >> v232) & 0x3FF;
          v234 = (v232 >> 2) & 0x3C;
          v235 = *((unsigned __int8 *)&v295 + v30);
          v31 = (_DWORD *)((char *)v31 + v234);
          v236 = ((*v23 >> v235) & 0x3FF) - 512;
          v237 = (_DWORD *)((char *)v23 + ((v235 >> 2) & 0x3C));
          if (v30 == 2)
            v238 = 0;
          else
            v238 = v30 + 1;
          v239 = *((unsigned __int8 *)&v295 + v238);
          v240 = *v237 >> v239;
          v241 = (_DWORD *)((char *)v237 + ((v239 >> 2) & 0x3C));
          v242 = v240 & 0x3FF;
          if (v238 == 2)
            v243 = 0;
          else
            v243 = v238 + 1;
          if ((v72 & 1) != 0)
          {
            v23 = v241;
            v30 = v243;
          }
          v244 = 38267 * v233 - 2449088;
          v245 = -6155 * v236 - 21375 * (v242 - 512);
          v246 = 70388 * v236;
          v247 = 55169 * (v242 - 512);
          v248 = v247 + v244;
          v249 = v245 + v244;
          v250 = v246 + v244;
          v251 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v248 > 33538047)
            LOWORD(v251) = -1;
          v252 = (0xFFFF * ((v249 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v249 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v250 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v250 > 33538047)
            LOWORD(v253) = -1;
          if (v248 >= -16384)
            v254 = v251;
          else
            v254 = 0;
          *v228 = v254;
          if (v249 >= -16384)
            v255 = v252;
          else
            v255 = 0;
          v228[3] = -1;
          v256 = (*v25 >> v232) & 0x3FF;
          v25 = (_DWORD *)((char *)v25 + v234);
          v257 = 38267 * v256 - 2449088;
          v258 = v257 + v247;
          v228[1] = v255;
          v259 = 0xFFFF * ((v257 + v247 + 0x4000) >> 15) + 511;
          v260 = v257 + v245;
          if (v250 >= -16384)
            v261 = v253;
          else
            v261 = 0;
          v262 = v257 + v246;
          v263 = 0xFFFF * ((v262 + 0x4000) >> 15) + 511;
          v228[2] = v261;
          v264 = v259 / 0x3FF;
          if (v231 == 2)
            v231 = 0;
          else
            ++v231;
          if (v258 > 33538047)
            LOWORD(v264) = -1;
          v265 = (0xFFFF * ((v260 + 0x4000) >> 15) + 511) / 0x3FFu;
          v266 = (4198405 * (unint64_t)v263) >> 32;
          v267 = v263 - v266;
          if (v260 > 33538047)
            LOWORD(v265) = -1;
          v268 = (v266 + (v267 >> 1)) >> 9;
          if (v262 > 33538047)
            LOWORD(v268) = -1;
          if (v258 >= -16384)
            v269 = v264;
          else
            v269 = 0;
          *v229 = v269;
          if (v260 >= -16384)
            v270 = v265;
          else
            v270 = 0;
          v229[1] = v270;
          if (v262 >= -16384)
            v271 = v268;
          else
            v271 = 0;
          v229[2] = v271;
          v229[3] = -1;
          ++v72;
          v228 += 4;
          v229 += 4;
        }
        while (v230 != v72);
      }
      v24 = v286 + 4 * v279;
      v25 = &v285[v279];
      v17 = v289 + 1;
      v20 = v288 + v277;
      v26 = v284 + v277;
      v23 = &v287[v278];
      v18 = v281;
    }
    while (v289 + 1 != v280);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU709_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  __int16 *v54;
  __int16 v55;
  __int16 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  _WORD *v65;
  __int16 v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int16 v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  __int16 v102;
  __int16 v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  __int16 v108;
  int v109;
  int v110;
  int v111;
  __int16 *v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  __int16 v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  __int16 v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  __int16 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  __int16 v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  __int16 v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  __int16 v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  __int16 v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  __int16 v207;
  __int16 v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  __int16 v221;
  __int16 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  __int16 v226;
  uint64_t v227;
  _WORD *v228;
  _WORD *v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  _DWORD *v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  __int16 v254;
  __int16 v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  __int16 v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int v267;
  unsigned int v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  char v273;
  _DWORD *v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  unint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  unsigned int v293;
  uint64_t v294;
  int v295;

  v295 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v282 = v9 % 3;
    v275 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v280 = v12 >> 1;
    v19 = *a8 * a6[5];
    v20 = *a7 + v19;
    v21 = 8 * a6[4];
    v22 = a4[1];
    v23 = (_DWORD *)(a3[1] + v22 * (v8 >> 1) + 4 * (v9 / 3));
    v24 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v25 = (_DWORD *)(v24 + *a4);
    v279 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v278 = v22 >> 2;
    v276 = v11;
    v277 = 2 * *a8;
    v26 = *a7 + *a8 + v19;
    v281 = v18;
    v290 = v16;
    v283 = v21;
    do
    {
      v288 = v20;
      v289 = v17;
      v27 = 0;
      v284 = v26;
      v285 = v25;
      v28 = v20;
      v29 = v282;
      v30 = v282;
      v286 = v24;
      v287 = v23;
      v31 = (_DWORD *)v24;
      do
      {
        v32 = v31;
        v33 = *((unsigned __int8 *)&v295 + v29);
        v34 = *((unsigned __int8 *)&v295 + v30);
        v35 = ((*v23 >> v34) & 0x3FF) - 512;
        v36 = (_DWORD *)((char *)v23 + ((v34 >> 2) & 0x3C));
        if (v30 == 2)
          v37 = 0;
        else
          v37 = v30 + 1;
        v38 = *((unsigned __int8 *)&v295 + v37);
        v39 = *v36 >> v38;
        v40 = (_DWORD *)((char *)v36 + ((v38 >> 2) & 0x3C));
        v41 = v39 & 0x3FF;
        if (v37 == 2)
          v42 = 0;
        else
          v42 = v37 + 1;
        if ((v27 & 1) != 0)
        {
          v23 = v40;
          v30 = v42;
        }
        v43 = 38155 * ((*v32 >> v33) & 0x3FF) - 2441920;
        v44 = -6987 * v35 - 17461 * (v41 - 512);
        v45 = 69219 * v35;
        v46 = 58745 * (v41 - 512);
        v47 = v46 + v43;
        v48 = v44 + v43;
        v49 = v45 + v43;
        v50 = v25;
        if (v47 > 33538047)
          v51 = -1;
        else
          v51 = (0xFFFF * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        v52 = (0xFFFF * ((v49 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v48 > 33538047)
          v53 = -1;
        else
          v53 = (0xFFFF * ((v48 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v49 > 33538047)
          LOWORD(v52) = -1;
        v54 = (__int16 *)(v28 + v21);
        if (v47 >= -16384)
          v55 = v51;
        else
          v55 = 0;
        *v54 = v55;
        if (v48 >= -16384)
          v56 = v53;
        else
          v56 = 0;
        v57 = 38155 * ((*v50 >> v33) & 0x3FF) - 2441920;
        v58 = v57 + v46;
        v54[1] = v56;
        v59 = v57 + v44;
        if (v49 < -16384)
          LOWORD(v52) = 0;
        v60 = v57 + v45;
        v54[2] = v52;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v61 = (0xFFFF * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v58 > 33538047)
          LOWORD(v61) = -1;
        v62 = (0xFFFF * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOWORD(v62) = -1;
        v63 = (0xFFFF * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v60 > 33538047)
          LOWORD(v63) = -1;
        v64 = v58 < -16384;
        v54[3] = -1;
        v65 = (_WORD *)(v26 + v21);
        if (v64)
          v66 = 0;
        else
          v66 = v61;
        *v65 = v66;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v65[1] = v67;
        v64 = v60 < -16384;
        v68 = v33 >> 2;
        if (v64)
          v69 = 0;
        else
          v69 = v63;
        v65[2] = v69;
        v65[3] = -1;
        v31 = (_DWORD *)((char *)v32 + (v68 & 0x3C));
        v25 = (_DWORD *)((char *)v50 + (v68 & 0x3C));
        ++v27;
        v28 += 8;
        v26 += 8;
      }
      while (v18 != v27);
      if (v18 >= v16)
      {
        v21 = v283;
        v228 = (_WORD *)(v28 + v283);
        v229 = (_WORD *)(v26 + v283);
        v72 = v18;
        v230 = v276;
        v231 = v275;
      }
      else
      {
        v70 = 0;
        v273 = v68;
        v274 = v32;
        v291 = (char *)v50 + (v68 & 0x3C);
        v292 = (char *)v32 + (v68 & 0x3C);
        v71 = v283;
        v72 = v18;
        do
        {
          v294 = v71;
          v73 = &v291[v70];
          v74 = (_WORD *)(v28 + v71);
          v75 = v23[v70 / 4 + 1];
          v293 = v23[v70 / 4];
          v76 = (v293 & 0x3FF) - 512;
          v77 = ((v293 >> 10) & 0x3FF) - 512;
          v78 = *(_DWORD *)&v292[v70];
          v79 = *(_DWORD *)&v292[v70 + 4];
          v80 = 38155 * (v78 & 0x3FF) - 2441920;
          v81 = -6987 * v76 - 17461 * v77;
          v82 = 58745 * v77;
          v83 = 58745 * v77 + v80;
          v84 = 69219 * v76;
          v85 = v81 + v80;
          v86 = v80 + 69219 * v76;
          v87 = (0xFFFF * ((v83 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOWORD(v87) = -1;
          v88 = (0xFFFF * ((v85 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v85 > 33538047)
            LOWORD(v88) = -1;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          if (v83 < -16384)
            LOWORD(v87) = 0;
          *v74 = v87;
          if (v85 >= -16384)
            v90 = v88;
          else
            v90 = 0;
          v91 = 38155 * ((v78 >> 10) & 0x3FF) - 2441920;
          v92 = v91 + v82;
          v64 = v86 < -16384;
          v93 = 0xFFFF * ((v91 + v82 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v74[1] = v90;
          v95 = 0xFFFF * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v91 + v84;
          v97 = v91 + v84 + 0x4000;
          if (v64)
            LOWORD(v89) = 0;
          v98 = 0xFFFF * (v97 >> 15) + 511;
          v74[2] = v89;
          v99 = v93 / 0x3FF;
          if (v92 > 33538047)
            LOWORD(v99) = -1;
          v100 = v95 / 0x3FF;
          v101 = v98 / 0x3FF;
          if (v94 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          if (v96 > 33538047)
            LOWORD(v101) = -1;
          if (v92 >= -16384)
            v103 = v99;
          else
            v103 = 0;
          v64 = v94 < -16384;
          v74[4] = v103;
          v104 = *(_DWORD *)v73;
          v105 = *((_DWORD *)v73 + 1);
          v106 = 38155 * (*(_DWORD *)v73 & 0x3FF) - 2441920;
          v107 = v106 + v82;
          if (v64)
            v108 = 0;
          else
            v108 = v102;
          v64 = v96 < -16384;
          v109 = v81 + v106;
          v110 = 0xFFFF * ((v81 + v106 + 0x4000) >> 15);
          v74[5] = v108;
          v111 = v106 + v84;
          v112 = (__int16 *)(v26 + v294);
          v74[3] = -1;
          if (v64)
            LOWORD(v101) = 0;
          v74[7] = -1;
          v74[6] = v101;
          v113 = (v110 + 511) / 0x3FFu;
          if (v107 > 33538047)
            v114 = -1;
          else
            v114 = (0xFFFF * ((v107 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOWORD(v113) = -1;
          v115 = (0xFFFF * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v115) = -1;
          if (v107 < -16384)
            v114 = 0;
          *v112 = v114;
          v116 = 38155 * ((v104 >> 10) & 0x3FF) - 2441920;
          v117 = v116 + v82;
          v118 = v116 + v82 + 0x4000;
          if (v109 < -16384)
            LOWORD(v113) = 0;
          v119 = 0xFFFF * (v118 >> 15) + 511;
          v120 = v116 + v81;
          v64 = v111 < -16384;
          v121 = 0xFFFF * ((v120 + 0x4000) >> 15) + 511;
          v112[1] = v113;
          v122 = v116 + v84;
          v123 = 0xFFFF * ((v116 + v84 + 0x4000) >> 15);
          if (v64)
            v124 = 0;
          else
            v124 = v115;
          v125 = v123 + 511;
          v112[2] = v124;
          v126 = v119 / 0x3FF;
          v127 = (4198405 * (unint64_t)v121) >> 32;
          v128 = v121 - v127;
          if (v117 > 33538047)
            LOWORD(v126) = -1;
          v129 = (v127 + (v128 >> 1)) >> 9;
          if (v120 > 33538047)
            LOWORD(v129) = -1;
          v130 = v125 / 0x3FF;
          if (v122 > 33538047)
            v131 = -1;
          else
            v131 = v130;
          if (v117 < -16384)
            LOWORD(v126) = 0;
          v132 = ((v293 >> 20) & 0x3FF) - 512;
          v133 = (v75 & 0x3FF) - 512;
          v64 = v120 < -16384;
          v134 = 38155 * ((v78 >> 20) & 0x3FF) - 2441920;
          v135 = -6987 * v132 - 17461 * v133;
          v136 = 69219 * v132;
          v112[4] = v126;
          v137 = 58745 * v133;
          v138 = 58745 * v133 + v134;
          if (v64)
            LOWORD(v129) = 0;
          v139 = v135 + v134;
          v64 = v122 < -16384;
          v140 = 0xFFFF * ((v135 + v134 + 0x4000) >> 15);
          v141 = v134 + v136;
          v142 = 0xFFFF * ((v134 + v136 + 0x4000) >> 15);
          v112[5] = v129;
          v112[3] = -1;
          if (v64)
            v143 = 0;
          else
            v143 = v131;
          v112[7] = -1;
          v144 = v140 + 511;
          v145 = v142 + 511;
          v112[6] = v143;
          v146 = (0xFFFF * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v144) >> 32;
          v148 = v144 - v147;
          if (v138 > 33538047)
            LOWORD(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v139 > 33538047)
            LOWORD(v149) = -1;
          v150 = v145 / 0x3FF;
          if (v141 > 33538047)
            LOWORD(v150) = -1;
          if (v138 < -16384)
            LOWORD(v146) = 0;
          v74[8] = v146;
          if (v139 < -16384)
            LOWORD(v149) = 0;
          v64 = v141 < -16384;
          v151 = 38155 * (v79 & 0x3FF) - 2441920;
          v152 = v151 + v137;
          v74[9] = v149;
          v153 = 0xFFFF * ((v151 + v137 + 0x4000) >> 15) + 511;
          v154 = v151 + v135;
          if (v64)
            LOWORD(v150) = 0;
          v155 = 0xFFFF * ((v151 + v135 + 0x4000) >> 15) + 511;
          v156 = v151 + v136;
          v74[10] = v150;
          v74[11] = -1;
          v157 = v153 / 0x3FF;
          if (v152 > 33538047)
            LOWORD(v157) = -1;
          v158 = v155 / 0x3FF;
          v159 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v154 > 33538047)
            LOWORD(v158) = -1;
          if (v156 > 33538047)
            LOWORD(v159) = -1;
          if (v152 < -16384)
            LOWORD(v157) = 0;
          v74[12] = v157;
          v74[15] = -1;
          v160 = 38155 * ((v104 >> 20) & 0x3FF) - 2441920;
          v161 = v137 + v160;
          if (v154 >= -16384)
            v162 = v158;
          else
            v162 = 0;
          v163 = 0xFFFF * ((v137 + v160 + 0x4000) >> 15) + 511;
          v164 = v135 + v160;
          v64 = v156 < -16384;
          v165 = 0xFFFF * ((v135 + v160 + 0x4000) >> 15) + 511;
          v74[13] = v162;
          v166 = v160 + v136;
          if (v64)
            LOWORD(v159) = 0;
          v74[14] = v159;
          v167 = v163 / 0x3FF;
          v168 = (4198405 * (unint64_t)v165) >> 32;
          v169 = v165 - v168;
          if (v161 > 33538047)
            LOWORD(v167) = -1;
          v170 = (v168 + (v169 >> 1)) >> 9;
          if (v164 > 33538047)
            LOWORD(v170) = -1;
          v171 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v171) = -1;
          if (v161 >= -16384)
            v172 = v167;
          else
            v172 = 0;
          v112[8] = v172;
          v112[11] = -1;
          if (v164 < -16384)
            LOWORD(v170) = 0;
          v173 = 38155 * (v105 & 0x3FF) - 2441920;
          v174 = v173 + v137;
          v175 = v173 + v135;
          v112[9] = v170;
          v176 = v173 + v136;
          v177 = v173 + v136 + 0x4000;
          if (v166 >= -16384)
            v178 = v171;
          else
            v178 = 0;
          v179 = 0xFFFF * (v177 >> 15) + 511;
          v112[10] = v178;
          v180 = (0xFFFF * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            LOWORD(v180) = -1;
          v181 = (0xFFFF * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          v182 = v179 / 0x3FF;
          if (v175 > 33538047)
            LOWORD(v181) = -1;
          if (v176 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v174 < -16384)
            LOWORD(v180) = 0;
          v112[15] = -1;
          v64 = v175 < -16384;
          v184 = ((v75 >> 10) & 0x3FF) - 512;
          v185 = ((v75 >> 20) & 0x3FF) - 512;
          v112[12] = v180;
          v186 = 38155 * ((v79 >> 10) & 0x3FF) - 2441920;
          v187 = -17461 * v185 - 6987 * v184;
          v188 = 69219 * v184;
          v189 = 58745 * v185;
          if (v64)
            LOWORD(v181) = 0;
          v190 = v186 + v189;
          v64 = v176 < -16384;
          v191 = 0xFFFF * ((v186 + v189 + 0x4000) >> 15) + 511;
          v192 = v186 + v187;
          v112[13] = v181;
          v193 = 0xFFFF * ((v186 + v187 + 0x4000) >> 15) + 511;
          v194 = v186 + v188;
          if (v64)
            v183 = 0;
          v112[14] = v183;
          v195 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOWORD(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v192 > 33538047)
            LOWORD(v196) = -1;
          v197 = (0xFFFF * ((v194 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v194 > 33538047)
            LOWORD(v197) = -1;
          v64 = v190 < -16384;
          v198 = 38155 * ((v79 >> 20) & 0x3FF) - 2441920;
          v199 = v198 + v189;
          if (v64)
            LOWORD(v195) = 0;
          v64 = v192 < -16384;
          v200 = v198 + v187;
          v201 = 0xFFFF * ((v198 + v187 + 0x4000) >> 15);
          v74[16] = v195;
          v202 = v198 + v188;
          if (v64)
            LOWORD(v196) = 0;
          v74[17] = v196;
          if (v194 >= -16384)
            v203 = v197;
          else
            v203 = 0;
          v74[18] = v203;
          v204 = (0xFFFF * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v290;
          if (v199 > 33538047)
            LOWORD(v204) = -1;
          v205 = (v201 + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v205) = -1;
          v206 = (0xFFFF * ((v202 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v202 > 33538047)
            LOWORD(v206) = -1;
          if (v199 >= -16384)
            v207 = v204;
          else
            v207 = 0;
          v74[20] = v207;
          if (v200 < -16384)
            LOWORD(v205) = 0;
          v74[21] = v205;
          if (v202 >= -16384)
            v208 = v206;
          else
            v208 = 0;
          v209 = 38155 * ((v105 >> 10) & 0x3FF) - 2441920;
          v210 = v209 + v189;
          v74[22] = v208;
          v211 = v209 + v187;
          v74[19] = -1;
          v212 = 0xFFFF * ((v209 + v187 + 0x4000) >> 15) + 511;
          v213 = v209 + v188;
          v74[23] = -1;
          v214 = (0xFFFF * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOWORD(v214) = -1;
          v215 = v212 / 0x3FF;
          if (v211 > 33538047)
            LOWORD(v215) = -1;
          v216 = (0xFFFF * ((v213 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v213 > 33538047)
            LOWORD(v216) = -1;
          v64 = v210 < -16384;
          v217 = 38155 * ((v105 >> 20) & 0x3FF) - 2441920;
          v218 = v217 + v189;
          if (v64)
            LOWORD(v214) = 0;
          v219 = v217 + v187;
          v112[16] = v214;
          v220 = v217 + v188;
          if (v211 >= -16384)
            v221 = v215;
          else
            v221 = 0;
          v112[17] = v221;
          if (v213 >= -16384)
            v222 = v216;
          else
            v222 = 0;
          v112[18] = v222;
          v223 = (0xFFFF * ((v218 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 > 33538047)
            LOWORD(v223) = -1;
          v224 = (0xFFFF * ((v219 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v219 > 33538047)
            LOWORD(v224) = -1;
          v225 = (0xFFFF * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOWORD(v225) = -1;
          if (v218 < -16384)
            LOWORD(v223) = 0;
          v112[20] = v223;
          if (v219 < -16384)
            LOWORD(v224) = 0;
          v112[21] = v224;
          if (v220 >= -16384)
            v226 = v225;
          else
            v226 = 0;
          v112[22] = v226;
          v112[19] = -1;
          v112[23] = -1;
          v72 += 6;
          v70 += 8;
          v71 = v294 + 48;
        }
        while (v72 < v290);
        v227 = v273 & 0x3C;
        v31 = (_DWORD *)((char *)v274 + v227 + v70);
        v25 = (_DWORD *)((char *)v50 + v227 + v70);
        v23 = (_DWORD *)((char *)v23 + v70);
        v228 = (_WORD *)(v28 + v71);
        v229 = (_WORD *)(v26 + v71);
        v230 = v276;
        v231 = v275;
        v21 = v283;
      }
      if (v72 < v230)
      {
        do
        {
          v232 = *((unsigned __int8 *)&v295 + v231);
          v233 = (*v31 >> v232) & 0x3FF;
          v234 = (v232 >> 2) & 0x3C;
          v235 = *((unsigned __int8 *)&v295 + v30);
          v31 = (_DWORD *)((char *)v31 + v234);
          v236 = ((*v23 >> v235) & 0x3FF) - 512;
          v237 = (_DWORD *)((char *)v23 + ((v235 >> 2) & 0x3C));
          if (v30 == 2)
            v238 = 0;
          else
            v238 = v30 + 1;
          v239 = *((unsigned __int8 *)&v295 + v238);
          v240 = *v237 >> v239;
          v241 = (_DWORD *)((char *)v237 + ((v239 >> 2) & 0x3C));
          v242 = v240 & 0x3FF;
          if (v238 == 2)
            v243 = 0;
          else
            v243 = v238 + 1;
          if ((v72 & 1) != 0)
          {
            v23 = v241;
            v30 = v243;
          }
          v244 = 38155 * v233 - 2441920;
          v245 = -6987 * v236 - 17461 * (v242 - 512);
          v246 = 69219 * v236;
          v247 = 58745 * (v242 - 512);
          v248 = v247 + v244;
          v249 = v245 + v244;
          v250 = v246 + v244;
          v251 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v248 > 33538047)
            LOWORD(v251) = -1;
          v252 = (0xFFFF * ((v249 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v249 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v250 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v250 > 33538047)
            LOWORD(v253) = -1;
          if (v248 >= -16384)
            v254 = v251;
          else
            v254 = 0;
          *v228 = v254;
          if (v249 >= -16384)
            v255 = v252;
          else
            v255 = 0;
          v228[3] = -1;
          v256 = (*v25 >> v232) & 0x3FF;
          v25 = (_DWORD *)((char *)v25 + v234);
          v257 = 38155 * v256 - 2441920;
          v258 = v257 + v247;
          v228[1] = v255;
          v259 = 0xFFFF * ((v257 + v247 + 0x4000) >> 15) + 511;
          v260 = v257 + v245;
          if (v250 >= -16384)
            v261 = v253;
          else
            v261 = 0;
          v262 = v257 + v246;
          v263 = 0xFFFF * ((v262 + 0x4000) >> 15) + 511;
          v228[2] = v261;
          v264 = v259 / 0x3FF;
          if (v231 == 2)
            v231 = 0;
          else
            ++v231;
          if (v258 > 33538047)
            LOWORD(v264) = -1;
          v265 = (0xFFFF * ((v260 + 0x4000) >> 15) + 511) / 0x3FFu;
          v266 = (4198405 * (unint64_t)v263) >> 32;
          v267 = v263 - v266;
          if (v260 > 33538047)
            LOWORD(v265) = -1;
          v268 = (v266 + (v267 >> 1)) >> 9;
          if (v262 > 33538047)
            LOWORD(v268) = -1;
          if (v258 >= -16384)
            v269 = v264;
          else
            v269 = 0;
          *v229 = v269;
          if (v260 >= -16384)
            v270 = v265;
          else
            v270 = 0;
          v229[1] = v270;
          if (v262 >= -16384)
            v271 = v268;
          else
            v271 = 0;
          v229[2] = v271;
          v229[3] = -1;
          ++v72;
          v228 += 4;
          v229 += 4;
        }
        while (v230 != v72);
      }
      v24 = v286 + 4 * v279;
      v25 = &v285[v279];
      v17 = v289 + 1;
      v20 = v288 + v277;
      v26 = v284 + v277;
      v23 = &v287[v278];
      v18 = v281;
    }
    while (v289 + 1 != v280);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU601_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  __int16 *v54;
  __int16 v55;
  __int16 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  _WORD *v65;
  __int16 v66;
  __int16 v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int16 v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  __int16 v102;
  __int16 v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  __int16 v108;
  int v109;
  int v110;
  int v111;
  __int16 *v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  __int16 v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  __int16 v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  __int16 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  __int16 v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  __int16 v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  __int16 v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  __int16 v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  __int16 v207;
  __int16 v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  __int16 v221;
  __int16 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  __int16 v226;
  uint64_t v227;
  _WORD *v228;
  _WORD *v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  _DWORD *v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  __int16 v254;
  __int16 v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  __int16 v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int v267;
  unsigned int v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  char v273;
  _DWORD *v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  unint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  unsigned int v293;
  uint64_t v294;
  int v295;

  v295 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v282 = v9 % 3;
    v275 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v280 = v12 >> 1;
    v19 = *a8 * a6[5];
    v20 = *a7 + v19;
    v21 = 8 * a6[4];
    v22 = a4[1];
    v23 = (_DWORD *)(a3[1] + v22 * (v8 >> 1) + 4 * (v9 / 3));
    v24 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v25 = (_DWORD *)(v24 + *a4);
    v279 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v278 = v22 >> 2;
    v276 = v11;
    v277 = 2 * *a8;
    v26 = *a7 + *a8 + v19;
    v281 = v18;
    v290 = v16;
    v283 = v21;
    do
    {
      v288 = v20;
      v289 = v17;
      v27 = 0;
      v284 = v26;
      v285 = v25;
      v28 = v20;
      v29 = v282;
      v30 = v282;
      v286 = v24;
      v287 = v23;
      v31 = (_DWORD *)v24;
      do
      {
        v32 = v31;
        v33 = *((unsigned __int8 *)&v295 + v29);
        v34 = *((unsigned __int8 *)&v295 + v30);
        v35 = ((*v23 >> v34) & 0x3FF) - 512;
        v36 = (_DWORD *)((char *)v23 + ((v34 >> 2) & 0x3C));
        if (v30 == 2)
          v37 = 0;
        else
          v37 = v30 + 1;
        v38 = *((unsigned __int8 *)&v295 + v37);
        v39 = *v36 >> v38;
        v40 = (_DWORD *)((char *)v36 + ((v38 >> 2) & 0x3C));
        v41 = v39 & 0x3FF;
        if (v37 == 2)
          v42 = 0;
        else
          v42 = v37 + 1;
        if ((v27 & 1) != 0)
        {
          v23 = v40;
          v30 = v42;
        }
        v43 = 38155 * ((*v32 >> v33) & 0x3FF) - 2441920;
        v44 = -12836 * v35 - 26638 * (v41 - 512);
        v45 = 66101 * v35;
        v46 = 52299 * (v41 - 512);
        v47 = v46 + v43;
        v48 = v44 + v43;
        v49 = v45 + v43;
        v50 = v25;
        if (v47 > 33538047)
          v51 = -1;
        else
          v51 = (0xFFFF * ((v47 + 0x4000) >> 15) + 511) / 0x3FFu;
        v52 = (0xFFFF * ((v49 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v48 > 33538047)
          v53 = -1;
        else
          v53 = (0xFFFF * ((v48 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v49 > 33538047)
          LOWORD(v52) = -1;
        v54 = (__int16 *)(v28 + v21);
        if (v47 >= -16384)
          v55 = v51;
        else
          v55 = 0;
        *v54 = v55;
        if (v48 >= -16384)
          v56 = v53;
        else
          v56 = 0;
        v57 = 38155 * ((*v50 >> v33) & 0x3FF) - 2441920;
        v58 = v57 + v46;
        v54[1] = v56;
        v59 = v57 + v44;
        if (v49 < -16384)
          LOWORD(v52) = 0;
        v60 = v57 + v45;
        v54[2] = v52;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v61 = (0xFFFF * ((v58 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v58 > 33538047)
          LOWORD(v61) = -1;
        v62 = (0xFFFF * ((v59 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v59 > 33538047)
          LOWORD(v62) = -1;
        v63 = (0xFFFF * ((v60 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v60 > 33538047)
          LOWORD(v63) = -1;
        v64 = v58 < -16384;
        v54[3] = -1;
        v65 = (_WORD *)(v26 + v21);
        if (v64)
          v66 = 0;
        else
          v66 = v61;
        *v65 = v66;
        if (v59 >= -16384)
          v67 = v62;
        else
          v67 = 0;
        v65[1] = v67;
        v64 = v60 < -16384;
        v68 = v33 >> 2;
        if (v64)
          v69 = 0;
        else
          v69 = v63;
        v65[2] = v69;
        v65[3] = -1;
        v31 = (_DWORD *)((char *)v32 + (v68 & 0x3C));
        v25 = (_DWORD *)((char *)v50 + (v68 & 0x3C));
        ++v27;
        v28 += 8;
        v26 += 8;
      }
      while (v18 != v27);
      if (v18 >= v16)
      {
        v21 = v283;
        v228 = (_WORD *)(v28 + v283);
        v229 = (_WORD *)(v26 + v283);
        v72 = v18;
        v230 = v276;
        v231 = v275;
      }
      else
      {
        v70 = 0;
        v273 = v68;
        v274 = v32;
        v291 = (char *)v50 + (v68 & 0x3C);
        v292 = (char *)v32 + (v68 & 0x3C);
        v71 = v283;
        v72 = v18;
        do
        {
          v294 = v71;
          v73 = &v291[v70];
          v74 = (_WORD *)(v28 + v71);
          v75 = v23[v70 / 4 + 1];
          v293 = v23[v70 / 4];
          v76 = (v293 & 0x3FF) - 512;
          v77 = ((v293 >> 10) & 0x3FF) - 512;
          v78 = *(_DWORD *)&v292[v70];
          v79 = *(_DWORD *)&v292[v70 + 4];
          v80 = 38155 * (v78 & 0x3FF) - 2441920;
          v81 = -12836 * v76 - 26638 * v77;
          v82 = 52299 * v77;
          v83 = 52299 * v77 + v80;
          v84 = 66101 * v76;
          v85 = v81 + v80;
          v86 = v80 + 66101 * v76;
          v87 = (0xFFFF * ((v83 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v83 > 33538047)
            LOWORD(v87) = -1;
          v88 = (0xFFFF * ((v85 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v85 > 33538047)
            LOWORD(v88) = -1;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          if (v83 < -16384)
            LOWORD(v87) = 0;
          *v74 = v87;
          if (v85 >= -16384)
            v90 = v88;
          else
            v90 = 0;
          v91 = 38155 * ((v78 >> 10) & 0x3FF) - 2441920;
          v92 = v91 + v82;
          v64 = v86 < -16384;
          v93 = 0xFFFF * ((v91 + v82 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v74[1] = v90;
          v95 = 0xFFFF * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v91 + v84;
          v97 = v91 + v84 + 0x4000;
          if (v64)
            LOWORD(v89) = 0;
          v98 = 0xFFFF * (v97 >> 15) + 511;
          v74[2] = v89;
          v99 = v93 / 0x3FF;
          if (v92 > 33538047)
            LOWORD(v99) = -1;
          v100 = v95 / 0x3FF;
          v101 = v98 / 0x3FF;
          if (v94 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          if (v96 > 33538047)
            LOWORD(v101) = -1;
          if (v92 >= -16384)
            v103 = v99;
          else
            v103 = 0;
          v64 = v94 < -16384;
          v74[4] = v103;
          v104 = *(_DWORD *)v73;
          v105 = *((_DWORD *)v73 + 1);
          v106 = 38155 * (*(_DWORD *)v73 & 0x3FF) - 2441920;
          v107 = v106 + v82;
          if (v64)
            v108 = 0;
          else
            v108 = v102;
          v64 = v96 < -16384;
          v109 = v81 + v106;
          v110 = 0xFFFF * ((v81 + v106 + 0x4000) >> 15);
          v74[5] = v108;
          v111 = v106 + v84;
          v112 = (__int16 *)(v26 + v294);
          v74[3] = -1;
          if (v64)
            LOWORD(v101) = 0;
          v74[7] = -1;
          v74[6] = v101;
          v113 = (v110 + 511) / 0x3FFu;
          if (v107 > 33538047)
            v114 = -1;
          else
            v114 = (0xFFFF * ((v107 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v109 > 33538047)
            LOWORD(v113) = -1;
          v115 = (0xFFFF * ((v111 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v115) = -1;
          if (v107 < -16384)
            v114 = 0;
          *v112 = v114;
          v116 = 38155 * ((v104 >> 10) & 0x3FF) - 2441920;
          v117 = v116 + v82;
          v118 = v116 + v82 + 0x4000;
          if (v109 < -16384)
            LOWORD(v113) = 0;
          v119 = 0xFFFF * (v118 >> 15) + 511;
          v120 = v116 + v81;
          v64 = v111 < -16384;
          v121 = 0xFFFF * ((v120 + 0x4000) >> 15) + 511;
          v112[1] = v113;
          v122 = v116 + v84;
          v123 = 0xFFFF * ((v116 + v84 + 0x4000) >> 15);
          if (v64)
            v124 = 0;
          else
            v124 = v115;
          v125 = v123 + 511;
          v112[2] = v124;
          v126 = v119 / 0x3FF;
          v127 = (4198405 * (unint64_t)v121) >> 32;
          v128 = v121 - v127;
          if (v117 > 33538047)
            LOWORD(v126) = -1;
          v129 = (v127 + (v128 >> 1)) >> 9;
          if (v120 > 33538047)
            LOWORD(v129) = -1;
          v130 = v125 / 0x3FF;
          if (v122 > 33538047)
            v131 = -1;
          else
            v131 = v130;
          if (v117 < -16384)
            LOWORD(v126) = 0;
          v132 = ((v293 >> 20) & 0x3FF) - 512;
          v133 = (v75 & 0x3FF) - 512;
          v64 = v120 < -16384;
          v134 = 38155 * ((v78 >> 20) & 0x3FF) - 2441920;
          v135 = -12836 * v132 - 26638 * v133;
          v136 = 66101 * v132;
          v112[4] = v126;
          v137 = 52299 * v133;
          v138 = 52299 * v133 + v134;
          if (v64)
            LOWORD(v129) = 0;
          v139 = v135 + v134;
          v64 = v122 < -16384;
          v140 = 0xFFFF * ((v135 + v134 + 0x4000) >> 15);
          v141 = v134 + v136;
          v142 = 0xFFFF * ((v134 + v136 + 0x4000) >> 15);
          v112[5] = v129;
          v112[3] = -1;
          if (v64)
            v143 = 0;
          else
            v143 = v131;
          v112[7] = -1;
          v144 = v140 + 511;
          v145 = v142 + 511;
          v112[6] = v143;
          v146 = (0xFFFF * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v144) >> 32;
          v148 = v144 - v147;
          if (v138 > 33538047)
            LOWORD(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v139 > 33538047)
            LOWORD(v149) = -1;
          v150 = v145 / 0x3FF;
          if (v141 > 33538047)
            LOWORD(v150) = -1;
          if (v138 < -16384)
            LOWORD(v146) = 0;
          v74[8] = v146;
          if (v139 < -16384)
            LOWORD(v149) = 0;
          v64 = v141 < -16384;
          v151 = 38155 * (v79 & 0x3FF) - 2441920;
          v152 = v151 + v137;
          v74[9] = v149;
          v153 = 0xFFFF * ((v151 + v137 + 0x4000) >> 15) + 511;
          v154 = v151 + v135;
          if (v64)
            LOWORD(v150) = 0;
          v155 = 0xFFFF * ((v151 + v135 + 0x4000) >> 15) + 511;
          v156 = v151 + v136;
          v74[10] = v150;
          v74[11] = -1;
          v157 = v153 / 0x3FF;
          if (v152 > 33538047)
            LOWORD(v157) = -1;
          v158 = v155 / 0x3FF;
          v159 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v154 > 33538047)
            LOWORD(v158) = -1;
          if (v156 > 33538047)
            LOWORD(v159) = -1;
          if (v152 < -16384)
            LOWORD(v157) = 0;
          v74[12] = v157;
          v74[15] = -1;
          v160 = 38155 * ((v104 >> 20) & 0x3FF) - 2441920;
          v161 = v137 + v160;
          if (v154 >= -16384)
            v162 = v158;
          else
            v162 = 0;
          v163 = 0xFFFF * ((v137 + v160 + 0x4000) >> 15) + 511;
          v164 = v135 + v160;
          v64 = v156 < -16384;
          v165 = 0xFFFF * ((v135 + v160 + 0x4000) >> 15) + 511;
          v74[13] = v162;
          v166 = v160 + v136;
          if (v64)
            LOWORD(v159) = 0;
          v74[14] = v159;
          v167 = v163 / 0x3FF;
          v168 = (4198405 * (unint64_t)v165) >> 32;
          v169 = v165 - v168;
          if (v161 > 33538047)
            LOWORD(v167) = -1;
          v170 = (v168 + (v169 >> 1)) >> 9;
          if (v164 > 33538047)
            LOWORD(v170) = -1;
          v171 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v171) = -1;
          if (v161 >= -16384)
            v172 = v167;
          else
            v172 = 0;
          v112[8] = v172;
          v112[11] = -1;
          if (v164 < -16384)
            LOWORD(v170) = 0;
          v173 = 38155 * (v105 & 0x3FF) - 2441920;
          v174 = v173 + v137;
          v175 = v173 + v135;
          v112[9] = v170;
          v176 = v173 + v136;
          v177 = v173 + v136 + 0x4000;
          if (v166 >= -16384)
            v178 = v171;
          else
            v178 = 0;
          v179 = 0xFFFF * (v177 >> 15) + 511;
          v112[10] = v178;
          v180 = (0xFFFF * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            LOWORD(v180) = -1;
          v181 = (0xFFFF * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          v182 = v179 / 0x3FF;
          if (v175 > 33538047)
            LOWORD(v181) = -1;
          if (v176 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v174 < -16384)
            LOWORD(v180) = 0;
          v112[15] = -1;
          v64 = v175 < -16384;
          v184 = ((v75 >> 10) & 0x3FF) - 512;
          v185 = ((v75 >> 20) & 0x3FF) - 512;
          v112[12] = v180;
          v186 = 38155 * ((v79 >> 10) & 0x3FF) - 2441920;
          v187 = -26638 * v185 - 12836 * v184;
          v188 = 66101 * v184;
          v189 = 52299 * v185;
          if (v64)
            LOWORD(v181) = 0;
          v190 = v186 + v189;
          v64 = v176 < -16384;
          v191 = 0xFFFF * ((v186 + v189 + 0x4000) >> 15) + 511;
          v192 = v186 + v187;
          v112[13] = v181;
          v193 = 0xFFFF * ((v186 + v187 + 0x4000) >> 15) + 511;
          v194 = v186 + v188;
          if (v64)
            v183 = 0;
          v112[14] = v183;
          v195 = v191 / 0x3FF;
          if (v190 > 33538047)
            LOWORD(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v192 > 33538047)
            LOWORD(v196) = -1;
          v197 = (0xFFFF * ((v194 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v194 > 33538047)
            LOWORD(v197) = -1;
          v64 = v190 < -16384;
          v198 = 38155 * ((v79 >> 20) & 0x3FF) - 2441920;
          v199 = v198 + v189;
          if (v64)
            LOWORD(v195) = 0;
          v64 = v192 < -16384;
          v200 = v198 + v187;
          v201 = 0xFFFF * ((v198 + v187 + 0x4000) >> 15);
          v74[16] = v195;
          v202 = v198 + v188;
          if (v64)
            LOWORD(v196) = 0;
          v74[17] = v196;
          if (v194 >= -16384)
            v203 = v197;
          else
            v203 = 0;
          v74[18] = v203;
          v204 = (0xFFFF * ((v199 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v290;
          if (v199 > 33538047)
            LOWORD(v204) = -1;
          v205 = (v201 + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v205) = -1;
          v206 = (0xFFFF * ((v202 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v202 > 33538047)
            LOWORD(v206) = -1;
          if (v199 >= -16384)
            v207 = v204;
          else
            v207 = 0;
          v74[20] = v207;
          if (v200 < -16384)
            LOWORD(v205) = 0;
          v74[21] = v205;
          if (v202 >= -16384)
            v208 = v206;
          else
            v208 = 0;
          v209 = 38155 * ((v105 >> 10) & 0x3FF) - 2441920;
          v210 = v209 + v189;
          v74[22] = v208;
          v211 = v209 + v187;
          v74[19] = -1;
          v212 = 0xFFFF * ((v209 + v187 + 0x4000) >> 15) + 511;
          v213 = v209 + v188;
          v74[23] = -1;
          v214 = (0xFFFF * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOWORD(v214) = -1;
          v215 = v212 / 0x3FF;
          if (v211 > 33538047)
            LOWORD(v215) = -1;
          v216 = (0xFFFF * ((v213 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v213 > 33538047)
            LOWORD(v216) = -1;
          v64 = v210 < -16384;
          v217 = 38155 * ((v105 >> 20) & 0x3FF) - 2441920;
          v218 = v217 + v189;
          if (v64)
            LOWORD(v214) = 0;
          v219 = v217 + v187;
          v112[16] = v214;
          v220 = v217 + v188;
          if (v211 >= -16384)
            v221 = v215;
          else
            v221 = 0;
          v112[17] = v221;
          if (v213 >= -16384)
            v222 = v216;
          else
            v222 = 0;
          v112[18] = v222;
          v223 = (0xFFFF * ((v218 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 > 33538047)
            LOWORD(v223) = -1;
          v224 = (0xFFFF * ((v219 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v219 > 33538047)
            LOWORD(v224) = -1;
          v225 = (0xFFFF * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOWORD(v225) = -1;
          if (v218 < -16384)
            LOWORD(v223) = 0;
          v112[20] = v223;
          if (v219 < -16384)
            LOWORD(v224) = 0;
          v112[21] = v224;
          if (v220 >= -16384)
            v226 = v225;
          else
            v226 = 0;
          v112[22] = v226;
          v112[19] = -1;
          v112[23] = -1;
          v72 += 6;
          v70 += 8;
          v71 = v294 + 48;
        }
        while (v72 < v290);
        v227 = v273 & 0x3C;
        v31 = (_DWORD *)((char *)v274 + v227 + v70);
        v25 = (_DWORD *)((char *)v50 + v227 + v70);
        v23 = (_DWORD *)((char *)v23 + v70);
        v228 = (_WORD *)(v28 + v71);
        v229 = (_WORD *)(v26 + v71);
        v230 = v276;
        v231 = v275;
        v21 = v283;
      }
      if (v72 < v230)
      {
        do
        {
          v232 = *((unsigned __int8 *)&v295 + v231);
          v233 = (*v31 >> v232) & 0x3FF;
          v234 = (v232 >> 2) & 0x3C;
          v235 = *((unsigned __int8 *)&v295 + v30);
          v31 = (_DWORD *)((char *)v31 + v234);
          v236 = ((*v23 >> v235) & 0x3FF) - 512;
          v237 = (_DWORD *)((char *)v23 + ((v235 >> 2) & 0x3C));
          if (v30 == 2)
            v238 = 0;
          else
            v238 = v30 + 1;
          v239 = *((unsigned __int8 *)&v295 + v238);
          v240 = *v237 >> v239;
          v241 = (_DWORD *)((char *)v237 + ((v239 >> 2) & 0x3C));
          v242 = v240 & 0x3FF;
          if (v238 == 2)
            v243 = 0;
          else
            v243 = v238 + 1;
          if ((v72 & 1) != 0)
          {
            v23 = v241;
            v30 = v243;
          }
          v244 = 38155 * v233 - 2441920;
          v245 = -12836 * v236 - 26638 * (v242 - 512);
          v246 = 66101 * v236;
          v247 = 52299 * (v242 - 512);
          v248 = v247 + v244;
          v249 = v245 + v244;
          v250 = v246 + v244;
          v251 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v248 > 33538047)
            LOWORD(v251) = -1;
          v252 = (0xFFFF * ((v249 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v249 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v250 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v250 > 33538047)
            LOWORD(v253) = -1;
          if (v248 >= -16384)
            v254 = v251;
          else
            v254 = 0;
          *v228 = v254;
          if (v249 >= -16384)
            v255 = v252;
          else
            v255 = 0;
          v228[3] = -1;
          v256 = (*v25 >> v232) & 0x3FF;
          v25 = (_DWORD *)((char *)v25 + v234);
          v257 = 38155 * v256 - 2441920;
          v258 = v257 + v247;
          v228[1] = v255;
          v259 = 0xFFFF * ((v257 + v247 + 0x4000) >> 15) + 511;
          v260 = v257 + v245;
          if (v250 >= -16384)
            v261 = v253;
          else
            v261 = 0;
          v262 = v257 + v246;
          v263 = 0xFFFF * ((v262 + 0x4000) >> 15) + 511;
          v228[2] = v261;
          v264 = v259 / 0x3FF;
          if (v231 == 2)
            v231 = 0;
          else
            ++v231;
          if (v258 > 33538047)
            LOWORD(v264) = -1;
          v265 = (0xFFFF * ((v260 + 0x4000) >> 15) + 511) / 0x3FFu;
          v266 = (4198405 * (unint64_t)v263) >> 32;
          v267 = v263 - v266;
          if (v260 > 33538047)
            LOWORD(v265) = -1;
          v268 = (v266 + (v267 >> 1)) >> 9;
          if (v262 > 33538047)
            LOWORD(v268) = -1;
          if (v258 >= -16384)
            v269 = v264;
          else
            v269 = 0;
          *v229 = v269;
          if (v260 >= -16384)
            v270 = v265;
          else
            v270 = 0;
          v229[1] = v270;
          if (v262 >= -16384)
            v271 = v268;
          else
            v271 = 0;
          v229[2] = v271;
          v229[3] = -1;
          ++v72;
          v228 += 4;
          v229 += 4;
        }
        while (v230 != v72);
      }
      v24 = v286 + 4 * v279;
      v25 = &v285[v279];
      v17 = v289 + 1;
      v20 = v288 + v277;
      v26 = v284 + v277;
      v23 = &v287[v278];
      v18 = v281;
    }
    while (v289 + 1 != v280);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU2020_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  _WORD *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  float v55;
  double v57;
  double v59;
  double v60;
  double v61;
  double v62;
  int v66;
  float v68;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  double v83;
  double v85;
  double v86;
  double v87;
  double v90;
  _WORD *v91;
  _WORD *v92;
  float v93;
  unsigned int v97;
  unsigned int v98;
  double v102;
  int v103;
  double v105;
  double v106;
  double v107;
  double v109;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  _DWORD *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  _DWORD *v135;
  int v136;
  unsigned int v137;
  float v138;
  double v140;
  double v142;
  double v143;
  double v144;
  double v145;
  int v146;
  float v148;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;

  v161 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v157 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v156 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v155 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v153 = 2 * *a8;
    v154 = v21 >> 2;
    do
    {
      v158 = v24;
      v159 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v157;
      v37 = v157;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = (_WORD *)(v32 + v25);
        v42 = *((unsigned __int8 *)&v161 + v36);
        v43 = ((*v33 >> v42) & 0x3FF) - 64;
        v44 = v42 >> 2;
        v45 = (v42 >> 2) & 0x3C;
        v46 = *((unsigned __int8 *)&v161 + v37);
        v33 = (_DWORD *)((char *)v33 + v45);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (_DWORD *)((char *)v35 + ((v46 >> 2) & 0x3C));
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = *((unsigned __int8 *)&v161 + v49);
        v51 = *v48 >> v50;
        v52 = (_DWORD *)((char *)v48 + ((v50 >> 2) & 0x3C));
        v53 = v51 & 0x3FF;
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v52;
        }
        v55 = (double)v43 * 1.16780822 * 0.000977517107;
        _D7 = v55;
        v57 = (double)(v53 - 512) * 1.68361138;
        _S19 = _D7 + v57 * 0.000977517107;
        v59 = (double)v47 * -0.187876919;
        v60 = (double)(v53 - 512) * -0.652337186;
        v61 = (double)v47 * 2.14807165;
        v62 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm
        {
          FCVT            H19, S19
          FCVT            H7, S7
        }
        v40[3] = 15360;
        *v40 = LOWORD(_S19);
        v66 = ((*v38 >> v42) & 0x3FF) - 64;
        v34 = (_DWORD *)((char *)v38 + v45);
        v40[2] = LOWORD(_D7);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        _S19 = v62;
        v68 = (double)v66 * 1.16780822 * 0.000977517107;
        _D7 = v68;
        __asm { FCVT            H19, S19 }
        _S17 = _D7 + v57 * 0.000977517107;
        _S16 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = LOWORD(_S19);
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm { FCVT            H17, S17 }
        *v41 = LOWORD(_S17);
        __asm
        {
          FCVT            H16, S16
          FCVT            H7, S7
        }
        v41[1] = LOWORD(_S16);
        v41[2] = LOWORD(_D7);
        v41[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v160 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v76 = v17;
      }
      else
      {
        v72 = 0;
        v73 = (char *)v39 + (v44 & 0x3C);
        v74 = (char *)v38 + (v44 & 0x3C);
        v75 = v25;
        v76 = v17;
        do
        {
          v78 = *(_DWORD *)&v73[v72];
          v77 = *(_DWORD *)&v73[v72 + 4];
          v79 = (double)(int)((v78 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v81 = v35[v72 / 4];
          v80 = v35[v72 / 4 + 1];
          _D7 = v79;
          v83 = (double)(int)(((v81 >> 10) & 0x3FF) - 512);
          _D17 = v83 * 1.68361138;
          v85 = (double)(int)((v81 & 0x3FF) - 512);
          v86 = v85 * -0.187876919;
          v87 = _D7 + v85 * -0.187876919 * 0.000977517107;
          _S18 = _D7 + v83 * 1.68361138 * 0.000977517107;
          _D16 = v83 * -0.652337186;
          v90 = v85 * 2.14807165;
          v91 = (_WORD *)(v31 + v75);
          v92 = (_WORD *)(v32 + v75);
          *(float *)&_D7 = _D7 + v90 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[3] = 15360;
          __asm { FCVT            H7, S7 }
          *v91 = LOWORD(_S18);
          v93 = (double)(int)(((v78 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D18 = v93;
          _S22 = _D18 + _D17 * 0.000977517107;
          v91[2] = LOWORD(_D7);
          _D7 = _D18 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D18 = _D18 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H18, S18
          }
          v91[4] = LOWORD(_S22);
          v91[6] = LOWORD(_D18);
          v91[7] = 15360;
          v98 = *(_DWORD *)&v74[v72];
          v97 = *(_DWORD *)&v74[v72 + 4];
          *(float *)&_D18 = v87 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7;
          *(float *)&v87 = (double)(int)((v98 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D21 = *(float *)&v87;
          _S22 = _D21 + _D17 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          _S23 = _D21 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D21 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H7, S7
            FCVT            H23, S23
          }
          v91[1] = LOWORD(_D18);
          __asm { FCVT            H18, S21 }
          *(float *)&_D21 = (double)(int)(((v98 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v102 = *(float *)&_D21;
          v91[5] = LOWORD(_D7);
          *(float *)&_D7 = v102 + _D17 * 0.000977517107;
          *(float *)&_D16 = v102 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *v92 = LOWORD(_S22);
          *(float *)&_D17 = v102 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[1] = LOWORD(_S23);
          v103 = (v80 & 0x3FF) - 512;
          v92[2] = LOWORD(_D18);
          v92[3] = 15360;
          *(float *)&_D18 = (double)(int)(((v78 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D18 = *(float *)&_D18;
          v105 = (double)v103 * 1.68361138;
          v92[4] = LOWORD(_D7);
          *(float *)&_D7 = _D18 + v105 * 0.000977517107;
          v106 = (double)(int)(((v81 >> 20) & 0x3FF) - 512);
          v107 = v106 * -0.187876919;
          v92[5] = LOWORD(_D16);
          _D19 = (double)v103 * -0.652337186;
          *(float *)&_D16 = _D18 + v106 * -0.187876919 * 0.000977517107 + _D19 * 0.000977517107;
          v109 = v106 * 2.14807165;
          v92[6] = LOWORD(_D17);
          *(float *)&_D17 = _D18 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[7] = 15360;
          v91[8] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)((v77 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D18 = _D7 + v105 * 0.000977517107;
          v91[9] = LOWORD(_D16);
          *(float *)&_D16 = _D7 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D7 = _D7 + v109 * 0.000977517107;
          v91[10] = LOWORD(_D17);
          __asm
          {
            FCVT            H17, S18
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v91[12] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v98 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v91[13] = LOWORD(_D16);
          _D16 = *(float *)&_D17;
          *(float *)&_D17 = *(float *)&_D17 + v105 * 0.000977517107;
          v91[11] = 15360;
          *(float *)&_D18 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v91[14] = LOWORD(_D7);
          __asm { FCVT            H7, S16 }
          v91[15] = 15360;
          *(float *)&_D16 = (double)(int)((v97 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D16 = *(float *)&_D16;
          v92[8] = LOWORD(_D17);
          *(float *)&_D17 = _D16 + v105 * 0.000977517107;
          *(float *)&_D19 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          v92[9] = LOWORD(_D18);
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S19
            FCVT            H16, S16
          }
          v92[10] = LOWORD(_D7);
          v113 = ((v80 >> 20) & 0x3FF) - 512;
          v92[11] = 15360;
          *(float *)&_D7 = (double)(int)(((v77 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v92[12] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.68361138;
          v92[13] = LOWORD(_D18);
          *(float *)&_D18 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v80 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.187876919;
          v92[14] = LOWORD(_D16);
          _D16 = (double)v113 * -0.652337186;
          *(float *)&_D17 = _D7 + v116 * -0.187876919 * 0.000977517107 + _D16 * 0.000977517107;
          v119 = v116 * 2.14807165;
          v92[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H18, S18
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v91[16] = LOWORD(_D18);
          v91[17] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v77 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D18 = _D17 + v115 * 0.000977517107;
          v91[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[19] = 15360;
          v91[20] = LOWORD(_D18);
          __asm
          {
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v91[21] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v91[22] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v91[23] = 15360;
          *(float *)&_D18 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v92[16] = LOWORD(_D17);
          __asm { FCVT            H7, S7 }
          v92[17] = LOWORD(_D18);
          v92[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          _D7 = *(float *)&_D7;
          v92[19] = 15360;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v92[20] = LOWORD(_D17);
          *(float *)&_D16 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v92[21] = LOWORD(_D16);
          v92[22] = LOWORD(_D7);
          v92[23] = 15360;
          v76 += 6;
          v72 += 8;
          v75 += 48;
        }
        while (v76 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v72);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v72);
        v35 = (_DWORD *)((char *)v35 + v72);
        v123 = (_WORD *)(v32 + v75);
        v124 = (_WORD *)(v31 + v75);
      }
      v125 = v15 % 3;
      if (v76 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v161 + v125);
          v127 = ((*v33 >> v126) & 0x3FF) - 64;
          v128 = (v126 >> 2) & 0x3C;
          v129 = *((unsigned __int8 *)&v161 + v37);
          v33 = (_DWORD *)((char *)v33 + v128);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (_DWORD *)((char *)v35 + ((v129 >> 2) & 0x3C));
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = *((unsigned __int8 *)&v161 + v132);
          v134 = *v131 >> v133;
          v135 = (_DWORD *)((char *)v131 + ((v133 >> 2) & 0x3C));
          v136 = v134 & 0x3FF;
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          if ((v76 & 1) != 0)
          {
            v37 = v137;
            v35 = v135;
          }
          v138 = (double)v127 * 1.16780822 * 0.000977517107;
          _D7 = v138;
          v140 = (double)(v136 - 512) * 1.68361138;
          _S19 = _D7 + v140 * 0.000977517107;
          v142 = (double)v130 * -0.187876919;
          v143 = (double)(v136 - 512) * -0.652337186;
          v144 = (double)v130 * 2.14807165;
          v145 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm
          {
            FCVT            H19, S19
            FCVT            H7, S7
          }
          v124[3] = 15360;
          *v124 = LOWORD(_S19);
          v146 = ((*v34 >> v126) & 0x3FF) - 64;
          v34 = (_DWORD *)((char *)v34 + v128);
          v124[2] = LOWORD(_D7);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          _S19 = v145;
          v148 = (double)v146 * 1.16780822 * 0.000977517107;
          _D7 = v148;
          __asm { FCVT            H19, S19 }
          _S17 = _D7 + v140 * 0.000977517107;
          _S16 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = LOWORD(_S19);
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          *v123 = LOWORD(_S17);
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v123[1] = LOWORD(_S16);
          v123[2] = LOWORD(_D7);
          v123[3] = 15360;
          ++v76;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v76);
      }
      v27 += 4 * v155;
      v28 += v155;
      v16 = v159 + 1;
      v29 += v153;
      v24 = v158 + v153;
      v26 = v160 + 4 * v154;
    }
    while (v159 + 1 != v156);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU709_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  _WORD *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  float v55;
  double v57;
  double v59;
  double v60;
  double v61;
  double v62;
  int v66;
  float v68;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  double v83;
  double v85;
  double v86;
  double v87;
  double v90;
  _WORD *v91;
  _WORD *v92;
  float v93;
  unsigned int v97;
  unsigned int v98;
  double v102;
  int v103;
  double v105;
  double v106;
  double v107;
  double v109;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  _DWORD *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  _DWORD *v135;
  int v136;
  unsigned int v137;
  float v138;
  double v140;
  double v142;
  double v143;
  double v144;
  double v145;
  int v146;
  float v148;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;

  v161 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v157 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v156 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v155 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v153 = 2 * *a8;
    v154 = v21 >> 2;
    do
    {
      v158 = v24;
      v159 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v157;
      v37 = v157;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = (_WORD *)(v32 + v25);
        v42 = *((unsigned __int8 *)&v161 + v36);
        v43 = ((*v33 >> v42) & 0x3FF) - 64;
        v44 = v42 >> 2;
        v45 = (v42 >> 2) & 0x3C;
        v46 = *((unsigned __int8 *)&v161 + v37);
        v33 = (_DWORD *)((char *)v33 + v45);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (_DWORD *)((char *)v35 + ((v46 >> 2) & 0x3C));
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = *((unsigned __int8 *)&v161 + v49);
        v51 = *v48 >> v50;
        v52 = (_DWORD *)((char *)v48 + ((v50 >> 2) & 0x3C));
        v53 = v51 & 0x3FF;
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v52;
        }
        v55 = (double)v43 * 1.16438356 * 0.000977517107;
        _D7 = v55;
        v57 = (double)(v53 - 512) * 1.79274107;
        _S19 = _D7 + v57 * 0.000977517107;
        v59 = (double)v47 * -0.213248304;
        v60 = (double)(v53 - 512) * -0.532909018;
        v61 = (double)v47 * 2.11240179;
        v62 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm
        {
          FCVT            H19, S19
          FCVT            H7, S7
        }
        v40[3] = 15360;
        *v40 = LOWORD(_S19);
        v66 = ((*v38 >> v42) & 0x3FF) - 64;
        v34 = (_DWORD *)((char *)v38 + v45);
        v40[2] = LOWORD(_D7);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        _S19 = v62;
        v68 = (double)v66 * 1.16438356 * 0.000977517107;
        _D7 = v68;
        __asm { FCVT            H19, S19 }
        _S17 = _D7 + v57 * 0.000977517107;
        _S16 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = LOWORD(_S19);
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm { FCVT            H17, S17 }
        *v41 = LOWORD(_S17);
        __asm
        {
          FCVT            H16, S16
          FCVT            H7, S7
        }
        v41[1] = LOWORD(_S16);
        v41[2] = LOWORD(_D7);
        v41[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v160 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v76 = v17;
      }
      else
      {
        v72 = 0;
        v73 = (char *)v39 + (v44 & 0x3C);
        v74 = (char *)v38 + (v44 & 0x3C);
        v75 = v25;
        v76 = v17;
        do
        {
          v78 = *(_DWORD *)&v73[v72];
          v77 = *(_DWORD *)&v73[v72 + 4];
          v79 = (double)(int)((v78 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v81 = v35[v72 / 4];
          v80 = v35[v72 / 4 + 1];
          _D7 = v79;
          v83 = (double)(int)(((v81 >> 10) & 0x3FF) - 512);
          _D17 = v83 * 1.79274107;
          v85 = (double)(int)((v81 & 0x3FF) - 512);
          v86 = v85 * -0.213248304;
          v87 = _D7 + v85 * -0.213248304 * 0.000977517107;
          _S18 = _D7 + v83 * 1.79274107 * 0.000977517107;
          _D16 = v83 * -0.532909018;
          v90 = v85 * 2.11240179;
          v91 = (_WORD *)(v31 + v75);
          v92 = (_WORD *)(v32 + v75);
          *(float *)&_D7 = _D7 + v90 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[3] = 15360;
          __asm { FCVT            H7, S7 }
          *v91 = LOWORD(_S18);
          v93 = (double)(int)(((v78 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D18 = v93;
          _S22 = _D18 + _D17 * 0.000977517107;
          v91[2] = LOWORD(_D7);
          _D7 = _D18 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D18 = _D18 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H18, S18
          }
          v91[4] = LOWORD(_S22);
          v91[6] = LOWORD(_D18);
          v91[7] = 15360;
          v98 = *(_DWORD *)&v74[v72];
          v97 = *(_DWORD *)&v74[v72 + 4];
          *(float *)&_D18 = v87 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7;
          *(float *)&v87 = (double)(int)((v98 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D21 = *(float *)&v87;
          _S22 = _D21 + _D17 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          _S23 = _D21 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D21 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H7, S7
            FCVT            H23, S23
          }
          v91[1] = LOWORD(_D18);
          __asm { FCVT            H18, S21 }
          *(float *)&_D21 = (double)(int)(((v98 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v102 = *(float *)&_D21;
          v91[5] = LOWORD(_D7);
          *(float *)&_D7 = v102 + _D17 * 0.000977517107;
          *(float *)&_D16 = v102 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *v92 = LOWORD(_S22);
          *(float *)&_D17 = v102 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[1] = LOWORD(_S23);
          v103 = (v80 & 0x3FF) - 512;
          v92[2] = LOWORD(_D18);
          v92[3] = 15360;
          *(float *)&_D18 = (double)(int)(((v78 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D18 = *(float *)&_D18;
          v105 = (double)v103 * 1.79274107;
          v92[4] = LOWORD(_D7);
          *(float *)&_D7 = _D18 + v105 * 0.000977517107;
          v106 = (double)(int)(((v81 >> 20) & 0x3FF) - 512);
          v107 = v106 * -0.213248304;
          v92[5] = LOWORD(_D16);
          _D19 = (double)v103 * -0.532909018;
          *(float *)&_D16 = _D18 + v106 * -0.213248304 * 0.000977517107 + _D19 * 0.000977517107;
          v109 = v106 * 2.11240179;
          v92[6] = LOWORD(_D17);
          *(float *)&_D17 = _D18 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[7] = 15360;
          v91[8] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)((v77 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D18 = _D7 + v105 * 0.000977517107;
          v91[9] = LOWORD(_D16);
          *(float *)&_D16 = _D7 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D7 = _D7 + v109 * 0.000977517107;
          v91[10] = LOWORD(_D17);
          __asm
          {
            FCVT            H17, S18
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v91[12] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v98 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v91[13] = LOWORD(_D16);
          _D16 = *(float *)&_D17;
          *(float *)&_D17 = *(float *)&_D17 + v105 * 0.000977517107;
          v91[11] = 15360;
          *(float *)&_D18 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v91[14] = LOWORD(_D7);
          __asm { FCVT            H7, S16 }
          v91[15] = 15360;
          *(float *)&_D16 = (double)(int)((v97 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D16 = *(float *)&_D16;
          v92[8] = LOWORD(_D17);
          *(float *)&_D17 = _D16 + v105 * 0.000977517107;
          *(float *)&_D19 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          v92[9] = LOWORD(_D18);
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S19
            FCVT            H16, S16
          }
          v92[10] = LOWORD(_D7);
          v113 = ((v80 >> 20) & 0x3FF) - 512;
          v92[11] = 15360;
          *(float *)&_D7 = (double)(int)(((v77 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v92[12] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.79274107;
          v92[13] = LOWORD(_D18);
          *(float *)&_D18 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v80 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.213248304;
          v92[14] = LOWORD(_D16);
          _D16 = (double)v113 * -0.532909018;
          *(float *)&_D17 = _D7 + v116 * -0.213248304 * 0.000977517107 + _D16 * 0.000977517107;
          v119 = v116 * 2.11240179;
          v92[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H18, S18
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v91[16] = LOWORD(_D18);
          v91[17] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v77 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D18 = _D17 + v115 * 0.000977517107;
          v91[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[19] = 15360;
          v91[20] = LOWORD(_D18);
          __asm
          {
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v91[21] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v91[22] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v91[23] = 15360;
          *(float *)&_D18 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v92[16] = LOWORD(_D17);
          __asm { FCVT            H7, S7 }
          v92[17] = LOWORD(_D18);
          v92[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D7 = *(float *)&_D7;
          v92[19] = 15360;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v92[20] = LOWORD(_D17);
          *(float *)&_D16 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v92[21] = LOWORD(_D16);
          v92[22] = LOWORD(_D7);
          v92[23] = 15360;
          v76 += 6;
          v72 += 8;
          v75 += 48;
        }
        while (v76 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v72);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v72);
        v35 = (_DWORD *)((char *)v35 + v72);
        v123 = (_WORD *)(v32 + v75);
        v124 = (_WORD *)(v31 + v75);
      }
      v125 = v15 % 3;
      if (v76 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v161 + v125);
          v127 = ((*v33 >> v126) & 0x3FF) - 64;
          v128 = (v126 >> 2) & 0x3C;
          v129 = *((unsigned __int8 *)&v161 + v37);
          v33 = (_DWORD *)((char *)v33 + v128);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (_DWORD *)((char *)v35 + ((v129 >> 2) & 0x3C));
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = *((unsigned __int8 *)&v161 + v132);
          v134 = *v131 >> v133;
          v135 = (_DWORD *)((char *)v131 + ((v133 >> 2) & 0x3C));
          v136 = v134 & 0x3FF;
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          if ((v76 & 1) != 0)
          {
            v37 = v137;
            v35 = v135;
          }
          v138 = (double)v127 * 1.16438356 * 0.000977517107;
          _D7 = v138;
          v140 = (double)(v136 - 512) * 1.79274107;
          _S19 = _D7 + v140 * 0.000977517107;
          v142 = (double)v130 * -0.213248304;
          v143 = (double)(v136 - 512) * -0.532909018;
          v144 = (double)v130 * 2.11240179;
          v145 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm
          {
            FCVT            H19, S19
            FCVT            H7, S7
          }
          v124[3] = 15360;
          *v124 = LOWORD(_S19);
          v146 = ((*v34 >> v126) & 0x3FF) - 64;
          v34 = (_DWORD *)((char *)v34 + v128);
          v124[2] = LOWORD(_D7);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          _S19 = v145;
          v148 = (double)v146 * 1.16438356 * 0.000977517107;
          _D7 = v148;
          __asm { FCVT            H19, S19 }
          _S17 = _D7 + v140 * 0.000977517107;
          _S16 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = LOWORD(_S19);
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          *v123 = LOWORD(_S17);
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v123[1] = LOWORD(_S16);
          v123[2] = LOWORD(_D7);
          v123[3] = 15360;
          ++v76;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v76);
      }
      v27 += 4 * v155;
      v28 += v155;
      v16 = v159 + 1;
      v29 += v153;
      v24 = v158 + v153;
      v26 = v160 + 4 * v154;
    }
    while (v159 + 1 != v156);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU601_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  _WORD *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  float v55;
  double v57;
  double v59;
  double v60;
  double v61;
  double v62;
  int v66;
  float v68;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  double v83;
  double v85;
  double v86;
  double v87;
  double v90;
  _WORD *v91;
  _WORD *v92;
  float v93;
  unsigned int v97;
  unsigned int v98;
  double v102;
  int v103;
  double v105;
  double v106;
  double v107;
  double v109;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  _DWORD *v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  _DWORD *v135;
  int v136;
  unsigned int v137;
  float v138;
  double v140;
  double v142;
  double v143;
  double v144;
  double v145;
  int v146;
  float v148;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;

  v161 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v157 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v156 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v155 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v153 = 2 * *a8;
    v154 = v21 >> 2;
    do
    {
      v158 = v24;
      v159 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v157;
      v37 = v157;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = (_WORD *)(v32 + v25);
        v42 = *((unsigned __int8 *)&v161 + v36);
        v43 = ((*v33 >> v42) & 0x3FF) - 64;
        v44 = v42 >> 2;
        v45 = (v42 >> 2) & 0x3C;
        v46 = *((unsigned __int8 *)&v161 + v37);
        v33 = (_DWORD *)((char *)v33 + v45);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (_DWORD *)((char *)v35 + ((v46 >> 2) & 0x3C));
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = *((unsigned __int8 *)&v161 + v49);
        v51 = *v48 >> v50;
        v52 = (_DWORD *)((char *)v48 + ((v50 >> 2) & 0x3C));
        v53 = v51 & 0x3FF;
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v52;
        }
        v55 = (double)v43 * 1.16438356 * 0.000977517107;
        _D7 = v55;
        v57 = (double)(v53 - 512) * 1.59602679;
        _S19 = _D7 + v57 * 0.000977517107;
        v59 = (double)v47 * -0.391761964;
        v60 = (double)(v53 - 512) * -0.812967321;
        v61 = (double)v47 * 2.01723214;
        v62 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm
        {
          FCVT            H19, S19
          FCVT            H7, S7
        }
        v40[3] = 15360;
        *v40 = LOWORD(_S19);
        v66 = ((*v38 >> v42) & 0x3FF) - 64;
        v34 = (_DWORD *)((char *)v38 + v45);
        v40[2] = LOWORD(_D7);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        _S19 = v62;
        v68 = (double)v66 * 1.16438356 * 0.000977517107;
        _D7 = v68;
        __asm { FCVT            H19, S19 }
        _S17 = _D7 + v57 * 0.000977517107;
        _S16 = _D7 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = LOWORD(_S19);
        *(float *)&_D7 = _D7 + v61 * 0.000977517107;
        __asm { FCVT            H17, S17 }
        *v41 = LOWORD(_S17);
        __asm
        {
          FCVT            H16, S16
          FCVT            H7, S7
        }
        v41[1] = LOWORD(_S16);
        v41[2] = LOWORD(_D7);
        v41[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v160 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v76 = v17;
      }
      else
      {
        v72 = 0;
        v73 = (char *)v39 + (v44 & 0x3C);
        v74 = (char *)v38 + (v44 & 0x3C);
        v75 = v25;
        v76 = v17;
        do
        {
          v78 = *(_DWORD *)&v73[v72];
          v77 = *(_DWORD *)&v73[v72 + 4];
          v79 = (double)(int)((v78 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v81 = v35[v72 / 4];
          v80 = v35[v72 / 4 + 1];
          _D7 = v79;
          v83 = (double)(int)(((v81 >> 10) & 0x3FF) - 512);
          _D17 = v83 * 1.59602679;
          v85 = (double)(int)((v81 & 0x3FF) - 512);
          v86 = v85 * -0.391761964;
          v87 = _D7 + v85 * -0.391761964 * 0.000977517107;
          _S18 = _D7 + v83 * 1.59602679 * 0.000977517107;
          _D16 = v83 * -0.812967321;
          v90 = v85 * 2.01723214;
          v91 = (_WORD *)(v31 + v75);
          v92 = (_WORD *)(v32 + v75);
          *(float *)&_D7 = _D7 + v90 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[3] = 15360;
          __asm { FCVT            H7, S7 }
          *v91 = LOWORD(_S18);
          v93 = (double)(int)(((v78 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D18 = v93;
          _S22 = _D18 + _D17 * 0.000977517107;
          v91[2] = LOWORD(_D7);
          _D7 = _D18 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D18 = _D18 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H18, S18
          }
          v91[4] = LOWORD(_S22);
          v91[6] = LOWORD(_D18);
          v91[7] = 15360;
          v98 = *(_DWORD *)&v74[v72];
          v97 = *(_DWORD *)&v74[v72 + 4];
          *(float *)&_D18 = v87 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7;
          *(float *)&v87 = (double)(int)((v98 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D21 = *(float *)&v87;
          _S22 = _D21 + _D17 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          _S23 = _D21 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D21 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H22, S22
            FCVT            H7, S7
            FCVT            H23, S23
          }
          v91[1] = LOWORD(_D18);
          __asm { FCVT            H18, S21 }
          *(float *)&_D21 = (double)(int)(((v98 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v102 = *(float *)&_D21;
          v91[5] = LOWORD(_D7);
          *(float *)&_D7 = v102 + _D17 * 0.000977517107;
          *(float *)&_D16 = v102 + v86 * 0.000977517107 + _D16 * 0.000977517107;
          *v92 = LOWORD(_S22);
          *(float *)&_D17 = v102 + v90 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[1] = LOWORD(_S23);
          v103 = (v80 & 0x3FF) - 512;
          v92[2] = LOWORD(_D18);
          v92[3] = 15360;
          *(float *)&_D18 = (double)(int)(((v78 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D18 = *(float *)&_D18;
          v105 = (double)v103 * 1.59602679;
          v92[4] = LOWORD(_D7);
          *(float *)&_D7 = _D18 + v105 * 0.000977517107;
          v106 = (double)(int)(((v81 >> 20) & 0x3FF) - 512);
          v107 = v106 * -0.391761964;
          v92[5] = LOWORD(_D16);
          _D19 = (double)v103 * -0.812967321;
          *(float *)&_D16 = _D18 + v106 * -0.391761964 * 0.000977517107 + _D19 * 0.000977517107;
          v109 = v106 * 2.01723214;
          v92[6] = LOWORD(_D17);
          *(float *)&_D17 = _D18 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H7, S7
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v92[7] = 15360;
          v91[8] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)((v77 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D18 = _D7 + v105 * 0.000977517107;
          v91[9] = LOWORD(_D16);
          *(float *)&_D16 = _D7 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D7 = _D7 + v109 * 0.000977517107;
          v91[10] = LOWORD(_D17);
          __asm
          {
            FCVT            H17, S18
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v91[12] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v98 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v91[13] = LOWORD(_D16);
          _D16 = *(float *)&_D17;
          *(float *)&_D17 = *(float *)&_D17 + v105 * 0.000977517107;
          v91[11] = 15360;
          *(float *)&_D18 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v91[14] = LOWORD(_D7);
          __asm { FCVT            H7, S16 }
          v91[15] = 15360;
          *(float *)&_D16 = (double)(int)((v97 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D16 = *(float *)&_D16;
          v92[8] = LOWORD(_D17);
          *(float *)&_D17 = _D16 + v105 * 0.000977517107;
          *(float *)&_D19 = _D16 + v107 * 0.000977517107 + _D19 * 0.000977517107;
          v92[9] = LOWORD(_D18);
          *(float *)&_D16 = _D16 + v109 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S19
            FCVT            H16, S16
          }
          v92[10] = LOWORD(_D7);
          v113 = ((v80 >> 20) & 0x3FF) - 512;
          v92[11] = 15360;
          *(float *)&_D7 = (double)(int)(((v77 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v92[12] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.59602679;
          v92[13] = LOWORD(_D18);
          *(float *)&_D18 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v80 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.391761964;
          v92[14] = LOWORD(_D16);
          _D16 = (double)v113 * -0.812967321;
          *(float *)&_D17 = _D7 + v116 * -0.391761964 * 0.000977517107 + _D16 * 0.000977517107;
          v119 = v116 * 2.01723214;
          v92[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H18, S18
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v91[16] = LOWORD(_D18);
          v91[17] = LOWORD(_D17);
          *(float *)&_D17 = (double)(int)(((v77 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D18 = _D17 + v115 * 0.000977517107;
          v91[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H18, S18 }
          v91[19] = 15360;
          v91[20] = LOWORD(_D18);
          __asm
          {
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v91[21] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v91[22] = LOWORD(_D17);
          _D7 = *(float *)&_D7;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v91[23] = 15360;
          *(float *)&_D18 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H18, S18
          }
          v92[16] = LOWORD(_D17);
          __asm { FCVT            H7, S7 }
          v92[17] = LOWORD(_D18);
          v92[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)(int)(((v97 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          _D7 = *(float *)&_D7;
          v92[19] = 15360;
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v92[20] = LOWORD(_D17);
          *(float *)&_D16 = _D7 + v117 * 0.000977517107 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v92[21] = LOWORD(_D16);
          v92[22] = LOWORD(_D7);
          v92[23] = 15360;
          v76 += 6;
          v72 += 8;
          v75 += 48;
        }
        while (v76 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v72);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v72);
        v35 = (_DWORD *)((char *)v35 + v72);
        v123 = (_WORD *)(v32 + v75);
        v124 = (_WORD *)(v31 + v75);
      }
      v125 = v15 % 3;
      if (v76 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v161 + v125);
          v127 = ((*v33 >> v126) & 0x3FF) - 64;
          v128 = (v126 >> 2) & 0x3C;
          v129 = *((unsigned __int8 *)&v161 + v37);
          v33 = (_DWORD *)((char *)v33 + v128);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (_DWORD *)((char *)v35 + ((v129 >> 2) & 0x3C));
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = *((unsigned __int8 *)&v161 + v132);
          v134 = *v131 >> v133;
          v135 = (_DWORD *)((char *)v131 + ((v133 >> 2) & 0x3C));
          v136 = v134 & 0x3FF;
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          if ((v76 & 1) != 0)
          {
            v37 = v137;
            v35 = v135;
          }
          v138 = (double)v127 * 1.16438356 * 0.000977517107;
          _D7 = v138;
          v140 = (double)(v136 - 512) * 1.59602679;
          _S19 = _D7 + v140 * 0.000977517107;
          v142 = (double)v130 * -0.391761964;
          v143 = (double)(v136 - 512) * -0.812967321;
          v144 = (double)v130 * 2.01723214;
          v145 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm
          {
            FCVT            H19, S19
            FCVT            H7, S7
          }
          v124[3] = 15360;
          *v124 = LOWORD(_S19);
          v146 = ((*v34 >> v126) & 0x3FF) - 64;
          v34 = (_DWORD *)((char *)v34 + v128);
          v124[2] = LOWORD(_D7);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          _S19 = v145;
          v148 = (double)v146 * 1.16438356 * 0.000977517107;
          _D7 = v148;
          __asm { FCVT            H19, S19 }
          _S17 = _D7 + v140 * 0.000977517107;
          _S16 = _D7 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = LOWORD(_S19);
          *(float *)&_D7 = _D7 + v144 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          *v123 = LOWORD(_S17);
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v123[1] = LOWORD(_S16);
          v123[2] = LOWORD(_D7);
          v123[3] = 15360;
          ++v76;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v76);
      }
      v27 += 4 * v155;
      v28 += v155;
      v16 = v159 + 1;
      v29 += v153;
      v24 = v158 + v153;
      v26 = v160 + 4 * v154;
    }
    while (v159 + 1 != v156);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU2020_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  float v56;
  double v57;
  double v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float v91;
  float v92;
  double v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  float v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float v110;
  double v111;
  double v112;
  double v113;
  float v114;
  double v115;
  int v116;
  int v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  _DWORD *v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  unsigned int v140;
  float v141;
  double v142;
  double v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  float v149;
  int v150;
  float v151;
  float v152;
  double v153;
  float v154;
  float v155;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  _DWORD *v162;
  _DWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;

  v167 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v161 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v160 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = v19 + v21 * (v8 >> 1);
    v25 = *a7 + v18;
    v26 = 16 * a6[4];
    v27 = (_DWORD *)(v24 + 4 * (v9 / 3));
    v28 = v20 + v22 * v8 + 4 * (v9 / 3);
    v29 = (_DWORD *)(v28 + v22);
    v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v158 = v21 >> 2;
    v30 = *a7 + *a8 + v18;
    v157 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v163 = v27;
      v164 = v16;
      v31 = 0;
      v32 = v25;
      v33 = v30;
      v34 = (_DWORD *)v28;
      v162 = v29;
      v35 = v29;
      v36 = v27;
      v37 = v161;
      v38 = v161;
      do
      {
        v39 = v35;
        v40 = v34;
        v41 = v32 + v26;
        v42 = v33 + v26;
        v43 = *((unsigned __int8 *)&v167 + v37);
        v44 = ((*v34 >> v43) & 0x3FF) - 64;
        v45 = v43 >> 2;
        v46 = (v43 >> 2) & 0x3C;
        v47 = *((unsigned __int8 *)&v167 + v38);
        v34 = (_DWORD *)((char *)v34 + v46);
        v48 = ((*v36 >> v47) & 0x3FF) - 512;
        v49 = (_DWORD *)((char *)v36 + ((v47 >> 2) & 0x3C));
        if (v38 == 2)
          v50 = 0;
        else
          v50 = v38 + 1;
        v51 = *((unsigned __int8 *)&v167 + v50);
        v52 = *v49 >> v51;
        v53 = (_DWORD *)((char *)v49 + ((v51 >> 2) & 0x3C));
        v54 = v52 & 0x3FF;
        if (v50 == 2)
          v55 = 0;
        else
          v55 = v50 + 1;
        if ((v31 & 1) != 0)
        {
          v38 = v55;
          v36 = v53;
        }
        v56 = (double)v44 * 1.16780822 * 0.000977517107;
        v57 = v56;
        v58 = (double)(v54 - 512) * 1.68361138;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v48 * -0.187876919;
        v61 = (double)(v54 - 512) * -0.652337186;
        v62 = (double)v48 * 2.14807165;
        v63 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(_DWORD *)(v41 + 12) = 1065353216;
        v64 = v57 + v62 * 0.000977517107;
        v65 = ((*v39 >> v43) & 0x3FF) - 64;
        v35 = (_DWORD *)((char *)v39 + v46);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        *(float *)(v41 + 8) = v64;
        v66 = (double)v65 * 1.16780822 * 0.000977517107;
        v67 = v63;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v41 = v59;
        *(float *)(v41 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v62 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v31;
        v33 += 16;
        v32 += 16;
      }
      while (v17 != v31);
      v165 = v28;
      v166 = v25;
      if (v17 >= v15)
      {
        v126 = v33 + v26;
        v127 = v32 + v26;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v40 + (v45 & 0x3C);
        v73 = (char *)v39 + (v45 & 0x3C);
        v74 = v26;
        v75 = v17;
        do
        {
          v76 = v32 + v74;
          v77 = v33 + v74;
          v79 = v36[v71 / 4];
          v78 = v36[v71 / 4 + 1];
          v80 = ((v79 >> 10) & 0x3FF) - 512;
          v82 = *(_DWORD *)&v72[v71];
          v81 = *(_DWORD *)&v72[v71 + 4];
          v83 = (double)(int)((v82 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v84 = v83;
          v85 = (double)v80 * 1.68361138;
          v86 = (double)(int)((v79 & 0x3FF) - 512);
          v87 = v86 * -0.187876919;
          v88 = v84 + v86 * -0.187876919 * 0.000977517107;
          v89 = (double)v80 * -0.652337186;
          v90 = v86 * 2.14807165;
          v91 = v84 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 12) = 1065353216;
          v92 = (double)(int)(((v82 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v93 = v92;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v94 = v93 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 28) = 1065353216;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v98 = (double)(int)((v96 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v99 = v98;
          *(_DWORD *)(v76 + 8) = LODWORD(v84);
          v100 = v99 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(_DWORD *)(v76 + 24) = LODWORD(v93);
          *(float *)&v93 = (double)(int)(((v96 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v101 = *(float *)&v93;
          *(float *)&v88 = v88 + v89 * 0.000977517107;
          v102 = v101 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v87 = v99 + v85 * 0.000977517107;
          *(float *)&v99 = v99 + v90 * 0.000977517107;
          *(float *)&v97 = v97;
          *(float *)&v85 = v101 + v85 * 0.000977517107;
          *(float *)&v90 = v101 + v90 * 0.000977517107;
          *(float *)&v100 = v100;
          v103 = (v78 & 0x3FF) - 512;
          *(float *)&v102 = v102;
          *(float *)v76 = v91;
          *(_DWORD *)(v76 + 4) = LODWORD(v88);
          v104 = (double)(int)(((v82 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v105 = v104;
          *(float *)(v76 + 16) = v94;
          *(_DWORD *)(v76 + 20) = LODWORD(v97);
          v106 = (double)v103 * 1.68361138;
          v107 = (double)(int)(((v79 >> 20) & 0x3FF) - 512);
          *(_DWORD *)v77 = LODWORD(v87);
          *(_DWORD *)(v77 + 4) = LODWORD(v100);
          *(float *)&v100 = v105 + v106 * 0.000977517107;
          v108 = v107 * -0.187876919;
          v109 = (double)v103 * -0.652337186;
          *(_DWORD *)(v77 + 8) = LODWORD(v99);
          v110 = v105 + v107 * -0.187876919 * 0.000977517107 + v109 * 0.000977517107;
          v111 = v107 * 2.14807165;
          *(float *)&v105 = v105 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 12) = 1065353216;
          *(_DWORD *)(v77 + 16) = LODWORD(v85);
          *(_DWORD *)(v77 + 20) = LODWORD(v102);
          *(float *)&v102 = (double)(int)((v81 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v112 = *(float *)&v102;
          *(float *)&v85 = v112 + v106 * 0.000977517107;
          *(_DWORD *)(v77 + 24) = LODWORD(v90);
          *(float *)&v90 = v112 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&v112 = v112 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 28) = 1065353216;
          *(_DWORD *)(v76 + 32) = LODWORD(v100);
          *(float *)(v76 + 36) = v110;
          *(float *)&v100 = (double)(int)(((v96 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v113 = *(float *)&v100;
          *(_DWORD *)(v76 + 40) = LODWORD(v105);
          *(float *)&v105 = v113 + v106 * 0.000977517107;
          v114 = v113 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 48) = LODWORD(v85);
          *(_DWORD *)(v76 + 52) = LODWORD(v90);
          *(_DWORD *)(v76 + 56) = LODWORD(v112);
          *(float *)&v113 = v113 + v111 * 0.000977517107;
          *(float *)&v112 = (double)(int)((v95 & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v115 = *(float *)&v112;
          *(_DWORD *)(v76 + 44) = 1065353216;
          *(float *)&v85 = v115 + v106 * 0.000977517107;
          *(float *)&v90 = v115 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 60) = 1065353216;
          *(float *)&v115 = v115 + v111 * 0.000977517107;
          v116 = ((v78 >> 10) & 0x3FF) - 512;
          *(_DWORD *)(v77 + 32) = LODWORD(v105);
          *(float *)(v77 + 36) = v114;
          *(_DWORD *)(v77 + 40) = LODWORD(v113);
          v117 = ((v78 >> 20) & 0x3FF) - 512;
          *(float *)&v113 = (double)(int)(((v81 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v118 = *(float *)&v113;
          *(_DWORD *)(v77 + 44) = 1065353216;
          v119 = (double)v117 * 1.68361138;
          *(_DWORD *)(v77 + 48) = LODWORD(v85);
          *(_DWORD *)(v77 + 52) = LODWORD(v90);
          *(float *)&v85 = v118 + v119 * 0.000977517107;
          v120 = (double)v116 * -0.187876919;
          *(_DWORD *)(v77 + 56) = LODWORD(v115);
          v121 = (double)v117 * -0.652337186;
          *(float *)&v105 = v118 + v120 * 0.000977517107 + v121 * 0.000977517107;
          v122 = (double)v116 * 2.14807165;
          *(_DWORD *)(v77 + 60) = 1065353216;
          *(float *)&v118 = v118 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 64) = LODWORD(v85);
          *(_DWORD *)(v76 + 68) = LODWORD(v105);
          *(float *)&v85 = (double)(int)(((v81 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v123 = *(float *)&v85;
          *(_DWORD *)(v76 + 72) = LODWORD(v118);
          *(float *)&v118 = v123 + v119 * 0.000977517107;
          *(float *)&v105 = v123 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(_DWORD *)(v76 + 76) = 1065353216;
          *(float *)&v123 = v123 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 80) = LODWORD(v118);
          *(_DWORD *)(v76 + 84) = LODWORD(v105);
          *(float *)&v118 = (double)(int)(((v95 >> 10) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          *(_DWORD *)(v76 + 88) = LODWORD(v123);
          v124 = *(float *)&v118;
          *(float *)&v123 = v124 + v119 * 0.000977517107;
          *(_DWORD *)(v76 + 92) = 1065353216;
          *(float *)&v105 = v124 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v124 = v124 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 64) = LODWORD(v123);
          *(_DWORD *)(v77 + 68) = LODWORD(v105);
          *(_DWORD *)(v77 + 72) = LODWORD(v124);
          *(float *)&v124 = (double)(int)(((v95 >> 20) & 0x3FF) - 64) * 1.16780822 * 0.000977517107;
          v125 = *(float *)&v124;
          *(float *)&v123 = v125 + v119 * 0.000977517107;
          *(_DWORD *)(v77 + 76) = 1065353216;
          *(float *)&v121 = v125 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v125 = v125 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 80) = LODWORD(v123);
          *(_DWORD *)(v77 + 84) = LODWORD(v121);
          *(_DWORD *)(v77 + 88) = LODWORD(v125);
          *(_DWORD *)(v77 + 92) = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v71);
        v36 = (_DWORD *)((char *)v36 + v71);
        v126 = v33 + v74;
        v127 = v32 + v74;
      }
      v128 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v129 = *((unsigned __int8 *)&v167 + v128);
          v130 = ((*v34 >> v129) & 0x3FF) - 64;
          v131 = (v129 >> 2) & 0x3C;
          v132 = *((unsigned __int8 *)&v167 + v38);
          v34 = (_DWORD *)((char *)v34 + v131);
          v133 = ((*v36 >> v132) & 0x3FF) - 512;
          v134 = (_DWORD *)((char *)v36 + ((v132 >> 2) & 0x3C));
          if (v38 == 2)
            v135 = 0;
          else
            v135 = v38 + 1;
          v136 = *((unsigned __int8 *)&v167 + v135);
          v137 = *v134 >> v136;
          v138 = (_DWORD *)((char *)v134 + ((v136 >> 2) & 0x3C));
          v139 = v137 & 0x3FF;
          if (v135 == 2)
            v140 = 0;
          else
            v140 = v135 + 1;
          if ((v75 & 1) != 0)
          {
            v38 = v140;
            v36 = v138;
          }
          v141 = (double)v130 * 1.16780822 * 0.000977517107;
          v142 = v141;
          v143 = (double)(v139 - 512) * 1.68361138;
          v144 = v142 + v143 * 0.000977517107;
          v145 = (double)v133 * -0.187876919;
          v146 = (double)(v139 - 512) * -0.652337186;
          v147 = (double)v133 * 2.14807165;
          v148 = v142 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(_DWORD *)(v127 + 12) = 1065353216;
          v149 = v142 + v147 * 0.000977517107;
          v150 = ((*v35 >> v129) & 0x3FF) - 64;
          v35 = (_DWORD *)((char *)v35 + v131);
          if (v128 == 2)
            v128 = 0;
          else
            ++v128;
          *(float *)(v127 + 8) = v149;
          v151 = (double)v150 * 1.16780822 * 0.000977517107;
          v152 = v148;
          v153 = v151;
          v154 = v153 + v143 * 0.000977517107;
          *(float *)v127 = v144;
          *(float *)(v127 + 4) = v152;
          v127 += 16;
          v155 = v153 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(float *)&v153 = v153 + v147 * 0.000977517107;
          *(float *)v126 = v154;
          *(float *)(v126 + 4) = v155;
          *(_DWORD *)(v126 + 8) = LODWORD(v153);
          *(_DWORD *)(v126 + 12) = 1065353216;
          ++v75;
          v126 += 16;
        }
        while (v11 != v75);
      }
      v28 = v165 + 4 * v159;
      v29 = &v162[v159];
      v16 = v164 + 1;
      v30 += v157;
      v25 = v166 + v157;
      v27 = &v163[v158];
    }
    while (v164 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU709_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  float v56;
  double v57;
  double v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float v91;
  float v92;
  double v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  float v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float v110;
  double v111;
  double v112;
  double v113;
  float v114;
  double v115;
  int v116;
  int v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  _DWORD *v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  unsigned int v140;
  float v141;
  double v142;
  double v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  float v149;
  int v150;
  float v151;
  float v152;
  double v153;
  float v154;
  float v155;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  _DWORD *v162;
  _DWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;

  v167 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v161 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v160 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = v19 + v21 * (v8 >> 1);
    v25 = *a7 + v18;
    v26 = 16 * a6[4];
    v27 = (_DWORD *)(v24 + 4 * (v9 / 3));
    v28 = v20 + v22 * v8 + 4 * (v9 / 3);
    v29 = (_DWORD *)(v28 + v22);
    v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v158 = v21 >> 2;
    v30 = *a7 + *a8 + v18;
    v157 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v163 = v27;
      v164 = v16;
      v31 = 0;
      v32 = v25;
      v33 = v30;
      v34 = (_DWORD *)v28;
      v162 = v29;
      v35 = v29;
      v36 = v27;
      v37 = v161;
      v38 = v161;
      do
      {
        v39 = v35;
        v40 = v34;
        v41 = v32 + v26;
        v42 = v33 + v26;
        v43 = *((unsigned __int8 *)&v167 + v37);
        v44 = ((*v34 >> v43) & 0x3FF) - 64;
        v45 = v43 >> 2;
        v46 = (v43 >> 2) & 0x3C;
        v47 = *((unsigned __int8 *)&v167 + v38);
        v34 = (_DWORD *)((char *)v34 + v46);
        v48 = ((*v36 >> v47) & 0x3FF) - 512;
        v49 = (_DWORD *)((char *)v36 + ((v47 >> 2) & 0x3C));
        if (v38 == 2)
          v50 = 0;
        else
          v50 = v38 + 1;
        v51 = *((unsigned __int8 *)&v167 + v50);
        v52 = *v49 >> v51;
        v53 = (_DWORD *)((char *)v49 + ((v51 >> 2) & 0x3C));
        v54 = v52 & 0x3FF;
        if (v50 == 2)
          v55 = 0;
        else
          v55 = v50 + 1;
        if ((v31 & 1) != 0)
        {
          v38 = v55;
          v36 = v53;
        }
        v56 = (double)v44 * 1.16438356 * 0.000977517107;
        v57 = v56;
        v58 = (double)(v54 - 512) * 1.79274107;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v48 * -0.213248304;
        v61 = (double)(v54 - 512) * -0.532909018;
        v62 = (double)v48 * 2.11240179;
        v63 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(_DWORD *)(v41 + 12) = 1065353216;
        v64 = v57 + v62 * 0.000977517107;
        v65 = ((*v39 >> v43) & 0x3FF) - 64;
        v35 = (_DWORD *)((char *)v39 + v46);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        *(float *)(v41 + 8) = v64;
        v66 = (double)v65 * 1.16438356 * 0.000977517107;
        v67 = v63;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v41 = v59;
        *(float *)(v41 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v62 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v31;
        v33 += 16;
        v32 += 16;
      }
      while (v17 != v31);
      v165 = v28;
      v166 = v25;
      if (v17 >= v15)
      {
        v126 = v33 + v26;
        v127 = v32 + v26;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v40 + (v45 & 0x3C);
        v73 = (char *)v39 + (v45 & 0x3C);
        v74 = v26;
        v75 = v17;
        do
        {
          v76 = v32 + v74;
          v77 = v33 + v74;
          v79 = v36[v71 / 4];
          v78 = v36[v71 / 4 + 1];
          v80 = ((v79 >> 10) & 0x3FF) - 512;
          v82 = *(_DWORD *)&v72[v71];
          v81 = *(_DWORD *)&v72[v71 + 4];
          v83 = (double)(int)((v82 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v84 = v83;
          v85 = (double)v80 * 1.79274107;
          v86 = (double)(int)((v79 & 0x3FF) - 512);
          v87 = v86 * -0.213248304;
          v88 = v84 + v86 * -0.213248304 * 0.000977517107;
          v89 = (double)v80 * -0.532909018;
          v90 = v86 * 2.11240179;
          v91 = v84 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 12) = 1065353216;
          v92 = (double)(int)(((v82 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v93 = v92;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v94 = v93 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 28) = 1065353216;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v98 = (double)(int)((v96 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v99 = v98;
          *(_DWORD *)(v76 + 8) = LODWORD(v84);
          v100 = v99 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(_DWORD *)(v76 + 24) = LODWORD(v93);
          *(float *)&v93 = (double)(int)(((v96 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v101 = *(float *)&v93;
          *(float *)&v88 = v88 + v89 * 0.000977517107;
          v102 = v101 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v87 = v99 + v85 * 0.000977517107;
          *(float *)&v99 = v99 + v90 * 0.000977517107;
          *(float *)&v97 = v97;
          *(float *)&v85 = v101 + v85 * 0.000977517107;
          *(float *)&v90 = v101 + v90 * 0.000977517107;
          *(float *)&v100 = v100;
          v103 = (v78 & 0x3FF) - 512;
          *(float *)&v102 = v102;
          *(float *)v76 = v91;
          *(_DWORD *)(v76 + 4) = LODWORD(v88);
          v104 = (double)(int)(((v82 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v105 = v104;
          *(float *)(v76 + 16) = v94;
          *(_DWORD *)(v76 + 20) = LODWORD(v97);
          v106 = (double)v103 * 1.79274107;
          v107 = (double)(int)(((v79 >> 20) & 0x3FF) - 512);
          *(_DWORD *)v77 = LODWORD(v87);
          *(_DWORD *)(v77 + 4) = LODWORD(v100);
          *(float *)&v100 = v105 + v106 * 0.000977517107;
          v108 = v107 * -0.213248304;
          v109 = (double)v103 * -0.532909018;
          *(_DWORD *)(v77 + 8) = LODWORD(v99);
          v110 = v105 + v107 * -0.213248304 * 0.000977517107 + v109 * 0.000977517107;
          v111 = v107 * 2.11240179;
          *(float *)&v105 = v105 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 12) = 1065353216;
          *(_DWORD *)(v77 + 16) = LODWORD(v85);
          *(_DWORD *)(v77 + 20) = LODWORD(v102);
          *(float *)&v102 = (double)(int)((v81 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v112 = *(float *)&v102;
          *(float *)&v85 = v112 + v106 * 0.000977517107;
          *(_DWORD *)(v77 + 24) = LODWORD(v90);
          *(float *)&v90 = v112 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&v112 = v112 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 28) = 1065353216;
          *(_DWORD *)(v76 + 32) = LODWORD(v100);
          *(float *)(v76 + 36) = v110;
          *(float *)&v100 = (double)(int)(((v96 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v113 = *(float *)&v100;
          *(_DWORD *)(v76 + 40) = LODWORD(v105);
          *(float *)&v105 = v113 + v106 * 0.000977517107;
          v114 = v113 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 48) = LODWORD(v85);
          *(_DWORD *)(v76 + 52) = LODWORD(v90);
          *(_DWORD *)(v76 + 56) = LODWORD(v112);
          *(float *)&v113 = v113 + v111 * 0.000977517107;
          *(float *)&v112 = (double)(int)((v95 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v115 = *(float *)&v112;
          *(_DWORD *)(v76 + 44) = 1065353216;
          *(float *)&v85 = v115 + v106 * 0.000977517107;
          *(float *)&v90 = v115 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 60) = 1065353216;
          *(float *)&v115 = v115 + v111 * 0.000977517107;
          v116 = ((v78 >> 10) & 0x3FF) - 512;
          *(_DWORD *)(v77 + 32) = LODWORD(v105);
          *(float *)(v77 + 36) = v114;
          *(_DWORD *)(v77 + 40) = LODWORD(v113);
          v117 = ((v78 >> 20) & 0x3FF) - 512;
          *(float *)&v113 = (double)(int)(((v81 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v118 = *(float *)&v113;
          *(_DWORD *)(v77 + 44) = 1065353216;
          v119 = (double)v117 * 1.79274107;
          *(_DWORD *)(v77 + 48) = LODWORD(v85);
          *(_DWORD *)(v77 + 52) = LODWORD(v90);
          *(float *)&v85 = v118 + v119 * 0.000977517107;
          v120 = (double)v116 * -0.213248304;
          *(_DWORD *)(v77 + 56) = LODWORD(v115);
          v121 = (double)v117 * -0.532909018;
          *(float *)&v105 = v118 + v120 * 0.000977517107 + v121 * 0.000977517107;
          v122 = (double)v116 * 2.11240179;
          *(_DWORD *)(v77 + 60) = 1065353216;
          *(float *)&v118 = v118 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 64) = LODWORD(v85);
          *(_DWORD *)(v76 + 68) = LODWORD(v105);
          *(float *)&v85 = (double)(int)(((v81 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v123 = *(float *)&v85;
          *(_DWORD *)(v76 + 72) = LODWORD(v118);
          *(float *)&v118 = v123 + v119 * 0.000977517107;
          *(float *)&v105 = v123 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(_DWORD *)(v76 + 76) = 1065353216;
          *(float *)&v123 = v123 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 80) = LODWORD(v118);
          *(_DWORD *)(v76 + 84) = LODWORD(v105);
          *(float *)&v118 = (double)(int)(((v95 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          *(_DWORD *)(v76 + 88) = LODWORD(v123);
          v124 = *(float *)&v118;
          *(float *)&v123 = v124 + v119 * 0.000977517107;
          *(_DWORD *)(v76 + 92) = 1065353216;
          *(float *)&v105 = v124 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v124 = v124 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 64) = LODWORD(v123);
          *(_DWORD *)(v77 + 68) = LODWORD(v105);
          *(_DWORD *)(v77 + 72) = LODWORD(v124);
          *(float *)&v124 = (double)(int)(((v95 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v125 = *(float *)&v124;
          *(float *)&v123 = v125 + v119 * 0.000977517107;
          *(_DWORD *)(v77 + 76) = 1065353216;
          *(float *)&v121 = v125 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v125 = v125 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 80) = LODWORD(v123);
          *(_DWORD *)(v77 + 84) = LODWORD(v121);
          *(_DWORD *)(v77 + 88) = LODWORD(v125);
          *(_DWORD *)(v77 + 92) = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v71);
        v36 = (_DWORD *)((char *)v36 + v71);
        v126 = v33 + v74;
        v127 = v32 + v74;
      }
      v128 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v129 = *((unsigned __int8 *)&v167 + v128);
          v130 = ((*v34 >> v129) & 0x3FF) - 64;
          v131 = (v129 >> 2) & 0x3C;
          v132 = *((unsigned __int8 *)&v167 + v38);
          v34 = (_DWORD *)((char *)v34 + v131);
          v133 = ((*v36 >> v132) & 0x3FF) - 512;
          v134 = (_DWORD *)((char *)v36 + ((v132 >> 2) & 0x3C));
          if (v38 == 2)
            v135 = 0;
          else
            v135 = v38 + 1;
          v136 = *((unsigned __int8 *)&v167 + v135);
          v137 = *v134 >> v136;
          v138 = (_DWORD *)((char *)v134 + ((v136 >> 2) & 0x3C));
          v139 = v137 & 0x3FF;
          if (v135 == 2)
            v140 = 0;
          else
            v140 = v135 + 1;
          if ((v75 & 1) != 0)
          {
            v38 = v140;
            v36 = v138;
          }
          v141 = (double)v130 * 1.16438356 * 0.000977517107;
          v142 = v141;
          v143 = (double)(v139 - 512) * 1.79274107;
          v144 = v142 + v143 * 0.000977517107;
          v145 = (double)v133 * -0.213248304;
          v146 = (double)(v139 - 512) * -0.532909018;
          v147 = (double)v133 * 2.11240179;
          v148 = v142 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(_DWORD *)(v127 + 12) = 1065353216;
          v149 = v142 + v147 * 0.000977517107;
          v150 = ((*v35 >> v129) & 0x3FF) - 64;
          v35 = (_DWORD *)((char *)v35 + v131);
          if (v128 == 2)
            v128 = 0;
          else
            ++v128;
          *(float *)(v127 + 8) = v149;
          v151 = (double)v150 * 1.16438356 * 0.000977517107;
          v152 = v148;
          v153 = v151;
          v154 = v153 + v143 * 0.000977517107;
          *(float *)v127 = v144;
          *(float *)(v127 + 4) = v152;
          v127 += 16;
          v155 = v153 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(float *)&v153 = v153 + v147 * 0.000977517107;
          *(float *)v126 = v154;
          *(float *)(v126 + 4) = v155;
          *(_DWORD *)(v126 + 8) = LODWORD(v153);
          *(_DWORD *)(v126 + 12) = 1065353216;
          ++v75;
          v126 += 16;
        }
        while (v11 != v75);
      }
      v28 = v165 + 4 * v159;
      v29 = &v162[v159];
      v16 = v164 + 1;
      v30 += v157;
      v25 = v166 + v157;
      v27 = &v163[v158];
    }
    while (v164 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_p420ITU601_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  float v56;
  double v57;
  double v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  float v91;
  float v92;
  double v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  float v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  float v110;
  double v111;
  double v112;
  double v113;
  float v114;
  double v115;
  int v116;
  int v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  _DWORD *v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  _DWORD *v138;
  int v139;
  unsigned int v140;
  float v141;
  double v142;
  double v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  float v149;
  int v150;
  float v151;
  float v152;
  double v153;
  float v154;
  float v155;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  _DWORD *v162;
  _DWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;

  v167 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v161 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v160 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = v19 + v21 * (v8 >> 1);
    v25 = *a7 + v18;
    v26 = 16 * a6[4];
    v27 = (_DWORD *)(v24 + 4 * (v9 / 3));
    v28 = v20 + v22 * v8 + 4 * (v9 / 3);
    v29 = (_DWORD *)(v28 + v22);
    v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v158 = v21 >> 2;
    v30 = *a7 + *a8 + v18;
    v157 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v163 = v27;
      v164 = v16;
      v31 = 0;
      v32 = v25;
      v33 = v30;
      v34 = (_DWORD *)v28;
      v162 = v29;
      v35 = v29;
      v36 = v27;
      v37 = v161;
      v38 = v161;
      do
      {
        v39 = v35;
        v40 = v34;
        v41 = v32 + v26;
        v42 = v33 + v26;
        v43 = *((unsigned __int8 *)&v167 + v37);
        v44 = ((*v34 >> v43) & 0x3FF) - 64;
        v45 = v43 >> 2;
        v46 = (v43 >> 2) & 0x3C;
        v47 = *((unsigned __int8 *)&v167 + v38);
        v34 = (_DWORD *)((char *)v34 + v46);
        v48 = ((*v36 >> v47) & 0x3FF) - 512;
        v49 = (_DWORD *)((char *)v36 + ((v47 >> 2) & 0x3C));
        if (v38 == 2)
          v50 = 0;
        else
          v50 = v38 + 1;
        v51 = *((unsigned __int8 *)&v167 + v50);
        v52 = *v49 >> v51;
        v53 = (_DWORD *)((char *)v49 + ((v51 >> 2) & 0x3C));
        v54 = v52 & 0x3FF;
        if (v50 == 2)
          v55 = 0;
        else
          v55 = v50 + 1;
        if ((v31 & 1) != 0)
        {
          v38 = v55;
          v36 = v53;
        }
        v56 = (double)v44 * 1.16438356 * 0.000977517107;
        v57 = v56;
        v58 = (double)(v54 - 512) * 1.59602679;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v48 * -0.391761964;
        v61 = (double)(v54 - 512) * -0.812967321;
        v62 = (double)v48 * 2.01723214;
        v63 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(_DWORD *)(v41 + 12) = 1065353216;
        v64 = v57 + v62 * 0.000977517107;
        v65 = ((*v39 >> v43) & 0x3FF) - 64;
        v35 = (_DWORD *)((char *)v39 + v46);
        if (v37 == 2)
          v37 = 0;
        else
          ++v37;
        *(float *)(v41 + 8) = v64;
        v66 = (double)v65 * 1.16438356 * 0.000977517107;
        v67 = v63;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v41 = v59;
        *(float *)(v41 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v62 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v31;
        v33 += 16;
        v32 += 16;
      }
      while (v17 != v31);
      v165 = v28;
      v166 = v25;
      if (v17 >= v15)
      {
        v126 = v33 + v26;
        v127 = v32 + v26;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v40 + (v45 & 0x3C);
        v73 = (char *)v39 + (v45 & 0x3C);
        v74 = v26;
        v75 = v17;
        do
        {
          v76 = v32 + v74;
          v77 = v33 + v74;
          v79 = v36[v71 / 4];
          v78 = v36[v71 / 4 + 1];
          v80 = ((v79 >> 10) & 0x3FF) - 512;
          v82 = *(_DWORD *)&v72[v71];
          v81 = *(_DWORD *)&v72[v71 + 4];
          v83 = (double)(int)((v82 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v84 = v83;
          v85 = (double)v80 * 1.59602679;
          v86 = (double)(int)((v79 & 0x3FF) - 512);
          v87 = v86 * -0.391761964;
          v88 = v84 + v86 * -0.391761964 * 0.000977517107;
          v89 = (double)v80 * -0.812967321;
          v90 = v86 * 2.01723214;
          v91 = v84 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 12) = 1065353216;
          v92 = (double)(int)(((v82 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v93 = v92;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v94 = v93 + v85 * 0.000977517107;
          *(_DWORD *)(v76 + 28) = 1065353216;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v98 = (double)(int)((v96 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v99 = v98;
          *(_DWORD *)(v76 + 8) = LODWORD(v84);
          v100 = v99 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(_DWORD *)(v76 + 24) = LODWORD(v93);
          *(float *)&v93 = (double)(int)(((v96 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v101 = *(float *)&v93;
          *(float *)&v88 = v88 + v89 * 0.000977517107;
          v102 = v101 + v87 * 0.000977517107 + v89 * 0.000977517107;
          *(float *)&v87 = v99 + v85 * 0.000977517107;
          *(float *)&v99 = v99 + v90 * 0.000977517107;
          *(float *)&v97 = v97;
          *(float *)&v85 = v101 + v85 * 0.000977517107;
          *(float *)&v90 = v101 + v90 * 0.000977517107;
          *(float *)&v100 = v100;
          v103 = (v78 & 0x3FF) - 512;
          *(float *)&v102 = v102;
          *(float *)v76 = v91;
          *(_DWORD *)(v76 + 4) = LODWORD(v88);
          v104 = (double)(int)(((v82 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v105 = v104;
          *(float *)(v76 + 16) = v94;
          *(_DWORD *)(v76 + 20) = LODWORD(v97);
          v106 = (double)v103 * 1.59602679;
          v107 = (double)(int)(((v79 >> 20) & 0x3FF) - 512);
          *(_DWORD *)v77 = LODWORD(v87);
          *(_DWORD *)(v77 + 4) = LODWORD(v100);
          *(float *)&v100 = v105 + v106 * 0.000977517107;
          v108 = v107 * -0.391761964;
          v109 = (double)v103 * -0.812967321;
          *(_DWORD *)(v77 + 8) = LODWORD(v99);
          v110 = v105 + v107 * -0.391761964 * 0.000977517107 + v109 * 0.000977517107;
          v111 = v107 * 2.01723214;
          *(float *)&v105 = v105 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 12) = 1065353216;
          *(_DWORD *)(v77 + 16) = LODWORD(v85);
          *(_DWORD *)(v77 + 20) = LODWORD(v102);
          *(float *)&v102 = (double)(int)((v81 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v112 = *(float *)&v102;
          *(float *)&v85 = v112 + v106 * 0.000977517107;
          *(_DWORD *)(v77 + 24) = LODWORD(v90);
          *(float *)&v90 = v112 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&v112 = v112 + v111 * 0.000977517107;
          *(_DWORD *)(v77 + 28) = 1065353216;
          *(_DWORD *)(v76 + 32) = LODWORD(v100);
          *(float *)(v76 + 36) = v110;
          *(float *)&v100 = (double)(int)(((v96 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v113 = *(float *)&v100;
          *(_DWORD *)(v76 + 40) = LODWORD(v105);
          *(float *)&v105 = v113 + v106 * 0.000977517107;
          v114 = v113 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 48) = LODWORD(v85);
          *(_DWORD *)(v76 + 52) = LODWORD(v90);
          *(_DWORD *)(v76 + 56) = LODWORD(v112);
          *(float *)&v113 = v113 + v111 * 0.000977517107;
          *(float *)&v112 = (double)(int)((v95 & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v115 = *(float *)&v112;
          *(_DWORD *)(v76 + 44) = 1065353216;
          *(float *)&v85 = v115 + v106 * 0.000977517107;
          *(float *)&v90 = v115 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(_DWORD *)(v76 + 60) = 1065353216;
          *(float *)&v115 = v115 + v111 * 0.000977517107;
          v116 = ((v78 >> 10) & 0x3FF) - 512;
          *(_DWORD *)(v77 + 32) = LODWORD(v105);
          *(float *)(v77 + 36) = v114;
          *(_DWORD *)(v77 + 40) = LODWORD(v113);
          v117 = ((v78 >> 20) & 0x3FF) - 512;
          *(float *)&v113 = (double)(int)(((v81 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v118 = *(float *)&v113;
          *(_DWORD *)(v77 + 44) = 1065353216;
          v119 = (double)v117 * 1.59602679;
          *(_DWORD *)(v77 + 48) = LODWORD(v85);
          *(_DWORD *)(v77 + 52) = LODWORD(v90);
          *(float *)&v85 = v118 + v119 * 0.000977517107;
          v120 = (double)v116 * -0.391761964;
          *(_DWORD *)(v77 + 56) = LODWORD(v115);
          v121 = (double)v117 * -0.812967321;
          *(float *)&v105 = v118 + v120 * 0.000977517107 + v121 * 0.000977517107;
          v122 = (double)v116 * 2.01723214;
          *(_DWORD *)(v77 + 60) = 1065353216;
          *(float *)&v118 = v118 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 64) = LODWORD(v85);
          *(_DWORD *)(v76 + 68) = LODWORD(v105);
          *(float *)&v85 = (double)(int)(((v81 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v123 = *(float *)&v85;
          *(_DWORD *)(v76 + 72) = LODWORD(v118);
          *(float *)&v118 = v123 + v119 * 0.000977517107;
          *(float *)&v105 = v123 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(_DWORD *)(v76 + 76) = 1065353216;
          *(float *)&v123 = v123 + v122 * 0.000977517107;
          *(_DWORD *)(v76 + 80) = LODWORD(v118);
          *(_DWORD *)(v76 + 84) = LODWORD(v105);
          *(float *)&v118 = (double)(int)(((v95 >> 10) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          *(_DWORD *)(v76 + 88) = LODWORD(v123);
          v124 = *(float *)&v118;
          *(float *)&v123 = v124 + v119 * 0.000977517107;
          *(_DWORD *)(v76 + 92) = 1065353216;
          *(float *)&v105 = v124 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v124 = v124 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 64) = LODWORD(v123);
          *(_DWORD *)(v77 + 68) = LODWORD(v105);
          *(_DWORD *)(v77 + 72) = LODWORD(v124);
          *(float *)&v124 = (double)(int)(((v95 >> 20) & 0x3FF) - 64) * 1.16438356 * 0.000977517107;
          v125 = *(float *)&v124;
          *(float *)&v123 = v125 + v119 * 0.000977517107;
          *(_DWORD *)(v77 + 76) = 1065353216;
          *(float *)&v121 = v125 + v120 * 0.000977517107 + v121 * 0.000977517107;
          *(float *)&v125 = v125 + v122 * 0.000977517107;
          *(_DWORD *)(v77 + 80) = LODWORD(v123);
          *(_DWORD *)(v77 + 84) = LODWORD(v121);
          *(_DWORD *)(v77 + 88) = LODWORD(v125);
          *(_DWORD *)(v77 + 92) = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v71);
        v36 = (_DWORD *)((char *)v36 + v71);
        v126 = v33 + v74;
        v127 = v32 + v74;
      }
      v128 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v129 = *((unsigned __int8 *)&v167 + v128);
          v130 = ((*v34 >> v129) & 0x3FF) - 64;
          v131 = (v129 >> 2) & 0x3C;
          v132 = *((unsigned __int8 *)&v167 + v38);
          v34 = (_DWORD *)((char *)v34 + v131);
          v133 = ((*v36 >> v132) & 0x3FF) - 512;
          v134 = (_DWORD *)((char *)v36 + ((v132 >> 2) & 0x3C));
          if (v38 == 2)
            v135 = 0;
          else
            v135 = v38 + 1;
          v136 = *((unsigned __int8 *)&v167 + v135);
          v137 = *v134 >> v136;
          v138 = (_DWORD *)((char *)v134 + ((v136 >> 2) & 0x3C));
          v139 = v137 & 0x3FF;
          if (v135 == 2)
            v140 = 0;
          else
            v140 = v135 + 1;
          if ((v75 & 1) != 0)
          {
            v38 = v140;
            v36 = v138;
          }
          v141 = (double)v130 * 1.16438356 * 0.000977517107;
          v142 = v141;
          v143 = (double)(v139 - 512) * 1.59602679;
          v144 = v142 + v143 * 0.000977517107;
          v145 = (double)v133 * -0.391761964;
          v146 = (double)(v139 - 512) * -0.812967321;
          v147 = (double)v133 * 2.01723214;
          v148 = v142 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(_DWORD *)(v127 + 12) = 1065353216;
          v149 = v142 + v147 * 0.000977517107;
          v150 = ((*v35 >> v129) & 0x3FF) - 64;
          v35 = (_DWORD *)((char *)v35 + v131);
          if (v128 == 2)
            v128 = 0;
          else
            ++v128;
          *(float *)(v127 + 8) = v149;
          v151 = (double)v150 * 1.16438356 * 0.000977517107;
          v152 = v148;
          v153 = v151;
          v154 = v153 + v143 * 0.000977517107;
          *(float *)v127 = v144;
          *(float *)(v127 + 4) = v152;
          v127 += 16;
          v155 = v153 + v145 * 0.000977517107 + v146 * 0.000977517107;
          *(float *)&v153 = v153 + v147 * 0.000977517107;
          *(float *)v126 = v154;
          *(float *)(v126 + 4) = v155;
          *(_DWORD *)(v126 + 8) = LODWORD(v153);
          *(_DWORD *)(v126 + 12) = 1065353216;
          ++v75;
          v126 += 16;
        }
        while (v11 != v75);
      }
      v28 = v165 + 4 * v159;
      v29 = &v162[v159];
      v16 = v164 + 1;
      v30 += v157;
      v25 = v166 + v157;
      v27 = &v163[v158];
    }
    while (v164 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_pf20_420v(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unint64_t v53;
  unint64_t v54;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v18 = *a8;
    v19 = a8[1];
    v20 = *a7;
    v21 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v9) >> 1) + v17);
    v53 = v10 >> 1;
    v54 = v13;
    v22 = 3 * ((v12 + 2) / 3);
    v23 = v13 - v13 % 3;
    v24 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
    if (v13 - v12 >= v24)
      v25 = v24;
    else
      v25 = v13 - v12;
    v26 = (_BYTE *)(v20 + v18 * v9 + v17);
    v27 = *a3 + 4 * v14 * v8 + 4 * (v12 / 3);
    v28 = v25 + v17;
    do
    {
      v29 = v26;
      v30 = v12;
      v31 = (unsigned int *)v27;
      if (v22 > v12)
      {
        v32 = 0;
        v33 = 10 * v12;
        v31 = (unsigned int *)v27;
        v34 = v12;
        do
        {
          v35 = (*v31 >> (v33 - 30 * (v34 / 3))) & 0x3FF;
          v31 += 2 - v12 + 3 * (v34 / 3) == v32;
          v26[v32] = (((4198405 * (unint64_t)(876 * v35 + 511)) >> 32) + 64) >> 2;
          ++v34;
          ++v32;
          v33 += 10;
        }
        while (v22 - v12 != v32);
        v29 = &v26[v32];
        v30 = 3 * ((v12 + 2) / 3);
      }
      while (v30 < v23)
      {
        v36 = *v31++;
        *v29 = (((4198405 * (unint64_t)(876 * (v36 & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v29[1] = (((4198405 * (unint64_t)(876 * ((v36 >> 10) & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v29[2] = (((4198405 * (unint64_t)(876 * ((v36 >> 20) & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v29 += 3;
        v30 += 3;
      }
      if (v30 < v28)
      {
        v37 = 10 * v30;
        do
        {
          v38 = (*v31 >> (v37 - 30 * (v30 / 3))) & 0x3FF;
          v31 += 3 * (v30 / 3) + 2 == v30;
          *v29++ = (((4198405 * (unint64_t)(876 * v38 + 511)) >> 32) + 64) >> 2;
          ++v30;
          v37 += 10;
        }
        while (v30 < v28);
      }
      v27 += 4 * v14;
      v26 += v18;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v39 = 0;
      v40 = 6 * ((v12 + 5) / 6);
      v41 = v53;
      if (v53 <= 1)
        v41 = 1;
      do
      {
        v42 = (unsigned int *)v16;
        v43 = v21;
        v44 = v12;
        if (v40 > v12)
        {
          v45 = 0;
          v46 = 10 * v12;
          v47 = v12;
          v42 = (unsigned int *)v16;
          do
          {
            v48 = (*v42 >> (v46 - 30 * (v47 / 3))) & 0x3FF;
            v42 += 2 - v12 + 3 * (v47 / 3) == v45;
            v21[v45] = (((4198405 * (unint64_t)(896 * v48 + 511)) >> 32) + 64) >> 2;
            ++v47;
            ++v45;
            v46 += 10;
          }
          while (v40 - v12 != v45);
          v43 = &v21[v45];
          v44 = 6 * ((v12 + 5) / 6);
        }
        while (v44 < (unint64_t)(6 * ((v54 * (unsigned __int128)0x2AAAAAAAAAAAAAABuLL) >> 64)))
        {
          v49 = *v42++;
          *v43 = (((4198405 * (unint64_t)(896 * (v49 & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v43[1] = (((4198405 * (unint64_t)(896 * ((v49 >> 10) & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v43[2] = (((4198405 * (unint64_t)(896 * ((v49 >> 20) & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v43 += 3;
          v44 += 3;
        }
        if (v44 < v28)
        {
          v50 = 10 * v44;
          do
          {
            v51 = (*v42 >> (v50 - 30 * (v44 / 3))) & 0x3FF;
            v42 += 3 * (v44 / 3) + 2 == v44;
            *v43++ = (((4198405 * (unint64_t)(896 * v51 + 511)) >> 32) + 64) >> 2;
            ++v44;
            v50 += 10;
          }
          while (v44 < v28);
        }
        v16 += 4 * v15;
        v21 += v19;
        ++v39;
      }
      while (v39 != v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20_420f(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v19 = *a8;
    v20 = a8[1];
    v21 = *a7;
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v9) >> 1) + v18);
    v24 = v10 >> 1;
    v25 = 3 * ((v12 + 2) / 3);
    v26 = v13 - v12;
    v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
    if (v13 - v12 >= v27)
      v26 = v27;
    v28 = (_BYTE *)(v21 + v19 * v9 + v18);
    v29 = v16 + 4 * v14 * v8 + 4 * (v12 / 3);
    v30 = v26 + v18;
    do
    {
      v31 = v28;
      v32 = v12;
      v33 = (unsigned int *)v29;
      if (v25 > v12)
      {
        v34 = 0;
        v35 = 10 * v12;
        v33 = (unsigned int *)v29;
        v36 = v12;
        do
        {
          v37 = *v33 >> (v35 - 30 * (v36 / 3));
          v33 += 2 - v12 + 3 * (v36 / 3) == v34;
          v28[v34] = v37 >> 2;
          ++v36;
          ++v34;
          v35 += 10;
        }
        while (v25 - v12 != v34);
        v31 = &v28[v34];
        v32 = 3 * ((v12 + 2) / 3);
      }
      while (v32 < v13 - v13 % 3)
      {
        v38 = *v33++;
        *v31 = v38 >> 2;
        v31[1] = v38 >> 12;
        v31[2] = v38 >> 22;
        v31 += 3;
        v32 += 3;
      }
      if (v32 < v30)
      {
        v39 = 10 * v32;
        do
        {
          v40 = *v33 >> (v39 - 30 * (v32 / 3));
          v33 += 3 * (v32 / 3) + 2 == v32;
          *v31++ = v40 >> 2;
          ++v32;
          v39 += 10;
        }
        while (v32 < v30);
      }
      v29 += 4 * v14;
      v28 += v19;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = 6 * ((v12 + 5) / 6);
      v43 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v13) >> 64);
      if (v24 <= 1)
        v44 = 1;
      else
        v44 = v24;
      do
      {
        v45 = (unsigned int *)v17;
        v46 = v23;
        v47 = v12;
        if (v42 > v12)
        {
          v48 = 0;
          v49 = 10 * v12;
          v50 = v12;
          v45 = (unsigned int *)v17;
          do
          {
            v51 = *v45 >> (v49 - 30 * (v50 / 3));
            v45 += 2 - v12 + 3 * (v50 / 3) == v48;
            v23[v48] = v51 >> 2;
            ++v50;
            ++v48;
            v49 += 10;
          }
          while (v42 - v12 != v48);
          v46 = &v23[v48];
          v47 = 6 * ((v12 + 5) / 6);
        }
        while (v47 < v43)
        {
          v52 = *v45++;
          *v46 = v52 >> 2;
          v46[1] = v52 >> 12;
          v46[2] = v52 >> 22;
          v46 += 3;
          v47 += 3;
        }
        if (v47 < v30)
        {
          v53 = 10 * v47;
          do
          {
            v54 = *v45 >> (v53 - 30 * (v47 / 3));
            v45 += 3 * (v47 / 3) + 2 == v47;
            *v46++ = v54 >> 2;
            ++v47;
            v53 += 10;
          }
          while (v47 < v30);
        }
        v17 += 4 * v15;
        v23 += v20;
        ++v41;
      }
      while (v41 != v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20_x420(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  _WORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = *a4 >> 2;
    v13 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v14 = a4[1] >> 2;
    v15 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v16 = a3[1] + 4 * ((unint64_t)(v14 * v8) >> 1) + 4 * (v13 / 3);
    v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v18 = *a8 >> 1;
    v53 = a8[1] >> 1;
    v19 = *a7;
    v21 = a7[1] + ((v53 * v9) & 0xFFFFFFFFFFFFFFFELL) + 2 * v17;
    v52 = v10 >> 1;
    v22 = 3 * ((v13 + 2) / 3);
    v54 = v15;
    v23 = v15 - v13;
    v24 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
    if (v15 - v13 >= v24)
      v23 = v24;
    v25 = v19 + 2 * v18 * v9 + 2 * v17;
    v26 = *a3 + 4 * v12 * v8 + 4 * (v13 / 3);
    v27 = v23 + v17;
    do
    {
      v28 = (_WORD *)v25;
      v29 = v13;
      v30 = (unsigned int *)v26;
      if (v22 > v13)
      {
        v31 = 0;
        v32 = 0;
        v33 = 10 * v13;
        v30 = (unsigned int *)v26;
        v34 = v13;
        do
        {
          *(_WORD *)(v25 + 2 * v32) = ((unsigned __int16)((4198405
                                                         * (unint64_t)(876
                                                                            * ((*v30 >> (v33 - 30 * (v34 / 3))) & 0x3FF)
                                                                            + 511)) >> 32) << 6)
                                    + 4096;
          v30 += 2 - v13 + 3 * (v34 / 3) == v32;
          ++v34;
          ++v32;
          v33 += 10;
          v31 -= 2;
        }
        while (v22 - v13 != v32);
        v28 = (_WORD *)(v25 - v31);
        v29 = 3 * ((v13 + 2) / 3);
      }
      while (v29 < v15 - v15 % 3)
      {
        v35 = *v30++;
        *v28 = ((unsigned __int16)((4198405 * (unint64_t)(876 * (v35 & 0x3FF) + 511)) >> 32) << 6) + 4096;
        v28[1] = ((unsigned __int16)((4198405 * (unint64_t)(876 * ((v35 >> 10) & 0x3FF) + 511)) >> 32) << 6)
               + 4096;
        v28[2] = ((unsigned __int16)((4198405 * (unint64_t)(876 * ((v35 >> 20) & 0x3FF) + 511)) >> 32) << 6)
               + 4096;
        v28 += 3;
        v29 += 3;
      }
      if (v29 < v27)
      {
        v36 = 10 * v29;
        do
        {
          v37 = (*v30 >> (v36 - 30 * (v29 / 3))) & 0x3FF;
          v30 += 3 * (v29 / 3) + 2 == v29;
          *v28++ = ((unsigned __int16)((4198405 * (unint64_t)(876 * v37 + 511)) >> 32) << 6) + 4096;
          ++v29;
          v36 += 10;
        }
        while (v29 < v27);
      }
      v26 += 4 * v12;
      v25 += 2 * v18;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v38 = 0;
      v39 = 6 * ((v13 + 5) / 6);
      v40 = v52;
      if (v52 <= 1)
        v40 = 1;
      do
      {
        v41 = (unsigned int *)v16;
        v42 = (_WORD *)v21;
        v43 = v13;
        if (v39 > v13)
        {
          v44 = 0;
          v45 = 0;
          v46 = 10 * v13;
          v47 = v13;
          v41 = (unsigned int *)v16;
          do
          {
            *(_WORD *)(v21 + 2 * v45) = ((unsigned __int16)((4198405
                                                           * (unint64_t)(896
                                                                              * ((*v41 >> (v46 - 30 * (v47 / 3))) & 0x3FF)
                                                                              + 511)) >> 32) << 6)
                                      + 4096;
            v41 += 2 - v13 + 3 * (v47 / 3) == v45;
            ++v47;
            ++v45;
            v46 += 10;
            v44 -= 2;
          }
          while (v39 - v13 != v45);
          v42 = (_WORD *)(v21 - v44);
          v43 = 6 * ((v13 + 5) / 6);
        }
        while (v43 < (unint64_t)(6 * ((v54 * (unsigned __int128)0x2AAAAAAAAAAAAAABuLL) >> 64)))
        {
          v48 = *v41++;
          *v42 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (v48 & 0x3FF) + 511)) >> 32) << 6) + 4096;
          v42[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * ((v48 >> 10) & 0x3FF) + 511)) >> 32) << 6)
                 + 4096;
          v42[2] = ((unsigned __int16)((4198405 * (unint64_t)(896 * ((v48 >> 20) & 0x3FF) + 511)) >> 32) << 6)
                 + 4096;
          v42 += 3;
          v43 += 3;
        }
        if (v43 < v27)
        {
          v49 = 10 * v43;
          do
          {
            v50 = (*v41 >> (v49 - 30 * (v43 / 3))) & 0x3FF;
            v41 += 3 * (v43 / 3) + 2 == v43;
            *v42++ = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50 + 511)) >> 32) << 6)
                   + 4096;
            ++v43;
            v49 += 10;
          }
          while (v43 < v27);
        }
        v16 += 4 * v14;
        v21 += 2 * v53;
        ++v38;
      }
      while (v38 != v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20_xf20(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  _WORD *v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  _WORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = *a4 >> 2;
    v13 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v14 = a4[1] >> 2;
    v15 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v14 * v8) >> 1) + 4 * (v13 / 3);
    v18 = *a8 >> 1;
    v19 = a8[1] >> 1;
    v20 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v21 = a7[1] + ((v19 * v9) & 0xFFFFFFFFFFFFFFFELL) + 2 * v20;
    v22 = v10 >> 1;
    v23 = 3 * ((v13 + 2) / 3);
    v24 = *a7 + 2 * v18 * v9 + 2 * v20;
    v25 = v16 + 4 * v12 * v8;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v20;
    if (v15 - v13 >= v26)
      v27 = v26;
    else
      v27 = v15 - v13;
    v28 = (unsigned int *)(v25 + 4 * (v13 / 3));
    v29 = v27 + v20;
    v30 = 2 * v18;
    do
    {
      v31 = (_WORD *)v24;
      v32 = v13;
      v33 = v28;
      if (v23 > v13)
      {
        v34 = 0;
        v35 = 0;
        v36 = 10 * v13;
        v33 = v28;
        v37 = v13;
        do
        {
          *(_WORD *)(v24 + 2 * v35) = (unsigned __int16)(*v33 >> (v36 - 30 * (v37 / 3))) << 6;
          v33 += 2 - v13 + 3 * (v37 / 3) == v35;
          ++v37;
          ++v35;
          v36 += 10;
          v34 -= 2;
        }
        while (v23 - v13 != v35);
        v31 = (_WORD *)(v24 - v34);
        v32 = 3 * ((v13 + 2) / 3);
      }
      while (v32 < v15 - v15 % 3)
      {
        v38 = *v33++;
        *v31 = (_WORD)v38 << 6;
        v31[1] = (v38 >> 4) & 0xFFC0;
        v31[2] = (v38 >> 14) & 0xFFC0;
        v31 += 3;
        v32 += 3;
      }
      if (v32 < v29)
      {
        v39 = 10 * v32;
        do
        {
          v40 = *v33 >> (v39 - 30 * (v32 / 3));
          v33 += 3 * (v32 / 3) + 2 == v32;
          *v31++ = (_WORD)v40 << 6;
          ++v32;
          v39 += 10;
        }
        while (v32 < v29);
      }
      v28 += v12;
      v24 += v30;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v41 = 0;
      v42 = 6 * ((v13 + 5) / 6);
      v43 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v15) >> 64);
      if (v22 <= 1)
        v44 = 1;
      else
        v44 = v22;
      v45 = 2 * v19;
      do
      {
        v46 = (unsigned int *)v17;
        v47 = (_WORD *)v21;
        v48 = v13;
        if (v42 > v13)
        {
          v49 = 0;
          v50 = 0;
          v51 = 10 * v13;
          v52 = v13;
          v46 = (unsigned int *)v17;
          do
          {
            *(_WORD *)(v21 + 2 * v50) = (unsigned __int16)(*v46 >> (v51 - 30 * (v52 / 3))) << 6;
            v46 += 2 - v13 + 3 * (v52 / 3) == v50;
            ++v52;
            ++v50;
            v51 += 10;
            v49 -= 2;
          }
          while (v42 - v13 != v50);
          v47 = (_WORD *)(v21 - v49);
          v48 = 6 * ((v13 + 5) / 6);
        }
        while (v48 < v43)
        {
          v53 = *v46++;
          *v47 = (_WORD)v53 << 6;
          v47[1] = (v53 >> 4) & 0xFFC0;
          v47[2] = (v53 >> 14) & 0xFFC0;
          v47 += 3;
          v48 += 3;
        }
        if (v48 < v29)
        {
          v54 = 10 * v48;
          do
          {
            v55 = *v46 >> (v54 - 30 * (v48 / 3));
            v46 += 3 * (v48 / 3) + 2 == v48;
            *v47++ = (_WORD)v55 << 6;
            ++v48;
            v54 += 10;
          }
          while (v48 < v29);
        }
        v17 += 4 * v14;
        v21 += v45;
        ++v41;
      }
      while (v41 != v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20_y420(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _DWORD *v50;
  unsigned int v51;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 32);
    v13 = (v12 & 1) + v12;
    v14 = (*(_QWORD *)(a2 + 16) + (_DWORD)v12) & 0xFFFFFFFE;
    v15 = *a4 >> 2;
    v63 = a4[1] >> 2;
    v16 = *a3;
    v17 = a3[1] + 4 * ((unint64_t)(v63 * v8) >> 1) + 4 * (v13 / 3);
    v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v19 = *a8;
    v62 = a8[1];
    v20 = a8[2];
    v21 = *a7;
    v22 = (_BYTE *)(a7[1] + ((unint64_t)(v62 * v9) >> 1) + v18);
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v9) >> 1) + v18);
    v60 = v10 >> 1;
    v61 = v14;
    v24 = 3 * ((v13 + 2) / 3);
    v25 = v14 - v13;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
    if (v14 - v13 >= v26)
      v25 = v26;
    v27 = (_BYTE *)(v21 + v19 * v9 + v18);
    v28 = v16 + 4 * v15 * v8 + 4 * (v13 / 3);
    v29 = v25 + v18;
    do
    {
      v30 = v27;
      v31 = (v12 & 1) + v12;
      v32 = (unsigned int *)v28;
      if (v24 > v13)
      {
        v33 = 0;
        v34 = 10 * v13;
        v32 = (unsigned int *)v28;
        v35 = (v12 & 1) + v12;
        do
        {
          v36 = (*v32 >> (v34 - 30 * (v35 / 3))) & 0x3FF;
          v32 += 2 - v13 + 3 * (v35 / 3) == v33;
          v27[v33] = (((4198405 * (unint64_t)(876 * v36 + 511)) >> 32) + 64) >> 2;
          ++v35;
          ++v33;
          v34 += 10;
        }
        while (v24 - v13 != v33);
        v30 = &v27[v33];
        v31 = 3 * ((v13 + 2) / 3);
      }
      while (v31 < v14 - v14 % 3)
      {
        v37 = *v32++;
        *v30 = (((4198405 * (unint64_t)(876 * (v37 & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v30[1] = (((4198405 * (unint64_t)(876 * ((v37 >> 10) & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v30[2] = (((4198405 * (unint64_t)(876 * ((v37 >> 20) & 0x3FF) + 511)) >> 32) + 64) >> 2;
        v30 += 3;
        v31 += 3;
      }
      if (v31 < v29)
      {
        v38 = 10 * v31;
        do
        {
          v39 = (*v32 >> (v38 - 30 * (v31 / 3))) & 0x3FF;
          v32 += 3 * (v31 / 3) + 2 == v31;
          *v30++ = (((4198405 * (unint64_t)(876 * v39 + 511)) >> 32) + 64) >> 2;
          ++v31;
          v38 += 10;
        }
        while (v31 < v29);
      }
      v28 += 4 * v15;
      v27 += v19;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v40 = 0;
      v41 = 6 * ((v13 + 5) / 6);
      if (v60 <= 1)
        v42 = 1;
      else
        v42 = v60;
      do
      {
        v43 = 1;
        if (v13 >= v41)
        {
          v50 = (_DWORD *)v17;
          v49 = v22;
          v48 = v23;
          v53 = v13;
        }
        else
        {
          v44 = v13 - 2;
          v45 = 10 * v13;
          v46 = v13 - v41;
          v47 = v13;
          v48 = v23;
          v49 = v22;
          v50 = (_DWORD *)v17;
          do
          {
            v51 = ((4198405 * (unint64_t)(896 * ((*v50 >> (v45 - 30 * (v47 / 3))) & 0x3FFu) + 511)) >> 32) + 64;
            if (v43)
            {
              v43 = 0;
              *v49++ = v51 >> 2;
            }
            else
            {
              *v48++ = v51 >> 2;
              v43 = 1;
            }
            v50 += v44 == 3 * (v47 / 3);
            ++v47;
            v45 += 10;
            ++v44;
          }
          while (!__CFADD__(v46++, 1));
          v53 = 6 * ((v13 + 5) / 6);
        }
        while (v53 < (unint64_t)(6 * ((v61 * (unsigned __int128)0x2AAAAAAAAAAAAAABuLL) >> 64)))
        {
          v54 = (((4198405 * (unint64_t)(896 * ((*v50 >> 10) & 0x3FFu) + 511)) >> 32) + 64) >> 2;
          v55 = (((4198405 * (unint64_t)(896 * ((*v50 >> 20) & 0x3FFu) + 511)) >> 32) + 64) >> 2;
          *v49 = (((4198405 * (unint64_t)(896 * (*v50 & 0x3FFu) + 511)) >> 32) + 64) >> 2;
          *v48 = v54;
          v49[1] = v55;
          v56 = v50[1];
          v50 += 2;
          v48[1] = (((4198405 * (unint64_t)(896 * (v56 & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v49[2] = (((4198405 * (unint64_t)(896 * ((v56 >> 10) & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v48[2] = (((4198405 * (unint64_t)(896 * ((v56 >> 20) & 0x3FF) + 511)) >> 32) + 64) >> 2;
          v49 += 3;
          v48 += 3;
          v53 += 6;
        }
        if (v53 < v29)
        {
          v57 = 10 * v53;
          do
          {
            v58 = ((4198405 * (unint64_t)(896 * ((*v50 >> (v57 - 30 * (v53 / 3))) & 0x3FFu) + 511)) >> 32) + 64;
            if (v43)
            {
              v43 = 0;
              *v49++ = v58 >> 2;
            }
            else
            {
              *v48++ = v58 >> 2;
              v43 = 1;
            }
            v50 += 3 * (v53 / 3) + 2 == v53;
            ++v53;
            v57 += 10;
          }
          while (v53 < v29);
        }
        v17 += 4 * v63;
        v22 += v62;
        v23 += v20;
        ++v40;
      }
      while (v40 != v42);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20_f420(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _DWORD *v51;
  unsigned int v52;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unint64_t v61;

  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8 >= (unint64_t)((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9)
    v10 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v9;
  else
    v10 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v10)
  {
    v11 = 0;
    v12 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
    v13 = (*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
    v14 = *a4 >> 2;
    v15 = a4[1] >> 2;
    v16 = a3[1] + 4 * ((unint64_t)(v15 * v8) >> 1) + 4 * (v12 / 3);
    v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a7;
    v22 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v9) >> 1) + v17);
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v9) >> 1) + v17);
    v61 = v10 >> 1;
    v24 = 3 * ((v12 + 2) / 3);
    v25 = v13 - v12;
    v26 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
    if (v13 - v12 >= v26)
      v25 = v26;
    v27 = (_BYTE *)(v21 + v18 * v9 + v17);
    v28 = *a3 + 4 * v14 * v8 + 4 * (v12 / 3);
    v29 = v25 + v17;
    do
    {
      v30 = v27;
      v31 = v12;
      v32 = (unsigned int *)v28;
      if (v24 > v12)
      {
        v33 = 0;
        v34 = 10 * v12;
        v32 = (unsigned int *)v28;
        v35 = v12;
        do
        {
          v36 = *v32 >> (v34 - 30 * (v35 / 3));
          v32 += 2 - v12 + 3 * (v35 / 3) == v33;
          v27[v33] = v36 >> 2;
          ++v35;
          ++v33;
          v34 += 10;
        }
        while (v24 - v12 != v33);
        v30 = &v27[v33];
        v31 = 3 * ((v12 + 2) / 3);
      }
      while (v31 < v13 - v13 % 3)
      {
        v37 = *v32++;
        *v30 = v37 >> 2;
        v30[1] = v37 >> 12;
        v30[2] = v37 >> 22;
        v30 += 3;
        v31 += 3;
      }
      if (v31 < v29)
      {
        v38 = 10 * v31;
        do
        {
          v39 = *v32 >> (v38 - 30 * (v31 / 3));
          v32 += 3 * (v31 / 3) + 2 == v31;
          *v30++ = v39 >> 2;
          ++v31;
          v38 += 10;
        }
        while (v31 < v29);
      }
      v28 += 4 * v14;
      v27 += v18;
      ++v11;
    }
    while (v11 != v10);
    if (v10 >= 2)
    {
      v40 = 0;
      v41 = 6 * ((v12 + 5) / 6);
      v42 = 2 * ((__PAIR128__(2, 0x2AAAAAAAAAAAAAABLL) * v13) >> 64);
      v43 = v61;
      if (v61 <= 1)
        v43 = 1;
      do
      {
        v44 = 1;
        if (v12 >= v41)
        {
          v51 = (_DWORD *)v16;
          v50 = v22;
          v49 = v23;
          v54 = v12;
        }
        else
        {
          v45 = v12 - 2;
          v46 = 10 * v12;
          v47 = v12 - v41;
          v48 = v12;
          v49 = v23;
          v50 = v22;
          v51 = (_DWORD *)v16;
          do
          {
            v52 = *v51 >> (v46 - 30 * (v48 / 3));
            if (v44)
            {
              v44 = 0;
              *v50++ = v52 >> 2;
            }
            else
            {
              *v49++ = v52 >> 2;
              v44 = 1;
            }
            v51 += v45 == 3 * (v48 / 3);
            ++v48;
            v46 += 10;
            ++v45;
          }
          while (!__CFADD__(v47++, 1));
          v54 = 6 * ((v12 + 5) / 6);
        }
        while (v54 < v42)
        {
          v55 = *v51 >> 12;
          v56 = *v51 >> 22;
          *v50 = *v51 >> 2;
          *v49 = v55;
          v50[1] = v56;
          v57 = v51[1];
          v51 += 2;
          v49[1] = v57 >> 2;
          v50[2] = v57 >> 12;
          v49[2] = v57 >> 22;
          v50 += 3;
          v49 += 3;
          v54 += 6;
        }
        if (v54 < v29)
        {
          v58 = 10 * v54;
          do
          {
            v59 = *v51 >> (v58 - 30 * (v54 / 3));
            if (v44)
            {
              v44 = 0;
              *v50++ = v59 >> 2;
            }
            else
            {
              *v49++ = v59 >> 2;
              v44 = 1;
            }
            v51 += 3 * (v54 / 3) + 2 == v54;
            ++v54;
            v58 += 10;
          }
          while (v54 < v29);
        }
        v16 += 4 * v15;
        v22 += v19;
        v23 += v20;
        ++v40;
      }
      while (v40 != v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  BOOL v58;
  _BYTE *v59;
  char v60;
  _DWORD *v61;
  char v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE *v71;
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _BYTE *v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  char v146;
  char v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  char v169;
  char v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char v178;
  char v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  char v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  char v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  char v222;
  char v223;
  _BYTE *v224;
  _BYTE *v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  _DWORD *v232;
  unsigned int v233;
  unint64_t v234;
  int v235;
  _DWORD *v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  char v250;
  char v251;
  char v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  char v264;
  char v265;
  char v266;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  int v286;

  v286 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v12 = a6[2];
  else
    v12 = v10 - v9;
  v13 = v11 - v8;
  if (v13 >= a6[3])
    v13 = a6[3];
  v14 = v10 % 6;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  if (v13 >= 2)
  {
    v18 = 0;
    v276 = v9 % 3;
    v268 = v17 % 3;
    v19 = 6 * (v9 / 6) - v9 + 6;
    v274 = v13 >> 1;
    v20 = *a8;
    v21 = *a8 * a6[5];
    v22 = *a7 + v21;
    v23 = 4 * a6[4];
    v24 = a4[1];
    v25 = a3[1] + v24 * (v8 >> 1) + 4 * (v9 / 3);
    v26 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v27 = (_DWORD *)((char *)v26 + *a4);
    v272 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v273 = v23;
    v271 = v24 >> 2;
    v269 = v12;
    v270 = 2 * v20;
    v28 = *a7 + v20 + v21;
    v275 = v19;
    v283 = v17;
    do
    {
      v281 = v22;
      v282 = v18;
      v29 = 0;
      v277 = v28;
      v278 = v27;
      v30 = v276;
      v31 = v276;
      v32 = (_DWORD *)v25;
      v33 = v27;
      v279 = v26;
      do
      {
        v34 = v26;
        v35 = *v26;
        v36 = *((unsigned __int8 *)&v286 + v30);
        v37 = *((unsigned __int8 *)&v286 + v31);
        v38 = ((*v32 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v32 + ((v37 >> 2) & 0x3C));
        if (v31 == 2)
          v40 = 0;
        else
          v40 = v31 + 1;
        v41 = *((unsigned __int8 *)&v286 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v29 & 1) != 0)
          v31 = v46;
        v47 = (v42 & 0x3FF) << 15;
        v48 = v45 - 512;
        v49 = -5391 * v38 - 18721 * v48;
        v50 = 61650 * v38;
        v51 = 48320 * v48;
        v52 = 48320 * v48 + v47;
        if ((v29 & 1) != 0)
          v32 = v44;
        v53 = v49 + v47;
        v54 = v50 + v47;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        v56 = (255 * ((v54 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v54 > 33538047)
          LOBYTE(v56) = -1;
        v58 = v52 < -16384;
        v59 = (_BYTE *)(v22 + v23);
        if (v58)
          v60 = 0;
        else
          v60 = v55;
        v59[1] = v60;
        v61 = v33;
        *v59 = -1;
        if (v53 >= -16384)
          v62 = v57;
        else
          v62 = 0;
        v59[2] = v62;
        if (v54 >= -16384)
          v63 = v56;
        else
          v63 = 0;
        v59[3] = v63;
        v64 = ((*v61 >> v36) & 0x3FF) << 15;
        v65 = v64 + v51;
        v66 = v64 + v49;
        v67 = v64 + v50;
        if (v30 == 2)
          v30 = 0;
        else
          ++v30;
        v68 = (255 * ((v65 + 0x4000) >> 15) + 511) / 0x3FFu;
        v69 = (255 * ((v66 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v65 > 33538047)
          LOBYTE(v68) = -1;
        if (v66 > 33538047)
          LOBYTE(v69) = -1;
        v70 = (255 * ((v67 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v67 > 33538047)
          LOBYTE(v70) = -1;
        v58 = v65 < -16384;
        v71 = (_BYTE *)(v28 + v23);
        if (v58)
          LOBYTE(v68) = 0;
        v71[1] = v68;
        if (v66 >= -16384)
          v72 = v69;
        else
          v72 = 0;
        v71[2] = v72;
        v73 = v36 >> 2;
        if (v67 >= -16384)
          v74 = v70;
        else
          v74 = 0;
        v71[3] = v74;
        *v71 = -1;
        v26 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        v33 = (_DWORD *)((char *)v61 + ((v36 >> 2) & 0x3C));
        ++v29;
        v22 += 4;
        v28 += 4;
      }
      while (v19 != v29);
      v280 = v25;
      if (v19 >= v17)
      {
        v224 = (_BYTE *)(v22 + v23);
        v225 = (_BYTE *)(v28 + v23);
        v226 = v269;
        v227 = v268;
      }
      else
      {
        v75 = 0;
        v284 = (char *)v61 + (v73 & 0x3C);
        v285 = (char *)v34 + (v73 & 0x3C);
        v76 = v23;
        do
        {
          v77 = v32[v75 / 4];
          v78 = (_BYTE *)(v22 + v76);
          v79 = *(_DWORD *)&v285[v75];
          v80 = (v77 & 0x3FF) - 512;
          v81 = (v79 & 0x3FF) << 15;
          v82 = ((v77 >> 10) & 0x3FF) - 512;
          v83 = -5391 * v80 - 18721 * v82;
          v84 = 61650 * v80;
          v85 = 48320 * v82;
          v86 = 48320 * v82 + v81;
          v87 = *(_DWORD *)&v284[v75];
          v88 = v83 + v81;
          v89 = v84 + v81;
          v90 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v90) = -1;
          v91 = (255 * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          v92 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v91) = -1;
          if (v89 > 33538047)
            LOBYTE(v92) = -1;
          if (v86 >= -16384)
            v93 = v90;
          else
            v93 = 0;
          v78[1] = v93;
          v94 = (32 * v79) & 0x1FF8000;
          v95 = v85 + v94;
          if (v88 < -16384)
            LOBYTE(v91) = 0;
          v96 = v83 + v94;
          v58 = v89 < -16384;
          v97 = 255 * ((v83 + v94 + 0x4000) >> 15) + 511;
          v98 = v84 + v94;
          v78[2] = v91;
          v99 = 255 * ((v84 + v94 + 0x4000) >> 15) + 511;
          if (v58)
            LOBYTE(v92) = 0;
          v100 = (255 * ((v85 + v94 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[3] = v92;
          v101 = ((4198405 * (unint64_t)v97) >> 32)
               + ((v97 - ((4198405 * (unint64_t)v97) >> 32)) >> 1);
          if (v95 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          v103 = v101 >> 9;
          v104 = (4198405 * (unint64_t)v99) >> 32;
          v105 = v99 - v104;
          if (v96 > 33538047)
            LOBYTE(v103) = -1;
          v106 = (v104 + (v105 >> 1)) >> 9;
          if (v98 > 33538047)
            LOBYTE(v106) = -1;
          if (v95 < -16384)
            v102 = 0;
          v78[5] = v102;
          v107 = (v87 & 0x3FF) << 15;
          v108 = v85 + v107;
          v109 = v85 + v107 + 0x4000;
          if (v96 < -16384)
            LOBYTE(v103) = 0;
          v110 = v83 + v107;
          v58 = v98 < -16384;
          v111 = 255 * ((v83 + v107 + 0x4000) >> 15);
          v112 = v107 + v84;
          v78[6] = v103;
          v113 = ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)
               + ((255 * (v109 >> 15)
                               + 511
                               - ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)) >> 1);
          if (v58)
            LOBYTE(v106) = 0;
          v78[7] = v106;
          v114 = ((4198405 * (unint64_t)(v111 + 511)) >> 32)
               + ((v111 + 511 - ((4198405 * (unint64_t)(v111 + 511)) >> 32)) >> 1);
          v115 = (_BYTE *)(v28 + v76);
          *v78 = -1;
          v78[4] = -1;
          v116 = v113 >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v114 >> 9;
          v118 = (255 * ((v112 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v112 > 33538047)
            LOBYTE(v118) = -1;
          if (v108 >= -16384)
            v119 = v116;
          else
            v119 = 0;
          v115[1] = v119;
          if (v110 < -16384)
            LOBYTE(v117) = 0;
          v120 = (32 * v87) & 0x1FF8000;
          v121 = v85 + v120;
          v122 = v83 + v120;
          *v115 = -1;
          v115[2] = v117;
          v123 = v120 + v84;
          if (v112 < -16384)
            LOBYTE(v118) = 0;
          v115[3] = v118;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[4] = -1;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v121 < -16384)
            LOBYTE(v124) = 0;
          v115[5] = v124;
          if (v122 >= -16384)
            v127 = v125;
          else
            v127 = 0;
          v115[6] = v127;
          if (v123 >= -16384)
            v128 = v126;
          else
            v128 = 0;
          v115[7] = v128;
          v129 = v32[v75 / 4 + 1];
          v130 = ((v77 >> 20) & 0x3FF) - 512;
          v131 = (v129 & 0x3FF) - 512;
          v132 = (v79 >> 5) & 0x1FF8000;
          v133 = -5391 * v130 - 18721 * v131;
          v134 = 61650 * v130;
          v135 = 48320 * v131;
          v136 = v135 + v132;
          v137 = v133 + v132;
          v138 = v134 + v132;
          v139 = 255 * ((v137 + 0x4000) >> 15) + 511;
          v140 = (255 * ((v136 + 0x4000) >> 15) + 511) / 0x3FFu;
          v141 = (4198405 * (unint64_t)v139) >> 32;
          v142 = v139 - v141;
          if (v136 > 33538047)
            LOBYTE(v140) = -1;
          v143 = (v141 + (v142 >> 1)) >> 9;
          if (v137 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[8] = -1;
          if (v138 > 33538047)
            LOBYTE(v144) = -1;
          if (v136 >= -16384)
            v145 = v140;
          else
            v145 = 0;
          v78[9] = v145;
          if (v137 >= -16384)
            v146 = v143;
          else
            v146 = 0;
          v78[10] = v146;
          if (v138 >= -16384)
            v147 = v144;
          else
            v147 = 0;
          v78[11] = v147;
          v148 = *(_DWORD *)&v285[v75 + 4];
          v149 = (v148 & 0x3FF) << 15;
          v150 = v149 + v135;
          v151 = v149 + v133;
          v152 = v149 + v134;
          v153 = (255 * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOBYTE(v153) = -1;
          v154 = (255 * ((v151 + 0x4000) >> 15) + 511) / 0x3FFu;
          v155 = (255 * ((v152 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v151 > 33538047)
            LOBYTE(v154) = -1;
          if (v152 > 33538047)
            LOBYTE(v155) = -1;
          v78[12] = -1;
          if (v150 >= -16384)
            v156 = v153;
          else
            v156 = 0;
          v78[13] = v156;
          v157 = (v87 >> 5) & 0x1FF8000;
          v158 = v135 + v157;
          if (v151 >= -16384)
            v159 = v154;
          else
            v159 = 0;
          v160 = 255 * ((v135 + v157 + 0x4000) >> 15) + 511;
          v161 = v133 + v157;
          v58 = v152 < -16384;
          v162 = 255 * ((v133 + v157 + 0x4000) >> 15) + 511;
          v78[14] = v159;
          v163 = v134 + v157;
          if (v58)
            LOBYTE(v155) = 0;
          v78[15] = v155;
          v164 = v160 / 0x3FF;
          v165 = (4198405 * (unint64_t)v162) >> 32;
          v166 = v162 - v165;
          if (v158 > 33538047)
            LOBYTE(v164) = -1;
          v167 = (v165 + (v166 >> 1)) >> 9;
          if (v161 > 33538047)
            LOBYTE(v167) = -1;
          v168 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[8] = -1;
          if (v163 > 33538047)
            LOBYTE(v168) = -1;
          if (v158 >= -16384)
            v169 = v164;
          else
            v169 = 0;
          v115[9] = v169;
          if (v161 < -16384)
            LOBYTE(v167) = 0;
          v115[10] = v167;
          if (v163 >= -16384)
            v170 = v168;
          else
            v170 = 0;
          v115[11] = v170;
          v171 = *(_DWORD *)&v284[v75 + 4];
          v172 = (v171 & 0x3FF) << 15;
          v173 = v172 + v135;
          v174 = v172 + v133;
          v175 = v172 + v134;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v177 = (255 * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            v178 = -1;
          else
            v178 = (255 * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v175 > 33538047)
            LOBYTE(v177) = -1;
          v115[12] = -1;
          if (v173 >= -16384)
            v179 = v176;
          else
            v179 = 0;
          v58 = v174 < -16384;
          v180 = ((v129 >> 10) & 0x3FF) - 512;
          v181 = ((v129 >> 20) & 0x3FF) - 512;
          v115[13] = v179;
          v182 = (32 * v148) & 0x1FF8000;
          v183 = -18721 * v181 - 5391 * v180;
          v184 = 61650 * v180;
          v185 = 48320 * v181;
          if (v58)
            v186 = 0;
          else
            v186 = v178;
          v187 = v182 + v185;
          v58 = v175 < -16384;
          v188 = 255 * ((v182 + v185 + 0x4000) >> 15) + 511;
          v189 = v182 + v183;
          v115[14] = v186;
          v190 = 255 * ((v182 + v183 + 0x4000) >> 15) + 511;
          v191 = v182 + v184;
          v192 = v182 + v184 + 0x4000;
          if (v58)
            LOBYTE(v177) = 0;
          v193 = 255 * (v192 >> 15) + 511;
          v115[15] = v177;
          v194 = v188 / 0x3FF;
          if (v187 > 33538047)
            LOBYTE(v194) = -1;
          v195 = v190 / 0x3FF;
          if (v189 > 33538047)
            LOBYTE(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v191 > 33538047)
            LOBYTE(v196) = -1;
          v58 = v187 < -16384;
          v197 = (v148 >> 5) & 0x1FF8000;
          v198 = v197 + v185;
          if (v58)
            LOBYTE(v194) = 0;
          v58 = v189 < -16384;
          v199 = v197 + v183;
          v200 = 255 * ((v197 + v183 + 0x4000) >> 15);
          v78[17] = v194;
          v201 = v197 + v184;
          if (v58)
            LOBYTE(v195) = 0;
          v78[18] = v195;
          if (v191 < -16384)
            LOBYTE(v196) = 0;
          v78[19] = v196;
          v202 = (255 * ((v198 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v200 + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v201 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v201 > 33538047)
            LOBYTE(v204) = -1;
          if (v198 < -16384)
            LOBYTE(v202) = 0;
          v78[21] = v202;
          v58 = v199 < -16384;
          v17 = v283;
          if (v58)
            LOBYTE(v203) = 0;
          v78[22] = v203;
          if (v201 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v206 = (32 * v171) & 0x1FF8000;
          v207 = v206 + v185;
          v78[23] = v205;
          v208 = v206 + v183;
          v78[16] = -1;
          v209 = 255 * ((v206 + v183 + 0x4000) >> 15) + 511;
          v210 = v206 + v184;
          v78[20] = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          v212 = v209 / 0x3FF;
          if (v208 > 33538047)
            LOBYTE(v212) = -1;
          v213 = (255 * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOBYTE(v213) = -1;
          v214 = (v171 >> 5) & 0x1FF8000;
          v215 = v214 + v185;
          if (v207 < -16384)
            LOBYTE(v211) = 0;
          v216 = v214 + v183;
          v115[17] = v211;
          v217 = v214 + v184;
          if (v208 >= -16384)
            v218 = v212;
          else
            v218 = 0;
          v115[18] = v218;
          if (v210 < -16384)
            LOBYTE(v213) = 0;
          v115[19] = v213;
          v219 = (255 * ((v215 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v215 > 33538047)
            LOBYTE(v219) = -1;
          v220 = (255 * ((v216 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v216 > 33538047)
            LOBYTE(v220) = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          if (v215 >= -16384)
            v222 = v219;
          else
            v222 = 0;
          v115[21] = v222;
          if (v216 < -16384)
            LOBYTE(v220) = 0;
          v115[22] = v220;
          if (v217 >= -16384)
            v223 = v221;
          else
            v223 = 0;
          v115[23] = v223;
          v115[16] = -1;
          v115[20] = -1;
          v19 += 6;
          v75 += 8;
          v76 += 24;
        }
        while (v19 < v283);
        v26 = (_DWORD *)((char *)v34 + (v73 & 0x3C) + v75);
        v33 = (_DWORD *)((char *)v61 + (v73 & 0x3C) + v75);
        v32 = (_DWORD *)((char *)v32 + v75);
        v224 = (_BYTE *)(v22 + v76);
        v225 = (_BYTE *)(v28 + v76);
        v226 = v269;
        v227 = v268;
      }
      if (v19 < v226)
      {
        do
        {
          v228 = *((unsigned __int8 *)&v286 + v227);
          v229 = *((unsigned __int8 *)&v286 + v31);
          v230 = ((*v32 >> v229) & 0x3FF) - 512;
          v231 = v226;
          v232 = (_DWORD *)((char *)v32 + ((v229 >> 2) & 0x3C));
          if (v31 == 2)
            v233 = 0;
          else
            v233 = v31 + 1;
          v234 = *((unsigned __int8 *)&v286 + v233);
          v235 = (*v232 >> v234) & 0x3FF;
          v236 = (_DWORD *)((char *)v232 + ((v234 >> 2) & 0x3C));
          v237 = v235 - 512;
          if (v233 == 2)
            v238 = 0;
          else
            v238 = v233 + 1;
          if ((v19 & 1) != 0)
            v31 = v238;
          v239 = ((*v26 >> v228) & 0x3FF) << 15;
          if ((v19 & 1) != 0)
            v32 = v236;
          v240 = -5391 * v230 - 18721 * v237;
          v241 = 61650 * v230;
          v242 = 48320 * v237;
          v243 = 48320 * v237 + v239;
          v244 = v240 + v239;
          v245 = v241 + v239;
          v246 = (255 * ((v243 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v243 > 33538047)
            LOBYTE(v246) = -1;
          v247 = (255 * ((v244 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v244 > 33538047)
            LOBYTE(v247) = -1;
          v248 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          v249 = (v228 >> 2) & 0x3C;
          if (v245 > 33538047)
            LOBYTE(v248) = -1;
          *v224 = -1;
          if (v243 >= -16384)
            v250 = v246;
          else
            v250 = 0;
          v224[1] = v250;
          if (v244 >= -16384)
            v251 = v247;
          else
            v251 = 0;
          v224[2] = v251;
          if (v245 >= -16384)
            v252 = v248;
          else
            v252 = 0;
          v224[3] = v252;
          v26 = (_DWORD *)((char *)v26 + v249);
          v253 = *v33 >> v228;
          if (v227 == 2)
            v227 = 0;
          else
            ++v227;
          v33 = (_DWORD *)((char *)v33 + v249);
          v254 = (v253 & 0x3FF) << 15;
          v255 = v254 + v242;
          v256 = v254 + v240;
          v257 = v254 + v241;
          v258 = 255 * ((v257 + 0x4000) >> 15) + 511;
          v259 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v259) = -1;
          v260 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v261 = (4198405 * (unint64_t)v258) >> 32;
          v262 = v258 - v261;
          if (v256 > 33538047)
            LOBYTE(v260) = -1;
          v263 = (v261 + (v262 >> 1)) >> 9;
          if (v257 > 33538047)
            LOBYTE(v263) = -1;
          *v225 = -1;
          if (v255 >= -16384)
            v264 = v259;
          else
            v264 = 0;
          v225[1] = v264;
          if (v256 >= -16384)
            v265 = v260;
          else
            v265 = 0;
          v226 = v231;
          v225[2] = v265;
          if (v257 >= -16384)
            v266 = v263;
          else
            v266 = 0;
          v225[3] = v266;
          v225 += 4;
          ++v19;
          v224 += 4;
        }
        while (v231 != v19);
      }
      v23 = v273;
      v26 = &v279[v272];
      v27 = &v278[v272];
      v18 = v282 + 1;
      v22 = v281 + v270;
      v28 = v277 + v270;
      v25 = v280 + 4 * v271;
      v19 = v275;
    }
    while (v282 + 1 != v274);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  BOOL v58;
  _BYTE *v59;
  char v60;
  _DWORD *v61;
  char v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE *v71;
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _BYTE *v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  char v146;
  char v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  char v169;
  char v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char v178;
  char v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  char v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  char v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  char v222;
  char v223;
  _BYTE *v224;
  _BYTE *v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  _DWORD *v232;
  unsigned int v233;
  unint64_t v234;
  int v235;
  _DWORD *v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  char v250;
  char v251;
  char v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  char v264;
  char v265;
  char v266;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  int v286;

  v286 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v12 = a6[2];
  else
    v12 = v10 - v9;
  v13 = v11 - v8;
  if (v13 >= a6[3])
    v13 = a6[3];
  v14 = v10 % 6;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  if (v13 >= 2)
  {
    v18 = 0;
    v276 = v9 % 3;
    v268 = v17 % 3;
    v19 = 6 * (v9 / 6) - v9 + 6;
    v274 = v13 >> 1;
    v20 = *a8;
    v21 = *a8 * a6[5];
    v22 = *a7 + v21;
    v23 = 4 * a6[4];
    v24 = a4[1];
    v25 = a3[1] + v24 * (v8 >> 1) + 4 * (v9 / 3);
    v26 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v27 = (_DWORD *)((char *)v26 + *a4);
    v272 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v273 = v23;
    v271 = v24 >> 2;
    v269 = v12;
    v270 = 2 * v20;
    v28 = *a7 + v20 + v21;
    v275 = v19;
    v283 = v17;
    do
    {
      v281 = v22;
      v282 = v18;
      v29 = 0;
      v277 = v28;
      v278 = v27;
      v30 = v276;
      v31 = v276;
      v32 = (_DWORD *)v25;
      v33 = v27;
      v279 = v26;
      do
      {
        v34 = v26;
        v35 = *v26;
        v36 = *((unsigned __int8 *)&v286 + v30);
        v37 = *((unsigned __int8 *)&v286 + v31);
        v38 = ((*v32 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v32 + ((v37 >> 2) & 0x3C));
        if (v31 == 2)
          v40 = 0;
        else
          v40 = v31 + 1;
        v41 = *((unsigned __int8 *)&v286 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v29 & 1) != 0)
          v31 = v46;
        v47 = (v42 & 0x3FF) << 15;
        v48 = v45 - 512;
        v49 = -6137 * v38 - 15338 * v48;
        v50 = 60804 * v38;
        v51 = 51603 * v48;
        v52 = 51603 * v48 + v47;
        if ((v29 & 1) != 0)
          v32 = v44;
        v53 = v49 + v47;
        v54 = v50 + v47;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        v56 = (255 * ((v54 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v54 > 33538047)
          LOBYTE(v56) = -1;
        v58 = v52 < -16384;
        v59 = (_BYTE *)(v22 + v23);
        if (v58)
          v60 = 0;
        else
          v60 = v55;
        v59[1] = v60;
        v61 = v33;
        *v59 = -1;
        if (v53 >= -16384)
          v62 = v57;
        else
          v62 = 0;
        v59[2] = v62;
        if (v54 >= -16384)
          v63 = v56;
        else
          v63 = 0;
        v59[3] = v63;
        v64 = ((*v61 >> v36) & 0x3FF) << 15;
        v65 = v64 + v51;
        v66 = v64 + v49;
        v67 = v64 + v50;
        if (v30 == 2)
          v30 = 0;
        else
          ++v30;
        v68 = (255 * ((v65 + 0x4000) >> 15) + 511) / 0x3FFu;
        v69 = (255 * ((v66 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v65 > 33538047)
          LOBYTE(v68) = -1;
        if (v66 > 33538047)
          LOBYTE(v69) = -1;
        v70 = (255 * ((v67 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v67 > 33538047)
          LOBYTE(v70) = -1;
        v58 = v65 < -16384;
        v71 = (_BYTE *)(v28 + v23);
        if (v58)
          LOBYTE(v68) = 0;
        v71[1] = v68;
        if (v66 >= -16384)
          v72 = v69;
        else
          v72 = 0;
        v71[2] = v72;
        v73 = v36 >> 2;
        if (v67 >= -16384)
          v74 = v70;
        else
          v74 = 0;
        v71[3] = v74;
        *v71 = -1;
        v26 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        v33 = (_DWORD *)((char *)v61 + ((v36 >> 2) & 0x3C));
        ++v29;
        v22 += 4;
        v28 += 4;
      }
      while (v19 != v29);
      v280 = v25;
      if (v19 >= v17)
      {
        v224 = (_BYTE *)(v22 + v23);
        v225 = (_BYTE *)(v28 + v23);
        v226 = v269;
        v227 = v268;
      }
      else
      {
        v75 = 0;
        v284 = (char *)v61 + (v73 & 0x3C);
        v285 = (char *)v34 + (v73 & 0x3C);
        v76 = v23;
        do
        {
          v77 = v32[v75 / 4];
          v78 = (_BYTE *)(v22 + v76);
          v79 = *(_DWORD *)&v285[v75];
          v80 = (v77 & 0x3FF) - 512;
          v81 = (v79 & 0x3FF) << 15;
          v82 = ((v77 >> 10) & 0x3FF) - 512;
          v83 = -6137 * v80 - 15338 * v82;
          v84 = 60804 * v80;
          v85 = 51603 * v82;
          v86 = 51603 * v82 + v81;
          v87 = *(_DWORD *)&v284[v75];
          v88 = v83 + v81;
          v89 = v84 + v81;
          v90 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v90) = -1;
          v91 = (255 * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          v92 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v91) = -1;
          if (v89 > 33538047)
            LOBYTE(v92) = -1;
          if (v86 >= -16384)
            v93 = v90;
          else
            v93 = 0;
          v78[1] = v93;
          v94 = (32 * v79) & 0x1FF8000;
          v95 = v85 + v94;
          if (v88 < -16384)
            LOBYTE(v91) = 0;
          v96 = v83 + v94;
          v58 = v89 < -16384;
          v97 = 255 * ((v83 + v94 + 0x4000) >> 15) + 511;
          v98 = v84 + v94;
          v78[2] = v91;
          v99 = 255 * ((v84 + v94 + 0x4000) >> 15) + 511;
          if (v58)
            LOBYTE(v92) = 0;
          v100 = (255 * ((v85 + v94 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[3] = v92;
          v101 = ((4198405 * (unint64_t)v97) >> 32)
               + ((v97 - ((4198405 * (unint64_t)v97) >> 32)) >> 1);
          if (v95 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          v103 = v101 >> 9;
          v104 = (4198405 * (unint64_t)v99) >> 32;
          v105 = v99 - v104;
          if (v96 > 33538047)
            LOBYTE(v103) = -1;
          v106 = (v104 + (v105 >> 1)) >> 9;
          if (v98 > 33538047)
            LOBYTE(v106) = -1;
          if (v95 < -16384)
            v102 = 0;
          v78[5] = v102;
          v107 = (v87 & 0x3FF) << 15;
          v108 = v85 + v107;
          v109 = v85 + v107 + 0x4000;
          if (v96 < -16384)
            LOBYTE(v103) = 0;
          v110 = v83 + v107;
          v58 = v98 < -16384;
          v111 = 255 * ((v83 + v107 + 0x4000) >> 15);
          v112 = v107 + v84;
          v78[6] = v103;
          v113 = ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)
               + ((255 * (v109 >> 15)
                               + 511
                               - ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)) >> 1);
          if (v58)
            LOBYTE(v106) = 0;
          v78[7] = v106;
          v114 = ((4198405 * (unint64_t)(v111 + 511)) >> 32)
               + ((v111 + 511 - ((4198405 * (unint64_t)(v111 + 511)) >> 32)) >> 1);
          v115 = (_BYTE *)(v28 + v76);
          *v78 = -1;
          v78[4] = -1;
          v116 = v113 >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v114 >> 9;
          v118 = (255 * ((v112 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v112 > 33538047)
            LOBYTE(v118) = -1;
          if (v108 >= -16384)
            v119 = v116;
          else
            v119 = 0;
          v115[1] = v119;
          if (v110 < -16384)
            LOBYTE(v117) = 0;
          v120 = (32 * v87) & 0x1FF8000;
          v121 = v85 + v120;
          v122 = v83 + v120;
          *v115 = -1;
          v115[2] = v117;
          v123 = v120 + v84;
          if (v112 < -16384)
            LOBYTE(v118) = 0;
          v115[3] = v118;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[4] = -1;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v121 < -16384)
            LOBYTE(v124) = 0;
          v115[5] = v124;
          if (v122 >= -16384)
            v127 = v125;
          else
            v127 = 0;
          v115[6] = v127;
          if (v123 >= -16384)
            v128 = v126;
          else
            v128 = 0;
          v115[7] = v128;
          v129 = v32[v75 / 4 + 1];
          v130 = ((v77 >> 20) & 0x3FF) - 512;
          v131 = (v129 & 0x3FF) - 512;
          v132 = (v79 >> 5) & 0x1FF8000;
          v133 = -6137 * v130 - 15338 * v131;
          v134 = 60804 * v130;
          v135 = 51603 * v131;
          v136 = v135 + v132;
          v137 = v133 + v132;
          v138 = v134 + v132;
          v139 = 255 * ((v137 + 0x4000) >> 15) + 511;
          v140 = (255 * ((v136 + 0x4000) >> 15) + 511) / 0x3FFu;
          v141 = (4198405 * (unint64_t)v139) >> 32;
          v142 = v139 - v141;
          if (v136 > 33538047)
            LOBYTE(v140) = -1;
          v143 = (v141 + (v142 >> 1)) >> 9;
          if (v137 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[8] = -1;
          if (v138 > 33538047)
            LOBYTE(v144) = -1;
          if (v136 >= -16384)
            v145 = v140;
          else
            v145 = 0;
          v78[9] = v145;
          if (v137 >= -16384)
            v146 = v143;
          else
            v146 = 0;
          v78[10] = v146;
          if (v138 >= -16384)
            v147 = v144;
          else
            v147 = 0;
          v78[11] = v147;
          v148 = *(_DWORD *)&v285[v75 + 4];
          v149 = (v148 & 0x3FF) << 15;
          v150 = v149 + v135;
          v151 = v149 + v133;
          v152 = v149 + v134;
          v153 = (255 * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOBYTE(v153) = -1;
          v154 = (255 * ((v151 + 0x4000) >> 15) + 511) / 0x3FFu;
          v155 = (255 * ((v152 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v151 > 33538047)
            LOBYTE(v154) = -1;
          if (v152 > 33538047)
            LOBYTE(v155) = -1;
          v78[12] = -1;
          if (v150 >= -16384)
            v156 = v153;
          else
            v156 = 0;
          v78[13] = v156;
          v157 = (v87 >> 5) & 0x1FF8000;
          v158 = v135 + v157;
          if (v151 >= -16384)
            v159 = v154;
          else
            v159 = 0;
          v160 = 255 * ((v135 + v157 + 0x4000) >> 15) + 511;
          v161 = v133 + v157;
          v58 = v152 < -16384;
          v162 = 255 * ((v133 + v157 + 0x4000) >> 15) + 511;
          v78[14] = v159;
          v163 = v134 + v157;
          if (v58)
            LOBYTE(v155) = 0;
          v78[15] = v155;
          v164 = v160 / 0x3FF;
          v165 = (4198405 * (unint64_t)v162) >> 32;
          v166 = v162 - v165;
          if (v158 > 33538047)
            LOBYTE(v164) = -1;
          v167 = (v165 + (v166 >> 1)) >> 9;
          if (v161 > 33538047)
            LOBYTE(v167) = -1;
          v168 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[8] = -1;
          if (v163 > 33538047)
            LOBYTE(v168) = -1;
          if (v158 >= -16384)
            v169 = v164;
          else
            v169 = 0;
          v115[9] = v169;
          if (v161 < -16384)
            LOBYTE(v167) = 0;
          v115[10] = v167;
          if (v163 >= -16384)
            v170 = v168;
          else
            v170 = 0;
          v115[11] = v170;
          v171 = *(_DWORD *)&v284[v75 + 4];
          v172 = (v171 & 0x3FF) << 15;
          v173 = v172 + v135;
          v174 = v172 + v133;
          v175 = v172 + v134;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v177 = (255 * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            v178 = -1;
          else
            v178 = (255 * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v175 > 33538047)
            LOBYTE(v177) = -1;
          v115[12] = -1;
          if (v173 >= -16384)
            v179 = v176;
          else
            v179 = 0;
          v58 = v174 < -16384;
          v180 = ((v129 >> 10) & 0x3FF) - 512;
          v181 = ((v129 >> 20) & 0x3FF) - 512;
          v115[13] = v179;
          v182 = (32 * v148) & 0x1FF8000;
          v183 = -15338 * v181 - 6137 * v180;
          v184 = 60804 * v180;
          v185 = 51603 * v181;
          if (v58)
            v186 = 0;
          else
            v186 = v178;
          v187 = v182 + v185;
          v58 = v175 < -16384;
          v188 = 255 * ((v182 + v185 + 0x4000) >> 15) + 511;
          v189 = v182 + v183;
          v115[14] = v186;
          v190 = 255 * ((v182 + v183 + 0x4000) >> 15) + 511;
          v191 = v182 + v184;
          v192 = v182 + v184 + 0x4000;
          if (v58)
            LOBYTE(v177) = 0;
          v193 = 255 * (v192 >> 15) + 511;
          v115[15] = v177;
          v194 = v188 / 0x3FF;
          if (v187 > 33538047)
            LOBYTE(v194) = -1;
          v195 = v190 / 0x3FF;
          if (v189 > 33538047)
            LOBYTE(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v191 > 33538047)
            LOBYTE(v196) = -1;
          v58 = v187 < -16384;
          v197 = (v148 >> 5) & 0x1FF8000;
          v198 = v197 + v185;
          if (v58)
            LOBYTE(v194) = 0;
          v58 = v189 < -16384;
          v199 = v197 + v183;
          v200 = 255 * ((v197 + v183 + 0x4000) >> 15);
          v78[17] = v194;
          v201 = v197 + v184;
          if (v58)
            LOBYTE(v195) = 0;
          v78[18] = v195;
          if (v191 < -16384)
            LOBYTE(v196) = 0;
          v78[19] = v196;
          v202 = (255 * ((v198 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v200 + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v201 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v201 > 33538047)
            LOBYTE(v204) = -1;
          if (v198 < -16384)
            LOBYTE(v202) = 0;
          v78[21] = v202;
          v58 = v199 < -16384;
          v17 = v283;
          if (v58)
            LOBYTE(v203) = 0;
          v78[22] = v203;
          if (v201 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v206 = (32 * v171) & 0x1FF8000;
          v207 = v206 + v185;
          v78[23] = v205;
          v208 = v206 + v183;
          v78[16] = -1;
          v209 = 255 * ((v206 + v183 + 0x4000) >> 15) + 511;
          v210 = v206 + v184;
          v78[20] = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          v212 = v209 / 0x3FF;
          if (v208 > 33538047)
            LOBYTE(v212) = -1;
          v213 = (255 * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOBYTE(v213) = -1;
          v214 = (v171 >> 5) & 0x1FF8000;
          v215 = v214 + v185;
          if (v207 < -16384)
            LOBYTE(v211) = 0;
          v216 = v214 + v183;
          v115[17] = v211;
          v217 = v214 + v184;
          if (v208 >= -16384)
            v218 = v212;
          else
            v218 = 0;
          v115[18] = v218;
          if (v210 < -16384)
            LOBYTE(v213) = 0;
          v115[19] = v213;
          v219 = (255 * ((v215 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v215 > 33538047)
            LOBYTE(v219) = -1;
          v220 = (255 * ((v216 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v216 > 33538047)
            LOBYTE(v220) = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          if (v215 >= -16384)
            v222 = v219;
          else
            v222 = 0;
          v115[21] = v222;
          if (v216 < -16384)
            LOBYTE(v220) = 0;
          v115[22] = v220;
          if (v217 >= -16384)
            v223 = v221;
          else
            v223 = 0;
          v115[23] = v223;
          v115[16] = -1;
          v115[20] = -1;
          v19 += 6;
          v75 += 8;
          v76 += 24;
        }
        while (v19 < v283);
        v26 = (_DWORD *)((char *)v34 + (v73 & 0x3C) + v75);
        v33 = (_DWORD *)((char *)v61 + (v73 & 0x3C) + v75);
        v32 = (_DWORD *)((char *)v32 + v75);
        v224 = (_BYTE *)(v22 + v76);
        v225 = (_BYTE *)(v28 + v76);
        v226 = v269;
        v227 = v268;
      }
      if (v19 < v226)
      {
        do
        {
          v228 = *((unsigned __int8 *)&v286 + v227);
          v229 = *((unsigned __int8 *)&v286 + v31);
          v230 = ((*v32 >> v229) & 0x3FF) - 512;
          v231 = v226;
          v232 = (_DWORD *)((char *)v32 + ((v229 >> 2) & 0x3C));
          if (v31 == 2)
            v233 = 0;
          else
            v233 = v31 + 1;
          v234 = *((unsigned __int8 *)&v286 + v233);
          v235 = (*v232 >> v234) & 0x3FF;
          v236 = (_DWORD *)((char *)v232 + ((v234 >> 2) & 0x3C));
          v237 = v235 - 512;
          if (v233 == 2)
            v238 = 0;
          else
            v238 = v233 + 1;
          if ((v19 & 1) != 0)
            v31 = v238;
          v239 = ((*v26 >> v228) & 0x3FF) << 15;
          if ((v19 & 1) != 0)
            v32 = v236;
          v240 = -6137 * v230 - 15338 * v237;
          v241 = 60804 * v230;
          v242 = 51603 * v237;
          v243 = 51603 * v237 + v239;
          v244 = v240 + v239;
          v245 = v241 + v239;
          v246 = (255 * ((v243 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v243 > 33538047)
            LOBYTE(v246) = -1;
          v247 = (255 * ((v244 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v244 > 33538047)
            LOBYTE(v247) = -1;
          v248 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          v249 = (v228 >> 2) & 0x3C;
          if (v245 > 33538047)
            LOBYTE(v248) = -1;
          *v224 = -1;
          if (v243 >= -16384)
            v250 = v246;
          else
            v250 = 0;
          v224[1] = v250;
          if (v244 >= -16384)
            v251 = v247;
          else
            v251 = 0;
          v224[2] = v251;
          if (v245 >= -16384)
            v252 = v248;
          else
            v252 = 0;
          v224[3] = v252;
          v26 = (_DWORD *)((char *)v26 + v249);
          v253 = *v33 >> v228;
          if (v227 == 2)
            v227 = 0;
          else
            ++v227;
          v33 = (_DWORD *)((char *)v33 + v249);
          v254 = (v253 & 0x3FF) << 15;
          v255 = v254 + v242;
          v256 = v254 + v240;
          v257 = v254 + v241;
          v258 = 255 * ((v257 + 0x4000) >> 15) + 511;
          v259 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v259) = -1;
          v260 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v261 = (4198405 * (unint64_t)v258) >> 32;
          v262 = v258 - v261;
          if (v256 > 33538047)
            LOBYTE(v260) = -1;
          v263 = (v261 + (v262 >> 1)) >> 9;
          if (v257 > 33538047)
            LOBYTE(v263) = -1;
          *v225 = -1;
          if (v255 >= -16384)
            v264 = v259;
          else
            v264 = 0;
          v225[1] = v264;
          if (v256 >= -16384)
            v265 = v260;
          else
            v265 = 0;
          v226 = v231;
          v225[2] = v265;
          if (v257 >= -16384)
            v266 = v263;
          else
            v266 = 0;
          v225[3] = v266;
          v225 += 4;
          ++v19;
          v224 += 4;
        }
        while (v231 != v19);
      }
      v23 = v273;
      v26 = &v279[v272];
      v27 = &v278[v272];
      v18 = v282 + 1;
      v22 = v281 + v270;
      v28 = v277 + v270;
      v25 = v280 + 4 * v271;
      v19 = v275;
    }
    while (v282 + 1 != v274);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  BOOL v58;
  _BYTE *v59;
  char v60;
  _DWORD *v61;
  char v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE *v71;
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _BYTE *v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  char v146;
  char v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  char v169;
  char v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char v178;
  char v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  char v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  char v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  char v222;
  char v223;
  _BYTE *v224;
  _BYTE *v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  _DWORD *v232;
  unsigned int v233;
  unint64_t v234;
  int v235;
  _DWORD *v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  char v250;
  char v251;
  char v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  char v264;
  char v265;
  char v266;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  int v286;

  v286 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v12 = a6[2];
  else
    v12 = v10 - v9;
  v13 = v11 - v8;
  if (v13 >= a6[3])
    v13 = a6[3];
  v14 = v10 % 6;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  if (v13 >= 2)
  {
    v18 = 0;
    v276 = v9 % 3;
    v268 = v17 % 3;
    v19 = 6 * (v9 / 6) - v9 + 6;
    v274 = v13 >> 1;
    v20 = *a8;
    v21 = *a8 * a6[5];
    v22 = *a7 + v21;
    v23 = 4 * a6[4];
    v24 = a4[1];
    v25 = a3[1] + v24 * (v8 >> 1) + 4 * (v9 / 3);
    v26 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v27 = (_DWORD *)((char *)v26 + *a4);
    v272 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v273 = v23;
    v271 = v24 >> 2;
    v269 = v12;
    v270 = 2 * v20;
    v28 = *a7 + v20 + v21;
    v275 = v19;
    v283 = v17;
    do
    {
      v281 = v22;
      v282 = v18;
      v29 = 0;
      v277 = v28;
      v278 = v27;
      v30 = v276;
      v31 = v276;
      v32 = (_DWORD *)v25;
      v33 = v27;
      v279 = v26;
      do
      {
        v34 = v26;
        v35 = *v26;
        v36 = *((unsigned __int8 *)&v286 + v30);
        v37 = *((unsigned __int8 *)&v286 + v31);
        v38 = ((*v32 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v32 + ((v37 >> 2) & 0x3C));
        if (v31 == 2)
          v40 = 0;
        else
          v40 = v31 + 1;
        v41 = *((unsigned __int8 *)&v286 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v29 & 1) != 0)
          v31 = v46;
        v47 = (v42 & 0x3FF) << 15;
        v48 = v45 - 512;
        v49 = -11276 * v38 - 23400 * v48;
        v50 = 58065 * v38;
        v51 = 45941 * v48;
        v52 = 45941 * v48 + v47;
        if ((v29 & 1) != 0)
          v32 = v44;
        v53 = v49 + v47;
        v54 = v50 + v47;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        v56 = (255 * ((v54 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v54 > 33538047)
          LOBYTE(v56) = -1;
        v58 = v52 < -16384;
        v59 = (_BYTE *)(v22 + v23);
        if (v58)
          v60 = 0;
        else
          v60 = v55;
        v59[1] = v60;
        v61 = v33;
        *v59 = -1;
        if (v53 >= -16384)
          v62 = v57;
        else
          v62 = 0;
        v59[2] = v62;
        if (v54 >= -16384)
          v63 = v56;
        else
          v63 = 0;
        v59[3] = v63;
        v64 = ((*v61 >> v36) & 0x3FF) << 15;
        v65 = v64 + v51;
        v66 = v64 + v49;
        v67 = v64 + v50;
        if (v30 == 2)
          v30 = 0;
        else
          ++v30;
        v68 = (255 * ((v65 + 0x4000) >> 15) + 511) / 0x3FFu;
        v69 = (255 * ((v66 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v65 > 33538047)
          LOBYTE(v68) = -1;
        if (v66 > 33538047)
          LOBYTE(v69) = -1;
        v70 = (255 * ((v67 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v67 > 33538047)
          LOBYTE(v70) = -1;
        v58 = v65 < -16384;
        v71 = (_BYTE *)(v28 + v23);
        if (v58)
          LOBYTE(v68) = 0;
        v71[1] = v68;
        if (v66 >= -16384)
          v72 = v69;
        else
          v72 = 0;
        v71[2] = v72;
        v73 = v36 >> 2;
        if (v67 >= -16384)
          v74 = v70;
        else
          v74 = 0;
        v71[3] = v74;
        *v71 = -1;
        v26 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        v33 = (_DWORD *)((char *)v61 + ((v36 >> 2) & 0x3C));
        ++v29;
        v22 += 4;
        v28 += 4;
      }
      while (v19 != v29);
      v280 = v25;
      if (v19 >= v17)
      {
        v224 = (_BYTE *)(v22 + v23);
        v225 = (_BYTE *)(v28 + v23);
        v226 = v269;
        v227 = v268;
      }
      else
      {
        v75 = 0;
        v284 = (char *)v61 + (v73 & 0x3C);
        v285 = (char *)v34 + (v73 & 0x3C);
        v76 = v23;
        do
        {
          v77 = v32[v75 / 4];
          v78 = (_BYTE *)(v22 + v76);
          v79 = *(_DWORD *)&v285[v75];
          v80 = (v77 & 0x3FF) - 512;
          v81 = (v79 & 0x3FF) << 15;
          v82 = ((v77 >> 10) & 0x3FF) - 512;
          v83 = -11276 * v80 - 23400 * v82;
          v84 = 58065 * v80;
          v85 = 45941 * v82;
          v86 = 45941 * v82 + v81;
          v87 = *(_DWORD *)&v284[v75];
          v88 = v83 + v81;
          v89 = v84 + v81;
          v90 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v90) = -1;
          v91 = (255 * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          v92 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOBYTE(v91) = -1;
          if (v89 > 33538047)
            LOBYTE(v92) = -1;
          if (v86 >= -16384)
            v93 = v90;
          else
            v93 = 0;
          v78[1] = v93;
          v94 = (32 * v79) & 0x1FF8000;
          v95 = v85 + v94;
          if (v88 < -16384)
            LOBYTE(v91) = 0;
          v96 = v83 + v94;
          v58 = v89 < -16384;
          v97 = 255 * ((v83 + v94 + 0x4000) >> 15) + 511;
          v98 = v84 + v94;
          v78[2] = v91;
          v99 = 255 * ((v84 + v94 + 0x4000) >> 15) + 511;
          if (v58)
            LOBYTE(v92) = 0;
          v100 = (255 * ((v85 + v94 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[3] = v92;
          v101 = ((4198405 * (unint64_t)v97) >> 32)
               + ((v97 - ((4198405 * (unint64_t)v97) >> 32)) >> 1);
          if (v95 > 33538047)
            v102 = -1;
          else
            v102 = v100;
          v103 = v101 >> 9;
          v104 = (4198405 * (unint64_t)v99) >> 32;
          v105 = v99 - v104;
          if (v96 > 33538047)
            LOBYTE(v103) = -1;
          v106 = (v104 + (v105 >> 1)) >> 9;
          if (v98 > 33538047)
            LOBYTE(v106) = -1;
          if (v95 < -16384)
            v102 = 0;
          v78[5] = v102;
          v107 = (v87 & 0x3FF) << 15;
          v108 = v85 + v107;
          v109 = v85 + v107 + 0x4000;
          if (v96 < -16384)
            LOBYTE(v103) = 0;
          v110 = v83 + v107;
          v58 = v98 < -16384;
          v111 = 255 * ((v83 + v107 + 0x4000) >> 15);
          v112 = v107 + v84;
          v78[6] = v103;
          v113 = ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)
               + ((255 * (v109 >> 15)
                               + 511
                               - ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)) >> 1);
          if (v58)
            LOBYTE(v106) = 0;
          v78[7] = v106;
          v114 = ((4198405 * (unint64_t)(v111 + 511)) >> 32)
               + ((v111 + 511 - ((4198405 * (unint64_t)(v111 + 511)) >> 32)) >> 1);
          v115 = (_BYTE *)(v28 + v76);
          *v78 = -1;
          v78[4] = -1;
          v116 = v113 >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v114 >> 9;
          v118 = (255 * ((v112 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v112 > 33538047)
            LOBYTE(v118) = -1;
          if (v108 >= -16384)
            v119 = v116;
          else
            v119 = 0;
          v115[1] = v119;
          if (v110 < -16384)
            LOBYTE(v117) = 0;
          v120 = (32 * v87) & 0x1FF8000;
          v121 = v85 + v120;
          v122 = v83 + v120;
          *v115 = -1;
          v115[2] = v117;
          v123 = v120 + v84;
          if (v112 < -16384)
            LOBYTE(v118) = 0;
          v115[3] = v118;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047)
            LOBYTE(v124) = -1;
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v122 > 33538047)
            LOBYTE(v125) = -1;
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[4] = -1;
          if (v123 > 33538047)
            LOBYTE(v126) = -1;
          if (v121 < -16384)
            LOBYTE(v124) = 0;
          v115[5] = v124;
          if (v122 >= -16384)
            v127 = v125;
          else
            v127 = 0;
          v115[6] = v127;
          if (v123 >= -16384)
            v128 = v126;
          else
            v128 = 0;
          v115[7] = v128;
          v129 = v32[v75 / 4 + 1];
          v130 = ((v77 >> 20) & 0x3FF) - 512;
          v131 = (v129 & 0x3FF) - 512;
          v132 = (v79 >> 5) & 0x1FF8000;
          v133 = -11276 * v130 - 23400 * v131;
          v134 = 58065 * v130;
          v135 = 45941 * v131;
          v136 = v135 + v132;
          v137 = v133 + v132;
          v138 = v134 + v132;
          v139 = 255 * ((v137 + 0x4000) >> 15) + 511;
          v140 = (255 * ((v136 + 0x4000) >> 15) + 511) / 0x3FFu;
          v141 = (4198405 * (unint64_t)v139) >> 32;
          v142 = v139 - v141;
          if (v136 > 33538047)
            LOBYTE(v140) = -1;
          v143 = (v141 + (v142 >> 1)) >> 9;
          if (v137 > 33538047)
            LOBYTE(v143) = -1;
          v144 = (255 * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[8] = -1;
          if (v138 > 33538047)
            LOBYTE(v144) = -1;
          if (v136 >= -16384)
            v145 = v140;
          else
            v145 = 0;
          v78[9] = v145;
          if (v137 >= -16384)
            v146 = v143;
          else
            v146 = 0;
          v78[10] = v146;
          if (v138 >= -16384)
            v147 = v144;
          else
            v147 = 0;
          v78[11] = v147;
          v148 = *(_DWORD *)&v285[v75 + 4];
          v149 = (v148 & 0x3FF) << 15;
          v150 = v149 + v135;
          v151 = v149 + v133;
          v152 = v149 + v134;
          v153 = (255 * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOBYTE(v153) = -1;
          v154 = (255 * ((v151 + 0x4000) >> 15) + 511) / 0x3FFu;
          v155 = (255 * ((v152 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v151 > 33538047)
            LOBYTE(v154) = -1;
          if (v152 > 33538047)
            LOBYTE(v155) = -1;
          v78[12] = -1;
          if (v150 >= -16384)
            v156 = v153;
          else
            v156 = 0;
          v78[13] = v156;
          v157 = (v87 >> 5) & 0x1FF8000;
          v158 = v135 + v157;
          if (v151 >= -16384)
            v159 = v154;
          else
            v159 = 0;
          v160 = 255 * ((v135 + v157 + 0x4000) >> 15) + 511;
          v161 = v133 + v157;
          v58 = v152 < -16384;
          v162 = 255 * ((v133 + v157 + 0x4000) >> 15) + 511;
          v78[14] = v159;
          v163 = v134 + v157;
          if (v58)
            LOBYTE(v155) = 0;
          v78[15] = v155;
          v164 = v160 / 0x3FF;
          v165 = (4198405 * (unint64_t)v162) >> 32;
          v166 = v162 - v165;
          if (v158 > 33538047)
            LOBYTE(v164) = -1;
          v167 = (v165 + (v166 >> 1)) >> 9;
          if (v161 > 33538047)
            LOBYTE(v167) = -1;
          v168 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[8] = -1;
          if (v163 > 33538047)
            LOBYTE(v168) = -1;
          if (v158 >= -16384)
            v169 = v164;
          else
            v169 = 0;
          v115[9] = v169;
          if (v161 < -16384)
            LOBYTE(v167) = 0;
          v115[10] = v167;
          if (v163 >= -16384)
            v170 = v168;
          else
            v170 = 0;
          v115[11] = v170;
          v171 = *(_DWORD *)&v284[v75 + 4];
          v172 = (v171 & 0x3FF) << 15;
          v173 = v172 + v135;
          v174 = v172 + v133;
          v175 = v172 + v134;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047)
            LOBYTE(v176) = -1;
          v177 = (255 * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047)
            v178 = -1;
          else
            v178 = (255 * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v175 > 33538047)
            LOBYTE(v177) = -1;
          v115[12] = -1;
          if (v173 >= -16384)
            v179 = v176;
          else
            v179 = 0;
          v58 = v174 < -16384;
          v180 = ((v129 >> 10) & 0x3FF) - 512;
          v181 = ((v129 >> 20) & 0x3FF) - 512;
          v115[13] = v179;
          v182 = (32 * v148) & 0x1FF8000;
          v183 = -23400 * v181 - 11276 * v180;
          v184 = 58065 * v180;
          v185 = 45941 * v181;
          if (v58)
            v186 = 0;
          else
            v186 = v178;
          v187 = v182 + v185;
          v58 = v175 < -16384;
          v188 = 255 * ((v182 + v185 + 0x4000) >> 15) + 511;
          v189 = v182 + v183;
          v115[14] = v186;
          v190 = 255 * ((v182 + v183 + 0x4000) >> 15) + 511;
          v191 = v182 + v184;
          v192 = v182 + v184 + 0x4000;
          if (v58)
            LOBYTE(v177) = 0;
          v193 = 255 * (v192 >> 15) + 511;
          v115[15] = v177;
          v194 = v188 / 0x3FF;
          if (v187 > 33538047)
            LOBYTE(v194) = -1;
          v195 = v190 / 0x3FF;
          if (v189 > 33538047)
            LOBYTE(v195) = -1;
          v196 = v193 / 0x3FF;
          if (v191 > 33538047)
            LOBYTE(v196) = -1;
          v58 = v187 < -16384;
          v197 = (v148 >> 5) & 0x1FF8000;
          v198 = v197 + v185;
          if (v58)
            LOBYTE(v194) = 0;
          v58 = v189 < -16384;
          v199 = v197 + v183;
          v200 = 255 * ((v197 + v183 + 0x4000) >> 15);
          v78[17] = v194;
          v201 = v197 + v184;
          if (v58)
            LOBYTE(v195) = 0;
          v78[18] = v195;
          if (v191 < -16384)
            LOBYTE(v196) = 0;
          v78[19] = v196;
          v202 = (255 * ((v198 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v198 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v200 + 511) / 0x3FFu;
          if (v199 > 33538047)
            LOBYTE(v203) = -1;
          v204 = (255 * ((v201 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v201 > 33538047)
            LOBYTE(v204) = -1;
          if (v198 < -16384)
            LOBYTE(v202) = 0;
          v78[21] = v202;
          v58 = v199 < -16384;
          v17 = v283;
          if (v58)
            LOBYTE(v203) = 0;
          v78[22] = v203;
          if (v201 >= -16384)
            v205 = v204;
          else
            v205 = 0;
          v206 = (32 * v171) & 0x1FF8000;
          v207 = v206 + v185;
          v78[23] = v205;
          v208 = v206 + v183;
          v78[16] = -1;
          v209 = 255 * ((v206 + v183 + 0x4000) >> 15) + 511;
          v210 = v206 + v184;
          v78[20] = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          v212 = v209 / 0x3FF;
          if (v208 > 33538047)
            LOBYTE(v212) = -1;
          v213 = (255 * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047)
            LOBYTE(v213) = -1;
          v214 = (v171 >> 5) & 0x1FF8000;
          v215 = v214 + v185;
          if (v207 < -16384)
            LOBYTE(v211) = 0;
          v216 = v214 + v183;
          v115[17] = v211;
          v217 = v214 + v184;
          if (v208 >= -16384)
            v218 = v212;
          else
            v218 = 0;
          v115[18] = v218;
          if (v210 < -16384)
            LOBYTE(v213) = 0;
          v115[19] = v213;
          v219 = (255 * ((v215 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v215 > 33538047)
            LOBYTE(v219) = -1;
          v220 = (255 * ((v216 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v216 > 33538047)
            LOBYTE(v220) = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          if (v215 >= -16384)
            v222 = v219;
          else
            v222 = 0;
          v115[21] = v222;
          if (v216 < -16384)
            LOBYTE(v220) = 0;
          v115[22] = v220;
          if (v217 >= -16384)
            v223 = v221;
          else
            v223 = 0;
          v115[23] = v223;
          v115[16] = -1;
          v115[20] = -1;
          v19 += 6;
          v75 += 8;
          v76 += 24;
        }
        while (v19 < v283);
        v26 = (_DWORD *)((char *)v34 + (v73 & 0x3C) + v75);
        v33 = (_DWORD *)((char *)v61 + (v73 & 0x3C) + v75);
        v32 = (_DWORD *)((char *)v32 + v75);
        v224 = (_BYTE *)(v22 + v76);
        v225 = (_BYTE *)(v28 + v76);
        v226 = v269;
        v227 = v268;
      }
      if (v19 < v226)
      {
        do
        {
          v228 = *((unsigned __int8 *)&v286 + v227);
          v229 = *((unsigned __int8 *)&v286 + v31);
          v230 = ((*v32 >> v229) & 0x3FF) - 512;
          v231 = v226;
          v232 = (_DWORD *)((char *)v32 + ((v229 >> 2) & 0x3C));
          if (v31 == 2)
            v233 = 0;
          else
            v233 = v31 + 1;
          v234 = *((unsigned __int8 *)&v286 + v233);
          v235 = (*v232 >> v234) & 0x3FF;
          v236 = (_DWORD *)((char *)v232 + ((v234 >> 2) & 0x3C));
          v237 = v235 - 512;
          if (v233 == 2)
            v238 = 0;
          else
            v238 = v233 + 1;
          if ((v19 & 1) != 0)
            v31 = v238;
          v239 = ((*v26 >> v228) & 0x3FF) << 15;
          if ((v19 & 1) != 0)
            v32 = v236;
          v240 = -11276 * v230 - 23400 * v237;
          v241 = 58065 * v230;
          v242 = 45941 * v237;
          v243 = 45941 * v237 + v239;
          v244 = v240 + v239;
          v245 = v241 + v239;
          v246 = (255 * ((v243 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v243 > 33538047)
            LOBYTE(v246) = -1;
          v247 = (255 * ((v244 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v244 > 33538047)
            LOBYTE(v247) = -1;
          v248 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          v249 = (v228 >> 2) & 0x3C;
          if (v245 > 33538047)
            LOBYTE(v248) = -1;
          *v224 = -1;
          if (v243 >= -16384)
            v250 = v246;
          else
            v250 = 0;
          v224[1] = v250;
          if (v244 >= -16384)
            v251 = v247;
          else
            v251 = 0;
          v224[2] = v251;
          if (v245 >= -16384)
            v252 = v248;
          else
            v252 = 0;
          v224[3] = v252;
          v26 = (_DWORD *)((char *)v26 + v249);
          v253 = *v33 >> v228;
          if (v227 == 2)
            v227 = 0;
          else
            ++v227;
          v33 = (_DWORD *)((char *)v33 + v249);
          v254 = (v253 & 0x3FF) << 15;
          v255 = v254 + v242;
          v256 = v254 + v240;
          v257 = v254 + v241;
          v258 = 255 * ((v257 + 0x4000) >> 15) + 511;
          v259 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v259) = -1;
          v260 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v261 = (4198405 * (unint64_t)v258) >> 32;
          v262 = v258 - v261;
          if (v256 > 33538047)
            LOBYTE(v260) = -1;
          v263 = (v261 + (v262 >> 1)) >> 9;
          if (v257 > 33538047)
            LOBYTE(v263) = -1;
          *v225 = -1;
          if (v255 >= -16384)
            v264 = v259;
          else
            v264 = 0;
          v225[1] = v264;
          if (v256 >= -16384)
            v265 = v260;
          else
            v265 = 0;
          v226 = v231;
          v225[2] = v265;
          if (v257 >= -16384)
            v266 = v263;
          else
            v266 = 0;
          v225[3] = v266;
          v225 += 4;
          ++v19;
          v224 += 4;
        }
        while (v231 != v19);
      }
      v23 = v273;
      v26 = &v279[v272];
      v27 = &v278[v272];
      v18 = v282 + 1;
      v22 = v281 + v270;
      v28 = v277 + v270;
      v25 = v280 + 4 * v271;
      v19 = v275;
    }
    while (v282 + 1 != v274);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE *v57;
  char v58;
  _DWORD *v59;
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BYTE *v123;
  char v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  char v133;
  char v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int v172;
  unsigned int v173;
  char v174;
  char v175;
  char v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  char v183;
  char v184;
  char v185;
  char v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  char v212;
  char v213;
  int v214;
  char v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  int v225;
  char v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  char v232;
  char v233;
  char v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  _DWORD *v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  unsigned int v274;
  char v275;
  char v276;
  char v277;
  unint64_t v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  int v298;

  v298 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v288 = v9 % 3;
    v281 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v286 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 4 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v285 = v22;
    v283 = v23 >> 2;
    v282 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v287 = v18;
    v279 = v11;
    v295 = v16;
    do
    {
      v293 = v21;
      v294 = v17;
      v28 = 0;
      v289 = v27;
      v290 = v26;
      v29 = v288;
      v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        v34 = *v25;
        v35 = *((unsigned __int8 *)&v298 + v29);
        v36 = *((unsigned __int8 *)&v298 + v30);
        v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2)
          v39 = 0;
        else
          v39 = v30 + 1;
        v40 = *((unsigned __int8 *)&v298 + v39);
        v41 = v34 >> v35;
        v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        v44 = v42 & 0x3FF;
        if (v39 == 2)
          v45 = 0;
        else
          v45 = v39 + 1;
        if ((v28 & 1) != 0)
          v30 = v45;
        v46 = (v41 & 0x3FF) << 15;
        v47 = v44 - 512;
        v48 = -5391 * v37 - 18721 * v47;
        v49 = 61650 * v37;
        v50 = 48320 * v47;
        v51 = 48320 * v47 + v46;
        if ((v28 & 1) != 0)
          v31 = v43;
        v52 = v48 + v46;
        v53 = v49 + v46;
        v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047)
          LOBYTE(v54) = -1;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        if (v53 > 33538047)
          LOBYTE(v56) = -1;
        v57 = (_BYTE *)(v21 + v22);
        if (v53 >= -16384)
          v58 = v56;
        else
          v58 = 0;
        *v57 = v58;
        v59 = v32;
        if (v52 >= -16384)
          v60 = v55;
        else
          v60 = 0;
        if (v51 < -16384)
          LOBYTE(v54) = 0;
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        v61 = ((*v59 >> v35) & 0x3FF) << 15;
        v62 = v61 + v50;
        v63 = v61 + v48;
        v64 = v61 + v49;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOBYTE(v65) = -1;
        if (v63 > 33538047)
          LOBYTE(v66) = -1;
        v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOBYTE(v67) = -1;
        v68 = v64 < -16384;
        v69 = (_BYTE *)(v27 + v22);
        if (v68)
          LOBYTE(v67) = 0;
        *v69 = v67;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v69[1] = v70;
        v71 = v35 >> 2;
        if (v62 >= -16384)
          v72 = v65;
        else
          v72 = 0;
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      v292 = v24;
      if (v18 >= v16)
      {
        v236 = (_BYTE *)(v21 + v22);
        v237 = (_BYTE *)(v27 + v22);
        v239 = v289;
        v238 = v281;
      }
      else
      {
        v73 = 0;
        v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        v74 = v22;
        do
        {
          v75 = v31[v73 / 4];
          v76 = (_BYTE *)(v21 + v74);
          v77 = *(_DWORD *)&v297[v73];
          v78 = (v75 & 0x3FF) - 512;
          v79 = (v77 & 0x3FF) << 15;
          v80 = ((v75 >> 10) & 0x3FF) - 512;
          v81 = -5391 * v78 - 18721 * v80;
          v82 = 61650 * v78;
          v83 = 48320 * v80;
          v84 = v83 + v79;
          v85 = *(_DWORD *)&v296[v73];
          v86 = v81 + v79;
          v87 = v82 + v79;
          v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047)
            LOBYTE(v88) = -1;
          v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v89) = -1;
          if (v87 > 33538047)
            LOBYTE(v90) = -1;
          if (v87 < -16384)
            LOBYTE(v90) = 0;
          *v76 = v90;
          v91 = (32 * v77) & 0x1FF8000;
          v92 = v83 + v91;
          if (v86 < -16384)
            LOBYTE(v89) = 0;
          v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v82 + v91;
          v76[1] = v89;
          v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384)
            v98 = v88;
          else
            v98 = 0;
          v99 = v93 / 0x3FF;
          v76[2] = v98;
          v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047)
            LOBYTE(v99) = -1;
          v101 = v100 >> 9;
          v102 = (4198405 * (unint64_t)v97) >> 32;
          v103 = v97 - v102;
          if (v94 > 33538047)
            LOBYTE(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047)
            LOBYTE(v104) = -1;
          if (v96 < -16384)
            LOBYTE(v104) = 0;
          v76[4] = v104;
          v105 = (v85 & 0x3FF) << 15;
          v106 = v83 + v105;
          if (v94 < -16384)
            LOBYTE(v101) = 0;
          v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          v108 = v81 + v105;
          v68 = v92 < -16384;
          v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          v110 = v105 + v82;
          v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68)
            LOBYTE(v99) = 0;
          v112 = v111 + 511;
          v76[6] = v99;
          v113 = v107 / 0x3FF;
          v114 = (4198405 * (unint64_t)v109) >> 32;
          v115 = v109 - v114;
          if (v106 > 33538047)
            LOBYTE(v113) = -1;
          v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v112 / 0x3FF;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v110 >= -16384)
            v118 = v117;
          else
            v118 = 0;
          v119 = (32 * v85) & 0x1FF8000;
          v120 = v83 + v119;
          v68 = v108 < -16384;
          v121 = v81 + v119;
          v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (_BYTE *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(_BYTE *)(v27 + v74) = v118;
          if (v68)
            v124 = 0;
          else
            v124 = v116;
          v123[3] = -1;
          v125 = v119 + v82;
          v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384)
            LOBYTE(v113) = 0;
          if (v120 > 33538047)
            LOBYTE(v127) = -1;
          v128 = (v122 + 511) / 0x3FFu;
          v129 = (4198405 * (unint64_t)v126) >> 32;
          v130 = v126 - v129;
          if (v121 > 33538047)
            LOBYTE(v128) = -1;
          v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047)
            LOBYTE(v131) = -1;
          v123[2] = v113;
          if (v125 >= -16384)
            v132 = v131;
          else
            v132 = 0;
          v123[4] = v132;
          if (v121 >= -16384)
            v133 = v128;
          else
            v133 = 0;
          v123[5] = v133;
          if (v120 >= -16384)
            v134 = v127;
          else
            v134 = 0;
          v123[6] = v134;
          v123[7] = -1;
          v135 = v31[v73 / 4 + 1];
          v136 = ((v75 >> 20) & 0x3FF) - 512;
          v137 = (v135 & 0x3FF) - 512;
          v138 = (v77 >> 5) & 0x1FF8000;
          v139 = -5391 * v136 - 18721 * v137;
          v140 = 61650 * v136;
          v141 = 48320 * v137;
          v142 = v141 + v138;
          v143 = v139 + v138;
          v144 = v140 + v138;
          v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v145) >> 32;
          v148 = v145 - v147;
          if (v142 > 33538047)
            LOBYTE(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047)
            LOBYTE(v149) = -1;
          v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v76[8] = v151;
          if (v143 >= -16384)
            v152 = v149;
          else
            v152 = 0;
          v76[9] = v152;
          if (v142 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v76[10] = v153;
          v76[11] = -1;
          v154 = *(_DWORD *)&v297[v73 + 4];
          v155 = (v154 & 0x3FF) << 15;
          v156 = v155 + v141;
          v157 = v155 + v139;
          v158 = v155 + v140;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047)
            LOBYTE(v160) = -1;
          if (v158 > 33538047)
            LOBYTE(v161) = -1;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v68 = v157 < -16384;
          v76[12] = v162;
          v163 = (v85 >> 5) & 0x1FF8000;
          v164 = v141 + v163;
          v165 = v141 + v163 + 0x4000;
          if (v68)
            LOBYTE(v160) = 0;
          v166 = v139 + v163;
          v167 = v140 + v163;
          v76[15] = -1;
          v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384)
            LOBYTE(v159) = 0;
          if (v164 > 33538047)
            LOBYTE(v169) = -1;
          v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          v171 = (4198405 * (unint64_t)v168) >> 32;
          v172 = v168 - v171;
          if (v166 > 33538047)
            LOBYTE(v170) = -1;
          v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047)
            LOBYTE(v173) = -1;
          v76[14] = v159;
          if (v167 >= -16384)
            v174 = v173;
          else
            v174 = 0;
          v123[8] = v174;
          if (v166 >= -16384)
            v175 = v170;
          else
            v175 = 0;
          v123[9] = v175;
          if (v164 >= -16384)
            v176 = v169;
          else
            v176 = 0;
          v123[10] = v176;
          v123[11] = -1;
          v177 = *(_DWORD *)&v296[v73 + 4];
          v178 = (v177 & 0x3FF) << 15;
          v179 = v178 + v141;
          v180 = v178 + v139;
          v181 = v178 + v140;
          v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v180 > 33538047)
            v184 = -1;
          else
            v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            v185 = -1;
          else
            v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 >= -16384)
            v186 = v185;
          else
            v186 = 0;
          v123[15] = -1;
          v68 = v180 < -16384;
          v187 = ((v135 >> 10) & 0x3FF) - 512;
          v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          v189 = (32 * v154) & 0x1FF8000;
          v190 = -18721 * v188 - 5391 * v187;
          v191 = 61650 * v187;
          v192 = 48320 * v188;
          if (v68)
            v184 = 0;
          v193 = v189 + v192;
          v68 = v179 < -16384;
          v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          v195 = v189 + v190;
          v123[13] = v184;
          v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          v197 = v189 + v191;
          v198 = v189 + v191 + 0x4000;
          if (v68)
            v183 = 0;
          v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          v200 = v194 / 0x3FF;
          if (v193 > 33538047)
            LOBYTE(v200) = -1;
          v201 = v196 / 0x3FF;
          if (v195 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v154 >> 5) & 0x1FF8000;
          v204 = v203 + v192;
          if (v197 < -16384)
            LOBYTE(v202) = 0;
          v68 = v195 < -16384;
          v205 = v203 + v190;
          v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          v207 = v203 + v191;
          if (v68)
            LOBYTE(v201) = 0;
          v68 = v193 < -16384;
          v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          v16 = v295;
          v76[17] = v201;
          if (v68)
            LOBYTE(v200) = 0;
          v76[18] = v200;
          v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047)
            LOBYTE(v209) = -1;
          v210 = v208 >> 9;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          if (v207 >= -16384)
            v212 = v211;
          else
            v212 = 0;
          v76[20] = v212;
          if (v205 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v76[21] = v213;
          v214 = 32 * v177;
          if (v204 >= -16384)
            v215 = v209;
          else
            v215 = 0;
          v216 = v214 & 0x1FF8000;
          v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          v218 = v216 + v190;
          v76[19] = -1;
          v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          v220 = v216 + v191;
          v76[23] = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          v222 = v219 / 0x3FF;
          if (v218 > 33538047)
            LOBYTE(v222) = -1;
          v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOBYTE(v223) = -1;
          v224 = (v177 >> 5) & 0x1FF8000;
          v225 = v224 + v192;
          if (v220 >= -16384)
            v226 = v223;
          else
            v226 = 0;
          v227 = v224 + v190;
          v123[16] = v226;
          v228 = v224 + v191;
          if (v218 < -16384)
            LOBYTE(v222) = 0;
          v123[17] = v222;
          if (v217 < -16384)
            LOBYTE(v221) = 0;
          v123[18] = v221;
          v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047)
            LOBYTE(v229) = -1;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          if (v228 >= -16384)
            v232 = v231;
          else
            v232 = 0;
          v123[20] = v232;
          if (v227 >= -16384)
            v233 = v230;
          else
            v233 = 0;
          v123[21] = v233;
          if (v225 >= -16384)
            v234 = v229;
          else
            v234 = 0;
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (_BYTE *)(v21 + v74);
        v237 = (_BYTE *)(v27 + v74);
        v11 = v279;
        v238 = v281;
        v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          v240 = *((unsigned __int8 *)&v298 + v238);
          v241 = *((unsigned __int8 *)&v298 + v30);
          v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2)
            v244 = 0;
          else
            v244 = v30 + 1;
          v245 = *((unsigned __int8 *)&v298 + v244);
          v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          v248 = v246 - 512;
          if (v244 == 2)
            v249 = 0;
          else
            v249 = v244 + 1;
          if ((v18 & 1) != 0)
            v30 = v249;
          v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if ((v18 & 1) != 0)
            v31 = v247;
          v251 = -5391 * v242 - 18721 * v248;
          v252 = 61650 * v242;
          v253 = 48320 * v248;
          v254 = 48320 * v248 + v250;
          v255 = v251 + v250;
          v256 = v252 + v250;
          v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047)
            LOBYTE(v257) = -1;
          v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v258) = -1;
          v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047)
            LOBYTE(v259) = -1;
          if (v256 >= -16384)
            v261 = v259;
          else
            v261 = 0;
          *v236 = v261;
          if (v255 >= -16384)
            v262 = v258;
          else
            v262 = 0;
          v236[1] = v262;
          if (v254 >= -16384)
            v263 = v257;
          else
            v263 = 0;
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          v264 = *v32 >> v240;
          if (v238 == 2)
            v238 = 0;
          else
            ++v238;
          v32 = (_DWORD *)((char *)v32 + v260);
          v265 = (v264 & 0x3FF) << 15;
          v266 = v265 + v253;
          v267 = v265 + v251;
          v268 = v265 + v252;
          v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047)
            LOBYTE(v270) = -1;
          v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          v272 = (4198405 * (unint64_t)v269) >> 32;
          v273 = v269 - v272;
          if (v267 > 33538047)
            LOBYTE(v271) = -1;
          v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047)
            LOBYTE(v274) = -1;
          if (v268 >= -16384)
            v275 = v274;
          else
            v275 = 0;
          *v237 = v275;
          if (v267 >= -16384)
            v276 = v271;
          else
            v276 = 0;
          v237[1] = v276;
          if (v266 >= -16384)
            v277 = v270;
          else
            v277 = 0;
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      v17 = v294 + 1;
      v21 = v293 + v282;
      v27 = v239 + v282;
      v24 = v292 + 4 * v283;
      v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE *v57;
  char v58;
  _DWORD *v59;
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BYTE *v123;
  char v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  char v133;
  char v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int v172;
  unsigned int v173;
  char v174;
  char v175;
  char v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  char v183;
  char v184;
  char v185;
  char v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  char v212;
  char v213;
  int v214;
  char v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  int v225;
  char v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  char v232;
  char v233;
  char v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  _DWORD *v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  unsigned int v274;
  char v275;
  char v276;
  char v277;
  unint64_t v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  int v298;

  v298 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v288 = v9 % 3;
    v281 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v286 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 4 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v285 = v22;
    v283 = v23 >> 2;
    v282 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v287 = v18;
    v279 = v11;
    v295 = v16;
    do
    {
      v293 = v21;
      v294 = v17;
      v28 = 0;
      v289 = v27;
      v290 = v26;
      v29 = v288;
      v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        v34 = *v25;
        v35 = *((unsigned __int8 *)&v298 + v29);
        v36 = *((unsigned __int8 *)&v298 + v30);
        v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2)
          v39 = 0;
        else
          v39 = v30 + 1;
        v40 = *((unsigned __int8 *)&v298 + v39);
        v41 = v34 >> v35;
        v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        v44 = v42 & 0x3FF;
        if (v39 == 2)
          v45 = 0;
        else
          v45 = v39 + 1;
        if ((v28 & 1) != 0)
          v30 = v45;
        v46 = (v41 & 0x3FF) << 15;
        v47 = v44 - 512;
        v48 = -6137 * v37 - 15338 * v47;
        v49 = 60804 * v37;
        v50 = 51603 * v47;
        v51 = 51603 * v47 + v46;
        if ((v28 & 1) != 0)
          v31 = v43;
        v52 = v48 + v46;
        v53 = v49 + v46;
        v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047)
          LOBYTE(v54) = -1;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        if (v53 > 33538047)
          LOBYTE(v56) = -1;
        v57 = (_BYTE *)(v21 + v22);
        if (v53 >= -16384)
          v58 = v56;
        else
          v58 = 0;
        *v57 = v58;
        v59 = v32;
        if (v52 >= -16384)
          v60 = v55;
        else
          v60 = 0;
        if (v51 < -16384)
          LOBYTE(v54) = 0;
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        v61 = ((*v59 >> v35) & 0x3FF) << 15;
        v62 = v61 + v50;
        v63 = v61 + v48;
        v64 = v61 + v49;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOBYTE(v65) = -1;
        if (v63 > 33538047)
          LOBYTE(v66) = -1;
        v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOBYTE(v67) = -1;
        v68 = v64 < -16384;
        v69 = (_BYTE *)(v27 + v22);
        if (v68)
          LOBYTE(v67) = 0;
        *v69 = v67;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v69[1] = v70;
        v71 = v35 >> 2;
        if (v62 >= -16384)
          v72 = v65;
        else
          v72 = 0;
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      v292 = v24;
      if (v18 >= v16)
      {
        v236 = (_BYTE *)(v21 + v22);
        v237 = (_BYTE *)(v27 + v22);
        v239 = v289;
        v238 = v281;
      }
      else
      {
        v73 = 0;
        v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        v74 = v22;
        do
        {
          v75 = v31[v73 / 4];
          v76 = (_BYTE *)(v21 + v74);
          v77 = *(_DWORD *)&v297[v73];
          v78 = (v75 & 0x3FF) - 512;
          v79 = (v77 & 0x3FF) << 15;
          v80 = ((v75 >> 10) & 0x3FF) - 512;
          v81 = -6137 * v78 - 15338 * v80;
          v82 = 60804 * v78;
          v83 = 51603 * v80;
          v84 = v83 + v79;
          v85 = *(_DWORD *)&v296[v73];
          v86 = v81 + v79;
          v87 = v82 + v79;
          v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047)
            LOBYTE(v88) = -1;
          v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v89) = -1;
          if (v87 > 33538047)
            LOBYTE(v90) = -1;
          if (v87 < -16384)
            LOBYTE(v90) = 0;
          *v76 = v90;
          v91 = (32 * v77) & 0x1FF8000;
          v92 = v83 + v91;
          if (v86 < -16384)
            LOBYTE(v89) = 0;
          v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v82 + v91;
          v76[1] = v89;
          v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384)
            v98 = v88;
          else
            v98 = 0;
          v99 = v93 / 0x3FF;
          v76[2] = v98;
          v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047)
            LOBYTE(v99) = -1;
          v101 = v100 >> 9;
          v102 = (4198405 * (unint64_t)v97) >> 32;
          v103 = v97 - v102;
          if (v94 > 33538047)
            LOBYTE(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047)
            LOBYTE(v104) = -1;
          if (v96 < -16384)
            LOBYTE(v104) = 0;
          v76[4] = v104;
          v105 = (v85 & 0x3FF) << 15;
          v106 = v83 + v105;
          if (v94 < -16384)
            LOBYTE(v101) = 0;
          v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          v108 = v81 + v105;
          v68 = v92 < -16384;
          v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          v110 = v105 + v82;
          v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68)
            LOBYTE(v99) = 0;
          v112 = v111 + 511;
          v76[6] = v99;
          v113 = v107 / 0x3FF;
          v114 = (4198405 * (unint64_t)v109) >> 32;
          v115 = v109 - v114;
          if (v106 > 33538047)
            LOBYTE(v113) = -1;
          v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v112 / 0x3FF;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v110 >= -16384)
            v118 = v117;
          else
            v118 = 0;
          v119 = (32 * v85) & 0x1FF8000;
          v120 = v83 + v119;
          v68 = v108 < -16384;
          v121 = v81 + v119;
          v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (_BYTE *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(_BYTE *)(v27 + v74) = v118;
          if (v68)
            v124 = 0;
          else
            v124 = v116;
          v123[3] = -1;
          v125 = v119 + v82;
          v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384)
            LOBYTE(v113) = 0;
          if (v120 > 33538047)
            LOBYTE(v127) = -1;
          v128 = (v122 + 511) / 0x3FFu;
          v129 = (4198405 * (unint64_t)v126) >> 32;
          v130 = v126 - v129;
          if (v121 > 33538047)
            LOBYTE(v128) = -1;
          v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047)
            LOBYTE(v131) = -1;
          v123[2] = v113;
          if (v125 >= -16384)
            v132 = v131;
          else
            v132 = 0;
          v123[4] = v132;
          if (v121 >= -16384)
            v133 = v128;
          else
            v133 = 0;
          v123[5] = v133;
          if (v120 >= -16384)
            v134 = v127;
          else
            v134 = 0;
          v123[6] = v134;
          v123[7] = -1;
          v135 = v31[v73 / 4 + 1];
          v136 = ((v75 >> 20) & 0x3FF) - 512;
          v137 = (v135 & 0x3FF) - 512;
          v138 = (v77 >> 5) & 0x1FF8000;
          v139 = -6137 * v136 - 15338 * v137;
          v140 = 60804 * v136;
          v141 = 51603 * v137;
          v142 = v141 + v138;
          v143 = v139 + v138;
          v144 = v140 + v138;
          v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v145) >> 32;
          v148 = v145 - v147;
          if (v142 > 33538047)
            LOBYTE(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047)
            LOBYTE(v149) = -1;
          v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v76[8] = v151;
          if (v143 >= -16384)
            v152 = v149;
          else
            v152 = 0;
          v76[9] = v152;
          if (v142 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v76[10] = v153;
          v76[11] = -1;
          v154 = *(_DWORD *)&v297[v73 + 4];
          v155 = (v154 & 0x3FF) << 15;
          v156 = v155 + v141;
          v157 = v155 + v139;
          v158 = v155 + v140;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047)
            LOBYTE(v160) = -1;
          if (v158 > 33538047)
            LOBYTE(v161) = -1;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v68 = v157 < -16384;
          v76[12] = v162;
          v163 = (v85 >> 5) & 0x1FF8000;
          v164 = v141 + v163;
          v165 = v141 + v163 + 0x4000;
          if (v68)
            LOBYTE(v160) = 0;
          v166 = v139 + v163;
          v167 = v140 + v163;
          v76[15] = -1;
          v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384)
            LOBYTE(v159) = 0;
          if (v164 > 33538047)
            LOBYTE(v169) = -1;
          v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          v171 = (4198405 * (unint64_t)v168) >> 32;
          v172 = v168 - v171;
          if (v166 > 33538047)
            LOBYTE(v170) = -1;
          v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047)
            LOBYTE(v173) = -1;
          v76[14] = v159;
          if (v167 >= -16384)
            v174 = v173;
          else
            v174 = 0;
          v123[8] = v174;
          if (v166 >= -16384)
            v175 = v170;
          else
            v175 = 0;
          v123[9] = v175;
          if (v164 >= -16384)
            v176 = v169;
          else
            v176 = 0;
          v123[10] = v176;
          v123[11] = -1;
          v177 = *(_DWORD *)&v296[v73 + 4];
          v178 = (v177 & 0x3FF) << 15;
          v179 = v178 + v141;
          v180 = v178 + v139;
          v181 = v178 + v140;
          v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v180 > 33538047)
            v184 = -1;
          else
            v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            v185 = -1;
          else
            v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 >= -16384)
            v186 = v185;
          else
            v186 = 0;
          v123[15] = -1;
          v68 = v180 < -16384;
          v187 = ((v135 >> 10) & 0x3FF) - 512;
          v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          v189 = (32 * v154) & 0x1FF8000;
          v190 = -15338 * v188 - 6137 * v187;
          v191 = 60804 * v187;
          v192 = 51603 * v188;
          if (v68)
            v184 = 0;
          v193 = v189 + v192;
          v68 = v179 < -16384;
          v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          v195 = v189 + v190;
          v123[13] = v184;
          v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          v197 = v189 + v191;
          v198 = v189 + v191 + 0x4000;
          if (v68)
            v183 = 0;
          v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          v200 = v194 / 0x3FF;
          if (v193 > 33538047)
            LOBYTE(v200) = -1;
          v201 = v196 / 0x3FF;
          if (v195 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v154 >> 5) & 0x1FF8000;
          v204 = v203 + v192;
          if (v197 < -16384)
            LOBYTE(v202) = 0;
          v68 = v195 < -16384;
          v205 = v203 + v190;
          v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          v207 = v203 + v191;
          if (v68)
            LOBYTE(v201) = 0;
          v68 = v193 < -16384;
          v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          v16 = v295;
          v76[17] = v201;
          if (v68)
            LOBYTE(v200) = 0;
          v76[18] = v200;
          v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047)
            LOBYTE(v209) = -1;
          v210 = v208 >> 9;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          if (v207 >= -16384)
            v212 = v211;
          else
            v212 = 0;
          v76[20] = v212;
          if (v205 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v76[21] = v213;
          v214 = 32 * v177;
          if (v204 >= -16384)
            v215 = v209;
          else
            v215 = 0;
          v216 = v214 & 0x1FF8000;
          v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          v218 = v216 + v190;
          v76[19] = -1;
          v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          v220 = v216 + v191;
          v76[23] = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          v222 = v219 / 0x3FF;
          if (v218 > 33538047)
            LOBYTE(v222) = -1;
          v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOBYTE(v223) = -1;
          v224 = (v177 >> 5) & 0x1FF8000;
          v225 = v224 + v192;
          if (v220 >= -16384)
            v226 = v223;
          else
            v226 = 0;
          v227 = v224 + v190;
          v123[16] = v226;
          v228 = v224 + v191;
          if (v218 < -16384)
            LOBYTE(v222) = 0;
          v123[17] = v222;
          if (v217 < -16384)
            LOBYTE(v221) = 0;
          v123[18] = v221;
          v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047)
            LOBYTE(v229) = -1;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          if (v228 >= -16384)
            v232 = v231;
          else
            v232 = 0;
          v123[20] = v232;
          if (v227 >= -16384)
            v233 = v230;
          else
            v233 = 0;
          v123[21] = v233;
          if (v225 >= -16384)
            v234 = v229;
          else
            v234 = 0;
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (_BYTE *)(v21 + v74);
        v237 = (_BYTE *)(v27 + v74);
        v11 = v279;
        v238 = v281;
        v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          v240 = *((unsigned __int8 *)&v298 + v238);
          v241 = *((unsigned __int8 *)&v298 + v30);
          v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2)
            v244 = 0;
          else
            v244 = v30 + 1;
          v245 = *((unsigned __int8 *)&v298 + v244);
          v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          v248 = v246 - 512;
          if (v244 == 2)
            v249 = 0;
          else
            v249 = v244 + 1;
          if ((v18 & 1) != 0)
            v30 = v249;
          v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if ((v18 & 1) != 0)
            v31 = v247;
          v251 = -6137 * v242 - 15338 * v248;
          v252 = 60804 * v242;
          v253 = 51603 * v248;
          v254 = 51603 * v248 + v250;
          v255 = v251 + v250;
          v256 = v252 + v250;
          v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047)
            LOBYTE(v257) = -1;
          v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v258) = -1;
          v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047)
            LOBYTE(v259) = -1;
          if (v256 >= -16384)
            v261 = v259;
          else
            v261 = 0;
          *v236 = v261;
          if (v255 >= -16384)
            v262 = v258;
          else
            v262 = 0;
          v236[1] = v262;
          if (v254 >= -16384)
            v263 = v257;
          else
            v263 = 0;
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          v264 = *v32 >> v240;
          if (v238 == 2)
            v238 = 0;
          else
            ++v238;
          v32 = (_DWORD *)((char *)v32 + v260);
          v265 = (v264 & 0x3FF) << 15;
          v266 = v265 + v253;
          v267 = v265 + v251;
          v268 = v265 + v252;
          v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047)
            LOBYTE(v270) = -1;
          v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          v272 = (4198405 * (unint64_t)v269) >> 32;
          v273 = v269 - v272;
          if (v267 > 33538047)
            LOBYTE(v271) = -1;
          v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047)
            LOBYTE(v274) = -1;
          if (v268 >= -16384)
            v275 = v274;
          else
            v275 = 0;
          *v237 = v275;
          if (v267 >= -16384)
            v276 = v271;
          else
            v276 = 0;
          v237[1] = v276;
          if (v266 >= -16384)
            v277 = v270;
          else
            v277 = 0;
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      v17 = v294 + 1;
      v21 = v293 + v282;
      v27 = v239 + v282;
      v24 = v292 + 4 * v283;
      v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE *v57;
  char v58;
  _DWORD *v59;
  char v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  char v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BYTE *v123;
  char v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  char v133;
  char v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  char v152;
  char v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  char v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int v172;
  unsigned int v173;
  char v174;
  char v175;
  char v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  char v183;
  char v184;
  char v185;
  char v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  char v212;
  char v213;
  int v214;
  char v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  int v225;
  char v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  char v232;
  char v233;
  char v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  _DWORD *v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  unsigned int v274;
  char v275;
  char v276;
  char v277;
  unint64_t v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  int v298;

  v298 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v288 = v9 % 3;
    v281 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v286 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 4 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v285 = v22;
    v283 = v23 >> 2;
    v282 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v287 = v18;
    v279 = v11;
    v295 = v16;
    do
    {
      v293 = v21;
      v294 = v17;
      v28 = 0;
      v289 = v27;
      v290 = v26;
      v29 = v288;
      v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        v34 = *v25;
        v35 = *((unsigned __int8 *)&v298 + v29);
        v36 = *((unsigned __int8 *)&v298 + v30);
        v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2)
          v39 = 0;
        else
          v39 = v30 + 1;
        v40 = *((unsigned __int8 *)&v298 + v39);
        v41 = v34 >> v35;
        v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        v44 = v42 & 0x3FF;
        if (v39 == 2)
          v45 = 0;
        else
          v45 = v39 + 1;
        if ((v28 & 1) != 0)
          v30 = v45;
        v46 = (v41 & 0x3FF) << 15;
        v47 = v44 - 512;
        v48 = -11276 * v37 - 23400 * v47;
        v49 = 58065 * v37;
        v50 = 45941 * v47;
        v51 = 45941 * v47 + v46;
        if ((v28 & 1) != 0)
          v31 = v43;
        v52 = v48 + v46;
        v53 = v49 + v46;
        v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047)
          LOBYTE(v54) = -1;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          LOBYTE(v55) = -1;
        if (v53 > 33538047)
          LOBYTE(v56) = -1;
        v57 = (_BYTE *)(v21 + v22);
        if (v53 >= -16384)
          v58 = v56;
        else
          v58 = 0;
        *v57 = v58;
        v59 = v32;
        if (v52 >= -16384)
          v60 = v55;
        else
          v60 = 0;
        if (v51 < -16384)
          LOBYTE(v54) = 0;
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        v61 = ((*v59 >> v35) & 0x3FF) << 15;
        v62 = v61 + v50;
        v63 = v61 + v48;
        v64 = v61 + v49;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOBYTE(v65) = -1;
        if (v63 > 33538047)
          LOBYTE(v66) = -1;
        v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOBYTE(v67) = -1;
        v68 = v64 < -16384;
        v69 = (_BYTE *)(v27 + v22);
        if (v68)
          LOBYTE(v67) = 0;
        *v69 = v67;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v69[1] = v70;
        v71 = v35 >> 2;
        if (v62 >= -16384)
          v72 = v65;
        else
          v72 = 0;
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      v292 = v24;
      if (v18 >= v16)
      {
        v236 = (_BYTE *)(v21 + v22);
        v237 = (_BYTE *)(v27 + v22);
        v239 = v289;
        v238 = v281;
      }
      else
      {
        v73 = 0;
        v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        v74 = v22;
        do
        {
          v75 = v31[v73 / 4];
          v76 = (_BYTE *)(v21 + v74);
          v77 = *(_DWORD *)&v297[v73];
          v78 = (v75 & 0x3FF) - 512;
          v79 = (v77 & 0x3FF) << 15;
          v80 = ((v75 >> 10) & 0x3FF) - 512;
          v81 = -11276 * v78 - 23400 * v80;
          v82 = 58065 * v78;
          v83 = 45941 * v80;
          v84 = v83 + v79;
          v85 = *(_DWORD *)&v296[v73];
          v86 = v81 + v79;
          v87 = v82 + v79;
          v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047)
            LOBYTE(v88) = -1;
          v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOBYTE(v89) = -1;
          if (v87 > 33538047)
            LOBYTE(v90) = -1;
          if (v87 < -16384)
            LOBYTE(v90) = 0;
          *v76 = v90;
          v91 = (32 * v77) & 0x1FF8000;
          v92 = v83 + v91;
          if (v86 < -16384)
            LOBYTE(v89) = 0;
          v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          v94 = v81 + v91;
          v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          v96 = v82 + v91;
          v76[1] = v89;
          v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384)
            v98 = v88;
          else
            v98 = 0;
          v99 = v93 / 0x3FF;
          v76[2] = v98;
          v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047)
            LOBYTE(v99) = -1;
          v101 = v100 >> 9;
          v102 = (4198405 * (unint64_t)v97) >> 32;
          v103 = v97 - v102;
          if (v94 > 33538047)
            LOBYTE(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047)
            LOBYTE(v104) = -1;
          if (v96 < -16384)
            LOBYTE(v104) = 0;
          v76[4] = v104;
          v105 = (v85 & 0x3FF) << 15;
          v106 = v83 + v105;
          if (v94 < -16384)
            LOBYTE(v101) = 0;
          v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          v108 = v81 + v105;
          v68 = v92 < -16384;
          v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          v110 = v105 + v82;
          v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68)
            LOBYTE(v99) = 0;
          v112 = v111 + 511;
          v76[6] = v99;
          v113 = v107 / 0x3FF;
          v114 = (4198405 * (unint64_t)v109) >> 32;
          v115 = v109 - v114;
          if (v106 > 33538047)
            LOBYTE(v113) = -1;
          v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047)
            LOBYTE(v116) = -1;
          v117 = v112 / 0x3FF;
          if (v110 > 33538047)
            LOBYTE(v117) = -1;
          if (v110 >= -16384)
            v118 = v117;
          else
            v118 = 0;
          v119 = (32 * v85) & 0x1FF8000;
          v120 = v83 + v119;
          v68 = v108 < -16384;
          v121 = v81 + v119;
          v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (_BYTE *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(_BYTE *)(v27 + v74) = v118;
          if (v68)
            v124 = 0;
          else
            v124 = v116;
          v123[3] = -1;
          v125 = v119 + v82;
          v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384)
            LOBYTE(v113) = 0;
          if (v120 > 33538047)
            LOBYTE(v127) = -1;
          v128 = (v122 + 511) / 0x3FFu;
          v129 = (4198405 * (unint64_t)v126) >> 32;
          v130 = v126 - v129;
          if (v121 > 33538047)
            LOBYTE(v128) = -1;
          v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047)
            LOBYTE(v131) = -1;
          v123[2] = v113;
          if (v125 >= -16384)
            v132 = v131;
          else
            v132 = 0;
          v123[4] = v132;
          if (v121 >= -16384)
            v133 = v128;
          else
            v133 = 0;
          v123[5] = v133;
          if (v120 >= -16384)
            v134 = v127;
          else
            v134 = 0;
          v123[6] = v134;
          v123[7] = -1;
          v135 = v31[v73 / 4 + 1];
          v136 = ((v75 >> 20) & 0x3FF) - 512;
          v137 = (v135 & 0x3FF) - 512;
          v138 = (v77 >> 5) & 0x1FF8000;
          v139 = -11276 * v136 - 23400 * v137;
          v140 = 58065 * v136;
          v141 = 45941 * v137;
          v142 = v141 + v138;
          v143 = v139 + v138;
          v144 = v140 + v138;
          v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          v147 = (4198405 * (unint64_t)v145) >> 32;
          v148 = v145 - v147;
          if (v142 > 33538047)
            LOBYTE(v146) = -1;
          v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047)
            LOBYTE(v149) = -1;
          v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047)
            LOBYTE(v150) = -1;
          if (v144 >= -16384)
            v151 = v150;
          else
            v151 = 0;
          v76[8] = v151;
          if (v143 >= -16384)
            v152 = v149;
          else
            v152 = 0;
          v76[9] = v152;
          if (v142 >= -16384)
            v153 = v146;
          else
            v153 = 0;
          v76[10] = v153;
          v76[11] = -1;
          v154 = *(_DWORD *)&v297[v73 + 4];
          v155 = (v154 & 0x3FF) << 15;
          v156 = v155 + v141;
          v157 = v155 + v139;
          v158 = v155 + v140;
          v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOBYTE(v159) = -1;
          v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047)
            LOBYTE(v160) = -1;
          if (v158 > 33538047)
            LOBYTE(v161) = -1;
          if (v158 >= -16384)
            v162 = v161;
          else
            v162 = 0;
          v68 = v157 < -16384;
          v76[12] = v162;
          v163 = (v85 >> 5) & 0x1FF8000;
          v164 = v141 + v163;
          v165 = v141 + v163 + 0x4000;
          if (v68)
            LOBYTE(v160) = 0;
          v166 = v139 + v163;
          v167 = v140 + v163;
          v76[15] = -1;
          v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384)
            LOBYTE(v159) = 0;
          if (v164 > 33538047)
            LOBYTE(v169) = -1;
          v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          v171 = (4198405 * (unint64_t)v168) >> 32;
          v172 = v168 - v171;
          if (v166 > 33538047)
            LOBYTE(v170) = -1;
          v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047)
            LOBYTE(v173) = -1;
          v76[14] = v159;
          if (v167 >= -16384)
            v174 = v173;
          else
            v174 = 0;
          v123[8] = v174;
          if (v166 >= -16384)
            v175 = v170;
          else
            v175 = 0;
          v123[9] = v175;
          if (v164 >= -16384)
            v176 = v169;
          else
            v176 = 0;
          v123[10] = v176;
          v123[11] = -1;
          v177 = *(_DWORD *)&v296[v73 + 4];
          v178 = (v177 & 0x3FF) << 15;
          v179 = v178 + v141;
          v180 = v178 + v139;
          v181 = v178 + v140;
          v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047)
            v183 = -1;
          else
            v183 = v182;
          if (v180 > 33538047)
            v184 = -1;
          else
            v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 > 33538047)
            v185 = -1;
          else
            v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v181 >= -16384)
            v186 = v185;
          else
            v186 = 0;
          v123[15] = -1;
          v68 = v180 < -16384;
          v187 = ((v135 >> 10) & 0x3FF) - 512;
          v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          v189 = (32 * v154) & 0x1FF8000;
          v190 = -23400 * v188 - 11276 * v187;
          v191 = 58065 * v187;
          v192 = 45941 * v188;
          if (v68)
            v184 = 0;
          v193 = v189 + v192;
          v68 = v179 < -16384;
          v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          v195 = v189 + v190;
          v123[13] = v184;
          v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          v197 = v189 + v191;
          v198 = v189 + v191 + 0x4000;
          if (v68)
            v183 = 0;
          v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          v200 = v194 / 0x3FF;
          if (v193 > 33538047)
            LOBYTE(v200) = -1;
          v201 = v196 / 0x3FF;
          if (v195 > 33538047)
            LOBYTE(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v197 > 33538047)
            LOBYTE(v202) = -1;
          v203 = (v154 >> 5) & 0x1FF8000;
          v204 = v203 + v192;
          if (v197 < -16384)
            LOBYTE(v202) = 0;
          v68 = v195 < -16384;
          v205 = v203 + v190;
          v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          v207 = v203 + v191;
          if (v68)
            LOBYTE(v201) = 0;
          v68 = v193 < -16384;
          v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          v16 = v295;
          v76[17] = v201;
          if (v68)
            LOBYTE(v200) = 0;
          v76[18] = v200;
          v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047)
            LOBYTE(v209) = -1;
          v210 = v208 >> 9;
          if (v205 > 33538047)
            LOBYTE(v210) = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOBYTE(v211) = -1;
          if (v207 >= -16384)
            v212 = v211;
          else
            v212 = 0;
          v76[20] = v212;
          if (v205 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v76[21] = v213;
          v214 = 32 * v177;
          if (v204 >= -16384)
            v215 = v209;
          else
            v215 = 0;
          v216 = v214 & 0x1FF8000;
          v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          v218 = v216 + v190;
          v76[19] = -1;
          v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          v220 = v216 + v191;
          v76[23] = -1;
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047)
            LOBYTE(v221) = -1;
          v222 = v219 / 0x3FF;
          if (v218 > 33538047)
            LOBYTE(v222) = -1;
          v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047)
            LOBYTE(v223) = -1;
          v224 = (v177 >> 5) & 0x1FF8000;
          v225 = v224 + v192;
          if (v220 >= -16384)
            v226 = v223;
          else
            v226 = 0;
          v227 = v224 + v190;
          v123[16] = v226;
          v228 = v224 + v191;
          if (v218 < -16384)
            LOBYTE(v222) = 0;
          v123[17] = v222;
          if (v217 < -16384)
            LOBYTE(v221) = 0;
          v123[18] = v221;
          v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047)
            LOBYTE(v229) = -1;
          v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047)
            LOBYTE(v230) = -1;
          v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047)
            LOBYTE(v231) = -1;
          if (v228 >= -16384)
            v232 = v231;
          else
            v232 = 0;
          v123[20] = v232;
          if (v227 >= -16384)
            v233 = v230;
          else
            v233 = 0;
          v123[21] = v233;
          if (v225 >= -16384)
            v234 = v229;
          else
            v234 = 0;
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (_BYTE *)(v21 + v74);
        v237 = (_BYTE *)(v27 + v74);
        v11 = v279;
        v238 = v281;
        v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          v240 = *((unsigned __int8 *)&v298 + v238);
          v241 = *((unsigned __int8 *)&v298 + v30);
          v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2)
            v244 = 0;
          else
            v244 = v30 + 1;
          v245 = *((unsigned __int8 *)&v298 + v244);
          v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          v248 = v246 - 512;
          if (v244 == 2)
            v249 = 0;
          else
            v249 = v244 + 1;
          if ((v18 & 1) != 0)
            v30 = v249;
          v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if ((v18 & 1) != 0)
            v31 = v247;
          v251 = -11276 * v242 - 23400 * v248;
          v252 = 58065 * v242;
          v253 = 45941 * v248;
          v254 = 45941 * v248 + v250;
          v255 = v251 + v250;
          v256 = v252 + v250;
          v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047)
            LOBYTE(v257) = -1;
          v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047)
            LOBYTE(v258) = -1;
          v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047)
            LOBYTE(v259) = -1;
          if (v256 >= -16384)
            v261 = v259;
          else
            v261 = 0;
          *v236 = v261;
          if (v255 >= -16384)
            v262 = v258;
          else
            v262 = 0;
          v236[1] = v262;
          if (v254 >= -16384)
            v263 = v257;
          else
            v263 = 0;
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          v264 = *v32 >> v240;
          if (v238 == 2)
            v238 = 0;
          else
            ++v238;
          v32 = (_DWORD *)((char *)v32 + v260);
          v265 = (v264 & 0x3FF) << 15;
          v266 = v265 + v253;
          v267 = v265 + v251;
          v268 = v265 + v252;
          v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047)
            LOBYTE(v270) = -1;
          v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          v272 = (4198405 * (unint64_t)v269) >> 32;
          v273 = v269 - v272;
          if (v267 > 33538047)
            LOBYTE(v271) = -1;
          v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047)
            LOBYTE(v274) = -1;
          if (v268 >= -16384)
            v275 = v274;
          else
            v275 = 0;
          *v237 = v275;
          if (v267 >= -16384)
            v276 = v271;
          else
            v276 = 0;
          v237[1] = v276;
          if (v266 >= -16384)
            v277 = v270;
          else
            v277 = 0;
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      v17 = v294 + 1;
      v21 = v293 + v282;
      v27 = v239 + v282;
      v24 = v292 + 4 * v283;
      v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 *v58;
  __int16 v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _WORD *v68;
  __int16 v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  char *v74;
  _WORD *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  __int16 v92;
  BOOL v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  __int16 v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  _WORD *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  __int16 v120;
  __int16 v121;
  int v122;
  int v123;
  int v124;
  int v125;
  __int16 v126;
  unsigned int v127;
  unsigned int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  __int16 v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  __int16 v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  __int16 v163;
  int v164;
  int v165;
  int v166;
  int v167;
  __int16 v168;
  unsigned int v169;
  unsigned int v170;
  __int16 v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  __int16 v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  __int16 v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  uint64_t v215;
  _WORD *v216;
  _WORD *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  _DWORD *v226;
  unsigned int v227;
  unint64_t v228;
  int v229;
  _DWORD *v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  __int16 v244;
  int v245;
  int v246;
  int v247;
  int v248;
  __int16 v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  unsigned int v255;
  unsigned int v256;
  __int16 v257;
  __int16 v258;
  unint64_t v260;
  _DWORD *v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  int v281;

  v281 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v270 = v9 % 3;
    v263 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v268 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 8 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v267 = v22;
    v265 = v23 >> 2;
    v264 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v269 = v18;
    v260 = v11;
    v277 = v16;
    do
    {
      v28 = 0;
      v271 = v27;
      v272 = v21;
      v29 = v270;
      v30 = v270;
      v31 = (_DWORD *)v24;
      v273 = v26;
      v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        v34 = v33;
        v35 = *v33;
        v36 = *((unsigned __int8 *)&v281 + v29);
        v37 = *((unsigned __int8 *)&v281 + v30);
        v38 = ((*v31 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2)
          v40 = 0;
        else
          v40 = v30 + 1;
        v41 = *((unsigned __int8 *)&v281 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v28 & 1) != 0)
        {
          v31 = v44;
          v30 = v46;
        }
        v47 = (v42 & 0x3FF) << 15;
        v48 = -5391 * v38 - 18721 * (v45 - 512);
        v49 = 61650 * v38;
        v50 = 48320 * (v45 - 512);
        v51 = v50 + v47;
        v52 = v48 + v47;
        v53 = v49 + v47;
        v54 = v32;
        if (v51 > 33538047)
          v55 = -1;
        else
          v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          v56 = -1;
        else
          v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384)
          v59 = v55;
        else
          v59 = 0;
        *v58 = v59;
        if (v52 >= -16384)
          v60 = v56;
        else
          v60 = 0;
        v61 = ((*v54 >> v36) & 0x3FF) << 15;
        v62 = v61 + v50;
        v58[1] = v60;
        v63 = v61 + v48;
        if (v53 < -16384)
          v57 = 0;
        v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOWORD(v65) = -1;
        v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047)
          LOWORD(v66) = -1;
        v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOWORD(v67) = -1;
        v58[3] = -1;
        v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384)
          v69 = v65;
        else
          v69 = 0;
        *v68 = v69;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v68[1] = v70;
        v71 = v36 >> 2;
        if (v64 >= -16384)
          v72 = v67;
        else
          v72 = 0;
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      v275 = v24;
      v276 = v17;
      if (v18 >= v16)
      {
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v219 = v271;
        v220 = v272;
        v218 = v263;
      }
      else
      {
        v73 = 0;
        v261 = v34;
        v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          v280 = v22;
          v74 = &v278[v73];
          v75 = (_WORD *)(v21 + v22);
          v76 = v31[v73 / 4];
          v77 = v31[v73 / 4 + 1];
          v78 = (v76 & 0x3FF) - 512;
          v80 = *(_DWORD *)&v279[v73];
          v79 = *(_DWORD *)&v279[v73 + 4];
          v81 = ((v76 >> 10) & 0x3FF) - 512;
          v82 = (v80 & 0x3FF) << 15;
          v83 = 61650 * v78;
          v84 = 48320 * v81;
          v85 = -5391 * v78 - 18721 * v81;
          v86 = v84 + v82;
          v87 = v85 + v82;
          v88 = v83 + v82;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047)
            LOWORD(v90) = -1;
          v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOWORD(v91) = -1;
          if (v86 >= -16384)
            v92 = v89;
          else
            v92 = 0;
          *v75 = v92;
          v93 = v87 < -16384;
          v94 = (32 * v80) & 0x1FF8000;
          v95 = v84 + v94;
          if (v93)
            LOWORD(v90) = 0;
          v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          v97 = v85 + v94;
          v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          v99 = v83 + v94;
          if (v88 >= -16384)
            v100 = v91;
          else
            v100 = 0;
          v75[2] = v100;
          v101 = v96 / 0x3FF;
          v102 = (4198405 * (unint64_t)v98) >> 32;
          v103 = v98 - v102;
          if (v95 > 33538047)
            LOWORD(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047)
            LOWORD(v104) = -1;
          if (v99 > 33538047)
            v105 = -1;
          else
            v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v95 >= -16384)
            v106 = v101;
          else
            v106 = 0;
          v75[4] = v106;
          if (v97 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v93 = v99 < -16384;
          v108 = *(_DWORD *)v74;
          v109 = *((_DWORD *)v74 + 1);
          v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          v111 = v84 + v110;
          v75[5] = v107;
          v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          v113 = v85 + v110;
          v114 = v85 + v110 + 0x4000;
          if (v93)
            v105 = 0;
          v115 = v110 + v83;
          v75[6] = v105;
          v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          v117 = v112 / 0x3FF;
          v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v117) = -1;
          if (v113 > 33538047)
            LOWORD(v118) = -1;
          v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047)
            LOWORD(v119) = -1;
          if (v111 >= -16384)
            v120 = v117;
          else
            v120 = 0;
          *v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384)
            v121 = v118;
          else
            v121 = 0;
          v122 = (32 * v108) & 0x1FF8000;
          v123 = v84 + v122;
          v124 = v85 + v122;
          v116[1] = v121;
          v125 = v122 + v83;
          if (v115 >= -16384)
            v126 = v119;
          else
            v126 = 0;
          v116[2] = v126;
          v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOWORD(v127) = -1;
          v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047)
            LOWORD(v128) = -1;
          if (v125 > 33538047)
            v129 = -1;
          else
            v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 >= -16384)
            v130 = v127;
          else
            v130 = 0;
          v116[7] = -1;
          v93 = v124 < -16384;
          v131 = ((v76 >> 20) & 0x3FF) - 512;
          v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          v133 = (v80 >> 5) & 0x1FF8000;
          v134 = -5391 * v131 - 18721 * v132;
          v135 = 61650 * v131;
          v136 = 48320 * v132;
          if (v93)
            v137 = 0;
          else
            v137 = v128;
          v138 = v136 + v133;
          v93 = v125 < -16384;
          v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          v140 = v134 + v133;
          v116[5] = v137;
          v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          v142 = v135 + v133;
          if (v93)
            v129 = 0;
          v116[6] = v129;
          v143 = v139 / 0x3FF;
          if (v138 > 33538047)
            LOWORD(v143) = -1;
          v144 = v141 / 0x3FF;
          if (v140 > 33538047)
            LOWORD(v144) = -1;
          v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047)
            LOWORD(v145) = -1;
          if (v138 < -16384)
            LOWORD(v143) = 0;
          v75[8] = v143;
          if (v140 < -16384)
            LOWORD(v144) = 0;
          v146 = (v79 & 0x3FF) << 15;
          v147 = v146 + v136;
          v148 = v146 + v134;
          v75[9] = v144;
          v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          v150 = v146 + v135;
          if (v142 < -16384)
            LOWORD(v145) = 0;
          v75[11] = -1;
          v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047)
            LOWORD(v151) = -1;
          if (v148 > 33538047)
            LOWORD(v152) = -1;
          v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOWORD(v153) = -1;
          if (v147 >= -16384)
            v154 = v151;
          else
            v154 = 0;
          v75[12] = v154;
          v75[15] = -1;
          v155 = (v108 >> 5) & 0x1FF8000;
          v156 = v136 + v155;
          if (v148 < -16384)
            LOWORD(v152) = 0;
          v93 = v150 < -16384;
          v157 = v134 + v155;
          v75[13] = v152;
          v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          v159 = v135 + v155;
          if (v93)
            LOWORD(v153) = 0;
          v75[14] = v153;
          v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOWORD(v160) = -1;
          v161 = v158 / 0x3FF;
          if (v157 > 33538047)
            LOWORD(v161) = -1;
          v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047)
            LOWORD(v162) = -1;
          if (v156 >= -16384)
            v163 = v160;
          else
            v163 = 0;
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384)
            LOWORD(v161) = 0;
          v164 = (v109 & 0x3FF) << 15;
          v165 = v164 + v136;
          v166 = v164 + v134;
          v116[9] = v161;
          v167 = v164 + v135;
          if (v159 >= -16384)
            v168 = v162;
          else
            v168 = 0;
          v116[10] = v168;
          v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOWORD(v169) = -1;
          v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v170) = -1;
          if (v167 > 33538047)
            v171 = -1;
          else
            v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 >= -16384)
            v172 = v169;
          else
            v172 = 0;
          v116[15] = -1;
          v93 = v166 < -16384;
          v173 = ((v77 >> 10) & 0x3FF) - 512;
          v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          v175 = (32 * v79) & 0x1FF8000;
          v176 = -18721 * v174 - 5391 * v173;
          v177 = 61650 * v173;
          v178 = 48320 * v174;
          if (v93)
            LOWORD(v170) = 0;
          v179 = v175 + v178;
          v93 = v167 < -16384;
          v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          v181 = v175 + v176;
          v116[13] = v170;
          v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          v183 = v175 + v177;
          if (v93)
            v171 = 0;
          v116[14] = v171;
          v184 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOWORD(v184) = -1;
          v185 = v182 / 0x3FF;
          if (v181 > 33538047)
            LOWORD(v185) = -1;
          v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047)
            LOWORD(v186) = -1;
          v93 = v179 < -16384;
          v187 = (v79 >> 5) & 0x1FF8000;
          v188 = v187 + v178;
          if (v93)
            LOWORD(v184) = 0;
          v93 = v181 < -16384;
          v189 = v187 + v176;
          v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          v191 = v187 + v177;
          if (v93)
            LOWORD(v185) = 0;
          v75[17] = v185;
          if (v183 >= -16384)
            v192 = v186;
          else
            v192 = 0;
          v75[18] = v192;
          v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v277;
          if (v188 > 33538047)
            LOWORD(v193) = -1;
          v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOWORD(v194) = -1;
          v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOWORD(v195) = -1;
          if (v188 < -16384)
            LOWORD(v193) = 0;
          v75[20] = v193;
          if (v189 < -16384)
            LOWORD(v194) = 0;
          v75[21] = v194;
          if (v191 < -16384)
            LOWORD(v195) = 0;
          v196 = (32 * v109) & 0x1FF8000;
          v197 = v196 + v178;
          v75[22] = v195;
          v198 = v196 + v176;
          v75[19] = -1;
          v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          v200 = v196 + v177;
          v75[23] = -1;
          v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOWORD(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOWORD(v202) = -1;
          v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v203) = -1;
          v204 = (v109 >> 5) & 0x1FF8000;
          v205 = v204 + v178;
          if (v197 < -16384)
            LOWORD(v201) = 0;
          v206 = v204 + v176;
          v116[16] = v201;
          v207 = v204 + v177;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v116[17] = v208;
          if (v200 < -16384)
            LOWORD(v203) = 0;
          v116[18] = v203;
          v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOWORD(v209) = -1;
          v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOWORD(v210) = -1;
          v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOWORD(v211) = -1;
          if (v205 >= -16384)
            v212 = v209;
          else
            v212 = 0;
          v116[20] = v212;
          if (v206 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v116[21] = v213;
          if (v207 >= -16384)
            v214 = v211;
          else
            v214 = 0;
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          v22 = v280 + 48;
        }
        while (v18 < v277);
        v215 = v262 & 0x3C;
        v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v218 = v263;
        v219 = v271;
        v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          v221 = *((unsigned __int8 *)&v281 + v218);
          v222 = *v33 >> v221;
          v223 = *((unsigned __int8 *)&v281 + v30);
          v224 = (v221 >> 2) & 0x3C;
          v225 = ((*v31 >> v223) & 0x3FF) - 512;
          v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2)
            v227 = 0;
          else
            v227 = v30 + 1;
          v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          v229 = *v226 >> v228;
          v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          v231 = v229 & 0x3FF;
          if (v227 == 2)
            v232 = 0;
          else
            v232 = v227 + 1;
          if ((v18 & 1) != 0)
            v30 = v232;
          v233 = (v222 & 0x3FF) << 15;
          v234 = v231 - 512;
          v235 = -5391 * v225 - 18721 * v234;
          v236 = 61650 * v225;
          v237 = 48320 * v234;
          v238 = 48320 * v234 + v233;
          if ((v18 & 1) != 0)
            v31 = v230;
          v239 = v235 + v233;
          v240 = v236 + v233;
          v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOWORD(v241) = -1;
          v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047)
            LOWORD(v242) = -1;
          if (v240 > 33538047)
            LOWORD(v243) = -1;
          if (v238 < -16384)
            LOWORD(v241) = 0;
          *v216 = v241;
          if (v239 >= -16384)
            v244 = v242;
          else
            v244 = 0;
          v216[3] = -1;
          v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          v246 = (v245 & 0x3FF) << 15;
          v247 = v246 + v237;
          v216[1] = v244;
          v248 = v246 + v235;
          if (v240 >= -16384)
            v249 = v243;
          else
            v249 = 0;
          v250 = v246 + v236;
          v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          if (v247 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          v254 = (4198405 * (unint64_t)v251) >> 32;
          v255 = v251 - v254;
          if (v248 > 33538047)
            LOWORD(v253) = -1;
          v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047)
            LOWORD(v256) = -1;
          if (v247 < -16384)
            LOWORD(v252) = 0;
          *v217 = v252;
          if (v248 >= -16384)
            v257 = v253;
          else
            v257 = 0;
          v217[1] = v257;
          if (v250 >= -16384)
            v258 = v256;
          else
            v258 = 0;
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      v22 = v267;
      v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      v17 = v276 + 1;
      v21 = v220 + v264;
      v27 = v219 + v264;
      v24 = v275 + 4 * v265;
      v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 *v58;
  __int16 v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _WORD *v68;
  __int16 v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  char *v74;
  _WORD *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  __int16 v92;
  BOOL v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  __int16 v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  _WORD *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  __int16 v120;
  __int16 v121;
  int v122;
  int v123;
  int v124;
  int v125;
  __int16 v126;
  unsigned int v127;
  unsigned int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  __int16 v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  __int16 v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  __int16 v163;
  int v164;
  int v165;
  int v166;
  int v167;
  __int16 v168;
  unsigned int v169;
  unsigned int v170;
  __int16 v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  __int16 v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  __int16 v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  uint64_t v215;
  _WORD *v216;
  _WORD *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  _DWORD *v226;
  unsigned int v227;
  unint64_t v228;
  int v229;
  _DWORD *v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  __int16 v244;
  int v245;
  int v246;
  int v247;
  int v248;
  __int16 v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  unsigned int v255;
  unsigned int v256;
  __int16 v257;
  __int16 v258;
  unint64_t v260;
  _DWORD *v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  int v281;

  v281 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v270 = v9 % 3;
    v263 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v268 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 8 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v267 = v22;
    v265 = v23 >> 2;
    v264 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v269 = v18;
    v260 = v11;
    v277 = v16;
    do
    {
      v28 = 0;
      v271 = v27;
      v272 = v21;
      v29 = v270;
      v30 = v270;
      v31 = (_DWORD *)v24;
      v273 = v26;
      v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        v34 = v33;
        v35 = *v33;
        v36 = *((unsigned __int8 *)&v281 + v29);
        v37 = *((unsigned __int8 *)&v281 + v30);
        v38 = ((*v31 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2)
          v40 = 0;
        else
          v40 = v30 + 1;
        v41 = *((unsigned __int8 *)&v281 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v28 & 1) != 0)
        {
          v31 = v44;
          v30 = v46;
        }
        v47 = (v42 & 0x3FF) << 15;
        v48 = -6137 * v38 - 15338 * (v45 - 512);
        v49 = 60804 * v38;
        v50 = 51603 * (v45 - 512);
        v51 = v50 + v47;
        v52 = v48 + v47;
        v53 = v49 + v47;
        v54 = v32;
        if (v51 > 33538047)
          v55 = -1;
        else
          v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          v56 = -1;
        else
          v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384)
          v59 = v55;
        else
          v59 = 0;
        *v58 = v59;
        if (v52 >= -16384)
          v60 = v56;
        else
          v60 = 0;
        v61 = ((*v54 >> v36) & 0x3FF) << 15;
        v62 = v61 + v50;
        v58[1] = v60;
        v63 = v61 + v48;
        if (v53 < -16384)
          v57 = 0;
        v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOWORD(v65) = -1;
        v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047)
          LOWORD(v66) = -1;
        v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOWORD(v67) = -1;
        v58[3] = -1;
        v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384)
          v69 = v65;
        else
          v69 = 0;
        *v68 = v69;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v68[1] = v70;
        v71 = v36 >> 2;
        if (v64 >= -16384)
          v72 = v67;
        else
          v72 = 0;
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      v275 = v24;
      v276 = v17;
      if (v18 >= v16)
      {
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v219 = v271;
        v220 = v272;
        v218 = v263;
      }
      else
      {
        v73 = 0;
        v261 = v34;
        v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          v280 = v22;
          v74 = &v278[v73];
          v75 = (_WORD *)(v21 + v22);
          v76 = v31[v73 / 4];
          v77 = v31[v73 / 4 + 1];
          v78 = (v76 & 0x3FF) - 512;
          v80 = *(_DWORD *)&v279[v73];
          v79 = *(_DWORD *)&v279[v73 + 4];
          v81 = ((v76 >> 10) & 0x3FF) - 512;
          v82 = (v80 & 0x3FF) << 15;
          v83 = 60804 * v78;
          v84 = 51603 * v81;
          v85 = -6137 * v78 - 15338 * v81;
          v86 = v84 + v82;
          v87 = v85 + v82;
          v88 = v83 + v82;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047)
            LOWORD(v90) = -1;
          v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOWORD(v91) = -1;
          if (v86 >= -16384)
            v92 = v89;
          else
            v92 = 0;
          *v75 = v92;
          v93 = v87 < -16384;
          v94 = (32 * v80) & 0x1FF8000;
          v95 = v84 + v94;
          if (v93)
            LOWORD(v90) = 0;
          v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          v97 = v85 + v94;
          v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          v99 = v83 + v94;
          if (v88 >= -16384)
            v100 = v91;
          else
            v100 = 0;
          v75[2] = v100;
          v101 = v96 / 0x3FF;
          v102 = (4198405 * (unint64_t)v98) >> 32;
          v103 = v98 - v102;
          if (v95 > 33538047)
            LOWORD(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047)
            LOWORD(v104) = -1;
          if (v99 > 33538047)
            v105 = -1;
          else
            v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v95 >= -16384)
            v106 = v101;
          else
            v106 = 0;
          v75[4] = v106;
          if (v97 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v93 = v99 < -16384;
          v108 = *(_DWORD *)v74;
          v109 = *((_DWORD *)v74 + 1);
          v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          v111 = v84 + v110;
          v75[5] = v107;
          v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          v113 = v85 + v110;
          v114 = v85 + v110 + 0x4000;
          if (v93)
            v105 = 0;
          v115 = v110 + v83;
          v75[6] = v105;
          v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          v117 = v112 / 0x3FF;
          v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v117) = -1;
          if (v113 > 33538047)
            LOWORD(v118) = -1;
          v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047)
            LOWORD(v119) = -1;
          if (v111 >= -16384)
            v120 = v117;
          else
            v120 = 0;
          *v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384)
            v121 = v118;
          else
            v121 = 0;
          v122 = (32 * v108) & 0x1FF8000;
          v123 = v84 + v122;
          v124 = v85 + v122;
          v116[1] = v121;
          v125 = v122 + v83;
          if (v115 >= -16384)
            v126 = v119;
          else
            v126 = 0;
          v116[2] = v126;
          v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOWORD(v127) = -1;
          v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047)
            LOWORD(v128) = -1;
          if (v125 > 33538047)
            v129 = -1;
          else
            v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 >= -16384)
            v130 = v127;
          else
            v130 = 0;
          v116[7] = -1;
          v93 = v124 < -16384;
          v131 = ((v76 >> 20) & 0x3FF) - 512;
          v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          v133 = (v80 >> 5) & 0x1FF8000;
          v134 = -6137 * v131 - 15338 * v132;
          v135 = 60804 * v131;
          v136 = 51603 * v132;
          if (v93)
            v137 = 0;
          else
            v137 = v128;
          v138 = v136 + v133;
          v93 = v125 < -16384;
          v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          v140 = v134 + v133;
          v116[5] = v137;
          v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          v142 = v135 + v133;
          if (v93)
            v129 = 0;
          v116[6] = v129;
          v143 = v139 / 0x3FF;
          if (v138 > 33538047)
            LOWORD(v143) = -1;
          v144 = v141 / 0x3FF;
          if (v140 > 33538047)
            LOWORD(v144) = -1;
          v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047)
            LOWORD(v145) = -1;
          if (v138 < -16384)
            LOWORD(v143) = 0;
          v75[8] = v143;
          if (v140 < -16384)
            LOWORD(v144) = 0;
          v146 = (v79 & 0x3FF) << 15;
          v147 = v146 + v136;
          v148 = v146 + v134;
          v75[9] = v144;
          v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          v150 = v146 + v135;
          if (v142 < -16384)
            LOWORD(v145) = 0;
          v75[11] = -1;
          v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047)
            LOWORD(v151) = -1;
          if (v148 > 33538047)
            LOWORD(v152) = -1;
          v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOWORD(v153) = -1;
          if (v147 >= -16384)
            v154 = v151;
          else
            v154 = 0;
          v75[12] = v154;
          v75[15] = -1;
          v155 = (v108 >> 5) & 0x1FF8000;
          v156 = v136 + v155;
          if (v148 < -16384)
            LOWORD(v152) = 0;
          v93 = v150 < -16384;
          v157 = v134 + v155;
          v75[13] = v152;
          v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          v159 = v135 + v155;
          if (v93)
            LOWORD(v153) = 0;
          v75[14] = v153;
          v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOWORD(v160) = -1;
          v161 = v158 / 0x3FF;
          if (v157 > 33538047)
            LOWORD(v161) = -1;
          v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047)
            LOWORD(v162) = -1;
          if (v156 >= -16384)
            v163 = v160;
          else
            v163 = 0;
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384)
            LOWORD(v161) = 0;
          v164 = (v109 & 0x3FF) << 15;
          v165 = v164 + v136;
          v166 = v164 + v134;
          v116[9] = v161;
          v167 = v164 + v135;
          if (v159 >= -16384)
            v168 = v162;
          else
            v168 = 0;
          v116[10] = v168;
          v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOWORD(v169) = -1;
          v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v170) = -1;
          if (v167 > 33538047)
            v171 = -1;
          else
            v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 >= -16384)
            v172 = v169;
          else
            v172 = 0;
          v116[15] = -1;
          v93 = v166 < -16384;
          v173 = ((v77 >> 10) & 0x3FF) - 512;
          v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          v175 = (32 * v79) & 0x1FF8000;
          v176 = -15338 * v174 - 6137 * v173;
          v177 = 60804 * v173;
          v178 = 51603 * v174;
          if (v93)
            LOWORD(v170) = 0;
          v179 = v175 + v178;
          v93 = v167 < -16384;
          v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          v181 = v175 + v176;
          v116[13] = v170;
          v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          v183 = v175 + v177;
          if (v93)
            v171 = 0;
          v116[14] = v171;
          v184 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOWORD(v184) = -1;
          v185 = v182 / 0x3FF;
          if (v181 > 33538047)
            LOWORD(v185) = -1;
          v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047)
            LOWORD(v186) = -1;
          v93 = v179 < -16384;
          v187 = (v79 >> 5) & 0x1FF8000;
          v188 = v187 + v178;
          if (v93)
            LOWORD(v184) = 0;
          v93 = v181 < -16384;
          v189 = v187 + v176;
          v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          v191 = v187 + v177;
          if (v93)
            LOWORD(v185) = 0;
          v75[17] = v185;
          if (v183 >= -16384)
            v192 = v186;
          else
            v192 = 0;
          v75[18] = v192;
          v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v277;
          if (v188 > 33538047)
            LOWORD(v193) = -1;
          v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOWORD(v194) = -1;
          v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOWORD(v195) = -1;
          if (v188 < -16384)
            LOWORD(v193) = 0;
          v75[20] = v193;
          if (v189 < -16384)
            LOWORD(v194) = 0;
          v75[21] = v194;
          if (v191 < -16384)
            LOWORD(v195) = 0;
          v196 = (32 * v109) & 0x1FF8000;
          v197 = v196 + v178;
          v75[22] = v195;
          v198 = v196 + v176;
          v75[19] = -1;
          v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          v200 = v196 + v177;
          v75[23] = -1;
          v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOWORD(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOWORD(v202) = -1;
          v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v203) = -1;
          v204 = (v109 >> 5) & 0x1FF8000;
          v205 = v204 + v178;
          if (v197 < -16384)
            LOWORD(v201) = 0;
          v206 = v204 + v176;
          v116[16] = v201;
          v207 = v204 + v177;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v116[17] = v208;
          if (v200 < -16384)
            LOWORD(v203) = 0;
          v116[18] = v203;
          v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOWORD(v209) = -1;
          v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOWORD(v210) = -1;
          v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOWORD(v211) = -1;
          if (v205 >= -16384)
            v212 = v209;
          else
            v212 = 0;
          v116[20] = v212;
          if (v206 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v116[21] = v213;
          if (v207 >= -16384)
            v214 = v211;
          else
            v214 = 0;
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          v22 = v280 + 48;
        }
        while (v18 < v277);
        v215 = v262 & 0x3C;
        v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v218 = v263;
        v219 = v271;
        v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          v221 = *((unsigned __int8 *)&v281 + v218);
          v222 = *v33 >> v221;
          v223 = *((unsigned __int8 *)&v281 + v30);
          v224 = (v221 >> 2) & 0x3C;
          v225 = ((*v31 >> v223) & 0x3FF) - 512;
          v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2)
            v227 = 0;
          else
            v227 = v30 + 1;
          v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          v229 = *v226 >> v228;
          v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          v231 = v229 & 0x3FF;
          if (v227 == 2)
            v232 = 0;
          else
            v232 = v227 + 1;
          if ((v18 & 1) != 0)
            v30 = v232;
          v233 = (v222 & 0x3FF) << 15;
          v234 = v231 - 512;
          v235 = -6137 * v225 - 15338 * v234;
          v236 = 60804 * v225;
          v237 = 51603 * v234;
          v238 = 51603 * v234 + v233;
          if ((v18 & 1) != 0)
            v31 = v230;
          v239 = v235 + v233;
          v240 = v236 + v233;
          v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOWORD(v241) = -1;
          v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047)
            LOWORD(v242) = -1;
          if (v240 > 33538047)
            LOWORD(v243) = -1;
          if (v238 < -16384)
            LOWORD(v241) = 0;
          *v216 = v241;
          if (v239 >= -16384)
            v244 = v242;
          else
            v244 = 0;
          v216[3] = -1;
          v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          v246 = (v245 & 0x3FF) << 15;
          v247 = v246 + v237;
          v216[1] = v244;
          v248 = v246 + v235;
          if (v240 >= -16384)
            v249 = v243;
          else
            v249 = 0;
          v250 = v246 + v236;
          v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          if (v247 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          v254 = (4198405 * (unint64_t)v251) >> 32;
          v255 = v251 - v254;
          if (v248 > 33538047)
            LOWORD(v253) = -1;
          v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047)
            LOWORD(v256) = -1;
          if (v247 < -16384)
            LOWORD(v252) = 0;
          *v217 = v252;
          if (v248 >= -16384)
            v257 = v253;
          else
            v257 = 0;
          v217[1] = v257;
          if (v250 >= -16384)
            v258 = v256;
          else
            v258 = 0;
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      v22 = v267;
      v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      v17 = v276 + 1;
      v21 = v220 + v264;
      v27 = v219 + v264;
      v24 = v275 + 4 * v265;
      v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 *v58;
  __int16 v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  _WORD *v68;
  __int16 v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  char *v74;
  _WORD *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  __int16 v92;
  BOOL v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  __int16 v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  _WORD *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  __int16 v120;
  __int16 v121;
  int v122;
  int v123;
  int v124;
  int v125;
  __int16 v126;
  unsigned int v127;
  unsigned int v128;
  __int16 v129;
  __int16 v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  __int16 v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  __int16 v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  __int16 v163;
  int v164;
  int v165;
  int v166;
  int v167;
  __int16 v168;
  unsigned int v169;
  unsigned int v170;
  __int16 v171;
  __int16 v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  __int16 v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  __int16 v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  uint64_t v215;
  _WORD *v216;
  _WORD *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  _DWORD *v226;
  unsigned int v227;
  unint64_t v228;
  int v229;
  _DWORD *v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  __int16 v244;
  int v245;
  int v246;
  int v247;
  int v248;
  __int16 v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  unsigned int v255;
  unsigned int v256;
  __int16 v257;
  __int16 v258;
  unint64_t v260;
  _DWORD *v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  int v281;

  v281 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2])
    v11 = a6[2];
  else
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  if (v12 >= 2)
  {
    v17 = 0;
    v270 = v9 % 3;
    v263 = v16 % 3;
    v18 = 6 * (v9 / 6) - v9 + 6;
    v268 = v12 >> 1;
    v19 = *a8;
    v20 = *a8 * a6[5];
    v21 = *a7 + v20;
    v22 = 8 * a6[4];
    v23 = a4[1];
    v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v267 = v22;
    v265 = v23 >> 2;
    v264 = 2 * v19;
    v27 = *a7 + v19 + v20;
    v269 = v18;
    v260 = v11;
    v277 = v16;
    do
    {
      v28 = 0;
      v271 = v27;
      v272 = v21;
      v29 = v270;
      v30 = v270;
      v31 = (_DWORD *)v24;
      v273 = v26;
      v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        v34 = v33;
        v35 = *v33;
        v36 = *((unsigned __int8 *)&v281 + v29);
        v37 = *((unsigned __int8 *)&v281 + v30);
        v38 = ((*v31 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2)
          v40 = 0;
        else
          v40 = v30 + 1;
        v41 = *((unsigned __int8 *)&v281 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2)
          v46 = 0;
        else
          v46 = v40 + 1;
        if ((v28 & 1) != 0)
        {
          v31 = v44;
          v30 = v46;
        }
        v47 = (v42 & 0x3FF) << 15;
        v48 = -11276 * v38 - 23400 * (v45 - 512);
        v49 = 58065 * v38;
        v50 = 45941 * (v45 - 512);
        v51 = v50 + v47;
        v52 = v48 + v47;
        v53 = v49 + v47;
        v54 = v32;
        if (v51 > 33538047)
          v55 = -1;
        else
          v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047)
          v56 = -1;
        else
          v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047)
          v57 = -1;
        else
          v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384)
          v59 = v55;
        else
          v59 = 0;
        *v58 = v59;
        if (v52 >= -16384)
          v60 = v56;
        else
          v60 = 0;
        v61 = ((*v54 >> v36) & 0x3FF) << 15;
        v62 = v61 + v50;
        v58[1] = v60;
        v63 = v61 + v48;
        if (v53 < -16384)
          v57 = 0;
        v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2)
          v29 = 0;
        else
          ++v29;
        v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047)
          LOWORD(v65) = -1;
        v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047)
          LOWORD(v66) = -1;
        v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047)
          LOWORD(v67) = -1;
        v58[3] = -1;
        v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384)
          v69 = v65;
        else
          v69 = 0;
        *v68 = v69;
        if (v63 >= -16384)
          v70 = v66;
        else
          v70 = 0;
        v68[1] = v70;
        v71 = v36 >> 2;
        if (v64 >= -16384)
          v72 = v67;
        else
          v72 = 0;
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      v275 = v24;
      v276 = v17;
      if (v18 >= v16)
      {
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v219 = v271;
        v220 = v272;
        v218 = v263;
      }
      else
      {
        v73 = 0;
        v261 = v34;
        v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          v280 = v22;
          v74 = &v278[v73];
          v75 = (_WORD *)(v21 + v22);
          v76 = v31[v73 / 4];
          v77 = v31[v73 / 4 + 1];
          v78 = (v76 & 0x3FF) - 512;
          v80 = *(_DWORD *)&v279[v73];
          v79 = *(_DWORD *)&v279[v73 + 4];
          v81 = ((v76 >> 10) & 0x3FF) - 512;
          v82 = (v80 & 0x3FF) << 15;
          v83 = 58065 * v78;
          v84 = 45941 * v81;
          v85 = -11276 * v78 - 23400 * v81;
          v86 = v84 + v82;
          v87 = v85 + v82;
          v88 = v83 + v82;
          v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047)
            LOWORD(v89) = -1;
          v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047)
            LOWORD(v90) = -1;
          v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047)
            LOWORD(v91) = -1;
          if (v86 >= -16384)
            v92 = v89;
          else
            v92 = 0;
          *v75 = v92;
          v93 = v87 < -16384;
          v94 = (32 * v80) & 0x1FF8000;
          v95 = v84 + v94;
          if (v93)
            LOWORD(v90) = 0;
          v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          v97 = v85 + v94;
          v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          v99 = v83 + v94;
          if (v88 >= -16384)
            v100 = v91;
          else
            v100 = 0;
          v75[2] = v100;
          v101 = v96 / 0x3FF;
          v102 = (4198405 * (unint64_t)v98) >> 32;
          v103 = v98 - v102;
          if (v95 > 33538047)
            LOWORD(v101) = -1;
          v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047)
            LOWORD(v104) = -1;
          if (v99 > 33538047)
            v105 = -1;
          else
            v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v95 >= -16384)
            v106 = v101;
          else
            v106 = 0;
          v75[4] = v106;
          if (v97 >= -16384)
            v107 = v104;
          else
            v107 = 0;
          v93 = v99 < -16384;
          v108 = *(_DWORD *)v74;
          v109 = *((_DWORD *)v74 + 1);
          v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          v111 = v84 + v110;
          v75[5] = v107;
          v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          v113 = v85 + v110;
          v114 = v85 + v110 + 0x4000;
          if (v93)
            v105 = 0;
          v115 = v110 + v83;
          v75[6] = v105;
          v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          v117 = v112 / 0x3FF;
          v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047)
            LOWORD(v117) = -1;
          if (v113 > 33538047)
            LOWORD(v118) = -1;
          v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047)
            LOWORD(v119) = -1;
          if (v111 >= -16384)
            v120 = v117;
          else
            v120 = 0;
          *v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384)
            v121 = v118;
          else
            v121 = 0;
          v122 = (32 * v108) & 0x1FF8000;
          v123 = v84 + v122;
          v124 = v85 + v122;
          v116[1] = v121;
          v125 = v122 + v83;
          if (v115 >= -16384)
            v126 = v119;
          else
            v126 = 0;
          v116[2] = v126;
          v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047)
            LOWORD(v127) = -1;
          v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047)
            LOWORD(v128) = -1;
          if (v125 > 33538047)
            v129 = -1;
          else
            v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 >= -16384)
            v130 = v127;
          else
            v130 = 0;
          v116[7] = -1;
          v93 = v124 < -16384;
          v131 = ((v76 >> 20) & 0x3FF) - 512;
          v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          v133 = (v80 >> 5) & 0x1FF8000;
          v134 = -11276 * v131 - 23400 * v132;
          v135 = 58065 * v131;
          v136 = 45941 * v132;
          if (v93)
            v137 = 0;
          else
            v137 = v128;
          v138 = v136 + v133;
          v93 = v125 < -16384;
          v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          v140 = v134 + v133;
          v116[5] = v137;
          v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          v142 = v135 + v133;
          if (v93)
            v129 = 0;
          v116[6] = v129;
          v143 = v139 / 0x3FF;
          if (v138 > 33538047)
            LOWORD(v143) = -1;
          v144 = v141 / 0x3FF;
          if (v140 > 33538047)
            LOWORD(v144) = -1;
          v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047)
            LOWORD(v145) = -1;
          if (v138 < -16384)
            LOWORD(v143) = 0;
          v75[8] = v143;
          if (v140 < -16384)
            LOWORD(v144) = 0;
          v146 = (v79 & 0x3FF) << 15;
          v147 = v146 + v136;
          v148 = v146 + v134;
          v75[9] = v144;
          v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          v150 = v146 + v135;
          if (v142 < -16384)
            LOWORD(v145) = 0;
          v75[11] = -1;
          v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047)
            LOWORD(v151) = -1;
          if (v148 > 33538047)
            LOWORD(v152) = -1;
          v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047)
            LOWORD(v153) = -1;
          if (v147 >= -16384)
            v154 = v151;
          else
            v154 = 0;
          v75[12] = v154;
          v75[15] = -1;
          v155 = (v108 >> 5) & 0x1FF8000;
          v156 = v136 + v155;
          if (v148 < -16384)
            LOWORD(v152) = 0;
          v93 = v150 < -16384;
          v157 = v134 + v155;
          v75[13] = v152;
          v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          v159 = v135 + v155;
          if (v93)
            LOWORD(v153) = 0;
          v75[14] = v153;
          v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047)
            LOWORD(v160) = -1;
          v161 = v158 / 0x3FF;
          if (v157 > 33538047)
            LOWORD(v161) = -1;
          v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047)
            LOWORD(v162) = -1;
          if (v156 >= -16384)
            v163 = v160;
          else
            v163 = 0;
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384)
            LOWORD(v161) = 0;
          v164 = (v109 & 0x3FF) << 15;
          v165 = v164 + v136;
          v166 = v164 + v134;
          v116[9] = v161;
          v167 = v164 + v135;
          if (v159 >= -16384)
            v168 = v162;
          else
            v168 = 0;
          v116[10] = v168;
          v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047)
            LOWORD(v169) = -1;
          v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047)
            LOWORD(v170) = -1;
          if (v167 > 33538047)
            v171 = -1;
          else
            v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 >= -16384)
            v172 = v169;
          else
            v172 = 0;
          v116[15] = -1;
          v93 = v166 < -16384;
          v173 = ((v77 >> 10) & 0x3FF) - 512;
          v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          v175 = (32 * v79) & 0x1FF8000;
          v176 = -23400 * v174 - 11276 * v173;
          v177 = 58065 * v173;
          v178 = 45941 * v174;
          if (v93)
            LOWORD(v170) = 0;
          v179 = v175 + v178;
          v93 = v167 < -16384;
          v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          v181 = v175 + v176;
          v116[13] = v170;
          v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          v183 = v175 + v177;
          if (v93)
            v171 = 0;
          v116[14] = v171;
          v184 = v180 / 0x3FF;
          if (v179 > 33538047)
            LOWORD(v184) = -1;
          v185 = v182 / 0x3FF;
          if (v181 > 33538047)
            LOWORD(v185) = -1;
          v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047)
            LOWORD(v186) = -1;
          v93 = v179 < -16384;
          v187 = (v79 >> 5) & 0x1FF8000;
          v188 = v187 + v178;
          if (v93)
            LOWORD(v184) = 0;
          v93 = v181 < -16384;
          v189 = v187 + v176;
          v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          v191 = v187 + v177;
          if (v93)
            LOWORD(v185) = 0;
          v75[17] = v185;
          if (v183 >= -16384)
            v192 = v186;
          else
            v192 = 0;
          v75[18] = v192;
          v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          v16 = v277;
          if (v188 > 33538047)
            LOWORD(v193) = -1;
          v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047)
            LOWORD(v194) = -1;
          v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047)
            LOWORD(v195) = -1;
          if (v188 < -16384)
            LOWORD(v193) = 0;
          v75[20] = v193;
          if (v189 < -16384)
            LOWORD(v194) = 0;
          v75[21] = v194;
          if (v191 < -16384)
            LOWORD(v195) = 0;
          v196 = (32 * v109) & 0x1FF8000;
          v197 = v196 + v178;
          v75[22] = v195;
          v198 = v196 + v176;
          v75[19] = -1;
          v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          v200 = v196 + v177;
          v75[23] = -1;
          v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047)
            LOWORD(v201) = -1;
          v202 = v199 / 0x3FF;
          if (v198 > 33538047)
            LOWORD(v202) = -1;
          v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047)
            LOWORD(v203) = -1;
          v204 = (v109 >> 5) & 0x1FF8000;
          v205 = v204 + v178;
          if (v197 < -16384)
            LOWORD(v201) = 0;
          v206 = v204 + v176;
          v116[16] = v201;
          v207 = v204 + v177;
          if (v198 >= -16384)
            v208 = v202;
          else
            v208 = 0;
          v116[17] = v208;
          if (v200 < -16384)
            LOWORD(v203) = 0;
          v116[18] = v203;
          v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047)
            LOWORD(v209) = -1;
          v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047)
            LOWORD(v210) = -1;
          v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047)
            LOWORD(v211) = -1;
          if (v205 >= -16384)
            v212 = v209;
          else
            v212 = 0;
          v116[20] = v212;
          if (v206 >= -16384)
            v213 = v210;
          else
            v213 = 0;
          v116[21] = v213;
          if (v207 >= -16384)
            v214 = v211;
          else
            v214 = 0;
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          v22 = v280 + 48;
        }
        while (v18 < v277);
        v215 = v262 & 0x3C;
        v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v216 = (_WORD *)(v21 + v22);
        v217 = (_WORD *)(v27 + v22);
        v218 = v263;
        v219 = v271;
        v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          v221 = *((unsigned __int8 *)&v281 + v218);
          v222 = *v33 >> v221;
          v223 = *((unsigned __int8 *)&v281 + v30);
          v224 = (v221 >> 2) & 0x3C;
          v225 = ((*v31 >> v223) & 0x3FF) - 512;
          v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2)
            v227 = 0;
          else
            v227 = v30 + 1;
          v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          v229 = *v226 >> v228;
          v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          v231 = v229 & 0x3FF;
          if (v227 == 2)
            v232 = 0;
          else
            v232 = v227 + 1;
          if ((v18 & 1) != 0)
            v30 = v232;
          v233 = (v222 & 0x3FF) << 15;
          v234 = v231 - 512;
          v235 = -11276 * v225 - 23400 * v234;
          v236 = 58065 * v225;
          v237 = 45941 * v234;
          v238 = 45941 * v234 + v233;
          if ((v18 & 1) != 0)
            v31 = v230;
          v239 = v235 + v233;
          v240 = v236 + v233;
          v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047)
            LOWORD(v241) = -1;
          v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047)
            LOWORD(v242) = -1;
          if (v240 > 33538047)
            LOWORD(v243) = -1;
          if (v238 < -16384)
            LOWORD(v241) = 0;
          *v216 = v241;
          if (v239 >= -16384)
            v244 = v242;
          else
            v244 = 0;
          v216[3] = -1;
          v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          v246 = (v245 & 0x3FF) << 15;
          v247 = v246 + v237;
          v216[1] = v244;
          v248 = v246 + v235;
          if (v240 >= -16384)
            v249 = v243;
          else
            v249 = 0;
          v250 = v246 + v236;
          v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2)
            v218 = 0;
          else
            ++v218;
          if (v247 > 33538047)
            LOWORD(v252) = -1;
          v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          v254 = (4198405 * (unint64_t)v251) >> 32;
          v255 = v251 - v254;
          if (v248 > 33538047)
            LOWORD(v253) = -1;
          v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047)
            LOWORD(v256) = -1;
          if (v247 < -16384)
            LOWORD(v252) = 0;
          *v217 = v252;
          if (v248 >= -16384)
            v257 = v253;
          else
            v257 = 0;
          v217[1] = v257;
          if (v250 >= -16384)
            v258 = v256;
          else
            v258 = 0;
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      v22 = v267;
      v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      v17 = v276 + 1;
      v21 = v220 + v264;
      v27 = v219 + v264;
      v24 = v275 + 4 * v265;
      v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v58;
  double v59;
  double v60;
  double v62;
  double v63;
  int v67;
  float v69;
  double v70;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  double v84;
  float v85;
  double v89;
  double v90;
  double v93;
  _WORD *v94;
  _WORD *v95;
  float v96;
  unsigned int v99;
  unsigned int v100;
  double v104;
  double v107;
  double v108;
  double v109;
  double v110;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  unint64_t v134;
  int v135;
  _DWORD *v136;
  unsigned int v137;
  int v138;
  float v139;
  double v141;
  double v142;
  double v143;
  double v145;
  double v146;
  int v147;
  float v149;
  double v150;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;

  v164 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v160 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v159 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v158 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v156 = 2 * *a8;
    v157 = v21 >> 2;
    do
    {
      v161 = v24;
      v162 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v160;
      v37 = v160;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = *((unsigned __int8 *)&v164 + v36);
        v42 = (_WORD *)(v32 + v25);
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v164 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v164 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        _D6 = v56;
        v58 = (double)v55 * 1.4746;
        v59 = (double)v47 * -0.164553;
        v60 = (double)v55 * -0.571353;
        _S17 = _D6 + v58 * 0.000977517107;
        v62 = _D6 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v63 = (double)v47 * 1.8814;
        *(float *)&_D6 = _D6 + v63 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v40[2] = LOWORD(_D6);
        v40[3] = 15360;
        v67 = (*v38 >> v41) & 0x3FF;
        _S6 = v62;
        v34 = (_DWORD *)((char *)v38 + v45);
        *v40 = LOWORD(_S17);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v69 = (double)v67 * 0.000977517107;
        v70 = v69;
        __asm { FCVT            H6, S6 }
        _S16 = v70 + v58 * 0.000977517107;
        _S7 = v70 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = _H6;
        _S6 = v70 + v63 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        *v42 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v42[1] = LOWORD(_S7);
        v42[2] = LOWORD(_S6);
        v42[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v163 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v79 = v17;
      }
      else
      {
        v75 = 0;
        v76 = (char *)v39 + ((v41 >> 2) & 0x3C);
        v77 = (char *)v38 + ((v41 >> 2) & 0x3C);
        v78 = v25;
        v79 = v17;
        do
        {
          v81 = *(_DWORD *)&v76[v75];
          v80 = *(_DWORD *)&v76[v75 + 4];
          v83 = v35[v75 / 4];
          v82 = v35[v75 / 4 + 1];
          v84 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          v85 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D6 = v85;
          _D16 = v84 * 1.4746;
          _S17 = _D6 + v84 * 1.4746 * 0.000977517107;
          v89 = (double)(int)((v83 & 0x3FF) - 512);
          v90 = v89 * -0.164553;
          _D7 = v84 * -0.571353;
          _D20 = _D6 + v89 * -0.164553 * 0.000977517107 + _D7 * 0.000977517107;
          v93 = v89 * 1.8814;
          *(float *)&_D6 = _D6 + v93 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v94 = (_WORD *)(v31 + v78);
          v95 = (_WORD *)(v32 + v78);
          __asm { FCVT            H6, S6 }
          *v94 = LOWORD(_S17);
          v96 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v94[3] = 15360;
          _D17 = v96;
          v94[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v94[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v94[6] = LOWORD(_D6);
          v94[7] = 15360;
          *(float *)&_D6 = _D21;
          v100 = *(_DWORD *)&v77[v75];
          v99 = *(_DWORD *)&v77[v75 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v100 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          v94[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v94[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *v95 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          v95[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v95[2] = LOWORD(_D6);
          v95[3] = 15360;
          *(float *)&_D6 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          v104 = (double)(int)((v82 & 0x3FF) - 512);
          v95[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v104 * 1.4746;
          v107 = (double)(int)(((v83 >> 20) & 0x3FF) - 512);
          v95[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v104 * 1.4746 * 0.000977517107;
          v108 = v107 * -0.164553;
          v109 = v104 * -0.571353;
          v95[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v107 * -0.164553 * 0.000977517107 + v109 * 0.000977517107;
          v110 = v107 * 1.8814;
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v95[7] = 15360;
          v94[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v94[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v80 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v94[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[11] = 15360;
          *(float *)&_D7 = _D7 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v94[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v94[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v94[15] = 15360;
          *(float *)&_D21 = (double)(v99 & 0x3FF) * 0.000977517107;
          v95[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v95[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v95[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          v113 = ((v82 >> 20) & 0x3FF) - 512;
          v95[11] = 15360;
          *(float *)&_D7 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v95[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.4746;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v82 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.164553;
          v95[14] = LOWORD(_D6);
          _D6 = (double)v113 * -0.571353;
          *(float *)&_D16 = _D7 + v116 * -0.164553 * 0.000977517107 + _D6 * 0.000977517107;
          v119 = v116 * 1.8814;
          v95[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v94[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v94[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v115 * 0.000977517107;
          *(float *)&_D21 = _D17 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          v94[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v94[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v94[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          v94[19] = 15360;
          *(float *)&_D17 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[23] = 15360;
          v95[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v95[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[19] = 15360;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v95[21] = LOWORD(_D6);
          v95[22] = LOWORD(_D7);
          v95[23] = 15360;
          v79 += 6;
          v75 += 8;
          v78 += 48;
        }
        while (v79 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v75);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v75);
        v35 = (_DWORD *)((char *)v35 + v75);
        v123 = (_WORD *)(v32 + v78);
        v124 = (_WORD *)(v31 + v78);
      }
      v125 = v15 % 3;
      if (v79 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v164 + v125);
          v127 = (*v33 >> v126) & 0x3FF;
          v128 = (v126 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v128);
          v129 = *((unsigned __int8 *)&v164 + v37);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (v129 >> 2) & 0x3C;
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = (_DWORD *)((char *)v35 + v131);
          v134 = *((unsigned __int8 *)&v164 + v132);
          v135 = (*v133 >> v134) & 0x3FF;
          v136 = (_DWORD *)((char *)v133 + ((v134 >> 2) & 0x3C));
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          v138 = v135 - 512;
          if ((v79 & 1) != 0)
          {
            v37 = v137;
            v35 = v136;
          }
          v139 = (double)v127 * 0.000977517107;
          _D6 = v139;
          v141 = (double)v138 * 1.4746;
          v142 = (double)v130 * -0.164553;
          v143 = (double)v138 * -0.571353;
          _S17 = _D6 + v141 * 0.000977517107;
          v145 = _D6 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v146 = (double)v130 * 1.8814;
          *(float *)&_D6 = _D6 + v146 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v124[2] = LOWORD(_D6);
          v124[3] = 15360;
          v147 = (*v34 >> v126) & 0x3FF;
          _S6 = v145;
          v34 = (_DWORD *)((char *)v34 + v128);
          *v124 = LOWORD(_S17);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          v149 = (double)v147 * 0.000977517107;
          v150 = v149;
          __asm { FCVT            H6, S6 }
          _S16 = v150 + v141 * 0.000977517107;
          _S7 = v150 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = _H6;
          _S6 = v150 + v146 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *v123 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v123[1] = LOWORD(_S7);
          v123[2] = LOWORD(_S6);
          v123[3] = 15360;
          ++v79;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v79);
      }
      v27 += 4 * v158;
      v28 += v158;
      v16 = v162 + 1;
      v29 += v156;
      v24 = v161 + v156;
      v26 = v163 + 4 * v157;
    }
    while (v162 + 1 != v159);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v58;
  double v59;
  double v60;
  double v62;
  double v63;
  int v67;
  float v69;
  double v70;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  double v84;
  float v85;
  double v89;
  double v90;
  double v93;
  _WORD *v94;
  _WORD *v95;
  float v96;
  unsigned int v99;
  unsigned int v100;
  double v104;
  double v107;
  double v108;
  double v109;
  double v110;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  unint64_t v134;
  int v135;
  _DWORD *v136;
  unsigned int v137;
  int v138;
  float v139;
  double v141;
  double v142;
  double v143;
  double v145;
  double v146;
  int v147;
  float v149;
  double v150;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;

  v164 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v160 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v159 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v158 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v156 = 2 * *a8;
    v157 = v21 >> 2;
    do
    {
      v161 = v24;
      v162 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v160;
      v37 = v160;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = *((unsigned __int8 *)&v164 + v36);
        v42 = (_WORD *)(v32 + v25);
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v164 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v164 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        _D6 = v56;
        v58 = (double)v55 * 1.5748;
        v59 = (double)v47 * -0.187324;
        v60 = (double)v55 * -0.468124;
        _S17 = _D6 + v58 * 0.000977517107;
        v62 = _D6 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v63 = (double)v47 * 1.8556;
        *(float *)&_D6 = _D6 + v63 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v40[2] = LOWORD(_D6);
        v40[3] = 15360;
        v67 = (*v38 >> v41) & 0x3FF;
        _S6 = v62;
        v34 = (_DWORD *)((char *)v38 + v45);
        *v40 = LOWORD(_S17);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v69 = (double)v67 * 0.000977517107;
        v70 = v69;
        __asm { FCVT            H6, S6 }
        _S16 = v70 + v58 * 0.000977517107;
        _S7 = v70 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = _H6;
        _S6 = v70 + v63 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        *v42 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v42[1] = LOWORD(_S7);
        v42[2] = LOWORD(_S6);
        v42[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v163 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v79 = v17;
      }
      else
      {
        v75 = 0;
        v76 = (char *)v39 + ((v41 >> 2) & 0x3C);
        v77 = (char *)v38 + ((v41 >> 2) & 0x3C);
        v78 = v25;
        v79 = v17;
        do
        {
          v81 = *(_DWORD *)&v76[v75];
          v80 = *(_DWORD *)&v76[v75 + 4];
          v83 = v35[v75 / 4];
          v82 = v35[v75 / 4 + 1];
          v84 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          v85 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D6 = v85;
          _D16 = v84 * 1.5748;
          _S17 = _D6 + v84 * 1.5748 * 0.000977517107;
          v89 = (double)(int)((v83 & 0x3FF) - 512);
          v90 = v89 * -0.187324;
          _D7 = v84 * -0.468124;
          _D20 = _D6 + v89 * -0.187324 * 0.000977517107 + _D7 * 0.000977517107;
          v93 = v89 * 1.8556;
          *(float *)&_D6 = _D6 + v93 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v94 = (_WORD *)(v31 + v78);
          v95 = (_WORD *)(v32 + v78);
          __asm { FCVT            H6, S6 }
          *v94 = LOWORD(_S17);
          v96 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v94[3] = 15360;
          _D17 = v96;
          v94[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v94[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v94[6] = LOWORD(_D6);
          v94[7] = 15360;
          *(float *)&_D6 = _D21;
          v100 = *(_DWORD *)&v77[v75];
          v99 = *(_DWORD *)&v77[v75 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v100 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          v94[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v94[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *v95 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          v95[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v95[2] = LOWORD(_D6);
          v95[3] = 15360;
          *(float *)&_D6 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          v104 = (double)(int)((v82 & 0x3FF) - 512);
          v95[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v104 * 1.5748;
          v107 = (double)(int)(((v83 >> 20) & 0x3FF) - 512);
          v95[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v104 * 1.5748 * 0.000977517107;
          v108 = v107 * -0.187324;
          v109 = v104 * -0.468124;
          v95[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v107 * -0.187324 * 0.000977517107 + v109 * 0.000977517107;
          v110 = v107 * 1.8556;
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v95[7] = 15360;
          v94[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v94[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v80 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v94[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[11] = 15360;
          *(float *)&_D7 = _D7 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v94[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v94[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v94[15] = 15360;
          *(float *)&_D21 = (double)(v99 & 0x3FF) * 0.000977517107;
          v95[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v95[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v95[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          v113 = ((v82 >> 20) & 0x3FF) - 512;
          v95[11] = 15360;
          *(float *)&_D7 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v95[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.5748;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v82 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.187324;
          v95[14] = LOWORD(_D6);
          _D6 = (double)v113 * -0.468124;
          *(float *)&_D16 = _D7 + v116 * -0.187324 * 0.000977517107 + _D6 * 0.000977517107;
          v119 = v116 * 1.8556;
          v95[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v94[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v94[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v115 * 0.000977517107;
          *(float *)&_D21 = _D17 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          v94[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v94[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v94[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          v94[19] = 15360;
          *(float *)&_D17 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[23] = 15360;
          v95[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v95[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[19] = 15360;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v95[21] = LOWORD(_D6);
          v95[22] = LOWORD(_D7);
          v95[23] = 15360;
          v79 += 6;
          v75 += 8;
          v78 += 48;
        }
        while (v79 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v75);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v75);
        v35 = (_DWORD *)((char *)v35 + v75);
        v123 = (_WORD *)(v32 + v78);
        v124 = (_WORD *)(v31 + v78);
      }
      v125 = v15 % 3;
      if (v79 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v164 + v125);
          v127 = (*v33 >> v126) & 0x3FF;
          v128 = (v126 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v128);
          v129 = *((unsigned __int8 *)&v164 + v37);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (v129 >> 2) & 0x3C;
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = (_DWORD *)((char *)v35 + v131);
          v134 = *((unsigned __int8 *)&v164 + v132);
          v135 = (*v133 >> v134) & 0x3FF;
          v136 = (_DWORD *)((char *)v133 + ((v134 >> 2) & 0x3C));
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          v138 = v135 - 512;
          if ((v79 & 1) != 0)
          {
            v37 = v137;
            v35 = v136;
          }
          v139 = (double)v127 * 0.000977517107;
          _D6 = v139;
          v141 = (double)v138 * 1.5748;
          v142 = (double)v130 * -0.187324;
          v143 = (double)v138 * -0.468124;
          _S17 = _D6 + v141 * 0.000977517107;
          v145 = _D6 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v146 = (double)v130 * 1.8556;
          *(float *)&_D6 = _D6 + v146 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v124[2] = LOWORD(_D6);
          v124[3] = 15360;
          v147 = (*v34 >> v126) & 0x3FF;
          _S6 = v145;
          v34 = (_DWORD *)((char *)v34 + v128);
          *v124 = LOWORD(_S17);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          v149 = (double)v147 * 0.000977517107;
          v150 = v149;
          __asm { FCVT            H6, S6 }
          _S16 = v150 + v141 * 0.000977517107;
          _S7 = v150 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = _H6;
          _S6 = v150 + v146 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *v123 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v123[1] = LOWORD(_S7);
          v123[2] = LOWORD(_S6);
          v123[3] = 15360;
          ++v79;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v79);
      }
      v27 += 4 * v158;
      v28 += v158;
      v16 = v162 + 1;
      v29 += v156;
      v24 = v161 + v156;
      v26 = v163 + 4 * v157;
    }
    while (v162 + 1 != v159);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v58;
  double v59;
  double v60;
  double v62;
  double v63;
  int v67;
  float v69;
  double v70;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  double v84;
  float v85;
  double v89;
  double v90;
  double v93;
  _WORD *v94;
  _WORD *v95;
  float v96;
  unsigned int v99;
  unsigned int v100;
  double v104;
  double v107;
  double v108;
  double v109;
  double v110;
  int v113;
  double v115;
  double v116;
  double v117;
  double v119;
  _WORD *v123;
  _WORD *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  unint64_t v134;
  int v135;
  _DWORD *v136;
  unsigned int v137;
  int v138;
  float v139;
  double v141;
  double v142;
  double v143;
  double v145;
  double v146;
  int v147;
  float v149;
  double v150;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;

  v164 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  _CF = v11 >= v13;
  v15 = v11 - v13;
  if (!_CF)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v160 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v159 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 8 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v158 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v29 = *a7 + *a8 + v18;
    v156 = 2 * *a8;
    v157 = v21 >> 2;
    do
    {
      v161 = v24;
      v162 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v35 = (_DWORD *)v26;
      v36 = v160;
      v37 = v160;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = (_WORD *)(v31 + v25);
        v41 = *((unsigned __int8 *)&v164 + v36);
        v42 = (_WORD *)(v32 + v25);
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v164 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v164 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        _D6 = v56;
        v58 = (double)v55 * 1.402;
        v59 = (double)v47 * -0.344136;
        v60 = (double)v55 * -0.714136;
        _S17 = _D6 + v58 * 0.000977517107;
        v62 = _D6 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v63 = (double)v47 * 1.772;
        *(float *)&_D6 = _D6 + v63 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v40[2] = LOWORD(_D6);
        v40[3] = 15360;
        v67 = (*v38 >> v41) & 0x3FF;
        _S6 = v62;
        v34 = (_DWORD *)((char *)v38 + v45);
        *v40 = LOWORD(_S17);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v69 = (double)v67 * 0.000977517107;
        v70 = v69;
        __asm { FCVT            H6, S6 }
        _S16 = v70 + v58 * 0.000977517107;
        _S7 = v70 + v59 * 0.000977517107 + v60 * 0.000977517107;
        v40[1] = _H6;
        _S6 = v70 + v63 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        *v42 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v42[1] = LOWORD(_S7);
        v42[2] = LOWORD(_S6);
        v42[3] = 15360;
        ++v30;
        v32 += 8;
        v31 += 8;
      }
      while (v17 != v30);
      v163 = v26;
      if (v17 >= v15)
      {
        v123 = (_WORD *)(v32 + v25);
        v124 = (_WORD *)(v31 + v25);
        v79 = v17;
      }
      else
      {
        v75 = 0;
        v76 = (char *)v39 + ((v41 >> 2) & 0x3C);
        v77 = (char *)v38 + ((v41 >> 2) & 0x3C);
        v78 = v25;
        v79 = v17;
        do
        {
          v81 = *(_DWORD *)&v76[v75];
          v80 = *(_DWORD *)&v76[v75 + 4];
          v83 = v35[v75 / 4];
          v82 = v35[v75 / 4 + 1];
          v84 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          v85 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D6 = v85;
          _D16 = v84 * 1.402;
          _S17 = _D6 + v84 * 1.402 * 0.000977517107;
          v89 = (double)(int)((v83 & 0x3FF) - 512);
          v90 = v89 * -0.344136;
          _D7 = v84 * -0.714136;
          _D20 = _D6 + v89 * -0.344136 * 0.000977517107 + _D7 * 0.000977517107;
          v93 = v89 * 1.772;
          *(float *)&_D6 = _D6 + v93 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          v94 = (_WORD *)(v31 + v78);
          v95 = (_WORD *)(v32 + v78);
          __asm { FCVT            H6, S6 }
          *v94 = LOWORD(_S17);
          v96 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v94[3] = 15360;
          _D17 = v96;
          v94[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v94[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v94[6] = LOWORD(_D6);
          v94[7] = 15360;
          *(float *)&_D6 = _D21;
          v100 = *(_DWORD *)&v77[v75];
          v99 = *(_DWORD *)&v77[v75 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v100 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          v94[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v94[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *v95 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v90 * 0.000977517107 + _D7 * 0.000977517107;
          v95[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v93 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v95[2] = LOWORD(_D6);
          v95[3] = 15360;
          *(float *)&_D6 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          v104 = (double)(int)((v82 & 0x3FF) - 512);
          v95[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v104 * 1.402;
          v107 = (double)(int)(((v83 >> 20) & 0x3FF) - 512);
          v95[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v104 * 1.402 * 0.000977517107;
          v108 = v107 * -0.344136;
          v109 = v104 * -0.714136;
          v95[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v107 * -0.344136 * 0.000977517107 + v109 * 0.000977517107;
          v110 = v107 * 1.772;
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v95[7] = 15360;
          v94[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v94[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v80 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v94[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[11] = 15360;
          *(float *)&_D7 = _D7 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v94[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v94[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v108 * 0.000977517107 + v109 * 0.000977517107;
          v94[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v94[15] = 15360;
          *(float *)&_D21 = (double)(v99 & 0x3FF) * 0.000977517107;
          v95[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v95[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v108 * 0.000977517107 + v109 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v110 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v95[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          v113 = ((v82 >> 20) & 0x3FF) - 512;
          v95[11] = 15360;
          *(float *)&_D7 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v95[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          v115 = (double)v113 * 1.402;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v115 * 0.000977517107;
          v116 = (double)(int)(((v82 >> 10) & 0x3FF) - 512);
          v117 = v116 * -0.344136;
          v95[14] = LOWORD(_D6);
          _D6 = (double)v113 * -0.714136;
          *(float *)&_D16 = _D7 + v116 * -0.344136 * 0.000977517107 + _D6 * 0.000977517107;
          v119 = v116 * 1.772;
          v95[15] = 15360;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v94[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v94[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v115 * 0.000977517107;
          *(float *)&_D21 = _D17 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          v94[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v94[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v94[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          v94[19] = 15360;
          *(float *)&_D17 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v94[23] = 15360;
          v95[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v95[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v99 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[19] = 15360;
          *(float *)&_D16 = _D7 + v115 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v117 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v119 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v95[21] = LOWORD(_D6);
          v95[22] = LOWORD(_D7);
          v95[23] = 15360;
          v79 += 6;
          v75 += 8;
          v78 += 48;
        }
        while (v79 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v75);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v75);
        v35 = (_DWORD *)((char *)v35 + v75);
        v123 = (_WORD *)(v32 + v78);
        v124 = (_WORD *)(v31 + v78);
      }
      v125 = v15 % 3;
      if (v79 < v11)
      {
        do
        {
          v126 = *((unsigned __int8 *)&v164 + v125);
          v127 = (*v33 >> v126) & 0x3FF;
          v128 = (v126 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v128);
          v129 = *((unsigned __int8 *)&v164 + v37);
          v130 = ((*v35 >> v129) & 0x3FF) - 512;
          v131 = (v129 >> 2) & 0x3C;
          if (v37 == 2)
            v132 = 0;
          else
            v132 = v37 + 1;
          v133 = (_DWORD *)((char *)v35 + v131);
          v134 = *((unsigned __int8 *)&v164 + v132);
          v135 = (*v133 >> v134) & 0x3FF;
          v136 = (_DWORD *)((char *)v133 + ((v134 >> 2) & 0x3C));
          if (v132 == 2)
            v137 = 0;
          else
            v137 = v132 + 1;
          v138 = v135 - 512;
          if ((v79 & 1) != 0)
          {
            v37 = v137;
            v35 = v136;
          }
          v139 = (double)v127 * 0.000977517107;
          _D6 = v139;
          v141 = (double)v138 * 1.402;
          v142 = (double)v130 * -0.344136;
          v143 = (double)v138 * -0.714136;
          _S17 = _D6 + v141 * 0.000977517107;
          v145 = _D6 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v146 = (double)v130 * 1.772;
          *(float *)&_D6 = _D6 + v146 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v124[2] = LOWORD(_D6);
          v124[3] = 15360;
          v147 = (*v34 >> v126) & 0x3FF;
          _S6 = v145;
          v34 = (_DWORD *)((char *)v34 + v128);
          *v124 = LOWORD(_S17);
          if (v125 == 2)
            v125 = 0;
          else
            ++v125;
          v149 = (double)v147 * 0.000977517107;
          v150 = v149;
          __asm { FCVT            H6, S6 }
          _S16 = v150 + v141 * 0.000977517107;
          _S7 = v150 + v142 * 0.000977517107 + v143 * 0.000977517107;
          v124[1] = _H6;
          _S6 = v150 + v146 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *v123 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v123[1] = LOWORD(_S7);
          v123[2] = LOWORD(_S6);
          v123[3] = 15360;
          ++v79;
          v124 += 4;
          v123 += 4;
        }
        while (v11 != v79);
      }
      v27 += 4 * v158;
      v28 += v158;
      v16 = v162 + 1;
      v29 += v156;
      v24 = v161 + v156;
      v26 = v163 + 4 * v157;
    }
    while (v162 + 1 != v159);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  double v93;
  double v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  _DWORD *v107;
  int v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  _DWORD *v138;
  unint64_t v139;
  int v140;
  _DWORD *v141;
  unsigned int v142;
  int v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  float v152;
  int v153;
  float v154;
  float v155;
  double v156;
  float v157;
  float v158;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  int v169;

  v169 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v164 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v163 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 16 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v161 = v21 >> 2;
    v29 = *a7 + *a8 + v18;
    v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v166 = v24;
      v167 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v165 = v26;
      v35 = (_DWORD *)v26;
      v36 = v164;
      v37 = v164;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = v31 + v25;
        v41 = *((unsigned __int8 *)&v169 + v36);
        v42 = v32 + v25;
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v169 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v169 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        v57 = v56;
        v58 = (double)v55 * 1.4746;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v47 * -0.164553;
        v61 = (double)v55 * -0.571353;
        v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v63 = (double)v47 * 1.8814;
        *(float *)&v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        v64 = v59;
        v65 = (*v38 >> v41) & 0x3FF;
        v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v66 = (double)v65 * 0.000977517107;
        v67 = v62;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v40 = v64;
        *(float *)(v40 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v63 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      v168 = v28;
      if (v17 >= v15)
      {
        v128 = v32 + v25;
        v129 = v31 + v25;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v39 + (v44 & 0x3C);
        v73 = (char *)v38 + (v44 & 0x3C);
        v74 = v25;
        v75 = v17;
        do
        {
          v76 = (_DWORD *)(v31 + v74);
          v78 = v35[v71 / 4];
          v77 = v35[v71 / 4 + 1];
          v80 = *(_DWORD *)&v72[v71];
          v79 = *(_DWORD *)&v72[v71 + 4];
          v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          v83 = v82 * 1.4746;
          v84 = v81;
          v85 = v84 + v82 * 1.4746 * 0.000977517107;
          v86 = (double)(int)((v78 & 0x3FF) - 512);
          v87 = v86 * -0.164553;
          v88 = v82 * -0.571353;
          v89 = v84 + v86 * -0.164553 * 0.000977517107;
          v90 = v86 * 1.8814;
          v91 = v89 + v88 * 0.000977517107;
          v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v93 = v92;
          v94 = v93 + v83 * 0.000977517107;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          v99 = v98;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          v101 = *(float *)&v84;
          v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          v104 = v99 + v90 * 0.000977517107;
          v105 = v101 + v83 * 0.000977517107;
          v106 = v101 + v90 * 0.000977517107;
          v107 = (_DWORD *)(v32 + v74);
          *(float *)&v85 = v85;
          *(float *)&v90 = v91;
          v76[3] = 1065353216;
          *(float *)&v91 = v94;
          *(float *)&v94 = v97;
          v76[7] = 1065353216;
          *(float *)&v103 = v103;
          *(float *)&v97 = v100;
          *(float *)&v104 = v104;
          *(float *)&v105 = v105;
          *(float *)&v102 = v102;
          *(float *)&v106 = v106;
          *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          v108 = ((v78 >> 20) & 0x3FF) - 512;
          v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          v110 = *(float *)&v85;
          v111 = (double)v109 * 1.4746;
          v107[2] = LODWORD(v104);
          *(float *)&v91 = v110 + v111 * 0.000977517107;
          v112 = (double)v108 * -0.164553;
          v107[3] = 1065353216;
          v113 = (double)v109 * -0.571353;
          *(float *)&v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          v114 = (double)v108 * 1.8814;
          v107[6] = LODWORD(v106);
          *(float *)&v106 = v110 + v114 * 0.000977517107;
          *(float *)&v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&v110 = v115 + v111 * 0.000977517107;
          *(float *)&v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&v110 = v116 + v111 * 0.000977517107;
          *(float *)&v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          v117 = *(float *)&v115;
          *(float *)&v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          v119 = *(float *)&v116;
          v107[11] = 1065353216;
          v120 = (double)v118 * 1.4746;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&v113 = v119 + v120 * 0.000977517107;
          v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          v122 = v121 * -0.164553;
          v107[14] = LODWORD(v114);
          v123 = (double)v118 * -0.571353;
          *(float *)&v117 = v119 + v121 * -0.164553 * 0.000977517107 + v123 * 0.000977517107;
          v124 = v121 * 1.8814;
          v107[15] = 1065353216;
          *(float *)&v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          v125 = *(float *)&v117;
          *(float *)&v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          v126 = *(float *)&v119;
          *(float *)&v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          v127 = *(float *)&v126;
          *(float *)&v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v35 + v71);
        v128 = v32 + v74;
        v129 = v31 + v74;
      }
      v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v131 = *((unsigned __int8 *)&v169 + v130);
          v132 = (*v33 >> v131) & 0x3FF;
          v133 = (v131 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v133);
          v134 = *((unsigned __int8 *)&v169 + v37);
          v135 = ((*v35 >> v134) & 0x3FF) - 512;
          v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2)
            v137 = 0;
          else
            v137 = v37 + 1;
          v138 = (_DWORD *)((char *)v35 + v136);
          v139 = *((unsigned __int8 *)&v169 + v137);
          v140 = (*v138 >> v139) & 0x3FF;
          v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2)
            v142 = 0;
          else
            v142 = v137 + 1;
          v143 = v140 - 512;
          if ((v75 & 1) != 0)
          {
            v37 = v142;
            v35 = v141;
          }
          v144 = (double)v132 * 0.000977517107;
          v145 = v144;
          v146 = (double)v143 * 1.4746;
          v147 = v145 + v146 * 0.000977517107;
          v148 = (double)v135 * -0.164553;
          v149 = (double)v143 * -0.571353;
          v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          v151 = (double)v135 * 1.8814;
          *(float *)&v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          v152 = v147;
          v153 = (*v34 >> v131) & 0x3FF;
          v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          v154 = (double)v153 * 0.000977517107;
          v155 = v150;
          v156 = v154;
          v157 = v156 + v146 * 0.000977517107;
          *(float *)v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&v156 = v156 + v151 * 0.000977517107;
          *(float *)v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      v28 = &v168[v162];
      v16 = v167 + 1;
      v29 += v160;
      v24 = v166 + v160;
      v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  double v93;
  double v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  _DWORD *v107;
  int v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  _DWORD *v138;
  unint64_t v139;
  int v140;
  _DWORD *v141;
  unsigned int v142;
  int v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  float v152;
  int v153;
  float v154;
  float v155;
  double v156;
  float v157;
  float v158;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  int v169;

  v169 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v164 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v163 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 16 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v161 = v21 >> 2;
    v29 = *a7 + *a8 + v18;
    v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v166 = v24;
      v167 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v165 = v26;
      v35 = (_DWORD *)v26;
      v36 = v164;
      v37 = v164;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = v31 + v25;
        v41 = *((unsigned __int8 *)&v169 + v36);
        v42 = v32 + v25;
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v169 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v169 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        v57 = v56;
        v58 = (double)v55 * 1.5748;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v47 * -0.187324;
        v61 = (double)v55 * -0.468124;
        v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v63 = (double)v47 * 1.8556;
        *(float *)&v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        v64 = v59;
        v65 = (*v38 >> v41) & 0x3FF;
        v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v66 = (double)v65 * 0.000977517107;
        v67 = v62;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v40 = v64;
        *(float *)(v40 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v63 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      v168 = v28;
      if (v17 >= v15)
      {
        v128 = v32 + v25;
        v129 = v31 + v25;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v39 + (v44 & 0x3C);
        v73 = (char *)v38 + (v44 & 0x3C);
        v74 = v25;
        v75 = v17;
        do
        {
          v76 = (_DWORD *)(v31 + v74);
          v78 = v35[v71 / 4];
          v77 = v35[v71 / 4 + 1];
          v80 = *(_DWORD *)&v72[v71];
          v79 = *(_DWORD *)&v72[v71 + 4];
          v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          v83 = v82 * 1.5748;
          v84 = v81;
          v85 = v84 + v82 * 1.5748 * 0.000977517107;
          v86 = (double)(int)((v78 & 0x3FF) - 512);
          v87 = v86 * -0.187324;
          v88 = v82 * -0.468124;
          v89 = v84 + v86 * -0.187324 * 0.000977517107;
          v90 = v86 * 1.8556;
          v91 = v89 + v88 * 0.000977517107;
          v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v93 = v92;
          v94 = v93 + v83 * 0.000977517107;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          v99 = v98;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          v101 = *(float *)&v84;
          v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          v104 = v99 + v90 * 0.000977517107;
          v105 = v101 + v83 * 0.000977517107;
          v106 = v101 + v90 * 0.000977517107;
          v107 = (_DWORD *)(v32 + v74);
          *(float *)&v85 = v85;
          *(float *)&v90 = v91;
          v76[3] = 1065353216;
          *(float *)&v91 = v94;
          *(float *)&v94 = v97;
          v76[7] = 1065353216;
          *(float *)&v103 = v103;
          *(float *)&v97 = v100;
          *(float *)&v104 = v104;
          *(float *)&v105 = v105;
          *(float *)&v102 = v102;
          *(float *)&v106 = v106;
          *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          v108 = ((v78 >> 20) & 0x3FF) - 512;
          v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          v110 = *(float *)&v85;
          v111 = (double)v109 * 1.5748;
          v107[2] = LODWORD(v104);
          *(float *)&v91 = v110 + v111 * 0.000977517107;
          v112 = (double)v108 * -0.187324;
          v107[3] = 1065353216;
          v113 = (double)v109 * -0.468124;
          *(float *)&v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          v114 = (double)v108 * 1.8556;
          v107[6] = LODWORD(v106);
          *(float *)&v106 = v110 + v114 * 0.000977517107;
          *(float *)&v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&v110 = v115 + v111 * 0.000977517107;
          *(float *)&v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&v110 = v116 + v111 * 0.000977517107;
          *(float *)&v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          v117 = *(float *)&v115;
          *(float *)&v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          v119 = *(float *)&v116;
          v107[11] = 1065353216;
          v120 = (double)v118 * 1.5748;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&v113 = v119 + v120 * 0.000977517107;
          v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          v122 = v121 * -0.187324;
          v107[14] = LODWORD(v114);
          v123 = (double)v118 * -0.468124;
          *(float *)&v117 = v119 + v121 * -0.187324 * 0.000977517107 + v123 * 0.000977517107;
          v124 = v121 * 1.8556;
          v107[15] = 1065353216;
          *(float *)&v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          v125 = *(float *)&v117;
          *(float *)&v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          v126 = *(float *)&v119;
          *(float *)&v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          v127 = *(float *)&v126;
          *(float *)&v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v35 + v71);
        v128 = v32 + v74;
        v129 = v31 + v74;
      }
      v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v131 = *((unsigned __int8 *)&v169 + v130);
          v132 = (*v33 >> v131) & 0x3FF;
          v133 = (v131 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v133);
          v134 = *((unsigned __int8 *)&v169 + v37);
          v135 = ((*v35 >> v134) & 0x3FF) - 512;
          v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2)
            v137 = 0;
          else
            v137 = v37 + 1;
          v138 = (_DWORD *)((char *)v35 + v136);
          v139 = *((unsigned __int8 *)&v169 + v137);
          v140 = (*v138 >> v139) & 0x3FF;
          v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2)
            v142 = 0;
          else
            v142 = v137 + 1;
          v143 = v140 - 512;
          if ((v75 & 1) != 0)
          {
            v37 = v142;
            v35 = v141;
          }
          v144 = (double)v132 * 0.000977517107;
          v145 = v144;
          v146 = (double)v143 * 1.5748;
          v147 = v145 + v146 * 0.000977517107;
          v148 = (double)v135 * -0.187324;
          v149 = (double)v143 * -0.468124;
          v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          v151 = (double)v135 * 1.8556;
          *(float *)&v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          v152 = v147;
          v153 = (*v34 >> v131) & 0x3FF;
          v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          v154 = (double)v153 * 0.000977517107;
          v155 = v150;
          v156 = v154;
          v157 = v156 + v146 * 0.000977517107;
          *(float *)v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&v156 = v156 + v151 * 0.000977517107;
          *(float *)v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      v28 = &v168[v162];
      v16 = v167 + 1;
      v29 += v160;
      v24 = v166 + v160;
      v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  unint64_t v51;
  int v52;
  _DWORD *v53;
  unsigned int v54;
  int v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  int v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  double v93;
  double v94;
  unsigned int v95;
  unsigned int v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  _DWORD *v107;
  int v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  _DWORD *v138;
  unint64_t v139;
  int v140;
  _DWORD *v141;
  unsigned int v142;
  int v143;
  float v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  float v152;
  int v153;
  float v154;
  float v155;
  double v156;
  float v157;
  float v158;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  int v169;

  v169 = 1313280;
  v8 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = a6[2];
  if (v10 - v9 < v11)
    v11 = v10 - v9;
  v12 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3])
    v12 = a6[3];
  v13 = v10 % 6;
  v14 = v11 >= v13;
  v15 = v11 - v13;
  if (!v14)
    v15 = 0;
  if (v12 >= 2)
  {
    v16 = 0;
    v164 = v9 % 3;
    v17 = 6 * (v9 / 6) - v9 + 6;
    v163 = v12 >> 1;
    v18 = *a8 * a6[5];
    v20 = *a3;
    v19 = a3[1];
    v22 = *a4;
    v21 = a4[1];
    v24 = *a7 + v18;
    v25 = 16 * a6[4];
    v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    v28 = (_DWORD *)(v27 + v22);
    v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v161 = v21 >> 2;
    v29 = *a7 + *a8 + v18;
    v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v166 = v24;
      v167 = v16;
      v30 = 0;
      v31 = v24;
      v32 = v29;
      v33 = (_DWORD *)v27;
      v34 = v28;
      v165 = v26;
      v35 = (_DWORD *)v26;
      v36 = v164;
      v37 = v164;
      do
      {
        v38 = v34;
        v39 = v33;
        v40 = v31 + v25;
        v41 = *((unsigned __int8 *)&v169 + v36);
        v42 = v32 + v25;
        v43 = (*v33 >> v41) & 0x3FF;
        v44 = v41 >> 2;
        v45 = (v41 >> 2) & 0x3C;
        v33 = (_DWORD *)((char *)v33 + v45);
        v46 = *((unsigned __int8 *)&v169 + v37);
        v47 = ((*v35 >> v46) & 0x3FF) - 512;
        v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2)
          v49 = 0;
        else
          v49 = v37 + 1;
        v50 = (_DWORD *)((char *)v35 + v48);
        v51 = *((unsigned __int8 *)&v169 + v49);
        v52 = (*v50 >> v51) & 0x3FF;
        v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2)
          v54 = 0;
        else
          v54 = v49 + 1;
        v55 = v52 - 512;
        if ((v30 & 1) != 0)
        {
          v37 = v54;
          v35 = v53;
        }
        v56 = (double)v43 * 0.000977517107;
        v57 = v56;
        v58 = (double)v55 * 1.402;
        v59 = v57 + v58 * 0.000977517107;
        v60 = (double)v47 * -0.344136;
        v61 = (double)v55 * -0.714136;
        v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v63 = (double)v47 * 1.772;
        *(float *)&v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        v64 = v59;
        v65 = (*v38 >> v41) & 0x3FF;
        v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        v66 = (double)v65 * 0.000977517107;
        v67 = v62;
        v68 = v66;
        v69 = v68 + v58 * 0.000977517107;
        *(float *)v40 = v64;
        *(float *)(v40 + 4) = v67;
        v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&v68 = v68 + v63 * 0.000977517107;
        *(float *)v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      v168 = v28;
      if (v17 >= v15)
      {
        v128 = v32 + v25;
        v129 = v31 + v25;
        v75 = v17;
      }
      else
      {
        v71 = 0;
        v72 = (char *)v39 + (v44 & 0x3C);
        v73 = (char *)v38 + (v44 & 0x3C);
        v74 = v25;
        v75 = v17;
        do
        {
          v76 = (_DWORD *)(v31 + v74);
          v78 = v35[v71 / 4];
          v77 = v35[v71 / 4 + 1];
          v80 = *(_DWORD *)&v72[v71];
          v79 = *(_DWORD *)&v72[v71 + 4];
          v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          v83 = v82 * 1.402;
          v84 = v81;
          v85 = v84 + v82 * 1.402 * 0.000977517107;
          v86 = (double)(int)((v78 & 0x3FF) - 512);
          v87 = v86 * -0.344136;
          v88 = v82 * -0.714136;
          v89 = v84 + v86 * -0.344136 * 0.000977517107;
          v90 = v86 * 1.772;
          v91 = v89 + v88 * 0.000977517107;
          v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          v93 = v92;
          v94 = v93 + v83 * 0.000977517107;
          *(float *)&v84 = v84 + v90 * 0.000977517107;
          v96 = *(_DWORD *)&v73[v71];
          v95 = *(_DWORD *)&v73[v71 + 4];
          v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          v99 = v98;
          *(float *)&v93 = v93 + v90 * 0.000977517107;
          v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          v101 = *(float *)&v84;
          v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          v104 = v99 + v90 * 0.000977517107;
          v105 = v101 + v83 * 0.000977517107;
          v106 = v101 + v90 * 0.000977517107;
          v107 = (_DWORD *)(v32 + v74);
          *(float *)&v85 = v85;
          *(float *)&v90 = v91;
          v76[3] = 1065353216;
          *(float *)&v91 = v94;
          *(float *)&v94 = v97;
          v76[7] = 1065353216;
          *(float *)&v103 = v103;
          *(float *)&v97 = v100;
          *(float *)&v104 = v104;
          *(float *)&v105 = v105;
          *(float *)&v102 = v102;
          *(float *)&v106 = v106;
          *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          v108 = ((v78 >> 20) & 0x3FF) - 512;
          v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          v110 = *(float *)&v85;
          v111 = (double)v109 * 1.402;
          v107[2] = LODWORD(v104);
          *(float *)&v91 = v110 + v111 * 0.000977517107;
          v112 = (double)v108 * -0.344136;
          v107[3] = 1065353216;
          v113 = (double)v109 * -0.714136;
          *(float *)&v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          v114 = (double)v108 * 1.772;
          v107[6] = LODWORD(v106);
          *(float *)&v106 = v110 + v114 * 0.000977517107;
          *(float *)&v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&v110 = v115 + v111 * 0.000977517107;
          *(float *)&v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&v110 = v116 + v111 * 0.000977517107;
          *(float *)&v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          v117 = *(float *)&v115;
          *(float *)&v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          v119 = *(float *)&v116;
          v107[11] = 1065353216;
          v120 = (double)v118 * 1.402;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&v113 = v119 + v120 * 0.000977517107;
          v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          v122 = v121 * -0.344136;
          v107[14] = LODWORD(v114);
          v123 = (double)v118 * -0.714136;
          *(float *)&v117 = v119 + v121 * -0.344136 * 0.000977517107 + v123 * 0.000977517107;
          v124 = v121 * 1.772;
          v107[15] = 1065353216;
          *(float *)&v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          v125 = *(float *)&v117;
          *(float *)&v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          v126 = *(float *)&v119;
          *(float *)&v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          v127 = *(float *)&v126;
          *(float *)&v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        v35 = (_DWORD *)((char *)v35 + v71);
        v128 = v32 + v74;
        v129 = v31 + v74;
      }
      v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          v131 = *((unsigned __int8 *)&v169 + v130);
          v132 = (*v33 >> v131) & 0x3FF;
          v133 = (v131 >> 2) & 0x3C;
          v33 = (_DWORD *)((char *)v33 + v133);
          v134 = *((unsigned __int8 *)&v169 + v37);
          v135 = ((*v35 >> v134) & 0x3FF) - 512;
          v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2)
            v137 = 0;
          else
            v137 = v37 + 1;
          v138 = (_DWORD *)((char *)v35 + v136);
          v139 = *((unsigned __int8 *)&v169 + v137);
          v140 = (*v138 >> v139) & 0x3FF;
          v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2)
            v142 = 0;
          else
            v142 = v137 + 1;
          v143 = v140 - 512;
          if ((v75 & 1) != 0)
          {
            v37 = v142;
            v35 = v141;
          }
          v144 = (double)v132 * 0.000977517107;
          v145 = v144;
          v146 = (double)v143 * 1.402;
          v147 = v145 + v146 * 0.000977517107;
          v148 = (double)v135 * -0.344136;
          v149 = (double)v143 * -0.714136;
          v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          v151 = (double)v135 * 1.772;
          *(float *)&v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          v152 = v147;
          v153 = (*v34 >> v131) & 0x3FF;
          v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2)
            v130 = 0;
          else
            ++v130;
          v154 = (double)v153 * 0.000977517107;
          v155 = v150;
          v156 = v154;
          v157 = v156 + v146 * 0.000977517107;
          *(float *)v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&v156 = v156 + v151 * 0.000977517107;
          *(float *)v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      v28 = &v168[v162];
      v16 = v167 + 1;
      v29 += v160;
      v24 = v166 + v160;
      v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf44_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf44_w30r;
  *a11 = vt_VImage_Cleanup_xf44_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf44_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 4 * v16;
    v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = (_WORD *)(v14 + 2 * v19);
          v22 = (67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19) >> 6))) >> 36;
          v23 = (67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 6))) >> 36;
          v24 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v18 + 2 * i) >> 6))) >> 36;
          *v21 = -1;
          v21[1] = v24 + 4096;
          v21[2] = v22 + 4096;
          v21[3] = v23 + 4096;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_xf44_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 4 * v16;
    v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = (_BYTE *)(v14 + v19);
          v22 = (4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19) >> 6))) >> 32;
          v23 = (4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 6))) >> 32;
          v24 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v18 + 2 * i) >> 6))) >> 32;
          *v21 = -1;
          v21[1] = v24 + 16;
          v21[2] = v22 + 16;
          v21[3] = v23 + 16;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (unsigned __int16 *)(v19 + 2 * i);
          v24 = ((((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          v25 = (67174465 * (unint64_t)(56064 * (*v23 >> 6))) >> 36;
          v26 = (67174465 * (unint64_t)(56064 * (v23[1] >> 6))) >> 36;
          *v22 = ((((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v22[1] = v25 + 4096;
          v22[2] = v24;
          v22[3] = v26 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  __int16 *v29;
  int32x4_t v30;
  int32x4_t v31;

  v13 = *(_QWORD *)(a7 + 24);
  v14 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v15 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v16 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15)
    v16 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  if (v13 >= *(_QWORD *)(a11 + 24))
    v13 = *(_QWORD *)(a11 + 24);
  if (v13)
  {
    v17 = 0;
    v18 = *a13;
    v19 = *a9;
    v20 = a9[1];
    v21 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + 2 * v15;
    v22 = *(_QWORD *)(a7 + 40);
    v23 = a8[1] + v20 * v22 + 4 * v14;
    v24 = *a8 + *a9 * v22 + 2 * v14;
    v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (double *)v21;
        do
        {
          v29 = (__int16 *)(v23 + 4 * v27);
          a4.i16[0] = *v29;
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          a4.i16[2] = v29[1];
          v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v25));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *v28++ = *(double *)&a4;
          v27 += 2;
          v26 += 4;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = (unsigned __int16 *)(v19 + 2 * v21);
          v24 = (((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 6))) >> 32)
                             + 33) >> 1;
          v25 = (4198405 * (unint64_t)(219 * (*v23 >> 6))) >> 32;
          v26 = (4198405 * (unint64_t)(219 * (v23[1] >> 6))) >> 32;
          *v22 = (((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 6))) >> 32)
                              + 33) >> 1;
          v22[1] = v25 + 16;
          v22[2] = v24;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  uint64_t v26;
  unint64_t i;
  __int16 *v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;

  v13 = *(_QWORD *)(a7 + 24);
  v14 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v15 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v16 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15)
    v16 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  if (v13 >= *(_QWORD *)(a11 + 24))
    v13 = *(_QWORD *)(a11 + 24);
  if (v13)
  {
    v17 = 0;
    v18 = *a13;
    v19 = *a9;
    v20 = a9[1];
    v21 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + v15;
    v22 = *(_QWORD *)(a7 + 40);
    v23 = a8[1] + v20 * v22 + 4 * v14;
    v24 = *a8 + *a9 * v22 + 2 * v14;
    v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        v26 = 0;
        for (i = 0; i < v16; i += 2)
        {
          v28 = (__int16 *)(v23 + 4 * i);
          a4.i16[0] = *v28;
          a4.i16[2] = v28[1];
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v25));
          v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v21 + v26) = a4.i32[0];
          v26 += 4;
        }
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf44_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1] >> 6;
      v32 = v12 + 2;
      *v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v34)) >> 36) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32 >> 6;
        v38 = v32[1] >> 6;
        v32 += 2;
        *v33 = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
        v33[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 >> 6;
      v40 = v32[1] >> 6;
      *v33 = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
      v33[1] = (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1] >> 6;
        v43 = v12 + 2;
        *v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v45)) >> 36) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43 >> 6;
          v49 = v43[1] >> 6;
          v43 += 2;
          *v44 = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
          v44[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 >> 6;
        v51 = v43[1] >> 6;
        *v44 = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
        v44[1] = (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12 >> 6;
      v53 = v12[1] >> 6;
      v12 += 2;
      *v16 = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12 >> 6;
        v56 = v12[1] >> 6;
        v12 += 2;
        *v16 = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
      v16[1] = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1] >> 6;
      v31 = v13 + 2;
      *v17 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
      v17[1] = ((67174465 * (unint64_t)(57344 * v33)) >> 36) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31 >> 6;
        v37 = v31[1] >> 6;
        v31 += 2;
        *v32 = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
        v32[1] = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31 >> 6;
      v39 = v31[1] >> 6;
      *v32 = (((67174465 * (unint64_t)(57344 * v38)) >> 32) >> 4) + 4096;
      v32[1] = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1] >> 6;
        v42 = v13 + 2;
        *v17 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
        v17[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42 >> 6;
          v48 = v42[1] >> 6;
          v42 += 2;
          *v43 = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
          v43[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = (((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4) + 4096;
        v43[1] = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13 >> 6;
      v52 = v13[1] >> 6;
      v13 += 2;
      *v17 = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v17[1] = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13 >> 6;
        v55 = v13[1] >> 6;
        v13 += 2;
        *v17 = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
        v17[1] = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13 >> 6;
      v57 = v13[1] >> 6;
      *v17 = (((67174465 * (unint64_t)(57344 * v56)) >> 32) >> 4) + 4096;
      v17[1] = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 36;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v33 >> 6))) >> 36;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
        v32[1] = (67174465 * (unint64_t)(0xFFFF * (v37 >> 6))) >> 36;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = (67174465 * (unint64_t)(0xFFFF * (v38 >> 6))) >> 36;
      v32[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
        v17[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
          v43[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = (67174465 * (unint64_t)(0xFFFF * (v42[1] >> 6))) >> 36;
        *v43 = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        v43[1] = v50;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v52 >> 6))) >> 36;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
        v17[1] = (67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 36;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v57 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
           + 8193) >> 1;
      *v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((((67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v36[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v40 = ((((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v36[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((((67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (v44[3] >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          *v48 = ((((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (v44[2] >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v52 = v14[2] >> 6;
      v53 = v14[3] >> 6;
      v14 += 4;
      *v21 = ((((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v55 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 4;
      *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 36;
        *v40 = ((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 36) + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 4;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 36;
          *v48 = ((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 36) + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v14 += 4;
      *v21 = ((67174465 * (unint64_t)(57344 * v50)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *v53 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
           + 8193) >> 1;
      *v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((((67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v34[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v38 = ((((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v34[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((((67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (v42[3] >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          *v46 = ((((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (v42[2] >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v50 = v14[2] >> 6;
      v51 = v14[3] >> 6;
      v14 += 4;
      *v21 = ((((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *v53 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 4;
      *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 36;
        *v38 = ((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 36) + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 4;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 36;
          *v46 = ((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 36) + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v14 += 4;
      *v21 = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *v51 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
           + 1) >> 1;
      *v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((((67174465 * (unint64_t)(0xFFFF * (v34[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v34[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *v38 = ((((67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v34[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((((67174465 * (unint64_t)(0xFFFF * (v42[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(0xFFFF * (v42[3] >> 6))) >> 32) >> 4)
               + 1) >> 1;
          *v46 = ((((67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (v42[2] >> 6))) >> 32) >> 4)
                + 1) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = ((((67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v50 >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 32) >> 4)
              + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *v53 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  _WORD *v51;
  unsigned int v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1];
        *v38 = (67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 36;
        v38[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1];
          *v46 = (67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 36;
          v46[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1];
        *v51 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v51[1] = (67174465 * (unint64_t)(0xFFFF * (v52 >> 6))) >> 36;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  _WORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  _WORD *v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39 >> 6;
      v41 = v39[1] >> 6;
      v37 = v15 + 4;
      v42 = (((67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * (v15[3] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * v41)) >> 32) >> 4)
          + 16386;
      *v22 = ((((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v15[2] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4)
            + 16386) >> 2;
      v22[1] = v42 >> 2;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = (((67174465 * (unint64_t)(57344 * (*(v44 - 1) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32) >> 4)
            + 16386;
        v46 = &v38[v43];
        *v46 = ((((67174465 * (unint64_t)(57344 * (*(v44 - 2) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32) >> 4)
              + 16386) >> 2;
        v46[1] = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51 >> 6;
        v53 = v51[1] >> 6;
        v49 = v15 + 4;
        v54 = (((67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v15[3] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
            + 16386;
        *v22 = ((((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v15[2] >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4)
              + 16386) >> 2;
        v22[1] = v54 >> 2;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = (((67174465 * (unint64_t)(57344 * (*(v56 - 1) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v56[1] >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32) >> 4)
              + 16386;
          v58 = &v50[v55];
          *v58 = ((((67174465 * (unint64_t)(57344 * (*(v56 - 2) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*v56 >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32) >> 4)
                + 16386) >> 2;
          v58[1] = v57 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1] >> 6;
      v37 = v15 + 4;
      *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (67174465 * (unint64_t)(57344 * (v37[1] >> 6))) >> 36;
        *v41 = ((67174465 * (unint64_t)(57344 * (*v37 >> 6))) >> 36) + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1] >> 6;
        v46 = v15 + 4;
        *v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (67174465 * (unint64_t)(57344 * (v46[1] >> 6))) >> 36;
          *v50 = ((67174465 * (unint64_t)(57344 * (*v46 >> 6))) >> 36) + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned int v46;
  _WORD *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  _WORD *v60;
  uint64_t v62;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v62 = a8[1];
  v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - v10;
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v13 - v12;
  v25 = v19 - v18;
  if (v24 < v19 - v18)
    v25 = v24;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 36;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1))
    v34 = v8 & 1;
  else
    v34 = 0;
  v9 = v9;
  if (v22 >= (v9 & 1u))
    v35 = v9 & 1;
  else
    v35 = 0;
  v36 = v22 - v35;
  if ((v8 & 1) != 0)
  {
    v37 = v34;
    if ((v9 & 1) != 0)
    {
      v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v41 = *v40;
      v42 = v40[1];
      v38 = v15 + 4;
      v43 = (((67174465 * (unint64_t)(0xFFFF * (v15[1] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (v15[3] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 32) >> 4)
          + 2;
      *v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v15[2] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v41 >> 6))) >> 32) >> 4)
            + 2) >> 2;
      v21[1] = v43 >> 2;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v35)
    {
      v44 = 0;
      v45 = v38 + 2;
      do
      {
        v46 = (((67174465 * (unint64_t)(0xFFFF * (*(v45 - 1) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32) >> 4)
            + 2;
        v47 = &v39[v44];
        *v47 = ((((67174465 * (unint64_t)(0xFFFF * (*(v45 - 2) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32) >> 4)
              + 2) >> 2;
        v47[1] = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v21 = (_WORD *)((char *)v21 + v62);
    v34 = v37;
  }
  if (v25 != v34)
  {
    v48 = 0;
    v49 = v25 - v34;
    do
    {
      v50 = v15;
      v51 = v21;
      v52 = v9;
      if ((v9 & 1) != 0)
      {
        v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v54 = *v53;
        v55 = v53[1];
        v50 = v15 + 4;
        v56 = (((67174465 * (unint64_t)(0xFFFF * (v15[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v15[3] >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 32) >> 4)
            + 2;
        *v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v15[2] >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 32) >> 4)
              + 2) >> 2;
        v21[1] = v56 >> 2;
        v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        v57 = 0;
        v58 = v50 + 2;
        do
        {
          v59 = (((67174465 * (unint64_t)(0xFFFF * (*(v58 - 1) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v58[1] >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 6))) >> 32) >> 4)
              + 2;
          v60 = &v51[v57];
          *v60 = ((((67174465 * (unint64_t)(0xFFFF * (*(v58 - 2) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (*v58 >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14) >> 6))) >> 32) >> 4)
                + 2) >> 2;
          v60[1] = v59 >> 2;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  _WORD *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  unint64_t v49;
  _WORD *v50;
  unsigned int v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = v37[1];
        *v41 = (67174465 * (unint64_t)(0xFFFF * (*v37 >> 6))) >> 36;
        v41[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1];
          *v50 = (67174465 * (unint64_t)(0xFFFF * (*v46 >> 6))) >> 36;
          v50[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf44_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1] >> 6;
      v32 = v12 + 2;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v34)) >> 32) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32 >> 6;
        v38 = v32[1] >> 6;
        v32 += 2;
        *v33 = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 >> 6;
      v40 = v32[1] >> 6;
      *v33 = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1] >> 6;
        v43 = v12 + 2;
        *v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v45)) >> 32) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43 >> 6;
          v49 = v43[1] >> 6;
          v43 += 2;
          *v44 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v44[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 >> 6;
        v51 = v43[1] >> 6;
        *v44 = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        v44[1] = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12 >> 6;
      v53 = v12[1] >> 6;
      v12 += 2;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12 >> 6;
        v56 = v12[1] >> 6;
        v12 += 2;
        *v16 = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1] >> 6;
      v31 = v13 + 2;
      *v17 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v33)) >> 32) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31 >> 6;
        v37 = v31[1] >> 6;
        v31 += 2;
        *v32 = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
        v32[1] = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31 >> 6;
      v39 = v31[1] >> 6;
      *v32 = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v32[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1] >> 6;
        v42 = v13 + 2;
        *v17 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
        v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42 >> 6;
          v48 = v42[1] >> 6;
          v42 += 2;
          *v43 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
          v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13 >> 6;
      v52 = v13[1] >> 6;
      v13 += 2;
      *v17 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13 >> 6;
        v55 = v13[1] >> 6;
        v13 += 2;
        *v17 = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13 >> 6;
      v57 = v13[1] >> 6;
      *v17 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v33 >> 6))) >> 32);
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
        v32[1] = 16 * ((4198405 * (unint64_t)(4095 * (v37 >> 6))) >> 32);
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = 16 * ((4198405 * (unint64_t)(4095 * (v38 >> 6))) >> 32);
      v32[1] = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
        v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
          v43[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v43[1] = 16 * ((4198405 * (unint64_t)(4095 * (v50 >> 6))) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * ((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32);
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
        v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * ((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
      *v21 = (8
            * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((4198405 * (unint64_t)(3584 * (v36[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32);
        *v40 = (8
              * (((4198405 * (unint64_t)(3584 * (v36[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *v21 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((4198405 * (unint64_t)(3584 * (v44[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32);
          *v48 = (8
                * (((4198405 * (unint64_t)(3584 * (v44[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v52 = v14[2] >> 6;
      v53 = v14[3] >> 6;
      v14 += 4;
      *v21 = (8
            * (((4198405 * (unint64_t)(3584 * v52)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v50)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(3584 * v53)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v51)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *v55 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 4;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32;
        *v40 = 16 * ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 4;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32;
          *v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v14 += 4;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *v53 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
      *v21 = (8
            * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((4198405 * (unint64_t)(3584 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32);
        *v38 = (8
              * (((4198405 * (unint64_t)(3584 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *v21 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((4198405 * (unint64_t)(3584 * (v42[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32);
          *v46 = (8
                * (((4198405 * (unint64_t)(3584 * (v42[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v50 = v14[2] >> 6;
      v51 = v14[3] >> 6;
      v14 += 4;
      *v21 = (8
            * (((4198405 * (unint64_t)(3584 * v50)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v48)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(3584 * v51)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v49)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *v53 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 4;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32;
        *v38 = 16 * ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 4;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32;
          *v46 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v14 += 4;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *v51 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  _WORD *v54;
  int v55;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
      v37 = 4095 * (v14[3] >> 6);
      *v21 = (8
            * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8 * (((4198405 * (unint64_t)v37) >> 32) + v36) + 8) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v35[v38];
        v40 = ((4198405 * (unint64_t)(4095 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32);
        *v39 = (8
              * (((4198405 * (unint64_t)(4095 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v39[1] = (8 * v40 + 8) & 0xFFF0;
        v38 += 2;
        v34 += 4;
      }
      while (v38 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v9 - v31;
    do
    {
      v43 = v14;
      v44 = v21;
      if ((v32 & 1) != 0)
      {
        v43 = v14 + 4;
        v45 = ((4198405 * (unint64_t)(4095 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32);
        *v21 = (8
              * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8 * v45 + 8) & 0xFFF0;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = ((4198405 * (unint64_t)(4095 * (v43[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (v43[1] >> 6))) >> 32);
          *v47 = (8
                * (((4198405 * (unint64_t)(4095 * (v43[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*v43 >> 6))) >> 32))
                + 8) & 0xFFF0;
          v47[1] = (8 * v48 + 8) & 0xFFF0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v51 = v14[2];
      v52 = v14[3];
      v14 += 4;
      *v21 = (8
            * (((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v50 >> 6))) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v53 = 0;
      do
      {
        v54 = &v21[v53];
        v55 = ((4198405 * (unint64_t)(4095 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32);
        *v54 = (8
              * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v54[1] = (8 * v55 + 8) & 0xFFF0;
        v53 += 2;
        v14 += 4;
      }
      while (v53 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32;
        *v38 = 16 * ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (4198405 * (unint64_t)(4095 * (v42[1] >> 6))) >> 32;
          *v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v42 >> 6))) >> 32);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
        *v51 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  int v45;
  _WORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  int v57;
  _WORD *v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39 >> 6;
      v41 = v39[1] >> 6;
      v37 = v15 + 4;
      v42 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * v41)) >> 32);
      *v22 = (4
            * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * v40)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32);
        v46 = &v38[v43];
        *v46 = (4
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*(v44 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v46[1] = (4 * v45 + 4104) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51 >> 6;
        v53 = v51[1] >> 6;
        v49 = v15 + 4;
        v54 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * v53)) >> 32);
        *v22 = (4
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * v52)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v54 + 4104) & 0xFFF0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32);
          v58 = &v50[v55];
          *v58 = (4
                * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*(v56 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v58[1] = (4 * v57 + 4104) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1] >> 6;
      v37 = v15 + 4;
      *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (4198405 * (unint64_t)(3584 * (v37[1] >> 6))) >> 32;
        *v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v37 >> 6))) >> 32) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1] >> 6;
        v46 = v15 + 4;
        *v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (4198405 * (unint64_t)(3584 * (v46[1] >> 6))) >> 32;
          *v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v46 >> 6))) >> 32) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  int v46;
  _WORD *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  int v59;
  _WORD *v60;
  uint64_t v62;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v62 = a8[1];
  v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - v10;
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v13 - v12;
  v25 = v19 - v18;
  if (v24 < v19 - v18)
    v25 = v24;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a8;
    v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v29 + v30;
    v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1))
    v34 = v8 & 1;
  else
    v34 = 0;
  v9 = v9;
  if (v22 >= (v9 & 1u))
    v35 = v9 & 1;
  else
    v35 = 0;
  v36 = v22 - v35;
  if ((v8 & 1) != 0)
  {
    v37 = v34;
    if ((v9 & 1) != 0)
    {
      v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v41 = *v40;
      v42 = v40[1];
      v38 = v15 + 4;
      v43 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(4095 * (v15[3] >> 6))) >> 32);
      *v21 = (4
            * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v41 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (4 * (v43 + ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32)) + 8) & 0xFFF0;
      v39 = v21 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v21;
    }
    if (v22 != v35)
    {
      v44 = 0;
      v45 = v38 + 2;
      do
      {
        v46 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (*(v45 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v45[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32);
        v47 = &v39[v44];
        *v47 = (4
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*(v45 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32))
              + 8) & 0xFFF0;
        v47[1] = (4 * v46 + 8) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v21 = (_WORD *)((char *)v21 + v62);
    v34 = v37;
  }
  if (v25 != v34)
  {
    v48 = 0;
    v49 = v25 - v34;
    do
    {
      v50 = v15;
      v51 = v21;
      v52 = v9;
      if ((v9 & 1) != 0)
      {
        v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v54 = *v53;
        v55 = v53[1];
        v50 = v15 + 4;
        v56 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
        *v21 = (4
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (4 * v56 + 8) & 0xFFF0;
        v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        v57 = 0;
        v58 = v50 + 2;
        do
        {
          v59 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (*(v58 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (v58[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 6))) >> 32);
          v60 = &v51[v57];
          *v60 = (4
                * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*(v58 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*v58 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14) >> 6))) >> 32))
                + 8) & 0xFFF0;
          v60[1] = (4 * v59 + 8) & 0xFFF0;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (4198405 * (unint64_t)(4095 * (v37[1] >> 6))) >> 32;
        *v41 = 16 * ((4198405 * (unint64_t)(4095 * (*v37 >> 6))) >> 32);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (4198405 * (unint64_t)(4095 * (v46[1] >> 6))) >> 32;
          *v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v46 >> 6))) >> 32);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf44_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1] >> 6;
      v32 = v12 + 2;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32 >> 6;
        v38 = v32[1] >> 6;
        v32 += 2;
        *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 >> 6;
      v40 = v32[1] >> 6;
      *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1] >> 6;
        v43 = v12 + 2;
        *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43 >> 6;
          v49 = v43[1] >> 6;
          v43 += 2;
          *v44 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v44[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 >> 6;
        v51 = v43[1] >> 6;
        *v44 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        v44[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12 >> 6;
      v53 = v12[1] >> 6;
      v12 += 2;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12 >> 6;
        v56 = v12[1] >> 6;
        v12 += 2;
        *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1] >> 6;
      v31 = v13 + 2;
      *v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31 >> 6;
        v37 = v31[1] >> 6;
        v31 += 2;
        *v32 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
        v32[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31 >> 6;
      v39 = v31[1] >> 6;
      *v32 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v32[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1] >> 6;
        v42 = v13 + 2;
        *v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42 >> 6;
          v48 = v42[1] >> 6;
          v42 += 2;
          *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
          v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13 >> 6;
      v52 = v13[1] >> 6;
      v13 += 2;
      *v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13 >> 6;
        v55 = v13[1] >> 6;
        v13 += 2;
        *v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13 >> 6;
      v57 = v13[1] >> 6;
      *v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
      *v21 = (32
            * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((4198405 * (unint64_t)(896 * (v36[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32);
        *v40 = (32
              * (((4198405 * (unint64_t)(896 * (v36[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *v21 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((4198405 * (unint64_t)(896 * (v44[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32);
          *v48 = (32
                * (((4198405 * (unint64_t)(896 * (v44[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v52 = v14[2] >> 6;
      v53 = v14[3] >> 6;
      v14 += 4;
      *v21 = (32
            * (((4198405 * (unint64_t)(896 * v52)) >> 32)
             + ((4198405 * (unint64_t)(896 * v50)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((4198405 * (unint64_t)(896 * v53)) >> 32)
               + ((4198405 * (unint64_t)(896 * v51)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *v55 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 4;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32;
        *v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32) << 6) + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 4;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32;
          *v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 >> 6;
      v51 = v14[1] >> 6;
      v14 += 4;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *v53 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
      *v21 = (32
            * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((4198405 * (unint64_t)(896 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32);
        *v38 = (32
              * (((4198405 * (unint64_t)(896 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *v21 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((4198405 * (unint64_t)(896 * (v42[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32);
          *v46 = (32
                * (((4198405 * (unint64_t)(896 * (v42[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v50 = v14[2] >> 6;
      v51 = v14[3] >> 6;
      v14 += 4;
      *v21 = (32
            * (((4198405 * (unint64_t)(896 * v50)) >> 32)
             + ((4198405 * (unint64_t)(896 * v48)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((4198405 * (unint64_t)(896 * v51)) >> 32)
               + ((4198405 * (unint64_t)(896 * v49)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *v53 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 4;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32;
        *v38 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32) << 6) + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 4;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32;
          *v46 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v14 += 4;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *v51 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  int v32;
  unint64_t v33;
  _WORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  _WORD *v49;
  int v50;
  unint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v53 = v21;
    v54 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v53;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v54;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 4;
      v32 = (v13[3] >> 6) + (v13[1] >> 6);
      *v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * v32 + 32) & 0xFFC0;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = ((unsigned __int16)v30[3] >> 6) + ((unsigned __int16)v30[1] >> 6);
        *v34 = (32 * ((v30[2] >> 6) + (*v30 >> 6)) + 32) & 0xFFC0;
        v34[1] = (32 * v35 + 32) & 0xFFC0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v38 = v13 + 4;
        v40 = (v13[3] >> 6) + (v13[1] >> 6);
        *v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v18[1] = (32 * v40 + 32) & 0xFFC0;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
          *v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
          v42[1] = (32 * v43 + 32) & 0xFFC0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13;
      v45 = v13[1];
      v46 = v13[2] >> 6;
      v47 = v13[3] >> 6;
      v13 += 4;
      *v18 = (32 * (v46 + (v44 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * (v47 + (v45 >> 6)) + 32) & 0xFFC0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v48 = 0;
      do
      {
        v49 = &v18[v48];
        v50 = (v13[3] >> 6) + (v13[1] >> 6);
        *v49 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v49[1] = (32 * v50 + 32) & 0xFFC0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  _WORD *v34;
  __int16 v35;
  unint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v51 = v21;
    v52 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v52;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13[1] & 0xFFC0;
      v30 = v13 + 4;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v32;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = v30[1] & 0xFFC0;
        *v34 = *v30 & 0xFFC0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v40 = v13[1] & 0xFFC0;
        v38 = v13 + 4;
        *v18 = *v13 & 0xFFC0;
        v18[1] = v40;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = v38[1] & 0xFFC0;
          *v42 = *v38 & 0xFFC0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13 & 0xFFC0;
      v45 = v13[1] & 0xFFC0;
      v13 += 4;
      *v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v46 = 0;
      do
      {
        v47 = &v18[v46];
        v48 = v13[1] & 0xFFC0;
        *v47 = *v13 & 0xFFC0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  int v45;
  _WORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  int v57;
  _WORD *v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39 >> 6;
      v41 = v39[1] >> 6;
      v37 = v15 + 4;
      v42 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * v41)) >> 32);
      *v22 = (16
            * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * v40)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32);
        v46 = &v38[v43];
        *v46 = (16
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*(v44 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v46[1] = (16 * v45 + 4128) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51 >> 6;
        v53 = v51[1] >> 6;
        v49 = v15 + 4;
        v54 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * v53)) >> 32);
        *v22 = (16
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * v52)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v54 + 4128) & 0xFFC0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32);
          v58 = &v50[v55];
          *v58 = (16
                * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*(v56 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v58[1] = (16 * v57 + 4128) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1] >> 6;
      v37 = v15 + 4;
      *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (4198405 * (unint64_t)(896 * (v37[1] >> 6))) >> 32;
        *v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v37 >> 6))) >> 32) << 6) + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1] >> 6;
        v46 = v15 + 4;
        *v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (4198405 * (unint64_t)(896 * (v46[1] >> 6))) >> 32;
          *v50 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v46 >> 6))) >> 32) << 6) + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  _WORD *v47;
  _WORD *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  _WORD *v55;
  int v56;
  unint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v59 = v25;
    v60 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v59;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v60;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = (_WORD *)((char *)v16 + v15 + 4);
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v39 >> 6);
      *v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v38 >> 6)) + 32) & 0xFFC0;
      v22[1] = (16 * v40 + 32) & 0xFFC0;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v41 = 0;
      v42 = v35 + 2;
      do
      {
        v43 = &v36[v41];
        v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v42 - 1) >> 6)
            + ((unsigned __int16)v42[1] >> 6)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 6);
        *v43 = (16
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 6)
               + (*(v42 - 2) >> 6)
               + (*v42 >> 6)
               + (*(_WORD *)((char *)v42 + v15) >> 6))
              + 32) & 0xFFC0;
        v43[1] = (16 * v44 + 32) & 0xFFC0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v45 = 0;
    v46 = v25 - v33;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = (_WORD *)((char *)v16 + v15 + 4);
        v50 = *v49;
        v51 = v49[1];
        v47 = v16 + 4;
        v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v51 >> 6);
        *v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
        v22[1] = (16 * v52 + 32) & 0xFFC0;
        v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        v53 = 0;
        v54 = v47 + 2;
        do
        {
          v55 = &v48[v53];
          v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v54 - 1) >> 6)
              + ((unsigned __int16)v54[1] >> 6)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 6);
          *v55 = (16
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 6)
                 + (*(v54 - 2) >> 6)
                 + (*v54 >> 6)
                 + (*(_WORD *)((char *)v54 + v15) >> 6))
                + 32) & 0xFFC0;
          v55[1] = (16 * v56 + 32) & 0xFFC0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  __int16 v37;
  unint64_t v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v51 = v25;
    v52 = a4[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v52;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v16[1] & 0xFFC0;
      v35 = v16 + 4;
      *v22 = *v16 & 0xFFC0;
      v22[1] = v37;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = v35[1] & 0xFFC0;
        *v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v41 = 0;
    v42 = v25 - v33;
    do
    {
      v43 = v16;
      v44 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16[1] & 0xFFC0;
        v43 = v16 + 4;
        *v22 = *v16 & 0xFFC0;
        v22[1] = v45;
        v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1] & 0xFFC0;
          *v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_Copy_xf44_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = v21 + v15;
    v25 = v22 + v15;
    v26 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v24 + i) = -1;
          *(_BYTE *)(v25 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v28 = v8 & 1;
  if (v11 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v9 & 1;
  if (v10 >= v31)
    v32 = v9 & 1;
  else
    v32 = 0;
  v33 = v10 - v32;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v13[1] >> 6;
      v34 = v13 + 2;
      *v17 = ((4198405 * (unint64_t)(224 * (*v13 >> 6))) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      v35 = v17 + 2;
    }
    else
    {
      v34 = v13;
      v35 = v17;
    }
    if (v10 == v32)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v32;
      do
      {
        v39 = *v34 >> 6;
        v40 = v34[1] >> 6;
        v34 += 2;
        *v35 = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
        v35[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      v41 = *v34 >> 6;
      v42 = v34[1] >> 6;
      *v35 = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v11 - v29;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v30 & 1) != 0)
      {
        v47 = v13[1] >> 6;
        v45 = v13 + 2;
        *v17 = ((4198405 * (unint64_t)(224 * (*v13 >> 6))) >> 32) + 16;
        v17[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        v48 = 0;
      }
      else
      {
        v49 = v10 - v32;
        do
        {
          v50 = *v45 >> 6;
          v51 = v45[1] >> 6;
          v45 += 2;
          *v46 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
          v46[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        v52 = *v45 >> 6;
        v53 = v45[1] >> 6;
        *v46 = ((4198405 * (unint64_t)(224 * v52)) >> 32) + 16;
        v46[1] = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if ((v30 & 1) != 0)
    {
      v54 = *v13 >> 6;
      v55 = v13[1] >> 6;
      v13 += 2;
      *v17 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      v33 = 0;
    }
    else
    {
      v56 = v10 - v32;
      do
      {
        v57 = *v13 >> 6;
        v58 = v13[1] >> 6;
        v13 += 2;
        *v17 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
        v17[1] = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      v59 = *v13 >> 6;
      v60 = v13[1] >> 6;
      *v17 = ((4198405 * (unint64_t)(224 * v59)) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v60)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_BYTE *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v13 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v22 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v17 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v32 = v12[1] >> 6;
      v30 = v12 + 2;
      *v16 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v32)) >> 32) + 16;
      v31 = v16 + 2;
    }
    else
    {
      v30 = v12;
      v31 = v16;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30 >> 6;
        v36 = v30[1] >> 6;
        v30 += 2;
        *v31 = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
        v31[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 >> 6;
      v38 = v30[1] >> 6;
      *v31 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      v31[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v17 - v25;
    do
    {
      v41 = v12;
      v42 = v16;
      if ((v26 & 1) != 0)
      {
        v43 = v12[1] >> 6;
        v41 = v12 + 2;
        *v16 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v16[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41 >> 6;
          v47 = v41[1] >> 6;
          v41 += 2;
          *v42 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
          v42[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 >> 6;
        v49 = v41[1] >> 6;
        *v42 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        v42[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v12 >> 6;
      v51 = v12[1] >> 6;
      v12 += 2;
      *v16 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v16 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v12 >> 6;
        v54 = v12[1] >> 6;
        v12 += 2;
        *v16 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
        v16[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v12 >> 6;
      v56 = v12[1] >> 6;
      *v16 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_BYTE *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v13 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v22 + 2 * i) >> 6))) >> 32;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v17 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v32 = v12[1];
      v30 = v12 + 2;
      *v16 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v32 >> 6))) >> 32;
      v31 = v16 + 2;
    }
    else
    {
      v30 = v12;
      v31 = v16;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
        v31[1] = (4198405 * (unint64_t)(255 * (v36 >> 6))) >> 32;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30;
      v38 = v30[1];
      *v31 = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      v31[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v17 - v25;
    do
    {
      v41 = v12;
      v42 = v16;
      if ((v26 & 1) != 0)
      {
        v43 = v12[1];
        v41 = v12 + 2;
        *v16 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        v16[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
          v42[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41;
        v49 = (4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32;
        *v42 = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
        v42[1] = v49;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v12;
      v51 = v12[1];
      v12 += 2;
      *v16 = (4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v16 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v12;
        v54 = v12[1];
        v12 += 2;
        *v16 = (4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32;
        v16[1] = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v12;
      v56 = v12[1];
      *v16 = (4198405 * (unint64_t)(255 * (v55 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  unsigned int v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v9 >= *(_QWORD *)(a6 + 24))
    v9 = *(_QWORD *)(a6 + 24);
  if (v9)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                         + 33) >> 1;
      *v18 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                          + 33) >> 1;
      v18[1] = v36;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v34[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v38 = (((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v34[2] >> 6))) >> 32)
                            + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v18 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v18[1] = v44;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (v42[3] >> 6))) >> 32)
                             + 33) >> 1;
          *v46 = (((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (v42[2] >> 6))) >> 32)
                              + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v50 = v14[2] >> 6;
      v51 = v14[3] >> 6;
      v14 += 4;
      *v18 = (((4198405 * (unint64_t)(224 * v48)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v50)) >> 32)
                          + 33) >> 1;
      v18[1] = (((4198405 * (unint64_t)(224 * v49)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v51)) >> 32)
                            + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v18[v52];
        v54 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v53 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 4;
      *v18 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32;
        *v38 = ((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 4;
        *v18 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32;
          *v46 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 >> 6;
      v49 = v14[1] >> 6;
      v14 += 4;
      *v18 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v18[v50];
        v52 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v51 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v29 = v12 & 1;
  if (v9 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                         + 33) >> 1;
      *v20 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                          + 33) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (((4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v33[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v37 = (((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v33[2] >> 6))) >> 32)
                            + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v9 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v20 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (((4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (v41[3] >> 6))) >> 32)
                             + 33) >> 1;
          *v45 = (((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (v41[2] >> 6))) >> 32)
                              + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 >> 6;
      v48 = v14[1] >> 6;
      v49 = v14[2] >> 6;
      v50 = v14[3] >> 6;
      v14 += 4;
      *v20 = (((4198405 * (unint64_t)(224 * v47)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v49)) >> 32)
                          + 33) >> 1;
      v20[1] = (((4198405 * (unint64_t)(224 * v48)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v50)) >> 32)
                            + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *v52 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  int v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = v14[1] >> 6;
      v33 = v14 + 4;
      *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32;
        *v37 = ((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v43 = v14[1] >> 6;
        v41 = v14 + 4;
        *v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32;
          *v45 = ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 >> 6;
      v48 = v14[1] >> 6;
      v14 += 4;
      *v20 = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *v50 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v29 = v12 & 1;
  if (v9 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                         + 1) >> 1;
      *v20 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                          + 1) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (((4198405 * (unint64_t)(255 * (v33[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v33[3] >> 6))) >> 32)
                           + 1) >> 1;
        *v37 = (((4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v33[2] >> 6))) >> 32)
                            + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v9 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                           + 1) >> 1;
        *v20 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                            + 1) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (((4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(255 * (v41[3] >> 6))) >> 32)
                             + 1) >> 1;
          *v45 = (((4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (v41[2] >> 6))) >> 32)
                              + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v49 = v14[2];
      v50 = v14[3];
      v14 += 4;
      *v20 = (((4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32)
                          + 1) >> 1;
      v20[1] = (((4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                           + 1) >> 1;
        *v52 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                            + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  _BYTE *v50;
  unsigned int v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = v14[1];
      v33 = v14 + 4;
      *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = v33[1];
        *v37 = (4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32;
        v37[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v43 = v14[1];
        v41 = v14 + 4;
        *v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = v41[1];
          *v45 = (4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32;
          v45[1] = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 4;
      *v20 = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = v14[1];
        *v50 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v50[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39 >> 6;
      v41 = v39[1] >> 6;
      v37 = v15 + 4;
      v42 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v41)) >> 32)
          + 66;
      *v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v40)) >> 32)
                          + 66) >> 2;
      v21[1] = v42 >> 2;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = ((4198405 * (unint64_t)(224 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32)
            + 66;
        *v45 = (((4198405 * (unint64_t)(224 * (*(v44 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32)
                            + 66) >> 2;
        v45[1] = v46 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v47 = 0;
    v48 = v24 - v35;
    do
    {
      v49 = v15;
      v50 = v21;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51 >> 6;
        v53 = v51[1] >> 6;
        v49 = v15 + 4;
        v54 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v53)) >> 32)
            + 66;
        *v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v52)) >> 32)
                            + 66) >> 2;
        v21[1] = v54 >> 2;
        v50 = v21 + 2;
      }
      if (v22 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = ((4198405 * (unint64_t)(224 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32)
              + 66;
          *v57 = (((4198405 * (unint64_t)(224 * (*(v56 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v56 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32)
                              + 66) >> 2;
          v57[1] = v58 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  int v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  int v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1] >> 6;
      v37 = v15 + 4;
      *v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      v21[1] = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (4198405 * (unint64_t)(224 * (v37[1] >> 6))) >> 32;
        *v41 = ((4198405 * (unint64_t)(224 * (*v37 >> 6))) >> 32) + 16;
        v41[1] = v42 + 16;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v43 = 0;
    v44 = v24 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1] >> 6;
        v46 = v15 + 4;
        *v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        v21[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (4198405 * (unint64_t)(224 * (v46[1] >> 6))) >> 32;
          *v50 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          v50[1] = v51 + 16;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned __int16 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v37 = *v36 >> 6;
      v38 = v36[1] >> 6;
      v34 = v15 + 4;
      v39 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v38)) >> 32)
          + 66;
      *v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v37)) >> 32)
                          + 66) >> 2;
      v21[1] = v39 >> 2;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v34 + 2;
      do
      {
        v42 = &v35[v40];
        v43 = ((4198405 * (unint64_t)(224 * (*(v41 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 6))) >> 32)
            + 66;
        *v42 = (((4198405 * (unint64_t)(224 * (*(v41 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14) >> 6))) >> 32)
                            + 66) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v44 = 0;
    v45 = v24 - v32;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v8 & 1) != 0)
      {
        v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v49 = *v48 >> 6;
        v50 = v48[1] >> 6;
        v46 = v15 + 4;
        v51 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v50)) >> 32)
            + 66;
        *v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v49)) >> 32)
                            + 66) >> 2;
        v21[1] = v51 >> 2;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v52 = 0;
        v53 = v46 + 2;
        do
        {
          v54 = &v47[v52];
          v55 = ((4198405 * (unint64_t)(224 * (*(v53 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v53[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 6))) >> 32)
              + 66;
          *v54 = (((4198405 * (unint64_t)(224 * (*(v53 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v53 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14) >> 6))) >> 32)
                              + 66) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v15[1] >> 6;
      v34 = v15 + 4;
      *v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      v21[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32;
        *v38 = ((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v45 = v15[1] >> 6;
        v43 = v15 + 4;
        *v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        v21[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
          *v47 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
          v47[1] = v48 + 16;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  unsigned int v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v59 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v59 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  v23 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v23 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v23)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    v29 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v29 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32;
      }
      v28 += v25;
      v29 += v26;
      ++v24;
    }
    while (v24 != v23);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v23 >= v12)
    v31 = v12;
  else
    v31 = 0;
  v8 = v8;
  if (v21 >= v10)
    v32 = v10;
  else
    v32 = 0;
  v58 = v32;
  v33 = v21 - v32;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v37 = *v36;
      v38 = v36[1];
      v34 = v15 + 4;
      v39 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32)
          + 2;
      *v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32)
                          + 2) >> 2;
      v20[1] = v39 >> 2;
      v35 = v20 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v20;
    }
    if (v21 != v32)
    {
      v40 = 0;
      v41 = v34 + 2;
      do
      {
        v42 = &v35[v40];
        v43 = ((4198405 * (unint64_t)(255 * (*(v41 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 6))) >> 32)
            + 2;
        *v42 = (((4198405 * (unint64_t)(255 * (*(v41 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14) >> 6))) >> 32)
                            + 2) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v20 += v59;
  }
  if (v23 != v31)
  {
    v44 = 0;
    v57 = v23 - v31;
    do
    {
      v45 = v15;
      v46 = v20;
      v47 = v8;
      if ((v8 & 1) != 0)
      {
        v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v49 = *v48;
        v50 = v48[1];
        v45 = v15 + 4;
        v51 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32)
            + 2;
        *v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32)
                            + 2) >> 2;
        v20[1] = v51 >> 2;
        v46 = v20 + 2;
      }
      if (v21 != v58)
      {
        v52 = 0;
        v53 = v45 + 2;
        do
        {
          v54 = &v46[v52];
          v55 = ((4198405 * (unint64_t)(255 * (*(v53 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (v53[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 6))) >> 32)
              + 2;
          *v54 = (((4198405 * (unint64_t)(255 * (*(v53 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*v53 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14) >> 6))) >> 32)
                              + 2) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v20 += v59;
      v44 += 2;
      v8 = v47;
    }
    while (v44 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v15[1];
      v34 = v15 + 4;
      *v21 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
      v21[1] = (4198405 * (unint64_t)(255 * (v36 >> 6))) >> 32;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1];
        *v38 = (4198405 * (unint64_t)(255 * (*v34 >> 6))) >> 32;
        v38[1] = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v45 = v15[1];
        v43 = v15 + 4;
        *v21 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
        v21[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1];
          *v47 = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
          v47[1] = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned int v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v41 = *v40 >> 6;
      v42 = v40[1] >> 6;
      v37 = v15 + 4;
      v43 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v42)) >> 32)
          + 66;
      *v22 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v41)) >> 32)
                          + 66) >> 2;
      v38 = v22 + 1;
      *v23 = v43 >> 2;
      v39 = v23 + 1;
    }
    else
    {
      v37 = v15;
      v38 = v22;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v44 = 0;
      v45 = v37 + 2;
      do
      {
        v46 = ((4198405 * (unint64_t)(224 * (*(v45 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32)
            + 66;
        *v38++ = (((4198405 * (unint64_t)(224 * (*(v45 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32)
                              + 66) >> 2;
        *v39++ = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      v51 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v53 = *v52 >> 6;
        v54 = v52[1] >> 6;
        v49 = v15 + 4;
        v55 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v54)) >> 32)
            + 66;
        *v22 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v53)) >> 32)
                            + 66) >> 2;
        v50 = v22 + 1;
        *v23 = v55 >> 2;
        v51 = v23 + 1;
      }
      if (v24 != v10)
      {
        v56 = 0;
        v57 = v49 + 2;
        do
        {
          v58 = ((4198405 * (unint64_t)(224 * (*(v57 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v57[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 + 2) >> 6))) >> 32)
              + 66;
          *v50++ = (((4198405 * (unint64_t)(224 * (*(v57 - 2) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(224 * (*v57 >> 6))) >> 32)
                                + ((4198405
                                  * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 4) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14) >> 6))) >> 32)
                                + 66) >> 2;
          *v51++ = v58 >> 2;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v36);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v15[1] >> 6;
      v37 = v15 + 4;
      *v22 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      v38 = v22 + 1;
      *v23 = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
      v39 = v23 + 1;
    }
    else
    {
      v37 = v15;
      v38 = v22;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = (4198405 * (unint64_t)(224 * (v37[1] >> 6))) >> 32;
        *v38++ = ((4198405 * (unint64_t)(224 * (*v37 >> 6))) >> 32) + 16;
        *v39++ = v42 + 16;
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      v48 = v23;
      if ((v8 & 1) != 0)
      {
        v46 = v15 + 4;
        v49 = (4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32;
        *v22 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        v47 = v22 + 1;
        *v23 = v49 + 16;
        v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = (4198405 * (unint64_t)(224 * (v46[1] >> 6))) >> 32;
          *v47++ = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *v48++ = v51 + 16;
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v59 = a8[2];
  v60 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v60 * v18) >> 1) + (v16 >> 1));
  v21 = (_BYTE *)(a7[2] + ((unint64_t)(v59 * v18) >> 1) + (v16 >> 1));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v28 + v29;
    v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v31 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v22 >= v10)
    v34 = v10;
  else
    v34 = 0;
  v58 = v34;
  v35 = v22 - v34;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v36 = v15 + 4;
      v42 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32)
          + 2;
      *v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32)
                          + 2) >> 2;
      v37 = v20 + 1;
      *v21 = v42 >> 2;
      v38 = v21 + 1;
    }
    else
    {
      v36 = v15;
      v37 = v20;
      v38 = v21;
    }
    if (v22 != v34)
    {
      v43 = 0;
      v44 = v36 + 2;
      do
      {
        v45 = ((4198405 * (unint64_t)(255 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32)
            + 2;
        *v37++ = (((4198405 * (unint64_t)(255 * (*(v44 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*v44 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32)
                              + 2) >> 2;
        *v38++ = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v35);
    }
    v15 += v14;
    v20 += v60;
    v21 += v59;
  }
  if (v24 != v33)
  {
    v46 = 0;
    do
    {
      v47 = v15;
      v48 = v20;
      v49 = v21;
      if ((v8 & 1) != 0)
      {
        v50 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v51 = *v50;
        v52 = v50[1];
        v47 = v15 + 4;
        v53 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32)
            + 2;
        *v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32)
                            + 2) >> 2;
        v48 = v20 + 1;
        *v21 = v53 >> 2;
        v49 = v21 + 1;
      }
      if (v22 != v58)
      {
        v54 = 0;
        v55 = v47 + 2;
        do
        {
          v56 = ((4198405 * (unint64_t)(255 * (*(v55 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (v55[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 + 2) >> 6))) >> 32)
              + 2;
          *v48++ = (((4198405 * (unint64_t)(255 * (*(v55 - 2) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (*v55 >> 6))) >> 32)
                                + ((4198405
                                  * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 4) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14) >> 6))) >> 32)
                                + 2) >> 2;
          *v49++ = v56 >> 2;
          v54 += 2;
          v55 += 4;
        }
        while (v54 < v35);
      }
      v15 += v14;
      v20 += v60;
      v21 += v59;
      v46 += 2;
    }
    while (v46 < v24 - v33);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v15[1];
      v37 = v15 + 4;
      *v22 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
      v38 = v22 + 1;
      *v23 = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
      v39 = v23 + 1;
    }
    else
    {
      v37 = v15;
      v38 = v22;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = 1070593275 * (v37[1] >> 6);
        *v38++ = (4198405 * (unint64_t)(255 * (*v37 >> 6))) >> 32;
        *v39++ = BYTE4(v42);
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      v48 = v23;
      if ((v8 & 1) != 0)
      {
        v49 = v15[1];
        v46 = v15 + 4;
        *v22 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
        v47 = v22 + 1;
        *v23 = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = 1070593275 * (v46[1] >> 6);
          *v47++ = (4198405 * (unint64_t)(255 * (*v46 >> 6))) >> 32;
          *v48++ = BYTE4(v51);
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf22_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf22_w30r;
  *a11 = vt_VImage_Cleanup_xf22_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf22_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  _WORD *v26;
  unint64_t v27;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a4;
    v13 = a4[1];
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[5];
    v17 = a3[1] + v13 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        LOWORD(v21) = 0;
        LOWORD(v22) = 0;
        v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v24 = *v23 >> 6;
            v25 = v23[1] >> 6;
            v23 += 2;
            v22 = (((67174465 * (unint64_t)(57344 * v24)) >> 32) >> 4) + 4096;
            v21 = (((67174465 * (unint64_t)(57344 * v25)) >> 32) >> 4) + 4096;
          }
          v26 = (_WORD *)(v15 + v19);
          v27 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v18 + 2 * v20) >> 6))) >> 36;
          *v26 = -1;
          v26[1] = v27 + 4096;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_xf22_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  _BYTE *v26;
  unint64_t v27;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a4;
    v13 = a4[1];
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[5];
    v17 = a3[1] + v13 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        LOBYTE(v21) = 0;
        LOBYTE(v22) = 0;
        v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v24 = *v23 >> 6;
            v25 = v23[1] >> 6;
            v23 += 2;
            v22 = ((4198405 * (unint64_t)(224 * v24)) >> 32) + 16;
            v21 = ((4198405 * (unint64_t)(224 * v25)) >> 32) + 16;
          }
          v26 = (_BYTE *)(v15 + v19);
          v27 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v18 + 2 * v20) >> 6))) >> 32;
          *v26 = -1;
          v26[1] = v27 + 16;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_xf22_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  int32x4_t v29;
  int32x4_t v30;

  v13 = *(_QWORD *)(a7 + 24);
  v14 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v15 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v16 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15)
    v16 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  if (v13 >= *(_QWORD *)(a11 + 24))
    v13 = *(_QWORD *)(a11 + 24);
  if (v13)
  {
    v17 = 0;
    v18 = *a9;
    v19 = a9[1];
    v20 = *a13;
    v21 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + 2 * v15;
    v22 = *(_QWORD *)(a7 + 40);
    v23 = a8[1] + v19 * v22 + ((2 * v14) & 0xFFFFFFFFFFFFFFFCLL);
    v24 = *a8 + *a9 * v22 + 2 * v14;
    v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        for (i = 0; i < v16; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v23 + v26);
          a4.i16[2] = *(_WORD *)(v23 + v26 + 2);
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v25));
          *(int16x4_t *)v29.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)vsubq_s32(v29, v30), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v29.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v29.i8, a5);
          *(double *)(v21 + v27) = *(double *)&a4;
          v27 += 8;
          v26 += 4;
        }
      }
      v24 += v18;
      v21 += v20;
      v23 += v19;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf22_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t *a13)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  uint64_t v26;
  unint64_t i;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;

  v13 = *(_QWORD *)(a7 + 24);
  v14 = (*(_QWORD *)(a7 + 32) & 1) + *(_QWORD *)(a7 + 32);
  v15 = (*(_QWORD *)(a11 + 32) & 1) + *(_QWORD *)(a11 + 32);
  v16 = ((*(_DWORD *)(a7 + 16) + *(_QWORD *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15)
    v16 = ((*(_DWORD *)(a11 + 16) + *(_QWORD *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  if (v13 >= *(_QWORD *)(a11 + 24))
    v13 = *(_QWORD *)(a11 + 24);
  if (v13)
  {
    v17 = 0;
    v18 = *a9;
    v19 = a9[1];
    v20 = *a13;
    v21 = *a12 + *a13 * *(_QWORD *)(a11 + 40) + v15;
    v22 = *(_QWORD *)(a7 + 40);
    v23 = a8[1] + v19 * v22 + ((2 * v14) & 0xFFFFFFFFFFFFFFFCLL);
    v24 = *a8 + *a9 * v22 + 2 * v14;
    v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        v26 = 0;
        for (i = 0; i < v16; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v23 + v26);
          a4.i16[2] = *(_WORD *)(v23 + v26 + 2);
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          v28 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          v29 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v28.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v28, v25));
          v30 = (int16x8_t)vsubq_s32(v28, v29);
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v29, (uint32x4_t)v30, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          *(int16x4_t *)v30.i8 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v30);
          *(_DWORD *)(v21 + v26) = a4.i32[0];
          v26 += 4;
        }
      }
      v24 += v18;
      v21 += v20;
      v23 += v19;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf22_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1] >> 6;
      v30 = v12 + 2;
      *v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30 >> 6;
          v34 = v30[1] >> 6;
          v30 += 2;
          *v31 = ((67174465 * (unint64_t)(57344 * v33)) >> 36) + 4096;
          v31[1] = ((67174465 * (unint64_t)(57344 * v34)) >> 36) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30 >> 6;
      v39 = v30[1] >> 6;
      *v31 = (((67174465 * (unint64_t)(57344 * v38)) >> 32) >> 4) + 4096;
      v31[1] = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1] >> 6;
        v42 = v12 + 2;
        *v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1] >> 6;
          v47 = (((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4) + 4096;
          *v43 = (((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4) + 4096;
          v48 = (((67174465 * (unint64_t)(57344 * v46)) >> 32) >> 4) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = (((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4) + 4096;
        v43[1] = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12 >> 6;
      v52 = v12[1] >> 6;
      v12 += 2;
      *v16 = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12 >> 6;
        v55 = v12[1] >> 6;
        v12 += 2;
        *v16 = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
      v16[1] = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u))
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = v13[1] >> 6;
      v32 = v13 + 2;
      *v19 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
      v19[1] = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32 >> 6;
          v36 = v32[1] >> 6;
          v32 += 2;
          *v33 = ((67174465 * (unint64_t)(57344 * v35)) >> 36) + 4096;
          v33[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_20;
    }
    v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 >> 6;
      v41 = v32[1] >> 6;
      *v33 = (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4) + 4096;
      v33[1] = (((67174465 * (unint64_t)(57344 * v41)) >> 32) >> 4) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v21 - v28;
    do
    {
      v44 = v13;
      v45 = v19;
      if ((v29 & 1) != 0)
      {
        v46 = v13[1] >> 6;
        v44 = v13 + 2;
        *v19 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
        v19[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        v45 = v19 + 2;
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44[1] >> 6;
          v49 = (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4) + 4096;
          *v45 = (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4) + 4096;
          v50 = (((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v51 = *v44 >> 6;
        v52 = v44[1] >> 6;
        *v45 = (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4) + 4096;
        v45[1] = (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if ((v29 & 1) != 0)
    {
      v53 = *v13 >> 6;
      v54 = v13[1] >> 6;
      v13 += 2;
      *v19 = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v19[1] = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      v55 = -(uint64_t)v30;
      do
      {
        v56 = *v13 >> 6;
        v57 = v13[1] >> 6;
        v13 += 2;
        *v19 = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
        v19[1] = ((67174465 * (unint64_t)(57344 * v57)) >> 36) + 4096;
        v19 += 2;
        v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      v58 = *v13 >> 6;
      v59 = v13[1] >> 6;
      *v19 = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
      v19[1] = (((67174465 * (unint64_t)(57344 * v59)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  _WORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 36;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v28 = v8 & 1;
  if (v21 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v20 >> 1;
  v32 = v9 & 1;
  if (v20 >> 1 >= (v20 - v32) >> 1)
    v31 = (v20 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v40 = v13[1];
      v33 = v13 + 2;
      *v19 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      v34 = v19 + 2;
      if (v31)
      {
LABEL_20:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
          v34[1] = (67174465 * (unint64_t)(0xFFFF * (v37 >> 6))) >> 36;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_26;
      }
    }
    else
    {
      v33 = v13;
      v34 = v19;
      if (v31)
        goto LABEL_20;
    }
    v39 = 0;
LABEL_26:
    if ((v39 | (unint64_t)v32) < v20)
    {
      v41 = *v33;
      v42 = v33[1];
      *v34 = (67174465 * (unint64_t)(0xFFFF * (v41 >> 6))) >> 36;
      v34[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v21 - v29;
    do
    {
      v45 = v13;
      v46 = v19;
      if ((v30 & 1) != 0)
      {
        v47 = v13[1];
        v45 = v13 + 2;
        *v19 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
        v19[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
        v46 = v19 + 2;
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = (67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 36;
          v50 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
          *v46 = v49;
          v46[1] = v50;
          v45 += 2;
          v46[2] = v49;
          v46[3] = v50;
          v46 += 4;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v20)
      {
        v51 = *v45;
        v52 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
        *v46 = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
        v46[1] = v52;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v21)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v13;
      v54 = v13[1];
      v13 += 2;
      *v19 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
      v19 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v13;
        v57 = v13[1];
        v13 += 2;
        *v19 = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
        v19[1] = (67174465 * (unint64_t)(0xFFFF * (v57 >> 6))) >> 36;
        v19 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v31 *= 2;
    }
    if ((v31 | v32) < v20)
    {
      v58 = *v13;
      v59 = v13[1];
      *v19 = (67174465 * (unint64_t)(0xFFFF * (v58 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v59 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 2;
      *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 36;
      *v37 = ((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 36) + 4096;
      v37[1] = v40 + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 2;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 36;
          *v45 = ((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 36) + 4096;
          v45[1] = v48 + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14 >> 6;
      v50 = v14[1] >> 6;
      v14 += 2;
      *v21 = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v50)) >> 36) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = v52 + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 2;
      *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = (67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 36;
      *v35 = ((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 36) + 4096;
      v35[1] = v38 + 4096;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 2;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = (67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 36;
          *v43 = ((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 36) + 4096;
          v43[1] = v46 + 4096;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 >> 6;
      v48 = v14[1] >> 6;
      v14 += 2;
      *v21 = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = v50 + 4096;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 36;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 2;
      *v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = v34[1];
      *v35 = (67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 36;
      v35[1] = (67174465 * (unint64_t)(0xFFFF * (v38 >> 6))) >> 36;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 2;
        *v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = v42[1];
          *v43 = (67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 36;
          v43[1] = (67174465 * (unint64_t)(0xFFFF * (v46 >> 6))) >> 36;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v21 = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = v14[1];
        *v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v50 >> 6))) >> 36;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = ((((67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 32) >> 4)
           + 8193
           + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)) >> 1;
      *v23 = ((((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 32) >> 4)
            + 8193
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)) >> 1;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38 >> 6;
      v43 = v38[1] >> 6;
      v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *v39 = ((((67174465 * (unint64_t)(57344 * v42)) >> 32) >> 4)
            + 8193
            + (((67174465 * (unint64_t)(57344 * v44)) >> 32) >> 4)) >> 1;
      v39[1] = ((((67174465 * (unint64_t)(57344 * v43)) >> 32) >> 4)
              + 8193
              + (((67174465 * (unint64_t)(57344 * v45)) >> 32) >> 4)) >> 1;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = ((((67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 32) >> 4)
             + 8193
             + (((67174465
                              * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)) >> 1;
        *v23 = ((((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 32) >> 4)
              + 8193
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)) >> 1;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49 >> 6;
          v54 = v49[1] >> 6;
          v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *v50 = ((((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
                + 8193
                + (((67174465 * (unint64_t)(57344 * v55)) >> 32) >> 4)) >> 1;
          v50[1] = ((((67174465 * (unint64_t)(57344 * v54)) >> 32) >> 4)
                  + 8193
                  + (((67174465 * (unint64_t)(57344 * v56)) >> 32) >> 4)) >> 1;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1] >> 6;
      v38 = v16 + 2;
      *v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v23[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (67174465 * (unint64_t)(57344 * (v38[1] >> 6))) >> 36;
      *v39 = ((67174465 * (unint64_t)(57344 * (*v38 >> 6))) >> 36) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        v23[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          *v48 = ((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 36) + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = ((((67174465 * (unint64_t)(0xFFFF * (v16[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)
           + 1) >> 1;
      *v23 = ((((67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38;
      v43 = v38[1];
      v44 = *(unsigned __int16 *)((char *)v38 + v15);
      v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *v39 = ((((67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v39[1] = ((((67174465 * (unint64_t)(0xFFFF * (v43 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v45 >> 6))) >> 32) >> 4)
              + 1) >> 1;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = ((((67174465 * (unint64_t)(0xFFFF * (v16[1] >> 6))) >> 32) >> 4)
             + (((67174465
                              * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *v23 = ((((67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49;
          v54 = v49[1];
          v55 = *(unsigned __int16 *)((char *)v49 + v15);
          v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          *v50 = ((((67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 32) >> 4)
                + 1) >> 1;
          v50[1] = ((((67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 32) >> 4)
                  + (((67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 32) >> 4)
                  + 1) >> 1;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1];
      v38 = v16 + 2;
      *v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
      v23[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1];
      *v39 = (67174465 * (unint64_t)(0xFFFF * (*v38 >> 6))) >> 36;
      v39[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
        v23[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1];
          *v48 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          v48[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_xf22_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1] >> 6;
      v30 = v12 + 2;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30 >> 6;
          v34 = v30[1] >> 6;
          v30 += 2;
          *v31 = 16 * ((4198405 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((4198405 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30 >> 6;
      v39 = v30[1] >> 6;
      *v31 = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1] >> 6;
        v42 = v12 + 2;
        *v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1] >> 6;
          v47 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          *v43 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          v48 = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12 >> 6;
      v52 = v12[1] >> 6;
      v12 += 2;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12 >> 6;
        v55 = v12[1] >> 6;
        v12 += 2;
        *v16 = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u))
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = v13[1] >> 6;
      v32 = v13 + 2;
      *v19 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32 >> 6;
          v36 = v32[1] >> 6;
          v32 += 2;
          *v33 = 16 * ((4198405 * (unint64_t)(3584 * v35)) >> 32) + 4096;
          v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_20;
    }
    v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 >> 6;
      v41 = v32[1] >> 6;
      *v33 = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v41)) >> 32) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v21 - v28;
    do
    {
      v44 = v13;
      v45 = v19;
      if ((v29 & 1) != 0)
      {
        v46 = v13[1] >> 6;
        v44 = v13 + 2;
        *v19 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
        v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        v45 = v19 + 2;
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44[1] >> 6;
          v49 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          *v45 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          v50 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v51 = *v44 >> 6;
        v52 = v44[1] >> 6;
        *v45 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
        v45[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if ((v29 & 1) != 0)
    {
      v53 = *v13 >> 6;
      v54 = v13[1] >> 6;
      v13 += 2;
      *v19 = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      v55 = -(uint64_t)v30;
      do
      {
        v56 = *v13 >> 6;
        v57 = v13[1] >> 6;
        v13 += 2;
        *v19 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        v19 += 2;
        v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      v58 = *v13 >> 6;
      v59 = v13[1] >> 6;
      *v19 = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v59)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  _WORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v28 = v8 & 1;
  if (v21 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v20 >> 1;
  v32 = v9 & 1;
  if (v20 >> 1 >= (v20 - v32) >> 1)
    v31 = (v20 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v40 = v13[1];
      v33 = v13 + 2;
      *v19 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      v34 = v19 + 2;
      if (v31)
      {
LABEL_20:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
          v34[1] = 16 * ((4198405 * (unint64_t)(4095 * (v37 >> 6))) >> 32);
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_26;
      }
    }
    else
    {
      v33 = v13;
      v34 = v19;
      if (v31)
        goto LABEL_20;
    }
    v39 = 0;
LABEL_26:
    if ((v39 | (unint64_t)v32) < v20)
    {
      v41 = *v33;
      v42 = v33[1];
      *v34 = 16 * ((4198405 * (unint64_t)(4095 * (v41 >> 6))) >> 32);
      v34[1] = 16 * ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v21 - v29;
    do
    {
      v45 = v13;
      v46 = v19;
      if ((v30 & 1) != 0)
      {
        v47 = v13[1];
        v45 = v13 + 2;
        *v19 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
        v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
        v46 = v19 + 2;
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45[1];
          v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          *v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v45 += 2;
          v46[2] = v50;
          v46[3] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v46 += 4;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v20)
      {
        v51 = *v45;
        v52 = v45[1];
        *v46 = 16 * ((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32);
        v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v21)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v13;
      v54 = v13[1];
      v13 += 2;
      *v19 = 16 * ((4198405 * (unint64_t)(4095 * (v53 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
      v19 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v13;
        v57 = v13[1];
        v13 += 2;
        *v19 = 16 * ((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32);
        v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32);
        v19 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v31 *= 2;
    }
    if ((v31 | v32) < v20)
    {
      v58 = *v13;
      v59 = v13[1];
      *v19 = 16 * ((4198405 * (unint64_t)(4095 * (v58 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v59 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 2;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32;
      *v37 = 16 * ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32) + 4096;
      v37[1] = 16 * v40 + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 2;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32;
          *v45 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          v45[1] = 16 * v48 + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14 >> 6;
      v50 = v14[1] >> 6;
      v14 += 2;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * v52 + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 2;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = (4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32;
      *v35 = 16 * ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32) + 4096;
      v35[1] = 16 * v38 + 4096;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 2;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = (4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32;
          *v43 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          v43[1] = 16 * v46 + 4096;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 >> 6;
      v48 = v14[1] >> 6;
      v14 += 2;
      *v21 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * v50 + 4096;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 2;
      *v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = (4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32;
      *v35 = 16 * ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32);
      v35[1] = 16 * v38;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 2;
        *v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = (4198405 * (unint64_t)(4095 * (v42[1] >> 6))) >> 32;
          *v43 = 16 * ((4198405 * (unint64_t)(4095 * (*v42 >> 6))) >> 32);
          v43[1] = 16 * v46;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v21 = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
        *v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * v50;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32);
      *v23 = (8
            * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v23[1] = (8 * v40 + 4104) & 0xFFF0;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38 >> 6;
      v43 = v38[1] >> 6;
      v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *v39 = (8
            * (((4198405 * (unint64_t)(3584 * v44)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v42)) >> 32))
            + 4104) & 0xFFF0;
      v39[1] = (8
              * (((4198405 * (unint64_t)(3584 * v45)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v43)) >> 32))
              + 4104) & 0xFFF0;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32);
        *v23 = (8
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v23[1] = (8 * v51 + 4104) & 0xFFF0;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49 >> 6;
          v54 = v49[1] >> 6;
          v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *v50 = (8
                * (((4198405 * (unint64_t)(3584 * v55)) >> 32)
                 + ((4198405 * (unint64_t)(3584 * v53)) >> 32))
                + 4104) & 0xFFF0;
          v50[1] = (8
                  * (((4198405 * (unint64_t)(3584 * v56)) >> 32)
                   + ((4198405 * (unint64_t)(3584 * v54)) >> 32))
                  + 4104) & 0xFFF0;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1] >> 6;
      v38 = v16 + 2;
      *v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (4198405 * (unint64_t)(3584 * (v38[1] >> 6))) >> 32;
      *v39 = 16 * ((4198405 * (unint64_t)(3584 * (*v38 >> 6))) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          *v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (4198405 * (unint64_t)(4095 * (v16[1] >> 6))) >> 32;
      v41 = 4095 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6);
      *v23 = (8
            * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (8 * (((4198405 * (unint64_t)v41) >> 32) + v40) + 8) & 0xFFF0;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = *v38;
      v44 = v38[1];
      v45 = *(unsigned __int16 *)((char *)v38 + v15);
      v46 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *v39 = (8
            * (((4198405 * (unint64_t)(4095 * (v45 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v43 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v39[1] = (8
              * (((4198405 * (unint64_t)(4095 * (v46 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32))
              + 8) & 0xFFF0;
      v39 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v48 = 0;
    v49 = v26 - v35;
    do
    {
      v50 = v16;
      v51 = v23;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 2;
        v52 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v16[1] >> 6))) >> 32);
        *v23 = (8
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (8 * v52 + 8) & 0xFFF0;
        v51 = v23 + 2;
      }
      if (v37)
      {
        v53 = -(uint64_t)v37;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = *(unsigned __int16 *)((char *)v50 + v15);
          v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2);
          v50 += 2;
          *v51 = (8
                * (((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32))
                + 8) & 0xFFF0;
          v51[1] = (8
                  * (((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32)
                   + ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32))
                  + 8) & 0xFFF0;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1];
      v38 = v16 + 2;
      *v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
      v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (4198405 * (unint64_t)(4095 * (v38[1] >> 6))) >> 32;
      *v39 = 16 * ((4198405 * (unint64_t)(4095 * (*v38 >> 6))) >> 32);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1];
        v47 = v16 + 2;
        *v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
        v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (4198405 * (unint64_t)(4095 * (v47[1] >> 6))) >> 32;
          *v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_xf22_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v17 >> 1;
  v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1)
    v28 = (v17 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1] >> 6;
      v30 = v12 + 2;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30 >> 6;
          v34 = v30[1] >> 6;
          v30 += 2;
          *v31 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v12;
      v31 = v16;
      if (v28)
        goto LABEL_19;
    }
    v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      v38 = *v30 >> 6;
      v39 = v30[1] >> 6;
      *v31 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v16;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1] >> 6;
        v42 = v12 + 2;
        *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v16 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1] >> 6;
          v47 = ((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32 << 6) + 4096;
          *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          v48 = ((4198405 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12 >> 6;
      v52 = v12[1] >> 6;
      v12 += 2;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12 >> 6;
        v55 = v12[1] >> 6;
        v12 += 2;
        *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u))
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = v13[1] >> 6;
      v32 = v13 + 2;
      *v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32 >> 6;
          v36 = v32[1] >> 6;
          v32 += 2;
          *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v35)) >> 32) << 6) + 4096;
          v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_20;
    }
    v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 >> 6;
      v41 = v32[1] >> 6;
      *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v21 - v28;
    do
    {
      v44 = v13;
      v45 = v19;
      if ((v29 & 1) != 0)
      {
        v46 = v13[1] >> 6;
        v44 = v13 + 2;
        *v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
        v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        v45 = v19 + 2;
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44[1] >> 6;
          v49 = ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32 << 6) + 4096;
          *v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          v50 = ((4198405 * (unint64_t)(896 * v48)) >> 32 << 6) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v51 = *v44 >> 6;
        v52 = v44[1] >> 6;
        *v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
        v45[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if ((v29 & 1) != 0)
    {
      v53 = *v13 >> 6;
      v54 = v13[1] >> 6;
      v13 += 2;
      *v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      v55 = -(uint64_t)v30;
      do
      {
        v56 = *v13 >> 6;
        v57 = v13[1] >> 6;
        v13 += 2;
        *v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
        v19 += 2;
        v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      v58 = *v13 >> 6;
      v59 = v13[1] >> 6;
      *v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v59)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  BOOL v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  _WORD *v41;
  int16x4_t *v42;
  __int16 v43;
  uint64_t v44;
  _WORD *v45;
  int16x4_t v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (_WORD *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (_WORD *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v57 = a4[1];
    v58 = v16;
    v19 = *a4;
    v20 = *a8;
    v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    v23 = 2 * v16;
    v56 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v8 = a2[4];
    v9 = a2[5];
    v10 = v57;
    v16 = v58;
    v17 = v56;
  }
  v24 = v9 & 1;
  if (v17 >= v24)
    v25 = v9 & 1;
  else
    v25 = 0;
  v26 = v8;
  v27 = v16 >> 1;
  v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1)
    v27 = (v16 - v28) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v36 = v11[1] & 0xFFC0;
      v29 = v11 + 2;
      *v15 = *v11 & 0xFFC0;
      v15[1] = v36;
      v30 = v15 + 2;
      if (v27)
      {
LABEL_19:
        v31 = -(uint64_t)v27;
        do
        {
          v32 = *v29 & 0xFFC0;
          v33 = v29[1] & 0xFFC0;
          v29 += 2;
          *v30 = v32;
          v30[1] = v33;
          v30 += 2;
          v34 = __CFADD__(v31++, 1);
        }
        while (!v34);
        v35 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      v29 = v11;
      v30 = v15;
      if (v27)
        goto LABEL_19;
    }
    v35 = 0;
LABEL_25:
    if ((v35 | (unint64_t)v28) < v16)
    {
      v37 = *v29 & 0xFFC0;
      v38 = v29[1] & 0xFFC0;
      *v30 = v37;
      v30[1] = v38;
    }
    v11 = (_WORD *)((char *)v11 + v10);
    v15 = (_WORD *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v17 - v25;
    do
    {
      v41 = v11;
      v42 = (int16x4_t *)v15;
      if ((v26 & 1) != 0)
      {
        v43 = v11[1] & 0xFFC0;
        v41 = v11 + 2;
        *v15 = *v11 & 0xFFC0;
        v15[1] = v43;
        v42 = (int16x4_t *)(v15 + 2);
      }
      if (v27)
      {
        v44 = -(uint64_t)v27;
        do
        {
          v45 = v41 + 2;
          v46.i32[0] = *v41 & 0xFFC0;
          v46.i32[1] = v41[1] & 0xFFC0;
          *v42++ = vuzp1_s16(v46, v46);
          v41 += 2;
          v34 = __CFADD__(v44++, 1);
        }
        while (!v34);
      }
      else
      {
        v45 = v41;
      }
      if ((v28 | (2 * v27)) < v16)
      {
        v47 = *v45 & 0xFFC0;
        v48 = v45[1] & 0xFFC0;
        v42->i16[0] = v47;
        v42->i16[1] = v48;
      }
      v11 = (_WORD *)((char *)v11 + v10);
      v15 = (_WORD *)((char *)v15 + v14);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v49 = *v11 & 0xFFC0;
      v50 = v11[1] & 0xFFC0;
      v11 += 2;
      *v15 = v49;
      v15[1] = v50;
      v15 += 2;
    }
    if (v27)
    {
      v51 = -(uint64_t)v27;
      do
      {
        v52 = *v11 & 0xFFC0;
        v53 = v11[1] & 0xFFC0;
        v11 += 2;
        *v15 = v52;
        v15[1] = v53;
        v15 += 2;
        v34 = __CFADD__(v51++, 1);
      }
      while (!v34);
      v27 *= 2;
    }
    if ((v27 | v28) < v16)
    {
      v54 = v11[1] & 0xFFC0;
      *v15 = *v11 & 0xFFC0;
      v15[1] = v54;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v38 = v14[1] >> 6;
      v36 = v14 + 2;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = (4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32;
      *v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32) << 6) + 4096;
      v37[1] = ((_WORD)v40 << 6) + 4096;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v46 = v14[1] >> 6;
        v44 = v14 + 2;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = (4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32;
          *v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          v45[1] = ((_WORD)v48 << 6) + 4096;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14 >> 6;
      v50 = v14[1] >> 6;
      v14 += 2;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v52 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v36 = v14[1] >> 6;
      v34 = v14 + 2;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = (4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32;
      *v35 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32) << 6) + 4096;
      v35[1] = ((_WORD)v38 << 6) + 4096;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v44 = v14[1] >> 6;
        v42 = v14 + 2;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = (4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32;
          *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          v43[1] = ((_WORD)v46 << 6) + 4096;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14 >> 6;
      v48 = v14[1] >> 6;
      v14 += 2;
      *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v50 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32);
      *v23 = (32
            * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v23[1] = (32 * v40 + 4128) & 0xFFC0;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38 >> 6;
      v43 = v38[1] >> 6;
      v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *v39 = (32
            * (((4198405 * (unint64_t)(896 * v44)) >> 32)
             + ((4198405 * (unint64_t)(896 * v42)) >> 32))
            + 4128) & 0xFFC0;
      v39[1] = (32
              * (((4198405 * (unint64_t)(896 * v45)) >> 32)
               + ((4198405 * (unint64_t)(896 * v43)) >> 32))
              + 4128) & 0xFFC0;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32);
        *v23 = (32
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v23[1] = (32 * v51 + 4128) & 0xFFC0;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49 >> 6;
          v54 = v49[1] >> 6;
          v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *v50 = (32
                * (((4198405 * (unint64_t)(896 * v55)) >> 32)
                 + ((4198405 * (unint64_t)(896 * v53)) >> 32))
                + 4128) & 0xFFC0;
          v50[1] = (32
                  * (((4198405 * (unint64_t)(896 * v56)) >> 32)
                   + ((4198405 * (unint64_t)(896 * v54)) >> 32))
                  + 4128) & 0xFFC0;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * v10;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  if (v24 >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = v24;
  v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1] >> 6;
      v38 = v16 + 2;
      *v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_29;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = (4198405 * (unint64_t)(896 * (v38[1] >> 6))) >> 32;
      *v39 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v38 >> 6))) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] >> 6;
        v47 = v16 + 2;
        *v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          *v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v13 - v12;
  if (v24)
  {
    v54 = v23;
    v25 = *a4;
    v26 = *a8;
    if (v12 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    v30 = 2 * v23;
    v56 = v24;
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v24 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v23 = v54;
  }
  if (v24 >= v11)
    v33 = v11;
  else
    v33 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v34 = (v23 - v10) >> 1;
  else
    v34 = v23 >> 1;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v35 = v16 + 2;
      v37 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
      *v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
      v22[1] = (32 * v37 + 32) & 0xFFC0;
      v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      v35 = v16;
      v36 = v22;
      if (!v34)
        goto LABEL_29;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *v35;
      v40 = v35[1];
      v41 = *(unsigned __int16 *)((char *)v35 + v15) >> 6;
      v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2) >> 6;
      v35 += 2;
      *v36 = (32 * (v41 + (v39 >> 6)) + 32) & 0xFFC0;
      v36[1] = (32 * (v42 + (v40 >> 6)) + 32) & 0xFFC0;
      v36 += 2;
      v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16 + 2;
        v47 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
        *v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
        v22[1] = (32 * v47 + 32) & 0xFFC0;
        v46 = v22 + 2;
      }
      if (v34)
      {
        v48 = -(uint64_t)v34;
        do
        {
          v49 = *v45;
          v50 = v45[1];
          v51 = *(unsigned __int16 *)((char *)v45 + v15) >> 6;
          v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6;
          v45 += 2;
          *v46 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
          v46 += 2;
          v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  _WORD *v45;
  _WORD *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = 2 * (v11 + v9);
  v17 = a4[1];
  v18 = (_WORD *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  v19 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v20 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v21 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v22 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v23 = 2 * v19;
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19))
    v26 = v20 - v19;
  else
    v26 = v12 - (v11 + v9);
  v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21)
    v27 = v22 - v21;
  if (v27)
  {
    v52 = v27;
    v53 = a4[1];
    v28 = *a4;
    v29 = *a8;
    if (v14 >= v10)
      v30 = 0;
    else
      v30 = *a4;
    v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    v32 = (char *)(*a7 + v29 * v21 + v23);
    v51 = v26;
    v33 = 2 * v26;
    v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v27 = v52;
    v17 = v53;
    v26 = v51;
  }
  if (v27 >= v13)
    v36 = v13;
  else
    v36 = 0;
  if (v26 >> 1 >= (v26 - v11) >> 1)
    v37 = (v26 - v11) >> 1;
  else
    v37 = v26 >> 1;
  if (v13)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v18[1] & 0xFFC0;
      v38 = v18 + 2;
      *v25 = *v18 & 0xFFC0;
      v25[1] = v40;
      v39 = v25 + 2;
      if (!v37)
      {
LABEL_28:
        v18 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v18;
      v39 = v25;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] & 0xFFC0;
      *v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v35 = __CFADD__(v41++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v43 = 0;
    v44 = v27 - v36;
    do
    {
      v45 = v18;
      v46 = v25;
      if ((v9 & 1) != 0)
      {
        v47 = v18[1] & 0xFFC0;
        v45 = v18 + 2;
        *v25 = *v18 & 0xFFC0;
        v25[1] = v47;
        v46 = v25 + 2;
      }
      if (v37)
      {
        v48 = -(uint64_t)v37;
        do
        {
          v49 = v45[1] & 0xFFC0;
          *v46 = *v45 & 0xFFC0;
          v46[1] = v49;
          v45 += 2;
          v46 += 2;
          v35 = __CFADD__(v48++, 1);
        }
        while (!v35);
      }
      v18 += v17;
      v25 = (_WORD *)((char *)v25 + v24);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf22_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = v23 + v14;
    v27 = v24 + v14;
    v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v19 >> 1;
  v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1)
    v32 = (v19 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = v12[1] >> 6;
      v34 = v12 + 2;
      *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35 = v18 + 2;
      if (v32)
      {
LABEL_20:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34 >> 6;
          v38 = v34[1] >> 6;
          v34 += 2;
          *v35 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v12;
      v35 = v18;
      if (v32)
        goto LABEL_20;
    }
    v40 = 0;
LABEL_26:
    if ((v40 | (unint64_t)v33) < v19)
    {
      v42 = *v34 >> 6;
      v43 = v34[1] >> 6;
      *v35 = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v30)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v10 - v30;
    do
    {
      v46 = v12;
      v47 = v18;
      if ((v31 & 1) != 0)
      {
        v48 = v12[1] >> 6;
        v46 = v12 + 2;
        *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        v47 = v18 + 2;
      }
      if (v32)
      {
        v49 = -(uint64_t)v32;
        do
        {
          v50 = v46[1] >> 6;
          v51 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *v47 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          v52 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
          v47[1] = v52;
          v46 += 2;
          v47[2] = v51;
          v47[3] = v52;
          v47 += 4;
          v39 = __CFADD__(v49++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        v53 = *v46 >> 6;
        v54 = v46[1] >> 6;
        *v47 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
        v47[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + (v8 & 1) < v10)
  {
    if ((v31 & 1) != 0)
    {
      v55 = *v12 >> 6;
      v56 = v12[1] >> 6;
      v12 += 2;
      *v18 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      v57 = -(uint64_t)v32;
      do
      {
        v58 = *v12 >> 6;
        v59 = v12[1] >> 6;
        v12 += 2;
        *v18 = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v59)) >> 32) + 16;
        v18 += 2;
        v39 = __CFADD__(v57++, 1);
      }
      while (!v39);
      v60 = 2 * v32;
    }
    else
    {
      v60 = 0;
    }
    if ((v60 | (unint64_t)v33) < v19)
    {
      v61 = *v12 >> 6;
      v62 = v12[1] >> 6;
      *v18 = ((4198405 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v62)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v19 >> 1;
  v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1)
    v28 = (v19 - v29) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v37 = v12[1] >> 6;
      v30 = v12 + 2;
      *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        v32 = -(uint64_t)v28;
        do
        {
          v33 = *v30 >> 6;
          v34 = v30[1] >> 6;
          v30 += 2;
          *v31 = ((4198405 * (unint64_t)(224 * v33)) >> 32) + 16;
          v31[1] = ((4198405 * (unint64_t)(224 * v34)) >> 32) + 16;
          v31 += 2;
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v12;
      v31 = v18;
      if (v28)
        goto LABEL_20;
    }
    v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      v38 = *v30 >> 6;
      v39 = v30[1] >> 6;
      *v31 = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
      v31[1] = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v10 - v26;
    do
    {
      v42 = v12;
      v43 = v18;
      if ((v27 & 1) != 0)
      {
        v44 = v12[1] >> 6;
        v42 = v12 + 2;
        *v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        v43 = v18 + 2;
      }
      if (v28)
      {
        v45 = -(uint64_t)v28;
        do
        {
          v46 = v42[1] >> 6;
          v47 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          *v43 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          v48 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        v49 = *v42 >> 6;
        v50 = v42[1] >> 6;
        *v43 = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
        v43[1] = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v12 >> 6;
      v52 = v12[1] >> 6;
      v12 += 2;
      *v18 = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v52)) >> 32) + 16;
      v18 += 2;
    }
    if (v28)
    {
      v53 = -(uint64_t)v28;
      do
      {
        v54 = *v12 >> 6;
        v55 = v12[1] >> 6;
        v12 += 2;
        *v18 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
        v18 += 2;
        v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v56 = 2 * v28;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v19)
    {
      v57 = *v12 >> 6;
      v58 = v12[1] >> 6;
      *v18 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
    }
  }
  return 0;
}

