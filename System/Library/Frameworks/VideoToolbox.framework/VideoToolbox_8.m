uint64_t VTEncoderSessionEmitEncodedTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  _QWORD block[7];

  v13 = 0;
  if (!a1)
    goto LABEL_8;
  v5 = *a1;
  if (!*a1)
    goto LABEL_7;
  if (*(_BYTE *)(v5 + 168) == 1)
  {
    a1 = 0;
    v11 = 4294954393;
    goto LABEL_6;
  }
  v9 = *(NSObject **)(v5 + 128);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtTileCompressionSessionTrackTileLeavingEncoder_block_invoke;
  block[3] = &__block_descriptor_tmp_12_3;
  block[4] = v5;
  block[5] = a2;
  block[6] = &v13;
  dispatch_sync(v9, block);
  v10 = v13;
  if (!v13)
  {
LABEL_7:
    a1 = 0;
LABEL_8:
    v11 = 4294954394;
    goto LABEL_6;
  }
  ++*(_DWORD *)(v5 + 184);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v5 + 48))(*(_QWORD *)(v5 + 56), v10[1], v10[2], v10[3], a3, a4, a5);
  v11 = 0;
  a1 = (uint64_t *)v13;
LABEL_6:
  free(a1);
  return v11;
}

uint64_t VTTileEncoderSessionSetTileEncodeRequirements(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  if (!a1)
    return 4294954394;
  v3 = *a1;
  if (!*a1)
    return 4294954394;
  if (*(_BYTE *)(v3 + 168) == 1)
    return 4294954393;
  v4 = *(NSObject **)(v3 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __VTTileEncoderSessionSetTileEncodeRequirements_block_invoke;
  block[3] = &__block_descriptor_tmp_6_5;
  block[4] = v3;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v4, block);
  return 0;
}

double vtTileCompressionSessionInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void vtTileCompressionSessionFinalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  VTTileCompressionSessionInvalidate((uint64_t)a1);
  v2 = a1[16];
  if (v2)
    dispatch_release(v2);
  v3 = a1[18];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
  v7 = (const void *)a1[19];
  if (v7)
  {
    CFRelease(v7);
    a1[19] = 0;
  }
  v8 = (const void *)a1[11];
  if (v8)
  {
    CFRelease(v8);
    a1[11] = 0;
  }
  v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  v10 = (const void *)a1[13];
  if (v10)
  {
    CFRelease(v10);
    a1[13] = 0;
  }
  v11 = (const void *)a1[20];
  if (v11)
  {
    CFRelease(v11);
    a1[20] = 0;
  }
}

CFTypeRef vtTileCompressionSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTTileCompressionSession]"));
}

__CFString *vtTileCompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v2;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  CFAllocatorRef v9;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (v2 > 0xA)
  {
    if (v2 > 0x28)
    {
      v2 = bswap32(v2);
      v6 = v2 >> 8;
      v5 = BYTE2(v2);
      LOBYTE(v7) = v2;
    }
    else
    {
      v5 = 0;
      v8 = *(_DWORD *)(a1 + 16);
      v7 = v8 / 0xA + 48;
      v6 = (v8 % 0xA) | 0x30;
    }
  }
  else
  {
    v5 = 0;
    LOBYTE(v6) = 0;
    v7 = *(_DWORD *)(a1 + 16) + 48;
  }
  v9 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTTileCompressionSession %p [%p]>{'%c%c%c%c',Tile size: %dx%d,videoEncoder:%p, }"), a1, v9, HIBYTE(v2), v5, v6, v7, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 72));
  return Mutable;
}

void vtTileCompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v7;

  if (*a3 && CFDictionaryContainsKey(*a3, key))
  {
    Mutable = a3[2];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[2] = Mutable;
    }
LABEL_9:
    CFDictionarySetValue(Mutable, key, a2);
    return;
  }
  v7 = a3[1];
  if (v7 && CFDictionaryContainsKey(v7, key))
  {
    Mutable = a3[3];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[3] = Mutable;
    }
    goto LABEL_9;
  }
}

_QWORD *__vtTileCompressionSessionTrackTileEnteringEncoder_block_invoke(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  result = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040569D7752uLL);
  if (result)
  {
    result[1] = a1[5];
    v3 = a1[6];
    v4 = *(_QWORD *)(v3 + 120);
    *(_QWORD *)(v3 + 120) = v4 + 1;
    *result = v4;
    result[2] = a1[8];
    result[3] = a1[9];
    v5 = (_QWORD *)a1[7];
    if (v5)
      *v5 = v4;
    result[4] = *(_QWORD *)(a1[6] + 136);
    *(_QWORD *)(a1[6] + 136) = result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12904;
  }
  return result;
}

uint64_t __vtTileCompressionSessionTrackTileLeavingEncoder_block_invoke(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD **)(v1 + 136);
  v3 = (_QWORD *)(v1 + 136);
  v2 = v4;
  if (v4)
  {
    v5 = v2;
    while (*v5 != *(_QWORD *)(result + 40))
    {
      v5 = (_QWORD *)v5[4];
      if (!v5)
        return result;
    }
    if (v2 != v5)
    {
      do
      {
        v6 = v2;
        v2 = (_QWORD *)v2[4];
      }
      while (v2 != v5);
      v3 = v6 + 4;
      v2 = v5;
    }
    *v3 = v2[4];
    **(_QWORD **)(result + 48) = v5;
  }
  return result;
}

uint64_t TestIPBVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294954394;
  VTVideoEncoderGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    return 4294954392;
  return v3;
}

_QWORD *TestIPBQueuedFrameRetain(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  v3 = malloc_type_malloc(0x28uLL, 0x10200406E8F4065uLL);
  v4 = v3;
  if (v3)
  {
    v5 = *a2;
    v6 = a2[1];
    v3[4] = *((_QWORD *)a2 + 4);
    *(_OWORD *)v3 = v5;
    *((_OWORD *)v3 + 1) = v6;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void TestIPBQueuedFrameRelease(int a1, void *a2)
{
  free(a2);
}

__CFString *TestIPBQueuedFrameCopyDescription(uint64_t *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  Float64 Seconds;
  CMTime time;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = *a1;
  time = *(CMTime *)(a1 + 1);
  Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, CFSTR("<frame %d, pts %1.3f, displayNumber %d>"), v3, *(_QWORD *)&Seconds, *((unsigned int *)a1 + 8));
  return Mutable;
}

uint64_t TestIPBVideoEncoder_Invalidate()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[6];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[6] = 0;
  }
  v2 = (const void *)DerivedStorage[15];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[15] = 0;
  }
  v3 = (const void *)DerivedStorage[13];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[13] = 0;
  }
  return 0;
}

__CFString *TestIPBVideoEncoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TestIPBVideoEncoder %p>"), a1);
  return Mutable;
}

uint64_t TestIPBVideoEncoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void **v7;
  int v8;
  const void *SInt32;
  uint64_t v10;
  const void *v12;
  CFNumberType v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("AllowTemporalCompression")))
  {
    if (CFEqual(a2, CFSTR("AllowFrameReordering")))
    {
      v7 = (const void **)MEMORY[0x1E0C9AE50];
      v8 = *(unsigned __int8 *)(DerivedStorage + 25);
      goto LABEL_5;
    }
    if (CFEqual(a2, CFSTR("MaxKeyFrameInterval")))
    {
      v12 = (const void *)(DerivedStorage + 28);
    }
    else
    {
      if (CFEqual(a2, CFSTR("AllowOpenGOP")))
      {
        v7 = (const void **)MEMORY[0x1E0C9AE50];
        v8 = *(unsigned __int8 *)(DerivedStorage + 32);
        goto LABEL_5;
      }
      if (!CFEqual(a2, CFSTR("MaxConsecutiveBFrames")))
      {
        if (CFEqual(a2, CFSTR("AllowDelayedIFrames")))
        {
          v7 = (const void **)MEMORY[0x1E0C9AE50];
          v8 = *(unsigned __int8 *)(DerivedStorage + 40);
          goto LABEL_5;
        }
        if (CFEqual(a2, CFSTR("Quality")))
        {
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          goto LABEL_9;
        }
        if (CFEqual(a2, CFSTR("MVHEVCVideoLayerIDs")))
        {
          SInt32 = *(const void **)(DerivedStorage + 48);
          if (!SInt32)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (CFEqual(a2, CFSTR("MVHEVCViewIDs")) || CFEqual(a2, CFSTR("MVHEVCLeftAndRightViewIDs")))
        {
          SInt32 = *(const void **)(DerivedStorage + 56);
          if (!SInt32)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (!CFEqual(a2, CFSTR("ExpectedFrameRate")))
          return 4294954396;
        v12 = (const void *)(DerivedStorage + 72);
        v13 = kCFNumberFloatType;
LABEL_14:
        SInt32 = CFNumberCreate(0, v13, v12);
        goto LABEL_9;
      }
      v12 = (const void *)(DerivedStorage + 36);
    }
    v13 = kCFNumberSInt32Type;
    goto LABEL_14;
  }
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  v8 = *(unsigned __int8 *)(DerivedStorage + 24);
LABEL_5:
  if (!v8)
    v7 = (const void **)MEMORY[0x1E0C9AE40];
  SInt32 = *v7;
LABEL_8:
  SInt32 = CFRetain(SInt32);
LABEL_9:
  v10 = 0;
  *a4 = SInt32;
  return v10;
}

uint64_t TestIPBVideoEncoder_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  Boolean Value;
  uint64_t result;
  CFTypeID v9;
  Boolean v10;
  CFTypeID v11;
  void *v12;
  const __CFNumber *v13;
  CFNumberType v14;
  CFTypeID v15;
  Boolean v16;
  CFTypeID v17;
  CFTypeID v18;
  Boolean v19;
  CFTypeID v20;
  CFTypeID v21;
  const void *v22;
  CFArrayRef Copy;
  CFTypeID v24;
  const void *v25;
  CFArrayRef v26;
  CFTypeID v27;
  const void *v28;
  CFArrayRef v29;
  int v30;
  CFTypeID v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("AllowTemporalCompression")))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Value = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 24) = Value;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("AllowFrameReordering")))
  {
    if (a3)
    {
      v9 = CFBooleanGetTypeID();
      if (v9 == CFGetTypeID(a3))
      {
        v10 = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 25) = v10;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("MaxKeyFrameInterval")))
  {
    if (a3)
    {
      v11 = CFNumberGetTypeID();
      if (v11 == CFGetTypeID(a3))
      {
        v12 = (void *)(DerivedStorage + 28);
LABEL_13:
        v13 = a3;
        v14 = kCFNumberSInt32Type;
LABEL_14:
        CFNumberGetValue(v13, v14, v12);
        return 0;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("AllowOpenGOP")))
  {
    if (a3)
    {
      v15 = CFBooleanGetTypeID();
      if (v15 == CFGetTypeID(a3))
      {
        v16 = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 32) = v16;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("MaxConsecutiveBFrames")))
  {
    if (a3)
    {
      v17 = CFNumberGetTypeID();
      if (v17 == CFGetTypeID(a3))
      {
        v12 = (void *)(DerivedStorage + 36);
        goto LABEL_13;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("AllowDelayedIFrames")))
  {
    if (a3)
    {
      v18 = CFBooleanGetTypeID();
      if (v18 == CFGetTypeID(a3))
      {
        v19 = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 40) = v19;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("Quality")))
  {
    if (a3)
    {
      v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(a3))
        return 0;
    }
    return 4294954394;
  }
  if (CFEqual(a2, CFSTR("MVHEVCVideoLayerIDs")))
  {
    if (a3)
    {
      v21 = CFGetTypeID(a3);
      if (v21 != CFArrayGetTypeID())
        return 4294954394;
      v22 = *(const void **)(DerivedStorage + 48);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(DerivedStorage + 48) = 0;
      }
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
      result = 0;
      *(_QWORD *)(DerivedStorage + 48) = Copy;
    }
    else
    {
      result = *(_QWORD *)(DerivedStorage + 48);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *(_QWORD *)(DerivedStorage + 48) = 0;
      }
    }
  }
  else if (CFEqual(a2, CFSTR("MVHEVCViewIDs")))
  {
    if (a3)
    {
      v24 = CFGetTypeID(a3);
      if (v24 != CFArrayGetTypeID())
        return 4294954394;
      v25 = *(const void **)(DerivedStorage + 56);
      if (v25)
      {
        CFRelease(v25);
        *(_QWORD *)(DerivedStorage + 56) = 0;
      }
      v26 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
      result = 0;
      *(_QWORD *)(DerivedStorage + 56) = v26;
    }
    else
    {
      result = *(_QWORD *)(DerivedStorage + 56);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *(_QWORD *)(DerivedStorage + 56) = 0;
      }
    }
  }
  else if (CFEqual(a2, CFSTR("MVHEVCLeftAndRightViewIDs")))
  {
    if (a3)
    {
      v27 = CFGetTypeID(a3);
      if (v27 != CFArrayGetTypeID())
        return 4294954394;
      v28 = *(const void **)(DerivedStorage + 64);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      v29 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
      result = 0;
      *(_QWORD *)(DerivedStorage + 64) = v29;
    }
    else
    {
      result = *(_QWORD *)(DerivedStorage + 64);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
    }
  }
  else
  {
    v30 = CFEqual(a2, CFSTR("ExpectedFrameRate"));
    result = 4294954394;
    if (a3 && v30)
    {
      v31 = CFNumberGetTypeID();
      if (v31 == CFGetTypeID(a3))
      {
        v12 = (void *)(DerivedStorage + 72);
        v13 = a3;
        v14 = kCFNumberFloatType;
        goto LABEL_14;
      }
      return 4294954394;
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_StartSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  CFDictionaryRef v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)DerivedStorage = a2;
  *(_QWORD *)(DerivedStorage + 76) = 0xF000000140;
  Mutable = CFDictionaryCreateMutable(v4, 4, v5, v6);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  v9 = VTEncoderSessionSetPixelBufferAttributes(a2, Mutable);
  if (!(_DWORD)v9)
    v9 = CMVideoFormatDescriptionCreate(v4, 0x69706220u, *(_DWORD *)(DerivedStorage + 76), *(_DWORD *)(DerivedStorage + 80), 0, (CMVideoFormatDescriptionRef *)(DerivedStorage + 104));
  v10 = v9;
  if (Mutable)
    CFRelease(Mutable);
  if (v7)
    CFRelease(v7);
  return v10;
}

uint64_t TestIPBVideoEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CVPixelBufferGetWidth(a3) != *(_DWORD *)(DerivedStorage + 76)
    || CVPixelBufferGetHeight(a3) != *(_DWORD *)(DerivedStorage + 80)
    || *(_QWORD *)(DerivedStorage + 48))
  {
    return FigSignalErrorAt();
  }
  v13 = *a4;
  return TestIPBVideoEncoder_encodeFrameCommon(a1, a2, &v13, a6);
}

uint64_t TestIPBVideoEncoder_CompleteFrames(uint64_t a1)
{
  return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, 80);
}

uint64_t TestIPBVideoEncoder_CopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  CFTypeRef v4;

  if (sCreateSupportedPropertyDictionaryOnce_4 != -1)
    dispatch_once_f(&sCreateSupportedPropertyDictionaryOnce_4, 0, (dispatch_function_t)TestIPBVideoEncoder_CreateSupportedPropertyDictionary);
  result = 4294954392;
  if (a2)
  {
    if (sTestIPBVideoEncoder_SupportedPropertyDictionary)
    {
      v4 = CFRetain((CFTypeRef)sTestIPBVideoEncoder_SupportedPropertyDictionary);
      result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, CMTime *a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  CMItemCount Count;
  CFIndex v14;
  uint64_t result;
  __CVBuffer *CVPixelBufferAtIndex;
  __int128 v17;
  CMTime v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 48))
    return FigSignalErrorAt();
  Count = CMTaggedBufferGroupGetCount(a3);
  if (CFArrayGetCount(*(CFArrayRef *)(v12 + 48)) != Count)
    return FigSignalErrorAt();
  v22 = 0;
  v21 = 0;
  FigCFArrayGetIntAtIndex();
  FigCFArrayGetIntAtIndex();
  if (Count < 1)
  {
LABEL_12:
    v18 = *a4;
    return TestIPBVideoEncoder_encodeFrameCommon(a1, a2, &v18, a6);
  }
  else
  {
    v14 = 0;
    v17 = *MEMORY[0x1E0CA5208];
    while (1)
    {
      CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v14);
      *(_OWORD *)&v18.value = v17;
      v20 = v17;
      result = FigTagCollectionGetTagsWithCategory();
      if ((_DWORD)result)
        break;
      FigTagGetSInt64Value();
      if (!FigCFArrayContainsInt())
        return FigSignalErrorAt();
      v19 = 0;
      result = FigTagCollectionGetTagsWithCategory();
      if ((_DWORD)result)
        break;
      CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      if (CVPixelBufferGetWidth(CVPixelBufferAtIndex) != *(_DWORD *)(v12 + 76)
        || CVPixelBufferGetHeight(CVPixelBufferAtIndex) != *(_DWORD *)(v12 + 80))
      {
        return FigSignalErrorAt();
      }
      if (Count == ++v14)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_encodeFrameCommon(uint64_t a1, const void *a2, CMTime *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage;
  const void *v7;
  _BOOL4 v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  int v12;
  _BOOL4 v13;
  int v14;
  BOOL v15;
  char v16;
  BOOL v17;
  int v18;
  CFIndex Count;
  CFIndex v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  int v29;
  __int128 v31;
  CMTimeEpoch epoch;
  CMTime value;
  CMTimeEpoch v34;
  uint64_t v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = !a4
    || (v7 = CFDictionaryGetValue(a4, CFSTR("EncoderForceKeyframe"))) == 0
    || CFEqual(v7, (CFTypeRef)*MEMORY[0x1E0C9AE50]) == 0;
  if (*(_BYTE *)(DerivedStorage + 24))
    v9 = !v8;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(DerivedStorage + 112) != 1)
  {
    --*(_DWORD *)(DerivedStorage + 112);
    v18 = 80;
    if (*(_BYTE *)(DerivedStorage + 25))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120));
      v13 = 0;
      v20 = *(int *)(DerivedStorage + 36);
      v10 = Count < v20;
      v17 = Count >= v20;
      if (Count >= v20)
        v18 = 80;
      else
        v18 = 88;
      if (Count >= v20)
        v21 = 66;
      else
        v21 = 120;
      v29 = v21;
      v16 = 1;
      v11 = Count < v20;
      v15 = Count >= v20;
      goto LABEL_27;
    }
    v29 = 120;
    v10 = 0;
    v13 = 0;
    v15 = 0;
    v17 = 1;
    v11 = 1;
    goto LABEL_26;
  }
  *(_DWORD *)(DerivedStorage + 112) = *(_DWORD *)(DerivedStorage + 28);
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    if (*(_BYTE *)(DerivedStorage + 32))
    {
      v10 = 0;
      v11 = 0;
      v12 = *(_DWORD *)(DerivedStorage + 88);
      v13 = v12 != 1;
      if (v12 == 1)
        v14 = 98;
      else
        v14 = 66;
    }
    else
    {
      v10 = 0;
      v13 = 0;
      v11 = 0;
      v14 = 80;
    }
    v29 = v14;
    v17 = 1;
    v18 = 73;
    v15 = 1;
LABEL_26:
    v16 = 1;
    goto LABEL_27;
  }
  v10 = 0;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v29 = 80;
  v17 = 1;
  v18 = 73;
  v11 = 1;
LABEL_27:
  v22 = *(_QWORD *)DerivedStorage;
  value = *a3;
  result = VTEncoderSessionEnqueuePresentationTimeStamp(v22, &value);
  if (!(_DWORD)result)
  {
    v24 = v10;
    v25 = *(_DWORD *)(DerivedStorage + 88);
    *(_DWORD *)(DerivedStorage + 88) = v25 + 1;
    if (!v17)
    {
      v31 = *(_OWORD *)&a3->value;
      epoch = a3->epoch;
      v26 = CMBaseObjectGetDerivedStorage();
      value.value = (CMTimeValue)a2;
      *(_OWORD *)&value.timescale = v31;
      v34 = epoch;
      v35 = v25;
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v26 + 120), 0, &value);
    }
    if ((v16 & 1) != 0 || (result = TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29), !(_DWORD)result))
    {
      if (v24)
      {
        if (v11)
          return 0;
        return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29);
      }
      value = *a3;
      result = TestIPBVideoEncoder_emitFrame(a1, v18, v13, a2, &value, v25);
      if ((_DWORD)result)
        v27 = 0;
      else
        v27 = v15;
      if (v27)
        return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29);
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  char *ValueAtIndex;
  const void *v9;
  int v10;
  const __CFArray *v11;
  CFIndex v12;
  uint64_t result;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)) >= 1)
  {
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = *(const __CFArray **)(v5 + 120);
    Count = CFArrayGetCount(v6);
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(v6, Count - 1);
    v9 = *(const void **)ValueAtIndex;
    v14 = *(CMTime *)(ValueAtIndex + 8);
    v10 = *((_DWORD *)ValueAtIndex + 8);
    v11 = *(const __CFArray **)(v5 + 120);
    v12 = CFArrayGetCount(v11);
    CFArrayRemoveValueAtIndex(v11, v12 - 1);
    result = TestIPBVideoEncoder_emitFrame(a1, a2, 0, v9, &v14, v10);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t TestIPBVideoEncoder_emitFrame(uint64_t a1, int a2, int a3, const void *a4, CMTime *a5, int a6)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t DataFromFrameStrings;
  BOOL v21;
  BOOL v22;
  const __CFAllocator *v23;
  uint64_t v24;
  opaqueCMSampleBuffer *v25;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  const void *v28;
  const void *v29;
  __CFDictionary *v30;
  const void *v31;
  uint64_t v32;
  __int128 v34;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef sbuf;
  CMBlockBufferRef dataBuffer;
  size_t dataLength;
  char sourceBytes[1024];
  _OWORD v41[16];
  char v42;
  _OWORD v43[16];
  char v44;
  _OWORD v45[16];
  char v46;
  unsigned __int8 __src[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[31];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v62, 0, sizeof(v62));
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v46 = 0;
  memset(v45, 0, sizeof(v45));
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  dataBuffer = 0;
  dataLength = 0;
  sbuf = 0;
  v34 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTimingArray.duration.epoch = v11;
  memset(&sampleTimingArray.presentationTimeStamp, 0, 48);
  v12 = 1;
  __src[0] = 1;
  __src[1] = a2;
  v13 = *(_DWORD *)(DerivedStorage + 84);
  *(_DWORD *)(DerivedStorage + 84) = v13 + 1;
  if (v13 >= 10)
  {
    v14 = v13;
    do
    {
      ++v12;
      v15 = v14 > 0x63;
      v14 /= 0xAu;
    }
    while (v15);
  }
  LOBYTE(v45[0]) = v12;
  v16 = (v12 - 1) + 1;
  do
  {
    *((_BYTE *)v45 + v16--) = (char)v13 % 10 + 48;
    v13 /= 10;
  }
  while ((int)v16 + 1 > 1);
  v17 = 1;
  if (a6 >= 10)
  {
    v18 = a6;
    do
    {
      ++v17;
      v15 = v18 > 0x63;
      v18 /= 0xAu;
    }
    while (v15);
  }
  LOBYTE(v43[0]) = v17;
  v19 = (v17 - 1) + 1;
  do
  {
    *((_BYTE *)v43 + v19--) = (char)a6 % 10 + 48;
    a6 /= 10;
  }
  while ((int)v19 + 1 > 1);
  IPB_ClearStr(v41);
  DataFromFrameStrings = IPB_SimulatePrediction((unsigned __int8 *)(DerivedStorage + 128), (unsigned __int8 *)(DerivedStorage + 385), (_BYTE *)(DerivedStorage + 642), __src, (unsigned __int8 *)v45, (unsigned __int8 *)v41);
  if ((_DWORD)DataFromFrameStrings)
    goto LABEL_40;
  DataFromFrameStrings = IPB_MakeDataFromFrameStrings(sourceBytes, &dataLength, __src, (unsigned __int8 *)v45, (unsigned __int8 *)v43, (unsigned __int8 *)v41);
  if ((_DWORD)DataFromFrameStrings)
    goto LABEL_40;
  v21 = a2 == 73 && a3 == 0;
  v22 = !v21;
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataFromFrameStrings = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, dataLength, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, dataLength, 1u, &dataBuffer);
  if ((_DWORD)DataFromFrameStrings
    || (DataFromFrameStrings = CMBlockBufferReplaceDataBytes(sourceBytes, dataBuffer, 0, dataLength),
        (_DWORD)DataFromFrameStrings)
    || (sampleTimingArray.presentationTimeStamp = *a5,
        *(_OWORD *)&sampleTimingArray.duration.value = v34,
        sampleTimingArray.duration.epoch = v11,
        DataFromFrameStrings = VTEncoderSessionDequeueDecodeTimeStamp(*(_QWORD *)DerivedStorage, (uint64_t)&sampleTimingArray.decodeTimeStamp), (_DWORD)DataFromFrameStrings))
  {
LABEL_40:
    v32 = DataFromFrameStrings;
    v25 = 0;
  }
  else
  {
    v24 = CMSampleBufferCreate(v23, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(DerivedStorage + 104), 1, 1, &sampleTimingArray, 1, &dataLength, &sbuf);
    v25 = sbuf;
    if (!(_DWORD)v24)
    {
      SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
      if (!SampleAttachmentsArray)
        goto LABEL_34;
      ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      CFDictionaryRemoveAllValues(ValueAtIndex);
      if (!ValueAtIndex)
        goto LABEL_34;
      if (v22)
      {
        v28 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25C8], v28);
        if (a3)
        {
          v29 = (const void *)*MEMORY[0x1E0CA2628];
          v30 = ValueAtIndex;
          v31 = v28;
LABEL_33:
          CFDictionarySetValue(v30, v29, v31);
LABEL_34:
          v32 = 0;
          __src[__src[0] + 1] = 0;
          *((_BYTE *)v45 + LOBYTE(v45[0]) + 1) = 0;
          *((_BYTE *)v43 + LOBYTE(v43[0]) + 1) = 0;
          *((_BYTE *)v41 + LOBYTE(v41[0]) + 1) = 0;
          v25 = sbuf;
          goto LABEL_35;
        }
        v29 = (const void *)*MEMORY[0x1E0CA2618];
        if ((a2 & 0xFFFFFFDF) == 0x42)
          v31 = (const void *)*MEMORY[0x1E0C9AE40];
        else
          v31 = v28;
      }
      else
      {
        v29 = (const void *)*MEMORY[0x1E0CA25C8];
        v31 = (const void *)*MEMORY[0x1E0C9AE40];
      }
      v30 = ValueAtIndex;
      goto LABEL_33;
    }
    v32 = v24;
  }
LABEL_35:
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)DerivedStorage, a4, v32, 0, v25);
  if (dataBuffer)
    CFRelease(dataBuffer);
  if (sbuf)
    CFRelease(sbuf);
  return v32;
}

void TestIPBVideoEncoder_CreateSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  __CFDictionary *Mutable;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    Mutable = CFDictionaryCreateMutable(v0, 10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("AllowTemporalCompression"), v2);
    CFDictionarySetValue(Mutable, CFSTR("AllowFrameReordering"), v2);
    CFDictionarySetValue(Mutable, CFSTR("MaxKeyFrameInterval"), v2);
    CFDictionarySetValue(Mutable, CFSTR("AllowOpenGOP"), v2);
    CFDictionarySetValue(Mutable, CFSTR("Quality"), v2);
    CFDictionarySetValue(Mutable, CFSTR("MaxConsecutiveBFrames"), v2);
    CFDictionarySetValue(Mutable, CFSTR("AllowDelayedIFrames"), v2);
    CFDictionarySetValue(Mutable, CFSTR("MVHEVCVideoLayerIDs"), v2);
    CFDictionarySetValue(Mutable, CFSTR("MVHEVCViewIDs"), v2);
    CFDictionarySetValue(Mutable, CFSTR("MVHEVCLeftAndRightViewIDs"), v2);
    CFDictionarySetValue(Mutable, CFSTR("ExpectedFrameRate"), v2);
    sTestIPBVideoEncoder_SupportedPropertyDictionary = (uint64_t)Mutable;
    CFRelease(v2);
  }
}

OSStatus VTCreateCGImageFromCVPixelBuffer(CVPixelBufferRef pixelBuffer, CFDictionaryRef options, CGImageRef *imageOut)
{
  CGImageRef *v3;
  __CVBuffer *v5;
  const __CFBoolean *Value;
  int v7;
  const __CFBoolean *v8;
  const __CFBoolean *v9;
  int v10;
  CFTypeRef v11;
  const __CFAllocator *v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  size_t v18;
  size_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  OSType PixelFormatType;
  CVPixelBufferRef v23;
  CGColorSpace *ColorSpace;
  CGColorSpace *v25;
  CFTypeRef v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  OSType v29;
  CFTypeRef v30;
  int v31;
  int v32;
  CGImageRef *v33;
  CFTypeRef v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  OSStatus v38;
  IOSurfaceRef IOSurface;
  OSStatus v40;
  CFTypeRef v42;
  CGImageRef *v43;
  int v44;
  size_t Height;
  size_t Width;
  CFTypeRef cf;
  CGImageRef image;
  CGDataProviderRef provider;
  size_t v50;
  int v51;
  CVPixelBufferRef pixelBufferOut;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  v51 = 0;
  provider = 0;
  v50 = 0;
  cf = 0;
  image = 0;
  if (!pixelBuffer || (v3 = imageOut) == 0)
  {
    v40 = FigSignalErrorAt();
    v11 = 0;
    v25 = 0;
    goto LABEL_78;
  }
  v5 = pixelBuffer;
  if (!options)
  {
    v44 = 0;
    v7 = 1;
LABEL_14:
    v10 = 1;
    goto LABEL_15;
  }
  Value = (const __CFBoolean *)CFDictionaryGetValue(options, CFSTR("DeferFormatConversion"));
  if (Value)
    v7 = CFBooleanGetValue(Value);
  else
    v7 = 1;
  v8 = (const __CFBoolean *)CFDictionaryGetValue(options, CFSTR("ForceImmediateFormatConversion"));
  if (v8)
  {
    v44 = CFBooleanGetValue(v8);
    if (v44)
      v7 = 0;
  }
  else
  {
    v44 = 0;
  }
  v9 = (const __CFBoolean *)CFDictionaryGetValue(options, CFSTR("PrefersStandardDynamicRange"));
  if (!v9)
    goto LABEL_14;
  v10 = CFBooleanGetValue(v9);
LABEL_15:
  Width = CVPixelBufferGetWidth(v5);
  Height = CVPixelBufferGetHeight(v5);
  v11 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (v10 != 1 || !FigCFEqual() && !FigCFEqual())
  {
    ColorSpace = CVImageBufferGetColorSpace(v5);
    v26 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
    if (FigCFEqual())
    {
      ColorSpace = createAppleP3ColorSpace();
      v25 = ColorSpace;
      if (!v26)
        goto LABEL_40;
    }
    else
    {
      v25 = 0;
      if (!v26)
      {
LABEL_40:
        v23 = 0;
        if (ColorSpace)
          goto LABEL_46;
        goto LABEL_41;
      }
    }
    CFRelease(v26);
    goto LABEL_40;
  }
  pixelTransferSessionOut = 0;
  pixelBufferOut = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v43 = v3;
  if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut))
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_27;
  }
  v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = CFDictionaryCreateMutable(v12, 0, v13, v14);
  v17 = v16;
  if (Mutable && v16)
  {
    v18 = CVPixelBufferGetWidth(v5);
    v19 = CVPixelBufferGetHeight(v5);
    CVPixelBufferGetPixelFormatType(v5);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E0CA8FF0], Mutable);
    v20 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
    v21 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    VTSessionSetProperty(pixelTransferSessionOut, CFSTR("DestinationColorPrimaries"), v20);
    VTSessionSetProperty(pixelTransferSessionOut, CFSTR("DestinationTransferFunction"), (CFTypeRef)*MEMORY[0x1E0CA8EB0]);
    VTSessionSetProperty(pixelTransferSessionOut, CFSTR("DestinationYCbCrMatrix"), v21);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
    if (!CVPixelBufferCreate(v12, v18, v19, PixelFormatType, v17, &pixelBufferOut)
      && !VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v5, pixelBufferOut))
    {
      VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
    }
    goto LABEL_24;
  }
  v21 = 0;
  v20 = 0;
  if (Mutable)
LABEL_24:
    CFRelease(Mutable);
  if (v17)
    CFRelease(v17);
LABEL_27:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  v23 = pixelBufferOut;
  if (pixelBufferOut)
    v5 = pixelBufferOut;
  ColorSpace = CVImageBufferGetColorSpace(v5);
  v25 = 0;
  v3 = v43;
  if (!ColorSpace)
  {
LABEL_41:
    v27 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldPropagate);
    if (v27)
    {
      v28 = v27;
      ColorSpace = CVImageBufferCreateColorSpaceFromAttachments(v27);
      CFRelease(v28);
      v25 = ColorSpace;
    }
    else
    {
      ColorSpace = 0;
    }
  }
LABEL_46:
  v29 = CVPixelBufferGetPixelFormatType(v5);
  if (vtcg_bufferContainsAlpha(v29))
  {
    v30 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8CA8], 0);
    if (FigCFEqual())
    {
      v31 = 0;
      if (!v30)
        goto LABEL_58;
      goto LABEL_57;
    }
    v42 = v11;
    v32 = v7;
    v33 = v3;
    v34 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E0CA8CB0], 0);
    if (FigCFEqual())
      v31 = 1;
    else
      v31 = 2;
    if (v34)
      CFRelease(v34);
    v3 = v33;
    v7 = v32;
    v11 = v42;
    if (v30)
LABEL_57:
      CFRelease(v30);
  }
  else
  {
    v31 = 0;
  }
LABEL_58:
  if (!v7)
  {
    v35 = v29 == 1111970369 || v29 == 32;
    v36 = v35 || v29 == 1380411457;
    v37 = v36;
    if (v44 || !v37)
    {
      vtcg_createCGCompatiblePixelBuffer(v5, 0, (CVPixelBufferRef *)&cf);
      if (!cf)
      {
        v38 = FigSignalErrorAt();
        goto LABEL_90;
      }
      v38 = vtcg_convertPixelBuffer(v5, (__CVBuffer *)cf);
      if (v38)
        goto LABEL_90;
      v5 = (__CVBuffer *)cf;
    }
  }
  v38 = vtcg_createDeferredImageProviderWithPixelBuffer(v5, (OSType *)&v51, &v50, &provider);
  if (!v38)
  {
    IOSurface = CVPixelBufferGetIOSurface(v5);
    v40 = vtcg_createCGImageWithProvider(provider, v51, Width, Height, v50, v31, 0, (uint64_t)IOSurface, ColorSpace, &image);
    if (!v40)
    {
      *v3 = image;
      image = 0;
    }
    if (v23)
      goto LABEL_77;
    goto LABEL_78;
  }
LABEL_90:
  v40 = v38;
  if (v23)
LABEL_77:
    CFRelease(v23);
LABEL_78:
  CGImageRelease(image);
  CGDataProviderRelease(provider);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v11)
    CFRelease(v11);
  return v40;
}

CGColorSpaceRef createAppleP3ColorSpace()
{
  CFDictionaryRef v0;
  const ColorSyncProfile *Profile;
  const ColorSyncProfile *v2;
  const ColorSyncProfile *MutableCopy;
  ColorSyncProfile *v4;
  const __CFData *v5;
  __CFData *v6;
  const __CFData *v7;
  UInt8 *MutableBytePtr;
  CGColorSpaceRef v9;
  uint64_t v10;
  const void *v11;
  unint64_t v12;
  uint64_t valuePtr;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *values[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD keys[7];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v15 = xmmword_1928E2D70;
  v16 = unk_1928E2D80;
  v17 = xmmword_1928E2D90;
  v18 = unk_1928E2DA0;
  valuePtr = 0x3FFF604189374BC7;
  keys[3] = *(_OWORD *)&off_1E2F64458;
  keys[4] = xmmword_1E2F64468;
  keys[5] = *(_OWORD *)&off_1E2F64478;
  keys[6] = xmmword_1E2F64488;
  keys[1] = *(_OWORD *)&off_1E2F64438;
  keys[2] = xmmword_1E2F64448;
  v25 = 0u;
  keys[0] = xmmword_1E2F64428;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)values = 0u;
  v20 = 0u;
  if (!MEMORY[0x1E0C95448])
  {
    v9 = 0;
    v0 = 0;
LABEL_27:
    v2 = 0;
LABEL_29:
    v4 = 0;
    goto LABEL_31;
  }
  values[0] = (void *)CFRetain(CFSTR("displayRGB"));
  values[1] = (void *)CFRetain(CFSTR("Apple P3"));
  *(_QWORD *)&v20 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((_QWORD *)&v20 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *(_QWORD *)&v21 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((_QWORD *)&v21 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v17);
  *(_QWORD *)&v22 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v17 + 8);
  *((_QWORD *)&v22 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v15);
  *(_QWORD *)&v23 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v15 + 8);
  *((_QWORD *)&v23 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v16);
  *(_QWORD *)&v24 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v16 + 8);
  *((_QWORD *)&v24 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v18);
  *(_QWORD *)&v25 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v18 + 8);
  *((_QWORD *)&v25 + 1) = CFStringCreateWithCString(0, "Copyright 2007 Apple Inc.", 0);
  v0 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v0)
  {
    v9 = 0;
    goto LABEL_27;
  }
  Profile = (const ColorSyncProfile *)ColorSyncMakeProfile();
  v2 = Profile;
  if (!Profile)
  {
    v9 = 0;
    goto LABEL_29;
  }
  MutableCopy = ColorSyncProfileCreateMutableCopy(Profile);
  v4 = MutableCopy;
  if (MutableCopy)
  {
    v5 = ColorSyncProfileCopyHeader(MutableCopy);
    if (v5)
    {
      v6 = CFDataCreateMutableCopy(0, 128, v5);
      v7 = v6;
      if (v6 && (CFDataSetLength(v6, 128), (MutableBytePtr = CFDataGetMutableBytePtr(v7)) != 0))
      {
        *((_QWORD *)MutableBytePtr + 3) = 0x10001000407D5;
        *((_DWORD *)MutableBytePtr + 8) = 65537;
        ColorSyncProfileSetHeader(v4, v7);
        v9 = CGColorSpaceCreateWithPlatformColorSpace(v4);
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v9 = 0;
      v7 = 0;
    }
    goto LABEL_9;
  }
  v9 = 0;
LABEL_31:
  v7 = 0;
  v5 = 0;
LABEL_9:
  v10 = 13;
  do
  {
    v11 = values[v10];
    if (v11)
      CFRelease(v11);
    v12 = v10-- + 1;
  }
  while (v12 > 1);
  if (v0)
    CFRelease(v0);
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v7)
    CFRelease(v7);
  return v9;
}

BOOL vtcg_bufferContainsAlpha(OSType pixelFormat)
{
  int AppBooleanValue;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  _BOOL8 v5;
  void *value;

  value = 0;
  if ((vtcg_bufferContainsAlpha_sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("force_cgimage_opaque"), CFSTR("com.apple.coremedia"), 0);
    vtcg_bufferContainsAlpha_sForceOpaque = AppBooleanValue;
    vtcg_bufferContainsAlpha_sDidCheck = 1;
    if (!AppBooleanValue)
      goto LABEL_5;
    return 0;
  }
  if (vtcg_bufferContainsAlpha_sForceOpaque)
    return 0;
LABEL_5:
  v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  if (!v3)
    return 0;
  v4 = v3;
  if (CFDictionaryGetValueIfPresent(v3, (const void *)*MEMORY[0x1E0CA9168], (const void **)&value))
    v5 = CFEqual(value, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
  else
    v5 = 0;
  CFRelease(v4);
  return v5;
}

uint64_t vtcg_createDeferredImageProviderWithPixelBuffer(__CVBuffer *a1, OSType *a2, size_t *a3, CGDataProviderRef *a4)
{
  size_t Width;
  uint64_t v9;
  size_t Height;
  size_t v11;
  OSType PixelFormatType;
  OSType CGCompatiblePixelFormat;
  CFTypeRef *v14;
  CFTypeRef *v15;
  size_t BytesPerRow;
  CGDataProviderRef v17;
  uint64_t v18;
  CGDataProviderDirectCallbacks v20;

  *(_OWORD *)&v20.version = xmmword_1E2F64498;
  *(_OWORD *)&v20.releaseBytePointer = *(_OWORD *)&off_1E2F644A8;
  v20.releaseInfo = (CGDataProviderReleaseInfoCallback)_releaseInfoFromPixelBuffer;
  if (a1
    && a4
    && (Width = CVPixelBufferGetWidth(a1)) != 0
    && (v9 = Width, (Height = CVPixelBufferGetHeight(a1)) != 0)
    && (v11 = Height,
        PixelFormatType = CVPixelBufferGetPixelFormatType(a1),
        CGCompatiblePixelFormat = vtcg_getCGCompatiblePixelFormat(a1),
        VTPixelTransferSessionCanTransfer(PixelFormatType, CGCompatiblePixelFormat, 0))
    && (v14 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL)) != 0)
  {
    v15 = v14;
    if (PixelFormatType == 32 || PixelFormatType == 1111970369 || PixelFormatType == 1380411457)
    {
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      v15[1] = CFRetain(a1);
    }
    else
    {
      BytesPerRow = calculateBytesPerRow(CGCompatiblePixelFormat, v9);
      *v15 = CFRetain(a1);
    }
    v15[2] = (CFTypeRef)BytesPerRow;
    v17 = CGDataProviderCreateDirect(v15, BytesPerRow * v11, &v20);
    if (v17)
    {
      if (a2)
        *a2 = CGCompatiblePixelFormat;
      if (a3)
        *a3 = BytesPerRow;
      v18 = 0;
      *a4 = v17;
    }
    else
    {
      v18 = FigSignalErrorAt();
      _releaseInfoFromPixelBuffer(v15);
    }
  }
  else
  {
    v18 = FigSignalErrorAt();
  }
  CGDataProviderRelease(0);
  return v18;
}

uint64_t vtcg_createCGCompatiblePixelBuffer(__CVBuffer *a1, unint64_t a2, CVPixelBufferRef *a3)
{
  size_t Width;
  size_t v7;
  size_t Height;
  size_t v9;
  int CGCompatiblePixelFormat;
  OSType v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFDictionaryRef pixelBufferAttributes;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferAttributes = 0;
  pixelBufferOut = 0;
  Width = CVPixelBufferGetWidth(a1);
  if (!Width)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v7 = Width;
  Height = CVPixelBufferGetHeight(a1);
  if (!Height || !a3)
    goto LABEL_18;
  v9 = Height;
  CGCompatiblePixelFormat = vtcg_getCGCompatiblePixelFormat(a1);
  v11 = CGCompatiblePixelFormat;
  if (!a2)
    a2 = calculateBytesPerRow(CGCompatiblePixelFormat, v7);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v13 = Mutable;
    v14 = FigCFDictionarySetInt32();
    if (!(_DWORD)v14)
      v14 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v13, 2, &pixelBufferAttributes);
    v15 = v14;
    CFRelease(v13);
    if ((_DWORD)v15)
      goto LABEL_13;
    goto LABEL_10;
  }
  v15 = FigSignalErrorAt();
  if (!(_DWORD)v15)
  {
LABEL_10:
    v16 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, v9, v11, pixelBufferAttributes, &pixelBufferOut);
    if ((_DWORD)v16)
    {
LABEL_19:
      v15 = v16;
      goto LABEL_13;
    }
    if (CVPixelBufferGetBytesPerRow(pixelBufferOut) == a2)
    {
      v15 = 0;
      *a3 = pixelBufferOut;
      pixelBufferOut = 0;
      goto LABEL_13;
    }
LABEL_18:
    v16 = FigSignalErrorAt();
    goto LABEL_19;
  }
LABEL_13:
  if (pixelBufferAttributes)
    CFRelease(pixelBufferAttributes);
LABEL_15:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v15;
}

uint64_t vtcg_convertPixelBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v4;
  VTPixelTransferSessionRef v5;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  pixelTransferSessionOut = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  v5 = pixelTransferSessionOut;
  if (!(_DWORD)v4)
  {
    v4 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
    v5 = pixelTransferSessionOut;
  }
  if (v5)
    CFRelease(v5);
  return v4;
}

uint64_t vtcg_createCGImageWithProvider(CGDataProvider *a1, int a2, size_t a3, size_t a4, size_t a5, int a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, CGImageRef *a10)
{
  CGColorSpace *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  CGBitmapInfo UInt32;
  CGColorSpace *DeviceRGB;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  CGImageRef v24;
  CGImageRef v25;
  uint64_t v26;
  size_t bitsPerComponent;

  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a10)
  {
    v26 = FigSignalErrorAt();
    DeviceRGB = 0;
    goto LABEL_32;
  }
  v14 = a9;
  v15 = 8;
  if (a2 == 1380411457)
    v15 = 16;
  bitsPerComponent = v15;
  if (a2 == 1380411457)
    v16 = 64;
  else
    v16 = 32;
  if (a7)
  {
    v17 = a8;
    UInt32 = FigCFNumberGetUInt32();
    if (a9)
    {
LABEL_14:
      DeviceRGB = 0;
      goto LABEL_28;
    }
  }
  else
  {
    if (a2 == 32)
      v20 = 0x4000;
    else
      v20 = 0x2000;
    v17 = a8;
    if (a6 == 2)
    {
      v21 = v20 | 2;
      v22 = a2 == 1380411457;
      v23 = 4353;
    }
    else if (a6 == 1)
    {
      v21 = v20 | 4;
      v22 = a2 == 1380411457;
      v23 = 4355;
    }
    else
    {
      v21 = v20 | 6;
      v22 = a2 == 1380411457;
      v23 = 4357;
    }
    if (v22)
      UInt32 = v23;
    else
      UInt32 = v21;
    if (a9)
      goto LABEL_14;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v14 = DeviceRGB;
  if (!DeviceRGB)
  {
LABEL_34:
    v26 = FigSignalErrorAt();
    goto LABEL_32;
  }
LABEL_28:
  v24 = CGImageCreate(a3, a4, bitsPerComponent, v16, a5, v14, UInt32, a1, 0, 1, kCGRenderingIntentPerceptual);
  if (!v24)
    goto LABEL_34;
  v25 = v24;
  if (v17)
    CGImageSetProperty();
  v26 = 0;
  *a10 = v25;
LABEL_32:
  CGColorSpaceRelease(DeviceRGB);
  return v26;
}

uint64_t VTCreateCGImageFromIOSurfaceAndAttributes(__IOSurface *a1, const __CFDictionary *a2, int a3, uint64_t a4, _QWORD *a5)
{
  __IOSurface *IOSurface;
  size_t Height;
  CGColorSpace *Value;
  CGColorSpace *ColorSpaceFromAttachments;
  CGColorSpace *v13;
  OSType PixelFormat;
  OSType v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  CGImage *v19;
  const __CFDictionary *v21;
  uint64_t v22;
  size_t Width;
  CVPixelBufferRef v24;
  CVPixelBufferRef v25;
  CVPixelBufferRef pixelBufferOut;
  CGImageRef v27;
  CGDataProviderRef v28;
  size_t v29;
  OSType v30[3];

  v30[0] = 0;
  v28 = 0;
  v29 = 0;
  pixelBufferOut = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  if (a1 && a5)
  {
    IOSurface = a1;
    Width = IOSurfaceGetWidth(a1);
    Height = IOSurfaceGetHeight(IOSurface);
    if (!a2)
      goto LABEL_10;
    Value = (CGColorSpace *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA8CD8]);
    if (Value)
    {
      ColorSpaceFromAttachments = Value;
LABEL_6:
      v13 = 0;
      goto LABEL_11;
    }
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA8D68]);
    if (!FigCFEqual()
      || (ColorSpaceFromAttachments = createAppleP3ColorSpace(), (v13 = ColorSpaceFromAttachments) == 0))
    {
      ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(a2);
      v13 = ColorSpaceFromAttachments;
      if (!ColorSpaceFromAttachments)
      {
LABEL_10:
        ColorSpaceFromAttachments = (CGColorSpace *)IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBBF90]);
        v13 = ColorSpaceFromAttachments;
        if (ColorSpaceFromAttachments)
          goto LABEL_11;
        CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], IOSurface, 0, &pixelBufferOut);
        if (!pixelBufferOut)
        {
          ColorSpaceFromAttachments = 0;
          goto LABEL_6;
        }
        v21 = CVBufferCopyAttachments(pixelBufferOut, kCVAttachmentMode_ShouldPropagate);
        v13 = v21;
        if (v21)
        {
          ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v21);
          CFRelease(v13);
          v13 = ColorSpaceFromAttachments;
        }
        else
        {
          ColorSpaceFromAttachments = 0;
        }
      }
    }
LABEL_11:
    PixelFormat = IOSurfaceGetPixelFormat(IOSurface);
    v15 = PixelFormat;
    if (a4 || !vtcg_bufferContainsAlpha(PixelFormat))
    {
      v16 = 0;
      if (a3)
        goto LABEL_19;
    }
    else
    {
      IOSurfaceGetBulkAttachments();
      v16 = 2;
      if (a3)
        goto LABEL_19;
    }
    if (v15 != 32 && v15 != 1111970369 && v15 != 1380411457)
    {
      v22 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], IOSurface, a2, &v25);
      if (!(_DWORD)v22)
      {
        vtcg_createCGCompatiblePixelBuffer(v25, 0, &v24);
        if (v24)
        {
          v22 = vtcg_convertPixelBuffer(v25, v24);
          if (!(_DWORD)v22)
          {
            IOSurface = CVPixelBufferGetIOSurface(v24);
            v17 = vtcg_createDeferredImageProviderWithPixelBuffer(v24, v30, &v29, &v28);
LABEL_20:
            v18 = v17;
            if (!(_DWORD)v17)
            {
              v18 = vtcg_createCGImageWithProvider(v28, v30[0], Width, Height, v29, v16, a4, (uint64_t)IOSurface, ColorSpaceFromAttachments, &v27);
              v19 = v27;
              if ((_DWORD)v18)
                goto LABEL_24;
              *a5 = v27;
              v27 = 0;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v22 = FigSignalErrorAt();
        }
      }
      v18 = v22;
LABEL_23:
      v19 = 0;
      goto LABEL_24;
    }
LABEL_19:
    v17 = vtcg_createDeferredImageProviderWithIOSurface(IOSurface, a2, v30, &v29, &v28);
    goto LABEL_20;
  }
  v18 = FigSignalErrorAt();
  v19 = 0;
  v13 = 0;
LABEL_24:
  CGImageRelease(v19);
  if (v25)
    CFRelease(v25);
  if (v24)
    CFRelease(v24);
  CGDataProviderRelease(v28);
  if (v13)
    CFRelease(v13);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v18;
}

uint64_t vtcg_createDeferredImageProviderWithIOSurface(__IOSurface *a1, const void *a2, OSType *a3, size_t *a4, CGDataProviderRef *a5)
{
  size_t Width;
  size_t v11;
  size_t Height;
  size_t v13;
  OSType PixelFormat;
  __IOSurface **v15;
  __IOSurface **v16;
  size_t BytesPerRow;
  __IOSurface *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  CGDataProviderRef v23;
  uint64_t v24;
  CGDataProviderDirectCallbacks v26;

  *(_OWORD *)&v26.version = xmmword_1E2F644C0;
  *(_OWORD *)&v26.releaseBytePointer = *(_OWORD *)&off_1E2F644D0;
  v26.releaseInfo = (CGDataProviderReleaseInfoCallback)_releaseInfoFromIOSurface;
  if (!a1
    || !a5
    || (Width = IOSurfaceGetWidth(a1)) == 0
    || (v11 = Width, (Height = IOSurfaceGetHeight(a1)) == 0)
    || (v13 = Height,
        PixelFormat = IOSurfaceGetPixelFormat(a1),
        (v15 = (__IOSurface **)malloc_type_calloc(1uLL, 0x20uLL, 0x10600408D5616BCuLL)) == 0))
  {
    v24 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v16 = v15;
  if (PixelFormat == 32 || PixelFormat == 1111970369 || PixelFormat == 1380411457)
  {
    BytesPerRow = IOSurfaceGetBytesPerRow(a1);
    if (a2)
    {
LABEL_10:
      v18 = (__IOSurface *)CFRetain(a2);
      goto LABEL_19;
    }
  }
  else
  {
    v19 = 4 * v11;
    v20 = rowAlignment_bytesPerRowAlignment;
    if (rowAlignment_bytesPerRowAlignment)
    {
      v21 = (v19 + rowAlignment_bytesPerRowAlignment - 1) / (unint64_t)rowAlignment_bytesPerRowAlignment;
    }
    else
    {
      FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
      v20 = rowAlignment_bytesPerRowAlignment;
      v22 = v19 + rowAlignment_bytesPerRowAlignment - 1;
      if (rowAlignment_bytesPerRowAlignment)
      {
        v21 = v22 / rowAlignment_bytesPerRowAlignment;
      }
      else
      {
        FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
        v20 = rowAlignment_bytesPerRowAlignment;
        v21 = v22 / rowAlignment_bytesPerRowAlignment;
        if (!rowAlignment_bytesPerRowAlignment)
        {
          FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
          v20 = rowAlignment_bytesPerRowAlignment;
        }
      }
    }
    BytesPerRow = v21 * v20;
    PixelFormat = 1111970369;
    if (a2)
      goto LABEL_10;
  }
  v18 = 0;
LABEL_19:
  v16[2] = v18;
  CFRetain(a1);
  IOSurfaceIncrementUseCount(a1);
  *v16 = a1;
  v16[3] = (__IOSurface *)BytesPerRow;
  v23 = CGDataProviderCreateDirect(v16, BytesPerRow * v13, &v26);
  if (v23)
  {
    if (a3)
      *a3 = PixelFormat;
    if (a4)
      *a4 = BytesPerRow;
    v24 = 0;
    *a5 = v23;
  }
  else
  {
    v24 = FigSignalErrorAt();
    _releaseInfoFromIOSurface((CFTypeRef *)v16);
  }
LABEL_25:
  CGDataProviderRelease(0);
  return v24;
}

void *_getImageBytePointerFromPixelBuffer(uint64_t a1)
{
  unint64_t v2;
  __CVBuffer *v3;
  __CVBuffer *v4;
  void *result;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_14;
  v3 = *(__CVBuffer **)(a1 + 8);
  if (!v3)
  {
    v4 = *(__CVBuffer **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_14;
    if (vtcg_createCGCompatiblePixelBuffer(*(__CVBuffer **)a1, v2, (CVPixelBufferRef *)&cf)
      || vtcg_convertPixelBuffer(v4, (__CVBuffer *)cf))
    {
      goto LABEL_15;
    }
    v3 = (__CVBuffer *)cf;
  }
  if (CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
LABEL_15:
    result = (void *)cf;
    if (!cf)
      return result;
    CFRelease(cf);
    return 0;
  }
  result = CVPixelBufferGetBaseAddress(v3);
  if (!result)
  {
LABEL_14:
    FigSignalErrorAt();
    goto LABEL_15;
  }
  if (cf)
    *(_QWORD *)(a1 + 8) = v3;
  return result;
}

__CVBuffer *_releaseImageBytePointerFromPixelBuffer(__CVBuffer *result, uint64_t a2)
{
  if (result && a2)
  {
    result = (__CVBuffer *)*((_QWORD *)result + 1);
    if (result)
      return (__CVBuffer *)CVPixelBufferUnlockBaseAddress(result, 1uLL);
  }
  return result;
}

void _releaseInfoFromPixelBuffer(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t vtcg_getCGCompatiblePixelFormat(__CVBuffer *a1)
{
  uint64_t v1;
  OSType PixelFormatType;
  const __CFDictionary *v3;
  const __CFDictionary *v4;

  v1 = 1111970369;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], PixelFormatType);
  if (v3)
  {
    v4 = v3;
    if (CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CA90F0]))
    {
      if (FigCFNumberGetUInt64() <= 9)
        v1 = 1111970369;
      else
        v1 = 1380411457;
    }
    CFRelease(v4);
  }
  return v1;
}

unint64_t calculateBytesPerRow(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = rowAlignment_bytesPerRowAlignment;
  if (a1 == 1380411457)
  {
    v3 = 8 * a2;
    if (!rowAlignment_bytesPerRowAlignment)
      goto LABEL_3;
LABEL_6:
    v5 = (v3 + rowAlignment_bytesPerRowAlignment - 1) / (unint64_t)rowAlignment_bytesPerRowAlignment;
    return v5 * v2;
  }
  v3 = 4 * a2;
  if (rowAlignment_bytesPerRowAlignment)
    goto LABEL_6;
LABEL_3:
  FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
  v2 = rowAlignment_bytesPerRowAlignment;
  v4 = v3 + rowAlignment_bytesPerRowAlignment - 1;
  if (rowAlignment_bytesPerRowAlignment)
  {
    v5 = v4 / rowAlignment_bytesPerRowAlignment;
  }
  else
  {
    FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
    v2 = rowAlignment_bytesPerRowAlignment;
    v5 = v4 / rowAlignment_bytesPerRowAlignment;
    if (!rowAlignment_bytesPerRowAlignment)
    {
      FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
      v2 = rowAlignment_bytesPerRowAlignment;
    }
  }
  return v5 * v2;
}

__IOSurface *_getImageBytePointerFromIOSurface(uint64_t a1)
{
  __IOSurface *BaseAddress;
  unint64_t v3;
  __CVBuffer *v4;
  const __CFDictionary *v5;
  OSType PixelFormat;
  CFTypeRef v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  if (!a1)
    goto LABEL_25;
  BaseAddress = *(__IOSurface **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_27;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3
    || (v4 = *(__CVBuffer **)(a1 + 8), v5 = *(const __CFDictionary **)(a1 + 16), !IOSurfaceGetWidth(*(IOSurfaceRef *)a1))
    || !IOSurfaceGetHeight(BaseAddress))
  {
LABEL_25:
    FigSignalErrorAt();
    goto LABEL_26;
  }
  PixelFormat = IOSurfaceGetPixelFormat(BaseAddress);
  if (PixelFormat == 32 || PixelFormat == 1111970369 || PixelFormat == 1380411457)
  {
    if (!IOSurfaceLock(BaseAddress, 1u, 0))
    {
      BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
      if (BaseAddress)
        goto LABEL_11;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (!v4)
  {
    if (CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], BaseAddress, v5, (CVPixelBufferRef *)&cf)|| vtcg_createCGCompatiblePixelBuffer((__CVBuffer *)cf, v3, (CVPixelBufferRef *)&v8)|| vtcg_convertPixelBuffer((__CVBuffer *)cf, (__CVBuffer *)v8))
    {
      goto LABEL_26;
    }
    v4 = (__CVBuffer *)v8;
  }
  if (CVPixelBufferLockBaseAddress(v4, 1uLL))
  {
LABEL_26:
    BaseAddress = 0;
    goto LABEL_11;
  }
  BaseAddress = (__IOSurface *)CVPixelBufferGetBaseAddress(v4);
  if (!BaseAddress)
  {
LABEL_27:
    FigSignalErrorAt();
    goto LABEL_11;
  }
  if (v8)
  {
    *(_QWORD *)(a1 + 8) = v8;
    v8 = 0;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return BaseAddress;
}

CVPixelBufferRef *_releaseImageBytePointerFromIOSurface(CVPixelBufferRef *result, uint64_t a2)
{
  if (result && a2)
  {
    if (result[1])
    {
      return (CVPixelBufferRef *)CVPixelBufferUnlockBaseAddress(result[1], 1uLL);
    }
    else
    {
      result = (CVPixelBufferRef *)*result;
      if (result)
        return (CVPixelBufferRef *)IOSurfaceUnlock((IOSurfaceRef)result, 1u, 0);
    }
  }
  return result;
}

void _releaseInfoFromIOSurface(CFTypeRef *a1)
{
  __IOSurface *v2;
  CFTypeRef v3;
  CFTypeRef v4;

  if (a1)
  {
    v2 = (__IOSurface *)*a1;
    if (v2)
    {
      IOSurfaceDecrementUseCount(v2);
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
    }
    v3 = a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    v4 = a1[1];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char *v57;
  _BYTE *v58;
  size_t v59;
  char *v60;
  _BYTE *v61;
  unsigned __int16 *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v111;
  float v112;
  float v117;
  float v118;
  float v123;
  float v124;
  float v125;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v176;
  float v177;
  float v178;
  char v179;
  float v180;
  float v181;
  char v182;
  float v183;
  float v184;
  char v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  size_t v196;
  _BYTE *v197;
  unsigned __int16 *v198;
  unsigned int v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * (result[13] * a2 / v7);
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v200 = v19[2];
    v25 = v200 + v24 * v13 + 2 * v12;
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[2];
    v30 = (_BYTE *)(v29 + v28 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v32 = (float)LODWORD(a5);
    v33 = (float)LODWORD(a6);
    v34 = v31 * *(float *)v18;
    v225 = v31 * *(float *)(v18 + 16);
    v226 = v31 * *(float *)(v18 + 8);
    v35 = v31 * *(float *)(v18 + 20);
    *(float *)&v36 = v31 * *(float *)(v18 + 28);
    v223 = *(float *)&v36;
    v224 = v35;
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    v230 = v40;
    v219 = *(float *)(v18 + 40);
    v220 = *(float *)(v18 + 36);
    v217 = *(float *)(v18 + 48) * 0.25;
    v218 = *(float *)(v18 + 44);
    v215 = *(float *)(v18 + 56) * 0.25;
    v216 = *(float *)(v18 + 52) * 0.25;
    v213 = *(float *)(v18 + 64) * 0.25;
    v214 = *(float *)(v18 + 60) * 0.25;
    v211 = *(float *)(v18 + 68) * 0.25;
    v212 = *(float *)(v18 + 72);
    v209 = *(float *)(v18 + 80);
    v210 = *(float *)(v18 + 76);
    v207 = *(float *)(v18 + 88);
    v208 = *(float *)(v18 + 84);
    v205 = *(float *)(v18 + 96);
    v206 = *(float *)(v18 + 92);
    v203 = *(float *)(v18 + 104);
    v204 = *(float *)(v18 + 100);
    v41 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v42 = v18 + 32932;
    v43 = *(unsigned __int8 *)(v18 + 124);
    v44 = v16[1];
    v45 = (_BYTE *)(*v16 + v26 * v17 + v15);
    if (v43 >= 0x11)
      v46 = 0;
    else
      v46 = 16 - v43;
    v47 = v44 + v27 * (v17 / 2);
    v48 = v19[1];
    v49 = (char *)(*v19 + v22 * v13 + 2 * v12);
    v50 = v47 + v15;
    v51 = v48 + v23 * (v13 / 2) + 2 * v12;
    v52 = v46;
    v53 = *(float *)(v18 + 108);
    v54 = *(float *)(v18 + 112);
    v55 = *(float *)(v18 + 116);
    v56 = *(float *)(v18 + 120);
    v228 = (float)LODWORD(a6);
    v229 = (float)LODWORD(a5);
    v227 = v34;
    LOWORD(v40) = *(_WORD *)(v18 + 152);
    v221 = (float)LODWORD(v40);
    v222 = v38;
    v201 = v55;
    v202 = v54;
    do
    {
      v57 = &v49[v22];
      v58 = &v45[v26];
      if (v11)
      {
        v59 = 0;
        v60 = &v49[v22];
        v61 = &v45[v26];
        do
        {
          v62 = (unsigned __int16 *)(v51 + 2 * v59);
          v63 = (float)(v62[1] >> v52) - v33;
          v64 = v226 * v63;
          v65 = v34 * (float)((float)(*(unsigned __int16 *)v49 >> v52) - v32);
          v66 = (float)(v226 * v63) + v65;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)(v226 * v63) + v65;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = (float)(*v62 >> v52) - v33;
          v69 = (float)(v224 * v63) + (float)(v68 * v225);
          v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = v223 * v68;
          v72 = (float)(v223 * v68) + v65;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v34 * (float)((float)(*((unsigned __int16 *)v49 + 1) >> v52) - v32);
          v75 = 8191.0;
          if ((float)(v64 + v74) <= 8191.0)
          {
            v75 = v64 + v74;
            if ((float)(v64 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = 8191.0;
          if ((float)(v69 + v74) <= 8191.0)
          {
            v76 = v69 + v74;
            if ((float)(v69 + v74) < 0.0)
              v76 = 0.0;
          }
          v77 = v71 + v74;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v34 * (float)((float)(*(unsigned __int16 *)v60 >> v52) - v32);
          v80 = 8191.0;
          if ((float)(v64 + v79) <= 8191.0)
          {
            v80 = v64 + v79;
            if ((float)(v64 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            v81 = v69 + v79;
            if ((float)(v69 + v79) < 0.0)
              v81 = 0.0;
          }
          v82 = v71 + v79;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v34 * (float)((float)(*((unsigned __int16 *)v60 + 1) >> v52) - v32);
          v85 = v64 + v84;
          v86 = (float)(v64 + v84) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v69 + v84;
          v86 = (float)(v69 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v86)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v71 + v84;
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H19 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          v111 = (float)((float)((float)(v54 * _S24) + (float)(v53 * _S19)) + (float)(v55 * _S25))
               + (float)(v56 * fmaxf(_S19, fmaxf(_S24, _S25)));
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *((_WORD *)result + llroundf(v112));
          v117 = (float)((float)((float)(v54 * _S28) + (float)(v53 * _S27)) + (float)(v55 * _S30))
               + (float)(v56 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *((_WORD *)result + llroundf(v118));
          v123 = fmaxf(_S8, fmaxf(_S9, _S10));
          v124 = (float)((float)((float)(v54 * _S9) + (float)(v53 * _S8)) + (float)(v55 * _S10)) + (float)(v56 * v123);
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = (float)((float)((float)(v54 * _S9) + (float)(v53 * _S8)) + (float)(v55 * _S10)) + (float)(v56 * v123);
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          v130 = _S19 * _S1;
          v131 = _S24 * _S1;
          v132 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          v134 = _S27 * _S1;
          v135 = _S28 * _S1;
          v136 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v125));
          __asm { FCVT            S2, H1 }
          v138 = _S8 * _S2;
          v139 = _S9 * _S2;
          v140 = _S10 * _S2;
          v141 = (float)((float)((float)(v54 * _S29) + (float)(v53 * _S26)) + (float)(v55 * _S31))
               + (float)(v56 * fmaxf(_S26, fmaxf(_S29, _S31)));
          v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            v142 = v141;
            if (v141 < 0.0)
              v142 = 0.0;
          }
          _H24 = *((_WORD *)result + llroundf(v142));
          __asm { FCVT            S24, H24 }
          v145 = _S26 * _S24;
          v146 = _S29 * _S24;
          v147 = _S31 * _S24;
          v148 = (float)((float)(v210 * v131) + (float)(v130 * v212)) + (float)(v132 * v209);
          v149 = (float)((float)(v207 * v131) + (float)(v130 * v208)) + (float)(v132 * v206);
          _S20 = (float)((float)(v204 * v131) + (float)(v130 * v205)) + (float)(v132 * v203);
          _S22 = (float)((float)(v210 * v135) + (float)(v134 * v212)) + (float)(v136 * v209);
          _S23 = (float)((float)(v207 * v135) + (float)(v134 * v208)) + (float)(v136 * v206);
          _S19 = (float)((float)(v204 * v135) + (float)(v134 * v205)) + (float)(v136 * v203);
          v154 = (float)((float)(v210 * v139) + (float)(v138 * v212)) + (float)(v140 * v209);
          v155 = (float)((float)(v207 * v139) + (float)(v138 * v208)) + (float)(v140 * v206);
          v156 = (float)((float)(v204 * v139) + (float)(v138 * v205)) + (float)(v140 * v203);
          v157 = (float)((float)(v210 * v146) + (float)(v145 * v212)) + (float)(v147 * v209);
          v158 = (float)((float)(v207 * v146) + (float)(v145 * v208)) + (float)(v147 * v206);
          _S26 = (float)((float)(v204 * v146) + (float)(v145 * v205)) + (float)(v147 * v203);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H17 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S19, H19
          }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S26, H26
          }
          v176 = (float)((float)((float)(v219 * _S1) + (float)(v220 * _S3)) + (float)(v218 * _S2)) + v37;
          if (v176 < v37)
            v177 = v37;
          else
            v177 = (float)((float)((float)(v219 * _S1) + (float)(v220 * _S3)) + (float)(v218 * _S2)) + v37;
          v86 = v176 <= v39;
          v178 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v37;
          if (!v86)
            v177 = v39;
          v179 = llroundf(v177);
          if (v178 < v37)
            v180 = v37;
          else
            v180 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v37;
          v86 = v178 <= v39;
          v181 = (float)((float)((float)(v219 * _S24) + (float)(v220 * _S20)) + (float)(v218 * _S25)) + v37;
          if (!v86)
            v180 = v39;
          v182 = llroundf(v180);
          if (v181 < v37)
            v183 = v37;
          else
            v183 = (float)((float)((float)(v219 * _S24) + (float)(v220 * _S20)) + (float)(v218 * _S25)) + v37;
          v86 = v181 <= v39;
          v184 = (float)((float)((float)(v219 * _S23) + (float)(v220 * _S22)) + (float)(v218 * _S26)) + v37;
          if (!v86)
            v183 = v39;
          v185 = llroundf(v183);
          if (v184 < v37)
            v186 = v37;
          else
            v186 = (float)((float)((float)(v219 * _S23) + (float)(v220 * _S22)) + (float)(v218 * _S26)) + v37;
          if (v184 <= v39)
            v187 = v186;
          else
            v187 = v39;
          v188 = (float)((float)(_S3 + _S17) + _S20) + _S22;
          v189 = (float)((float)(_S1 + _S21) + _S24) + _S23;
          *v45 = v179;
          v45[1] = v182;
          *v61 = v185;
          v61[1] = llroundf(v187);
          v190 = (float)((float)(_S2 + _S19) + _S25) + _S26;
          v191 = (float)((float)(v222 + (float)(v188 * v217)) + (float)(v189 * v216)) + (float)(v190 * v215);
          v192 = v221;
          if (v191 <= v221)
          {
            v192 = (float)((float)(v222 + (float)(v188 * v217)) + (float)(v189 * v216)) + (float)(v190 * v215);
            if (v191 < v230)
              v192 = v230;
          }
          v193 = (float)((float)(v222 + (float)(v188 * v214)) + (float)(v189 * v213)) + (float)(v190 * v211);
          *(_BYTE *)(v50 + v59) = llroundf(v192);
          v194 = v221;
          v32 = v229;
          v34 = v227;
          if (v193 <= v221)
          {
            v194 = v193;
            if (v193 < v230)
              v194 = v230;
          }
          v49 += 4;
          v60 += 4;
          v45 += 2;
          v61 += 2;
          *(_BYTE *)(v50 + v59 + 1) = llroundf(v194);
          v59 += 2;
          v33 = v228;
          v55 = v201;
          v54 = v202;
        }
        while (v11 > v59);
      }
      v49 = &v57[v22];
      v51 += v23;
      v45 = &v58[v26];
      v50 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v200 && v29)
    {
      v195 = 0;
      do
      {
        if (v11)
        {
          v196 = v11;
          v197 = v30;
          v198 = (unsigned __int16 *)v25;
          do
          {
            v199 = *v198++;
            *v197++ = llroundf((float)v199 * 0.0038911);
            --v196;
          }
          while (v196);
        }
        v25 += v24;
        v30 += v28;
        ++v195;
      }
      while (v195 != v14);
    }
    else if (v29)
    {
      do
      {
        if (v11)
          result = memset(v30, 255, v11);
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  _BYTE *v63;
  size_t v64;
  char *v65;
  _BYTE *v66;
  unsigned __int16 *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  unsigned int v115;
  float v127;
  float v128;
  float v134;
  float v135;
  float v137;
  float v151;
  float v152;
  float v153;
  char v154;
  float v155;
  float v156;
  char v157;
  float v158;
  float v159;
  char v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  size_t v171;
  _BYTE *v172;
  unsigned __int16 *v173;
  unsigned int v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * v16;
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = v26 + v25 * v13 + 2 * v12;
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (_BYTE *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v188 = v33 * *(float *)(v19 + 16);
    v189 = v33 * *(float *)(v19 + 8);
    v37 = v33 * *(float *)(v19 + 20);
    *(float *)&v38 = v33 * *(float *)(v19 + 28);
    v186 = *(float *)&v38;
    v187 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    v42 = (float)v38;
    v191 = v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    v182 = *(float *)(v19 + 40);
    v183 = *(float *)(v19 + 36);
    v180 = *(float *)(v19 + 48) * 0.25;
    v181 = *(float *)(v19 + 44);
    v178 = *(float *)(v19 + 56) * 0.25;
    v179 = *(float *)(v19 + 52) * 0.25;
    v176 = *(float *)(v19 + 64) * 0.25;
    v177 = *(float *)(v19 + 60) * 0.25;
    v43 = *(float *)(v19 + 72);
    v175 = *(float *)(v19 + 68) * 0.25;
    v45 = *(float *)(v19 + 76);
    v44 = *(float *)(v19 + 80);
    v46 = *(float *)(v19 + 84);
    v47 = *(float *)(v19 + 88);
    v48 = *(float *)(v19 + 92);
    v49 = *(float *)(v19 + 96);
    v50 = *(float *)(v19 + 100);
    v51 = *(float *)(v19 + 104);
    v52 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v53 = v17[1];
    v54 = (_BYTE *)(*v17 + v28 * v18 + v15);
    v55 = *(unsigned __int8 *)(v19 + 124);
    v56 = v20[1];
    v57 = (char *)(*v20 + v23 * v13 + 2 * v12);
    if (v55 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v55;
    v59 = v53 + v29 * (v18 / 2) + v15;
    v60 = v56 + v24 * (v13 / 2) + 2 * v12;
    v61 = v58;
    v190 = v36;
    v184 = (float)LODWORD(v42);
    v185 = v40;
    do
    {
      v62 = &v57[v23];
      v63 = &v54[v28];
      if (v11)
      {
        v64 = 0;
        v65 = &v57[v23];
        v66 = &v54[v28];
        do
        {
          v67 = (unsigned __int16 *)(v60 + 2 * v64);
          v68 = (float)(v67[1] >> v61) - v35;
          v69 = v189 * v68;
          v70 = v36 * (float)((float)(*(unsigned __int16 *)v57 >> v61) - v34);
          v71 = (float)(v189 * v68) + v70;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)(v189 * v68) + v70;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = (float)(*v67 >> v61) - v35;
          v74 = (float)(v187 * v68) + (float)(v73 * v188);
          v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = v186 * v73;
          v77 = (float)(v186 * v73) + v70;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v36 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v61) - v34);
          v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v81 = v74 + v79;
            if ((float)(v74 + v79) < 0.0)
              v81 = 0.0;
          }
          v82 = v76 + v79;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v36 * (float)((float)(*(unsigned __int16 *)v65 >> v61) - v34);
          v85 = 8191.0;
          if ((float)(v69 + v84) <= 8191.0)
          {
            v85 = v69 + v84;
            if ((float)(v69 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v74 + v84) <= 8191.0)
          {
            v86 = v74 + v84;
            if ((float)(v74 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v76 + v84;
          v88 = (float)(v76 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v36 * (float)((float)(*((unsigned __int16 *)v65 + 1) >> v61) - v34);
          v91 = v69 + v90;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v90;
          v88 = (float)(v74 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v88)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v35;
          v96 = v76 + v90;
          v88 = (float)(v76 + v90) <= 8191.0;
          v97 = 8191.0;
          if (v88)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S24, H24
          }
          _H27 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          v115 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S19, H27 }
          _H27 = *(_WORD *)(v52 + 2 * v115);
          __asm { FCVT            S27, H27 }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H25 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          v127 = (float)((float)(v45 * _S5) + (float)(_S4 * v43)) + (float)(_S6 * v44);
          v128 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          _S4 = (float)((float)(v50 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          _S6 = (float)((float)(v45 * _S17) + (float)(_S7 * v43)) + (float)(_S24 * v44);
          _S3 = (float)((float)(v47 * _S17) + (float)(_S7 * v46)) + (float)(_S24 * v48);
          _S7 = (float)((float)(v50 * _S17) + (float)(_S7 * v49)) + (float)(_S24 * v51);
          _S17 = (float)((float)(v45 * _S27) + (float)(_S19 * v43)) + (float)(_S2 * v44);
          v134 = (float)((float)(v47 * _S27) + (float)(_S19 * v46)) + (float)(_S2 * v48);
          v135 = (float)((float)(v50 * _S27) + (float)(_S19 * v49)) + (float)(_S2 * v51);
          _S21 = (float)((float)(v45 * _S25) + (float)(_S1 * v43)) + (float)(_S26 * v44);
          v137 = (float)((float)(v47 * _S25) + (float)(_S1 * v46)) + (float)(_S26 * v48);
          _S1 = (float)((float)(v50 * _S25) + (float)(_S1 * v49)) + (float)(_S26 * v51);
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H3
            FCVT            S7, H7
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S24, H17 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S21) = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H21
            FCVT            S1, H1
          }
          v151 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v39;
          if (v151 < v39)
            v152 = v39;
          else
            v152 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v39;
          v88 = v151 <= v41;
          v153 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v39;
          if (!v88)
            v152 = v41;
          v154 = llroundf(v152);
          if (v153 < v39)
            v155 = v39;
          else
            v155 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v39;
          v88 = v153 <= v41;
          v156 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v39;
          if (!v88)
            v155 = v41;
          v157 = llroundf(v155);
          if (v156 < v39)
            v158 = v39;
          else
            v158 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v39;
          v88 = v156 <= v41;
          v159 = (float)((float)((float)(v182 * _S21) + (float)(v183 * _S17)) + (float)(v181 * _S1)) + v39;
          if (!v88)
            v158 = v41;
          v160 = llroundf(v158);
          if (v159 < v39)
            v161 = v39;
          else
            v161 = (float)((float)((float)(v182 * _S21) + (float)(v183 * _S17)) + (float)(v181 * _S1)) + v39;
          if (v159 <= v41)
            v162 = v161;
          else
            v162 = v41;
          v163 = (float)((float)(_S5 + _S6) + _S3) + _S17;
          v164 = (float)((float)(_S2 + _S19) + _S24) + _S21;
          *v54 = v154;
          v54[1] = v157;
          *v66 = v160;
          v66[1] = llroundf(v162);
          v165 = (float)((float)(_S4 + _S7) + _S25) + _S1;
          v166 = (float)((float)(v185 + (float)(v163 * v180)) + (float)(v164 * v179)) + (float)(v165 * v178);
          v167 = v184;
          if (v166 <= v184)
          {
            v167 = (float)((float)(v185 + (float)(v163 * v180)) + (float)(v164 * v179)) + (float)(v165 * v178);
            if (v166 < v191)
              v167 = v191;
          }
          v168 = (float)((float)(v185 + (float)(v163 * v177)) + (float)(v164 * v176)) + (float)(v165 * v175);
          *(_BYTE *)(v59 + v64) = llroundf(v167);
          v169 = v184;
          v35 = v95;
          if (v168 <= v184)
          {
            v169 = v168;
            if (v168 < v191)
              v169 = v191;
          }
          v57 += 4;
          v65 += 4;
          v54 += 2;
          v66 += 2;
          *(_BYTE *)(v59 + v64 + 1) = llroundf(v169);
          v64 += 2;
          v36 = v190;
        }
        while (v11 > v64);
      }
      v57 = &v62[v23];
      v60 += v24;
      v54 = &v63[v28];
      v59 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      v170 = 0;
      do
      {
        if (v11)
        {
          v171 = v11;
          v172 = v32;
          v173 = (unsigned __int16 *)v27;
          do
          {
            v174 = *v173++;
            *v172++ = llroundf((float)v174 * 0.0038911);
            --v171;
          }
          while (v171);
        }
        v27 += v25;
        v32 += v30;
        ++v170;
      }
      while (v170 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned int v56;
  char v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned __int8 *v64;
  _BYTE *v65;
  size_t v66;
  unsigned __int8 *v67;
  _BYTE *v68;
  unsigned __int16 *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  char v95;
  float v96;
  float v97;
  char v98;
  float v99;
  float v100;
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  size_t v113;
  _BYTE *v114;
  unsigned __int16 *v115;
  unsigned int v116;
  float v117;
  float v118;
  float v119;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = v25 + v24 * v13 + 2 * v12;
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v29 * v17 + v15);
    *(float *)&v32 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v33 = (float)*(unsigned int *)(v18 + 136);
    v34 = *(float *)&v33 / *(float *)&v32;
    LOWORD(v32) = *(_WORD *)(v18 + 140);
    v35 = (float)v32;
    LOWORD(v33) = *(_WORD *)(v18 + 142);
    v36 = (float)v33;
    v37 = v34 * *(float *)v18;
    v118 = v34 * *(float *)(v18 + 16);
    v119 = v34 * *(float *)(v18 + 8);
    v117 = v34 * *(float *)(v18 + 20);
    v38 = *(float *)(v18 + 28);
    v39 = v34 * v38;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    v40 = (float)LODWORD(v38);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    v41 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    v42 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    v43 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v44 = (float)v5;
    v45 = *(float *)(v18 + 36);
    v46 = *(float *)(v18 + 40);
    v47 = *(float *)(v18 + 44);
    v48 = *(float *)(v18 + 48) * 0.25;
    v49 = *(float *)(v18 + 52) * 0.25;
    v50 = *(float *)(v18 + 56) * 0.25;
    v51 = *(float *)(v18 + 60) * 0.25;
    v52 = *(float *)(v18 + 64) * 0.25;
    v53 = *(float *)(v18 + 68) * 0.25;
    v54 = v16[1];
    v55 = (_BYTE *)(*v16 + v27 * v17 + v15);
    v56 = *(unsigned __int8 *)(v18 + 124);
    v57 = 16 - v56;
    v58 = v56 >= 0x11;
    v59 = *v19;
    v60 = v19[1];
    result = (unsigned __int8 *)(v59 + v22 * v13 + 2 * v12);
    if (v58)
      v57 = 0;
    v61 = v54 + v28 * (v17 / 2) + v15;
    v62 = v60 + v23 * (v13 / 2) + 2 * v12;
    v63 = v57;
    do
    {
      v64 = &result[v22];
      v65 = &v55[v27];
      if (v11)
      {
        v66 = 0;
        v67 = &result[v22];
        v68 = &v55[v27];
        do
        {
          v69 = (unsigned __int16 *)(v62 + 2 * v66);
          v70 = (float)(*v69 >> v63) - v36;
          v71 = (float)(v69[1] >> v63) - v36;
          v72 = v119 * v71;
          v73 = (float)(v117 * v71) + (float)(v70 * v118);
          v74 = v39 * v70;
          v75 = v37 * (float)((float)(*(unsigned __int16 *)result >> v63) - v35);
          v76 = v37 * (float)((float)(*((unsigned __int16 *)result + 1) >> v63) - v35);
          v77 = v37 * (float)((float)(*(unsigned __int16 *)v67 >> v63) - v35);
          v78 = v37 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v63) - v35);
          v79 = v72 + v75;
          v80 = v75 + v73;
          v81 = v74 + v75;
          v82 = v72 + v76;
          v83 = v73 + v76;
          v84 = v74 + v76;
          v85 = v72 + v77;
          v86 = v73 + v77;
          v87 = v74 + v77;
          v88 = v72 + v78;
          v89 = v73 + v78;
          v90 = v74 + v78;
          v91 = (float)((float)((float)(v46 * v80) + (float)(v45 * v79)) + (float)(v47 * v81)) + v40;
          if (v91 < v40)
            v92 = v40;
          else
            v92 = (float)((float)((float)(v46 * v80) + (float)(v45 * v79)) + (float)(v47 * v81)) + v40;
          v93 = v91 <= v42;
          v94 = (float)((float)((float)(v46 * v83) + (float)(v45 * v82)) + (float)(v47 * v84)) + v40;
          if (!v93)
            v92 = v42;
          v95 = llroundf(v92);
          if (v94 < v40)
            v96 = v40;
          else
            v96 = (float)((float)((float)(v46 * v83) + (float)(v45 * v82)) + (float)(v47 * v84)) + v40;
          v93 = v94 <= v42;
          v97 = (float)((float)((float)(v46 * v86) + (float)(v45 * v85)) + (float)(v47 * v87)) + v40;
          if (!v93)
            v96 = v42;
          v98 = llroundf(v96);
          if (v97 < v40)
            v99 = v40;
          else
            v99 = (float)((float)((float)(v46 * v86) + (float)(v45 * v85)) + (float)(v47 * v87)) + v40;
          v93 = v97 <= v42;
          v100 = (float)((float)((float)(v46 * v89) + (float)(v45 * v88)) + (float)(v47 * v90)) + v40;
          if (!v93)
            v99 = v42;
          v101 = llroundf(v99);
          if (v100 < v40)
            v102 = v40;
          else
            v102 = (float)((float)((float)(v46 * v89) + (float)(v45 * v88)) + (float)(v47 * v90)) + v40;
          if (v100 > v42)
            v102 = v42;
          v103 = (float)((float)(v79 + v82) + v85) + v88;
          v104 = (float)((float)(v80 + v83) + v86) + v89;
          *v55 = v95;
          v55[1] = v98;
          *v68 = v101;
          v68[1] = llroundf(v102);
          v105 = (float)(v41 + (float)(v103 * v48)) + (float)(v104 * v49);
          v106 = (float)((float)(v81 + v84) + v87) + v90;
          v107 = v105 + (float)(v106 * v50);
          v108 = v44;
          if (v107 <= v44)
          {
            v108 = v105 + (float)(v106 * v50);
            if (v107 < v43)
              v108 = v43;
          }
          v109 = (float)(v41 + (float)(v103 * v51)) + (float)(v104 * v52);
          v110 = v109 + (float)(v106 * v53);
          *(_BYTE *)(v61 + v66) = llroundf(v108);
          v111 = v44;
          if (v110 <= v44)
          {
            v111 = v109 + (float)(v106 * v53);
            if (v110 < v43)
              v111 = v43;
          }
          result += 4;
          v67 += 4;
          v55 += 2;
          v68 += 2;
          *(_BYTE *)(v61 + v66 + 1) = llroundf(v111);
          v66 += 2;
        }
        while (v11 > v66);
      }
      result = &v64[v22];
      v62 += v23;
      v55 = &v65[v27];
      v61 += v28;
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      v112 = 0;
      do
      {
        if (v11)
        {
          v113 = v11;
          v114 = v31;
          v115 = (unsigned __int16 *)v26;
          do
          {
            v116 = *v115++;
            *v114++ = llroundf((float)v116 * 0.0038911);
            --v113;
          }
          while (v113);
        }
        v26 += v24;
        v31 += v29;
        ++v112;
      }
      while (v112 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = (unsigned __int8 *)memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  float v55;
  float v56;
  float v57;
  float v58;
  char *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  char *v62;
  unsigned __int8 *v63;
  unsigned __int16 *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v113;
  float v114;
  float v119;
  float v120;
  float v125;
  float v126;
  float v127;
  float v132;
  float v133;
  float v134;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v178;
  float v179;
  float v180;
  unsigned int v181;
  float v182;
  float v183;
  unsigned int v184;
  float v185;
  float v186;
  unsigned int v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  _WORD *v195;
  float v196;
  float v197;
  size_t v198;
  uint64_t v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (uint64_t *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v200 = v19[2];
    v25 = (char *)(v200 + v24 * v13 + 2 * v12);
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v199 = v16[2];
    v29 = (char *)(v199 + v28 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v30 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = v30 * *(float *)v18;
    v225 = v30 * *(float *)(v18 + 16);
    v226 = v30 * *(float *)(v18 + 8);
    v34 = v30 * *(float *)(v18 + 20);
    *(float *)&v35 = v30 * *(float *)(v18 + 28);
    v223 = *(float *)&v35;
    v224 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    v39 = (float)v35;
    v230 = v39;
    v219 = *(float *)(v18 + 40);
    v220 = *(float *)(v18 + 36);
    v217 = *(float *)(v18 + 48) * 0.25;
    v218 = *(float *)(v18 + 44);
    v215 = *(float *)(v18 + 56) * 0.25;
    v216 = *(float *)(v18 + 52) * 0.25;
    v213 = *(float *)(v18 + 64) * 0.25;
    v214 = *(float *)(v18 + 60) * 0.25;
    v211 = *(float *)(v18 + 68) * 0.25;
    v212 = *(float *)(v18 + 72);
    v209 = *(float *)(v18 + 80);
    v210 = *(float *)(v18 + 76);
    v207 = *(float *)(v18 + 88);
    v208 = *(float *)(v18 + 84);
    v205 = *(float *)(v18 + 96);
    v206 = *(float *)(v18 + 92);
    v203 = *(float *)(v18 + 104);
    v204 = *(float *)(v18 + 100);
    v40 = v18 + 164;
    v41 = v18 + 16548;
    v42 = v18 + 32932;
    v43 = *v16;
    v44 = v16[1];
    result = (unsigned __int8 *)(v43 + *v21 * v17 + 2 * v15);
    v45 = *(unsigned __int8 *)(v18 + 132);
    if (v45 >= 0x11)
      v46 = 0;
    else
      v46 = 16 - v45;
    v47 = *(unsigned __int8 *)(v18 + 124);
    v48 = 16 - v47;
    v49 = v19[1];
    v50 = (char *)(*v19 + v22 * v13 + 2 * v12);
    if (v47 >= 0x11)
      v48 = 0;
    v51 = v44 + v21[1] * (v17 / 2) + 2 * v15;
    v52 = v49 + v20[1] * (v13 / 2) + 2 * v12;
    v53 = v48;
    v54 = v46;
    v55 = *(float *)(v18 + 108);
    v56 = *(float *)(v18 + 112);
    v57 = *(float *)(v18 + 116);
    v58 = *(float *)(v18 + 120);
    v228 = (float)LODWORD(a6);
    v229 = (float)LODWORD(a5);
    v227 = v33;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    v221 = (float)LODWORD(v39);
    v222 = v37;
    v201 = v57;
    v202 = v56;
    do
    {
      v59 = &v50[v22];
      v60 = &result[v26];
      if (v11)
      {
        v61 = 0;
        v62 = &v50[v22];
        v63 = &result[v26];
        do
        {
          v64 = (unsigned __int16 *)(v52 + 2 * v61);
          v65 = (float)(v64[1] >> v53) - v32;
          v66 = v226 * v65;
          v67 = v33 * (float)((float)(*(unsigned __int16 *)v50 >> v53) - v31);
          v68 = (float)(v226 * v65) + v67;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = (float)(v226 * v65) + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = (float)(*v64 >> v53) - v32;
          v71 = (float)(v224 * v65) + (float)(v70 * v225);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v223 * v70;
          v74 = (float)(v223 * v70) + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v33 * (float)((float)(*((unsigned __int16 *)v50 + 1) >> v53) - v31);
          v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v76;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v33 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v31);
          v82 = 8191.0;
          if ((float)(v66 + v81) <= 8191.0)
          {
            v82 = v66 + v81;
            if ((float)(v66 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            v83 = v71 + v81;
            if ((float)(v71 + v81) < 0.0)
              v83 = 0.0;
          }
          v84 = v73 + v81;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v33 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v31);
          v87 = v66 + v86;
          v88 = (float)(v66 + v86) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v71 + v86;
          v88 = (float)(v71 + v86) <= 8191.0;
          v91 = 8191.0;
          if (v88)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v73 + v86;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H19 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v113 = (float)((float)((float)(v56 * _S24) + (float)(v55 * _S19)) + (float)(v57 * _S25))
               + (float)(v58 * fmaxf(_S19, fmaxf(_S24, _S25)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *(_WORD *)(v41 + 2 * llroundf(v114));
          v119 = (float)((float)((float)(v56 * _S28) + (float)(v55 * _S27)) + (float)(v57 * _S30))
               + (float)(v58 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(v120));
          v125 = fmaxf(_S8, fmaxf(_S9, _S10));
          v126 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v125);
          v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            v127 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v125);
            if (v126 < 0.0)
              v127 = 0.0;
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          v132 = _S19 * _S1;
          v133 = _S24 * _S1;
          v134 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          v136 = _S27 * _S1;
          v137 = _S28 * _S1;
          v138 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(v127));
          __asm { FCVT            S2, H1 }
          v140 = _S8 * _S2;
          v141 = _S9 * _S2;
          v142 = _S10 * _S2;
          v143 = (float)((float)((float)(v56 * _S29) + (float)(v55 * _S26)) + (float)(v57 * _S31))
               + (float)(v58 * fmaxf(_S26, fmaxf(_S29, _S31)));
          v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            v144 = v143;
            if (v143 < 0.0)
              v144 = 0.0;
          }
          _H24 = *(_WORD *)(v41 + 2 * llroundf(v144));
          __asm { FCVT            S24, H24 }
          v147 = _S26 * _S24;
          v148 = _S29 * _S24;
          v149 = _S31 * _S24;
          v150 = (float)((float)(v210 * v133) + (float)(v132 * v212)) + (float)(v134 * v209);
          v151 = (float)((float)(v207 * v133) + (float)(v132 * v208)) + (float)(v134 * v206);
          _S20 = (float)((float)(v204 * v133) + (float)(v132 * v205)) + (float)(v134 * v203);
          _S22 = (float)((float)(v210 * v137) + (float)(v136 * v212)) + (float)(v138 * v209);
          _S23 = (float)((float)(v207 * v137) + (float)(v136 * v208)) + (float)(v138 * v206);
          _S19 = (float)((float)(v204 * v137) + (float)(v136 * v205)) + (float)(v138 * v203);
          v156 = (float)((float)(v210 * v141) + (float)(v140 * v212)) + (float)(v142 * v209);
          v157 = (float)((float)(v207 * v141) + (float)(v140 * v208)) + (float)(v142 * v206);
          v158 = (float)((float)(v204 * v141) + (float)(v140 * v205)) + (float)(v142 * v203);
          v159 = (float)((float)(v210 * v148) + (float)(v147 * v212)) + (float)(v149 * v209);
          v160 = (float)((float)(v207 * v148) + (float)(v147 * v208)) + (float)(v149 * v206);
          v161 = (float)((float)(v204 * v148) + (float)(v147 * v205)) + (float)(v149 * v203);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S21, H20 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v178 = (float)((float)((float)(v219 * _S2) + (float)(v220 * _S1)) + (float)(v218 * _S3)) + v36;
          if (v178 < v36)
            v179 = v36;
          else
            v179 = (float)((float)((float)(v219 * _S2) + (float)(v220 * _S1)) + (float)(v218 * _S3)) + v36;
          v88 = v178 <= v38;
          v180 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v36;
          if (!v88)
            v179 = v38;
          v181 = llroundf(v179);
          if (v180 < v36)
            v182 = v36;
          else
            v182 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v36;
          v88 = v180 <= v38;
          v183 = (float)((float)((float)(v219 * _S25) + (float)(v220 * _S24)) + (float)(v218 * _S26)) + v36;
          if (!v88)
            v182 = v38;
          v184 = llroundf(v182);
          if (v183 < v36)
            v185 = v36;
          else
            v185 = (float)((float)((float)(v219 * _S25) + (float)(v220 * _S24)) + (float)(v218 * _S26)) + v36;
          v88 = v183 <= v38;
          v186 = (float)((float)((float)(v219 * _S22) + (float)(v220 * _S20)) + (float)(v218 * _S23)) + v36;
          if (!v88)
            v185 = v38;
          v187 = llroundf(v185);
          if (v186 < v36)
            v188 = v36;
          else
            v188 = (float)((float)((float)(v219 * _S22) + (float)(v220 * _S20)) + (float)(v218 * _S23)) + v36;
          if (v186 <= v38)
            v189 = v188;
          else
            v189 = v38;
          v190 = (float)((float)(_S1 + _S17) + _S24) + _S20;
          v191 = (float)((float)(_S2 + _S21) + _S25) + _S22;
          *(_WORD *)result = v181 << v54;
          *((_WORD *)result + 1) = v184 << v54;
          *(_WORD *)v63 = v187 << v54;
          *((_WORD *)v63 + 1) = llroundf(v189) << v54;
          v192 = (float)((float)(_S3 + _S19) + _S26) + _S23;
          v193 = (float)((float)(v222 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v215);
          v194 = v221;
          if (v193 <= v221)
          {
            v194 = (float)((float)(v222 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v215);
            if (v193 < v230)
              v194 = v230;
          }
          v195 = (_WORD *)(v51 + 2 * v61);
          v196 = (float)((float)(v222 + (float)(v190 * v214)) + (float)(v191 * v213)) + (float)(v192 * v211);
          *v195 = llroundf(v194) << v54;
          v197 = v221;
          v31 = v229;
          v33 = v227;
          if (v196 <= v221)
          {
            v197 = v196;
            if (v196 < v230)
              v197 = v230;
          }
          v50 += 4;
          v62 += 4;
          result += 4;
          v63 += 4;
          v195[1] = llroundf(v197) << v54;
          v61 += 2;
          v32 = v228;
          v57 = v201;
          v56 = v202;
        }
        while (v11 > v61);
      }
      v50 = &v59[v22];
      v52 += v23;
      result = &v60[v26];
      v51 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v200 && v199)
    {
      v198 = 2 * v11;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v25, v198);
        v25 += v24;
        v29 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v199)
    {
      do
      {
        if (v11)
          result = (unsigned __int8 *)memset(v29, 255, 2 * v11);
        v29 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned __int8 *v56;
  char *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  char *v60;
  unsigned __int16 *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v118;
  float v119;
  float v120;
  float v122;
  float v123;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  unsigned int v140;
  float v143;
  float v144;
  float v145;
  unsigned int v146;
  float v147;
  float v148;
  unsigned int v149;
  float v150;
  float v151;
  unsigned int v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  _WORD *v160;
  float v161;
  float v162;
  size_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v164 = v19[2];
    v25 = (char *)(v164 + v24 * v13 + 2 * v12);
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[2];
    v30 = (char *)(v29 + v28 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v32 = (float)LODWORD(a5);
    v33 = (float)LODWORD(a6);
    v34 = v31 * *(float *)v18;
    v187 = v31 * *(float *)(v18 + 16);
    v188 = v31 * *(float *)(v18 + 8);
    v35 = v31 * *(float *)(v18 + 20);
    *(float *)&v36 = v31 * *(float *)(v18 + 28);
    v185 = *(float *)&v36;
    v186 = v35;
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    v189 = v40;
    LOWORD(v40) = *(_WORD *)(v18 + 152);
    v181 = *(float *)(v18 + 40);
    v182 = *(float *)(v18 + 36);
    v179 = *(float *)(v18 + 48) * 0.25;
    v180 = *(float *)(v18 + 44);
    v177 = *(float *)(v18 + 56) * 0.25;
    v178 = *(float *)(v18 + 52) * 0.25;
    v175 = *(float *)(v18 + 64) * 0.25;
    v176 = *(float *)(v18 + 60) * 0.25;
    v173 = *(float *)(v18 + 68) * 0.25;
    v174 = *(float *)(v18 + 72);
    v171 = *(float *)(v18 + 80);
    v172 = *(float *)(v18 + 76);
    v169 = *(float *)(v18 + 88);
    v170 = *(float *)(v18 + 84);
    v167 = *(float *)(v18 + 96);
    v168 = *(float *)(v18 + 92);
    v165 = *(float *)(v18 + 104);
    v166 = *(float *)(v18 + 100);
    v41 = v18 + 164;
    v42 = v18 + 16548;
    v43 = v16[1];
    v44 = (char *)(*v16 + v26 * v17 + 2 * v15);
    v45 = *v19;
    v46 = v19[1];
    result = (unsigned __int8 *)(v45 + *v20 * v13 + 2 * v12);
    v47 = *(unsigned __int8 *)(v18 + 132);
    _CF = v47 >= 0x11;
    v49 = 16 - v47;
    if (_CF)
      v49 = 0;
    v50 = *(unsigned __int8 *)(v18 + 124);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = v43 + v27 * (v17 / 2) + 2 * v15;
    v53 = v46 + v20[1] * (v13 / 2) + 2 * v12;
    v54 = v51;
    v55 = v49;
    v183 = (float)LODWORD(v40);
    v184 = v38;
    do
    {
      v56 = &result[v22];
      v57 = &v44[v26];
      if (v11)
      {
        v58 = 0;
        v59 = &result[v22];
        v60 = &v44[v26];
        do
        {
          v61 = (unsigned __int16 *)(v53 + 2 * v58);
          v62 = (float)(v61[1] >> v54) - v33;
          v63 = v188 * v62;
          v64 = v34 * (float)((float)(*(unsigned __int16 *)result >> v54) - v32);
          v65 = (float)(v188 * v62) + v64;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = (float)(v188 * v62) + v64;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = (float)(*v61 >> v54) - v33;
          v68 = (float)(v186 * v62) + (float)(v67 * v187);
          v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = v185 * v67;
          v71 = (float)(v185 * v67) + v64;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v34 * (float)((float)(*((unsigned __int16 *)result + 1) >> v54) - v32);
          v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            v75 = v68 + v73;
            if ((float)(v68 + v73) < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v73;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v34 * (float)((float)(*(unsigned __int16 *)v59 >> v54) - v32);
          v79 = 8191.0;
          if ((float)(v63 + v78) <= 8191.0)
          {
            v79 = v63 + v78;
            if ((float)(v63 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v80 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v70 + v78;
          v82 = (float)(v70 + v78) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = v34 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v54) - v32);
          v85 = v63 + v84;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v68 + v84;
          v82 = (float)(v68 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v70 + v84;
          v82 = (float)(v70 + v84) <= 8191.0;
          v90 = 8191.0;
          if (v82)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H4 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H27 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
          }
          _H25 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v118 = (float)((float)(v172 * _S5) + (float)(_S4 * v174)) + (float)(_S6 * v171);
          v119 = (float)((float)(v169 * _S5) + (float)(_S4 * v170)) + (float)(_S6 * v168);
          v120 = (float)((float)(v166 * _S5) + (float)(_S4 * v167)) + (float)(_S6 * v165);
          _S3 = (float)((float)(v172 * _S17) + (float)(_S7 * v174)) + (float)(_S24 * v171);
          v122 = (float)((float)(v169 * _S17) + (float)(_S7 * v170)) + (float)(_S24 * v168);
          v123 = (float)((float)(v166 * _S17) + (float)(_S7 * v167)) + (float)(_S24 * v165);
          _S17 = (float)((float)(v172 * _S19) + (float)(_S27 * v174)) + (float)(_S2 * v171);
          v125 = (float)((float)(v169 * _S19) + (float)(_S27 * v170)) + (float)(_S2 * v168);
          v126 = (float)((float)(v166 * _S19) + (float)(_S27 * v167)) + (float)(_S2 * v165);
          v127 = (float)((float)(v172 * _S25) + (float)(_S1 * v174)) + (float)(_S26 * v171);
          v128 = (float)((float)(v169 * _S25) + (float)(_S1 * v170)) + (float)(_S26 * v168);
          v129 = (float)((float)(v166 * _S25) + (float)(_S1 * v167)) + (float)(_S26 * v165);
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H3
          }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H17
          }
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          v140 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * v140);
          __asm { FCVT            S17, H17 }
          v143 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S2)) + v37;
          if (v143 < v37)
            v144 = v37;
          else
            v144 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S2)) + v37;
          v82 = v143 <= v39;
          v145 = (float)((float)((float)(v181 * _S19) + (float)(v182 * _S6)) + (float)(v180 * _S7)) + v37;
          if (!v82)
            v144 = v39;
          v146 = llroundf(v144);
          if (v145 < v37)
            v147 = v37;
          else
            v147 = (float)((float)((float)(v181 * _S19) + (float)(v182 * _S6)) + (float)(v180 * _S7)) + v37;
          v82 = v145 <= v39;
          v148 = (float)((float)((float)(v181 * _S25) + (float)(v182 * _S24)) + (float)(v180 * _S26)) + v37;
          if (!v82)
            v147 = v39;
          v149 = llroundf(v147);
          if (v148 < v37)
            v150 = v37;
          else
            v150 = (float)((float)((float)(v181 * _S25) + (float)(v182 * _S24)) + (float)(v180 * _S26)) + v37;
          v82 = v148 <= v39;
          v151 = (float)((float)((float)(v181 * _S1) + (float)(v182 * _S3)) + (float)(v180 * _S17)) + v37;
          if (!v82)
            v150 = v39;
          v152 = llroundf(v150);
          if (v151 < v37)
            v153 = v37;
          else
            v153 = (float)((float)((float)(v181 * _S1) + (float)(v182 * _S3)) + (float)(v180 * _S17)) + v37;
          if (v151 <= v39)
            v154 = v153;
          else
            v154 = v39;
          v155 = (float)((float)(_S4 + _S6) + _S24) + _S3;
          v156 = (float)((float)(_S5 + _S19) + _S25) + _S1;
          *(_WORD *)v44 = v146 << v55;
          *((_WORD *)v44 + 1) = v149 << v55;
          *(_WORD *)v60 = v152 << v55;
          *((_WORD *)v60 + 1) = llroundf(v154) << v55;
          v157 = (float)((float)(_S2 + _S7) + _S26) + _S17;
          v158 = (float)((float)(v184 + (float)(v155 * v179)) + (float)(v156 * v178)) + (float)(v157 * v177);
          v159 = v183;
          if (v158 <= v183)
          {
            v159 = (float)((float)(v184 + (float)(v155 * v179)) + (float)(v156 * v178)) + (float)(v157 * v177);
            if (v158 < v189)
              v159 = v189;
          }
          v160 = (_WORD *)(v52 + 2 * v58);
          v161 = (float)((float)(v184 + (float)(v155 * v176)) + (float)(v156 * v175)) + (float)(v157 * v173);
          *v160 = llroundf(v159) << v55;
          v162 = v183;
          if (v161 <= v183)
          {
            v162 = v161;
            if (v161 < v189)
              v162 = v189;
          }
          result += 4;
          v59 += 4;
          v44 += 4;
          v60 += 4;
          v160[1] = llroundf(v162) << v55;
          v58 += 2;
        }
        while (v11 > v58);
      }
      result = &v56[v22];
      v53 += v23;
      v44 = &v57[v26];
      v52 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v164 && v29)
    {
      v163 = 2 * v11;
      do
      {
        result = (unsigned __int8 *)memcpy(v30, v25, v163);
        v25 += v24;
        v30 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v29)
    {
      do
      {
        if (v11)
          result = (unsigned __int8 *)memset(v30, 255, 2 * v11);
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_rgb_xf420_GCD(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  BOOL v55;
  char v56;
  char v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unsigned __int16 *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  _WORD *v107;
  float v108;
  float v109;
  size_t v110;
  float v111;
  float v112;
  float v113;
  float v114;

  v2 = *(_QWORD *)((char *)result + 28);
  v3 = 2 * *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)((char *)result + 20);
    v8 = *(_QWORD *)((char *)result + 36);
    v9 = *(_QWORD *)((char *)result + 44) + 2 * v4;
    v10 = 2 * v5 - 2 * v4;
    v11 = result[14];
    v12 = (_QWORD *)result[16];
    v13 = result[15] + 2 * (result[13] * a2 / v3);
    v14 = result[19];
    v16 = (_QWORD *)result[7];
    v15 = (uint64_t *)result[8];
    v17 = (uint64_t *)result[17];
    v18 = *v15;
    v19 = v15[1];
    v20 = v15[2];
    v21 = v16[2];
    v22 = (char *)(v21 + v20 * v9 + 2 * v8);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v12[2];
    v27 = (char *)(v26 + v25 * v13 + 2 * v11);
    *(float *)&v28 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&v29 = (float)*(unsigned int *)(v14 + 136);
    v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v14 + 140);
    v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v14 + 142);
    v32 = (float)v29;
    v33 = v30 * *(float *)v14;
    v113 = v30 * *(float *)(v14 + 16);
    v114 = v30 * *(float *)(v14 + 8);
    v34 = v30 * *(float *)(v14 + 20);
    *(float *)&v35 = v30 * *(float *)(v14 + 28);
    v111 = *(float *)&v35;
    v112 = v34;
    LOWORD(v35) = *(_WORD *)(v14 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v14 + 36);
    v42 = *(float *)(v14 + 40);
    v43 = *(float *)(v14 + 44);
    v44 = *(float *)(v14 + 48) * 0.25;
    v45 = *(float *)(v14 + 52) * 0.25;
    v46 = *(float *)(v14 + 56) * 0.25;
    v47 = *(float *)(v14 + 60) * 0.25;
    v48 = *(float *)(v14 + 64) * 0.25;
    v49 = *(float *)(v14 + 68) * 0.25;
    v50 = v12[1];
    v51 = (char *)(*v12 + v23 * v13 + 2 * v11);
    v52 = v16[1];
    v53 = (char *)(*v16 + v18 * v9 + 2 * v8);
    v54 = *(unsigned __int8 *)(v14 + 132);
    v55 = v54 >= 0x11;
    v56 = 16 - v54;
    if (v55)
      v57 = 0;
    else
      v57 = v56;
    v58 = *(unsigned __int8 *)(v14 + 124);
    v59 = 16 - v58;
    if (v58 >= 0x11)
      v59 = 0;
    if (v13 >= 0)
      v60 = v13;
    else
      v60 = v13 + 1;
    v61 = v50 + v24 * (v60 >> 1) + 2 * v11;
    if (v9 >= 0)
      v62 = v9;
    else
      v62 = v9 + 1;
    result = (_QWORD *)(v52 + v19 * (v62 >> 1) + 2 * v8);
    v63 = v59;
    v64 = v57;
    do
    {
      v65 = &v53[v18];
      v66 = &v51[v23];
      if (v7)
      {
        v67 = 0;
        v68 = &v53[v18];
        v69 = &v51[v23];
        do
        {
          v70 = (unsigned __int16 *)result + v67;
          v71 = (float)(*v70 >> v63) - v32;
          v72 = (float)(v70[1] >> v63) - v32;
          v73 = v114 * v72;
          v74 = (float)(v112 * v72) + (float)(v71 * v113);
          v75 = v111 * v71;
          v76 = v33 * (float)((float)(*(unsigned __int16 *)v53 >> v63) - v31);
          v77 = (float)(v114 * v72) + v76;
          v78 = v76 + v74;
          v79 = v75 + v76;
          v80 = (float)((float)((float)(v42 * (float)(v76 + v74)) + (float)(v41 * v77))
                      + (float)(v43 * (float)(v75 + v76)))
              + v36;
          v81 = v38;
          if (v80 <= v38)
          {
            v81 = v80;
            if (v80 < v36)
              v81 = v36;
          }
          v82 = v33 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v63) - v31);
          v83 = *(unsigned __int16 *)v68;
          v84 = *((unsigned __int16 *)v68 + 1);
          v85 = v73 + v82;
          v86 = v74 + v82;
          v87 = v75 + v82;
          v88 = (float)((float)((float)(v42 * (float)(v74 + v82)) + (float)(v41 * (float)(v73 + v82)))
                      + (float)(v43 * (float)(v75 + v82)))
              + v36;
          *(_WORD *)v51 = llroundf(v81) << v64;
          v89 = v38;
          if (v88 <= v38)
          {
            v89 = v88;
            if (v88 < v36)
              v89 = v36;
          }
          v90 = v33 * (float)((float)(int)(v83 >> v63) - v31);
          v91 = v73 + v90;
          v92 = v74 + v90;
          v93 = v75 + v90;
          v94 = (float)((float)((float)(v42 * (float)(v74 + v90)) + (float)(v41 * (float)(v73 + v90)))
                      + (float)(v43 * (float)(v75 + v90)))
              + v36;
          *((_WORD *)v51 + 1) = llroundf(v89) << v64;
          v95 = v38;
          if (v94 <= v38)
          {
            v95 = v94;
            if (v94 < v36)
              v95 = v36;
          }
          v96 = v33 * (float)((float)(int)(v84 >> v63) - v31);
          v97 = v73 + v96;
          v98 = v74 + v96;
          v99 = v75 + v96;
          v100 = (float)((float)((float)(v42 * v98) + (float)(v41 * v97)) + (float)(v43 * (float)(v75 + v96))) + v36;
          *(_WORD *)v69 = llroundf(v95) << v64;
          v101 = v38;
          if (v100 <= v38)
          {
            v101 = v100;
            if (v100 < v36)
              v101 = v36;
          }
          *((_WORD *)v69 + 1) = llroundf(v101) << v64;
          v102 = (float)((float)(v77 + v85) + v91) + v97;
          v103 = (float)((float)(v78 + v86) + v92) + v98;
          v104 = (float)((float)(v79 + v87) + v93) + v99;
          v105 = (float)((float)(v37 + (float)(v102 * v44)) + (float)(v103 * v45)) + (float)(v104 * v46);
          v106 = v40;
          if (v105 <= v40)
          {
            v106 = (float)((float)(v37 + (float)(v102 * v44)) + (float)(v103 * v45)) + (float)(v104 * v46);
            if (v105 < v39)
              v106 = v39;
          }
          v107 = (_WORD *)(v61 + 2 * v67);
          v108 = (float)((float)(v37 + (float)(v102 * v47)) + (float)(v103 * v48)) + (float)(v104 * v49);
          *v107 = llroundf(v106) << v64;
          v109 = v40;
          if (v108 <= v40)
          {
            v109 = v108;
            if (v108 < v39)
              v109 = v39;
          }
          v53 += 4;
          v68 += 4;
          v51 += 4;
          v69 += 4;
          v107[1] = llroundf(v109) << v64;
          v67 += 2;
        }
        while (v7 > v67);
      }
      v53 = &v65[v18];
      result = (_QWORD *)((char *)result + v19);
      v51 = &v66[v23];
      v61 += v24;
      v6 += 2;
    }
    while (v10 > v6);
    if (v21 && v26)
    {
      v110 = 2 * v7;
      do
      {
        result = memcpy(v27, v22, v110);
        v22 += v20;
        v27 += v25;
        --v10;
      }
      while (v10);
    }
    else if (v26)
    {
      do
      {
        if (v7)
          result = memset(v27, 255, 2 * v7);
        v27 += v25;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v53;
  float v54;
  float v55;
  float v56;
  float v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  size_t v61;
  char *v62;
  _BYTE *v63;
  unsigned __int16 *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v112;
  float v113;
  float v114;
  float v119;
  float v120;
  float v125;
  float v126;
  float v127;
  float v132;
  float v133;
  float v134;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v159;
  unsigned int v161;
  unsigned int v165;
  unsigned int v168;
  unsigned int v171;
  unsigned int v173;
  unsigned int v174;
  float v175;
  float v176;
  float v177;
  char v178;
  float v179;
  float v180;
  char v181;
  float v185;
  float v191;
  float v192;
  float v193;
  float v195;
  float v196;
  float v197;
  char v200;
  float v201;
  float v202;
  char v203;
  float v204;
  float v205;
  float v206;
  char v207;
  float v208;
  float v209;
  char v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  uint64_t v219;
  size_t v220;
  _BYTE *v221;
  unsigned __int16 *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v224 = v20[2];
    v227 = v19[2];
    v23 = v227 + v224 * v12 + 2 * v11;
    v24 = *v21;
    v25 = v21[1];
    v225 = v21[2];
    v226 = v16[2];
    v26 = (_BYTE *)(v226 + v225 * v17 + v14);
    v27 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v28 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v29 = (float)LODWORD(a5);
    v30 = v27 * *(float *)v18;
    v251 = v27 * *(float *)(v18 + 16);
    v252 = v27 * *(float *)(v18 + 8);
    v31 = v27 * *(float *)(v18 + 20);
    *(float *)&v32 = v27 * *(float *)(v18 + 28);
    v249 = *(float *)&v32;
    v250 = v31;
    LOWORD(v32) = *(_WORD *)(v18 + 144);
    v33 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 146);
    v34 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 148);
    v35 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 150);
    v36 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 152);
    v37 = (float)v32;
    v246 = *(float *)(v18 + 40);
    v247 = *(float *)(v18 + 36);
    v244 = *(float *)(v18 + 48) * 0.5;
    v245 = *(float *)(v18 + 44);
    v242 = *(float *)(v18 + 56) * 0.5;
    v243 = *(float *)(v18 + 52) * 0.5;
    v38 = *(float *)(v18 + 64) * 0.5;
    v240 = *(float *)(v18 + 76);
    v241 = *(float *)(v18 + 72);
    v238 = *(float *)(v18 + 84);
    v239 = *(float *)(v18 + 80);
    v236 = *(float *)(v18 + 92);
    v237 = *(float *)(v18 + 88);
    v234 = *(float *)(v18 + 100);
    v235 = *(float *)(v18 + 96);
    v233 = *(float *)(v18 + 104);
    v39 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v40 = v16[1];
    v41 = (_BYTE *)(*v16 + *v21 * v17 + v14);
    v42 = v40 + v25 * v17 + v14;
    if (!v40)
      v42 = 0;
    v43 = *(unsigned __int8 *)(v18 + 124);
    v44 = 16 - v43;
    _CF = v43 >= 0x11;
    v47 = *v19;
    v46 = v19[1];
    v48 = v47 + v22 * v12;
    if (_CF)
      v44 = 0;
    v228 = v20[1];
    v49 = v46 + v228 * (v12 / 2);
    v50 = v18 + 32932;
    v51 = (char *)(v48 + 2 * v11);
    v52 = v49 + 2 * v11;
    v53 = v44;
    v54 = *(float *)(v18 + 108);
    v55 = *(float *)(v18 + 112);
    v57 = *(float *)(v18 + 116);
    v56 = *(float *)(v18 + 120);
    v254 = (float)LODWORD(a5);
    v255 = v28;
    v253 = v30;
    v248 = v34;
    v231 = v55;
    v232 = *(float *)(v18 + 60) * 0.5;
    v229 = *(float *)(v18 + 68) * 0.5;
    v230 = v54;
    do
    {
      v58 = &v51[v22];
      v59 = v42 + v25;
      v60 = &v41[v24];
      if (v10)
      {
        v61 = 0;
        v62 = &v51[v22];
        v63 = &v41[v24];
        do
        {
          v64 = (unsigned __int16 *)(v52 + 2 * v61);
          v65 = (float)(v64[1] >> v53) - v29;
          v66 = v252 * v65;
          v67 = v30 * (float)((float)(*(unsigned __int16 *)v51 >> v53) - v28);
          v68 = (float)(v252 * v65) + v67;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = (float)(v252 * v65) + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = (float)(*v64 >> v53) - v29;
          v71 = (float)(v250 * v65) + (float)(v70 * v251);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v249 * v70;
          v74 = (float)(v249 * v70) + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v30 * (float)((float)(*((unsigned __int16 *)v51 + 1) >> v53) - v28);
          v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v76;
          v80 = (float)(v73 + v76) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v30 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v28);
          v83 = 8191.0;
          if ((float)(v66 + v82) <= 8191.0)
          {
            v83 = v66 + v82;
            if ((float)(v66 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v71 + v82) <= 8191.0)
          {
            v84 = v71 + v82;
            if ((float)(v71 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v73 + v82;
          v80 = (float)(v73 + v82) <= 8191.0;
          v86 = 8191.0;
          if (v80)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v30 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v28);
          v88 = v66 + v87;
          v80 = (float)(v66 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v80)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v71 + v87;
          v80 = (float)(v71 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v80)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v73 + v87;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H2 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v112 = fmaxf(_S2, fmaxf(_S24, _S25));
          v113 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S2)) + (float)(v57 * _S25)) + (float)(v56 * v112);
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S2)) + (float)(v57 * _S25))
                 + (float)(v56 * v112);
            if (v113 < 0.0)
              v114 = 0.0;
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v114));
          v119 = (float)((float)((float)(v55 * _S28) + (float)(v54 * _S26)) + (float)(v57 * _S30))
               + (float)(v56 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v120));
          v125 = v56;
          v126 = (float)((float)((float)(v55 * _S10) + (float)(v54 * _S9)) + (float)(v57 * _S11))
               + (float)(v56 * fmaxf(_S9, fmaxf(_S10, _S11)));
          v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            v127 = v126;
            if (v126 < 0.0)
              v127 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v132 = _S2 * _S1;
          v133 = _S24 * _S1;
          v134 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v136 = _S26 * _S1;
          v137 = _S28 * _S1;
          v138 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v127));
          __asm { FCVT            S2, H1 }
          v140 = _S9 * _S2;
          v141 = _S10 * _S2;
          v142 = _S11 * _S2;
          v143 = (float)((float)((float)(v55 * _S31) + (float)(v54 * _S29)) + (float)(v57 * _S8))
               + (float)(v125 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            v144 = v143;
            if (v143 < 0.0)
              v144 = 0.0;
          }
          _H25 = *((_WORD *)result + llroundf(v144));
          __asm { FCVT            S25, H25 }
          v147 = _S29 * _S25;
          v148 = _S31 * _S25;
          v149 = _S8 * _S25;
          v150 = (float)((float)(v240 * v133) + (float)(v132 * v241)) + (float)(v134 * v239);
          v151 = (float)((float)(v237 * v133) + (float)(v132 * v238)) + (float)(v134 * v236);
          _S23 = (float)((float)(v234 * v133) + (float)(v132 * v235)) + (float)(v134 * v233);
          v153 = (float)((float)(v237 * v137) + (float)(v136 * v238)) + (float)(v138 * v236);
          v154 = llroundf(fminf(fmaxf(_S23, 0.0), 8191.0));
          v155 = llroundf(fminf(fmaxf((float)((float)(v240 * v137) + (float)(v136 * v241)) + (float)(v138 * v239), 0.0), 8191.0));
          LOWORD(_S23) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S24, H24
          }
          v159 = llroundf(fminf(fmaxf((float)((float)(v234 * v137) + (float)(v136 * v235)) + (float)(v138 * v233), 0.0), 8191.0));
          _H17 = *(_WORD *)(v50 + 2 * v154);
          v161 = llroundf(fminf(fmaxf((float)((float)(v240 * v141) + (float)(v140 * v241)) + (float)(v142 * v239), 0.0), 8191.0));
          __asm { FCVT            S17, H17 }
          _H21 = *(_WORD *)(v50 + 2 * v155);
          __asm { FCVT            S21, H21 }
          v165 = llroundf(fminf(fmaxf((float)((float)(v237 * v141) + (float)(v140 * v238)) + (float)(v142 * v236), 0.0), 8191.0));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v168 = llroundf(fminf(fmaxf((float)((float)(v234 * v141) + (float)(v140 * v235)) + (float)(v142 * v233), 0.0), 8191.0));
          _H1 = *(_WORD *)(v50 + 2 * v159);
          __asm { FCVT            S1, H1 }
          v171 = llroundf(fminf(fmaxf((float)((float)(v240 * v148) + (float)(v147 * v241)) + (float)(v149 * v239), 0.0), 8191.0));
          _H2 = *(_WORD *)(v50 + 2 * v161);
          v173 = llroundf(fminf(fmaxf((float)((float)(v237 * v148) + (float)(v147 * v238)) + (float)(v149 * v236), 0.0), 8191.0));
          v174 = llroundf(fminf(fmaxf((float)((float)(v234 * v148) + (float)(v147 * v235)) + (float)(v149 * v233), 0.0), 8191.0));
          v175 = (float)((float)((float)(v246 * _S24) + (float)(v247 * _S23)) + (float)(v245 * _S17)) + v33;
          if (v175 < v33)
            v176 = v33;
          else
            v176 = (float)((float)((float)(v246 * _S24) + (float)(v247 * _S23)) + (float)(v245 * _S17)) + v33;
          v80 = v175 <= v35;
          v177 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S21)) + (float)(v245 * _S1)) + v33;
          if (!v80)
            v176 = v35;
          v178 = llroundf(v176);
          if (v177 < v33)
            v179 = v33;
          else
            v179 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S21)) + (float)(v245 * _S1)) + v33;
          if (v177 <= v35)
            v180 = v179;
          else
            v180 = v35;
          v181 = llroundf(v180);
          _H3 = *(_WORD *)(v50 + 2 * v165);
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          v185 = _S23 + _S21;
          _H23 = *(_WORD *)(v50 + 2 * v168);
          __asm { FCVT            S23, H23 }
          _S22 = _S24 + _S22;
          _H24 = *(_WORD *)(v50 + 2 * v171);
          __asm { FCVT            S24, H24 }
          v191 = _S17 + _S1;
          v192 = (float)(v248 + (float)(v185 * v244)) + (float)(_S22 * v243);
          v193 = (float)(v248 + (float)(v185 * v232)) + (float)(_S22 * v38);
          LOWORD(_S22) = *(_WORD *)(v50 + 2 * v173);
          __asm { FCVT            S22, H22 }
          v195 = v192 + (float)(v191 * v242);
          v196 = v193 + (float)(v191 * v229);
          if (v195 < v36)
            v197 = v36;
          else
            v197 = v195;
          _H17 = *(_WORD *)(v50 + 2 * v174);
          __asm { FCVT            S17, H17 }
          if (!(_NF ^ _VF | _ZF))
            v197 = v37;
          v200 = llroundf(v197);
          if (v196 < v36)
            v201 = v36;
          else
            v201 = v196;
          if (v196 <= v37)
            v202 = v201;
          else
            v202 = v37;
          v203 = llroundf(v202);
          v204 = (float)((float)((float)(v246 * _S3) + (float)(v247 * _S2)) + (float)(v245 * _S23)) + v33;
          if (v204 < v33)
            v205 = v33;
          else
            v205 = (float)((float)((float)(v246 * _S3) + (float)(v247 * _S2)) + (float)(v245 * _S23)) + v33;
          v80 = v204 <= v35;
          v206 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S24)) + (float)(v245 * _S17)) + v33;
          if (!v80)
            v205 = v35;
          v207 = llroundf(v205);
          if (v206 < v33)
            v208 = v33;
          else
            v208 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S24)) + (float)(v245 * _S17)) + v33;
          if (v206 <= v35)
            v209 = v208;
          else
            v209 = v35;
          v210 = llroundf(v209);
          v211 = _S2 + _S24;
          *v41 = v178;
          v41[1] = v181;
          *(_BYTE *)(v42 + v61 + 1) = v203;
          *(_BYTE *)(v42 + v61) = v200;
          *v63 = v207;
          v63[1] = v210;
          v212 = _S3 + _S22;
          v213 = (float)(v248 + (float)(v211 * v244)) + (float)((float)(_S3 + _S22) * v243);
          v214 = _S23 + _S17;
          v215 = v213 + (float)((float)(_S23 + _S17) * v242);
          v216 = v37;
          if (v215 <= v37)
          {
            v216 = v215;
            if (v215 < v36)
              v216 = v36;
          }
          v217 = (float)((float)(v248 + (float)(v211 * v232)) + (float)(v212 * v38)) + (float)(v214 * v229);
          *(_BYTE *)(v59 + v61) = llroundf(v216);
          v218 = v37;
          v28 = v255;
          v30 = v253;
          if (v217 <= v37)
          {
            v218 = v217;
            if (v217 < v36)
              v218 = v36;
          }
          v51 += 4;
          v62 += 4;
          v41 += 2;
          v63 += 2;
          *(_BYTE *)(v59 + v61 + 1) = llroundf(v218);
          v61 += 2;
          v29 = v254;
          v54 = v230;
          v55 = v231;
          v56 = v125;
        }
        while (v10 > v61);
      }
      v51 = &v58[v22];
      v52 += v228;
      v41 = &v60[v24];
      v42 = v59 + v25;
      v9 += 2;
    }
    while (v13 > v9);
    if (v227 && v226)
    {
      v219 = 0;
      do
      {
        if (v10)
        {
          v220 = v10;
          v221 = v26;
          v222 = (unsigned __int16 *)v23;
          do
          {
            v223 = *v222++;
            *v221++ = llroundf((float)v223 * 0.0038911);
            --v220;
          }
          while (v220);
        }
        v23 += v224;
        v26 += v225;
        ++v219;
      }
      while (v219 != v13);
    }
    else if (v226)
    {
      do
      {
        if (v10)
          result = memset(v26, 255, v10);
        v26 += v225;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  _BYTE *v61;
  size_t v62;
  char *v63;
  _BYTE *v64;
  unsigned __int16 *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  unsigned int v104;
  unsigned int v122;
  float v123;
  float v124;
  float v130;
  float v132;
  float v133;
  float v134;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v141;
  unsigned int v142;
  unsigned int v145;
  unsigned int v147;
  unsigned int v149;
  unsigned int v151;
  unsigned int v152;
  float v153;
  float v154;
  float v155;
  char v156;
  float v157;
  float v158;
  char v159;
  float v163;
  float v169;
  float v170;
  float v171;
  float v173;
  float v174;
  float v175;
  char v178;
  float v179;
  float v180;
  char v181;
  float v182;
  float v183;
  float v184;
  char v185;
  float v186;
  float v187;
  char v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  uint64_t v197;
  size_t v198;
  _BYTE *v199;
  unsigned __int16 *v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v202 = v20[2];
    v205 = v19[2];
    v24 = v205 + v202 * v12 + 2 * v11;
    v25 = *v21;
    v26 = v21[1];
    v203 = v21[2];
    v204 = v16[2];
    v27 = (_BYTE *)(v204 + v203 * v17 + v14);
    v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v30 = (float)LODWORD(a5);
    v31 = v28 * *(float *)v18;
    v215 = v28 * *(float *)(v18 + 16);
    v216 = v28 * *(float *)(v18 + 8);
    v32 = v28 * *(float *)(v18 + 20);
    *(float *)&v33 = v28 * *(float *)(v18 + 28);
    v213 = *(float *)&v33;
    v214 = v32;
    LOWORD(v33) = *(_WORD *)(v18 + 144);
    v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 146);
    v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 148);
    v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 150);
    v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 152);
    v38 = (float)v33;
    v39 = *(float *)(v18 + 44);
    v210 = *(float *)(v18 + 40);
    v211 = *(float *)(v18 + 36);
    v208 = *(float *)(v18 + 52) * 0.5;
    v209 = *(float *)(v18 + 48) * 0.5;
    v207 = *(float *)(v18 + 56) * 0.5;
    v219 = *(float *)(v18 + 64) * 0.5;
    v220 = *(float *)(v18 + 60) * 0.5;
    v40 = *(float *)(v18 + 72);
    v218 = *(float *)(v18 + 68) * 0.5;
    v42 = *(float *)(v18 + 76);
    v41 = *(float *)(v18 + 80);
    v43 = *(float *)(v18 + 84);
    v44 = *(float *)(v18 + 88);
    v45 = *(float *)(v18 + 92);
    v46 = *(float *)(v18 + 96);
    v47 = *(float *)(v18 + 100);
    v48 = *(float *)(v18 + 104);
    v49 = v18 + 164;
    v50 = v16[1];
    v51 = (_BYTE *)(*v16 + *v21 * v17 + v14);
    v52 = v50 + v26 * v17 + v14;
    result = (_QWORD *)(v18 + 16548);
    if (!v50)
      v52 = 0;
    v53 = *(unsigned __int8 *)(v18 + 124);
    v54 = v19[1];
    v55 = (char *)(*v19 + v22 * v12 + 2 * v11);
    if (v53 >= 0x11)
      v56 = 0;
    else
      v56 = 16 - v53;
    v57 = v54 + v20[1] * (v12 / 2) + 2 * v11;
    v58 = v56;
    v217 = (float)LODWORD(a5);
    v212 = v35;
    v206 = v29;
    do
    {
      v59 = &v55[v22];
      v60 = v52 + v26;
      v61 = &v51[v25];
      if (v10)
      {
        v62 = 0;
        v63 = &v55[v22];
        v64 = &v51[v25];
        do
        {
          v65 = (unsigned __int16 *)(v57 + 2 * v62);
          v66 = (float)(v65[1] >> v58) - v30;
          v67 = v216 * v66;
          v68 = v31 * (float)((float)(*(unsigned __int16 *)v55 >> v58) - v29);
          v69 = (float)(v216 * v66) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v216 * v66) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = (float)(*v65 >> v58) - v30;
          v72 = (float)(v214 * v66) + (float)(v71 * v215);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v213 * v71;
          v75 = (float)(v213 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v31 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v58) - v29);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v31 * (float)((float)(*(unsigned __int16 *)v63 >> v58) - v29);
          v83 = 8191.0;
          if ((float)(v67 + v82) <= 8191.0)
          {
            v83 = v67 + v82;
            if ((float)(v67 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            v84 = v72 + v82;
            if ((float)(v72 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v74 + v82;
          v86 = (float)(v74 + v82) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v31 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v58) - v29);
          v89 = v67 + v88;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v88;
          v86 = (float)(v72 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v86)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v88;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H3 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v104 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S2, H5 }
          _H5 = *(_WORD *)(v49 + 2 * v104);
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v122 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          v123 = (float)((float)(v42 * _S4) + (float)(_S3 * v40)) + (float)(_S2 * v41);
          v124 = (float)((float)(v44 * _S4) + (float)(_S3 * v43)) + (float)(_S2 * v45);
          _S2 = (float)((float)(v47 * _S4) + (float)(_S3 * v46)) + (float)(_S2 * v48);
          _S3 = (float)((float)(v42 * _S6) + (float)(_S5 * v40)) + (float)(_S7 * v41);
          _S4 = (float)((float)(v44 * _S6) + (float)(_S5 * v43)) + (float)(_S7 * v45);
          _S5 = (float)((float)(v47 * _S6) + (float)(_S5 * v46)) + (float)(_S7 * v48);
          _S6 = (float)((float)(v42 * _S27) + (float)(_S26 * v40)) + (float)(_S1 * v41);
          v130 = (float)((float)(v44 * _S27) + (float)(_S26 * v43)) + (float)(_S1 * v45);
          _S1 = (float)((float)(v47 * _S27) + (float)(_S26 * v46)) + (float)(_S1 * v48);
          v132 = (float)(v42 * _S24) + (float)(_S17 * v40);
          v133 = (float)(v44 * _S24) + (float)(_S17 * v43);
          v134 = (float)(v47 * _S24) + (float)(_S17 * v46);
          LOWORD(_S24) = *(_WORD *)(v49 + 2 * v122);
          __asm { FCVT            S24, H24 }
          v136 = llroundf(fminf(fmaxf(_S2, 0.0), 8191.0));
          v137 = llroundf(fminf(fmaxf(_S3, 0.0), 8191.0));
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          v138 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          v141 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
          LOWORD(_S4) = *((_WORD *)result + v136);
          v142 = llroundf(fminf(fmaxf(_S6, 0.0), 8191.0));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + v137);
          __asm { FCVT            S5, H5 }
          v145 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          LOWORD(_S6) = *((_WORD *)result + v138);
          __asm { FCVT            S6, H6 }
          v147 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
          LOWORD(_S1) = *((_WORD *)result + v141);
          __asm { FCVT            S1, H1 }
          v149 = llroundf(fminf(fmaxf(v132 + (float)(_S24 * v41), 0.0), 8191.0));
          _H7 = *((_WORD *)result + v142);
          v151 = llroundf(fminf(fmaxf(v133 + (float)(_S24 * v45), 0.0), 8191.0));
          v152 = llroundf(fminf(fmaxf(v134 + (float)(_S24 * v48), 0.0), 8191.0));
          v153 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S2)) + (float)(v39 * _S4)) + v34;
          if (v153 < v34)
            v154 = v34;
          else
            v154 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S2)) + (float)(v39 * _S4)) + v34;
          v86 = v153 <= v36;
          v155 = (float)((float)((float)(v210 * _S6) + (float)(v211 * _S5)) + (float)(v39 * _S1)) + v34;
          if (!v86)
            v154 = v36;
          v156 = llroundf(v154);
          if (v155 < v34)
            v157 = v34;
          else
            v157 = (float)((float)((float)(v210 * _S6) + (float)(v211 * _S5)) + (float)(v39 * _S1)) + v34;
          if (v155 <= v36)
            v158 = v157;
          else
            v158 = v36;
          v159 = llroundf(v158);
          _H17 = *((_WORD *)result + v145);
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          v163 = _S2 + _S5;
          _H5 = *((_WORD *)result + v147);
          __asm { FCVT            S5, H5 }
          _S3 = _S3 + _S6;
          _H6 = *((_WORD *)result + v149);
          __asm { FCVT            S6, H6 }
          v169 = _S4 + _S1;
          v170 = (float)(v212 + (float)(v163 * v209)) + (float)(_S3 * v208);
          v171 = (float)(v212 + (float)(v163 * v220)) + (float)(_S3 * v219);
          LOWORD(_S3) = *((_WORD *)result + v151);
          __asm { FCVT            S3, H3 }
          v173 = v170 + (float)(v169 * v207);
          v174 = v171 + (float)(v169 * v218);
          if (v173 < v37)
            v175 = v37;
          else
            v175 = v173;
          _H4 = *((_WORD *)result + v152);
          __asm { FCVT            S4, H4 }
          if (!(_NF ^ _VF | _ZF))
            v175 = v38;
          v178 = llroundf(v175);
          if (v174 < v37)
            v179 = v37;
          else
            v179 = v174;
          if (v174 <= v38)
            v180 = v179;
          else
            v180 = v38;
          v181 = llroundf(v180);
          v182 = (float)((float)((float)(v210 * _S17) + (float)(v211 * _S7)) + (float)(v39 * _S5)) + v34;
          if (v182 < v34)
            v183 = v34;
          else
            v183 = (float)((float)((float)(v210 * _S17) + (float)(v211 * _S7)) + (float)(v39 * _S5)) + v34;
          v86 = v182 <= v36;
          v184 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S6)) + (float)(v39 * _S4)) + v34;
          if (!v86)
            v183 = v36;
          v185 = llroundf(v183);
          if (v184 < v34)
            v186 = v34;
          else
            v186 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S6)) + (float)(v39 * _S4)) + v34;
          if (v184 <= v36)
            v187 = v186;
          else
            v187 = v36;
          v188 = llroundf(v187);
          v189 = _S7 + _S6;
          *v51 = v156;
          v51[1] = v159;
          *(_BYTE *)(v52 + v62 + 1) = v181;
          *(_BYTE *)(v52 + v62) = v178;
          *v64 = v185;
          v64[1] = v188;
          v190 = _S17 + _S3;
          v191 = (float)(v212 + (float)((float)(_S7 + _S6) * v209)) + (float)((float)(_S17 + _S3) * v208);
          v192 = _S5 + _S4;
          v193 = v191 + (float)((float)(_S5 + _S4) * v207);
          v194 = v38;
          if (v193 <= v38)
          {
            v194 = v193;
            if (v193 < v37)
              v194 = v37;
          }
          v195 = (float)((float)(v212 + (float)(v189 * v220)) + (float)(v190 * v219)) + (float)(v192 * v218);
          *(_BYTE *)(v60 + v62) = llroundf(v194);
          v196 = v38;
          v29 = v206;
          if (v195 <= v38)
          {
            v196 = v195;
            if (v195 < v37)
              v196 = v37;
          }
          v55 += 4;
          v63 += 4;
          v51 += 2;
          v64 += 2;
          *(_BYTE *)(v60 + v62 + 1) = llroundf(v196);
          v62 += 2;
          v30 = v217;
        }
        while (v10 > v62);
      }
      v55 = &v59[v22];
      v57 += v23;
      v51 = &v61[v25];
      v52 = v60 + v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v205 && v204)
    {
      v197 = 0;
      do
      {
        if (v10)
        {
          v198 = v10;
          v199 = v27;
          v200 = (unsigned __int16 *)v24;
          do
          {
            v201 = *v200++;
            *v199++ = llroundf((float)v201 * 0.0038911);
            --v198;
          }
          while (v198);
        }
        v24 += v202;
        v27 += v203;
        ++v197;
      }
      while (v197 != v13);
    }
    else if (v204)
    {
      do
      {
        if (v10)
          result = memset(v27, 255, v10);
        v27 += v203;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_rgb_422vf_GCD(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  _BYTE *v67;
  size_t v68;
  char *v69;
  _BYTE *v70;
  unsigned __int16 *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  char v89;
  float v90;
  float v91;
  char v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  size_t v124;
  _BYTE *v125;
  unsigned __int16 *v126;
  unsigned int v127;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * (result[13] * a2 / v7);
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[1];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v28 * v17 + v15);
    v32 = (_BYTE *)(*v16 + v26 * v17 + v15);
    result = (_QWORD *)(v29 + v27 * v17 + v15);
    v33 = v25 + v24 * v13 + 2 * v12;
    *(float *)&v34 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v35 = (float)*(unsigned int *)(v18 + 136);
    v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v18 + 140);
    v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v18 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v18;
    v40 = v36 * *(float *)(v18 + 8);
    v41 = v36 * *(float *)(v18 + 16);
    v42 = v36 * *(float *)(v18 + 20);
    v43 = *(float *)(v18 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v18 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    v46 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    v47 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    v48 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v49 = (float)v5;
    v50 = *(float *)(v18 + 36);
    v51 = *(float *)(v18 + 40);
    v52 = *(float *)(v18 + 44);
    v53 = *(float *)(v18 + 48) * 0.5;
    v54 = *(float *)(v18 + 52) * 0.5;
    v55 = *(float *)(v18 + 56) * 0.5;
    v56 = *(float *)(v18 + 60) * 0.5;
    v57 = *(float *)(v18 + 64) * 0.5;
    v58 = *(float *)(v18 + 68) * 0.5;
    if (!v29)
      result = 0;
    v59 = *(unsigned __int8 *)(v18 + 124);
    v60 = v19[1];
    v61 = (char *)(*v19 + v22 * v13 + 2 * v12);
    if (v59 >= 0x11)
      v62 = 0;
    else
      v62 = 16 - v59;
    v63 = v60 + v23 * (v13 / 2) + 2 * v12;
    v64 = v62;
    v65 = (uint64_t)result + v27 + 1;
    do
    {
      v66 = &v61[v22];
      v67 = &v32[v26];
      if (v11)
      {
        v68 = 0;
        v69 = &v61[v22];
        v70 = &v32[v26];
        do
        {
          v71 = (unsigned __int16 *)(v63 + 2 * v68);
          v72 = (float)(*v71 >> v64) - v38;
          v73 = (float)(v71[1] >> v64) - v38;
          v74 = v40 * v73;
          v75 = (float)(v42 * v73) + (float)(v72 * v41);
          v76 = v44 * v72;
          v77 = v39 * (float)((float)(*(unsigned __int16 *)v61 >> v64) - v37);
          v78 = v39 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v64) - v37);
          v79 = v74 + v77;
          v80 = v77 + v75;
          v81 = v76 + v77;
          v82 = v74 + v78;
          v83 = v75 + v78;
          v84 = v76 + v78;
          v85 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          if (v85 < v45)
            v86 = v45;
          else
            v86 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          v87 = v85 <= v47;
          v88 = (float)((float)((float)(v51 * v83) + (float)(v50 * v82)) + (float)(v52 * v84)) + v45;
          if (!v87)
            v86 = v47;
          v89 = llroundf(v86);
          if (v88 < v45)
            v90 = v45;
          else
            v90 = (float)((float)((float)(v51 * v83) + (float)(v50 * v82)) + (float)(v52 * v84)) + v45;
          if (v88 <= v47)
            v91 = v90;
          else
            v91 = v47;
          v92 = llroundf(v91);
          v93 = v79 + v82;
          v94 = v80 + v83;
          v95 = v39 * (float)((float)(*(unsigned __int16 *)v69 >> v64) - v37);
          v96 = *((unsigned __int16 *)v69 + 1);
          v97 = v81 + v84;
          v98 = (float)(v46 + (float)(v93 * v53)) + (float)(v94 * v54);
          v99 = (float)(v46 + (float)(v93 * v56)) + (float)(v94 * v57);
          v100 = v74 + v95;
          v101 = v98 + (float)(v97 * v55);
          v102 = v99 + (float)(v97 * v58);
          if (v101 < v48)
            v103 = v48;
          else
            v103 = v101;
          v104 = v75 + v95;
          v105 = v76 + v95;
          *v32 = v89;
          v32[1] = v92;
          if (v101 <= v49)
            v106 = v103;
          else
            v106 = v49;
          *((_BYTE *)result + v68) = llroundf(v106);
          if (v102 < v48)
            v107 = v48;
          else
            v107 = v102;
          if (v102 > v49)
            v107 = v49;
          *((_BYTE *)result + v68 + 1) = llroundf(v107);
          v108 = (float)((float)((float)(v51 * v104) + (float)(v50 * v100)) + (float)(v52 * v105)) + v45;
          v109 = v47;
          if (v108 <= v47)
          {
            v109 = (float)((float)((float)(v51 * v104) + (float)(v50 * v100)) + (float)(v52 * v105)) + v45;
            if (v108 < v45)
              v109 = v45;
          }
          v110 = v39 * (float)((float)(int)(v96 >> v64) - v37);
          v111 = v74 + v110;
          v112 = v75 + v110;
          v113 = v76 + v110;
          v114 = (float)((float)((float)(v51 * v112) + (float)(v50 * v111)) + (float)(v52 * (float)(v76 + v110))) + v45;
          *v70 = llroundf(v109);
          v115 = v47;
          if (v114 <= v47)
          {
            v115 = v114;
            if (v114 < v45)
              v115 = v45;
          }
          v70[1] = llroundf(v115);
          v116 = v100 + v111;
          v117 = v104 + v112;
          v118 = v105 + v113;
          v119 = (float)((float)(v46 + (float)((float)(v100 + v111) * v53)) + (float)(v117 * v54)) + (float)(v118 * v55);
          v120 = v49;
          if (v119 <= v49)
          {
            v120 = v119;
            if (v119 < v48)
              v120 = v48;
          }
          v121 = (float)((float)(v46 + (float)(v116 * v56)) + (float)(v117 * v57)) + (float)(v118 * v58);
          *(_BYTE *)(v65 + v68 - 1) = llroundf(v120);
          v122 = v49;
          if (v121 <= v49)
          {
            v122 = v121;
            if (v121 < v48)
              v122 = v48;
          }
          v61 += 4;
          v69 += 4;
          v32 += 2;
          v70 += 2;
          *(_BYTE *)(v65 + v68) = llroundf(v122);
          v68 += 2;
        }
        while (v11 > v68);
      }
      v61 = &v66[v22];
      v63 += v23;
      v32 = &v67[v26];
      result = (_QWORD *)((char *)result + v27 + v27);
      v10 += 2;
      v65 += 2 * v27;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      v123 = 0;
      do
      {
        if (v11)
        {
          v124 = v11;
          v125 = v31;
          v126 = (unsigned __int16 *)v33;
          do
          {
            v127 = *v126++;
            *v125++ = llroundf((float)v127 * 0.0038911);
            --v124;
          }
          while (v124);
        }
        v33 += v24;
        v31 += v28;
        ++v123;
      }
      while (v123 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  float v61;
  float v62;
  char *v63;
  _BYTE *v64;
  size_t v65;
  char *v66;
  _WORD *v67;
  _BYTE *v68;
  _WORD *v69;
  unsigned __int16 *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v118;
  float v119;
  float v120;
  float v125;
  float v126;
  float v131;
  float v132;
  float v133;
  float v138;
  float v139;
  float v140;
  float v142;
  float v143;
  float v144;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v160;
  float v163;
  float v164;
  float v166;
  float v167;
  float v168;
  float v169;
  unsigned int v173;
  unsigned int v174;
  unsigned int v177;
  unsigned int v178;
  unsigned int v180;
  unsigned int v182;
  unsigned int v184;
  unsigned int v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v200;
  char v201;
  float v202;
  float v204;
  float v205;
  float v206;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  uint64_t v225;
  size_t v226;
  _BYTE *v227;
  unsigned __int16 *v228;
  unsigned int v229;
  uint64_t v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (uint64_t *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v230 = v25[2];
    v30 = v230 + v29 * v22 + 2 * v21;
    v31 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v24;
    v254 = v32 * *(float *)(v24 + 16);
    v255 = v32 * *(float *)(v24 + 8);
    v36 = v32 * *(float *)(v24 + 20);
    *(float *)&v37 = v32 * *(float *)(v24 + 28);
    v252 = *(float *)&v37;
    v253 = v36;
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v24 + 48) * 0.5;
    v44 = *(float *)(v24 + 56) * 0.5;
    v45 = *(float *)(v24 + 60) * 0.5;
    v247 = *(float *)(v24 + 72);
    v244 = *(float *)(v24 + 80);
    v245 = *(float *)(v24 + 76);
    v242 = *(float *)(v24 + 88);
    v243 = *(float *)(v24 + 84);
    v241 = *(float *)(v24 + 92);
    v240 = *(float *)(v24 + 96);
    v238 = *(float *)(v24 + 100);
    v236 = *(float *)(v24 + 104);
    v46 = v24 + 164;
    result = (_QWORD *)(v24 + 16548);
    v47 = (_BYTE *)(*v11 + v31 * v12 + v10);
    v48 = *(unsigned __int8 *)(v24 + 124);
    v49 = 16 - v48;
    _CF = v48 >= 0x11;
    v51 = *v25;
    v52 = v25[1];
    v53 = v51 + v27 * v22;
    if (_CF)
      v54 = 0;
    else
      v54 = v49;
    if (v22 >= 0)
      v55 = v22;
    else
      v55 = v22 + 1;
    v56 = v52 + v28 * (v55 >> 1);
    v57 = v24 + 32932;
    v58 = (char *)(v53 + 2 * v21);
    v59 = v56 + 2 * v21;
    v60 = v54;
    v62 = *(float *)(v24 + 108);
    v61 = *(float *)(v24 + 112);
    v232 = *(float *)(v24 + 120);
    v233 = *(float *)(v24 + 116);
    v256 = (float)LODWORD(a6);
    v250 = (float)LODWORD(a5);
    v251 = v39;
    v249 = v35;
    v248 = *(float *)(v24 + 36);
    v246 = *(float *)(v24 + 68) * 0.5;
    v239 = *(float *)(v24 + 52) * 0.5;
    v237 = *(float *)(v24 + 44);
    v235 = *(float *)(v24 + 64) * 0.5;
    v234 = *(float *)(v24 + 40);
    v231 = v61;
    do
    {
      v63 = &v58[v27];
      v64 = &v47[v31];
      if (v20)
      {
        v65 = 0;
        v66 = &v58[v27];
        v67 = (_WORD *)((char *)v18 + v14);
        v68 = &v47[v31];
        v69 = v18;
        do
        {
          v70 = (unsigned __int16 *)(v59 + 2 * v65);
          v71 = (float)(v70[1] >> v60) - v34;
          v72 = v255 * v71;
          v73 = v35 * (float)((float)(*(unsigned __int16 *)v58 >> v60) - v33);
          v74 = (float)(v255 * v71) + v73;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = (float)(v255 * v71) + v73;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = (float)(*v70 >> v60) - v34;
          v77 = (float)(v253 * v71) + (float)(v76 * v254);
          v78 = 8191.0;
          if ((float)(v73 + v77) <= 8191.0)
          {
            v78 = v73 + v77;
            if ((float)(v73 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = v252 * v76;
          v80 = (float)(v252 * v76) + v73;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v35 * (float)((float)(*((unsigned __int16 *)v58 + 1) >> v60) - v33);
          v83 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            v83 = v72 + v82;
            if ((float)(v72 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v77 + v82) <= 8191.0)
          {
            v84 = v77 + v82;
            if ((float)(v77 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v79 + v82;
          v86 = (float)(v79 + v82) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v35 * (float)((float)(*(unsigned __int16 *)v66 >> v60) - v33);
          v89 = 8191.0;
          if ((float)(v72 + v88) <= 8191.0)
          {
            v89 = v72 + v88;
            if ((float)(v72 + v88) < 0.0)
              v89 = 0.0;
          }
          v90 = 8191.0;
          if ((float)(v77 + v88) <= 8191.0)
          {
            v90 = v77 + v88;
            if ((float)(v77 + v88) < 0.0)
              v90 = 0.0;
          }
          v91 = v79 + v88;
          v86 = (float)(v79 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v86)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v35 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v60) - v33);
          v94 = v72 + v93;
          v86 = (float)(v72 + v93) <= 8191.0;
          v95 = 8191.0;
          if (v86)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v77 + v93;
          v86 = (float)(v77 + v93) <= 8191.0;
          v97 = 8191.0;
          if (v86)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v79 + v93;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          v118 = fmaxf(_S2, fmaxf(_S24, _S25));
          v119 = (float)((float)((float)(v61 * _S24) + (float)(v62 * _S2)) + (float)(v233 * _S25))
               + (float)(v232 * v118);
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = (float)((float)((float)(v61 * _S24) + (float)(v62 * _S2)) + (float)(v233 * _S25))
                 + (float)(v232 * v118);
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v120));
          v125 = (float)((float)((float)(v61 * _S28) + (float)(v62 * _S26)) + (float)(v233 * _S30))
               + (float)(v232 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            v126 = v125;
            if (v125 < 0.0)
              v126 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v126));
          v131 = fmaxf(_S9, fmaxf(_S10, _S11));
          v132 = (float)((float)((float)(v61 * _S10) + (float)(v62 * _S9)) + (float)(v233 * _S11))
               + (float)(v232 * v131);
          v133 = 8191.0;
          if (v132 <= 8191.0)
          {
            v133 = (float)((float)((float)(v61 * _S10) + (float)(v62 * _S9)) + (float)(v233 * _S11))
                 + (float)(v232 * v131);
            if (v132 < 0.0)
              v133 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v138 = _S2 * _S1;
          v139 = _S24 * _S1;
          v140 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v142 = _S26 * _S1;
          v143 = _S28 * _S1;
          v144 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v133));
          __asm { FCVT            S2, H1 }
          v146 = _S9 * _S2;
          v147 = _S10 * _S2;
          v148 = _S11 * _S2;
          v149 = (float)((float)((float)(v61 * _S31) + (float)(v62 * _S29)) + (float)(v233 * _S8))
               + (float)(v232 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v150 = 8191.0;
          if (v149 <= 8191.0)
          {
            v150 = v149;
            if (v149 < 0.0)
              v150 = 0.0;
          }
          _H25 = *((_WORD *)result + llroundf(v150));
          __asm { FCVT            S25, H25 }
          v153 = _S29 * _S25;
          v154 = _S31 * _S25;
          v155 = _S8 * _S25;
          v156 = (float)((float)(v245 * v139) + (float)(v138 * v247)) + (float)(v140 * v244);
          v157 = (float)((float)(v242 * v139) + (float)(v138 * v243)) + (float)(v140 * v241);
          v158 = (float)((float)(v238 * v139) + (float)(v138 * v240)) + (float)(v140 * v236);
          _S24 = (float)((float)(v245 * v143) + (float)(v142 * v247)) + (float)(v144 * v244);
          v160 = (float)((float)(v242 * v143) + (float)(v142 * v243)) + (float)(v144 * v241);
          _S21 = (float)((float)(v238 * v143) + (float)(v142 * v240)) + (float)(v144 * v236);
          _S22 = (float)((float)(v245 * v147) + (float)(v146 * v247)) + (float)(v148 * v244);
          v163 = (float)((float)(v242 * v147) + (float)(v146 * v243)) + (float)(v148 * v241);
          v164 = (float)((float)(v238 * v147) + (float)(v146 * v240)) + (float)(v148 * v236);
          _S3 = (float)(v242 * v154) + (float)(v153 * v243);
          v166 = (float)(v238 * v154) + (float)(v153 * v240);
          v167 = (float)((float)(v245 * v154) + (float)(v153 * v247)) + (float)(v155 * v244);
          v168 = _S3 + (float)(v155 * v241);
          v169 = v166 + (float)(v155 * v236);
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          v173 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          v174 = llroundf(fminf(fmaxf(v160, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v57 + 2 * v173);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          v177 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v57 + 2 * v174);
          v178 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v57 + 2 * v177);
          _H1 = *(_WORD *)(v57 + 2 * v178);
          v180 = llroundf(fminf(fmaxf(v164, 0.0), 8191.0));
          _H2 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          v182 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          _H3 = *(_WORD *)(v57 + 2 * v180);
          v184 = llroundf(fminf(fmaxf(v168, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          v186 = llroundf(fminf(fmaxf(v169, 0.0), 8191.0));
          v187 = (float)(v234 * _S27) + (float)(v248 * _S29);
          v188 = _S27 + _S23;
          v189 = (float)(v251 + (float)((float)(_S29 + _S17) * v43)) + (float)(v188 * v239);
          v190 = (float)(v251 + (float)((float)(_S29 + _S17) * v45)) + (float)(v188 * v235);
          _H21 = *(_WORD *)(v57 + 2 * v182);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          v194 = v187 + (float)(v237 * _S24);
          v195 = _S24 + _S25;
          v196 = v189 + (float)((float)(_S24 + _S25) * v44);
          v197 = v190 + (float)(v195 * v246);
          if (v196 < v41)
            v198 = v41;
          else
            v198 = v196;
          v86 = v196 <= v42;
          _H22 = *(_WORD *)(v57 + 2 * v184);
          v200 = v194 + v38;
          if (!v86)
            v198 = v42;
          v201 = llroundf(v198);
          if (v200 < v38)
            v202 = v38;
          else
            v202 = v194 + v38;
          v86 = v200 <= v40;
          _H24 = *(_WORD *)(v57 + 2 * v186);
          *v47 = v201;
          if (!v86)
            v202 = v40;
          v47[1] = llroundf(v202);
          v204 = v42;
          if (v197 <= v42)
          {
            v204 = v197;
            if (v197 < v41)
              v204 = v41;
          }
          v205 = (float)((float)((float)(v234 * _S23) + (float)(v248 * _S17)) + (float)(v237 * _S25)) + v38;
          v47[2] = llroundf(v204);
          v206 = v40;
          v35 = v249;
          v33 = v250;
          if (v205 <= v40)
          {
            if (v205 < v38)
              v206 = v38;
            else
              v206 = v205;
          }
          v47[3] = llroundf(v206);
          if (v69)
            *v69++ = 0;
          v61 = v231;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          v213 = (float)((float)((float)(v234 * _S23) + (float)(v248 * _S17)) + (float)(v237 * _S25)) + v38;
          v214 = _S17 + _S1;
          v215 = _S23 + _S3;
          v216 = (float)((float)(v251 + (float)(v214 * v43)) + (float)(v215 * v239))
               + (float)((float)(_S25 + _S2) * v44);
          v217 = (float)((float)(v251 + (float)(v214 * v45)) + (float)(v215 * v235))
               + (float)((float)(_S25 + _S2) * v246);
          if (v216 < v41)
            v218 = v41;
          else
            v218 = v216;
          if (v216 <= v42)
            v219 = v218;
          else
            v219 = v42;
          *v68 = llroundf(v219);
          if (v213 < v38)
            v220 = v38;
          else
            v220 = v213;
          if (v213 <= v40)
            v221 = v220;
          else
            v221 = v40;
          v68[1] = llroundf(v221);
          v222 = v42;
          if (v217 <= v42)
          {
            v222 = v217;
            if (v217 < v41)
              v222 = v41;
          }
          v223 = (float)((float)((float)(v234 * _S3) + (float)(v248 * _S1)) + (float)(v237 * _S2)) + v38;
          v68[2] = llroundf(v222);
          v224 = v40;
          if (v223 <= v40)
          {
            v224 = v223;
            if (v223 < v38)
              v224 = v38;
          }
          v68[3] = llroundf(v224);
          v34 = v256;
          if (v67)
            *v67++ = 0;
          v58 += 4;
          v66 += 4;
          v47 += 4;
          v68 += 4;
          v65 += 2;
        }
        while (v20 > v65);
      }
      v58 = &v63[v27];
      v59 += v28;
      v47 = &v64[v31];
      v19 += 2;
    }
    while (v23 > v19);
    if (v230 && v18)
    {
      v225 = 0;
      do
      {
        if (v20)
        {
          v226 = v20;
          v227 = v16;
          v228 = (unsigned __int16 *)v30;
          do
          {
            v229 = *v228++;
            *v227++ = llroundf((float)v229 * 0.0038911);
            --v226;
          }
          while (v226);
        }
        v30 += v29;
        v16 += v14;
        ++v225;
      }
      while (v225 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned int v52;
  char v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _BYTE *v60;
  size_t v61;
  char *v62;
  _WORD *v63;
  _BYTE *v64;
  _WORD *v65;
  unsigned __int16 *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  unsigned int v116;
  unsigned int v124;
  float v126;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v135;
  float v136;
  float v138;
  float v139;
  float v140;
  unsigned int v142;
  unsigned int v148;
  unsigned int v150;
  unsigned int v152;
  float v156;
  float v157;
  float v158;
  float v159;
  float v161;
  float v162;
  char v163;
  float v164;
  float v166;
  float v167;
  float v168;
  float v169;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  size_t v188;
  _BYTE *v189;
  unsigned __int16 *v190;
  unsigned int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (uint64_t *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v205 = v33 * *(float *)(v24 + 16);
    v206 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v203 = *(float *)&v38;
    v204 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v24 + 36);
    v45 = *(float *)(v24 + 40);
    v46 = *(float *)(v24 + 52) * 0.5;
    v47 = *(float *)(v24 + 56) * 0.5;
    v48 = *(float *)(v24 + 60) * 0.5;
    v209 = *(float *)(v24 + 64) * 0.5;
    v202 = *(float *)(v24 + 72);
    v49 = *(float *)(v24 + 68) * 0.5;
    v200 = *(float *)(v24 + 80);
    v201 = *(float *)(v24 + 76);
    v198 = *(float *)(v24 + 88);
    v199 = *(float *)(v24 + 84);
    v197 = *(float *)(v24 + 92);
    v196 = *(float *)(v24 + 96);
    v195 = *(float *)(v24 + 100);
    v193 = *(float *)(v24 + 104);
    v50 = v24 + 164;
    result = (_QWORD *)(v24 + 16548);
    v51 = (_BYTE *)(*v11 + v32 * v12 + v10);
    v52 = *(unsigned __int8 *)(v24 + 124);
    v53 = 16 - v52;
    _CF = v52 >= 0x11;
    v55 = *v25;
    v56 = v25[1];
    v57 = (char *)(v55 + v27 * v22 + 2 * v21);
    if (_CF)
      v53 = 0;
    v58 = v56 + v28 * (v22 / 2) + 2 * v21;
    v207 = (float)LODWORD(a6);
    v208 = (float)LODWORD(a5);
    v194 = *(float *)(v24 + 44);
    v192 = *(float *)(v24 + 48) * 0.5;
    do
    {
      v59 = &v57[v27];
      v60 = &v51[v32];
      if (v20)
      {
        v61 = 0;
        v62 = &v57[v27];
        v63 = (_WORD *)((char *)v18 + v14);
        v64 = &v51[v32];
        v65 = v18;
        do
        {
          v66 = (unsigned __int16 *)(v58 + 2 * v61);
          v67 = (float)(v66[1] >> v53) - v35;
          v68 = v206 * v67;
          v69 = v36 * (float)((float)(*(unsigned __int16 *)v57 >> v53) - v34);
          v70 = (float)(v206 * v67) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v206 * v67) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = (float)(*v66 >> v53) - v35;
          v73 = (float)(v204 * v67) + (float)(v72 * v205);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v203 * v72;
          v76 = (float)(v203 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v36 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v53) - v34);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v78;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v40;
          v84 = v36 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v34);
          v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v75 + v84;
          v88 = (float)(v75 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v36 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v34);
          v91 = v68 + v90;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v73 + v90;
          v88 = (float)(v73 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v88)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v36;
          v96 = v75 + v90;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S26, H26
          }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          v116 = llroundf(fminf(fmaxf(v89, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v50 + 2 * v116);
          __asm { FCVT            S27, H27 }
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v124 = llroundf(fminf(fmaxf(v97, 0.0), 8191.0));
          _S25 = (float)((float)(v201 * _S4) + (float)(_S3 * v202)) + (float)(_S5 * v200);
          v126 = (float)((float)(v198 * _S4) + (float)(_S3 * v199)) + (float)(_S5 * v197);
          _S3 = (float)((float)(v195 * _S4) + (float)(_S3 * v196)) + (float)(_S5 * v193);
          _S4 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S7 * v200);
          v129 = (float)((float)(v198 * _S6) + (float)(_S2 * v199)) + (float)(_S7 * v197);
          v130 = (float)((float)(v195 * _S6) + (float)(_S2 * v196)) + (float)(_S7 * v193);
          v131 = (float)((float)(v201 * _S1) + (float)(_S26 * v202)) + (float)(_S27 * v200);
          v132 = (float)((float)(v198 * _S1) + (float)(_S26 * v199)) + (float)(_S27 * v197);
          v133 = (float)((float)(v195 * _S1) + (float)(_S26 * v196)) + (float)(_S27 * v193);
          _S1 = (float)(v201 * _S24) + (float)(_S17 * v202);
          v135 = (float)(v198 * _S24) + (float)(_S17 * v199);
          v136 = (float)(v195 * _S24) + (float)(_S17 * v196);
          LOWORD(_S24) = *(_WORD *)(v50 + 2 * v124);
          __asm { FCVT            S24, H24 }
          v138 = _S1 + (float)(_S24 * v200);
          v139 = v135 + (float)(_S24 * v197);
          v140 = v136 + (float)(_S24 * v193);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v142 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H4
          }
          LOWORD(_S25) = *((_WORD *)result + v142);
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          __asm { FCVT            S25, H25 }
          v152 = llroundf(fminf(fmaxf(v140, 0.0), 8191.0));
          v40 = v83;
          _H6 = *((_WORD *)result + v148);
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H21
          }
          v156 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v194 * _S26);
          v157 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v192)) + (float)((float)(_S28 + _S25) * v46))
               + (float)((float)(_S26 + _S3) * v47);
          v158 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v48)) + (float)((float)(_S28 + _S25) * v209))
               + (float)((float)(_S26 + _S3) * v49);
          if (v157 < v42)
            v159 = v42;
          else
            v159 = v157;
          v88 = v157 <= v43;
          _H7 = *((_WORD *)result + v150);
          v161 = v156 + v39;
          if (v88)
            v162 = v159;
          else
            v162 = v43;
          v163 = llroundf(v162);
          if (v161 < v39)
            v164 = v39;
          else
            v164 = v161;
          _H24 = *((_WORD *)result + v152);
          *v51 = v163;
          if (v161 <= v41)
            v166 = v164;
          else
            v166 = v41;
          v51[1] = llroundf(v166);
          v167 = v43;
          if (v158 <= v43)
          {
            v167 = v158;
            if (v158 < v42)
              v167 = v42;
          }
          v168 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S5)) + (float)(v194 * _S3)) + v39;
          v51[2] = llroundf(v167);
          v169 = v41;
          if (v168 <= v41)
          {
            if (v168 < v39)
              v169 = v39;
            else
              v169 = v168;
          }
          v51[3] = llroundf(v169);
          v36 = v95;
          if (v65)
            *v65++ = 0;
          __asm
          {
            FCVT            S3, H1
            FCVT            S5, H2
            FCVT            S17, H4
            FCVT            S1, H6
            FCVT            S4, H7
            FCVT            S2, H24
          }
          v176 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S3)) + (float)(v194 * _S17)) + v39;
          v177 = _S3 + _S1;
          v178 = _S5 + _S4;
          v179 = _S17 + _S2;
          v180 = (float)((float)(v83 + (float)(v177 * v192)) + (float)(v178 * v46)) + (float)(v179 * v47);
          v181 = (float)((float)(v83 + (float)(v177 * v48)) + (float)(v178 * v209)) + (float)(v179 * v49);
          if (v180 < v42)
            v182 = v42;
          else
            v182 = v180;
          if (v180 > v43)
            v182 = v43;
          *v64 = llroundf(v182);
          if (v176 < v39)
            v183 = v39;
          else
            v183 = v176;
          if (v176 > v41)
            v183 = v41;
          v64[1] = llroundf(v183);
          v184 = v43;
          if (v181 <= v43)
          {
            v184 = v181;
            if (v181 < v42)
              v184 = v42;
          }
          v185 = (float)((float)((float)(v45 * _S4) + (float)(v44 * _S1)) + (float)(v194 * _S2)) + v39;
          v64[2] = llroundf(v184);
          v186 = v41;
          v35 = v207;
          v34 = v208;
          if (v185 <= v41)
          {
            v186 = v185;
            if (v185 < v39)
              v186 = v39;
          }
          v64[3] = llroundf(v186);
          if (v63)
            *v63++ = 0;
          v57 += 4;
          v62 += 4;
          v51 += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v20 > v61);
      }
      v57 = &v59[v27];
      v58 += v28;
      v51 = &v60[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v187 = 0;
      do
      {
        if (v20)
        {
          v188 = v20;
          v189 = v16;
          v190 = (unsigned __int16 *)v31;
          do
          {
            v191 = *v190++;
            *v189++ = llroundf((float)v191 * 0.0038911);
            --v188;
          }
          while (v188);
        }
        v31 += v29;
        v16 += v14;
        ++v187;
      }
      while (v187 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  _BYTE *v57;
  unsigned int v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned __int8 *v65;
  _BYTE *v66;
  size_t v67;
  unsigned __int8 *v68;
  _WORD *v69;
  _BYTE *v70;
  _WORD *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  size_t v123;
  _BYTE *v124;
  unsigned __int16 *v125;
  unsigned int v126;
  float v127;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *((_QWORD *)result + 14);
  v11 = (_QWORD *)*((_QWORD *)result + 16);
  v12 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
  v13 = (uint64_t *)*((_QWORD *)result + 17);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *((_QWORD *)result + 19);
    v25 = (uint64_t *)*((_QWORD *)result + 7);
    v26 = (uint64_t *)*((_QWORD *)result + 8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    *(float *)&v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v24 + 136);
    v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    v37 = (float)v34;
    v38 = v35 * *(float *)v24;
    v127 = v35 * *(float *)(v24 + 8);
    v39 = v35 * *(float *)(v24 + 16);
    v40 = v35 * *(float *)(v24 + 20);
    v41 = *(float *)(v24 + 28);
    v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    v47 = (float)v5;
    v48 = *(float *)(v24 + 36);
    v49 = *(float *)(v24 + 40);
    v50 = *(float *)(v24 + 44);
    v51 = *(float *)(v24 + 48) * 0.5;
    v52 = *(float *)(v24 + 52) * 0.5;
    v53 = *(float *)(v24 + 56) * 0.5;
    v54 = *(float *)(v24 + 60) * 0.5;
    v55 = *(float *)(v24 + 64) * 0.5;
    v56 = *(float *)(v24 + 68) * 0.5;
    v57 = (_BYTE *)(*v11 + v32 * v12 + v10);
    v58 = *(unsigned __int8 *)(v24 + 124);
    v59 = 16 - v58;
    v60 = v58 >= 0x11;
    v61 = *v25;
    v62 = v25[1];
    result = (unsigned __int8 *)(v61 + v27 * v22 + 2 * v21);
    if (v60)
      v59 = 0;
    v63 = v62 + v28 * (v22 / 2) + 2 * v21;
    v64 = v59;
    do
    {
      v65 = &result[v27];
      v66 = &v57[v32];
      if (v20)
      {
        v67 = 0;
        v68 = &result[v27];
        v69 = v18;
        v70 = &v57[v32];
        v71 = (_WORD *)((char *)v18 + v14);
        do
        {
          v72 = (unsigned __int16 *)(v63 + 2 * v67);
          v73 = (float)(*v72 >> v64) - v37;
          v74 = (float)(v72[1] >> v64) - v37;
          v75 = v127 * v74;
          v76 = (float)(v40 * v74) + (float)(v73 * v39);
          v77 = v42 * v73;
          v78 = v38 * (float)((float)(*(unsigned __int16 *)result >> v64) - v36);
          v79 = v38 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v36);
          v80 = *(unsigned __int16 *)v68;
          v81 = *((unsigned __int16 *)v68 + 1);
          v82 = v75 + v78;
          v83 = v78 + v76;
          v84 = v77 + v78;
          v85 = v75 + v79;
          v86 = v76 + v79;
          v87 = v77 + v79;
          v88 = (float)((float)((float)(v49 * v83) + (float)(v48 * v82)) + (float)(v50 * v84)) + v43;
          v89 = v82 + v85;
          v90 = v83 + v86;
          v91 = v84 + v87;
          v92 = (float)((float)(v44 + (float)(v89 * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          if (v92 < v46)
            v93 = v46;
          else
            v93 = (float)((float)(v44 + (float)(v89 * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          if (v92 > v47)
            v93 = v47;
          *v57 = llroundf(v93);
          v94 = v45;
          if (v88 <= v45)
          {
            v94 = v88;
            if (v88 < v43)
              v94 = v43;
          }
          v95 = (float)((float)(v44 + (float)(v89 * v54)) + (float)(v90 * v55)) + (float)(v91 * v56);
          v57[1] = llroundf(v94);
          v96 = v47;
          if (v95 <= v47)
          {
            v96 = v95;
            if (v95 < v46)
              v96 = v46;
          }
          v97 = (float)((float)((float)(v49 * v86) + (float)(v48 * v85)) + (float)(v50 * v87)) + v43;
          v57[2] = llroundf(v96);
          v98 = v45;
          if (v97 <= v45)
          {
            if (v97 < v43)
              v98 = v43;
            else
              v98 = v97;
          }
          v57[3] = llroundf(v98);
          if (v69)
            *v69++ = 0;
          v99 = v38 * (float)((float)(int)(v80 >> v64) - v36);
          v100 = v38 * (float)((float)(int)(v81 >> v64) - v36);
          v101 = v75 + v99;
          v102 = v76 + v99;
          v103 = v77 + v99;
          v104 = v75 + v100;
          v105 = v76 + v100;
          v106 = v77 + v100;
          v107 = (float)((float)((float)(v49 * v102) + (float)(v48 * v101)) + (float)(v50 * v103)) + v43;
          v108 = (float)((float)((float)(v49 * v105) + (float)(v48 * v104)) + (float)(v50 * v106)) + v43;
          v109 = v101 + v104;
          v110 = v102 + v105;
          v111 = (float)(v44 + (float)(v109 * v51)) + (float)(v110 * v52);
          v112 = v103 + v106;
          v113 = v111 + (float)(v112 * v53);
          v114 = (float)(v44 + (float)(v109 * v54)) + (float)(v110 * v55);
          if (v113 < v46)
            v115 = v46;
          else
            v115 = v111 + (float)(v112 * v53);
          if (v113 <= v47)
            v116 = v115;
          else
            v116 = v47;
          v117 = v114 + (float)(v112 * v56);
          *v70 = llroundf(v116);
          if (v107 < v43)
            v118 = v43;
          else
            v118 = v107;
          if (v107 > v45)
            v118 = v45;
          v70[1] = llroundf(v118);
          if (v117 < v46)
            v119 = v46;
          else
            v119 = v117;
          if (v117 <= v47)
            v120 = v119;
          else
            v120 = v47;
          v70[2] = llroundf(v120);
          v121 = v45;
          if (v108 <= v45)
          {
            v121 = v108;
            if (v108 < v43)
              v121 = v43;
          }
          v70[3] = llroundf(v121);
          if (v71)
            *v71++ = 0;
          result += 4;
          v68 += 4;
          v57 += 4;
          v70 += 4;
          v67 += 2;
        }
        while (v20 > v67);
      }
      result = &v65[v27];
      v63 += v28;
      v57 = &v66[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v122 = 0;
      do
      {
        if (v20)
        {
          v123 = v20;
          v124 = v16;
          v125 = (unsigned __int16 *)v31;
          do
          {
            v126 = *v125++;
            *v124++ = llroundf((float)v126 * 0.0038911);
            --v123;
          }
          while (v123);
        }
        v31 += v29;
        v16 += v14;
        ++v122;
      }
      while (v122 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unsigned __int8 *)memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  float v62;
  float v63;
  char *v64;
  _BYTE *v65;
  size_t v66;
  char *v67;
  _WORD *v68;
  _BYTE *v69;
  _WORD *v70;
  unsigned __int16 *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v119;
  float v120;
  float v121;
  float v122;
  float v127;
  float v128;
  float v133;
  float v134;
  float v135;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  uint64_t v216;
  size_t v217;
  _BYTE *v218;
  unsigned __int16 *v219;
  unsigned int v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (uint64_t *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v242 = v33 * *(float *)(v24 + 16);
    v243 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v240 = *(float *)&v38;
    v241 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v45 = *(float *)(v24 + 36);
    v44 = *(float *)(v24 + 40);
    v46 = *(float *)(v24 + 52) * 0.5;
    v236 = *(float *)(v24 + 72);
    v233 = *(float *)(v24 + 80);
    v234 = *(float *)(v24 + 76);
    v231 = *(float *)(v24 + 88);
    v232 = *(float *)(v24 + 84);
    v229 = *(float *)(v24 + 96);
    v230 = *(float *)(v24 + 92);
    v228 = *(float *)(v24 + 100);
    v226 = *(float *)(v24 + 104);
    v47 = v24 + 164;
    result = (_QWORD *)(v24 + 16548);
    v48 = (_BYTE *)(*v11 + v32 * v12 + v10);
    v49 = *(unsigned __int8 *)(v24 + 124);
    v50 = 16 - v49;
    _CF = v49 >= 0x11;
    v52 = *v25;
    v53 = v25[1];
    v54 = v52 + v27 * v22;
    if (_CF)
      v55 = 0;
    else
      v55 = v50;
    if (v22 >= 0)
      v56 = v22;
    else
      v56 = v22 + 1;
    v57 = v53 + v28 * (v56 >> 1);
    v58 = v24 + 32932;
    v59 = (char *)(v54 + 2 * v21);
    v60 = v57 + 2 * v21;
    v61 = v55;
    v63 = *(float *)(v24 + 108);
    v62 = *(float *)(v24 + 112);
    v221 = *(float *)(v24 + 120);
    v222 = *(float *)(v24 + 116);
    v244 = (float)LODWORD(a6);
    v245 = (float)LODWORD(a5);
    v239 = v36;
    v237 = *(float *)(v24 + 64) * 0.5;
    v238 = *(float *)(v24 + 60) * 0.5;
    v235 = *(float *)(v24 + 68) * 0.5;
    v227 = *(float *)(v24 + 48) * 0.5;
    v224 = *(float *)(v24 + 44);
    v225 = v40;
    v223 = *(float *)(v24 + 56) * 0.5;
    do
    {
      v64 = &v59[v27];
      v65 = &v48[v32];
      if (v20)
      {
        v66 = 0;
        v67 = &v59[v27];
        v68 = (_WORD *)((char *)v18 + v14);
        v69 = &v48[v32];
        v70 = v18;
        do
        {
          v71 = (unsigned __int16 *)(v60 + 2 * v66);
          v72 = (float)(v71[1] >> v61) - v35;
          v73 = v243 * v72;
          v74 = v36 * (float)((float)(*(unsigned __int16 *)v59 >> v61) - v34);
          v75 = (float)(v243 * v72) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v243 * v72) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = (float)(*v71 >> v61) - v35;
          v78 = (float)(v241 * v72) + (float)(v77 * v242);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v240 * v77;
          v81 = (float)(v240 * v77) + v74;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v36 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v61) - v34);
          v84 = 8191.0;
          if ((float)(v73 + v83) <= 8191.0)
          {
            v84 = v73 + v83;
            if ((float)(v73 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v85 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v80 + v83;
          v87 = (float)(v80 + v83) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          v89 = v36 * (float)((float)(*(unsigned __int16 *)v67 >> v61) - v34);
          v90 = 8191.0;
          if ((float)(v73 + v89) <= 8191.0)
          {
            v90 = v73 + v89;
            if ((float)(v73 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = 8191.0;
          if ((float)(v78 + v89) <= 8191.0)
          {
            v91 = v78 + v89;
            if ((float)(v78 + v89) < 0.0)
              v91 = 0.0;
          }
          v92 = v80 + v89;
          v87 = (float)(v80 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v36 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v61) - v34);
          v95 = v73 + v94;
          v87 = (float)(v73 + v94) <= 8191.0;
          v96 = 8191.0;
          if (v87)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v78 + v94;
          v87 = (float)(v78 + v94) <= 8191.0;
          v98 = 8191.0;
          if (v87)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v80 + v94;
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H2 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v119 = fmaxf(_S2, fmaxf(_S24, _S25));
          v120 = (float)((float)((float)(v62 * _S24) + (float)(v63 * _S2)) + (float)(v222 * _S25))
               + (float)(v221 * v119);
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = (float)((float)((float)(v62 * _S24) + (float)(v63 * _S2)) + (float)(v222 * _S25))
                 + (float)(v221 * v119);
            if (v120 < 0.0)
              v121 = 0.0;
          }
          v122 = v44;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v121));
          v127 = (float)((float)((float)(v62 * _S28) + (float)(v63 * _S26)) + (float)(v222 * _S30))
               + (float)(v221 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            v128 = v127;
            if (v127 < 0.0)
              v128 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v128));
          v133 = fmaxf(_S9, fmaxf(_S10, _S11));
          v134 = (float)((float)((float)(v62 * _S10) + (float)(v63 * _S9)) + (float)(v222 * _S11))
               + (float)(v221 * v133);
          v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            v135 = (float)((float)((float)(v62 * _S10) + (float)(v63 * _S9)) + (float)(v222 * _S11))
                 + (float)(v221 * v133);
            if (v134 < 0.0)
              v135 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v140 = _S2 * _S1;
          v141 = _S24 * _S1;
          v142 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v144 = _S26 * _S1;
          v145 = _S28 * _S1;
          v146 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v135));
          __asm { FCVT            S2, H1 }
          v148 = _S9 * _S2;
          v149 = _S10 * _S2;
          v150 = _S11 * _S2;
          v151 = (float)((float)((float)(v62 * _S31) + (float)(v63 * _S29)) + (float)(v222 * _S8))
               + (float)(v221 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            v152 = v151;
            if (v151 < 0.0)
              v152 = 0.0;
          }
          _H25 = *((_WORD *)result + llroundf(v152));
          __asm { FCVT            S25, H25 }
          v155 = _S29 * _S25;
          v156 = _S31 * _S25;
          v157 = _S8 * _S25;
          v158 = (float)((float)(v234 * v141) + (float)(v140 * v236)) + (float)(v142 * v233);
          v159 = (float)((float)(v231 * v141) + (float)(v140 * v232)) + (float)(v142 * v230);
          v160 = (float)((float)(v228 * v141) + (float)(v140 * v229)) + (float)(v142 * v226);
          v161 = (float)((float)(v234 * v145) + (float)(v144 * v236)) + (float)(v146 * v233);
          v162 = (float)((float)(v231 * v145) + (float)(v144 * v232)) + (float)(v146 * v230);
          v163 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v226);
          v164 = (float)((float)(v234 * v149) + (float)(v148 * v236)) + (float)(v150 * v233);
          v165 = (float)((float)(v231 * v149) + (float)(v148 * v232)) + (float)(v150 * v230);
          v166 = (float)((float)(v228 * v149) + (float)(v148 * v229)) + (float)(v150 * v226);
          v167 = (float)((float)(v234 * v156) + (float)(v155 * v236)) + (float)(v157 * v233);
          v168 = (float)((float)(v231 * v156) + (float)(v155 * v232)) + (float)(v157 * v230);
          v169 = (float)((float)(v228 * v156) + (float)(v155 * v229)) + (float)(v157 * v226);
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S9, H2
          }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          v44 = v122;
          v188 = (float)((float)((float)(v122 * _S30) + (float)(v45 * _S29)) + (float)(v224 * _S9)) + v39;
          v189 = _S29 + _S24;
          if (v188 < v39)
            v190 = v39;
          else
            v190 = (float)((float)((float)(v122 * _S30) + (float)(v45 * _S29)) + (float)(v224 * _S9)) + v39;
          v87 = v188 <= v41;
          v191 = _S30 + _S25;
          v192 = (float)((float)(v225 + (float)(v189 * v227)) + (float)((float)(_S30 + _S25) * v46))
               + (float)((float)(_S9 + _S26) * v223);
          if (!v87)
            v190 = v41;
          *v48 = llroundf(v190);
          v193 = v43;
          if (v192 <= v43)
          {
            v193 = v192;
            if (v192 < v42)
              v193 = v42;
          }
          v194 = (float)((float)((float)(v122 * _S25) + (float)(v45 * _S24)) + (float)(v224 * _S26)) + v39;
          v48[1] = llroundf(v193);
          v195 = v41;
          v36 = v239;
          if (v194 <= v41)
          {
            v195 = v194;
            if (v194 < v39)
              v195 = v39;
          }
          v196 = (float)((float)(v225 + (float)(v189 * v238)) + (float)(v191 * v237))
               + (float)((float)(_S9 + _S26) * v235);
          v48[2] = llroundf(v195);
          v197 = v43;
          v34 = v245;
          if (v196 <= v43)
          {
            if (v196 < v42)
              v197 = v42;
            else
              v197 = v196;
          }
          v48[3] = llroundf(v197);
          if (v70)
            *v70++ = 0;
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
            FCVT            S3, H3
            FCVT            S17, H17
            FCVT            S21, H21
            FCVT            S22, H22
          }
          v204 = (float)((float)((float)(v122 * _S2) + (float)(v45 * _S1)) + (float)(v224 * _S3)) + v39;
          v205 = (float)((float)((float)(v122 * _S21) + (float)(v45 * _S17)) + (float)(v224 * _S22)) + v39;
          v206 = _S1 + _S17;
          v207 = _S2 + _S21;
          v208 = _S3 + _S22;
          v209 = (float)((float)(v225 + (float)(v206 * v227)) + (float)(v207 * v46)) + (float)(v208 * v223);
          v210 = (float)(v225 + (float)(v206 * v238)) + (float)(v207 * v237);
          if (v204 < v39)
            v211 = v39;
          else
            v211 = v204;
          if (v204 > v41)
            v211 = v41;
          v212 = v210 + (float)(v208 * v235);
          *v69 = llroundf(v211);
          if (v209 < v42)
            v213 = v42;
          else
            v213 = v209;
          if (v209 > v43)
            v213 = v43;
          v69[1] = llroundf(v213);
          if (v205 < v39)
            v214 = v39;
          else
            v214 = v205;
          if (v205 > v41)
            v214 = v41;
          v69[2] = llroundf(v214);
          v215 = v43;
          if (v212 <= v43)
          {
            v215 = v212;
            if (v212 < v42)
              v215 = v42;
          }
          v69[3] = llroundf(v215);
          v35 = v244;
          if (v68)
            *v68++ = 0;
          v59 += 4;
          v67 += 4;
          v48 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v20 > v66);
      }
      v59 = &v64[v27];
      v60 += v28;
      v48 = &v65[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v216 = 0;
      do
      {
        if (v20)
        {
          v217 = v20;
          v218 = v16;
          v219 = (unsigned __int16 *)v31;
          do
          {
            v220 = *v219++;
            *v218++ = llroundf((float)v220 * 0.0038911);
            --v217;
          }
          while (v217);
        }
        v31 += v29;
        v16 += v14;
        ++v216;
      }
      while (v216 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _BYTE *v63;
  size_t v64;
  char *v65;
  _WORD *v66;
  _BYTE *v67;
  _WORD *v68;
  unsigned __int16 *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  size_t v183;
  _BYTE *v184;
  unsigned __int16 *v185;
  unsigned int v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (uint64_t *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v193 = v33 * *(float *)(v24 + 16);
    v194 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v191 = *(float *)&v38;
    v192 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v201 = *(float *)(v24 + 36);
    v202 = v40;
    v199 = *(float *)(v24 + 44);
    v200 = *(float *)(v24 + 40);
    v197 = *(float *)(v24 + 52) * 0.5;
    v198 = *(float *)(v24 + 48) * 0.5;
    v196 = *(float *)(v24 + 56) * 0.5;
    v44 = *(float *)(v24 + 72);
    v46 = *(float *)(v24 + 76);
    v45 = *(float *)(v24 + 80);
    v47 = *(float *)(v24 + 84);
    v48 = *(float *)(v24 + 88);
    v49 = *(float *)(v24 + 92);
    v50 = *(float *)(v24 + 96);
    v51 = *(float *)(v24 + 100);
    v52 = *(float *)(v24 + 104);
    v53 = v24 + 164;
    result = (_QWORD *)(v24 + 16548);
    v54 = (_BYTE *)(*v11 + v32 * v12 + v10);
    v55 = *(unsigned __int8 *)(v24 + 124);
    v56 = 16 - v55;
    _CF = v55 >= 0x11;
    v58 = *v25;
    v59 = v25[1];
    v60 = (char *)(v58 + v27 * v22 + 2 * v21);
    if (_CF)
      v56 = 0;
    v61 = v59 + v28 * (v22 / 2) + 2 * v21;
    v195 = v34;
    v187 = (float)LODWORD(a6);
    v188 = *(float *)(v24 + 68) * 0.5;
    v189 = *(float *)(v24 + 64) * 0.5;
    v190 = *(float *)(v24 + 60) * 0.5;
    do
    {
      v62 = &v60[v27];
      v63 = &v54[v32];
      if (v20)
      {
        v64 = 0;
        v65 = &v60[v27];
        v66 = (_WORD *)((char *)v18 + v14);
        v67 = &v54[v32];
        v68 = v18;
        do
        {
          v69 = (unsigned __int16 *)(v61 + 2 * v64);
          v70 = (float)(v69[1] >> v56) - v35;
          v71 = v194 * v70;
          v72 = v36 * (float)((float)(*(unsigned __int16 *)v60 >> v56) - v34);
          v73 = (float)(v194 * v70) + v72;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = (float)(v194 * v70) + v72;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = (float)(*v69 >> v56) - v35;
          v76 = (float)(v192 * v70) + (float)(v75 * v193);
          v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = v191 * v75;
          v79 = (float)(v191 * v75) + v72;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v36 * (float)((float)(*((unsigned __int16 *)v60 + 1) >> v56) - v34);
          v82 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            v82 = v71 + v81;
            if ((float)(v71 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            v83 = v76 + v81;
            if ((float)(v76 + v81) < 0.0)
              v83 = 0.0;
          }
          v84 = v78 + v81;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v36 * (float)((float)(*(unsigned __int16 *)v65 >> v56) - v34);
          v87 = 8191.0;
          if ((float)(v71 + v86) <= 8191.0)
          {
            v87 = v71 + v86;
            if ((float)(v71 + v86) < 0.0)
              v87 = 0.0;
          }
          v88 = 8191.0;
          if ((float)(v76 + v86) <= 8191.0)
          {
            v88 = v76 + v86;
            if ((float)(v76 + v86) < 0.0)
              v88 = 0.0;
          }
          v89 = v78 + v86;
          v90 = (float)(v78 + v86) <= 8191.0;
          v91 = 8191.0;
          if (v90)
          {
            v91 = v89;
            if (v89 < 0.0)
              v91 = 0.0;
          }
          v92 = v36 * (float)((float)(*((unsigned __int16 *)v65 + 1) >> v56) - v34);
          v93 = v71 + v92;
          v90 = (float)(v71 + v92) <= 8191.0;
          v94 = 8191.0;
          if (v90)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v76 + v92;
          v90 = (float)(v76 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v90)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v36;
          v98 = v78 + v92;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H26 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S1, H1
          }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v127 = (float)((float)(v46 * _S4) + (float)(_S3 * v44)) + (float)(_S5 * v45);
          v128 = (float)((float)(v48 * _S4) + (float)(_S3 * v47)) + (float)(_S5 * v49);
          _S3 = (float)((float)(v51 * _S4) + (float)(_S3 * v50)) + (float)(_S5 * v52);
          v130 = (float)((float)(v46 * _S6) + (float)(_S2 * v44)) + (float)(_S20 * v45);
          v131 = (float)((float)(v48 * _S6) + (float)(_S2 * v47)) + (float)(_S20 * v49);
          v132 = (float)((float)(v51 * _S6) + (float)(_S2 * v50)) + (float)(_S20 * v52);
          v133 = (float)((float)(v46 * _S27) + (float)(_S26 * v44)) + (float)(_S1 * v45);
          v134 = (float)((float)(v48 * _S27) + (float)(_S26 * v47)) + (float)(_S1 * v49);
          v135 = (float)((float)(v51 * _S27) + (float)(_S26 * v50)) + (float)(_S1 * v52);
          v136 = (float)((float)(v46 * _S24) + (float)(_S7 * v44)) + (float)(_S25 * v45);
          v137 = (float)((float)(v48 * _S24) + (float)(_S7 * v47)) + (float)(_S25 * v49);
          v138 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S3, H3
          }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          v151 = (float)((float)((float)(v200 * _S30) + (float)(v201 * _S28)) + (float)(v199 * _S3)) + v39;
          v152 = _S28 + _S24;
          if (v151 < v39)
            v153 = v39;
          else
            v153 = (float)((float)((float)(v200 * _S30) + (float)(v201 * _S28)) + (float)(v199 * _S3)) + v39;
          v90 = v151 <= v41;
          v154 = _S30 + _S25;
          v155 = (float)(v202 + (float)(v152 * v198)) + (float)((float)(_S30 + _S25) * v197);
          v156 = _S3 + _S26;
          v157 = v155 + (float)((float)(_S3 + _S26) * v196);
          if (v90)
            v158 = v153;
          else
            v158 = v41;
          *v54 = llroundf(v158);
          v159 = v43;
          if (v157 <= v43)
          {
            v159 = v157;
            if (v157 < v42)
              v159 = v42;
          }
          v160 = (float)((float)((float)(v200 * _S25) + (float)(v201 * _S24)) + (float)(v199 * _S26)) + v39;
          v54[1] = llroundf(v159);
          v161 = v41;
          if (v160 <= v41)
          {
            v161 = v160;
            if (v160 < v39)
              v161 = v39;
          }
          v162 = (float)((float)(v202 + (float)(v152 * v190)) + (float)(v154 * v189)) + (float)(v156 * v188);
          v54[2] = llroundf(v161);
          v163 = v43;
          v36 = v97;
          if (v162 <= v43)
          {
            if (v162 < v42)
              v163 = v42;
            else
              v163 = (float)((float)(v202 + (float)(v152 * v190)) + (float)(v154 * v189)) + (float)(v156 * v188);
          }
          v54[3] = llroundf(v163);
          if (v68)
            *v68++ = 0;
          v35 = v187;
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
            FCVT            S3, H4
            FCVT            S4, H5
            FCVT            S5, H6
            FCVT            S6, H7
          }
          v170 = (float)((float)((float)(v200 * _S1) + (float)(v201 * _S2)) + (float)(v199 * _S3)) + v39;
          v171 = (float)((float)((float)(v200 * _S5) + (float)(v201 * _S4)) + (float)(v199 * _S6)) + v39;
          v172 = _S2 + _S4;
          v173 = _S1 + _S5;
          v174 = _S3 + _S6;
          v175 = (float)((float)(v202 + (float)(v172 * v198)) + (float)(v173 * v197)) + (float)(v174 * v196);
          v176 = (float)(v202 + (float)(v172 * v190)) + (float)(v173 * v189);
          if (v170 < v39)
            v177 = v39;
          else
            v177 = v170;
          if (v170 > v41)
            v177 = v41;
          v178 = v176 + (float)(v174 * v188);
          *v67 = llroundf(v177);
          if (v175 < v42)
            v179 = v42;
          else
            v179 = v175;
          if (v175 > v43)
            v179 = v43;
          v67[1] = llroundf(v179);
          if (v171 < v39)
            v180 = v39;
          else
            v180 = v171;
          if (v171 > v41)
            v180 = v41;
          v67[2] = llroundf(v180);
          v181 = v43;
          if (v178 <= v43)
          {
            v181 = v178;
            if (v178 < v42)
              v181 = v42;
          }
          v67[3] = llroundf(v181);
          v34 = v195;
          if (v66)
            *v66++ = 0;
          v60 += 4;
          v65 += 4;
          v54 += 4;
          v67 += 4;
          v64 += 2;
        }
        while (v20 > v64);
      }
      v60 = &v62[v27];
      v61 += v28;
      v54 = &v63[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v182 = 0;
      do
      {
        if (v20)
        {
          v183 = v20;
          v184 = v16;
          v185 = (unsigned __int16 *)v31;
          do
          {
            v186 = *v185++;
            *v184++ = llroundf((float)v186 * 0.0038911);
            --v183;
          }
          while (v183);
        }
        v31 += v29;
        v16 += v14;
        ++v182;
      }
      while (v182 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  _BYTE *v57;
  unsigned int v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned __int8 *v65;
  _BYTE *v66;
  size_t v67;
  unsigned __int8 *v68;
  _WORD *v69;
  _BYTE *v70;
  _WORD *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  size_t v119;
  _BYTE *v120;
  unsigned __int16 *v121;
  unsigned int v122;
  float v123;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *((_QWORD *)result + 14);
  v11 = (_QWORD *)*((_QWORD *)result + 16);
  v12 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
  v13 = (uint64_t *)*((_QWORD *)result + 17);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *((_QWORD *)result + 19);
    v25 = (uint64_t *)*((_QWORD *)result + 7);
    v26 = (uint64_t *)*((_QWORD *)result + 8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    *(float *)&v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v24 + 136);
    v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    v37 = (float)v34;
    v38 = v35 * *(float *)v24;
    v123 = v35 * *(float *)(v24 + 8);
    v39 = v35 * *(float *)(v24 + 16);
    v40 = v35 * *(float *)(v24 + 20);
    v41 = *(float *)(v24 + 28);
    v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    v47 = (float)v5;
    v48 = *(float *)(v24 + 36);
    v49 = *(float *)(v24 + 40);
    v50 = *(float *)(v24 + 44);
    v51 = *(float *)(v24 + 48) * 0.5;
    v52 = *(float *)(v24 + 52) * 0.5;
    v53 = *(float *)(v24 + 56) * 0.5;
    v54 = *(float *)(v24 + 60) * 0.5;
    v55 = *(float *)(v24 + 64) * 0.5;
    v56 = *(float *)(v24 + 68) * 0.5;
    v57 = (_BYTE *)(*v11 + v32 * v12 + v10);
    v58 = *(unsigned __int8 *)(v24 + 124);
    v59 = 16 - v58;
    v60 = v58 >= 0x11;
    v61 = *v25;
    v62 = v25[1];
    result = (unsigned __int8 *)(v61 + v27 * v22 + 2 * v21);
    if (v60)
      v59 = 0;
    v63 = v62 + v28 * (v22 / 2) + 2 * v21;
    v64 = v59;
    do
    {
      v65 = &result[v27];
      v66 = &v57[v32];
      if (v20)
      {
        v67 = 0;
        v68 = &result[v27];
        v69 = v18;
        v70 = &v57[v32];
        v71 = (_WORD *)((char *)v18 + v14);
        do
        {
          v72 = (unsigned __int16 *)(v63 + 2 * v67);
          v73 = (float)(*v72 >> v64) - v37;
          v74 = (float)(v72[1] >> v64) - v37;
          v75 = v123 * v74;
          v76 = (float)(v40 * v74) + (float)(v73 * v39);
          v77 = v42 * v73;
          v78 = v38 * (float)((float)(*(unsigned __int16 *)result >> v64) - v36);
          v79 = v38 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v36);
          v80 = *(unsigned __int16 *)v68;
          v81 = *((unsigned __int16 *)v68 + 1);
          v82 = v78 + v76;
          v83 = v77 + v78;
          v84 = v77 + v79;
          v85 = (float)((float)((float)(v49 * (float)(v78 + v76)) + (float)(v48 * (float)(v75 + v78)))
                      + (float)(v50 * (float)(v77 + v78)))
              + v43;
          v86 = (float)((float)((float)(v49 * (float)(v76 + v79)) + (float)(v48 * (float)(v75 + v79)))
                      + (float)(v50 * (float)(v77 + v79)))
              + v43;
          v87 = (float)(v75 + v78) + (float)(v75 + v79);
          v88 = v82 + (float)(v76 + v79);
          v89 = v83 + v84;
          v90 = (float)((float)(v44 + (float)(v87 * v51)) + (float)(v88 * v52)) + (float)((float)(v83 + v84) * v53);
          if (v85 < v43)
            v91 = v43;
          else
            v91 = v85;
          if (v85 <= v45)
            v92 = v91;
          else
            v92 = v45;
          *v57 = llroundf(v92);
          if (v90 < v46)
            v93 = v46;
          else
            v93 = v90;
          if (v90 > v47)
            v93 = v47;
          v57[1] = llroundf(v93);
          v94 = v45;
          if (v86 <= v45)
          {
            v94 = v86;
            if (v86 < v43)
              v94 = v43;
          }
          v95 = (float)((float)(v44 + (float)(v87 * v54)) + (float)(v88 * v55)) + (float)(v89 * v56);
          v57[2] = llroundf(v94);
          v96 = v47;
          if (v95 <= v47)
          {
            if (v95 < v46)
              v96 = v46;
            else
              v96 = v95;
          }
          v57[3] = llroundf(v96);
          if (v69)
            *v69++ = 0;
          v97 = v38 * (float)((float)(int)(v80 >> v64) - v36);
          v98 = v38 * (float)((float)(int)(v81 >> v64) - v36);
          v99 = v75 + v97;
          v100 = v76 + v97;
          v101 = v77 + v97;
          v102 = v75 + v98;
          v103 = v76 + v98;
          v104 = v77 + v98;
          v105 = (float)((float)((float)(v49 * v100) + (float)(v48 * v99)) + (float)(v50 * v101)) + v43;
          v106 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
          v107 = v99 + v102;
          v108 = v100 + v103;
          v109 = v101 + v104;
          v110 = (float)((float)(v44 + (float)(v107 * v51)) + (float)(v108 * v52)) + (float)(v109 * v53);
          if (v105 < v43)
            v111 = v43;
          else
            v111 = v105;
          if (v105 > v45)
            v111 = v45;
          *v70 = llroundf(v111);
          if (v110 < v46)
            v112 = v46;
          else
            v112 = (float)((float)(v44 + (float)(v107 * v51)) + (float)(v108 * v52)) + (float)(v109 * v53);
          if (v110 <= v47)
            v113 = v112;
          else
            v113 = v47;
          v70[1] = llroundf(v113);
          v114 = v45;
          if (v106 <= v45)
          {
            v114 = v106;
            if (v106 < v43)
              v114 = v43;
          }
          v115 = (float)(v44 + (float)(v107 * v54)) + (float)(v108 * v55);
          v116 = v115 + (float)(v109 * v56);
          v70[2] = llroundf(v114);
          v117 = v47;
          if (v116 <= v47)
          {
            v117 = v115 + (float)(v109 * v56);
            if (v116 < v46)
              v117 = v46;
          }
          v70[3] = llroundf(v117);
          if (v71)
            *v71++ = 0;
          result += 4;
          v68 += 4;
          v57 += 4;
          v70 += 4;
          v67 += 2;
        }
        while (v20 > v67);
      }
      result = &v65[v27];
      v63 += v28;
      v57 = &v66[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v118 = 0;
      do
      {
        if (v20)
        {
          v119 = v20;
          v120 = v16;
          v121 = (unsigned __int16 *)v31;
          do
          {
            v122 = *v121++;
            *v120++ = llroundf((float)v122 * 0.0038911);
            --v119;
          }
          while (v119);
        }
        v31 += v29;
        v16 += v14;
        ++v118;
      }
      while (v118 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unsigned __int8 *)memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;
  _WORD *v58;
  float v59;
  float v60;
  float v61;
  char *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  _WORD *v65;
  char *v66;
  unsigned __int8 *v67;
  unsigned __int16 *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v117;
  float v118;
  float v119;
  float v124;
  float v125;
  float v130;
  float v131;
  float v132;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v148;
  float v149;
  float v150;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v179;
  float v180;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v196;
  float v197;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (uint64_t *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v211 = v18[2];
    v24 = (char *)(v211 + v23 * v12 + 2 * v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v210 = v15[2];
    v28 = (char *)(v210 + v27 * v16 + 2 * v14);
    v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = (float)LODWORD(a5);
    v32 = v29 * *(float *)v17;
    v234 = v29 * *(float *)(v17 + 16);
    v235 = v29 * *(float *)(v17 + 8);
    v33 = v29 * *(float *)(v17 + 20);
    *(float *)&v34 = v29 * *(float *)(v17 + 28);
    v232 = *(float *)&v34;
    v233 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    v39 = (float)v34;
    v40 = *(float *)(v17 + 48) * 0.5;
    v41 = *(float *)(v17 + 52) * 0.5;
    v42 = *(float *)(v17 + 64) * 0.5;
    v226 = *(float *)(v17 + 72);
    v43 = *(float *)(v17 + 68) * 0.5;
    v224 = *(float *)(v17 + 80);
    v225 = *(float *)(v17 + 76);
    v222 = *(float *)(v17 + 88);
    v223 = *(float *)(v17 + 84);
    v221 = *(float *)(v17 + 92);
    v220 = *(float *)(v17 + 96);
    v218 = *(float *)(v17 + 100);
    v216 = *(float *)(v17 + 104);
    v44 = v17 + 164;
    v45 = v17 + 16548;
    v46 = v17 + 32932;
    v48 = *v15;
    v47 = v15[1];
    result = (unsigned __int8 *)(v48 + *v20 * v16 + 2 * v14);
    v49 = v47 + v26 * v16 + 2 * v14;
    if (!v47)
      v49 = 0;
    v50 = *(unsigned __int8 *)(v17 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = *(unsigned __int8 *)(v17 + 124);
    v53 = 16 - v52;
    v54 = v18[1];
    v55 = (char *)(*v18 + v21 * v12 + 2 * v11);
    if (v52 >= 0x11)
      v53 = 0;
    v56 = v54 + v22 * (v12 / 2) + 2 * v11;
    v57 = v53;
    v58 = (_WORD *)(v49 + 2);
    v59 = *(float *)(v17 + 108);
    v60 = *(float *)(v17 + 112);
    v61 = *(float *)(v17 + 116);
    v212 = *(float *)(v17 + 120);
    v213 = v59;
    v236 = (float)LODWORD(a5);
    v237 = v30;
    v230 = v38;
    v231 = v36;
    v228 = v32;
    v229 = *(float *)(v17 + 36);
    v227 = *(float *)(v17 + 60) * 0.5;
    v219 = *(float *)(v17 + 44);
    v217 = *(float *)(v17 + 40);
    v215 = *(float *)(v17 + 56) * 0.5;
    v214 = v60;
    do
    {
      v62 = &v55[v21];
      v63 = &result[v25];
      if (v10)
      {
        v64 = 0;
        v65 = v58;
        v66 = &v55[v21];
        v67 = &result[v25];
        do
        {
          v68 = (unsigned __int16 *)(v56 + 2 * v64);
          v69 = (float)(v68[1] >> v57) - v31;
          v70 = v235 * v69;
          v71 = v32 * (float)((float)(*(unsigned __int16 *)v55 >> v57) - v30);
          v72 = (float)(v235 * v69) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v235 * v69) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = (float)(*v68 >> v57) - v31;
          v75 = (float)(v233 * v69) + (float)(v74 * v234);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v232 * v74;
          v78 = (float)(v232 * v74) + v71;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v32 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v57) - v30);
          v81 = 8191.0;
          if ((float)(v70 + v80) <= 8191.0)
          {
            v81 = v70 + v80;
            if ((float)(v70 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v75 + v80) <= 8191.0)
          {
            v82 = v75 + v80;
            if ((float)(v75 + v80) < 0.0)
              v82 = 0.0;
          }
          v83 = v77 + v80;
          v84 = (float)(v77 + v80) <= 8191.0;
          v85 = 8191.0;
          if (v84)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = v32 * (float)((float)(*(unsigned __int16 *)v66 >> v57) - v30);
          v87 = 8191.0;
          if ((float)(v70 + v86) <= 8191.0)
          {
            v87 = v70 + v86;
            if ((float)(v70 + v86) < 0.0)
              v87 = 0.0;
          }
          v88 = 8191.0;
          if ((float)(v75 + v86) <= 8191.0)
          {
            v88 = v75 + v86;
            if ((float)(v75 + v86) < 0.0)
              v88 = 0.0;
          }
          v89 = v77 + v86;
          v84 = (float)(v77 + v86) <= 8191.0;
          v90 = 8191.0;
          if (v84)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v32 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v57) - v30);
          v92 = v70 + v91;
          v84 = (float)(v70 + v91) <= 8191.0;
          v93 = 8191.0;
          if (v84)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v75 + v91;
          v84 = (float)(v75 + v91) <= 8191.0;
          v95 = 8191.0;
          if (v84)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v77 + v91;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          v117 = fmaxf(_S2, fmaxf(_S24, _S25));
          v118 = (float)((float)((float)(v60 * _S24) + (float)(v59 * _S2)) + (float)(v61 * _S25)) + (float)(v212 * v117);
          v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            v119 = (float)((float)((float)(v60 * _S24) + (float)(v59 * _S2)) + (float)(v61 * _S25))
                 + (float)(v212 * v117);
            if (v118 < 0.0)
              v119 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H31
            FCVT            S17, H8
          }
          _H27 = *(_WORD *)(v45 + 2 * llroundf(v119));
          v124 = (float)((float)((float)(v60 * _S3) + (float)(v59 * _S1)) + (float)(v61 * _S17))
               + (float)(v212 * fmaxf(_S1, fmaxf(_S3, _S17)));
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = v124;
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S28, H30
            FCVT            S22, H22
            FCVT            S23, H23
          }
          _H29 = *(_WORD *)(v45 + 2 * llroundf(v125));
          v130 = (float)((float)((float)(v60 * _S22) + (float)(v59 * _S28)) + (float)(v61 * _S23))
               + (float)(v212 * fmaxf(_S28, fmaxf(_S22, _S23)));
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = v130;
            if (v130 < 0.0)
              v131 = 0.0;
          }
          v132 = v41;
          __asm
          {
            FCVT            S19, H19
            FCVT            S21, H21
            FCVT            S26, H26
          }
          _H30 = *(_WORD *)(v45 + 2 * llroundf(v131));
          v137 = (float)((float)((float)(v60 * _S21) + (float)(v59 * _S19)) + (float)(v61 * _S26))
               + (float)(v212 * fmaxf(_S19, fmaxf(_S21, _S26)));
          v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            v138 = v137;
            if (v137 < 0.0)
              v138 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v140 = _S2 * _S27;
          v141 = _S24 * _S27;
          v142 = _S25 * _S27;
          __asm { FCVT            S27, H29 }
          v144 = _S1 * _S27;
          v145 = _S3 * _S27;
          _S17 = _S17 * _S27;
          __asm { FCVT            S27, H30 }
          v148 = _S28 * _S27;
          v149 = _S22 * _S27;
          v150 = _S23 * _S27;
          LOWORD(_S27) = *(_WORD *)(v45 + 2 * llroundf(v138));
          __asm { FCVT            S27, H27 }
          v152 = _S19 * _S27;
          v153 = _S21 * _S27;
          v154 = _S26 * _S27;
          v155 = (float)((float)(v225 * v141) + (float)(v140 * v226)) + (float)(v142 * v224);
          v156 = (float)((float)(v222 * v141) + (float)(v140 * v223)) + (float)(v142 * v221);
          _S2 = (float)((float)(v218 * v141) + (float)(v140 * v220)) + (float)(v142 * v216);
          v158 = (float)((float)(v225 * v145) + (float)(v144 * v226)) + (float)(_S17 * v224);
          v159 = (float)((float)(v222 * v145) + (float)(v144 * v223)) + (float)(_S17 * v221);
          v160 = (float)((float)(v218 * v145) + (float)(v144 * v220)) + (float)(_S17 * v216);
          v161 = (float)((float)(v225 * v149) + (float)(v148 * v226)) + (float)(v150 * v224);
          v162 = (float)((float)(v222 * v149) + (float)(v148 * v223)) + (float)(v150 * v221);
          v163 = (float)((float)(v218 * v149) + (float)(v148 * v220)) + (float)(v150 * v216);
          v164 = (float)((float)(v225 * v153) + (float)(v152 * v226)) + (float)(v154 * v224);
          v165 = (float)((float)(v222 * v153) + (float)(v152 * v223)) + (float)(v154 * v221);
          v166 = (float)((float)(v218 * v153) + (float)(v152 * v220)) + (float)(v154 * v216);
          LOWORD(_S17) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S21, H17 }
          LOWORD(_S17) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S2) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          v179 = (float)((float)((float)(v217 * _S25) + (float)(v229 * _S21)) + (float)(v219 * _S26)) + v35;
          v180 = v37;
          if (v179 <= v37)
          {
            v180 = (float)((float)((float)(v217 * _S25) + (float)(v229 * _S21)) + (float)(v219 * _S26)) + v35;
            if (v179 < v35)
              v180 = v35;
          }
          __asm
          {
            FCVT            S28, H22
            FCVT            S23, H23
            FCVT            S22, H27
          }
          v184 = (float)((float)((float)(v217 * _S23) + (float)(v229 * _S28)) + (float)(v219 * _S22)) + v35;
          *(_WORD *)result = llroundf(v180) << v51;
          v185 = v37;
          v41 = v132;
          if (v184 <= v37)
          {
            v185 = (float)((float)((float)(v217 * _S23) + (float)(v229 * _S28)) + (float)(v219 * _S22)) + v35;
            if (v184 < v35)
              v185 = v35;
          }
          *((_WORD *)result + 1) = llroundf(v185) << v51;
          v186 = _S21 + _S28;
          v187 = _S25 + _S23;
          v188 = _S26 + _S22;
          v189 = (float)((float)(v231 + (float)(v186 * v40)) + (float)(v187 * v132)) + (float)(v188 * v215);
          v190 = v39;
          v59 = v213;
          if (v189 <= v39)
          {
            v190 = (float)((float)(v231 + (float)(v186 * v40)) + (float)(v187 * v132)) + (float)(v188 * v215);
            if (v189 < v230)
              v190 = v230;
          }
          v32 = v228;
          v191 = (float)((float)(v231 + (float)(v186 * v227)) + (float)(v187 * v42)) + (float)(v188 * v43);
          *(v65 - 1) = llroundf(v190) << v51;
          v192 = v39;
          v60 = v214;
          if (v191 <= v39)
          {
            v192 = v191;
            if (v191 < v230)
              v192 = v230;
          }
          __asm
          {
            FCVT            S21, H17
            FCVT            S19, H19
            FCVT            S17, H24
          }
          *v65 = llroundf(v192) << v51;
          v196 = (float)((float)((float)(v217 * _S19) + (float)(v229 * _S21)) + (float)(v219 * _S17)) + v35;
          v197 = v37;
          if (v196 <= v37)
          {
            v197 = (float)((float)((float)(v217 * _S19) + (float)(v229 * _S21)) + (float)(v219 * _S17)) + v35;
            if (v196 < v35)
              v197 = v35;
          }
          __asm
          {
            FCVT            S22, H1
            FCVT            S2, H2
            FCVT            S1, H3
          }
          v201 = (float)((float)((float)(v217 * _S2) + (float)(v229 * _S22)) + (float)(v219 * _S1)) + v35;
          *(_WORD *)v67 = llroundf(v197) << v51;
          v202 = v37;
          if (v201 <= v37)
          {
            v202 = (float)((float)((float)(v217 * _S2) + (float)(v229 * _S22)) + (float)(v219 * _S1)) + v35;
            if (v201 < v35)
              v202 = v35;
          }
          *((_WORD *)v67 + 1) = llroundf(v202) << v51;
          v203 = _S19 + _S2;
          v204 = _S17 + _S1;
          v205 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v40)) + (float)(v203 * v132))
               + (float)(v204 * v215);
          v206 = v39;
          if (v205 <= v39)
          {
            v206 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v40)) + (float)(v203 * v132))
                 + (float)(v204 * v215);
            if (v205 < v230)
              v206 = v230;
          }
          v207 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v227)) + (float)(v203 * v42))
               + (float)(v204 * v43);
          *(_WORD *)((char *)v65 + v26 - 2) = llroundf(v206) << v51;
          v208 = v39;
          v30 = v237;
          if (v207 <= v39)
          {
            v208 = v207;
            if (v207 < v230)
              v208 = v230;
          }
          v55 += 4;
          v66 += 4;
          result += 4;
          v67 += 4;
          *(_WORD *)((char *)v65 + v26) = llroundf(v208) << v51;
          v64 += 2;
          v65 += 2;
          v31 = v236;
        }
        while (v10 > v64);
      }
      v55 = &v62[v21];
      v56 += v22;
      result = &v63[v25];
      v9 += 2;
      v58 += v26;
    }
    while (v13 > v9);
    if (v211 && v210)
    {
      v209 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v28, v24, v209);
        v24 += v23;
        v28 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v210)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v28, 255, 2 * v10);
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  _WORD *v66;
  unsigned __int8 *v67;
  char *v68;
  unint64_t v69;
  _WORD *v70;
  unsigned __int8 *v71;
  char *v72;
  unsigned __int16 *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v130;
  float v131;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v154;
  float v155;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v171;
  float v172;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  size_t v185;
  uint64_t v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v186 = v18[2];
    v24 = (char *)(v186 + v23 * v12 + 2 * v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v28 = v15[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v32 = (float)LODWORD(a5);
    v33 = v30 * *(float *)v17;
    v206 = v30 * *(float *)(v17 + 16);
    v207 = v30 * *(float *)(v17 + 8);
    v34 = v30 * *(float *)(v17 + 20);
    *(float *)&v35 = v30 * *(float *)(v17 + 28);
    v204 = *(float *)&v35;
    v205 = v34;
    LOWORD(v35) = *(_WORD *)(v17 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 152);
    v40 = (float)v35;
    v42 = *(float *)(v17 + 36);
    v41 = *(float *)(v17 + 40);
    v43 = *(float *)(v17 + 44);
    v44 = *(float *)(v17 + 48) * 0.5;
    v45 = *(float *)(v17 + 52) * 0.5;
    v46 = *(float *)(v17 + 56) * 0.5;
    v47 = *(float *)(v17 + 60) * 0.5;
    v48 = *(float *)(v17 + 64) * 0.5;
    v199 = *(float *)(v17 + 72);
    v49 = *(float *)(v17 + 68) * 0.5;
    v196 = *(float *)(v17 + 80);
    v197 = *(float *)(v17 + 76);
    v194 = *(float *)(v17 + 88);
    v195 = *(float *)(v17 + 84);
    v193 = *(float *)(v17 + 92);
    v192 = *(float *)(v17 + 96);
    v190 = *(float *)(v17 + 100);
    v188 = *(float *)(v17 + 104);
    v50 = v17 + 164;
    v51 = v17 + 16548;
    v52 = v15[1];
    v53 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v52)
      v54 = v52 + v26 * v16 + 2 * v14;
    else
      v54 = 0;
    v55 = *v18;
    v56 = v18[1];
    result = (unsigned __int8 *)(v55 + v21 * v12 + 2 * v11);
    v57 = *(unsigned __int8 *)(v17 + 132);
    _CF = v57 >= 0x11;
    v59 = 16 - v57;
    if (_CF)
      v59 = 0;
    v60 = *(unsigned __int8 *)(v17 + 124);
    v61 = 16 - v60;
    if (v60 >= 0x11)
      v61 = 0;
    if (v12 >= 0)
      v62 = v12;
    else
      v62 = v12 + 1;
    v63 = v56 + v22 * (v62 >> 1) + 2 * v11;
    v64 = v61;
    v65 = v59;
    v66 = (_WORD *)(v54 + 2);
    v208 = (float)LODWORD(a5);
    v202 = v46;
    v203 = v45;
    v200 = v44;
    v201 = v47;
    v198 = v31;
    v191 = v33;
    v189 = v39;
    v187 = v37;
    do
    {
      v67 = &result[v21];
      v68 = &v53[v25];
      if (v10)
      {
        v69 = 0;
        v70 = v66;
        v71 = &result[v21];
        v72 = &v53[v25];
        do
        {
          v73 = (unsigned __int16 *)(v63 + 2 * v69);
          v74 = (float)(v73[1] >> v64) - v32;
          v75 = v207 * v74;
          v76 = v33 * (float)((float)(*(unsigned __int16 *)result >> v64) - v31);
          v77 = (float)(v207 * v74) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = (float)(v207 * v74) + v76;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = (float)(*v73 >> v64) - v32;
          v80 = (float)(v205 * v74) + (float)(v79 * v206);
          v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = v204 * v79;
          v83 = (float)(v204 * v79) + v76;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = (float)(v204 * v79) + v76;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v33 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v31);
          v86 = 8191.0;
          if ((float)(v75 + v85) <= 8191.0)
          {
            v86 = v75 + v85;
            if ((float)(v75 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            v87 = v80 + v85;
            if ((float)(v80 + v85) < 0.0)
              v87 = 0.0;
          }
          v88 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            v88 = v82 + v85;
            if ((float)(v82 + v85) < 0.0)
              v88 = 0.0;
          }
          v89 = v33 * (float)((float)(*(unsigned __int16 *)v71 >> v64) - v31);
          v90 = 8191.0;
          if ((float)(v75 + v89) <= 8191.0)
          {
            v90 = v75 + v89;
            if ((float)(v75 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = 8191.0;
          if ((float)(v80 + v89) <= 8191.0)
          {
            v91 = v80 + v89;
            if ((float)(v80 + v89) < 0.0)
              v91 = 0.0;
          }
          v92 = v82 + v89;
          v93 = (float)(v82 + v89) <= 8191.0;
          v94 = 8191.0;
          if (v93)
          {
            v94 = v92;
            if (v92 < 0.0)
              v94 = 0.0;
          }
          v95 = v33 * (float)((float)(*((unsigned __int16 *)v71 + 1) >> v64) - v31);
          v96 = v75 + v95;
          v93 = (float)(v75 + v95) <= 8191.0;
          v97 = 8191.0;
          if (v93)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v80 + v95;
          v93 = (float)(v80 + v95) <= 8191.0;
          v99 = 8191.0;
          if (v93)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v42;
          v101 = v82 + v95;
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H18 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v130 = (float)((float)(v197 * _S3) + (float)(_S1 * v199)) + (float)(_S4 * v196);
          v131 = (float)((float)(v194 * _S3) + (float)(_S1 * v195)) + (float)(_S4 * v193);
          _S1 = (float)((float)(v190 * _S3) + (float)(_S1 * v192)) + (float)(_S4 * v188);
          v133 = (float)((float)(v197 * _S5) + (float)(_S2 * v199)) + (float)(_S6 * v196);
          v134 = (float)((float)(v194 * _S5) + (float)(_S2 * v195)) + (float)(_S6 * v193);
          v135 = (float)((float)(v190 * _S5) + (float)(_S2 * v192)) + (float)(_S6 * v188);
          v136 = (float)((float)(v197 * _S26) + (float)(_S18 * v199)) + (float)(_S19 * v196);
          v137 = (float)((float)(v194 * _S26) + (float)(_S18 * v195)) + (float)(_S19 * v193);
          v138 = (float)((float)(v190 * _S26) + (float)(_S18 * v192)) + (float)(_S19 * v188);
          v139 = (float)((float)(v197 * _S24) + (float)(_S7 * v199)) + (float)(_S25 * v196);
          v140 = (float)((float)(v194 * _S24) + (float)(_S7 * v195)) + (float)(_S25 * v193);
          v141 = (float)((float)(v190 * _S24) + (float)(_S7 * v192)) + (float)(_S25 * v188);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H6 }
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          v42 = v100;
          v154 = (float)((float)((float)(v41 * _S25) + (float)(v100 * _S24)) + (float)(v43 * _S26)) + v36;
          v155 = v38;
          if (v154 <= v38)
          {
            v155 = (float)((float)((float)(v41 * _S25) + (float)(v100 * _S24)) + (float)(v43 * _S26)) + v36;
            if (v154 < v36)
              v155 = v36;
          }
          __asm
          {
            FCVT            S3, H27
            FCVT            S27, H28
            FCVT            S1, H30
          }
          v159 = (float)((float)((float)(v41 * _S27) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
          *(_WORD *)v53 = llroundf(v155) << v65;
          v160 = v38;
          if (v159 <= v38)
          {
            v160 = (float)((float)((float)(v41 * _S27) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
            if (v159 < v36)
              v160 = v36;
          }
          *((_WORD *)v53 + 1) = llroundf(v160) << v65;
          v161 = _S24 + _S3;
          v162 = _S25 + _S27;
          v163 = _S26 + _S1;
          v164 = (float)((float)(v187 + (float)(v161 * v200)) + (float)((float)(_S25 + _S27) * v203))
               + (float)(v163 * v202);
          v165 = v40;
          v33 = v191;
          if (v164 <= v40)
          {
            v165 = (float)((float)(v187 + (float)(v161 * v200)) + (float)(v162 * v203)) + (float)(v163 * v202);
            if (v164 < v189)
              v165 = v189;
          }
          v166 = (float)((float)(v187 + (float)(v161 * v201)) + (float)(v162 * v48)) + (float)(v163 * v49);
          *(v70 - 1) = llroundf(v165) << v65;
          v167 = v40;
          if (v166 <= v40)
          {
            v167 = v166;
            if (v166 < v189)
              v167 = v189;
          }
          __asm
          {
            FCVT            S24, H6
            FCVT            S7, H7
            FCVT            S6, H19
          }
          *v70 = llroundf(v167) << v65;
          v171 = (float)((float)((float)(v41 * _S7) + (float)(v100 * _S24)) + (float)(v43 * _S6)) + v36;
          v172 = v38;
          if (v171 <= v38)
          {
            v172 = (float)((float)((float)(v41 * _S7) + (float)(v100 * _S24)) + (float)(v43 * _S6)) + v36;
            if (v171 < v36)
              v172 = v36;
          }
          __asm
          {
            FCVT            S3, H2
            FCVT            S2, H4
            FCVT            S1, H5
          }
          v176 = (float)((float)((float)(v41 * _S2) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
          *(_WORD *)v72 = llroundf(v172) << v65;
          v177 = v38;
          if (v176 <= v38)
          {
            v177 = (float)((float)((float)(v41 * _S2) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
            if (v176 < v36)
              v177 = v36;
          }
          *((_WORD *)v72 + 1) = llroundf(v177) << v65;
          v178 = _S24 + _S3;
          v179 = _S7 + _S2;
          v180 = _S6 + _S1;
          v181 = (float)((float)(v187 + (float)(v178 * v200)) + (float)(v179 * v203)) + (float)(v180 * v202);
          v182 = v40;
          v31 = v198;
          if (v181 <= v40)
          {
            v182 = (float)((float)(v187 + (float)(v178 * v200)) + (float)(v179 * v203)) + (float)(v180 * v202);
            if (v181 < v189)
              v182 = v189;
          }
          v183 = (float)((float)(v187 + (float)(v178 * v201)) + (float)(v179 * v48)) + (float)(v180 * v49);
          *(_WORD *)((char *)v70 + v26 - 2) = llroundf(v182) << v65;
          v184 = v40;
          if (v183 <= v40)
          {
            v184 = v183;
            if (v183 < v189)
              v184 = v189;
          }
          result += 4;
          v71 += 4;
          v53 += 4;
          v72 += 4;
          *(_WORD *)((char *)v70 + v26) = llroundf(v184) << v65;
          v69 += 2;
          v70 += 2;
          v32 = v208;
        }
        while (v10 > v69);
      }
      result = &v67[v21];
      v63 += v22;
      v53 = &v68[v25];
      v9 += 2;
      v66 += v26;
    }
    while (v13 > v9);
    if (v186 && v28)
    {
      v185 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v24, v185);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_xf422_GCD(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  BOOL v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  char v69;
  _WORD *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  _WORD *v74;
  char *v75;
  char *v76;
  unsigned __int16 *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  unsigned int v90;
  unsigned int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  size_t v122;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *(_QWORD *)(result + 112);
    v16 = *(_QWORD **)(result + 128);
    v17 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v7);
    v18 = *(_QWORD *)(result + 152);
    v20 = *(_QWORD **)(result + 56);
    v19 = *(uint64_t **)(result + 64);
    v21 = *(uint64_t **)(result + 136);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v25 = v20[2];
    v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    *(float *)&v32 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v33 = (float)*(unsigned int *)(v18 + 136);
    v34 = *(float *)&v33 / *(float *)&v32;
    LOWORD(v32) = *(_WORD *)(v18 + 140);
    v35 = (float)v32;
    LOWORD(v33) = *(_WORD *)(v18 + 142);
    v36 = (float)v33;
    v37 = v34 * *(float *)v18;
    v38 = v34 * *(float *)(v18 + 8);
    v39 = v34 * *(float *)(v18 + 16);
    v40 = v34 * *(float *)(v18 + 20);
    v41 = *(float *)(v18 + 28);
    v42 = v34 * v41;
    LOWORD(v41) = *(_WORD *)(v18 + 144);
    v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v47 = (float)v5;
    v48 = *(float *)(v18 + 36);
    v49 = *(float *)(v18 + 40);
    v50 = *(float *)(v18 + 44);
    v51 = *(float *)(v18 + 48) * 0.5;
    v52 = *(float *)(v18 + 52) * 0.5;
    v53 = *(float *)(v18 + 56) * 0.5;
    v54 = *(float *)(v18 + 60) * 0.5;
    v55 = *(float *)(v18 + 64) * 0.5;
    v56 = *(float *)(v18 + 68);
    v57 = v16[1];
    v58 = (char *)(*v16 + v27 * v17 + 2 * v15);
    if (v57)
      v59 = v57 + v28 * v17 + 2 * v15;
    else
      v59 = 0;
    v60 = v20[1];
    v61 = (char *)(*v20 + v22 * v13 + 2 * v12);
    v62 = *(unsigned __int8 *)(v18 + 132);
    v63 = v62 >= 0x11;
    v64 = 16 - v62;
    if (v63)
      v65 = 0;
    else
      v65 = v64;
    LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
    if (result >= 0x11)
      LOBYTE(result) = 0;
    else
      LOBYTE(result) = 16 - result;
    if (v13 >= 0)
      v66 = v13;
    else
      v66 = v13 + 1;
    v67 = v60 + v23 * (v66 >> 1) + 2 * v12;
    v68 = v56 * 0.5;
    result = result;
    v69 = v65;
    v70 = (_WORD *)(v59 + 2);
    do
    {
      v71 = &v61[v22];
      v72 = &v58[v27];
      if (v11)
      {
        v73 = 0;
        v74 = v70;
        v75 = &v61[v22];
        v76 = &v58[v27];
        do
        {
          v77 = (unsigned __int16 *)(v67 + 2 * v73);
          v78 = (float)(*v77 >> result) - v36;
          v79 = (float)(v77[1] >> result) - v36;
          v80 = v38 * v79;
          v81 = (float)(v40 * v79) + (float)(v78 * v39);
          v82 = v42 * v78;
          v83 = v37 * (float)((float)(*(unsigned __int16 *)v61 >> result) - v35);
          v84 = v80 + v83;
          v85 = v83 + v81;
          v86 = v82 + v83;
          v87 = (float)((float)((float)(v49 * v85) + (float)(v48 * v84)) + (float)(v50 * v86)) + v43;
          v88 = v45;
          if (v87 <= v45)
          {
            v88 = (float)((float)((float)(v49 * v85) + (float)(v48 * v84)) + (float)(v50 * v86)) + v43;
            if (v87 < v43)
              v88 = v43;
          }
          v89 = v37 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> result) - v35);
          v90 = *(unsigned __int16 *)v75;
          v91 = *((unsigned __int16 *)v75 + 1);
          v92 = v80 + v89;
          v93 = v81 + v89;
          v94 = v82 + v89;
          v95 = (float)((float)((float)(v49 * v93) + (float)(v48 * v92)) + (float)(v50 * v94)) + v43;
          *(_WORD *)v58 = llroundf(v88) << v69;
          v96 = v45;
          if (v95 <= v45)
          {
            v96 = (float)((float)((float)(v49 * v93) + (float)(v48 * v92)) + (float)(v50 * v94)) + v43;
            if (v95 < v43)
              v96 = v43;
          }
          *((_WORD *)v58 + 1) = llroundf(v96) << v69;
          v97 = v84 + v92;
          v98 = v85 + v93;
          v99 = v86 + v94;
          v100 = (float)((float)(v44 + (float)(v97 * v51)) + (float)(v98 * v52)) + (float)(v99 * v53);
          v101 = v47;
          if (v100 <= v47)
          {
            v101 = (float)((float)(v44 + (float)(v97 * v51)) + (float)(v98 * v52)) + (float)(v99 * v53);
            if (v100 < v46)
              v101 = v46;
          }
          v102 = (float)((float)(v44 + (float)(v97 * v54)) + (float)(v98 * v55)) + (float)(v99 * v68);
          *(v74 - 1) = llroundf(v101) << v69;
          v103 = v47;
          if (v102 <= v47)
          {
            v103 = v102;
            if (v102 < v46)
              v103 = v46;
          }
          v104 = v37 * (float)((float)(int)(v90 >> result) - v35);
          v105 = v80 + v104;
          v106 = v81 + v104;
          v107 = v82 + v104;
          *v74 = llroundf(v103) << v69;
          v108 = (float)((float)((float)(v49 * v106) + (float)(v48 * v105)) + (float)(v50 * v107)) + v43;
          v109 = v45;
          if (v108 <= v45)
          {
            v109 = (float)((float)((float)(v49 * v106) + (float)(v48 * v105)) + (float)(v50 * v107)) + v43;
            if (v108 < v43)
              v109 = v43;
          }
          v110 = v37 * (float)((float)(int)(v91 >> result) - v35);
          v111 = v80 + v110;
          v112 = v81 + v110;
          v113 = v82 + v110;
          v114 = (float)((float)((float)(v49 * v112) + (float)(v48 * v111)) + (float)(v50 * (float)(v82 + v110))) + v43;
          *(_WORD *)v76 = llroundf(v109) << v69;
          v115 = v45;
          if (v114 <= v45)
          {
            v115 = v114;
            if (v114 < v43)
              v115 = v43;
          }
          *((_WORD *)v76 + 1) = llroundf(v115) << v69;
          v116 = v106 + v112;
          v117 = v107 + v113;
          v118 = (float)((float)(v44 + (float)((float)(v105 + v111) * v51)) + (float)(v116 * v52)) + (float)(v117 * v53);
          v119 = v47;
          if (v118 <= v47)
          {
            v119 = (float)((float)(v44 + (float)((float)(v105 + v111) * v51)) + (float)(v116 * v52))
                 + (float)(v117 * v53);
            if (v118 < v46)
              v119 = v46;
          }
          v120 = (float)((float)(v44 + (float)((float)(v105 + v111) * v54)) + (float)(v116 * v55)) + (float)(v117 * v68);
          *(_WORD *)((char *)v74 + v28 - 2) = llroundf(v119) << v69;
          v121 = v47;
          if (v120 <= v47)
          {
            v121 = v120;
            if (v120 < v46)
              v121 = v46;
          }
          v61 += 4;
          v75 += 4;
          v58 += 4;
          v76 += 4;
          *(_WORD *)((char *)v74 + v28) = llroundf(v121) << v69;
          v73 += 2;
          v74 += 2;
        }
        while (v11 > v73);
      }
      v61 = &v71[v22];
      v67 += v23;
      v58 = &v72[v27];
      v10 += 2;
      v70 += v28;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      v122 = 2 * v11;
      do
      {
        result = (unint64_t)memcpy(v31, v26, v122);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = (unint64_t)memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  _DWORD *v66;
  unsigned __int16 *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v116;
  float v117;
  float v118;
  float v123;
  float v124;
  float v129;
  float v130;
  float v131;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v158;
  float v161;
  float v162;
  float v164;
  float v165;
  float v166;
  float v167;
  unsigned int v171;
  unsigned int v172;
  unsigned int v175;
  unsigned int v176;
  unsigned int v178;
  unsigned int v180;
  unsigned int v182;
  unsigned int v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v198;
  __int16 v199;
  float v200;
  float v202;
  float v203;
  float v204;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  size_t v223;
  uint64_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  v17 = v7 / v8;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v10;
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v224 = v25[2];
    v30 = (char *)(v224 + v29 * v22 + 2 * v21);
    v31 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v24;
    v248 = v32 * *(float *)(v24 + 16);
    v249 = v32 * *(float *)(v24 + 8);
    v36 = v32 * *(float *)(v24 + 20);
    *(float *)&v37 = v32 * *(float *)(v24 + 28);
    v246 = *(float *)&v37;
    v247 = v36;
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v24 + 48) * 0.5;
    v44 = *(float *)(v24 + 56) * 0.5;
    v45 = *(float *)(v24 + 60) * 0.5;
    v241 = *(float *)(v24 + 72);
    v238 = *(float *)(v24 + 80);
    v239 = *(float *)(v24 + 76);
    v236 = *(float *)(v24 + 88);
    v237 = *(float *)(v24 + 84);
    v235 = *(float *)(v24 + 92);
    v234 = *(float *)(v24 + 96);
    v232 = *(float *)(v24 + 100);
    v230 = *(float *)(v24 + 104);
    v46 = v24 + 164;
    v47 = v24 + 16548;
    v48 = (char *)(*v11 + v31 * v12 + 2 * v10);
    v49 = *(unsigned __int8 *)(v24 + 124);
    v50 = v25[1];
    v51 = *v25 + *v26 * v22;
    if (v49 >= 0x11)
      v52 = 0;
    else
      v52 = 16 - v49;
    if (v22 >= 0)
      v53 = v22;
    else
      v53 = v22 + 1;
    v54 = v50 + v28 * (v53 >> 1);
    result = (_QWORD *)(v24 + 32932);
    v55 = (char *)(v51 + 2 * v21);
    v56 = v54 + 2 * v21;
    v57 = v52;
    v59 = *(float *)(v24 + 108);
    v58 = *(float *)(v24 + 112);
    v226 = *(float *)(v24 + 120);
    v227 = *(float *)(v24 + 116);
    v250 = (float)LODWORD(a6);
    v244 = (float)LODWORD(a5);
    v245 = v39;
    v243 = v35;
    v242 = *(float *)(v24 + 36);
    v240 = *(float *)(v24 + 68) * 0.5;
    v233 = *(float *)(v24 + 52) * 0.5;
    v231 = *(float *)(v24 + 44);
    v229 = *(float *)(v24 + 64) * 0.5;
    v228 = *(float *)(v24 + 40);
    v225 = v58;
    do
    {
      v60 = &v55[v27];
      v61 = &v48[v31];
      if (v20)
      {
        v62 = 0;
        v63 = &v55[v27];
        v64 = (_DWORD *)(v18 + v14);
        v65 = &v48[v31];
        v66 = (_DWORD *)v18;
        do
        {
          v67 = (unsigned __int16 *)(v56 + 2 * v62);
          v68 = (float)(v67[1] >> v57) - v34;
          v69 = v249 * v68;
          v70 = v35 * (float)((float)(*(unsigned __int16 *)v55 >> v57) - v33);
          v71 = (float)(v249 * v68) + v70;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)(v249 * v68) + v70;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = (float)(*v67 >> v57) - v34;
          v74 = (float)(v247 * v68) + (float)(v73 * v248);
          v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = v246 * v73;
          v77 = (float)(v246 * v73) + v70;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v35 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v57) - v33);
          v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v81 = v74 + v79;
            if ((float)(v74 + v79) < 0.0)
              v81 = 0.0;
          }
          v82 = v76 + v79;
          v83 = (float)(v76 + v79) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = v35 * (float)((float)(*(unsigned __int16 *)v63 >> v57) - v33);
          v86 = 8191.0;
          if ((float)(v69 + v85) <= 8191.0)
          {
            v86 = v69 + v85;
            if ((float)(v69 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = 8191.0;
          if ((float)(v74 + v85) <= 8191.0)
          {
            v87 = v74 + v85;
            if ((float)(v74 + v85) < 0.0)
              v87 = 0.0;
          }
          v88 = v76 + v85;
          v83 = (float)(v76 + v85) <= 8191.0;
          v89 = 8191.0;
          if (v83)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v35 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v57) - v33);
          v91 = v69 + v90;
          v83 = (float)(v69 + v90) <= 8191.0;
          v92 = 8191.0;
          if (v83)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v90;
          v83 = (float)(v74 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v83)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v76 + v90;
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          v116 = fmaxf(_S2, fmaxf(_S24, _S25));
          v117 = (float)((float)((float)(v58 * _S24) + (float)(v59 * _S2)) + (float)(v227 * _S25))
               + (float)(v226 * v116);
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = (float)((float)((float)(v58 * _S24) + (float)(v59 * _S2)) + (float)(v227 * _S25))
                 + (float)(v226 * v116);
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(v118));
          v123 = (float)((float)((float)(v58 * _S28) + (float)(v59 * _S26)) + (float)(v227 * _S30))
               + (float)(v226 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v47 + 2 * llroundf(v124));
          v129 = fmaxf(_S9, fmaxf(_S10, _S11));
          v130 = (float)((float)((float)(v58 * _S10) + (float)(v59 * _S9)) + (float)(v227 * _S11))
               + (float)(v226 * v129);
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = (float)((float)((float)(v58 * _S10) + (float)(v59 * _S9)) + (float)(v227 * _S11))
                 + (float)(v226 * v129);
            if (v130 < 0.0)
              v131 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v136 = _S2 * _S1;
          v137 = _S24 * _S1;
          v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v140 = _S26 * _S1;
          v141 = _S28 * _S1;
          v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          v144 = _S9 * _S2;
          v145 = _S10 * _S2;
          v146 = _S11 * _S2;
          v147 = (float)((float)((float)(v58 * _S31) + (float)(v59 * _S29)) + (float)(v227 * _S8))
               + (float)(v226 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            v148 = v147;
            if (v147 < 0.0)
              v148 = 0.0;
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          v151 = _S29 * _S25;
          v152 = _S31 * _S25;
          v153 = _S8 * _S25;
          v154 = (float)((float)(v239 * v137) + (float)(v136 * v241)) + (float)(v138 * v238);
          v155 = (float)((float)(v236 * v137) + (float)(v136 * v237)) + (float)(v138 * v235);
          v156 = (float)((float)(v232 * v137) + (float)(v136 * v234)) + (float)(v138 * v230);
          _S24 = (float)((float)(v239 * v141) + (float)(v140 * v241)) + (float)(v142 * v238);
          v158 = (float)((float)(v236 * v141) + (float)(v140 * v237)) + (float)(v142 * v235);
          _S21 = (float)((float)(v232 * v141) + (float)(v140 * v234)) + (float)(v142 * v230);
          _S22 = (float)((float)(v239 * v145) + (float)(v144 * v241)) + (float)(v146 * v238);
          v161 = (float)((float)(v236 * v145) + (float)(v144 * v237)) + (float)(v146 * v235);
          v162 = (float)((float)(v232 * v145) + (float)(v144 * v234)) + (float)(v146 * v230);
          _S3 = (float)(v236 * v152) + (float)(v151 * v237);
          v164 = (float)(v232 * v152) + (float)(v151 * v234);
          v165 = (float)((float)(v239 * v152) + (float)(v151 * v241)) + (float)(v153 * v238);
          v166 = _S3 + (float)(v153 * v235);
          v167 = v164 + (float)(v153 * v230);
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          v171 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          v172 = llroundf(fminf(fmaxf(v158, 0.0), 8191.0));
          LOWORD(_S3) = *((_WORD *)result + v171);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          v175 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *((_WORD *)result + v172);
          v176 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *((_WORD *)result + v175);
          _H1 = *((_WORD *)result + v176);
          v178 = llroundf(fminf(fmaxf(v162, 0.0), 8191.0));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          v180 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          _H3 = *((_WORD *)result + v178);
          v182 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          v184 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          v185 = (float)(v228 * _S27) + (float)(v242 * _S29);
          v186 = _S27 + _S23;
          v187 = (float)(v245 + (float)((float)(_S29 + _S17) * v43)) + (float)(v186 * v233);
          v188 = (float)(v245 + (float)((float)(_S29 + _S17) * v45)) + (float)(v186 * v229);
          _H21 = *((_WORD *)result + v180);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          v192 = v185 + (float)(v231 * _S24);
          v193 = _S24 + _S25;
          v194 = v187 + (float)((float)(_S24 + _S25) * v44);
          v195 = v188 + (float)(v193 * v240);
          if (v194 < v38)
            v196 = v38;
          else
            v196 = v194;
          v83 = v194 <= v40;
          _H22 = *((_WORD *)result + v182);
          v198 = v192 + v38;
          if (!v83)
            v196 = v40;
          v199 = llroundf(v196);
          if (v198 < v41)
            v200 = v41;
          else
            v200 = v192 + v38;
          v83 = v198 <= v42;
          _H24 = *((_WORD *)result + v184);
          *(_WORD *)v48 = v199;
          if (!v83)
            v200 = v42;
          *((_WORD *)v48 + 1) = llroundf(v200);
          v202 = v40;
          if (v195 <= v40)
          {
            v202 = v195;
            if (v195 < v38)
              v202 = v38;
          }
          v203 = (float)((float)((float)(v228 * _S23) + (float)(v242 * _S17)) + (float)(v231 * _S25)) + v38;
          *((_WORD *)v48 + 2) = llroundf(v202);
          v204 = v42;
          v35 = v243;
          v33 = v244;
          if (v203 <= v42)
          {
            if (v203 < v41)
              v204 = v41;
            else
              v204 = v203;
          }
          *((_WORD *)v48 + 3) = llroundf(v204);
          if (v66)
            *v66++ = 0;
          v58 = v225;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          v211 = (float)((float)((float)(v228 * _S23) + (float)(v242 * _S17)) + (float)(v231 * _S25)) + v38;
          v212 = _S17 + _S1;
          v213 = _S23 + _S3;
          v214 = (float)((float)(v245 + (float)(v212 * v43)) + (float)(v213 * v233))
               + (float)((float)(_S25 + _S2) * v44);
          v215 = (float)((float)(v245 + (float)(v212 * v45)) + (float)(v213 * v229))
               + (float)((float)(_S25 + _S2) * v240);
          if (v214 < v38)
            v216 = v38;
          else
            v216 = v214;
          if (v214 <= v40)
            v217 = v216;
          else
            v217 = v40;
          *(_WORD *)v65 = llroundf(v217);
          if (v211 < v41)
            v218 = v41;
          else
            v218 = v211;
          if (v211 <= v42)
            v219 = v218;
          else
            v219 = v42;
          *((_WORD *)v65 + 1) = llroundf(v219);
          v220 = v40;
          if (v215 <= v40)
          {
            v220 = v215;
            if (v215 < v38)
              v220 = v38;
          }
          v221 = (float)((float)((float)(v228 * _S3) + (float)(v242 * _S1)) + (float)(v231 * _S2)) + v38;
          *((_WORD *)v65 + 2) = llroundf(v220);
          v222 = v42;
          if (v221 <= v42)
          {
            v222 = v221;
            if (v221 < v41)
              v222 = v41;
          }
          *((_WORD *)v65 + 3) = llroundf(v222);
          v34 = v250;
          if (v64)
            *v64++ = 0;
          v55 += 4;
          v63 += 4;
          v48 += 8;
          v65 += 8;
          v62 += 2;
        }
        while (v20 > v62);
      }
      v55 = &v60[v27];
      v56 += v28;
      v48 = &v61[v31];
      v19 += 2;
    }
    while (v23 > v19);
    if (v224 && v18)
    {
      v223 = 2 * v20;
      do
      {
        result = memcpy(v16, v30, v223);
        v30 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  char *v60;
  unint64_t v61;
  unsigned __int8 *v62;
  _DWORD *v63;
  char *v64;
  _DWORD *v65;
  unsigned __int16 *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  unsigned int v116;
  unsigned int v124;
  float v126;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v135;
  float v136;
  float v138;
  float v139;
  float v140;
  unsigned int v142;
  unsigned int v148;
  unsigned int v150;
  unsigned int v152;
  float v156;
  float v157;
  float v158;
  float v159;
  float v161;
  float v162;
  __int16 v163;
  float v164;
  float v166;
  float v167;
  float v168;
  float v169;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  size_t v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *((_QWORD *)result + 14);
  v11 = (_QWORD *)*((_QWORD *)result + 16);
  v12 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
  v13 = (uint64_t *)*((_QWORD *)result + 17);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  v17 = v7 / v8;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v10;
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *((_QWORD *)result + 19);
    v25 = (uint64_t *)*((_QWORD *)result + 7);
    v26 = (uint64_t *)*((_QWORD *)result + 8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v201 = v33 * *(float *)(v24 + 16);
    v202 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v199 = *(float *)&v38;
    v200 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v24 + 36);
    v45 = *(float *)(v24 + 40);
    v46 = *(float *)(v24 + 52) * 0.5;
    v47 = *(float *)(v24 + 56) * 0.5;
    v48 = *(float *)(v24 + 60) * 0.5;
    v205 = *(float *)(v24 + 64) * 0.5;
    v198 = *(float *)(v24 + 72);
    v49 = *(float *)(v24 + 68) * 0.5;
    v196 = *(float *)(v24 + 80);
    v197 = *(float *)(v24 + 76);
    v194 = *(float *)(v24 + 88);
    v195 = *(float *)(v24 + 84);
    v193 = *(float *)(v24 + 92);
    v192 = *(float *)(v24 + 96);
    v191 = *(float *)(v24 + 100);
    v189 = *(float *)(v24 + 104);
    v50 = v24 + 164;
    v51 = *v11 + v32 * v12;
    v52 = v24 + 16548;
    v53 = (char *)(v51 + 2 * v10);
    LODWORD(v51) = *(unsigned __int8 *)(v24 + 124);
    v54 = 16 - v51;
    _CF = v51 >= 0x11;
    v56 = *v25;
    v57 = v25[1];
    result = (unsigned __int8 *)(v56 + v27 * v22 + 2 * v21);
    if (_CF)
      v54 = 0;
    v58 = v57 + v28 * (v22 / 2) + 2 * v21;
    v203 = (float)LODWORD(a6);
    v204 = (float)LODWORD(a5);
    v190 = *(float *)(v24 + 44);
    v188 = *(float *)(v24 + 48) * 0.5;
    do
    {
      v59 = &result[v27];
      v60 = &v53[v32];
      if (v20)
      {
        v61 = 0;
        v62 = &result[v27];
        v63 = (_DWORD *)(v18 + v14);
        v64 = &v53[v32];
        v65 = (_DWORD *)v18;
        do
        {
          v66 = (unsigned __int16 *)(v58 + 2 * v61);
          v67 = (float)(v66[1] >> v54) - v35;
          v68 = v202 * v67;
          v69 = v36 * (float)((float)(*(unsigned __int16 *)result >> v54) - v34);
          v70 = (float)(v202 * v67) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v202 * v67) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = (float)(*v66 >> v54) - v35;
          v73 = (float)(v200 * v67) + (float)(v72 * v201);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v199 * v72;
          v76 = (float)(v199 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v36 * (float)((float)(*((unsigned __int16 *)result + 1) >> v54) - v34);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v78;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v40;
          v84 = v36 * (float)((float)(*(unsigned __int16 *)v62 >> v54) - v34);
          v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v75 + v84;
          v88 = (float)(v75 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v36 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v54) - v34);
          v91 = v68 + v90;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v73 + v90;
          v88 = (float)(v73 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v88)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v36;
          v96 = v75 + v90;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S26, H26
          }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          v116 = llroundf(fminf(fmaxf(v89, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v50 + 2 * v116);
          __asm { FCVT            S27, H27 }
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v124 = llroundf(fminf(fmaxf(v97, 0.0), 8191.0));
          _S25 = (float)((float)(v197 * _S4) + (float)(_S3 * v198)) + (float)(_S5 * v196);
          v126 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          _S3 = (float)((float)(v191 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v189);
          _S4 = (float)((float)(v197 * _S6) + (float)(_S2 * v198)) + (float)(_S7 * v196);
          v129 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S7 * v193);
          v130 = (float)((float)(v191 * _S6) + (float)(_S2 * v192)) + (float)(_S7 * v189);
          v131 = (float)((float)(v197 * _S1) + (float)(_S26 * v198)) + (float)(_S27 * v196);
          v132 = (float)((float)(v194 * _S1) + (float)(_S26 * v195)) + (float)(_S27 * v193);
          v133 = (float)((float)(v191 * _S1) + (float)(_S26 * v192)) + (float)(_S27 * v189);
          _S1 = (float)(v197 * _S24) + (float)(_S17 * v198);
          v135 = (float)(v194 * _S24) + (float)(_S17 * v195);
          v136 = (float)(v191 * _S24) + (float)(_S17 * v192);
          LOWORD(_S24) = *(_WORD *)(v50 + 2 * v124);
          __asm { FCVT            S24, H24 }
          v138 = _S1 + (float)(_S24 * v196);
          v139 = v135 + (float)(_S24 * v193);
          v140 = v136 + (float)(_S24 * v189);
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v142 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H4
          }
          LOWORD(_S25) = *(_WORD *)(v52 + 2 * v142);
          _H21 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          __asm { FCVT            S25, H25 }
          v152 = llroundf(fminf(fmaxf(v140, 0.0), 8191.0));
          v40 = v83;
          _H6 = *(_WORD *)(v52 + 2 * v148);
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H21
          }
          v156 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v190 * _S26);
          v157 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v188)) + (float)((float)(_S28 + _S25) * v46))
               + (float)((float)(_S26 + _S3) * v47);
          v158 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v48)) + (float)((float)(_S28 + _S25) * v205))
               + (float)((float)(_S26 + _S3) * v49);
          if (v157 < v39)
            v159 = v39;
          else
            v159 = v157;
          v88 = v157 <= v41;
          _H7 = *(_WORD *)(v52 + 2 * v150);
          v161 = v156 + v39;
          if (v88)
            v162 = v159;
          else
            v162 = v41;
          v163 = llroundf(v162);
          if (v161 < v42)
            v164 = v42;
          else
            v164 = v161;
          _H24 = *(_WORD *)(v52 + 2 * v152);
          *(_WORD *)v53 = v163;
          if (v161 <= v43)
            v166 = v164;
          else
            v166 = v43;
          *((_WORD *)v53 + 1) = llroundf(v166);
          v167 = v41;
          if (v158 <= v41)
          {
            v167 = v158;
            if (v158 < v39)
              v167 = v39;
          }
          v168 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S5)) + (float)(v190 * _S3)) + v39;
          *((_WORD *)v53 + 2) = llroundf(v167);
          v169 = v43;
          if (v168 <= v43)
          {
            if (v168 < v42)
              v169 = v42;
            else
              v169 = v168;
          }
          *((_WORD *)v53 + 3) = llroundf(v169);
          v36 = v95;
          if (v65)
            *v65++ = 0;
          __asm
          {
            FCVT            S3, H1
            FCVT            S5, H2
            FCVT            S17, H4
            FCVT            S1, H6
            FCVT            S4, H7
            FCVT            S2, H24
          }
          v176 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S3)) + (float)(v190 * _S17)) + v39;
          v177 = _S3 + _S1;
          v178 = _S5 + _S4;
          v179 = _S17 + _S2;
          v180 = (float)((float)(v83 + (float)(v177 * v188)) + (float)(v178 * v46)) + (float)(v179 * v47);
          v181 = (float)((float)(v83 + (float)(v177 * v48)) + (float)(v178 * v205)) + (float)(v179 * v49);
          if (v180 < v39)
            v182 = v39;
          else
            v182 = v180;
          if (v180 > v41)
            v182 = v41;
          *(_WORD *)v64 = llroundf(v182);
          if (v176 < v42)
            v183 = v42;
          else
            v183 = v176;
          if (v176 > v43)
            v183 = v43;
          *((_WORD *)v64 + 1) = llroundf(v183);
          v184 = v41;
          if (v181 <= v41)
          {
            v184 = v181;
            if (v181 < v39)
              v184 = v39;
          }
          v185 = (float)((float)((float)(v45 * _S4) + (float)(v44 * _S1)) + (float)(v190 * _S2)) + v39;
          *((_WORD *)v64 + 2) = llroundf(v184);
          v186 = v43;
          v35 = v203;
          v34 = v204;
          if (v185 <= v43)
          {
            v186 = v185;
            if (v185 < v42)
              v186 = v42;
          }
          *((_WORD *)v64 + 3) = llroundf(v186);
          if (v63)
            *v63++ = 0;
          result += 4;
          v62 += 4;
          v53 += 8;
          v64 += 8;
          v61 += 2;
        }
        while (v20 > v61);
      }
      result = &v59[v27];
      v58 += v28;
      v53 = &v60[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v187 = 2 * v20;
      do
      {
        result = (unsigned __int8 *)memcpy(v16, v31, v187);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unsigned __int8 *)memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_v216_GCD(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  char *v66;
  _DWORD *v67;
  unsigned __int16 *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  size_t v118;
  float v119;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD **)(result + 128);
  v12 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v8);
  v13 = *(uint64_t **)(result + 136);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  v17 = v7 / v8;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v10;
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *(_QWORD *)(result + 152);
    v26 = *(_QWORD **)(result + 56);
    v25 = *(uint64_t **)(result + 64);
    v27 = *v25;
    v28 = v25[1];
    v29 = v25[2];
    v30 = v26[2];
    v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    v32 = *v13;
    *(float *)&v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v24 + 136);
    v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    v37 = (float)v34;
    v38 = v35 * *(float *)v24;
    v119 = v35 * *(float *)(v24 + 8);
    v39 = v35 * *(float *)(v24 + 16);
    v40 = v35 * *(float *)(v24 + 20);
    v41 = *(float *)(v24 + 28);
    v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    v47 = (float)v5;
    v48 = *(float *)(v24 + 36);
    v49 = *(float *)(v24 + 40);
    v50 = *(float *)(v24 + 44);
    v51 = *(float *)(v24 + 48) * 0.5;
    v52 = *(float *)(v24 + 52) * 0.5;
    v53 = *(float *)(v24 + 56) * 0.5;
    v54 = *(float *)(v24 + 60) * 0.5;
    v55 = *(float *)(v24 + 64) * 0.5;
    v56 = *(float *)(v24 + 68) * 0.5;
    v57 = (char *)(*v11 + v32 * v12 + 2 * v10);
    LODWORD(result) = *(unsigned __int8 *)(v24 + 124);
    v58 = v26[1];
    v59 = (char *)(*v26 + v27 * v22 + 2 * v21);
    if (result >= 0x11)
      LOBYTE(result) = 0;
    else
      LOBYTE(result) = 16 - result;
    v60 = v58 + v28 * (v22 / 2) + 2 * v21;
    result = result;
    do
    {
      v61 = &v59[v27];
      v62 = &v57[v32];
      if (v20)
      {
        v63 = 0;
        v64 = &v59[v27];
        v65 = (_DWORD *)v18;
        v66 = &v57[v32];
        v67 = (_DWORD *)(v18 + v14);
        do
        {
          v68 = (unsigned __int16 *)(v60 + 2 * v63);
          v69 = (float)(*v68 >> result) - v37;
          v70 = (float)(v68[1] >> result) - v37;
          v71 = v119 * v70;
          v72 = (float)(v40 * v70) + (float)(v69 * v39);
          v73 = v42 * v69;
          v74 = v38 * (float)((float)(*(unsigned __int16 *)v59 >> result) - v36);
          v75 = v38 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> result) - v36);
          v76 = *(unsigned __int16 *)v64;
          v77 = *((unsigned __int16 *)v64 + 1);
          v78 = v71 + v74;
          v79 = v74 + v72;
          v80 = v73 + v74;
          v81 = v71 + v75;
          v82 = v72 + v75;
          v83 = v73 + v75;
          v84 = (float)((float)((float)(v49 * v79) + (float)(v48 * v78)) + (float)(v50 * v80)) + v43;
          v85 = v78 + v81;
          v86 = v79 + v82;
          v87 = v80 + v83;
          v88 = (float)((float)(v44 + (float)(v85 * v51)) + (float)(v86 * v52)) + (float)(v87 * v53);
          if (v88 < v43)
            v89 = v43;
          else
            v89 = (float)((float)(v44 + (float)(v85 * v51)) + (float)(v86 * v52)) + (float)(v87 * v53);
          if (v88 > v45)
            v89 = v45;
          *(_WORD *)v57 = llroundf(v89);
          v90 = v47;
          if (v84 <= v47)
          {
            v90 = v84;
            if (v84 < v46)
              v90 = v46;
          }
          v91 = (float)((float)(v44 + (float)(v85 * v54)) + (float)(v86 * v55)) + (float)(v87 * v56);
          *((_WORD *)v57 + 1) = llroundf(v90);
          v92 = v45;
          if (v91 <= v45)
          {
            v92 = v91;
            if (v91 < v43)
              v92 = v43;
          }
          v93 = (float)((float)((float)(v49 * v82) + (float)(v48 * v81)) + (float)(v50 * v83)) + v43;
          *((_WORD *)v57 + 2) = llroundf(v92);
          v94 = v47;
          if (v93 <= v47)
          {
            if (v93 < v46)
              v94 = v46;
            else
              v94 = v93;
          }
          *((_WORD *)v57 + 3) = llroundf(v94);
          if (v65)
            *v65++ = 0;
          v95 = v38 * (float)((float)(int)(v76 >> result) - v36);
          v96 = v38 * (float)((float)(int)(v77 >> result) - v36);
          v97 = v71 + v95;
          v98 = v72 + v95;
          v99 = v73 + v95;
          v100 = v71 + v96;
          v101 = v72 + v96;
          v102 = v73 + v96;
          v103 = (float)((float)((float)(v49 * v98) + (float)(v48 * v97)) + (float)(v50 * v99)) + v43;
          v104 = (float)((float)((float)(v49 * v101) + (float)(v48 * v100)) + (float)(v50 * v102)) + v43;
          v105 = v97 + v100;
          v106 = v98 + v101;
          v107 = (float)(v44 + (float)(v105 * v51)) + (float)(v106 * v52);
          v108 = v99 + v102;
          v109 = v107 + (float)(v108 * v53);
          v110 = (float)(v44 + (float)(v105 * v54)) + (float)(v106 * v55);
          if (v109 < v43)
            v111 = v43;
          else
            v111 = v107 + (float)(v108 * v53);
          if (v109 <= v45)
            v112 = v111;
          else
            v112 = v45;
          v113 = v110 + (float)(v108 * v56);
          *(_WORD *)v66 = llroundf(v112);
          if (v103 < v46)
            v114 = v46;
          else
            v114 = v103;
          if (v103 > v47)
            v114 = v47;
          *((_WORD *)v66 + 1) = llroundf(v114);
          if (v113 < v43)
            v115 = v43;
          else
            v115 = v113;
          if (v113 <= v45)
            v116 = v115;
          else
            v116 = v45;
          *((_WORD *)v66 + 2) = llroundf(v116);
          v117 = v47;
          if (v104 <= v47)
          {
            v117 = v104;
            if (v104 < v46)
              v117 = v46;
          }
          *((_WORD *)v66 + 3) = llroundf(v117);
          if (v67)
            *v67++ = 0;
          v59 += 4;
          v64 += 4;
          v57 += 8;
          v66 += 8;
          v63 += 2;
        }
        while (v20 > v63);
      }
      v59 = &v61[v27];
      v60 += v28;
      v57 = &v62[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v118 = 2 * v20;
      do
      {
        result = (unint64_t)memcpy(v16, v31, v118);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unint64_t)memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  float v60;
  float v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  size_t v65;
  char *v66;
  _BYTE *v67;
  _BYTE *v68;
  unsigned __int16 *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v117;
  float v118;
  float v119;
  float v124;
  float v125;
  float v130;
  float v131;
  float v132;
  float v133;
  float v138;
  float v139;
  float v141;
  float v142;
  float v143;
  float v146;
  float v147;
  float v149;
  float v150;
  float v151;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  uint64_t v219;
  size_t v220;
  _BYTE *v221;
  unsigned __int16 *v222;
  unsigned int v223;
  uint64_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v224 = v19[2];
    v25 = v224 + v24 * v12 + 2 * v11;
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[2];
    v30 = (_BYTE *)(v29 + v28 * v17 + v14);
    v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v18;
    v249 = v31 * *(float *)(v18 + 16);
    v250 = v31 * *(float *)(v18 + 8);
    v35 = v31 * *(float *)(v18 + 20);
    v39 = v31 * *(float *)(v18 + 28);
    v247 = v39;
    v248 = v35;
    LOWORD(v39) = *(_WORD *)(v18 + 144);
    v36 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 146);
    v37 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 148);
    v38 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 150);
    v40 = *(float *)(v18 + 40);
    v41 = *(float *)(v18 + 48);
    v43 = *(float *)(v18 + 52);
    v42 = *(float *)(v18 + 56);
    v244 = *(float *)(v18 + 76);
    v245 = *(float *)(v18 + 72);
    v242 = *(float *)(v18 + 84);
    v243 = *(float *)(v18 + 80);
    v239 = *(float *)(v18 + 92);
    v240 = *(float *)(v18 + 88);
    v237 = *(float *)(v18 + 100);
    v238 = *(float *)(v18 + 96);
    v236 = *(float *)(v18 + 104);
    v44 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v45 = v16[1];
    v46 = (_BYTE *)(*v16 + v26 * v17 + v14);
    v47 = (_BYTE *)(v45 + v27 * v17 + v14);
    if (v45)
      v48 = v47;
    else
      v48 = 0;
    v49 = *(unsigned __int8 *)(v18 + 124);
    v50 = 16 - v49;
    _CF = v49 >= 0x11;
    v53 = *v19;
    v52 = v19[1];
    v54 = v53 + v22 * v12;
    if (_CF)
      v50 = 0;
    v55 = v52 + v23 * (v12 / 2);
    v56 = v18 + 32932;
    v57 = (char *)(v54 + 2 * v11);
    v58 = v55 + 2 * v11;
    v59 = v50;
    v60 = *(float *)(v18 + 108);
    v233 = (float)LODWORD(a5);
    v234 = *(float *)(v18 + 112);
    v61 = *(float *)(v18 + 116);
    v251 = *(float *)(v18 + 120);
    v231 = v37;
    v232 = v32;
    v246 = (float)LODWORD(v39);
    v229 = *(float *)(v18 + 64);
    v230 = *(float *)(v18 + 68);
    v241 = *(float *)(v18 + 36);
    v227 = v34;
    v228 = *(float *)(v18 + 60);
    v235 = *(float *)(v18 + 44);
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    v225 = (float)LODWORD(v39);
    v226 = v60;
    do
    {
      v62 = &v57[v22];
      v63 = &v48[v27];
      v64 = &v46[v26];
      if (v10)
      {
        v65 = 0;
        v66 = &v57[v22];
        v67 = &v48[v27];
        v68 = &v46[v26];
        do
        {
          v69 = (unsigned __int16 *)(v58 + 2 * v65);
          v70 = (float)(v69[1] >> v59) - v33;
          v71 = v250 * v70;
          v72 = v34 * (float)((float)(*(unsigned __int16 *)v57 >> v59) - v32);
          v73 = (float)(v250 * v70) + v72;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = (float)(v250 * v70) + v72;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = (float)(*v69 >> v59) - v33;
          v76 = (float)(v248 * v70) + (float)(v75 * v249);
          v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = v247 * v75;
          v79 = (float)(v247 * v75) + v72;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v34 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v59) - v32);
          v82 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            v82 = v71 + v81;
            if ((float)(v71 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            v83 = v76 + v81;
            if ((float)(v76 + v81) < 0.0)
              v83 = 0.0;
          }
          v84 = v78 + v81;
          v85 = (float)(v78 + v81) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          v87 = v34 * (float)((float)(*(unsigned __int16 *)v66 >> v59) - v32);
          v88 = 8191.0;
          if ((float)(v71 + v87) <= 8191.0)
          {
            v88 = v71 + v87;
            if ((float)(v71 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = 8191.0;
          if ((float)(v76 + v87) <= 8191.0)
          {
            v89 = v76 + v87;
            if ((float)(v76 + v87) < 0.0)
              v89 = 0.0;
          }
          v90 = v78 + v87;
          v85 = (float)(v78 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v85)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v34 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v59) - v32);
          v93 = v71 + v92;
          v85 = (float)(v71 + v92) <= 8191.0;
          v94 = 8191.0;
          if (v85)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v76 + v92;
          v85 = (float)(v76 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v85)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v78 + v92;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          v117 = fmaxf(_S2, fmaxf(_S24, _S25));
          v118 = (float)((float)((float)(v234 * _S24) + (float)(v60 * _S2)) + (float)(v61 * _S25))
               + (float)(v251 * v117);
          v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            v119 = (float)((float)((float)(v234 * _S24) + (float)(v60 * _S2)) + (float)(v61 * _S25))
                 + (float)(v251 * v117);
            if (v118 < 0.0)
              v119 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *((_WORD *)result + llroundf(v119));
          v124 = (float)((float)((float)(v234 * _S3) + (float)(v60 * _S1)) + (float)(v61 * _S19))
               + (float)(v251 * fmaxf(_S1, fmaxf(_S3, _S19)));
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = v124;
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *((_WORD *)result + llroundf(v125));
          v130 = v61;
          v131 = (float)((float)((float)(v234 * _S23) + (float)(v60 * _S28)) + (float)(v61 * _S29))
               + (float)(v251 * fmaxf(_S28, fmaxf(_S23, _S29)));
          v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            v132 = v131;
            if (v131 < 0.0)
              v132 = 0.0;
          }
          v133 = v40;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *((_WORD *)result + llroundf(v132));
          v138 = (float)((float)((float)(v234 * _S22) + (float)(v60 * _S21)) + (float)(v61 * _S26))
               + (float)(v251 * fmaxf(_S21, fmaxf(_S22, _S26)));
          v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            v139 = v138;
            if (v138 < 0.0)
              v139 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v141 = _S2 * _S27;
          v142 = _S24 * _S27;
          v143 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          v146 = _S3 * _S27;
          v147 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          v149 = _S28 * _S27;
          v150 = _S23 * _S27;
          v151 = _S29 * _S27;
          _H29 = *((_WORD *)result + llroundf(v139));
          __asm { FCVT            S29, H29 }
          v154 = _S21 * _S29;
          v155 = _S22 * _S29;
          v156 = _S26 * _S29;
          v157 = (float)((float)(v244 * v142) + (float)(v141 * v245)) + (float)(v143 * v243);
          v158 = (float)((float)(v240 * v142) + (float)(v141 * v242)) + (float)(v143 * v239);
          v159 = (float)((float)(v237 * v142) + (float)(v141 * v238)) + (float)(v143 * v236);
          v160 = (float)((float)(v244 * v146) + (float)(_S1 * v245)) + (float)(v147 * v243);
          v161 = (float)((float)(v240 * v146) + (float)(_S1 * v242)) + (float)(v147 * v239);
          v162 = (float)((float)(v237 * v146) + (float)(_S1 * v238)) + (float)(v147 * v236);
          v163 = (float)((float)(v244 * v150) + (float)(v149 * v245)) + (float)(v151 * v243);
          v164 = (float)((float)(v240 * v150) + (float)(v149 * v242)) + (float)(v151 * v239);
          v165 = (float)((float)(v237 * v150) + (float)(v149 * v238)) + (float)(v151 * v236);
          v166 = (float)((float)(v244 * v155) + (float)(v154 * v245)) + (float)(v156 * v243);
          v167 = (float)((float)(v240 * v155) + (float)(v154 * v242)) + (float)(v156 * v239);
          v168 = (float)((float)(v237 * v155) + (float)(v154 * v238)) + (float)(v156 * v236);
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          v40 = v133;
          v181 = (float)((float)((float)(v133 * _S22) + (float)(v241 * _S21)) + (float)(v235 * _S29)) + v36;
          v182 = v38;
          if (v181 <= v38)
          {
            v182 = (float)((float)((float)(v133 * _S22) + (float)(v241 * _S21)) + (float)(v235 * _S29)) + v36;
            if (v181 < v36)
              v182 = v36;
          }
          *v46 = llroundf(v182);
          v61 = v130;
          if (v48)
          {
            v183 = v231;
            v184 = (float)((float)(v231 + (float)(_S21 * v41)) + (float)(_S22 * v43)) + (float)(_S29 * v42);
            v185 = v225;
            v186 = v225;
            if (v184 <= v225)
            {
              v186 = (float)((float)(v231 + (float)(_S21 * v41)) + (float)(_S22 * v43)) + (float)(_S29 * v42);
              if (v184 < v246)
                v186 = v246;
            }
            v188 = v228;
            v187 = v229;
            v189 = (float)((float)(v231 + (float)(_S21 * v228)) + (float)(_S22 * v229)) + (float)(_S29 * v230);
            v190 = v230;
            *v48 = llroundf(v186);
            v191 = v225;
            v32 = v232;
            v60 = v226;
            v34 = v227;
            if (v189 <= v225)
            {
              v191 = v189;
              if (v189 < v246)
                v191 = v246;
            }
            v48[1] = llroundf(v191);
            v48 += 2;
          }
          else
          {
            v183 = v231;
            v32 = v232;
            v34 = v227;
            v188 = v228;
            v187 = v229;
            v190 = v230;
            v185 = v225;
            v60 = v226;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          v195 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
          v196 = v38;
          if (v195 <= v38)
          {
            v196 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
            if (v195 < v36)
              v196 = v36;
          }
          v46[1] = llroundf(v196);
          if (v48)
          {
            v197 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
            v198 = v185;
            if (v197 <= v185)
            {
              v198 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
              if (v197 < v246)
                v198 = v246;
            }
            v199 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S3 * v187)) + (float)(_S19 * v190);
            *v48 = llroundf(v198);
            v200 = v185;
            if (v199 <= v185)
            {
              v200 = v199;
              if (v199 < v246)
                v200 = v246;
            }
            v48[1] = llroundf(v200);
            v48 += 2;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          v204 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
          v205 = v38;
          if (v204 <= v38)
          {
            v205 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
            if (v204 < v36)
              v205 = v36;
          }
          *v68 = llroundf(v205);
          if (v67)
          {
            v206 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
            v207 = v185;
            if (v206 <= v185)
            {
              v207 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
              if (v206 < v246)
                v207 = v246;
            }
            v208 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S3 * v187)) + (float)(_S19 * v190);
            *v67 = llroundf(v207);
            v209 = v185;
            if (v208 <= v185)
            {
              v209 = v208;
              if (v208 < v246)
                v209 = v246;
            }
            v67[1] = llroundf(v209);
            v67 += 2;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          v213 = (float)((float)((float)(v133 * _S2) + (float)(v241 * _S1)) + (float)(v235 * _S3)) + v36;
          v214 = v38;
          if (v213 <= v38)
          {
            v214 = (float)((float)((float)(v133 * _S2) + (float)(v241 * _S1)) + (float)(v235 * _S3)) + v36;
            if (v213 < v36)
              v214 = v36;
          }
          v68[1] = llroundf(v214);
          if (v67)
          {
            v215 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S2 * v43)) + (float)(_S3 * v42);
            v216 = v185;
            if (v215 <= v185)
            {
              v216 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S2 * v43)) + (float)(_S3 * v42);
              if (v215 < v246)
                v216 = v246;
            }
            v217 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S2 * v187)) + (float)(_S3 * v190);
            *v67 = llroundf(v216);
            v218 = v185;
            v33 = v233;
            if (v217 <= v185)
            {
              v218 = v217;
              if (v217 < v246)
                v218 = v246;
            }
            v67[1] = llroundf(v218);
            v67 += 2;
          }
          else
          {
            v33 = v233;
          }
          v57 += 4;
          v66 += 4;
          v46 += 2;
          v68 += 2;
          v65 += 2;
        }
        while (v10 > v65);
      }
      v57 = &v62[v22];
      v58 += v23;
      v46 = &v64[v26];
      v48 = &v63[v27];
      v9 += 2;
    }
    while (v13 > v9);
    if (v224 && v29)
    {
      v219 = 0;
      do
      {
        if (v10)
        {
          v220 = v10;
          v221 = v30;
          v222 = (unsigned __int16 *)v25;
          do
          {
            v223 = *v222++;
            *v221++ = llroundf((float)v223 * 0.0038911);
            --v220;
          }
          while (v220);
        }
        v25 += v24;
        v30 += v28;
        ++v219;
      }
      while (v219 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf420_TRC_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  char v54;
  uint64_t v55;
  char v56;
  char *v57;
  _BYTE *v58;
  _BYTE *v59;
  size_t v60;
  char *v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned __int16 *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  size_t v188;
  _BYTE *v189;
  unsigned __int16 *v190;
  unsigned int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = v25 + v24 * v12 + 2 * v11;
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v29 * v17 + v14);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v212 = v32 * *(float *)(v18 + 16);
    v213 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v210 = *(float *)&v37;
    v211 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v18 + 36);
    v45 = *(float *)(v18 + 44);
    v44 = *(float *)(v18 + 48);
    v215 = *(float *)(v18 + 56);
    v208 = *(float *)(v18 + 76);
    v209 = *(float *)(v18 + 72);
    v206 = *(float *)(v18 + 84);
    v207 = *(float *)(v18 + 80);
    v205 = *(float *)(v18 + 88);
    v203 = *(float *)(v18 + 92);
    v201 = *(float *)(v18 + 100);
    v202 = *(float *)(v18 + 96);
    v200 = *(float *)(v18 + 104);
    v46 = v18 + 164;
    v47 = v16[1];
    v48 = (_BYTE *)(*v16 + v27 * v17 + v14);
    v49 = (_BYTE *)(v47 + v28 * v17 + v14);
    result = (_QWORD *)(v18 + 16548);
    if (v47)
      v50 = v49;
    else
      v50 = 0;
    v51 = *(unsigned __int8 *)(v18 + 124);
    v52 = v19[1];
    v53 = (char *)(*v19 + v22 * v12 + 2 * v11);
    if (v51 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v51;
    v55 = v52 + v23 * (v12 / 2) + 2 * v11;
    v56 = v54;
    v197 = *(float *)(v18 + 60);
    v198 = (float)LODWORD(a5);
    v195 = *(float *)(v18 + 68);
    v196 = *(float *)(v18 + 64);
    v193 = v35;
    v194 = v39;
    v214 = *(float *)(v18 + 40);
    v204 = *(float *)(v18 + 52);
    v192 = v33;
    v199 = v41;
    do
    {
      v57 = &v53[v22];
      v58 = &v50[v28];
      v59 = &v48[v27];
      if (v10)
      {
        v60 = 0;
        v61 = &v53[v22];
        v62 = &v50[v28];
        v63 = &v48[v27];
        do
        {
          v64 = (unsigned __int16 *)(v55 + 2 * v60);
          v65 = (float)(v64[1] >> v56) - v34;
          v66 = v213 * v65;
          v67 = v35 * (float)((float)(*(unsigned __int16 *)v53 >> v56) - v33);
          v68 = (float)(v213 * v65) + v67;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = (float)(v213 * v65) + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = (float)(*v64 >> v56) - v34;
          v71 = (float)(v211 * v65) + (float)(v70 * v212);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v210 * v70;
          v74 = (float)(v210 * v70) + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v35 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v56) - v33);
          v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v73 + v76) <= 8191.0)
          {
            v79 = v73 + v76;
            if ((float)(v73 + v76) < 0.0)
              v79 = 0.0;
          }
          v80 = v35 * (float)((float)(*(unsigned __int16 *)v61 >> v56) - v33);
          v81 = 8191.0;
          if ((float)(v66 + v80) <= 8191.0)
          {
            v81 = v66 + v80;
            if ((float)(v66 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v71 + v80) <= 8191.0)
          {
            v82 = v71 + v80;
            if ((float)(v71 + v80) < 0.0)
              v82 = 0.0;
          }
          v83 = v73 + v80;
          v84 = (float)(v73 + v80) <= 8191.0;
          v85 = 8191.0;
          if (v84)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = v35 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v56) - v33);
          v87 = v66 + v86;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v45;
          v90 = v71 + v86;
          v84 = (float)(v71 + v86) <= 8191.0;
          v91 = 8191.0;
          if (v84)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v43;
          v93 = v73 + v86;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v123 = (float)((float)(v208 * _S4) + (float)(_S1 * v209)) + (float)(_S5 * v207);
          v124 = (float)((float)(v205 * _S4) + (float)(_S1 * v206)) + (float)(_S5 * v203);
          _S1 = (float)((float)(v201 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v200);
          v126 = (float)((float)(v208 * _S6) + (float)(_S2 * v209)) + (float)(_S7 * v207);
          v127 = (float)((float)(v205 * _S6) + (float)(_S2 * v206)) + (float)(_S7 * v203);
          v128 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S7 * v200);
          v129 = (float)((float)(v208 * _S27) + (float)(_S26 * v209)) + (float)(_S19 * v207);
          v130 = (float)((float)(v205 * _S27) + (float)(_S26 * v206)) + (float)(_S19 * v203);
          v131 = (float)((float)(v201 * _S27) + (float)(_S26 * v202)) + (float)(_S19 * v200);
          v132 = (float)((float)(v208 * _S24) + (float)(_S3 * v209)) + (float)(_S25 * v207);
          v133 = (float)((float)(v205 * _S24) + (float)(_S3 * v206)) + (float)(_S25 * v203);
          v134 = (float)((float)(v201 * _S24) + (float)(_S3 * v202)) + (float)(_S25 * v200);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          v43 = v92;
          v147 = (float)(v214 * _S28) + (float)(v92 * _S27);
          v45 = v89;
          v148 = (float)(v147 + (float)(v89 * _S29)) + v38;
          v149 = v40;
          if (v148 <= v40)
          {
            v149 = v148;
            if (v148 < v38)
              v149 = v38;
          }
          *v48 = llroundf(v149);
          if (v50)
          {
            v150 = v194;
            v151 = (float)((float)(v194 + (float)(_S27 * v44)) + (float)(_S28 * v204)) + (float)(_S29 * v215);
            v152 = v42;
            if (v151 <= v42)
            {
              v152 = (float)((float)(v194 + (float)(_S27 * v44)) + (float)(_S28 * v204)) + (float)(_S29 * v215);
              if (v151 < v199)
                v152 = v199;
            }
            v154 = v196;
            v153 = v197;
            v155 = (float)(v194 + (float)(_S27 * v197)) + (float)(_S28 * v196);
            v156 = v195;
            v157 = v155 + (float)(_S29 * v195);
            *v50 = llroundf(v152);
            v158 = v42;
            v33 = v192;
            v35 = v193;
            if (v157 <= v42)
            {
              v158 = v155 + (float)(_S29 * v195);
              if (v157 < v199)
                v158 = v199;
            }
            v50[1] = llroundf(v158);
            v50 += 2;
            v159 = v214;
          }
          else
          {
            v33 = v192;
            v35 = v193;
            v159 = v214;
            v154 = v196;
            v153 = v197;
            v150 = v194;
            v156 = v195;
          }
          __asm
          {
            FCVT            S25, H25
            FCVT            S19, H19
            FCVT            S26, H26
          }
          v163 = (float)((float)((float)(v159 * _S19) + (float)(v43 * _S25)) + (float)(v89 * _S26)) + v38;
          v164 = v40;
          if (v163 <= v40)
          {
            v164 = (float)((float)((float)(v159 * _S19) + (float)(v43 * _S25)) + (float)(v89 * _S26)) + v38;
            if (v163 < v38)
              v164 = v38;
          }
          v48[1] = llroundf(v164);
          if (v50)
          {
            v165 = (float)((float)(v150 + (float)(_S25 * v44)) + (float)(_S19 * v204)) + (float)(_S26 * v215);
            v166 = v42;
            if (v165 <= v42)
            {
              v166 = (float)((float)(v150 + (float)(_S25 * v44)) + (float)(_S19 * v204)) + (float)(_S26 * v215);
              if (v165 < v199)
                v166 = v199;
            }
            v167 = (float)((float)(v150 + (float)(_S25 * v153)) + (float)(_S19 * v154)) + (float)(_S26 * v156);
            *v50 = llroundf(v166);
            v168 = v42;
            if (v167 <= v42)
            {
              v168 = v167;
              if (v167 < v199)
                v168 = v199;
            }
            v50[1] = llroundf(v168);
            v50 += 2;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S19, H24
          }
          v172 = (float)((float)((float)(v159 * _S2) + (float)(v43 * _S7)) + (float)(v89 * _S19)) + v38;
          v173 = v40;
          if (v172 <= v40)
          {
            v173 = (float)((float)((float)(v159 * _S2) + (float)(v43 * _S7)) + (float)(v89 * _S19)) + v38;
            if (v172 < v38)
              v173 = v38;
          }
          *v63 = llroundf(v173);
          if (v62)
          {
            v174 = (float)((float)(v150 + (float)(_S7 * v44)) + (float)(_S2 * v204)) + (float)(_S19 * v215);
            v175 = v42;
            if (v174 <= v42)
            {
              v175 = (float)((float)(v150 + (float)(_S7 * v44)) + (float)(_S2 * v204)) + (float)(_S19 * v215);
              if (v174 < v199)
                v175 = v199;
            }
            v176 = (float)((float)(v150 + (float)(_S7 * v153)) + (float)(_S2 * v154)) + (float)(_S19 * v156);
            *v62 = llroundf(v175);
            v177 = v42;
            if (v176 <= v42)
            {
              v177 = v176;
              if (v176 < v199)
                v177 = v199;
            }
            v62[1] = llroundf(v177);
            v62 += 2;
          }
          v34 = v198;
          __asm
          {
            FCVT            S2, H4
            FCVT            S4, H5
            FCVT            S5, H6
          }
          v181 = (float)((float)((float)(v159 * _S4) + (float)(v43 * _S2)) + (float)(v89 * _S5)) + v38;
          v182 = v40;
          if (v181 <= v40)
          {
            v182 = (float)((float)((float)(v159 * _S4) + (float)(v43 * _S2)) + (float)(v89 * _S5)) + v38;
            if (v181 < v38)
              v182 = v38;
          }
          v63[1] = llroundf(v182);
          if (v62)
          {
            v183 = (float)((float)(v150 + (float)(_S2 * v44)) + (float)(_S4 * v204)) + (float)(_S5 * v215);
            v184 = v42;
            if (v183 <= v42)
            {
              v184 = (float)((float)(v150 + (float)(_S2 * v44)) + (float)(_S4 * v204)) + (float)(_S5 * v215);
              if (v183 < v199)
                v184 = v199;
            }
            v185 = (float)((float)(v150 + (float)(_S2 * v153)) + (float)(_S4 * v154)) + (float)(_S5 * v156);
            *v62 = llroundf(v184);
            v186 = v42;
            if (v185 <= v42)
            {
              v186 = v185;
              if (v185 < v199)
                v186 = v199;
            }
            v62[1] = llroundf(v186);
            v62 += 2;
          }
          v53 += 4;
          v61 += 4;
          v48 += 2;
          v63 += 2;
          v60 += 2;
        }
        while (v10 > v60);
      }
      v53 = &v57[v22];
      v55 += v23;
      v48 = &v59[v27];
      v50 = &v58[v28];
      v9 += 2;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      v187 = 0;
      do
      {
        if (v10)
        {
          v188 = v10;
          v189 = v31;
          v190 = (unsigned __int16 *)v26;
          do
          {
            v191 = *v190++;
            *v189++ = llroundf((float)v191 * 0.0038911);
            --v188;
          }
          while (v188);
        }
        v26 += v24;
        v31 += v29;
        ++v187;
      }
      while (v187 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  _BYTE *v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  _BYTE *v70;
  size_t v71;
  unsigned __int8 *v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned __int16 *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  uint64_t v124;
  size_t v125;
  _BYTE *v126;
  unsigned __int16 *v127;
  unsigned int v128;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[1];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v28 * v17 + v15);
    v32 = (_BYTE *)(*v16 + v26 * v17 + v15);
    v33 = (_BYTE *)(v29 + v27 * v17 + v15);
    v34 = v25 + v24 * v13 + 2 * v12;
    *(float *)&v35 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v36 = (float)*(unsigned int *)(v18 + 136);
    v37 = *(float *)&v36 / *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v18 + 140);
    v38 = (float)v35;
    LOWORD(v36) = *(_WORD *)(v18 + 142);
    v39 = (float)v36;
    v40 = v37 * *(float *)v18;
    v41 = v37 * *(float *)(v18 + 8);
    v42 = v37 * *(float *)(v18 + 16);
    v43 = v37 * *(float *)(v18 + 20);
    v44 = *(float *)(v18 + 28);
    v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v18 + 144);
    v46 = (float)LODWORD(v44);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    v47 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    v48 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    v49 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v50 = (float)v5;
    v51 = *(float *)(v18 + 36);
    v52 = *(float *)(v18 + 40);
    v53 = *(float *)(v18 + 44);
    v54 = *(float *)(v18 + 48);
    v55 = *(float *)(v18 + 52);
    v56 = *(float *)(v18 + 56);
    v57 = *(float *)(v18 + 60);
    v58 = *(float *)(v18 + 64);
    v59 = *(float *)(v18 + 68);
    if (v29)
      v60 = v33;
    else
      v60 = 0;
    v61 = *(unsigned __int8 *)(v18 + 124);
    v62 = 16 - v61;
    v63 = v61 >= 0x11;
    v64 = *v19;
    v65 = v19[1];
    result = (unsigned __int8 *)(v64 + v22 * v13 + 2 * v12);
    if (v63)
      v62 = 0;
    v66 = v65 + v23 * (v13 / 2) + 2 * v12;
    v67 = v62;
    do
    {
      v68 = &result[v22];
      v69 = &v60[v27];
      v70 = &v32[v26];
      if (v11)
      {
        v71 = 0;
        v72 = &result[v22];
        v73 = &v32[v26];
        v74 = &v60[v27];
        do
        {
          v75 = (unsigned __int16 *)(v66 + 2 * v71);
          v76 = (float)(*v75 >> v67) - v39;
          v77 = (float)(v75[1] >> v67) - v39;
          v78 = v41 * v77;
          v79 = (float)(v43 * v77) + (float)(v76 * v42);
          v80 = v45 * v76;
          v81 = v40 * (float)((float)(*(unsigned __int16 *)result >> v67) - v38);
          v82 = v78 + v81;
          v83 = v81 + v79;
          v84 = v80 + v81;
          v85 = (float)((float)((float)(v52 * v83) + (float)(v51 * v82)) + (float)(v53 * v84)) + v46;
          v86 = v48;
          if (v85 <= v48)
          {
            v86 = (float)((float)((float)(v52 * v83) + (float)(v51 * v82)) + (float)(v53 * v84)) + v46;
            if (v85 < v46)
              v86 = v46;
          }
          v87 = *((unsigned __int16 *)result + 1);
          v88 = *(unsigned __int16 *)v72;
          v89 = *((unsigned __int16 *)v72 + 1);
          *v32 = llroundf(v86);
          if (v60)
          {
            v90 = (float)((float)(v47 + (float)(v82 * v54)) + (float)(v83 * v55)) + (float)(v84 * v56);
            v91 = v50;
            if (v90 <= v50)
            {
              v91 = (float)((float)(v47 + (float)(v82 * v54)) + (float)(v83 * v55)) + (float)(v84 * v56);
              if (v90 < v49)
                v91 = v49;
            }
            v92 = (float)((float)(v47 + (float)(v82 * v57)) + (float)(v83 * v58)) + (float)(v84 * v59);
            *v60 = llroundf(v91);
            v93 = v50;
            if (v92 <= v50)
            {
              if (v92 < v49)
                v93 = v49;
              else
                v93 = v92;
            }
            v60[1] = llroundf(v93);
            v60 += 2;
          }
          v94 = v40 * (float)((float)(int)(v87 >> v67) - v38);
          v95 = v78 + v94;
          v96 = v79 + v94;
          v97 = v80 + v94;
          v98 = (float)((float)((float)(v52 * v96) + (float)(v51 * v95)) + (float)(v53 * v97)) + v46;
          v99 = v48;
          if (v98 <= v48)
          {
            v99 = (float)((float)((float)(v52 * v96) + (float)(v51 * v95)) + (float)(v53 * v97)) + v46;
            if (v98 < v46)
              v99 = v46;
          }
          v32[1] = llroundf(v99);
          if (v60)
          {
            v100 = (float)((float)(v47 + (float)(v95 * v54)) + (float)(v96 * v55)) + (float)(v97 * v56);
            v101 = v50;
            if (v100 <= v50)
            {
              v101 = (float)((float)(v47 + (float)(v95 * v54)) + (float)(v96 * v55)) + (float)(v97 * v56);
              if (v100 < v49)
                v101 = v49;
            }
            v102 = (float)((float)(v47 + (float)(v95 * v57)) + (float)(v96 * v58)) + (float)(v97 * v59);
            *v60 = llroundf(v101);
            v103 = v50;
            if (v102 <= v50)
            {
              if (v102 < v49)
                v103 = v49;
              else
                v103 = v102;
            }
            v60[1] = llroundf(v103);
            v60 += 2;
          }
          v104 = v40 * (float)((float)(int)(v88 >> v67) - v38);
          v105 = v78 + v104;
          v106 = v79 + v104;
          v107 = v80 + v104;
          v108 = (float)((float)((float)(v52 * v106) + (float)(v51 * v105)) + (float)(v53 * v107)) + v46;
          v109 = v48;
          if (v108 <= v48)
          {
            v109 = (float)((float)((float)(v52 * v106) + (float)(v51 * v105)) + (float)(v53 * v107)) + v46;
            if (v108 < v46)
              v109 = v46;
          }
          *v73 = llroundf(v109);
          if (v74)
          {
            v110 = (float)((float)(v47 + (float)(v105 * v54)) + (float)(v106 * v55)) + (float)(v107 * v56);
            v111 = v50;
            if (v110 <= v50)
            {
              v111 = (float)((float)(v47 + (float)(v105 * v54)) + (float)(v106 * v55)) + (float)(v107 * v56);
              if (v110 < v49)
                v111 = v49;
            }
            v112 = (float)((float)(v47 + (float)(v105 * v57)) + (float)(v106 * v58)) + (float)(v107 * v59);
            *v74 = llroundf(v111);
            v113 = v50;
            if (v112 <= v50)
            {
              if (v112 < v49)
                v113 = v49;
              else
                v113 = v112;
            }
            v74[1] = llroundf(v113);
            v74 += 2;
          }
          v114 = v40 * (float)((float)(int)(v89 >> v67) - v38);
          v115 = v78 + v114;
          v116 = v79 + v114;
          v117 = v80 + v114;
          v118 = (float)((float)((float)(v52 * v116) + (float)(v51 * v115)) + (float)(v53 * v117)) + v46;
          v119 = v48;
          if (v118 <= v48)
          {
            v119 = (float)((float)((float)(v52 * v116) + (float)(v51 * v115)) + (float)(v53 * v117)) + v46;
            if (v118 < v46)
              v119 = v46;
          }
          v73[1] = llroundf(v119);
          if (v74)
          {
            v120 = (float)((float)(v47 + (float)(v115 * v54)) + (float)(v116 * v55)) + (float)(v117 * v56);
            v121 = v50;
            if (v120 <= v50)
            {
              v121 = (float)((float)(v47 + (float)(v115 * v54)) + (float)(v116 * v55)) + (float)(v117 * v56);
              if (v120 < v49)
                v121 = v49;
            }
            v122 = (float)((float)(v47 + (float)(v115 * v57)) + (float)(v116 * v58)) + (float)(v117 * v59);
            *v74 = llroundf(v121);
            v123 = v50;
            if (v122 <= v50)
            {
              v123 = v122;
              if (v122 < v49)
                v123 = v49;
            }
            v74[1] = llroundf(v123);
            v74 += 2;
          }
          result += 4;
          v72 += 4;
          v32 += 2;
          v73 += 2;
          v71 += 2;
        }
        while (v11 > v71);
      }
      result = &v68[v22];
      v66 += v23;
      v32 = &v70[v26];
      v60 = &v69[v27];
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      v124 = 0;
      do
      {
        if (v11)
        {
          v125 = v11;
          v126 = v31;
          v127 = (unsigned __int16 *)v34;
          do
          {
            v128 = *v127++;
            *v126++ = llroundf((float)v128 * 0.0038911);
            --v125;
          }
          while (v125);
        }
        v34 += v24;
        v31 += v28;
        ++v124;
      }
      while (v124 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = (unsigned __int8 *)memset(v31, 255, v11);
        v31 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  char v56;
  float v57;
  char *v58;
  char *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unsigned __int8 *v64;
  unsigned __int16 *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v114;
  float v115;
  float v120;
  float v121;
  float v126;
  float v127;
  float v128;
  float v133;
  float v134;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v149;
  float v150;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  size_t v214;
  uint64_t v215;
  uint64_t v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 36);
    v11 = *(_QWORD *)(result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = *((_QWORD *)result + 14);
    v14 = (uint64_t *)*((_QWORD *)result + 16);
    v15 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    v16 = *((_QWORD *)result + 19);
    v17 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v19 = (uint64_t *)*((_QWORD *)result + 17);
    v20 = *v18;
    v21 = v18[1];
    v22 = v18[2];
    v216 = v17[2];
    v23 = (char *)(v216 + v22 * v11 + 2 * v10);
    v24 = *v19;
    v25 = v19[1];
    v26 = v19[2];
    v215 = v14[2];
    v27 = (char *)(v215 + v26 * v15 + 2 * v13);
    v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v30 = (float)LODWORD(a4);
    v31 = v28 * *(float *)v16;
    v241 = v28 * *(float *)(v16 + 16);
    v242 = v28 * *(float *)(v16 + 8);
    v32 = v28 * *(float *)(v16 + 20);
    *(float *)&v33 = v28 * *(float *)(v16 + 28);
    v239 = *(float *)&v33;
    v240 = v32;
    LOWORD(v33) = *(_WORD *)(v16 + 144);
    v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 146);
    v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 148);
    v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 150);
    v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 152);
    v38 = (float)v33;
    v39 = *(float *)(v16 + 44);
    v40 = *(float *)(v16 + 48);
    v41 = *(float *)(v16 + 52);
    v237 = *(float *)(v16 + 76);
    v238 = *(float *)(v16 + 72);
    v235 = *(float *)(v16 + 84);
    v236 = *(float *)(v16 + 80);
    v234 = *(float *)(v16 + 88);
    v233 = *(float *)(v16 + 92);
    v231 = *(float *)(v16 + 96);
    v230 = *(float *)(v16 + 100);
    v228 = *(float *)(v16 + 104);
    v42 = v16 + 164;
    v43 = v16 + 16548;
    v44 = v16 + 32932;
    v46 = *v14;
    v45 = v14[1];
    result = (unsigned __int8 *)(v46 + *v19 * v15 + 2 * v13);
    if (v45)
      v47 = (char *)(v45 + v25 * v15 + 2 * v13);
    else
      v47 = 0;
    v48 = *(unsigned __int8 *)(v16 + 132);
    if (v48 >= 0x11)
      v49 = 0;
    else
      v49 = 16 - v48;
    v50 = *(unsigned __int8 *)(v16 + 124);
    v51 = 16 - v50;
    v52 = v17[1];
    v53 = (char *)(*v17 + v20 * v11 + 2 * v10);
    if (v50 >= 0x11)
      v51 = 0;
    v54 = v52 + v21 * (v11 / 2) + 2 * v10;
    v55 = v51;
    v56 = v49;
    v57 = *(float *)(v16 + 108);
    v225 = *(float *)(v16 + 116);
    v226 = *(float *)(v16 + 112);
    v223 = (float)LODWORD(a4);
    v224 = *(float *)(v16 + 120);
    v221 = *(float *)(v16 + 56);
    v222 = v29;
    v219 = *(float *)(v16 + 64);
    v220 = *(float *)(v16 + 60);
    v217 = v35;
    v218 = *(float *)(v16 + 68);
    v232 = v37;
    v229 = *(float *)(v16 + 36);
    v227 = *(float *)(v16 + 40);
    do
    {
      v58 = &v53[v20];
      v59 = &v47[v25];
      v60 = &result[v24];
      if (v9)
      {
        v61 = 0;
        v62 = &v53[v20];
        v63 = &v47[v25];
        v64 = &result[v24];
        do
        {
          v65 = (unsigned __int16 *)(v54 + 2 * v61);
          v66 = (float)(v65[1] >> v55) - v30;
          v67 = v242 * v66;
          v68 = v31 * (float)((float)(*(unsigned __int16 *)v53 >> v55) - v29);
          v69 = (float)(v242 * v66) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v242 * v66) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = (float)(*v65 >> v55) - v30;
          v72 = (float)(v240 * v66) + (float)(v71 * v241);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v239 * v71;
          v75 = (float)(v239 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v31 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v55) - v29);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = (float)(v74 + v77) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = v31 * (float)((float)(*(unsigned __int16 *)v62 >> v55) - v29);
          v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v74 + v83;
          v81 = (float)(v74 + v83) <= 8191.0;
          v87 = 8191.0;
          if (v81)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v31 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v55) - v29);
          v89 = v67 + v88;
          v81 = (float)(v67 + v88) <= 8191.0;
          v90 = 8191.0;
          if (v81)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v88;
          v81 = (float)(v72 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v81)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v88;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S9, H0 }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H27 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          v114 = (float)((float)((float)(v226 * _S24) + (float)(v57 * _S9)) + (float)(v225 * _S25))
               + (float)(v224 * fmaxf(_S9, fmaxf(_S24, _S25)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *(_WORD *)(v43 + 2 * llroundf(v115));
          v120 = (float)((float)((float)(v226 * _S3) + (float)(v57 * _S1)) + (float)(v225 * _S19))
               + (float)(v224 * fmaxf(_S1, fmaxf(_S3, _S19)));
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = v120;
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *(_WORD *)(v43 + 2 * llroundf(v121));
          v126 = (float)((float)((float)(v226 * _S23) + (float)(v57 * _S28)) + (float)(v225 * _S29))
               + (float)(v224 * fmaxf(_S28, fmaxf(_S23, _S29)));
          v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            v127 = v126;
            if (v126 < 0.0)
              v127 = 0.0;
          }
          v128 = v41;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *(_WORD *)(v43 + 2 * llroundf(v127));
          v133 = (float)((float)((float)(v226 * _S22) + (float)(v57 * _S21)) + (float)(v225 * _S26))
               + (float)(v224 * fmaxf(_S21, fmaxf(_S22, _S26)));
          v134 = 8191.0;
          if (v133 <= 8191.0)
          {
            v134 = v133;
            if (v133 < 0.0)
              v134 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v136 = _S9 * _S27;
          v137 = _S24 * _S27;
          v138 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          v140 = _S1 * _S27;
          v141 = _S3 * _S27;
          v142 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          v144 = _S28 * _S27;
          v145 = _S23 * _S27;
          v146 = _S29 * _S27;
          _H0 = *(_WORD *)(v43 + 2 * llroundf(v134));
          __asm { FCVT            S0, H0 }
          v149 = _S21 * _S0;
          v150 = _S22 * _S0;
          _S0 = _S26 * _S0;
          v152 = (float)((float)(v237 * v137) + (float)(v136 * v238)) + (float)(v138 * v236);
          v153 = (float)((float)(v234 * v137) + (float)(v136 * v235)) + (float)(v138 * v233);
          v154 = (float)((float)(v230 * v137) + (float)(v136 * v231)) + (float)(v138 * v228);
          v155 = (float)((float)(v237 * v141) + (float)(v140 * v238)) + (float)(v142 * v236);
          v156 = (float)((float)(v234 * v141) + (float)(v140 * v235)) + (float)(v142 * v233);
          v157 = (float)((float)(v230 * v141) + (float)(v140 * v231)) + (float)(v142 * v228);
          v158 = (float)((float)(v237 * v145) + (float)(v144 * v238)) + (float)(v146 * v236);
          v159 = (float)((float)(v234 * v145) + (float)(v144 * v235)) + (float)(v146 * v233);
          v160 = (float)((float)(v230 * v145) + (float)(v144 * v231)) + (float)(v146 * v228);
          v161 = (float)((float)(v237 * v150) + (float)(v149 * v238)) + (float)(_S0 * v236);
          v162 = (float)((float)(v234 * v150) + (float)(v149 * v235)) + (float)(_S0 * v233);
          v163 = (float)((float)(v230 * v150) + (float)(v149 * v231)) + (float)(_S0 * v228);
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H0 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          v176 = (float)((float)((float)(v227 * _S22) + (float)(v229 * _S21)) + (float)(v39 * _S29)) + v34;
          v177 = v36;
          if (v176 <= v36)
          {
            v177 = (float)((float)((float)(v227 * _S22) + (float)(v229 * _S21)) + (float)(v39 * _S29)) + v34;
            if (v176 < v34)
              v177 = v34;
          }
          *(_WORD *)result = llroundf(v177) << v56;
          v41 = v128;
          if (v47)
          {
            v178 = v217;
            v179 = v221;
            v180 = (float)((float)(v217 + (float)(_S21 * v40)) + (float)(_S22 * v41)) + (float)(_S29 * v221);
            v181 = v38;
            if (v180 <= v38)
            {
              v181 = (float)((float)(v217 + (float)(_S21 * v40)) + (float)(_S22 * v41)) + (float)(_S29 * v221);
              if (v180 < v232)
                v181 = v232;
            }
            v183 = v219;
            v182 = v220;
            v184 = (float)((float)(v217 + (float)(_S21 * v220)) + (float)(_S22 * v219)) + (float)(_S29 * v218);
            v185 = v218;
            *(_WORD *)v47 = llroundf(v181) << v56;
            v186 = v38;
            v29 = v222;
            if (v184 <= v38)
            {
              v186 = v184;
              if (v184 < v232)
                v186 = v232;
            }
            *((_WORD *)v47 + 1) = llroundf(v186) << v56;
            v47 += 4;
          }
          else
          {
            v179 = v221;
            v29 = v222;
            v178 = v217;
            v185 = v218;
            v183 = v219;
            v182 = v220;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          v190 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
          v191 = v36;
          if (v190 <= v36)
          {
            v191 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
            if (v190 < v34)
              v191 = v34;
          }
          *((_WORD *)result + 1) = llroundf(v191) << v56;
          if (v47)
          {
            v192 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
            v193 = v38;
            if (v192 <= v38)
            {
              v193 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
              if (v192 < v232)
                v193 = v232;
            }
            v194 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S3 * v183)) + (float)(_S19 * v185);
            *(_WORD *)v47 = llroundf(v193) << v56;
            v195 = v38;
            if (v194 <= v38)
            {
              v195 = v194;
              if (v194 < v232)
                v195 = v232;
            }
            *((_WORD *)v47 + 1) = llroundf(v195) << v56;
            v47 += 4;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          v199 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
          v200 = v36;
          if (v199 <= v36)
          {
            v200 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
            if (v199 < v34)
              v200 = v34;
          }
          *(_WORD *)v64 = llroundf(v200) << v56;
          if (v63)
          {
            v201 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
            v202 = v38;
            if (v201 <= v38)
            {
              v202 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
              if (v201 < v232)
                v202 = v232;
            }
            v203 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S3 * v183)) + (float)(_S19 * v185);
            *(_WORD *)v63 = llroundf(v202) << v56;
            v204 = v38;
            if (v203 <= v38)
            {
              v204 = v203;
              if (v203 < v232)
                v204 = v232;
            }
            *((_WORD *)v63 + 1) = llroundf(v204) << v56;
            v63 += 4;
          }
          __asm
          {
            FCVT            S1, H0
            FCVT            S0, H24
            FCVT            S3, H25
          }
          v208 = (float)((float)((float)(v227 * _S0) + (float)(v229 * _S1)) + (float)(v39 * _S3)) + v34;
          v209 = v36;
          if (v208 <= v36)
          {
            v209 = (float)((float)((float)(v227 * _S0) + (float)(v229 * _S1)) + (float)(v39 * _S3)) + v34;
            if (v208 < v34)
              v209 = v34;
          }
          *((_WORD *)v64 + 1) = llroundf(v209) << v56;
          if (v63)
          {
            v210 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S0 * v41)) + (float)(_S3 * v179);
            v211 = v38;
            if (v210 <= v38)
            {
              v211 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S0 * v41)) + (float)(_S3 * v179);
              if (v210 < v232)
                v211 = v232;
            }
            v212 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S0 * v183)) + (float)(_S3 * v185);
            *(_WORD *)v63 = llroundf(v211) << v56;
            v213 = v38;
            v30 = v223;
            if (v212 <= v38)
            {
              v213 = v212;
              if (v212 < v232)
                v213 = v232;
            }
            *((_WORD *)v63 + 1) = llroundf(v213) << v56;
            v63 += 4;
          }
          else
          {
            v30 = v223;
          }
          v53 += 4;
          v62 += 4;
          result += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v9 > v61);
      }
      v53 = &v58[v20];
      v54 += v21;
      result = &v60[v24];
      v47 = &v59[v25];
      v8 += 2;
    }
    while (v12 > v8);
    if (v216 && v215)
    {
      v214 = 2 * v9;
      do
      {
        result = (unsigned __int8 *)memcpy(v27, v23, v214);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v215)
    {
      do
      {
        if (v9)
          result = (unsigned __int8 *)memset(v27, 255, 2 * v9);
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  unsigned __int8 *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  char *v70;
  char *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v130;
  float v131;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  size_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v195 = v18[2];
    v24 = (char *)(v195 + v23 * v12 + 2 * v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v28 = v15[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v32 = (float)LODWORD(a5);
    v33 = v30 * *(float *)v17;
    v216 = v30 * *(float *)(v17 + 16);
    v217 = v30 * *(float *)(v17 + 8);
    v34 = v30 * *(float *)(v17 + 20);
    *(float *)&v35 = v30 * *(float *)(v17 + 28);
    v214 = *(float *)&v35;
    v215 = v34;
    LOWORD(v35) = *(_WORD *)(v17 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 152);
    v40 = (float)v35;
    v42 = *(float *)(v17 + 36);
    v41 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v43 = *(float *)(v17 + 48);
    v45 = *(float *)(v17 + 52);
    v219 = *(float *)(v17 + 56);
    v46 = *(float *)(v17 + 60);
    v47 = *(float *)(v17 + 64);
    v48 = *(float *)(v17 + 68);
    v212 = *(float *)(v17 + 76);
    v213 = *(float *)(v17 + 72);
    v210 = *(float *)(v17 + 84);
    v211 = *(float *)(v17 + 80);
    v209 = *(float *)(v17 + 88);
    v207 = *(float *)(v17 + 92);
    v205 = *(float *)(v17 + 100);
    v206 = *(float *)(v17 + 96);
    v204 = *(float *)(v17 + 104);
    v49 = v17 + 164;
    v50 = v17 + 16548;
    v51 = v15[1];
    v52 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v51)
      v53 = (char *)(v51 + v26 * v16 + 2 * v14);
    else
      v53 = 0;
    v54 = *v18;
    v55 = v18[1];
    result = (unsigned __int8 *)(v54 + v21 * v12 + 2 * v11);
    v56 = *(unsigned __int8 *)(v17 + 132);
    _CF = v56 >= 0x11;
    v58 = 16 - v56;
    if (_CF)
      v58 = 0;
    v59 = *(unsigned __int8 *)(v17 + 124);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    if (v12 >= 0)
      v61 = v12;
    else
      v61 = v12 + 1;
    v62 = v55 + v22 * (v61 >> 1) + 2 * v11;
    v63 = v60;
    v64 = v58;
    v201 = v46;
    v202 = (float)LODWORD(a5);
    v199 = v48;
    v200 = v47;
    v197 = v33;
    v198 = v37;
    v218 = v41;
    v208 = v45;
    v196 = v31;
    v203 = v39;
    do
    {
      v65 = &result[v21];
      v66 = &v53[v26];
      v67 = &v52[v25];
      if (v10)
      {
        v68 = 0;
        v69 = &result[v21];
        v70 = &v53[v26];
        v71 = &v52[v25];
        do
        {
          v72 = (unsigned __int16 *)(v62 + 2 * v68);
          v73 = (float)(v72[1] >> v63) - v32;
          v74 = v217 * v73;
          v75 = v33 * (float)((float)(*(unsigned __int16 *)result >> v63) - v31);
          v76 = (float)(v217 * v73) + v75;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)(v217 * v73) + v75;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = (float)(*v72 >> v63) - v32;
          v79 = (float)(v215 * v73) + (float)(v78 * v216);
          v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v214 * v78;
          v82 = (float)(v214 * v78) + v75;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v33 * (float)((float)(*((unsigned __int16 *)result + 1) >> v63) - v31);
          v85 = 8191.0;
          if ((float)(v74 + v84) <= 8191.0)
          {
            v85 = v74 + v84;
            if ((float)(v74 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v79 + v84) <= 8191.0)
          {
            v86 = v79 + v84;
            if ((float)(v79 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = 8191.0;
          if ((float)(v81 + v84) <= 8191.0)
          {
            v87 = v81 + v84;
            if ((float)(v81 + v84) < 0.0)
              v87 = 0.0;
          }
          v88 = v33 * (float)((float)(*(unsigned __int16 *)v69 >> v63) - v31);
          v89 = 8191.0;
          if ((float)(v74 + v88) <= 8191.0)
          {
            v89 = v74 + v88;
            if ((float)(v74 + v88) < 0.0)
              v89 = 0.0;
          }
          v90 = 8191.0;
          if ((float)(v79 + v88) <= 8191.0)
          {
            v90 = v79 + v88;
            if ((float)(v79 + v88) < 0.0)
              v90 = 0.0;
          }
          v91 = v81 + v88;
          v92 = (float)(v81 + v88) <= 8191.0;
          v93 = 8191.0;
          if (v92)
          {
            v93 = v91;
            if (v91 < 0.0)
              v93 = 0.0;
          }
          v94 = v33 * (float)((float)(*((unsigned __int16 *)v69 + 1) >> v63) - v31);
          v95 = v74 + v94;
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v44;
          v98 = v79 + v94;
          v92 = (float)(v79 + v94) <= 8191.0;
          v99 = 8191.0;
          if (v92)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v42;
          v101 = v81 + v94;
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H3 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v130 = (float)((float)(v212 * _S2) + (float)(_S1 * v213)) + (float)(_S4 * v211);
          v131 = (float)((float)(v209 * _S2) + (float)(_S1 * v210)) + (float)(_S4 * v207);
          _S1 = (float)((float)(v205 * _S2) + (float)(_S1 * v206)) + (float)(_S4 * v204);
          v133 = (float)((float)(v212 * _S6) + (float)(_S5 * v213)) + (float)(_S7 * v211);
          v134 = (float)((float)(v209 * _S6) + (float)(_S5 * v210)) + (float)(_S7 * v207);
          v135 = (float)((float)(v205 * _S6) + (float)(_S5 * v206)) + (float)(_S7 * v204);
          v136 = (float)((float)(v212 * _S27) + (float)(_S26 * v213)) + (float)(_S19 * v211);
          v137 = (float)((float)(v209 * _S27) + (float)(_S26 * v210)) + (float)(_S19 * v207);
          v138 = (float)((float)(v205 * _S27) + (float)(_S26 * v206)) + (float)(_S19 * v204);
          v139 = (float)((float)(v212 * _S24) + (float)(_S3 * v213)) + (float)(_S25 * v211);
          v140 = (float)((float)(v209 * _S24) + (float)(_S3 * v210)) + (float)(_S25 * v207);
          v141 = (float)((float)(v205 * _S24) + (float)(_S3 * v206)) + (float)(_S25 * v204);
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          v42 = v100;
          v154 = (float)(v218 * _S28) + (float)(v100 * _S27);
          v44 = v97;
          v155 = (float)(v154 + (float)(v97 * _S29)) + v36;
          v156 = v38;
          if (v155 <= v38)
          {
            v156 = v155;
            if (v155 < v36)
              v156 = v36;
          }
          *(_WORD *)v52 = llroundf(v156) << v64;
          if (v53)
          {
            v157 = v198;
            v158 = (float)((float)(v198 + (float)(_S27 * v43)) + (float)(_S28 * v208)) + (float)(_S29 * v219);
            v159 = v40;
            if (v158 <= v40)
            {
              v159 = (float)((float)(v198 + (float)(_S27 * v43)) + (float)(_S28 * v208)) + (float)(_S29 * v219);
              if (v158 < v203)
                v159 = v203;
            }
            v161 = v200;
            v160 = v201;
            v162 = (float)(v198 + (float)(_S27 * v201)) + (float)(_S28 * v200);
            v163 = v199;
            v164 = v162 + (float)(_S29 * v199);
            *(_WORD *)v53 = llroundf(v159) << v64;
            v165 = v40;
            v31 = v196;
            v33 = v197;
            if (v164 <= v40)
            {
              v165 = v162 + (float)(_S29 * v199);
              if (v164 < v203)
                v165 = v203;
            }
            *((_WORD *)v53 + 1) = llroundf(v165) << v64;
            v53 += 4;
            v166 = v218;
          }
          else
          {
            v31 = v196;
            v33 = v197;
            v166 = v218;
            v161 = v200;
            v160 = v201;
            v157 = v198;
            v163 = v199;
          }
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
            FCVT            S19, H19
          }
          v170 = (float)((float)((float)(v166 * _S26) + (float)(v42 * _S25)) + (float)(v97 * _S19)) + v36;
          v171 = v38;
          if (v170 <= v38)
          {
            v171 = (float)((float)((float)(v166 * _S26) + (float)(v42 * _S25)) + (float)(v97 * _S19)) + v36;
            if (v170 < v36)
              v171 = v36;
          }
          *((_WORD *)v52 + 1) = llroundf(v171) << v64;
          if (v53)
          {
            v172 = (float)((float)(v157 + (float)(_S25 * v43)) + (float)(_S26 * v208)) + (float)(_S19 * v219);
            v173 = v40;
            if (v172 <= v40)
            {
              v173 = (float)((float)(v157 + (float)(_S25 * v43)) + (float)(_S26 * v208)) + (float)(_S19 * v219);
              if (v172 < v203)
                v173 = v203;
            }
            v174 = (float)((float)(v157 + (float)(_S25 * v160)) + (float)(_S26 * v161)) + (float)(_S19 * v163);
            *(_WORD *)v53 = llroundf(v173) << v64;
            v175 = v40;
            if (v174 <= v40)
            {
              v175 = v174;
              if (v174 < v203)
                v175 = v203;
            }
            *((_WORD *)v53 + 1) = llroundf(v175) << v64;
            v53 += 4;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S19, H24
          }
          v179 = (float)((float)((float)(v166 * _S2) + (float)(v42 * _S7)) + (float)(v97 * _S19)) + v36;
          v180 = v38;
          if (v179 <= v38)
          {
            v180 = (float)((float)((float)(v166 * _S2) + (float)(v42 * _S7)) + (float)(v97 * _S19)) + v36;
            if (v179 < v36)
              v180 = v36;
          }
          *(_WORD *)v71 = llroundf(v180) << v64;
          if (v70)
          {
            v181 = (float)((float)(v157 + (float)(_S7 * v43)) + (float)(_S2 * v208)) + (float)(_S19 * v219);
            v182 = v40;
            if (v181 <= v40)
            {
              v182 = (float)((float)(v157 + (float)(_S7 * v43)) + (float)(_S2 * v208)) + (float)(_S19 * v219);
              if (v181 < v203)
                v182 = v203;
            }
            v183 = (float)((float)(v157 + (float)(_S7 * v160)) + (float)(_S2 * v161)) + (float)(_S19 * v163);
            *(_WORD *)v70 = llroundf(v182) << v64;
            v184 = v40;
            if (v183 <= v40)
            {
              v184 = v183;
              if (v183 < v203)
                v184 = v203;
            }
            *((_WORD *)v70 + 1) = llroundf(v184) << v64;
            v70 += 4;
          }
          v32 = v202;
          __asm
          {
            FCVT            S2, H4
            FCVT            S4, H5
            FCVT            S5, H6
          }
          v188 = (float)((float)((float)(v166 * _S4) + (float)(v42 * _S2)) + (float)(v97 * _S5)) + v36;
          v189 = v38;
          if (v188 <= v38)
          {
            v189 = (float)((float)((float)(v166 * _S4) + (float)(v42 * _S2)) + (float)(v97 * _S5)) + v36;
            if (v188 < v36)
              v189 = v36;
          }
          *((_WORD *)v71 + 1) = llroundf(v189) << v64;
          if (v70)
          {
            v190 = (float)((float)(v157 + (float)(_S2 * v43)) + (float)(_S4 * v208)) + (float)(_S5 * v219);
            v191 = v40;
            if (v190 <= v40)
            {
              v191 = (float)((float)(v157 + (float)(_S2 * v43)) + (float)(_S4 * v208)) + (float)(_S5 * v219);
              if (v190 < v203)
                v191 = v203;
            }
            v192 = (float)((float)(v157 + (float)(_S2 * v160)) + (float)(_S4 * v161)) + (float)(_S5 * v163);
            *(_WORD *)v70 = llroundf(v191) << v64;
            v193 = v40;
            if (v192 <= v40)
            {
              v193 = v192;
              if (v192 < v203)
                v193 = v203;
            }
            *((_WORD *)v70 + 1) = llroundf(v193) << v64;
            v70 += 4;
          }
          result += 4;
          v69 += 4;
          v52 += 4;
          v71 += 4;
          v68 += 2;
        }
        while (v10 > v68);
      }
      result = &v65[v21];
      v62 += v22;
      v52 = &v67[v25];
      v53 = &v66[v26];
      v9 += 2;
    }
    while (v13 > v9);
    if (v195 && v28)
    {
      v194 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v24, v194);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_xf444_GCD(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  BOOL v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  unsigned __int16 *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  size_t v124;
  uint64_t v125;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *(_QWORD *)(result + 112);
    v16 = *(_QWORD **)(result + 128);
    v17 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v7);
    v18 = *(_QWORD *)(result + 152);
    v20 = *(_QWORD **)(result + 56);
    v19 = *(uint64_t **)(result + 64);
    v21 = *(uint64_t **)(result + 136);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v125 = v20[2];
    v25 = (char *)(v125 + v24 * v13 + 2 * v12);
    v26 = *v21;
    v27 = v21[1];
    v28 = v21[2];
    v29 = v16[2];
    v30 = (char *)(v29 + v28 * v17 + 2 * v15);
    *(float *)&v31 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v32 = (float)*(unsigned int *)(v18 + 136);
    v33 = *(float *)&v32 / *(float *)&v31;
    LOWORD(v31) = *(_WORD *)(v18 + 140);
    v34 = (float)v31;
    LOWORD(v32) = *(_WORD *)(v18 + 142);
    v35 = (float)v32;
    v36 = v33 * *(float *)v18;
    v37 = v33 * *(float *)(v18 + 8);
    v38 = v33 * *(float *)(v18 + 16);
    v39 = v33 * *(float *)(v18 + 20);
    v40 = *(float *)(v18 + 28);
    v41 = v33 * v40;
    LOWORD(v40) = *(_WORD *)(v18 + 144);
    v42 = (float)LODWORD(v40);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    v43 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    v44 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    v45 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v46 = (float)v5;
    v47 = *(float *)(v18 + 36);
    v48 = *(float *)(v18 + 40);
    v49 = *(float *)(v18 + 44);
    v50 = *(float *)(v18 + 48);
    v51 = *(float *)(v18 + 52);
    v52 = *(float *)(v18 + 56);
    v53 = *(float *)(v18 + 60);
    v54 = *(float *)(v18 + 64);
    v55 = *(float *)(v18 + 68);
    v56 = v16[1];
    v57 = (char *)(*v16 + v26 * v17 + 2 * v15);
    if (v56)
      v58 = (char *)(v56 + v27 * v17 + 2 * v15);
    else
      v58 = 0;
    v59 = v20[1];
    v60 = (char *)(*v20 + v22 * v13 + 2 * v12);
    v61 = *(unsigned __int8 *)(v18 + 132);
    v62 = v61 >= 0x11;
    v63 = 16 - v61;
    if (v62)
      v64 = 0;
    else
      v64 = v63;
    LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
    if (result >= 0x11)
      LOBYTE(result) = 0;
    else
      LOBYTE(result) = 16 - result;
    if (v13 >= 0)
      v65 = v13;
    else
      v65 = v13 + 1;
    v66 = v59 + v23 * (v65 >> 1) + 2 * v12;
    result = result;
    v67 = v64;
    do
    {
      v68 = &v60[v22];
      v69 = &v58[v27];
      v70 = &v57[v26];
      if (v11)
      {
        v71 = 0;
        v72 = &v60[v22];
        v73 = &v57[v26];
        v74 = &v58[v27];
        do
        {
          v75 = (unsigned __int16 *)(v66 + 2 * v71);
          v76 = (float)(*v75 >> result) - v35;
          v77 = (float)(v75[1] >> result) - v35;
          v78 = v37 * v77;
          v79 = (float)(v39 * v77) + (float)(v76 * v38);
          v80 = v41 * v76;
          v81 = v36 * (float)((float)(*(unsigned __int16 *)v60 >> result) - v34);
          v82 = v78 + v81;
          v83 = v81 + v79;
          v84 = v80 + v81;
          v85 = (float)((float)((float)(v48 * v83) + (float)(v47 * v82)) + (float)(v49 * v84)) + v42;
          v86 = v44;
          if (v85 <= v44)
          {
            v86 = (float)((float)((float)(v48 * v83) + (float)(v47 * v82)) + (float)(v49 * v84)) + v42;
            if (v85 < v42)
              v86 = v42;
          }
          v87 = *((unsigned __int16 *)v60 + 1);
          v88 = *(unsigned __int16 *)v72;
          v89 = *((unsigned __int16 *)v72 + 1);
          *(_WORD *)v57 = llroundf(v86) << v67;
          if (v58)
          {
            v90 = (float)((float)(v43 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
            v91 = v46;
            if (v90 <= v46)
            {
              v91 = (float)((float)(v43 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
              if (v90 < v45)
                v91 = v45;
            }
            v92 = (float)((float)(v43 + (float)(v82 * v53)) + (float)(v83 * v54)) + (float)(v84 * v55);
            *(_WORD *)v58 = llroundf(v91) << v67;
            v93 = v46;
            if (v92 <= v46)
            {
              if (v92 < v45)
                v93 = v45;
              else
                v93 = v92;
            }
            *((_WORD *)v58 + 1) = llroundf(v93) << v67;
            v58 += 4;
          }
          v94 = v36 * (float)((float)(int)(v87 >> result) - v34);
          v95 = v78 + v94;
          v96 = v79 + v94;
          v97 = v80 + v94;
          v98 = (float)((float)((float)(v48 * v96) + (float)(v47 * v95)) + (float)(v49 * v97)) + v42;
          v99 = v44;
          if (v98 <= v44)
          {
            v99 = (float)((float)((float)(v48 * v96) + (float)(v47 * v95)) + (float)(v49 * v97)) + v42;
            if (v98 < v42)
              v99 = v42;
          }
          *((_WORD *)v57 + 1) = llroundf(v99) << v67;
          if (v58)
          {
            v100 = (float)((float)(v43 + (float)(v95 * v50)) + (float)(v96 * v51)) + (float)(v97 * v52);
            v101 = v46;
            if (v100 <= v46)
            {
              v101 = (float)((float)(v43 + (float)(v95 * v50)) + (float)(v96 * v51)) + (float)(v97 * v52);
              if (v100 < v45)
                v101 = v45;
            }
            v102 = (float)((float)(v43 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
            *(_WORD *)v58 = llroundf(v101) << v67;
            v103 = v46;
            if (v102 <= v46)
            {
              if (v102 < v45)
                v103 = v45;
              else
                v103 = v102;
            }
            *((_WORD *)v58 + 1) = llroundf(v103) << v67;
            v58 += 4;
          }
          v104 = v36 * (float)((float)(int)(v88 >> result) - v34);
          v105 = v78 + v104;
          v106 = v79 + v104;
          v107 = v80 + v104;
          v108 = (float)((float)((float)(v48 * v106) + (float)(v47 * v105)) + (float)(v49 * v107)) + v42;
          v109 = v44;
          if (v108 <= v44)
          {
            v109 = (float)((float)((float)(v48 * v106) + (float)(v47 * v105)) + (float)(v49 * v107)) + v42;
            if (v108 < v42)
              v109 = v42;
          }
          *(_WORD *)v73 = llroundf(v109) << v67;
          if (v74)
          {
            v110 = (float)((float)(v43 + (float)(v105 * v50)) + (float)(v106 * v51)) + (float)(v107 * v52);
            v111 = v46;
            if (v110 <= v46)
            {
              v111 = (float)((float)(v43 + (float)(v105 * v50)) + (float)(v106 * v51)) + (float)(v107 * v52);
              if (v110 < v45)
                v111 = v45;
            }
            v112 = (float)((float)(v43 + (float)(v105 * v53)) + (float)(v106 * v54)) + (float)(v107 * v55);
            *(_WORD *)v74 = llroundf(v111) << v67;
            v113 = v46;
            if (v112 <= v46)
            {
              if (v112 < v45)
                v113 = v45;
              else
                v113 = v112;
            }
            *((_WORD *)v74 + 1) = llroundf(v113) << v67;
            v74 += 4;
          }
          v114 = v36 * (float)((float)(int)(v89 >> result) - v34);
          v115 = v78 + v114;
          v116 = v79 + v114;
          v117 = v80 + v114;
          v118 = (float)((float)((float)(v48 * v116) + (float)(v47 * v115)) + (float)(v49 * v117)) + v42;
          v119 = v44;
          if (v118 <= v44)
          {
            v119 = (float)((float)((float)(v48 * v116) + (float)(v47 * v115)) + (float)(v49 * v117)) + v42;
            if (v118 < v42)
              v119 = v42;
          }
          *((_WORD *)v73 + 1) = llroundf(v119) << v67;
          if (v74)
          {
            v120 = (float)((float)(v43 + (float)(v115 * v50)) + (float)(v116 * v51)) + (float)(v117 * v52);
            v121 = v46;
            if (v120 <= v46)
            {
              v121 = (float)((float)(v43 + (float)(v115 * v50)) + (float)(v116 * v51)) + (float)(v117 * v52);
              if (v120 < v45)
                v121 = v45;
            }
            v122 = (float)((float)(v43 + (float)(v115 * v53)) + (float)(v116 * v54)) + (float)(v117 * v55);
            *(_WORD *)v74 = llroundf(v121) << v67;
            v123 = v46;
            if (v122 <= v46)
            {
              v123 = v122;
              if (v122 < v45)
                v123 = v45;
            }
            *((_WORD *)v74 + 1) = llroundf(v123) << v67;
            v74 += 4;
          }
          v60 += 4;
          v72 += 4;
          v57 += 4;
          v73 += 4;
          v71 += 2;
        }
        while (v11 > v71);
      }
      v60 = &v68[v22];
      v66 += v23;
      v57 = &v70[v26];
      v58 = &v69[v27];
      v10 += 2;
    }
    while (v14 > v10);
    if (v125 && v29)
    {
      v124 = 2 * v11;
      do
      {
        result = (unint64_t)memcpy(v30, v25, v124);
        v25 += v24;
        v30 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v29)
    {
      do
      {
        if (v11)
          result = (unint64_t)memset(v30, 255, 2 * v11);
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unint64_t v50;
  char v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int16 *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v101;
  float v102;
  float v103;
  float v108;
  float v109;
  float v114;
  float v115;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v139;
  float v140;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v166;
  uint64_t v173;
  uint64_t v186;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v204 = v20 * *(float *)(v13 + 16);
    v205 = v20 * *(float *)(v13 + 8);
    v202 = v20 * *(float *)(v13 + 28);
    v203 = v20 * *(float *)(v13 + 20);
    v200 = *(float *)(v13 + 76);
    v201 = *(float *)(v13 + 72);
    v198 = *(float *)(v13 + 84);
    v199 = *(float *)(v13 + 80);
    v196 = *(float *)(v13 + 92);
    v197 = *(float *)(v13 + 88);
    v194 = *(float *)(v13 + 100);
    v195 = *(float *)(v13 + 96);
    v24 = v13 + 164;
    v25 = v13 + 16548;
    v26 = v13 + 32932;
    v27 = *(float *)(v13 + 108);
    v193 = *(float *)(v13 + 104);
    v28 = *(float *)(v13 + 112);
    v29 = *(float *)(v13 + 116);
    v30 = *(float *)(v13 + 120);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v34 = *(_QWORD *)(result + 36);
    v35 = v14[1];
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    v36 = v14[2];
    v37 = v36 + v18 * v11 + 2 * v34;
    if (!v36)
      v37 = 0;
    v38 = *v31 + v33 * v19 + 4 * v32;
    v39 = *(unsigned __int8 *)(v13 + 124);
    if (v39 >= 0x11)
      v40 = 0;
    else
      v40 = 16 - v39;
    v41 = *(unsigned __int8 *)(v13 + 161);
    v42 = *(unsigned __int8 *)(v13 + 160);
    v43 = v35 + v17 * (v11 / 2);
    v44 = *(unsigned __int8 *)(v13 + 159);
    v45 = *(unsigned __int8 *)(v13 + 158);
    v46 = v43 + 2 * v34;
    v47 = v40;
    v191 = v23;
    v192 = (float)LODWORD(a5);
    do
    {
      v48 = v38 + v19;
      v49 = &result[v16];
      if (v10)
      {
        v50 = 0;
        if (v37)
          v51 = 0;
        else
          v51 = -1;
        v52 = &result[v16];
        v53 = v38 + v19;
        do
        {
          v54 = (unsigned __int16 *)(v46 + 2 * v50);
          v55 = (float)(v54[1] >> v47) - v22;
          v56 = v205 * v55;
          v57 = v23 * (float)((float)(*(unsigned __int16 *)result >> v47) - v21);
          v58 = (float)(v205 * v55) + v57;
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)(v205 * v55) + v57;
            if (v58 < 0.0)
              v59 = 0.0;
          }
          v60 = (float)(*v54 >> v47) - v22;
          v61 = (float)(v203 * v55) + (float)(v60 * v204);
          v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0)
              v62 = 0.0;
          }
          v63 = v202 * v60;
          v64 = (float)(v202 * v60) + v57;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v47) - v21);
          v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            v68 = v61 + v66;
            if ((float)(v61 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = 8191.0;
          if ((float)(v63 + v66) <= 8191.0)
          {
            v69 = v63 + v66;
            if ((float)(v63 + v66) < 0.0)
              v69 = 0.0;
          }
          v70 = v23 * (float)((float)(*(unsigned __int16 *)v52 >> v47) - v21);
          v71 = 8191.0;
          if ((float)(v56 + v70) <= 8191.0)
          {
            v71 = v56 + v70;
            if ((float)(v56 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v61 + v70) <= 8191.0)
          {
            v72 = v61 + v70;
            if ((float)(v61 + v70) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v63 + v70) <= 8191.0)
          {
            v73 = v63 + v70;
            if ((float)(v63 + v70) < 0.0)
              v73 = 0.0;
          }
          v74 = v23 * (float)((float)(*((unsigned __int16 *)v52 + 1) >> v47) - v21);
          v75 = v56 + v74;
          v76 = (float)(v56 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = v61 + v74;
          v76 = (float)(v61 + v74) <= 8191.0;
          v79 = 8191.0;
          if (v76)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v63 + v74;
          v76 = (float)(v63 + v74) <= 8191.0;
          v81 = 8191.0;
          if (v76)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v101 = fmaxf(_S30, fmaxf(_S31, _S8));
          v102 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v101);
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8))
                 + (float)(v30 * v101);
            if (v102 < 0.0)
              v103 = 0.0;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v103));
          v108 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v109));
          v114 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v115));
          v120 = v28;
          v121 = v27;
          v122 = v29;
          v123 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm { FCVT            S1, H13 }
          v126 = _S30 * _S1;
          v127 = _S31 * _S1;
          v128 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          v130 = _S4 * _S7;
          v131 = _S5 * _S7;
          v132 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          v134 = _S14 * _S8;
          v135 = _S15 * _S8;
          v136 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v124));
          __asm { FCVT            S3, H3 }
          v139 = _S2 * _S3;
          v140 = _S10 * _S3;
          _S3 = _S11 * _S3;
          v142 = (float)((float)(v200 * v127) + (float)(v126 * v201)) + (float)(v128 * v199);
          v143 = (float)((float)(v197 * v127) + (float)(v126 * v198)) + (float)(v128 * v196);
          v144 = (float)((float)(v194 * v127) + (float)(v126 * v195)) + (float)(v128 * v193);
          v145 = (float)((float)(v200 * v131) + (float)(v130 * v201)) + (float)(v132 * v199);
          v146 = (float)((float)(v197 * v131) + (float)(v130 * v198)) + (float)(v132 * v196);
          v147 = (float)((float)(v194 * v131) + (float)(v130 * v195)) + (float)(v132 * v193);
          v148 = (float)((float)(v200 * v135) + (float)(v134 * v201)) + (float)(v136 * v199);
          v149 = (float)((float)(v197 * v135) + (float)(v134 * v198)) + (float)(v136 * v196);
          v150 = (float)((float)(v194 * v135) + (float)(v134 * v195)) + (float)(v136 * v193);
          v151 = (float)((float)(v200 * v140) + (float)(v139 * v201)) + (float)(_S3 * v199);
          v152 = (float)((float)(v197 * v140) + (float)(v139 * v198)) + (float)(_S3 * v196);
          v153 = (float)((float)(v194 * v140) + (float)(v139 * v195)) + (float)(_S3 * v193);
          LOWORD(_S3) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S2, H3 }
          v166 = 255.0;
          if (_S2 <= 255.0)
          {
            v166 = _S2;
            if (_S2 < 0.0)
              v166 = 0.0;
          }
          *(_BYTE *)(v38 + v45) = llroundf(v166);
          __asm { FCVT            S2, H5 }
          _S1 = 255.0;
          v23 = v191;
          v27 = v121;
          v28 = v120;
          v29 = v122;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H5 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v38 + v44) = llroundf(_S1);
          __asm { FCVT            S2, H4 }
          _S1 = 255.0;
          v22 = v192;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H4 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v38 + v42) = llroundf(_S1);
          *(_BYTE *)(v38 + v41) = v51;
          __asm { FCVT            S2, H14 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H14 }
            else
              _S1 = 0.0;
          }
          v173 = v38 + 4;
          *(_BYTE *)(v38 + 4 + v45) = llroundf(_S1);
          __asm { FCVT            S2, H13 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H13 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v173 + v44) = llroundf(_S1);
          __asm { FCVT            S2, H12 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H12 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v173 + v42) = llroundf(_S1);
          *(_BYTE *)(v173 + v41) = v51;
          __asm { FCVT            S2, H11 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H11 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v53 + v45) = llroundf(_S1);
          __asm { FCVT            S2, H10 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H10 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v53 + v44) = llroundf(_S1);
          __asm { FCVT            S2, H9 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H9 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v53 + v42) = llroundf(_S1);
          *(_BYTE *)(v53 + v41) = v51;
          __asm { FCVT            S2, H8 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H8 }
            else
              _S1 = 0.0;
          }
          v186 = v53 + 4;
          *(_BYTE *)(v53 + 4 + v45) = llroundf(_S1);
          __asm { FCVT            S2, H31 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H31 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v186 + v44) = llroundf(_S1);
          __asm { FCVT            S2, H30 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H30 }
            else
              _S1 = 0.0;
          }
          result += 4;
          v52 += 4;
          *(_BYTE *)(v186 + v42) = llroundf(_S1);
          v38 += 8;
          *(_BYTE *)(v186 + v41) = v51;
          v53 += 8;
          v50 += 2;
        }
        while (v10 > v50);
      }
      result = &v49[v16];
      v46 += v17;
      v37 += v18 + v18;
      v38 = v48 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v143;
  uint64_t v150;
  uint64_t v163;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v172 = v21 * *(float *)(v13 + 8);
    v171 = v21 * *(float *)(v13 + 16);
    v169 = v21 * *(float *)(v13 + 28);
    v170 = v21 * *(float *)(v13 + 20);
    v25 = *(float *)(v13 + 76);
    v168 = *(float *)(v13 + 72);
    v26 = *(float *)(v13 + 80);
    v27 = *(float *)(v13 + 84);
    v28 = *(float *)(v13 + 88);
    v29 = *(float *)(v13 + 92);
    v30 = *(float *)(v13 + 96);
    v31 = *(float *)(v13 + 100);
    v32 = *(float *)(v13 + 104);
    v33 = v13 + 164;
    v34 = v13 + 16548;
    v35 = (_QWORD *)*((_QWORD *)result + 16);
    v36 = *((_QWORD *)result + 14);
    v37 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v38 = *(_QWORD *)(result + 36);
    v39 = v14[1];
    v40 = (char *)(*v14 + v16 * v11 + 2 * v38);
    v41 = v14[2];
    v42 = v41 + v18 * v11 + 2 * v38;
    if (!v41)
      v42 = 0;
    v43 = *v35 + v37 * v19 + 4 * v36;
    v44 = *(unsigned __int8 *)(v13 + 124);
    if (v44 >= 0x11)
      v45 = 0;
    else
      v45 = 16 - v44;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    v46 = *(unsigned __int8 *)(v13 + 160);
    v47 = v39 + v17 * (v11 / 2);
    v48 = *(unsigned __int8 *)(v13 + 159);
    v49 = *(unsigned __int8 *)(v13 + 158);
    v50 = v47 + 2 * v38;
    v51 = v45;
    do
    {
      v52 = v43 + v19;
      v53 = &v40[v16];
      if (v10)
      {
        v54 = 0;
        if (v42)
          v55 = 0;
        else
          v55 = -1;
        v56 = &v40[v16];
        v57 = v43 + v19;
        do
        {
          v58 = (unsigned __int16 *)(v50 + 2 * v54);
          v59 = (float)(v58[1] >> v51) - v23;
          v60 = v172 * v59;
          v61 = v24 * (float)((float)(*(unsigned __int16 *)v40 >> v51) - v22);
          v62 = (float)(v172 * v59) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v172 * v59) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = (float)(*v58 >> v51) - v23;
          v65 = (float)(v170 * v59) + (float)(v64 * v171);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v169 * v64;
          v68 = (float)(v169 * v64) + v61;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = v24 * (float)((float)(*((unsigned __int16 *)v40 + 1) >> v51) - v22);
          v71 = 8191.0;
          if ((float)(v60 + v70) <= 8191.0)
          {
            v71 = v60 + v70;
            if ((float)(v60 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v65 + v70) <= 8191.0)
          {
            v72 = v65 + v70;
            if ((float)(v65 + v70) < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v70;
          v74 = (float)(v67 + v70) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v24 * (float)((float)(*(unsigned __int16 *)v56 >> v51) - v22);
          v77 = 8191.0;
          if ((float)(v60 + v76) <= 8191.0)
          {
            v77 = v60 + v76;
            if ((float)(v60 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v65 + v76) <= 8191.0)
          {
            v78 = v65 + v76;
            if ((float)(v65 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v67 + v76;
          v74 = (float)(v67 + v76) <= 8191.0;
          v80 = 8191.0;
          if (v74)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v24;
          v82 = v24 * (float)((float)(*((unsigned __int16 *)v56 + 1) >> v51) - v22);
          v83 = v60 + v82;
          v74 = (float)(v60 + v82) <= 8191.0;
          v84 = 8191.0;
          if (v74)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v22;
          v86 = v65 + v82;
          v74 = (float)(v65 + v82) <= 8191.0;
          v87 = 8191.0;
          if (v74)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v23;
          v89 = v67 + v82;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H26 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H9 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H29 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H31 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          _S14 = (float)((float)(v25 * _S27) + (float)(_S26 * v168)) + (float)(_S28 * v26);
          v120 = (float)((float)(v28 * _S27) + (float)(_S26 * v27)) + (float)(_S28 * v29);
          v121 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          v122 = (float)((float)(v25 * _S9) + (float)(_S30 * v168)) + (float)(_S10 * v26);
          v123 = (float)((float)(v28 * _S9) + (float)(_S30 * v27)) + (float)(_S10 * v29);
          v124 = (float)((float)(v31 * _S9) + (float)(_S30 * v30)) + (float)(_S10 * v32);
          v125 = (float)((float)(v25 * _S12) + (float)(_S11 * v168)) + (float)(_S13 * v26);
          v126 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S13 * v29);
          v127 = (float)((float)(v31 * _S12) + (float)(_S11 * v30)) + (float)(_S13 * v32);
          v128 = (float)((float)(v25 * _S31) + (float)(_S29 * v168)) + (float)(_S8 * v26);
          v129 = (float)((float)(v28 * _S31) + (float)(_S29 * v27)) + (float)(_S8 * v29);
          v130 = (float)((float)(v31 * _S31) + (float)(_S29 * v30)) + (float)(_S8 * v32);
          LOWORD(_S14) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S14, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          v143 = 255.0;
          if (_S14 <= 255.0)
          {
            v143 = _S14;
            if (_S14 < 0.0)
              v143 = 0.0;
          }
          *(_BYTE *)(v43 + v49) = llroundf(v143);
          __asm { FCVT            S14, H12 }
          _S13 = 255.0;
          v23 = v88;
          v22 = v85;
          v24 = v81;
          if (_S14 <= 255.0)
          {
            if (_S14 >= 0.0)
              __asm { FCVT            S13, H12 }
            else
              _S13 = 0.0;
          }
          *(_BYTE *)(v43 + v48) = llroundf(_S13);
          __asm { FCVT            S13, H11 }
          _S12 = 255.0;
          if (_S13 <= 255.0)
          {
            if (_S13 >= 0.0)
              __asm { FCVT            S12, H11 }
            else
              _S12 = 0.0;
          }
          *(_BYTE *)(v43 + v46) = llroundf(_S12);
          result[v43] = v55;
          __asm { FCVT            S12, H10 }
          _S11 = 255.0;
          if (_S12 <= 255.0)
          {
            if (_S12 >= 0.0)
              __asm { FCVT            S11, H10 }
            else
              _S11 = 0.0;
          }
          v150 = v43 + 4;
          *(_BYTE *)(v43 + 4 + v49) = llroundf(_S11);
          __asm { FCVT            S11, H9 }
          _S10 = 255.0;
          if (_S11 <= 255.0)
          {
            if (_S11 >= 0.0)
              __asm { FCVT            S10, H9 }
            else
              _S10 = 0.0;
          }
          *(_BYTE *)(v150 + v48) = llroundf(_S10);
          __asm { FCVT            S10, H8 }
          _S9 = 255.0;
          if (_S10 <= 255.0)
          {
            if (_S10 >= 0.0)
              __asm { FCVT            S9, H8 }
            else
              _S9 = 0.0;
          }
          *(_BYTE *)(v150 + v46) = llroundf(_S9);
          result[v150] = v55;
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v57 + v49) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v57 + v48) = llroundf(_S31);
          __asm { FCVT            S31, H29 }
          _S30 = 255.0;
          if (_S31 <= 255.0)
          {
            if (_S31 >= 0.0)
              __asm { FCVT            S30, H29 }
            else
              _S30 = 0.0;
          }
          *(_BYTE *)(v57 + v46) = llroundf(_S30);
          result[v57] = v55;
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          v163 = v57 + 4;
          *(_BYTE *)(v57 + 4 + v49) = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          *(_BYTE *)(v163 + v48) = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          v40 += 4;
          v56 += 4;
          *(_BYTE *)(v163 + v46) = llroundf(_S27);
          v43 += 8;
          result[v163] = v55;
          v57 += 8;
          v54 += 2;
        }
        while (v10 > v54);
      }
      v40 = &v53[v16];
      v50 += v17;
      v42 += v18 + v18;
      v43 = v52 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;

  v2 = *(_QWORD *)(result + 28);
  v3 = 2 * *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = *(_QWORD *)(result + 44) + 2 * v4;
    v9 = 2 * v5 - 2 * v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = (_QWORD *)*((_QWORD *)result + 16);
    v28 = *((_QWORD *)result + 14);
    v29 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v3);
    v30 = *(_QWORD *)(result + 36);
    v31 = v12[1];
    v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    v33 = v12[2];
    result = (unsigned __int8 *)(v33 + v15 * v8 + 2 * v30);
    if (!v33)
      result = 0;
    v34 = *v27 + v29 * v16 + 4 * v28;
    v35 = *(unsigned __int8 *)(v10 + 124);
    if (v35 >= 0x11)
      v36 = 0;
    else
      v36 = 16 - v35;
    v37 = *(unsigned __int8 *)(v10 + 161);
    v38 = *(unsigned __int8 *)(v10 + 160);
    if (v8 >= 0)
      v39 = v8;
    else
      v39 = v8 + 1;
    v40 = v31 + v14 * (v39 >> 1);
    v41 = *(unsigned __int8 *)(v10 + 159);
    v42 = *(unsigned __int8 *)(v10 + 158);
    v43 = v40 + 2 * v30;
    v44 = v36;
    do
    {
      v45 = v34 + v16;
      v46 = &v32[v13];
      if (v7)
      {
        v47 = 0;
        if (result)
          v48 = 0;
        else
          v48 = -1;
        v49 = &v32[v13];
        v50 = v34 + v16;
        do
        {
          v51 = (unsigned __int16 *)(v43 + 2 * v47);
          v52 = (float)(v51[1] >> v44) - v21;
          v53 = v23 * v52;
          v54 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> v44) - v20);
          v55 = (float)(v23 * v52) + v54;
          v56 = 255.0;
          if (v55 <= 255.0)
          {
            v56 = (float)(v23 * v52) + v54;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          v57 = (float)(*v51 >> v44) - v21;
          v58 = (float)(v25 * v52) + (float)(v57 * v24);
          v59 = *((unsigned __int16 *)v32 + 1);
          v60 = *(unsigned __int16 *)v49;
          v61 = *((unsigned __int16 *)v49 + 1);
          *(_BYTE *)(v34 + v42) = llroundf(v56);
          v62 = 255.0;
          if ((float)(v54 + v58) <= 255.0)
          {
            v62 = v54 + v58;
            if ((float)(v54 + v58) < 0.0)
              v62 = 0.0;
          }
          v63 = v26 * v57;
          v64 = v63 + v54;
          *(_BYTE *)(v34 + v41) = llroundf(v62);
          v65 = 255.0;
          if (v64 <= 255.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = v22 * (float)((float)(int)(v59 >> v44) - v20);
          *(_BYTE *)(v34 + v38) = llroundf(v65);
          *(_BYTE *)(v34 + v37) = v48;
          v67 = 255.0;
          if ((float)(v53 + v66) <= 255.0)
          {
            v67 = v53 + v66;
            if ((float)(v53 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v34 + 4;
          *(_BYTE *)(v34 + 4 + v42) = llroundf(v67);
          v69 = 255.0;
          if ((float)(v58 + v66) <= 255.0)
          {
            v69 = v58 + v66;
            if ((float)(v58 + v66) < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          *(_BYTE *)(v68 + v41) = llroundf(v69);
          v71 = 255.0;
          if (v70 <= 255.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v22 * (float)((float)(int)(v60 >> v44) - v20);
          *(_BYTE *)(v68 + v38) = llroundf(v71);
          *(_BYTE *)(v68 + v37) = v48;
          v73 = 255.0;
          if ((float)(v53 + v72) <= 255.0)
          {
            v73 = v53 + v72;
            if ((float)(v53 + v72) < 0.0)
              v73 = 0.0;
          }
          *(_BYTE *)(v50 + v42) = llroundf(v73);
          v74 = 255.0;
          if ((float)(v58 + v72) <= 255.0)
          {
            v74 = v58 + v72;
            if ((float)(v58 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v63 + v72;
          *(_BYTE *)(v50 + v41) = llroundf(v74);
          v76 = 255.0;
          if (v75 <= 255.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v22 * (float)((float)(int)(v61 >> v44) - v20);
          *(_BYTE *)(v50 + v38) = llroundf(v76);
          v78 = v53 + v77;
          *(_BYTE *)(v50 + v37) = v48;
          v79 = 255.0;
          if (v78 <= 255.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v58 + v77;
          v81 = v50 + 4;
          *(_BYTE *)(v50 + 4 + v42) = llroundf(v79);
          v82 = 255.0;
          if (v80 <= 255.0)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          *(_BYTE *)(v81 + v41) = llroundf(v82);
          v83 = 255.0;
          if ((float)(v63 + v77) <= 255.0)
          {
            v83 = v63 + v77;
            if ((float)(v63 + v77) < 0.0)
              v83 = 0.0;
          }
          v32 += 4;
          v49 += 4;
          *(_BYTE *)(v81 + v38) = llroundf(v83);
          v34 += 8;
          *(_BYTE *)(v81 + v37) = v48;
          v50 += 8;
          v47 += 2;
        }
        while (v7 > v47);
      }
      v32 = &v46[v13];
      v43 += v14;
      result += v15 + v15;
      v34 = v45 + v16;
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  float v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int *v51;
  unsigned __int16 *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v100;
  float v101;
  float v106;
  float v107;
  float v112;
  float v113;
  float v118;
  float v119;
  float v120;
  float v122;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v151;
  float v162;
  float v163;
  float v165;
  float v166;
  float v168;
  float v169;
  float v171;
  float v173;
  float v174;
  float v176;
  float v177;
  float v179;
  float v181;
  float v182;
  float v184;
  float v185;
  float v187;
  float v189;
  float v190;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 44) + 2 * v6;
    v11 = 2 * v7 - 2 * v6;
    v12 = *((_QWORD *)result + 19);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a4) = *(_WORD *)(v12 + 140);
    v20 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 142);
    v21 = (float)LODWORD(a4);
    v22 = v19 * *(float *)v12;
    v207 = v19 * *(float *)(v12 + 16);
    v208 = v19 * *(float *)(v12 + 8);
    v23 = v19 * *(float *)(v12 + 20);
    *(float *)&v24 = v19 * *(float *)(v12 + 28);
    v205 = *(float *)&v24;
    v206 = v23;
    LOWORD(v24) = *(_WORD *)(v12 + 144);
    v25 = (float)v24;
    v203 = *(float *)(v12 + 76);
    v204 = *(float *)(v12 + 72);
    v201 = *(float *)(v12 + 84);
    v202 = *(float *)(v12 + 80);
    v199 = *(float *)(v12 + 92);
    v200 = *(float *)(v12 + 88);
    v197 = *(float *)(v12 + 100);
    v198 = *(float *)(v12 + 96);
    v26 = v12 + 164;
    v27 = v12 + 16548;
    v28 = v12 + 32932;
    v29 = *(float *)(v12 + 108);
    v196 = *(float *)(v12 + 104);
    v30 = *(float *)(v12 + 112);
    v31 = *(float *)(v12 + 116);
    v32 = *(float *)(v12 + 120);
    v33 = *((_QWORD *)result + 14);
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    v36 = *(_QWORD *)(result + 36);
    v37 = v13[1];
    result = (unsigned __int8 *)(*v13 + v15 * v10 + 2 * v36);
    v38 = v13[2];
    _ZF = v38 == 0;
    v40 = v38 + v17 * v10 + 2 * v36;
    if (_ZF)
      v40 = 0;
    v41 = (unsigned int *)(*v34 + v35 * v18 + 16 * v33);
    v42 = *(unsigned __int8 *)(v12 + 124);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    v44 = v37 + v16 * (v10 / 2) + 2 * v36;
    v209 = (float)LODWORD(a4);
    v194 = v20;
    v195 = v22;
    v193 = v30;
    do
    {
      v45 = (char *)v41 + v18;
      v46 = &result[v15];
      if (v9)
      {
        v47 = 0;
        v48 = 3.0;
        if (v40)
          v48 = 0.0;
        v49 = llroundf(v48) << 30;
        v50 = &result[v15];
        v51 = (unsigned int *)((char *)v41 + v18);
        do
        {
          v52 = (unsigned __int16 *)(v44 + 2 * v47);
          v53 = (float)(v52[1] >> v43) - v21;
          v54 = v208 * v53;
          v55 = v22 * (float)((float)(*(unsigned __int16 *)result >> v43) - v20);
          v56 = (float)(v208 * v53) + v55;
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = (float)(v208 * v53) + v55;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = (float)(*v52 >> v43) - v21;
          v59 = (float)(v206 * v53) + (float)(v58 * v207);
          v60 = 8191.0;
          if ((float)(v55 + v59) <= 8191.0)
          {
            v60 = v55 + v59;
            if ((float)(v55 + v59) < 0.0)
              v60 = 0.0;
          }
          v61 = v205 * v58;
          v62 = (float)(v205 * v58) + v55;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = v62;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = v22 * (float)((float)(*((unsigned __int16 *)result + 1) >> v43) - v20);
          v65 = 8191.0;
          if ((float)(v54 + v64) <= 8191.0)
          {
            v65 = v54 + v64;
            if ((float)(v54 + v64) < 0.0)
              v65 = 0.0;
          }
          v66 = 8191.0;
          if ((float)(v59 + v64) <= 8191.0)
          {
            v66 = v59 + v64;
            if ((float)(v59 + v64) < 0.0)
              v66 = 0.0;
          }
          v67 = v61 + v64;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v22 * (float)((float)(*(unsigned __int16 *)v50 >> v43) - v20);
          v70 = 8191.0;
          if ((float)(v54 + v69) <= 8191.0)
          {
            v70 = v54 + v69;
            if ((float)(v54 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = 8191.0;
          if ((float)(v59 + v69) <= 8191.0)
          {
            v71 = v59 + v69;
            if ((float)(v59 + v69) < 0.0)
              v71 = 0.0;
          }
          v72 = v61 + v69;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v22 * (float)((float)(*((unsigned __int16 *)v50 + 1) >> v43) - v20);
          v75 = v54 + v74;
          v76 = (float)(v54 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = v59 + v74;
          v76 = (float)(v59 + v74) <= 8191.0;
          v79 = 8191.0;
          if (v76)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v61 + v74;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          _H1 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H0 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S10, H0 }
          _H1 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v100 = (float)((float)((float)(v30 * _S18) + (float)(v29 * _S8)) + (float)(v31 * _S10))
               + (float)(v32 * fmaxf(_S8, fmaxf(_S18, _S10)));
          v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          __asm
          {
            FCVT            S4, H1
            FCVT            S5, H3
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v27 + 2 * llroundf(v101));
          v106 = (float)((float)((float)(v30 * _S5) + (float)(v29 * _S4)) + (float)(v31 * _S6))
               + (float)(v32 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            v107 = v106;
            if (v106 < 0.0)
              v107 = 0.0;
          }
          __asm
          {
            FCVT            S2, H14
            FCVT            S15, H15
            FCVT            S14, H7
          }
          _H1 = *(_WORD *)(v27 + 2 * llroundf(v107));
          v112 = (float)((float)((float)(v30 * _S15) + (float)(v29 * _S2)) + (float)(v31 * _S14))
               + (float)(v32 * fmaxf(_S2, fmaxf(_S15, _S14)));
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          __asm
          {
            FCVT            S3, H31
            FCVT            S7, H11
            FCVT            S17, H12
          }
          _H31 = *(_WORD *)(v27 + 2 * llroundf(v113));
          v118 = v29;
          v119 = (float)((float)((float)(v30 * _S7) + (float)(v29 * _S3)) + (float)(v31 * _S17))
               + (float)(v32 * fmaxf(_S3, fmaxf(_S7, _S17)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm { FCVT            S0, H13 }
          v122 = _S8 * _S0;
          v123 = _S18 * _S0;
          v124 = _S10 * _S0;
          __asm { FCVT            S1, H1 }
          v126 = _S4 * _S1;
          v127 = _S5 * _S1;
          v128 = _S6 * _S1;
          __asm { FCVT            S6, H31 }
          v130 = _S2 * _S6;
          v131 = _S15 * _S6;
          v132 = _S14 * _S6;
          _H10 = *(_WORD *)(v27 + 2 * llroundf(v120));
          __asm { FCVT            S10, H10 }
          v135 = _S3 * _S10;
          v136 = _S7 * _S10;
          v137 = _S17 * _S10;
          v138 = (float)((float)(v203 * v123) + (float)(v122 * v204)) + (float)(v124 * v202);
          v139 = (float)((float)(v200 * v123) + (float)(v122 * v201)) + (float)(v124 * v199);
          _S0 = (float)((float)(v197 * v123) + (float)(v122 * v198)) + (float)(v124 * v196);
          v141 = (float)((float)(v203 * v127) + (float)(v126 * v204)) + (float)(v128 * v202);
          v142 = (float)((float)(v200 * v127) + (float)(v126 * v201)) + (float)(v128 * v199);
          v143 = (float)((float)(v197 * v127) + (float)(v126 * v198)) + (float)(v128 * v196);
          v144 = (float)((float)(v203 * v131) + (float)(v130 * v204)) + (float)(v132 * v202);
          v145 = (float)((float)(v200 * v131) + (float)(v130 * v201)) + (float)(v132 * v199);
          v146 = (float)((float)(v197 * v131) + (float)(v130 * v198)) + (float)(v132 * v196);
          v147 = (float)((float)(v203 * v136) + (float)(v135 * v204)) + (float)(v137 * v202);
          v148 = (float)((float)(v200 * v136) + (float)(v135 * v201)) + (float)(v137 * v199);
          _H5 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          LOWORD(_S0) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v151 = (float)((float)(v197 * v136) + (float)(v135 * v198)) + (float)(v137 * v196);
          __asm { FCVT            S7, H0 }
          _H31 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H0 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          v162 = 1023.0;
          v163 = 1023.0;
          if ((float)(v25 + _S7) <= 1023.0)
          {
            v163 = v25 + _S7;
            if ((float)(v25 + _S7) < 0.0)
              v163 = 0.0;
          }
          __asm { FCVT            S2, H2 }
          v165 = v25 + _S2;
          v76 = (float)(v25 + _S2) <= 1023.0;
          v166 = 1023.0;
          v20 = v194;
          v22 = v195;
          if (v76)
          {
            v166 = v165;
            if (v165 < 0.0)
              v166 = 0.0;
          }
          __asm { FCVT            S3, H5 }
          v168 = v25 + _S3;
          v76 = (float)(v25 + _S3) <= 1023.0;
          v169 = 1023.0;
          v29 = v118;
          v30 = v193;
          if (v76)
          {
            v169 = v168;
            if (v168 < 0.0)
              v169 = 0.0;
          }
          __asm { FCVT            S5, H6 }
          *v41 = (llroundf(v166) << 10) | llroundf(v163) | (llroundf(v169) << 20) | v49;
          v171 = 1023.0;
          if ((float)(v25 + _S5) <= 1023.0)
          {
            v171 = v25 + _S5;
            if ((float)(v25 + _S5) < 0.0)
              v171 = 0.0;
          }
          __asm { FCVT            S2, H4 }
          v173 = v25 + _S2;
          v76 = (float)(v25 + _S2) <= 1023.0;
          v174 = 1023.0;
          if (v76)
          {
            v174 = v173;
            if (v173 < 0.0)
              v174 = 0.0;
          }
          __asm { FCVT            S3, H31 }
          v176 = v25 + _S3;
          v76 = (float)(v25 + _S3) <= 1023.0;
          v177 = 1023.0;
          if (v76)
          {
            v177 = v176;
            if (v176 < 0.0)
              v177 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          v41[1] = (llroundf(v174) << 10) | llroundf(v171) | (llroundf(v177) << 20) | v49;
          v179 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            v179 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0)
              v179 = 0.0;
          }
          __asm { FCVT            S2, H13 }
          v181 = v25 + _S2;
          v76 = (float)(v25 + _S2) <= 1023.0;
          v182 = 1023.0;
          if (v76)
          {
            v182 = v181;
            if (v181 < 0.0)
              v182 = 0.0;
          }
          __asm { FCVT            S3, H11 }
          v184 = v25 + _S3;
          v76 = (float)(v25 + _S3) <= 1023.0;
          v185 = 1023.0;
          if (v76)
          {
            v185 = v184;
            if (v184 < 0.0)
              v185 = 0.0;
          }
          __asm { FCVT            S4, H12 }
          *v51 = (llroundf(v182) << 10) | llroundf(v179) | (llroundf(v185) << 20) | v49;
          v187 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            v187 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0)
              v187 = 0.0;
          }
          __asm { FCVT            S2, H10 }
          v189 = v25 + _S2;
          v76 = (float)(v25 + _S2) <= 1023.0;
          v190 = 1023.0;
          if (v76)
          {
            v190 = v189;
            if (v189 < 0.0)
              v190 = 0.0;
          }
          __asm { FCVT            S0, H0 }
          v192 = v25 + _S0;
          if (v192 <= 1023.0)
          {
            v162 = v192;
            if (v192 < 0.0)
              v162 = 0.0;
          }
          result += 4;
          v50 += 4;
          v41 += 2;
          v51[1] = (llroundf(v190) << 10) | llroundf(v187) | (llroundf(v162) << 20) | v49;
          v51 += 2;
          v47 += 2;
          v21 = v209;
        }
        while (v9 > v47);
      }
      result = &v46[v15];
      v44 += v16;
      v40 += v17 + v17;
      v41 = (unsigned int *)&v45[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int *v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  float v55;
  unsigned int v56;
  char *v57;
  unsigned int *v58;
  unsigned __int16 *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v114;
  float v115;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v127;
  float v138;
  float v139;
  float v140;
  float v142;
  float v144;
  float v146;
  float v148;
  float v149;
  float v151;
  float v152;
  float v154;
  float v155;
  float v157;
  float v158;
  float v160;
  float v161;
  float v163;
  float v164;
  float v166;
  float v167;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v172 = v21 * *(float *)(v13 + 16);
    v173 = v21 * *(float *)(v13 + 8);
    v25 = v21 * *(float *)(v13 + 20);
    *(float *)&v26 = v21 * *(float *)(v13 + 28);
    v170 = *(float *)&v26;
    v171 = v25;
    LOWORD(v26) = *(_WORD *)(v13 + 144);
    v27 = (float)v26;
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = *(float *)(v13 + 104);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v42 = *(_QWORD *)(result + 36);
    v43 = v14[1];
    v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    v45 = v14[2];
    _ZF = v45 == 0;
    result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF)
      result = 0;
    v47 = (unsigned int *)(*v40 + v41 * v19 + 16 * v39);
    v48 = *(unsigned __int8 *)(v13 + 124);
    v49 = 16 - v48;
    if (v48 >= 0x11)
      v49 = 0;
    if (v11 >= 0)
      v50 = v11;
    else
      v50 = v11 + 1;
    v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    do
    {
      v52 = (char *)v47 + v19;
      v53 = &v44[v16];
      if (v10)
      {
        v54 = 0;
        v55 = 3.0;
        if (result)
          v55 = 0.0;
        v56 = llroundf(v55) << 30;
        v57 = &v44[v16];
        v58 = (unsigned int *)((char *)v47 + v19);
        do
        {
          v59 = (unsigned __int16 *)(v51 + 2 * v54);
          v60 = (float)(v59[1] >> v49) - v23;
          v61 = v173 * v60;
          v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v49) - v22);
          v63 = (float)(v173 * v60) + v62;
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)(v173 * v60) + v62;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          v65 = (float)(*v59 >> v49) - v23;
          v66 = (float)(v171 * v60) + (float)(v65 * v172);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v170 * v65;
          v69 = (float)(v170 * v65) + v62;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v49) - v22);
          v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v68 + v71) <= 8191.0)
          {
            v74 = v68 + v71;
            if ((float)(v68 + v71) < 0.0)
              v74 = 0.0;
          }
          v75 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v49) - v22);
          v76 = 8191.0;
          if ((float)(v61 + v75) <= 8191.0)
          {
            v76 = v61 + v75;
            if ((float)(v61 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = 8191.0;
          if ((float)(v66 + v75) <= 8191.0)
          {
            v77 = v66 + v75;
            if ((float)(v66 + v75) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v68 + v75) <= 8191.0)
          {
            v78 = v68 + v75;
            if ((float)(v68 + v75) < 0.0)
              v78 = 0.0;
          }
          v79 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v49) - v22);
          v80 = v61 + v79;
          v81 = (float)(v61 + v79) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = v66 + v79;
          v81 = (float)(v66 + v79) <= 8191.0;
          v84 = 8191.0;
          if (v81)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v68 + v79;
          v81 = (float)(v68 + v79) <= 8191.0;
          v86 = 8191.0;
          if (v81)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H8
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v114 = (float)((float)(v29 * _S27) + (float)(_S4 * v28)) + (float)(_S28 * v30);
          v115 = (float)((float)(v32 * _S27) + (float)(_S4 * v31)) + (float)(_S28 * v33);
          _S4 = (float)((float)(v35 * _S27) + (float)(_S4 * v34)) + (float)(_S28 * v36);
          v117 = (float)((float)(v29 * _S30) + (float)(_S29 * v28)) + (float)(_S8 * v30);
          v118 = (float)((float)(v32 * _S30) + (float)(_S29 * v31)) + (float)(_S8 * v33);
          v119 = (float)((float)(v35 * _S30) + (float)(_S29 * v34)) + (float)(_S8 * v36);
          v120 = (float)((float)(v29 * _S12) + (float)(_S11 * v28)) + (float)(_S13 * v30);
          v121 = (float)((float)(v32 * _S12) + (float)(_S11 * v31)) + (float)(_S13 * v33);
          v122 = (float)((float)(v35 * _S12) + (float)(_S11 * v34)) + (float)(_S13 * v36);
          v123 = (float)((float)(v29 * _S9) + (float)(_S31 * v28)) + (float)(_S10 * v30);
          v124 = (float)((float)(v32 * _S9) + (float)(_S31 * v31)) + (float)(_S10 * v33);
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          v127 = (float)((float)(v35 * _S9) + (float)(_S31 * v34)) + (float)(_S10 * v36);
          __asm { FCVT            S4, H4 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          v138 = v27 + _S4;
          v139 = 1023.0;
          v81 = (float)(v27 + _S4) <= 1023.0;
          v140 = 1023.0;
          if (v81)
          {
            v140 = v138;
            if (v138 < 0.0)
              v140 = 0.0;
          }
          __asm { FCVT            S5, H15 }
          v142 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            v142 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S5, H13 }
          v144 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            v144 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0)
              v144 = 0.0;
          }
          __asm { FCVT            S5, H14 }
          *v47 = (llroundf(v142) << 10) | llroundf(v140) | (llroundf(v144) << 20) | v56;
          v146 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            v146 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0)
              v146 = 0.0;
          }
          __asm { FCVT            S4, H12 }
          v148 = v27 + _S4;
          v149 = 1023.0;
          if (v148 <= 1023.0)
          {
            v149 = v148;
            if (v148 < 0.0)
              v149 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          v151 = v27 + _S4;
          v152 = 1023.0;
          if (v151 <= 1023.0)
          {
            v152 = v151;
            if (v151 < 0.0)
              v152 = 0.0;
          }
          __asm { FCVT            S4, H11 }
          v47[1] = (llroundf(v149) << 10) | llroundf(v146) | (llroundf(v152) << 20) | v56;
          v154 = v27 + _S4;
          v155 = 1023.0;
          if (v154 <= 1023.0)
          {
            v155 = v154;
            if (v154 < 0.0)
              v155 = 0.0;
          }
          __asm { FCVT            S4, H9 }
          v157 = v27 + _S4;
          v158 = 1023.0;
          if (v157 <= 1023.0)
          {
            v158 = v157;
            if (v157 < 0.0)
              v158 = 0.0;
          }
          __asm { FCVT            S4, H31 }
          v160 = v27 + _S4;
          v161 = 1023.0;
          if (v160 <= 1023.0)
          {
            v161 = v160;
            if (v160 < 0.0)
              v161 = 0.0;
          }
          __asm { FCVT            S4, H8 }
          *v58 = (llroundf(v158) << 10) | llroundf(v155) | (llroundf(v161) << 20) | v56;
          v163 = v27 + _S4;
          v164 = 1023.0;
          if (v163 <= 1023.0)
          {
            v164 = v163;
            if (v163 < 0.0)
              v164 = 0.0;
          }
          __asm { FCVT            S4, H30 }
          v166 = v27 + _S4;
          v167 = 1023.0;
          if (v166 <= 1023.0)
          {
            v167 = v166;
            if (v166 < 0.0)
              v167 = 0.0;
          }
          __asm { FCVT            S4, H29 }
          v169 = v27 + _S4;
          if (v169 <= 1023.0)
          {
            v139 = v169;
            if (v169 < 0.0)
              v139 = 0.0;
          }
          v44 += 4;
          v57 += 4;
          v47 += 2;
          v58[1] = (llroundf(v167) << 10) | llroundf(v164) | (llroundf(v139) << 20) | v56;
          v58 += 2;
          v54 += 2;
        }
        while (v10 > v54);
      }
      v44 = &v53[v16];
      v51 += v17;
      result += v18 + v18;
      v47 = (unsigned int *)&v52[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_l10r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  float v45;
  unsigned int v46;
  char *v47;
  unsigned int *v48;
  unsigned __int16 *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;

  v2 = *(_QWORD *)(result + 28);
  v3 = 2 * *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = *(_QWORD *)(result + 44) + 2 * v4;
    v9 = 2 * v5 - 2 * v4;
    v10 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v11 = *(uint64_t **)(result + 64);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **(_QWORD **)(result + 136);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = *(float *)(v10 + 28);
    v27 = v19 * v26;
    LOWORD(v26) = *(_WORD *)(v10 + 144);
    v28 = (float)LODWORD(v26);
    v29 = *(_QWORD *)(result + 112);
    v30 = *(_QWORD **)(result + 128);
    v31 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v3);
    v32 = *(_QWORD *)(result + 36);
    v33 = v12[1];
    v34 = (char *)(*v12 + v13 * v8 + 2 * v32);
    v35 = v12[2];
    v36 = v35 == 0;
    v37 = v35 + v15 * v8 + 2 * v32;
    if (v36)
      v37 = 0;
    v38 = (unsigned int *)(*v30 + v31 * v16 + 16 * v29);
    v39 = *(unsigned __int8 *)(v10 + 124);
    if (v39 >= 0x11)
      v40 = 0;
    else
      v40 = 16 - v39;
    v41 = v33 + v14 * (v8 / 2) + 2 * v32;
    result = v40;
    do
    {
      v42 = (char *)v38 + v16;
      v43 = &v34[v13];
      if (v7)
      {
        v44 = 0;
        if (v37)
          v45 = 0.0;
        else
          v45 = 3.0;
        v46 = llroundf(v45) << 30;
        v47 = &v34[v13];
        v48 = (unsigned int *)((char *)v38 + v16);
        do
        {
          v49 = (unsigned __int16 *)(v41 + 2 * v44);
          v50 = (float)(*v49 >> result) - v21;
          v51 = v27 * v50;
          v52 = v22 * (float)((float)(*(unsigned __int16 *)v34 >> result) - v20);
          v53 = (float)((float)(v27 * v50) + v52) + v28;
          v54 = 1023.0;
          if (v53 <= 1023.0)
          {
            v54 = (float)((float)(v27 * v50) + v52) + v28;
            if (v53 < 0.0)
              v54 = 0.0;
          }
          v55 = (float)(v49[1] >> result) - v21;
          v56 = (float)(v25 * v55) + (float)(v50 * v24);
          v57 = (float)(v52 + v56) + v28;
          v58 = 1023.0;
          if (v57 <= 1023.0)
          {
            v58 = (float)(v52 + v56) + v28;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          v59 = v23 * v55;
          v60 = (float)(v59 + v52) + v28;
          v61 = 1023.0;
          if (v60 <= 1023.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          v62 = v22 * (float)((float)(*((unsigned __int16 *)v34 + 1) >> result) - v20);
          v63 = *(unsigned __int16 *)v47;
          v64 = *((unsigned __int16 *)v47 + 1);
          *v38 = (llroundf(v58) << 10) | llroundf(v54) | (llroundf(v61) << 20) | v46;
          v65 = (float)(v51 + v62) + v28;
          v66 = 1023.0;
          if (v65 <= 1023.0)
          {
            v66 = (float)(v51 + v62) + v28;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = (float)(v56 + v62) + v28;
          v68 = 1023.0;
          if (v67 <= 1023.0)
          {
            v68 = (float)(v56 + v62) + v28;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = (float)(v59 + v62) + v28;
          v70 = 1023.0;
          if (v69 <= 1023.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v22 * (float)((float)(int)(v63 >> result) - v20);
          v38[1] = (llroundf(v68) << 10) | llroundf(v66) | (llroundf(v70) << 20) | v46;
          v72 = (float)(v51 + v71) + v28;
          v73 = 1023.0;
          if (v72 <= 1023.0)
          {
            v73 = (float)(v51 + v71) + v28;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = (float)(v56 + v71) + v28;
          v75 = 1023.0;
          if (v74 <= 1023.0)
          {
            v75 = (float)(v56 + v71) + v28;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = (float)(v59 + v71) + v28;
          v77 = 1023.0;
          if (v76 <= 1023.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v22 * (float)((float)(int)(v64 >> result) - v20);
          *v48 = (llroundf(v75) << 10) | llroundf(v73) | (llroundf(v77) << 20) | v46;
          v79 = (float)(v51 + v78) + v28;
          v80 = 1023.0;
          if (v79 <= 1023.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = (float)(v56 + v78) + v28;
          v82 = 1023.0;
          if (v81 <= 1023.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = (float)(v59 + v78) + v28;
          v84 = 1023.0;
          if (v83 <= 1023.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v34 += 4;
          v47 += 4;
          v38 += 2;
          v48[1] = (llroundf(v82) << 10) | llroundf(v80) | (llroundf(v84) << 20) | v46;
          v48 += 2;
          v44 += 2;
        }
        while (v7 > v44);
      }
      v34 = &v43[v13];
      v41 += v14;
      v37 += v15 + v15;
      v38 = (unsigned int *)&v42[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  __int16 v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int16 *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v95;
  float v96;
  float v97;
  float v102;
  float v103;
  float v108;
  float v109;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v121;
  float v122;
  float v123;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  float v131;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  unsigned int v160;
  float v163;
  float v164;
  float v167;
  float v170;
  float v173;
  float v176;
  float v179;
  float v182;
  float v185;
  float v188;
  float v191;
  float v194;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v210 = v20 * *(float *)(v13 + 16);
    v211 = v20 * *(float *)(v13 + 8);
    v208 = v20 * *(float *)(v13 + 28);
    v209 = v20 * *(float *)(v13 + 20);
    v206 = *(float *)(v13 + 76);
    v207 = *(float *)(v13 + 72);
    v204 = *(float *)(v13 + 84);
    v205 = *(float *)(v13 + 80);
    v202 = *(float *)(v13 + 92);
    v203 = *(float *)(v13 + 88);
    v200 = *(float *)(v13 + 100);
    v201 = *(float *)(v13 + 96);
    v24 = v13 + 164;
    v25 = v13 + 16548;
    v26 = v13 + 32932;
    v27 = *(float *)(v13 + 108);
    v199 = *(float *)(v13 + 104);
    v28 = *(float *)(v13 + 112);
    v29 = *(float *)(v13 + 116);
    v30 = *(float *)(v13 + 120);
    v31 = *((_QWORD *)result + 14);
    v32 = (_QWORD *)*((_QWORD *)result + 16);
    v33 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v34 = *(_QWORD *)(result + 36);
    v35 = v14[1];
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    v36 = v14[2];
    _ZF = v36 == 0;
    v38 = v36 + v18 * v11 + 2 * v34;
    if (_ZF)
      v38 = 0;
    v39 = (char *)(*v32 + v33 * v19 + 8 * v31);
    v40 = *(unsigned __int8 *)(v13 + 124);
    if (v40 >= 0x11)
      v41 = 0;
    else
      v41 = 16 - v40;
    v42 = v35 + v17 * (v11 / 2) + 2 * v34;
    v212 = (float)LODWORD(a5);
    v198 = v21;
    do
    {
      v43 = &v39[v19];
      v44 = &result[v16];
      if (v10)
      {
        v45 = 0;
        if (v38)
          v46 = 0;
        else
          v46 = -1;
        v47 = &result[v16];
        v48 = &v39[v19];
        do
        {
          v49 = (unsigned __int16 *)(v42 + 2 * v45);
          v50 = (float)(v49[1] >> v41) - v22;
          v51 = v211 * v50;
          v52 = v23 * (float)((float)(*(unsigned __int16 *)result >> v41) - v21);
          v53 = (float)(v211 * v50) + v52;
          v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            v54 = (float)(v211 * v50) + v52;
            if (v53 < 0.0)
              v54 = 0.0;
          }
          v55 = (float)(*v49 >> v41) - v22;
          v56 = (float)(v209 * v50) + (float)(v55 * v210);
          v57 = 8191.0;
          if ((float)(v52 + v56) <= 8191.0)
          {
            v57 = v52 + v56;
            if ((float)(v52 + v56) < 0.0)
              v57 = 0.0;
          }
          v58 = v208 * v55;
          v59 = (float)(v208 * v55) + v52;
          v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            v60 = v59;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          v61 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v41) - v21);
          v62 = 8191.0;
          if ((float)(v51 + v61) <= 8191.0)
          {
            v62 = v51 + v61;
            if ((float)(v51 + v61) < 0.0)
              v62 = 0.0;
          }
          v63 = 8191.0;
          if ((float)(v56 + v61) <= 8191.0)
          {
            v63 = v56 + v61;
            if ((float)(v56 + v61) < 0.0)
              v63 = 0.0;
          }
          v64 = 8191.0;
          if ((float)(v58 + v61) <= 8191.0)
          {
            v64 = v58 + v61;
            if ((float)(v58 + v61) < 0.0)
              v64 = 0.0;
          }
          v65 = v23 * (float)((float)(*(unsigned __int16 *)v47 >> v41) - v21);
          v66 = 8191.0;
          if ((float)(v51 + v65) <= 8191.0)
          {
            v66 = v51 + v65;
            if ((float)(v51 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = 8191.0;
          if ((float)(v56 + v65) <= 8191.0)
          {
            v67 = v56 + v65;
            if ((float)(v56 + v65) < 0.0)
              v67 = 0.0;
          }
          v68 = 8191.0;
          if ((float)(v58 + v65) <= 8191.0)
          {
            v68 = v58 + v65;
            if ((float)(v58 + v65) < 0.0)
              v68 = 0.0;
          }
          v69 = v23 * (float)((float)(*((unsigned __int16 *)v47 + 1) >> v41) - v21);
          v70 = v51 + v69;
          v71 = (float)(v51 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v56 + v69;
          v71 = (float)(v56 + v69) <= 8191.0;
          v74 = 8191.0;
          if (v71)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v58 + v69;
          v71 = (float)(v58 + v69) <= 8191.0;
          v76 = 8191.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v54, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v95 = fmaxf(_S30, fmaxf(_S31, _S8));
          v96 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v95);
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v95);
            if (v96 < 0.0)
              v97 = 0.0;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v97));
          v102 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v103));
          v108 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v109));
          v114 = v28;
          v115 = v27;
          v116 = v29;
          v117 = v30;
          v118 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            v119 = v118;
            if (v118 < 0.0)
              v119 = 0.0;
          }
          __asm { FCVT            S1, H13 }
          v121 = _S30 * _S1;
          v122 = _S31 * _S1;
          v123 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          v125 = _S4 * _S7;
          v126 = _S5 * _S7;
          v127 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          v129 = _S14 * _S8;
          v130 = _S15 * _S8;
          v131 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v119));
          __asm { FCVT            S3, H3 }
          v134 = _S2 * _S3;
          v135 = _S10 * _S3;
          v136 = _S11 * _S3;
          v137 = (float)((float)(v206 * v122) + (float)(v121 * v207)) + (float)(v123 * v205);
          v138 = (float)((float)(v203 * v122) + (float)(v121 * v204)) + (float)(v123 * v202);
          v139 = (float)((float)(v200 * v122) + (float)(v121 * v201)) + (float)(v123 * v199);
          v140 = (float)((float)(v206 * v126) + (float)(v125 * v207)) + (float)(v127 * v205);
          v141 = (float)((float)(v203 * v126) + (float)(v125 * v204)) + (float)(v127 * v202);
          v142 = (float)((float)(v200 * v126) + (float)(v125 * v201)) + (float)(v127 * v199);
          v143 = (float)((float)(v206 * v130) + (float)(v129 * v207)) + (float)(v131 * v205);
          v144 = (float)((float)(v203 * v130) + (float)(v129 * v204)) + (float)(v131 * v202);
          v145 = (float)((float)(v200 * v130) + (float)(v129 * v201)) + (float)(v131 * v199);
          v146 = (float)((float)(v206 * v135) + (float)(v134 * v207)) + (float)(v136 * v205);
          v147 = (float)((float)(v203 * v135) + (float)(v134 * v204)) + (float)(v136 * v202);
          v148 = (float)((float)(v200 * v135) + (float)(v134 * v201)) + (float)(v136 * v199);
          _H6 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          v160 = llroundf(fminf(fmaxf(v148, 0.0), 8191.0));
          __asm { FCVT            S2, H6 }
          _H31 = *(_WORD *)(v26 + 2 * v160);
          v163 = 65535.0;
          v164 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H6 }
            _NF = _S1 < 0.0;
            v164 = _S2;
            if (_NF)
              v164 = 0.0;
          }
          __asm { FCVT            S2, H15 }
          *(_WORD *)v39 = llroundf(v164);
          v167 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H15 }
            _NF = _S1 < 0.0;
            v167 = _S2;
            if (_NF)
              v167 = 0.0;
          }
          __asm { FCVT            S6, H5 }
          *((_WORD *)v39 + 1) = llroundf(v167);
          v170 = 65535.0;
          v27 = v115;
          v28 = v114;
          v29 = v116;
          v30 = v117;
          if (_S6 <= 65535.0)
          {
            __asm { FCVT            S1, H5 }
            v170 = _S6;
            if (_S1 < 0.0)
              v170 = 0.0;
          }
          __asm { FCVT            S1, H4 }
          *((_WORD *)v39 + 2) = llroundf(v170);
          *((_WORD *)v39 + 3) = v46;
          v173 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H4 }
            _NF = _S2 < 0.0;
            v173 = _S1;
            if (_NF)
              v173 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          *((_WORD *)v39 + 4) = llroundf(v173);
          v176 = 65535.0;
          v21 = v198;
          v22 = v212;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H14 }
            _NF = _S1 < 0.0;
            v176 = _S4;
            if (_NF)
              v176 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          *((_WORD *)v39 + 5) = llroundf(v176);
          v179 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v179 = _S4;
            if (_S1 < 0.0)
              v179 = 0.0;
          }
          __asm { FCVT            S1, H12 }
          *((_WORD *)v39 + 6) = llroundf(v179);
          *((_WORD *)v39 + 7) = v46;
          v182 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H12 }
            _NF = _S2 < 0.0;
            v182 = _S1;
            if (_NF)
              v182 = 0.0;
          }
          __asm { FCVT            S4, H11 }
          *(_WORD *)v48 = llroundf(v182);
          v185 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            _NF = _S1 < 0.0;
            v185 = _S4;
            if (_NF)
              v185 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          *((_WORD *)v48 + 1) = llroundf(v185);
          v188 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v188 = _S4;
            if (_S1 < 0.0)
              v188 = 0.0;
          }
          __asm { FCVT            S1, H9 }
          *((_WORD *)v48 + 2) = llroundf(v188);
          *((_WORD *)v48 + 3) = v46;
          v191 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H9 }
            _NF = _S2 < 0.0;
            v191 = _S1;
            if (_NF)
              v191 = 0.0;
          }
          __asm { FCVT            S4, H8 }
          *((_WORD *)v48 + 4) = llroundf(v191);
          v194 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            _NF = _S1 < 0.0;
            v194 = _S4;
            if (_NF)
              v194 = 0.0;
          }
          __asm { FCVT            S2, H31 }
          *((_WORD *)v48 + 5) = llroundf(v194);
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v163 = _S2;
            if (_S1 < 0.0)
              v163 = 0.0;
          }
          result += 4;
          v47 += 4;
          v39 += 16;
          *((_WORD *)v48 + 6) = llroundf(v163);
          *((_WORD *)v48 + 7) = v46;
          v48 += 16;
          v45 += 2;
        }
        while (v10 > v45);
      }
      result = &v44[v16];
      v42 += v17;
      v38 += v18 + v18;
      v39 = &v43[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  __int16 v50;
  char *v51;
  char *v52;
  unsigned __int16 *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v137;
  float v138;
  float v141;
  float v144;
  float v147;
  float v150;
  float v153;
  float v156;
  float v159;
  float v162;
  float v165;
  float v168;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v176 = v21 * *(float *)(v13 + 16);
    v177 = v21 * *(float *)(v13 + 8);
    v174 = v21 * *(float *)(v13 + 28);
    v175 = v21 * *(float *)(v13 + 20);
    v25 = *(float *)(v13 + 80);
    v172 = *(float *)(v13 + 76);
    v173 = *(float *)(v13 + 72);
    v26 = *(float *)(v13 + 84);
    v27 = *(float *)(v13 + 88);
    v28 = *(float *)(v13 + 92);
    v29 = *(float *)(v13 + 96);
    v30 = *(float *)(v13 + 100);
    v31 = *(float *)(v13 + 104);
    v32 = v13 + 164;
    v33 = v13 + 16548;
    v34 = *((_QWORD *)result + 14);
    v35 = (_QWORD *)*((_QWORD *)result + 16);
    v36 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v37 = *(_QWORD *)(result + 36);
    v38 = v14[1];
    v39 = (char *)(*v14 + v16 * v11 + 2 * v37);
    v40 = v14[2];
    _ZF = v40 == 0;
    result = (unsigned __int8 *)(v40 + v18 * v11 + 2 * v37);
    if (_ZF)
      result = 0;
    v42 = (char *)(*v35 + v36 * v19 + 8 * v34);
    v43 = *(unsigned __int8 *)(v13 + 124);
    v44 = 16 - v43;
    if (v43 >= 0x11)
      v44 = 0;
    if (v11 >= 0)
      v45 = v11;
    else
      v45 = v11 + 1;
    v46 = v38 + v17 * (v45 >> 1) + 2 * v37;
    do
    {
      v47 = &v42[v19];
      v48 = &v39[v16];
      if (v10)
      {
        v49 = 0;
        if (result)
          v50 = 0;
        else
          v50 = -1;
        v51 = &v39[v16];
        v52 = &v42[v19];
        do
        {
          v53 = (unsigned __int16 *)(v46 + 2 * v49);
          v54 = (float)(v53[1] >> v44) - v23;
          v55 = v177 * v54;
          v56 = v24 * (float)((float)(*(unsigned __int16 *)v39 >> v44) - v22);
          v57 = (float)(v177 * v54) + v56;
          v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            v58 = (float)(v177 * v54) + v56;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          v59 = (float)(*v53 >> v44) - v23;
          v60 = (float)(v175 * v54) + (float)(v59 * v176);
          v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0)
              v61 = 0.0;
          }
          v62 = v174 * v59;
          v63 = (float)(v174 * v59) + v56;
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = v63;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          v65 = v24 * (float)((float)(*((unsigned __int16 *)v39 + 1) >> v44) - v22);
          v66 = 8191.0;
          if ((float)(v55 + v65) <= 8191.0)
          {
            v66 = v55 + v65;
            if ((float)(v55 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = 8191.0;
          if ((float)(v60 + v65) <= 8191.0)
          {
            v67 = v60 + v65;
            if ((float)(v60 + v65) < 0.0)
              v67 = 0.0;
          }
          v68 = v62 + v65;
          v69 = (float)(v62 + v65) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(*(unsigned __int16 *)v51 >> v44) - v22);
          v72 = 8191.0;
          if ((float)(v55 + v71) <= 8191.0)
          {
            v72 = v55 + v71;
            if ((float)(v55 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v60 + v71) <= 8191.0)
          {
            v73 = v60 + v71;
            if ((float)(v60 + v71) < 0.0)
              v73 = 0.0;
          }
          v74 = v62 + v71;
          v69 = (float)(v62 + v71) <= 8191.0;
          v75 = 8191.0;
          if (v69)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v22;
          v77 = v24 * (float)((float)(*((unsigned __int16 *)v51 + 1) >> v44) - v22);
          v78 = v55 + v77;
          v69 = (float)(v55 + v77) <= 8191.0;
          v79 = 8191.0;
          if (v69)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v60 + v77;
          v69 = (float)(v60 + v77) <= 8191.0;
          v81 = 8191.0;
          if (v69)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v23;
          v83 = v62 + v77;
          v69 = (float)(v62 + v77) <= 8191.0;
          v84 = 8191.0;
          if (v69)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S9, H9
          }
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          v112 = (float)((float)(v172 * _S26) + (float)(_S4 * v173)) + (float)(_S27 * v25);
          v113 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          v114 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          v115 = (float)((float)(v172 * _S30) + (float)(_S28 * v173)) + (float)(_S9 * v25);
          v116 = (float)((float)(v27 * _S30) + (float)(_S28 * v26)) + (float)(_S9 * v28);
          v117 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S9 * v31);
          v118 = (float)((float)(v172 * _S11) + (float)(_S10 * v173)) + (float)(_S12 * v25);
          v119 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          v120 = (float)((float)(v30 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v31);
          v121 = (float)((float)(v172 * _S31) + (float)(_S29 * v173)) + (float)(_S8 * v25);
          v122 = (float)((float)(v27 * _S31) + (float)(_S29 * v26)) + (float)(_S8 * v28);
          v123 = (float)((float)(v30 * _S31) + (float)(_S29 * v29)) + (float)(_S8 * v31);
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H27 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          v137 = 65535.0;
          v138 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H14 }
            v138 = _S4;
            if (_S1 < 0.0)
              v138 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          *(_WORD *)v42 = llroundf(v138);
          v141 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v141 = _S4;
            if (_S1 < 0.0)
              v141 = 0.0;
          }
          __asm { FCVT            S4, H12 }
          *((_WORD *)v42 + 1) = llroundf(v141);
          v144 = 65535.0;
          v23 = v82;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H12 }
            v144 = _S4;
            if (_S1 < 0.0)
              v144 = 0.0;
          }
          __asm { FCVT            S12, H11 }
          *((_WORD *)v42 + 2) = llroundf(v144);
          *((_WORD *)v42 + 3) = v50;
          v147 = 65535.0;
          v22 = v76;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            v147 = _S12;
            if (_S1 < 0.0)
              v147 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          *((_WORD *)v42 + 4) = llroundf(v147);
          v150 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v150 = _S4;
            if (_S1 < 0.0)
              v150 = 0.0;
          }
          __asm { FCVT            S4, H9 }
          *((_WORD *)v42 + 5) = llroundf(v150);
          v153 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H9 }
            v153 = _S4;
            if (_S1 < 0.0)
              v153 = 0.0;
          }
          __asm { FCVT            S9, H8 }
          *((_WORD *)v42 + 6) = llroundf(v153);
          *((_WORD *)v42 + 7) = v50;
          v156 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            v156 = _S9;
            if (_S1 < 0.0)
              v156 = 0.0;
          }
          __asm { FCVT            S4, H31 }
          *(_WORD *)v52 = llroundf(v156);
          v159 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v159 = _S4;
            if (_S1 < 0.0)
              v159 = 0.0;
          }
          __asm { FCVT            S4, H30 }
          *((_WORD *)v52 + 1) = llroundf(v159);
          v162 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H30 }
            v162 = _S4;
            if (_S1 < 0.0)
              v162 = 0.0;
          }
          __asm { FCVT            S30, H29 }
          *((_WORD *)v52 + 2) = llroundf(v162);
          *((_WORD *)v52 + 3) = v50;
          v165 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S1, H29 }
            v165 = _S30;
            if (_S1 < 0.0)
              v165 = 0.0;
          }
          __asm { FCVT            S4, H28 }
          *((_WORD *)v52 + 4) = llroundf(v165);
          v168 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H28 }
            v168 = _S4;
            if (_S1 < 0.0)
              v168 = 0.0;
          }
          __asm { FCVT            S4, H27 }
          *((_WORD *)v52 + 5) = llroundf(v168);
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H27 }
            v137 = _S4;
            if (_S1 < 0.0)
              v137 = 0.0;
          }
          v39 += 4;
          v51 += 4;
          v42 += 16;
          *((_WORD *)v52 + 6) = llroundf(v137);
          *((_WORD *)v52 + 7) = v50;
          v52 += 16;
          v49 += 2;
        }
        while (v10 > v49);
      }
      v39 = &v48[v16];
      v46 += v17;
      result += v18 + v18;
      v42 = &v47[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  __int16 v43;
  char *v44;
  char *v45;
  unsigned __int16 *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  BOOL v73;
  float v74;
  float v75;
  float v76;
  float v77;

  v2 = *(_QWORD *)(result + 28);
  v3 = 2 * *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = *(_QWORD *)(result + 44) + 2 * v4;
    v9 = 2 * v5 - 2 * v4;
    v10 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v11 = *(uint64_t **)(result + 64);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **(_QWORD **)(result + 136);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *(_QWORD *)(result + 112);
    v28 = *(_QWORD **)(result + 128);
    v29 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v3);
    v30 = *(_QWORD *)(result + 36);
    v31 = v12[1];
    v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    v33 = v12[2];
    v34 = v33 == 0;
    v35 = v33 + v15 * v8 + 2 * v30;
    if (v34)
      v35 = 0;
    v36 = (char *)(*v28 + v29 * v16 + 8 * v27);
    v37 = *(unsigned __int8 *)(v10 + 124);
    if (v37 >= 0x11)
      v38 = 0;
    else
      v38 = 16 - v37;
    v39 = v31 + v14 * (v8 / 2) + 2 * v30;
    result = v38;
    do
    {
      v40 = &v36[v16];
      v41 = &v32[v13];
      if (v7)
      {
        v42 = 0;
        if (v35)
          v43 = 0;
        else
          v43 = -1;
        v44 = &v32[v13];
        v45 = &v36[v16];
        do
        {
          v46 = (unsigned __int16 *)(v39 + 2 * v42);
          v47 = (float)(v46[1] >> result) - v21;
          v48 = v23 * v47;
          v49 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> result) - v20);
          v50 = (float)(v23 * v47) + v49;
          v51 = 65535.0;
          if (v50 <= 65535.0)
          {
            v51 = (float)(v23 * v47) + v49;
            if (v50 < 0.0)
              v51 = 0.0;
          }
          v52 = (float)(*v46 >> result) - v21;
          v53 = (float)(v25 * v47) + (float)(v52 * v24);
          v54 = *((unsigned __int16 *)v32 + 1);
          v55 = *(unsigned __int16 *)v44;
          v56 = *((unsigned __int16 *)v44 + 1);
          *(_WORD *)v36 = llroundf(v51);
          v57 = 65535.0;
          if ((float)(v49 + v53) <= 65535.0)
          {
            v57 = v49 + v53;
            if ((float)(v49 + v53) < 0.0)
              v57 = 0.0;
          }
          v58 = v26 * v52;
          v59 = v58 + v49;
          *((_WORD *)v36 + 1) = llroundf(v57);
          v60 = 65535.0;
          if (v59 <= 65535.0)
          {
            v60 = v59;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          v61 = v22 * (float)((float)(int)(v54 >> result) - v20);
          *((_WORD *)v36 + 2) = llroundf(v60);
          *((_WORD *)v36 + 3) = v43;
          v62 = 65535.0;
          if ((float)(v48 + v61) <= 65535.0)
          {
            v62 = v48 + v61;
            if ((float)(v48 + v61) < 0.0)
              v62 = 0.0;
          }
          *((_WORD *)v36 + 4) = llroundf(v62);
          v63 = 65535.0;
          if ((float)(v53 + v61) <= 65535.0)
          {
            v63 = v53 + v61;
            if ((float)(v53 + v61) < 0.0)
              v63 = 0.0;
          }
          v64 = v58 + v61;
          *((_WORD *)v36 + 5) = llroundf(v63);
          v65 = 65535.0;
          if (v64 <= 65535.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = v22 * (float)((float)(int)(v55 >> result) - v20);
          *((_WORD *)v36 + 6) = llroundf(v65);
          *((_WORD *)v36 + 7) = v43;
          v67 = 65535.0;
          if ((float)(v48 + v66) <= 65535.0)
          {
            v67 = v48 + v66;
            if ((float)(v48 + v66) < 0.0)
              v67 = 0.0;
          }
          *(_WORD *)v45 = llroundf(v67);
          v68 = 65535.0;
          if ((float)(v53 + v66) <= 65535.0)
          {
            v68 = v53 + v66;
            if ((float)(v53 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = v58 + v66;
          *((_WORD *)v45 + 1) = llroundf(v68);
          v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v22 * (float)((float)(int)(v56 >> result) - v20);
          v72 = v48 + v71;
          *((_WORD *)v45 + 2) = llroundf(v70);
          *((_WORD *)v45 + 3) = v43;
          v73 = (float)(v48 + v71) <= 65535.0;
          v74 = 65535.0;
          if (v73)
          {
            v74 = v72;
            if (v72 < 0.0)
              v74 = 0.0;
          }
          v75 = v53 + v71;
          *((_WORD *)v45 + 4) = llroundf(v74);
          v76 = 65535.0;
          if (v75 <= 65535.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          *((_WORD *)v45 + 5) = llroundf(v76);
          v77 = 65535.0;
          if ((float)(v58 + v71) <= 65535.0)
          {
            v77 = v58 + v71;
            if ((float)(v58 + v71) < 0.0)
              v77 = 0.0;
          }
          v32 += 4;
          v44 += 4;
          v36 += 16;
          *((_WORD *)v45 + 6) = llroundf(v77);
          *((_WORD *)v45 + 7) = v43;
          v45 += 16;
          v42 += 2;
        }
        while (v7 > v42);
      }
      v32 = &v41[v13];
      v39 += v14;
      v35 += v15 + v15;
      v36 = &v40[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int16 *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v96;
  float v97;
  float v98;
  float v103;
  float v104;
  float v109;
  float v110;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v122;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v163;
  float v164;
  float v167;
  float v170;
  float v173;
  float v176;
  float v179;
  float v182;
  float v185;
  float v188;
  float v191;
  float v194;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v210 = v20 * *(float *)(v13 + 16);
    v211 = v20 * *(float *)(v13 + 8);
    v208 = v20 * *(float *)(v13 + 28);
    v209 = v20 * *(float *)(v13 + 20);
    v206 = *(float *)(v13 + 76);
    v207 = *(float *)(v13 + 72);
    v204 = *(float *)(v13 + 84);
    v205 = *(float *)(v13 + 80);
    v202 = *(float *)(v13 + 92);
    v203 = *(float *)(v13 + 88);
    v200 = *(float *)(v13 + 100);
    v201 = *(float *)(v13 + 96);
    v24 = v13 + 164;
    v25 = v13 + 16548;
    v26 = v13 + 32932;
    v27 = *(float *)(v13 + 108);
    v199 = *(float *)(v13 + 104);
    v28 = *(float *)(v13 + 112);
    v29 = *(float *)(v13 + 116);
    v30 = *(float *)(v13 + 120);
    v31 = *((_QWORD *)result + 14);
    v32 = (_QWORD *)*((_QWORD *)result + 16);
    v33 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v34 = *(_QWORD *)(result + 36);
    v35 = v14[1];
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    v36 = v14[2];
    _ZF = v36 == 0;
    v38 = v36 + v18 * v11 + 2 * v34;
    if (_ZF)
      v38 = 0;
    v39 = (char *)(*v32 + v33 * v19 + 8 * v31);
    v40 = *(unsigned __int8 *)(v13 + 124);
    if (v40 >= 0x11)
      v41 = 0;
    else
      v41 = 16 - v40;
    v42 = v35 + v17 * (v11 / 2) + 2 * v34;
    v212 = (float)LODWORD(a5);
    v198 = v23;
    do
    {
      v43 = &v39[v19];
      v44 = &result[v16];
      if (v10)
      {
        v45 = 0;
        if (v38)
          v46 = 0;
        else
          v46 = -1;
        v47 = bswap32(v46) >> 16;
        v48 = &result[v16];
        v49 = &v39[v19];
        do
        {
          v50 = (unsigned __int16 *)(v42 + 2 * v45);
          v51 = (float)(v50[1] >> v41) - v22;
          v52 = v211 * v51;
          v53 = v23 * (float)((float)(*(unsigned __int16 *)result >> v41) - v21);
          v54 = (float)(v211 * v51) + v53;
          v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            v55 = (float)(v211 * v51) + v53;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          v56 = (float)(*v50 >> v41) - v22;
          v57 = (float)(v209 * v51) + (float)(v56 * v210);
          v58 = 8191.0;
          if ((float)(v53 + v57) <= 8191.0)
          {
            v58 = v53 + v57;
            if ((float)(v53 + v57) < 0.0)
              v58 = 0.0;
          }
          v59 = v208 * v56;
          v60 = (float)(v208 * v56) + v53;
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          v62 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v41) - v21);
          v63 = 8191.0;
          if ((float)(v52 + v62) <= 8191.0)
          {
            v63 = v52 + v62;
            if ((float)(v52 + v62) < 0.0)
              v63 = 0.0;
          }
          v64 = 8191.0;
          if ((float)(v57 + v62) <= 8191.0)
          {
            v64 = v57 + v62;
            if ((float)(v57 + v62) < 0.0)
              v64 = 0.0;
          }
          v65 = 8191.0;
          if ((float)(v59 + v62) <= 8191.0)
          {
            v65 = v59 + v62;
            if ((float)(v59 + v62) < 0.0)
              v65 = 0.0;
          }
          v66 = v23 * (float)((float)(*(unsigned __int16 *)v48 >> v41) - v21);
          v67 = 8191.0;
          if ((float)(v52 + v66) <= 8191.0)
          {
            v67 = v52 + v66;
            if ((float)(v52 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = 8191.0;
          if ((float)(v57 + v66) <= 8191.0)
          {
            v68 = v57 + v66;
            if ((float)(v57 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = 8191.0;
          if ((float)(v59 + v66) <= 8191.0)
          {
            v69 = v59 + v66;
            if ((float)(v59 + v66) < 0.0)
              v69 = 0.0;
          }
          v70 = v23 * (float)((float)(*((unsigned __int16 *)v48 + 1) >> v41) - v21);
          v71 = v52 + v70;
          v72 = (float)(v52 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v57 + v70;
          v72 = (float)(v57 + v70) <= 8191.0;
          v75 = 8191.0;
          if (v72)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v59 + v70;
          v72 = (float)(v59 + v70) <= 8191.0;
          v77 = 8191.0;
          if (v72)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v55, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v96 = fmaxf(_S30, fmaxf(_S31, _S8));
          v97 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v96);
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v96);
            if (v97 < 0.0)
              v98 = 0.0;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v98));
          v103 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v104));
          v109 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = v109;
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v110));
          v115 = v28;
          v116 = v27;
          v117 = v29;
          v118 = v30;
          v119 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm { FCVT            S1, H13 }
          v122 = _S30 * _S1;
          v123 = _S31 * _S1;
          v124 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          v126 = _S4 * _S7;
          v127 = _S5 * _S7;
          v128 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          v130 = _S14 * _S8;
          v131 = _S15 * _S8;
          v132 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v120));
          __asm { FCVT            S3, H3 }
          v135 = _S2 * _S3;
          v136 = _S10 * _S3;
          v137 = _S11 * _S3;
          v138 = (float)((float)(v206 * v123) + (float)(v122 * v207)) + (float)(v124 * v205);
          v139 = (float)((float)(v203 * v123) + (float)(v122 * v204)) + (float)(v124 * v202);
          v140 = (float)((float)(v200 * v123) + (float)(v122 * v201)) + (float)(v124 * v199);
          v141 = (float)((float)(v206 * v127) + (float)(v126 * v207)) + (float)(v128 * v205);
          v142 = (float)((float)(v203 * v127) + (float)(v126 * v204)) + (float)(v128 * v202);
          v143 = (float)((float)(v200 * v127) + (float)(v126 * v201)) + (float)(v128 * v199);
          v144 = (float)((float)(v206 * v131) + (float)(v130 * v207)) + (float)(v132 * v205);
          v145 = (float)((float)(v203 * v131) + (float)(v130 * v204)) + (float)(v132 * v202);
          v146 = (float)((float)(v200 * v131) + (float)(v130 * v201)) + (float)(v132 * v199);
          v147 = (float)((float)(v206 * v136) + (float)(v135 * v207)) + (float)(v137 * v205);
          v148 = (float)((float)(v203 * v136) + (float)(v135 * v204)) + (float)(v137 * v202);
          v149 = (float)((float)(v200 * v136) + (float)(v135 * v201)) + (float)(v137 * v199);
          _H6 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S1, H6 }
          _H31 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          v163 = 65535.0;
          v164 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H6 }
            _NF = _S2 < 0.0;
            v164 = _S1;
            if (_NF)
              v164 = 0.0;
          }
          __asm { FCVT            S1, H15 }
          v167 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H15 }
            v167 = _S1;
            if (_S3 < 0.0)
              v167 = 0.0;
          }
          __asm { FCVT            S1, H5 }
          v170 = 65535.0;
          v27 = v116;
          v28 = v115;
          v29 = v117;
          v30 = v118;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H5 }
            v170 = _S1;
            if (_S3 < 0.0)
              v170 = 0.0;
          }
          __asm { FCVT            S1, H4 }
          *(_WORD *)v39 = v47;
          *((_WORD *)v39 + 1) = __rev16(llroundf(v164));
          *((_WORD *)v39 + 2) = __rev16(llroundf(v167));
          *((_WORD *)v39 + 3) = __rev16(llroundf(v170));
          v173 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H4 }
            _NF = _S2 < 0.0;
            v173 = _S1;
            if (_NF)
              v173 = 0.0;
          }
          __asm { FCVT            S1, H14 }
          v176 = 65535.0;
          v23 = v198;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H14 }
            v176 = _S1;
            if (_S3 < 0.0)
              v176 = 0.0;
          }
          __asm { FCVT            S1, H13 }
          v179 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H13 }
            v179 = _S1;
            if (_S3 < 0.0)
              v179 = 0.0;
          }
          __asm { FCVT            S1, H12 }
          *((_WORD *)v39 + 4) = v47;
          *((_WORD *)v39 + 5) = __rev16(llroundf(v173));
          *((_WORD *)v39 + 6) = __rev16(llroundf(v176));
          *((_WORD *)v39 + 7) = __rev16(llroundf(v179));
          v182 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H12 }
            _NF = _S2 < 0.0;
            v182 = _S1;
            if (_NF)
              v182 = 0.0;
          }
          __asm { FCVT            S1, H11 }
          v185 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H11 }
            v185 = _S1;
            if (_S3 < 0.0)
              v185 = 0.0;
          }
          __asm { FCVT            S1, H10 }
          v188 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H10 }
            v188 = _S1;
            if (_S3 < 0.0)
              v188 = 0.0;
          }
          __asm { FCVT            S1, H9 }
          *(_WORD *)v49 = v47;
          *((_WORD *)v49 + 1) = __rev16(llroundf(v182));
          *((_WORD *)v49 + 2) = __rev16(llroundf(v185));
          *((_WORD *)v49 + 3) = __rev16(llroundf(v188));
          v191 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H9 }
            v191 = _S1;
            if (_S2 < 0.0)
              v191 = 0.0;
          }
          __asm { FCVT            S1, H8 }
          v194 = 65535.0;
          v22 = v212;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H8 }
            _NF = _S2 < 0.0;
            v194 = _S1;
            if (_NF)
              v194 = 0.0;
          }
          __asm { FCVT            S1, H31 }
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S3, H31 }
            v163 = _S1;
            if (_S3 < 0.0)
              v163 = 0.0;
          }
          result += 4;
          v48 += 4;
          v39 += 16;
          *((_WORD *)v49 + 4) = v47;
          *((_WORD *)v49 + 5) = __rev16(llroundf(v191));
          *((_WORD *)v49 + 6) = __rev16(llroundf(v194));
          *((_WORD *)v49 + 7) = __rev16(llroundf(v163));
          v49 += 16;
          v45 += 2;
        }
        while (v10 > v45);
      }
      result = &v44[v16];
      v42 += v17;
      v38 += v18 + v18;
      v39 = &v43[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  char *v53;
  unsigned __int16 *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v138;
  float v139;
  float v142;
  float v145;
  float v148;
  float v151;
  float v154;
  float v157;
  float v160;
  float v163;
  float v166;
  float v169;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v177 = v21 * *(float *)(v13 + 16);
    v178 = v21 * *(float *)(v13 + 8);
    v175 = v21 * *(float *)(v13 + 28);
    v176 = v21 * *(float *)(v13 + 20);
    v25 = *(float *)(v13 + 80);
    v173 = *(float *)(v13 + 76);
    v174 = *(float *)(v13 + 72);
    v26 = *(float *)(v13 + 84);
    v27 = *(float *)(v13 + 88);
    v28 = *(float *)(v13 + 92);
    v29 = *(float *)(v13 + 96);
    v30 = *(float *)(v13 + 100);
    v31 = *(float *)(v13 + 104);
    v32 = v13 + 164;
    v33 = v13 + 16548;
    v34 = *((_QWORD *)result + 14);
    v35 = (_QWORD *)*((_QWORD *)result + 16);
    v36 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v37 = *(_QWORD *)(result + 36);
    v38 = v14[1];
    v39 = (char *)(*v14 + v16 * v11 + 2 * v37);
    v40 = v14[2];
    _ZF = v40 == 0;
    result = (unsigned __int8 *)(v40 + v18 * v11 + 2 * v37);
    if (_ZF)
      result = 0;
    v42 = (char *)(*v35 + v36 * v19 + 8 * v34);
    v43 = *(unsigned __int8 *)(v13 + 124);
    v44 = 16 - v43;
    if (v43 >= 0x11)
      v44 = 0;
    if (v11 >= 0)
      v45 = v11;
    else
      v45 = v11 + 1;
    v46 = v38 + v17 * (v45 >> 1) + 2 * v37;
    do
    {
      v47 = &v42[v19];
      v48 = &v39[v16];
      if (v10)
      {
        v49 = 0;
        if (result)
          v50 = 0;
        else
          v50 = -1;
        v51 = bswap32(v50) >> 16;
        v52 = &v39[v16];
        v53 = &v42[v19];
        do
        {
          v54 = (unsigned __int16 *)(v46 + 2 * v49);
          v55 = (float)(v54[1] >> v44) - v23;
          v56 = v178 * v55;
          v57 = v24 * (float)((float)(*(unsigned __int16 *)v39 >> v44) - v22);
          v58 = (float)(v178 * v55) + v57;
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)(v178 * v55) + v57;
            if (v58 < 0.0)
              v59 = 0.0;
          }
          v60 = (float)(*v54 >> v44) - v23;
          v61 = (float)(v176 * v55) + (float)(v60 * v177);
          v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0)
              v62 = 0.0;
          }
          v63 = v175 * v60;
          v64 = (float)(v175 * v60) + v57;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = v24 * (float)((float)(*((unsigned __int16 *)v39 + 1) >> v44) - v22);
          v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            v68 = v61 + v66;
            if ((float)(v61 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = v63 + v66;
          v70 = (float)(v63 + v66) <= 8191.0;
          v71 = 8191.0;
          if (v70)
          {
            v71 = v69;
            if (v69 < 0.0)
              v71 = 0.0;
          }
          v72 = v24 * (float)((float)(*(unsigned __int16 *)v52 >> v44) - v22);
          v73 = 8191.0;
          if ((float)(v56 + v72) <= 8191.0)
          {
            v73 = v56 + v72;
            if ((float)(v56 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v61 + v72) <= 8191.0)
          {
            v74 = v61 + v72;
            if ((float)(v61 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v63 + v72;
          v70 = (float)(v63 + v72) <= 8191.0;
          v76 = 8191.0;
          if (v70)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v22;
          v78 = v24 * (float)((float)(*((unsigned __int16 *)v52 + 1) >> v44) - v22);
          v79 = v56 + v78;
          v70 = (float)(v56 + v78) <= 8191.0;
          v80 = 8191.0;
          if (v70)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v61 + v78;
          v70 = (float)(v61 + v78) <= 8191.0;
          v82 = 8191.0;
          if (v70)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v23;
          v84 = v63 + v78;
          v70 = (float)(v63 + v78) <= 8191.0;
          v85 = 8191.0;
          if (v70)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S9, H9
          }
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          v113 = (float)((float)(v173 * _S26) + (float)(_S4 * v174)) + (float)(_S27 * v25);
          v114 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          v115 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          v116 = (float)((float)(v173 * _S30) + (float)(_S28 * v174)) + (float)(_S9 * v25);
          v117 = (float)((float)(v27 * _S30) + (float)(_S28 * v26)) + (float)(_S9 * v28);
          v118 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S9 * v31);
          v119 = (float)((float)(v173 * _S11) + (float)(_S10 * v174)) + (float)(_S12 * v25);
          v120 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          v121 = (float)((float)(v30 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v31);
          v122 = (float)((float)(v173 * _S31) + (float)(_S29 * v174)) + (float)(_S8 * v25);
          v123 = (float)((float)(v27 * _S31) + (float)(_S29 * v26)) + (float)(_S8 * v28);
          v124 = (float)((float)(v30 * _S31) + (float)(_S29 * v29)) + (float)(_S8 * v31);
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H27 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          v138 = 65535.0;
          v139 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H14 }
            v139 = _S4;
            if (_S1 < 0.0)
              v139 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          v142 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v142 = _S4;
            if (_S1 < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S13, H12 }
          v145 = 65535.0;
          v23 = v83;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S1, H12 }
            v145 = _S13;
            if (_S1 < 0.0)
              v145 = 0.0;
          }
          __asm { FCVT            S13, H11 }
          *(_WORD *)v42 = v51;
          *((_WORD *)v42 + 1) = __rev16(llroundf(v139));
          *((_WORD *)v42 + 2) = __rev16(llroundf(v142));
          *((_WORD *)v42 + 3) = __rev16(llroundf(v145));
          v148 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            v148 = _S13;
            if (_S1 < 0.0)
              v148 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          v151 = 65535.0;
          v22 = v77;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v151 = _S4;
            if (_S1 < 0.0)
              v151 = 0.0;
          }
          __asm { FCVT            S10, H9 }
          v154 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S1, H9 }
            v154 = _S10;
            if (_S1 < 0.0)
              v154 = 0.0;
          }
          __asm { FCVT            S10, H8 }
          *((_WORD *)v42 + 4) = v51;
          *((_WORD *)v42 + 5) = __rev16(llroundf(v148));
          *((_WORD *)v42 + 6) = __rev16(llroundf(v151));
          *((_WORD *)v42 + 7) = __rev16(llroundf(v154));
          v157 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            v157 = _S10;
            if (_S1 < 0.0)
              v157 = 0.0;
          }
          __asm { FCVT            S4, H31 }
          v160 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v160 = _S4;
            if (_S1 < 0.0)
              v160 = 0.0;
          }
          __asm { FCVT            S31, H30 }
          v163 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S1, H30 }
            v163 = _S31;
            if (_S1 < 0.0)
              v163 = 0.0;
          }
          __asm { FCVT            S31, H29 }
          *(_WORD *)v53 = v51;
          *((_WORD *)v53 + 1) = __rev16(llroundf(v157));
          *((_WORD *)v53 + 2) = __rev16(llroundf(v160));
          *((_WORD *)v53 + 3) = __rev16(llroundf(v163));
          v166 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S1, H29 }
            v166 = _S31;
            if (_S1 < 0.0)
              v166 = 0.0;
          }
          __asm { FCVT            S4, H28 }
          v169 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H28 }
            v169 = _S4;
            if (_S1 < 0.0)
              v169 = 0.0;
          }
          __asm { FCVT            S4, H27 }
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H27 }
            v138 = _S4;
            if (_S1 < 0.0)
              v138 = 0.0;
          }
          v39 += 4;
          v52 += 4;
          v42 += 16;
          *((_WORD *)v53 + 4) = v51;
          *((_WORD *)v53 + 5) = __rev16(llroundf(v166));
          *((_WORD *)v53 + 6) = __rev16(llroundf(v169));
          *((_WORD *)v53 + 7) = __rev16(llroundf(v138));
          v53 += 16;
          v49 += 2;
        }
        while (v10 > v49);
      }
      v39 = &v48[v16];
      v46 += v17;
      result += v18 + v18;
      v42 = &v47[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  char *v46;
  unsigned __int16 *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unsigned int v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;

  v2 = *(_QWORD *)(result + 28);
  v3 = 2 * *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = *(_QWORD *)(result + 44) + 2 * v4;
    v9 = 2 * v5 - 2 * v4;
    v10 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v11 = *(uint64_t **)(result + 64);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **(_QWORD **)(result + 136);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *(_QWORD *)(result + 112);
    v28 = *(_QWORD **)(result + 128);
    v29 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v3);
    v30 = *(_QWORD *)(result + 36);
    v31 = v12[1];
    v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    v33 = v12[2];
    v34 = v33 == 0;
    v35 = v33 + v15 * v8 + 2 * v30;
    if (v34)
      v35 = 0;
    v36 = (char *)(*v28 + v29 * v16 + 8 * v27);
    v37 = *(unsigned __int8 *)(v10 + 124);
    if (v37 >= 0x11)
      v38 = 0;
    else
      v38 = 16 - v37;
    v39 = v31 + v14 * (v8 / 2) + 2 * v30;
    result = v38;
    do
    {
      v40 = &v36[v16];
      v41 = &v32[v13];
      if (v7)
      {
        v42 = 0;
        if (v35)
          v43 = 0;
        else
          v43 = -1;
        v44 = bswap32(v43) >> 16;
        v45 = &v32[v13];
        v46 = &v36[v16];
        do
        {
          v47 = (unsigned __int16 *)(v39 + 2 * v42);
          v48 = (float)(v47[1] >> result) - v21;
          v49 = v23 * v48;
          v50 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> result) - v20);
          v51 = (float)(v23 * v48) + v50;
          v52 = 65535.0;
          if (v51 <= 65535.0)
          {
            v52 = (float)(v23 * v48) + v50;
            if (v51 < 0.0)
              v52 = 0.0;
          }
          v53 = (float)(*v47 >> result) - v21;
          v54 = (float)(v25 * v48) + (float)(v53 * v24);
          v55 = 65535.0;
          if ((float)(v50 + v54) <= 65535.0)
          {
            v55 = v50 + v54;
            if ((float)(v50 + v54) < 0.0)
              v55 = 0.0;
          }
          v56 = v26 * v53;
          v57 = v56 + v50;
          v58 = 65535.0;
          if (v57 <= 65535.0)
          {
            v58 = v57;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          v59 = v22 * (float)((float)(*((unsigned __int16 *)v32 + 1) >> result) - v20);
          v60 = *(unsigned __int16 *)v45;
          v61 = *((unsigned __int16 *)v45 + 1);
          *(_WORD *)v36 = v44;
          *((_WORD *)v36 + 1) = __rev16(llroundf(v52));
          *((_WORD *)v36 + 2) = __rev16(llroundf(v55));
          *((_WORD *)v36 + 3) = __rev16(llroundf(v58));
          v62 = 65535.0;
          if ((float)(v49 + v59) <= 65535.0)
          {
            v62 = v49 + v59;
            if ((float)(v49 + v59) < 0.0)
              v62 = 0.0;
          }
          v63 = 65535.0;
          if ((float)(v54 + v59) <= 65535.0)
          {
            v63 = v54 + v59;
            if ((float)(v54 + v59) < 0.0)
              v63 = 0.0;
          }
          v64 = v56 + v59;
          v65 = 65535.0;
          if (v64 <= 65535.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = v22 * (float)((float)(int)(v60 >> result) - v20);
          *((_WORD *)v36 + 4) = v44;
          *((_WORD *)v36 + 5) = __rev16(llroundf(v62));
          *((_WORD *)v36 + 6) = __rev16(llroundf(v63));
          *((_WORD *)v36 + 7) = __rev16(llroundf(v65));
          v67 = 65535.0;
          if ((float)(v49 + v66) <= 65535.0)
          {
            v67 = v49 + v66;
            if ((float)(v49 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = 65535.0;
          if ((float)(v54 + v66) <= 65535.0)
          {
            v68 = v54 + v66;
            if ((float)(v54 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = v56 + v66;
          v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v22 * (float)((float)(int)(v61 >> result) - v20);
          v72 = llroundf(v67);
          v73 = v49 + v71;
          *(_WORD *)v46 = v44;
          *((_WORD *)v46 + 1) = __rev16(v72);
          *((_WORD *)v46 + 2) = __rev16(llroundf(v68));
          *((_WORD *)v46 + 3) = __rev16(llroundf(v70));
          v74 = (float)(v49 + v71) <= 65535.0;
          v75 = 65535.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v54 + v71;
          v74 = (float)(v54 + v71) <= 65535.0;
          v77 = 65535.0;
          if (v74)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v56 + v71;
          v74 = (float)(v56 + v71) <= 65535.0;
          v79 = 65535.0;
          if (v74)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v32 += 4;
          v45 += 4;
          v36 += 16;
          *((_WORD *)v46 + 4) = v44;
          *((_WORD *)v46 + 5) = __rev16(llroundf(v75));
          *((_WORD *)v46 + 6) = __rev16(llroundf(v77));
          *((_WORD *)v46 + 7) = __rev16(llroundf(v79));
          v46 += 16;
          v42 += 2;
        }
        while (v7 > v42);
      }
      v32 = &v41[v13];
      v39 += v14;
      v35 += v15 + v15;
      v36 = &v40[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  float v53;
  unsigned __int8 *v54;
  char *v55;
  unsigned __int16 *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v104;
  float v105;
  float v110;
  float v111;
  float v116;
  float v117;
  float v118;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v159 = v20 * *(float *)(v13 + 16);
    v160 = v20 * *(float *)(v13 + 8);
    v157 = v20 * *(float *)(v13 + 28);
    v158 = v20 * *(float *)(v13 + 20);
    v24 = *(float *)(v13 + 76);
    v25 = *(float *)(v13 + 80);
    v155 = v24;
    v156 = *(float *)(v13 + 72);
    v26 = *(float *)(v13 + 84);
    v27 = *(float *)(v13 + 88);
    v28 = *(float *)(v13 + 92);
    v29 = *(float *)(v13 + 96);
    v30 = *(float *)(v13 + 100);
    v31 = *(float *)(v13 + 104);
    v32 = v13 + 164;
    v33 = v13 + 16548;
    v34 = v13 + 32932;
    v35 = *(float *)(v13 + 108);
    v36 = *(float *)(v13 + 112);
    v37 = *(float *)(v13 + 116);
    v38 = *(float *)(v13 + 120);
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v42 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v42);
    v43 = v14[2];
    _ZF = v43 == 0;
    v45 = v43 + v18 * v11 + 2 * v42;
    if (_ZF)
      v45 = 0;
    v46 = (char *)(*v40 + v41 * v19 + 8 * v39);
    v47 = *(unsigned __int8 *)(v13 + 124);
    if (v47 >= 0x11)
      v48 = 0;
    else
      v48 = 16 - v47;
    v49 = v14[1] + v17 * (v11 / 2) + 2 * v42;
    LOWORD(v24) = 15360;
    v154 = v24;
    v162 = (float)LODWORD(a5);
    v163 = v21;
    v161 = v23;
    do
    {
      v50 = &v46[v19];
      v51 = &result[v16];
      if (v10)
      {
        v52 = 0;
        if (v45)
          v53 = 0.0;
        else
          v53 = v154;
        v54 = &result[v16];
        v55 = &v46[v19];
        do
        {
          v56 = (unsigned __int16 *)(v49 + 2 * v52);
          v57 = (float)(v56[1] >> v48) - v22;
          v58 = v160 * v57;
          v59 = v23 * (float)((float)(*(unsigned __int16 *)result >> v48) - v21);
          v60 = (float)(v160 * v57) + v59;
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = (float)(v160 * v57) + v59;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          v62 = (float)(*v56 >> v48) - v22;
          v63 = (float)(v158 * v57) + (float)(v62 * v159);
          v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0)
              v64 = 0.0;
          }
          v65 = v157 * v62;
          v66 = (float)(v157 * v62) + v59;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v48) - v21);
          v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            v70 = v63 + v68;
            if ((float)(v63 + v68) < 0.0)
              v70 = 0.0;
          }
          v71 = v65 + v68;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v23 * (float)((float)(*(unsigned __int16 *)v54 >> v48) - v21);
          v74 = 8191.0;
          if ((float)(v58 + v73) <= 8191.0)
          {
            v74 = v58 + v73;
            if ((float)(v58 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            v75 = v63 + v73;
            if ((float)(v63 + v73) < 0.0)
              v75 = 0.0;
          }
          v76 = v65 + v73;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v23 * (float)((float)(*((unsigned __int16 *)v54 + 1) >> v48) - v21);
          v79 = v58 + v78;
          v80 = (float)(v58 + v78) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v63 + v78;
          v80 = (float)(v63 + v78) <= 8191.0;
          v83 = 8191.0;
          if (v80)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v65 + v78;
          v80 = (float)(v65 + v78) <= 8191.0;
          v85 = 8191.0;
          if (v80)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S9, H2 }
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S10, H2 }
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S11, H2 }
          _H3 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          v104 = (float)((float)((float)(v36 * _S10) + (float)(v35 * _S9)) + (float)(v37 * _S11))
               + (float)(v38 * fmaxf(_S9, fmaxf(_S10, _S11)));
          v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(v105));
          v110 = (float)((float)((float)(v36 * _S5) + (float)(v35 * _S4)) + (float)(v37 * _S6))
               + (float)(v38 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            v111 = v110;
            if (v110 < 0.0)
              v111 = 0.0;
          }
          __asm
          {
            FCVT            S14, H15
            FCVT            S15, H7
            FCVT            S7, H2
          }
          _H1 = *(_WORD *)(v33 + 2 * llroundf(v111));
          v116 = fmaxf(_S14, fmaxf(_S15, _S7));
          v117 = (float)((float)((float)(v36 * _S15) + (float)(v35 * _S14)) + (float)(v37 * _S7)) + (float)(v38 * v116);
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = (float)((float)((float)(v36 * _S15) + (float)(v35 * _S14)) + (float)(v37 * _S7))
                 + (float)(v38 * v116);
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm
          {
            FCVT            S2, H29
            FCVT            S3, H30
            FCVT            S16, H13
          }
          _H17 = *(_WORD *)(v33 + 2 * llroundf(v118));
          v123 = (float)((float)((float)(v36 * _S3) + (float)(v35 * _S2)) + (float)(v37 * _S16))
               + (float)(v38 * fmaxf(_S2, fmaxf(_S3, _S16)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm { FCVT            S30, H12 }
          v126 = _S9 * _S30;
          v127 = _S10 * _S30;
          v128 = _S11 * _S30;
          __asm { FCVT            S1, H1 }
          v130 = _S4 * _S1;
          v131 = _S5 * _S1;
          v132 = _S6 * _S1;
          __asm { FCVT            S6, H17 }
          v134 = _S14 * _S6;
          v135 = _S15 * _S6;
          v136 = _S7 * _S6;
          _H7 = *(_WORD *)(v33 + 2 * llroundf(v124));
          __asm { FCVT            S7, H7 }
          v139 = _S2 * _S7;
          v140 = _S3 * _S7;
          v141 = _S16 * _S7;
          v142 = (float)((float)(v155 * v127) + (float)(v126 * v156)) + (float)(v128 * v25);
          v143 = (float)((float)(v27 * v127) + (float)(v126 * v26)) + (float)(v128 * v28);
          v144 = (float)((float)(v30 * v127) + (float)(v126 * v29)) + (float)(v128 * v31);
          v145 = (float)((float)(v155 * v131) + (float)(v130 * v156)) + (float)(v132 * v25);
          v146 = (float)((float)(v27 * v131) + (float)(v130 * v26)) + (float)(v132 * v28);
          v147 = (float)((float)(v30 * v131) + (float)(v130 * v29)) + (float)(v132 * v31);
          v148 = (float)((float)(v155 * v135) + (float)(v134 * v156)) + (float)(v136 * v25);
          v149 = (float)((float)(v27 * v135) + (float)(v134 * v26)) + (float)(v136 * v28);
          v150 = (float)((float)(v30 * v135) + (float)(v134 * v29)) + (float)(v136 * v31);
          v151 = (float)((float)(v155 * v140) + (float)(v139 * v156)) + (float)(v141 * v25);
          v152 = (float)((float)(v27 * v140) + (float)(v139 * v26)) + (float)(v141 * v28);
          v153 = (float)((float)(v30 * v140) + (float)(v139 * v29)) + (float)(v141 * v31);
          LOWORD(v140) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          LOWORD(v141) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          LOWORD(v143) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          LOWORD(v144) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          LOWORD(v147) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          LOWORD(v148) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          LOWORD(v149) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          LOWORD(v150) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          LOWORD(v151) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          LOWORD(v145) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          LOWORD(v153) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          *(_WORD *)v46 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          *((_WORD *)v46 + 1) = LOWORD(v140);
          *((_WORD *)v46 + 2) = LOWORD(v141);
          *((_WORD *)v46 + 3) = LOWORD(v53);
          *((_WORD *)v46 + 4) = LOWORD(v143);
          *((_WORD *)v46 + 5) = LOWORD(v144);
          *((_WORD *)v46 + 6) = LOWORD(v147);
          *((_WORD *)v46 + 7) = LOWORD(v53);
          *(_WORD *)v55 = LOWORD(v148);
          *((_WORD *)v55 + 1) = LOWORD(v149);
          *((_WORD *)v55 + 2) = LOWORD(v150);
          *((_WORD *)v55 + 3) = LOWORD(v53);
          result += 4;
          v54 += 4;
          v46 += 16;
          *((_WORD *)v55 + 4) = LOWORD(v151);
          *((_WORD *)v55 + 5) = LOWORD(v145);
          *((_WORD *)v55 + 6) = LOWORD(v153);
          *((_WORD *)v55 + 7) = LOWORD(v53);
          v55 += 16;
          v52 += 2;
          v22 = v162;
          v21 = v163;
          v23 = v161;
        }
        while (v10 > v52);
      }
      result = &v51[v16];
      v49 += v17;
      v45 += v18 + v18;
      v46 = &v50[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  char *v54;
  unint64_t v55;
  float v56;
  char *v57;
  char *v58;
  unsigned __int16 *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v129 = v21 * *(float *)(v13 + 8);
    v25 = v21 * *(float *)(v13 + 16);
    v26 = v21 * *(float *)(v13 + 20);
    v27 = v21 * *(float *)(v13 + 28);
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = *(float *)(v13 + 104);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v42 = *(_QWORD *)(result + 36);
    v43 = v14[1];
    v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    v45 = v14[2];
    _ZF = v45 == 0;
    result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF)
      result = 0;
    v47 = (char *)(*v40 + v41 * v19 + 8 * v39);
    v48 = *(unsigned __int8 *)(v13 + 124);
    v49 = 16 - v48;
    if (v48 >= 0x11)
      v49 = 0;
    if (v11 >= 0)
      v50 = v11;
    else
      v50 = v11 + 1;
    v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    v52 = v49;
    LOWORD(v21) = 15360;
    v128 = v21;
    do
    {
      v53 = &v47[v19];
      v54 = &v44[v16];
      if (v10)
      {
        v55 = 0;
        if (result)
          v56 = 0.0;
        else
          v56 = v128;
        v57 = &v44[v16];
        v58 = &v47[v19];
        do
        {
          v59 = (unsigned __int16 *)(v51 + 2 * v55);
          v60 = (float)(v59[1] >> v52) - v23;
          v61 = v129 * v60;
          v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v52) - v22);
          v63 = (float)(v129 * v60) + v62;
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)(v129 * v60) + v62;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          v65 = (float)(*v59 >> v52) - v23;
          v66 = (float)(v26 * v60) + (float)(v65 * v25);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v27 * v65;
          v69 = (float)(v27 * v65) + v62;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v52) - v22);
          v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0)
              v73 = 0.0;
          }
          v74 = v68 + v71;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v52) - v22);
          v77 = 8191.0;
          if ((float)(v61 + v76) <= 8191.0)
          {
            v77 = v61 + v76;
            if ((float)(v61 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            v78 = v66 + v76;
            if ((float)(v66 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v68 + v76;
          v80 = (float)(v68 + v76) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v52) - v22);
          v83 = v61 + v82;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v66 + v82;
          v80 = (float)(v66 + v82) <= 8191.0;
          v86 = 8191.0;
          if (v80)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v68 + v82;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H8
            FCVT            S9, H9
          }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H25 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          v116 = (float)((float)(v29 * _S29) + (float)(_S26 * v28)) + (float)(_S30 * v30);
          v117 = (float)((float)(v32 * _S29) + (float)(_S26 * v31)) + (float)(_S30 * v33);
          v118 = (float)((float)(v35 * _S29) + (float)(_S26 * v34)) + (float)(_S30 * v36);
          v119 = (float)((float)(v29 * _S8) + (float)(_S31 * v28)) + (float)(_S9 * v30);
          v120 = (float)((float)(v32 * _S8) + (float)(_S31 * v31)) + (float)(_S9 * v33);
          v121 = (float)((float)(v35 * _S8) + (float)(_S31 * v34)) + (float)(_S9 * v36);
          v122 = (float)((float)(v29 * _S13) + (float)(_S12 * v28)) + (float)(_S25 * v30);
          v123 = (float)((float)(v32 * _S13) + (float)(_S12 * v31)) + (float)(_S25 * v33);
          v124 = (float)((float)(v35 * _S13) + (float)(_S12 * v34)) + (float)(_S25 * v36);
          v125 = (float)((float)(v29 * _S10) + (float)(_S4 * v28)) + (float)(_S11 * v30);
          v126 = (float)((float)(v32 * _S10) + (float)(_S4 * v31)) + (float)(_S11 * v33);
          v127 = (float)((float)(v35 * _S10) + (float)(_S4 * v34)) + (float)(_S11 * v36);
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(v118) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          LOWORD(v119) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          LOWORD(v120) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          LOWORD(v121) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          LOWORD(v122) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          LOWORD(v123) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(v124) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(v125) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(v127) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          *(_WORD *)v47 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          *((_WORD *)v47 + 1) = LOWORD(_S10);
          *((_WORD *)v47 + 2) = LOWORD(v118);
          *((_WORD *)v47 + 3) = LOWORD(v56);
          *((_WORD *)v47 + 4) = LOWORD(v119);
          *((_WORD *)v47 + 5) = LOWORD(v120);
          *((_WORD *)v47 + 6) = LOWORD(v121);
          *((_WORD *)v47 + 7) = LOWORD(v56);
          *(_WORD *)v58 = LOWORD(v122);
          *((_WORD *)v58 + 1) = LOWORD(v123);
          *((_WORD *)v58 + 2) = LOWORD(v124);
          *((_WORD *)v58 + 3) = LOWORD(v56);
          v44 += 4;
          v57 += 4;
          v47 += 16;
          *((_WORD *)v58 + 4) = LOWORD(_S11);
          *((_WORD *)v58 + 5) = LOWORD(v125);
          *((_WORD *)v58 + 6) = LOWORD(v127);
          *((_WORD *)v58 + 7) = LOWORD(v56);
          v58 += 16;
          v55 += 2;
        }
        while (v10 > v55);
      }
      v44 = &v54[v16];
      v51 += v17;
      result += v18 + v18;
      v47 = &v53[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_RGhA_GCD(unint64_t result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  unsigned __int8 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  float v44;
  char *v45;
  char *v46;
  unsigned __int16 *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;

  v3 = *(_QWORD *)(result + 28);
  v4 = 2 * *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (2 * v6 != 2 * v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = *(_QWORD *)(result + 44) + 2 * v5;
    v10 = 2 * v6 - 2 * v5;
    v11 = *(_QWORD *)(result + 152);
    v13 = *(_QWORD **)(result + 56);
    v12 = *(uint64_t **)(result + 64);
    v14 = *v12;
    v15 = v12[1];
    v16 = v12[2];
    v17 = **(_QWORD **)(result + 136);
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 1.0;
    v20 = 1.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    v22 = (float)v19;
    v23 = v20 * *(float *)v11;
    v24 = v20 * *(float *)(v11 + 8);
    v25 = v20 * *(float *)(v11 + 16);
    v26 = v20 * *(float *)(v11 + 20);
    v27 = v20 * *(float *)(v11 + 28);
    v28 = *(_QWORD *)(result + 112);
    v29 = *(_QWORD **)(result + 128);
    v30 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v4);
    v31 = *(_QWORD *)(result + 36);
    v32 = v13[1];
    v33 = (char *)(*v13 + v14 * v9 + 2 * v31);
    v34 = v13[2];
    _ZF = v34 == 0;
    v36 = v34 + v16 * v9 + 2 * v31;
    if (_ZF)
      v36 = 0;
    v37 = (char *)(*v29 + v30 * v17 + 8 * v28);
    v38 = *(unsigned __int8 *)(v11 + 124);
    if (v38 >= 0x11)
      v39 = 0;
    else
      v39 = 16 - v38;
    v40 = v32 + v15 * (v9 / 2) + 2 * v31;
    result = v39;
    LOWORD(v2) = 15360;
    do
    {
      v41 = &v37[v17];
      v42 = &v33[v14];
      if (v8)
      {
        v43 = 0;
        if (v36)
          v44 = 0.0;
        else
          v44 = v2;
        v45 = &v33[v14];
        v46 = &v37[v17];
        do
        {
          v47 = (unsigned __int16 *)(v40 + 2 * v43);
          v48 = (float)(*v47 >> result) - v22;
          v49 = (float)(v47[1] >> result) - v22;
          v50 = v23 * (float)((float)(*(unsigned __int16 *)v33 >> result) - v21);
          v51 = v24 * v49;
          v52 = v23 * (float)((float)(*((unsigned __int16 *)v33 + 1) >> result) - v21);
          v33 += 4;
          v53 = v27 * v48;
          v54 = (float)(v26 * v49) + (float)(v48 * v25);
          v55 = v23 * (float)((float)(*(unsigned __int16 *)v45 >> result) - v21);
          v56 = v23 * (float)((float)(*((unsigned __int16 *)v45 + 1) >> result) - v21);
          v45 += 4;
          _S25 = v51 + v50;
          _S26 = v50 + v54;
          _S20 = v53 + v50;
          _S27 = v51 + v52;
          _S28 = v54 + v52;
          _S22 = v53 + v52;
          _S29 = v51 + v55;
          _S30 = v54 + v55;
          _S19 = v53 + v55;
          _S21 = v51 + v56;
          _S18 = v54 + v56;
          __asm { FCVT            H25, S25 }
          *(_WORD *)v37 = LOWORD(_S25);
          __asm
          {
            FCVT            H25, S26
            FCVT            H20, S20
          }
          *((_WORD *)v37 + 2) = LOWORD(_S20);
          *((_WORD *)v37 + 3) = LOWORD(v44);
          __asm { FCVT            H20, S27 }
          *((_WORD *)v37 + 4) = LOWORD(_S20);
          *((_WORD *)v37 + 1) = LOWORD(_S25);
          __asm { FCVT            H20, S22 }
          *((_WORD *)v37 + 6) = LOWORD(_S20);
          _S20 = v53 + v56;
          __asm { FCVT            H22, S28 }
          *((_WORD *)v37 + 7) = LOWORD(v44);
          *((_WORD *)v37 + 5) = LOWORD(_S22);
          v37 += 16;
          __asm { FCVT            H22, S29 }
          *(_WORD *)v46 = LOWORD(_S22);
          __asm
          {
            FCVT            H22, S30
            FCVT            H19, S19
          }
          *((_WORD *)v46 + 1) = LOWORD(_S22);
          *((_WORD *)v46 + 2) = LOWORD(_S19);
          *((_WORD *)v46 + 3) = LOWORD(v44);
          __asm { FCVT            H19, S21 }
          *((_WORD *)v46 + 4) = LOWORD(_S19);
          __asm { FCVT            H18, S18 }
          *((_WORD *)v46 + 5) = LOWORD(_S18);
          __asm { FCVT            H18, S20 }
          *((_WORD *)v46 + 6) = LOWORD(_S18);
          *((_WORD *)v46 + 7) = LOWORD(v44);
          v46 += 16;
          v43 += 2;
        }
        while (v8 > v43);
      }
      v33 = &v42[v14];
      v40 += v15;
      v36 += v16 + v16;
      v37 = &v41[v17];
      v7 += 2;
    }
    while (v10 > v7);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unint64_t v51;
  float v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int16 *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v103;
  float v104;
  float v109;
  float v110;
  float v115;
  float v116;
  float v117;
  float v122;
  float v123;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  float v131;
  float v133;
  float v134;
  float v135;
  float v138;
  float v142;
  float v151;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v169 = v20 * *(float *)(v13 + 16);
    v170 = v20 * *(float *)(v13 + 8);
    v167 = v20 * *(float *)(v13 + 28);
    v168 = v20 * *(float *)(v13 + 20);
    v24 = *(float *)(v13 + 80);
    v165 = *(float *)(v13 + 76);
    v166 = *(float *)(v13 + 72);
    v25 = *(float *)(v13 + 84);
    v26 = *(float *)(v13 + 88);
    v27 = *(float *)(v13 + 92);
    v28 = *(float *)(v13 + 96);
    v29 = *(float *)(v13 + 100);
    v30 = *(float *)(v13 + 104);
    v31 = v13 + 164;
    v32 = v13 + 16548;
    v33 = v13 + 32932;
    v34 = *(float *)(v13 + 108);
    v35 = *(float *)(v13 + 112);
    v36 = *(float *)(v13 + 116);
    v37 = *(float *)(v13 + 120);
    v38 = *((_QWORD *)result + 14);
    v39 = (_QWORD *)*((_QWORD *)result + 16);
    v40 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v41 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v41);
    v42 = v14[2];
    _ZF = v42 == 0;
    v44 = v42 + v18 * v11 + 2 * v41;
    if (_ZF)
      v44 = 0;
    v45 = *v39 + v40 * v19 + 16 * v38;
    v46 = *(unsigned __int8 *)(v13 + 124);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = v14[1] + v17 * (v11 / 2) + 2 * v41;
    v171 = (float)LODWORD(a5);
    v172 = v21;
    do
    {
      v49 = v45 + v19;
      v50 = &result[v16];
      if (v10)
      {
        v51 = 0;
        if (v44)
          v52 = 0.0;
        else
          v52 = 1.0;
        v53 = &result[v16];
        v54 = v45 + v19;
        do
        {
          v55 = (unsigned __int16 *)(v48 + 2 * v51);
          v56 = (float)(v55[1] >> v47) - v22;
          v57 = v170 * v56;
          v58 = v23 * (float)((float)(*(unsigned __int16 *)result >> v47) - v21);
          v59 = (float)(v170 * v56) + v58;
          v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            v60 = (float)(v170 * v56) + v58;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          v61 = (float)(*v55 >> v47) - v22;
          v62 = (float)(v168 * v56) + (float)(v61 * v169);
          v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0)
              v63 = 0.0;
          }
          v64 = v167 * v61;
          v65 = (float)(v167 * v61) + v58;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v47) - v21);
          v68 = 8191.0;
          if ((float)(v57 + v67) <= 8191.0)
          {
            v68 = v57 + v67;
            if ((float)(v57 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = 8191.0;
          if ((float)(v62 + v67) <= 8191.0)
          {
            v69 = v62 + v67;
            if ((float)(v62 + v67) < 0.0)
              v69 = 0.0;
          }
          v70 = v64 + v67;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v23 * (float)((float)(*(unsigned __int16 *)v53 >> v47) - v21);
          v73 = 8191.0;
          if ((float)(v57 + v72) <= 8191.0)
          {
            v73 = v57 + v72;
            if ((float)(v57 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            v74 = v62 + v72;
            if ((float)(v62 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v64 + v72;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v23 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v47) - v21);
          v78 = v57 + v77;
          v79 = (float)(v57 + v77) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          v81 = v62 + v77;
          v79 = (float)(v62 + v77) <= 8191.0;
          v82 = 8191.0;
          if (v79)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v64 + v77;
          v79 = (float)(v64 + v77) <= 8191.0;
          v84 = 8191.0;
          if (v79)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S8, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S9, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S10, H2 }
          _H12 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          v103 = (float)((float)((float)(v35 * _S9) + (float)(v34 * _S8)) + (float)(v36 * _S10))
               + (float)(v37 * fmaxf(_S8, fmaxf(_S9, _S10)));
          v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          __asm
          {
            FCVT            S4, H12
            FCVT            S5, H15
            FCVT            S6, H3
          }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(v104));
          v109 = (float)((float)((float)(v35 * _S5) + (float)(v34 * _S4)) + (float)(v36 * _S6))
               + (float)(v37 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = v109;
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H7
            FCVT            S7, H2
          }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(v110));
          v115 = fmaxf(_S14, fmaxf(_S15, _S7));
          v116 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7)) + (float)(v37 * v115);
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7))
                 + (float)(v37 * v115);
            if (v116 < 0.0)
              v117 = 0.0;
          }
          __asm
          {
            FCVT            S2, H30
            FCVT            S3, H11
            FCVT            S30, H13
          }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(v117));
          v122 = (float)((float)((float)(v35 * _S3) + (float)(v34 * _S2)) + (float)(v36 * _S30))
               + (float)(v37 * fmaxf(_S2, fmaxf(_S3, _S30)));
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = v122;
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm { FCVT            S16, H12 }
          v125 = _S8 * _S16;
          v126 = _S9 * _S16;
          v127 = _S10 * _S16;
          __asm { FCVT            S1, H1 }
          v129 = _S4 * _S1;
          v130 = _S5 * _S1;
          v131 = _S6 * _S1;
          __asm { FCVT            S6, H11 }
          v133 = _S14 * _S6;
          v134 = _S15 * _S6;
          v135 = _S7 * _S6;
          _H7 = *(_WORD *)(v32 + 2 * llroundf(v123));
          __asm { FCVT            S7, H7 }
          v138 = _S2 * _S7;
          _S3 = _S3 * _S7;
          _S7 = _S30 * _S7;
          _S30 = (float)((float)(v165 * v126) + (float)(v125 * v166)) + (float)(v127 * v24);
          v142 = (float)((float)(v26 * v126) + (float)(v125 * v25)) + (float)(v127 * v27);
          _S16 = (float)((float)(v29 * v126) + (float)(v125 * v28)) + (float)(v127 * v30);
          _S8 = (float)((float)(v165 * v130) + (float)(v129 * v166)) + (float)(v131 * v24);
          _S9 = (float)((float)(v26 * v130) + (float)(v129 * v25)) + (float)(v131 * v27);
          _S1 = (float)((float)(v29 * v130) + (float)(v129 * v28)) + (float)(v131 * v30);
          _S4 = (float)((float)(v165 * v134) + (float)(v133 * v166)) + (float)(v135 * v24);
          _S5 = (float)((float)(v26 * v134) + (float)(v133 * v25)) + (float)(v135 * v27);
          _S6 = (float)((float)(v29 * v134) + (float)(v133 * v28)) + (float)(v135 * v30);
          _S10 = (float)((float)(v165 * _S3) + (float)(v138 * v166)) + (float)(_S7 * v24);
          v151 = (float)((float)(v26 * _S3) + (float)(v138 * v25)) + (float)(_S7 * v27);
          _S2 = (float)((float)(v29 * _S3) + (float)(v138 * v28)) + (float)(_S7 * v30);
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S9, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S7, H7
          }
          *(_DWORD *)v45 = _S3;
          *(_DWORD *)(v45 + 4) = _S7;
          __asm { FCVT            S3, H16 }
          *(_DWORD *)(v45 + 8) = _S3;
          *(float *)(v45 + 12) = v52;
          __asm
          {
            FCVT            S3, H30
            FCVT            S7, H8
          }
          *(_DWORD *)(v45 + 16) = _S3;
          *(_DWORD *)(v45 + 20) = _S7;
          __asm { FCVT            S1, H1 }
          *(_DWORD *)(v45 + 24) = _S1;
          *(float *)(v45 + 28) = v52;
          __asm
          {
            FCVT            S1, H4
            FCVT            S3, H5
          }
          *(_DWORD *)v54 = _S1;
          *(_DWORD *)(v54 + 4) = _S3;
          result += 4;
          v53 += 4;
          __asm
          {
            FCVT            S1, H6
            FCVT            S3, H9
            FCVT            S4, H10
          }
          *(_DWORD *)(v54 + 8) = _S1;
          *(float *)(v54 + 12) = v52;
          __asm { FCVT            S1, H2 }
          v45 += 32;
          *(_DWORD *)(v54 + 16) = _S3;
          *(_DWORD *)(v54 + 20) = _S4;
          *(_DWORD *)(v54 + 24) = _S1;
          *(float *)(v54 + 28) = v52;
          v54 += 32;
          v51 += 2;
          v22 = v171;
          v21 = v172;
        }
        while (v10 > v51);
      }
      result = &v50[v16];
      v48 += v17;
      v44 += v18 + v18;
      v45 = v49 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  float v56;
  char *v57;
  uint64_t v58;
  unsigned __int16 *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  BOOL v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v116;
  float v117;
  float v140;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v140 = v21 * *(float *)(v13 + 8);
    v25 = v21 * *(float *)(v13 + 16);
    v26 = v21 * *(float *)(v13 + 20);
    v27 = v21 * *(float *)(v13 + 28);
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = *(float *)(v13 + 104);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v42 = *(_QWORD *)(result + 36);
    v43 = v14[1];
    v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    v45 = v14[2];
    _ZF = v45 == 0;
    result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF)
      result = 0;
    v47 = *v40 + v41 * v19 + 16 * v39;
    v48 = *(unsigned __int8 *)(v13 + 124);
    v49 = 16 - v48;
    if (v48 >= 0x11)
      v49 = 0;
    if (v11 >= 0)
      v50 = v11;
    else
      v50 = v11 + 1;
    v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    v52 = v49;
    do
    {
      v53 = v47 + v19;
      v54 = &v44[v16];
      if (v10)
      {
        v55 = 0;
        if (result)
          v56 = 0.0;
        else
          v56 = 1.0;
        v57 = &v44[v16];
        v58 = v47 + v19;
        do
        {
          v59 = (unsigned __int16 *)(v51 + 2 * v55);
          v60 = (float)(v59[1] >> v52) - v23;
          v61 = v140 * v60;
          v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v52) - v22);
          v63 = (float)(v140 * v60) + v62;
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)(v140 * v60) + v62;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          v65 = (float)(*v59 >> v52) - v23;
          v66 = (float)(v26 * v60) + (float)(v65 * v25);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v27 * v65;
          v69 = (float)(v27 * v65) + v62;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v52) - v22);
          v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0)
              v73 = 0.0;
          }
          v74 = v68 + v71;
          v75 = (float)(v68 + v71) <= 8191.0;
          v76 = 8191.0;
          if (v75)
          {
            v76 = v74;
            if (v74 < 0.0)
              v76 = 0.0;
          }
          v77 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v52) - v22);
          v78 = 8191.0;
          if ((float)(v61 + v77) <= 8191.0)
          {
            v78 = v61 + v77;
            if ((float)(v61 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v66 + v77) <= 8191.0)
          {
            v79 = v66 + v77;
            if ((float)(v66 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v68 + v77;
          v75 = (float)(v68 + v77) <= 8191.0;
          v81 = 8191.0;
          if (v75)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v52) - v22);
          v83 = v61 + v82;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v66 + v82;
          v75 = (float)(v66 + v82) <= 8191.0;
          v86 = 8191.0;
          if (v75)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v68 + v82;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          v116 = (float)((float)(v29 * _S28) + (float)(_S26 * v28)) + (float)(_S29 * v30);
          v117 = (float)((float)(v32 * _S28) + (float)(_S26 * v31)) + (float)(_S29 * v33);
          _S26 = (float)((float)(v35 * _S28) + (float)(_S26 * v34)) + (float)(_S29 * v36);
          _S28 = (float)((float)(v29 * _S31) + (float)(_S30 * v28)) + (float)(_S8 * v30);
          _S29 = (float)((float)(v32 * _S31) + (float)(_S30 * v31)) + (float)(_S8 * v33);
          _S30 = (float)((float)(v35 * _S31) + (float)(_S30 * v34)) + (float)(_S8 * v36);
          _S31 = (float)((float)(v29 * _S12) + (float)(_S11 * v28)) + (float)(_S13 * v30);
          _S8 = (float)((float)(v32 * _S12) + (float)(_S11 * v31)) + (float)(_S13 * v33);
          _S11 = (float)((float)(v35 * _S12) + (float)(_S11 * v34)) + (float)(_S13 * v36);
          _S12 = (float)((float)(v29 * _S9) + (float)(_S4 * v28)) + (float)(_S10 * v30);
          _S13 = (float)((float)(v32 * _S9) + (float)(_S4 * v31)) + (float)(_S10 * v33);
          _S4 = (float)((float)(v35 * _S9) + (float)(_S4 * v34)) + (float)(_S10 * v36);
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          LOWORD(_S28) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          LOWORD(_S13) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S13, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          *(_DWORD *)v47 = _S9;
          *(_DWORD *)(v47 + 4) = _S10;
          __asm { FCVT            S26, H26 }
          *(_DWORD *)(v47 + 8) = _S26;
          *(float *)(v47 + 12) = v56;
          __asm
          {
            FCVT            S26, H28
            FCVT            S28, H29
          }
          *(_DWORD *)(v47 + 16) = _S26;
          *(_DWORD *)(v47 + 20) = _S28;
          __asm { FCVT            S26, H30 }
          *(_DWORD *)(v47 + 24) = _S26;
          *(float *)(v47 + 28) = v56;
          __asm
          {
            FCVT            S26, H31
            FCVT            S28, H8
          }
          *(_DWORD *)v58 = _S26;
          *(_DWORD *)(v58 + 4) = _S28;
          v44 += 4;
          v57 += 4;
          __asm
          {
            FCVT            S26, H11
            FCVT            S28, H12
            FCVT            S29, H13
          }
          *(_DWORD *)(v58 + 8) = _S26;
          *(float *)(v58 + 12) = v56;
          __asm { FCVT            S4, H4 }
          v47 += 32;
          *(_DWORD *)(v58 + 16) = _S28;
          *(_DWORD *)(v58 + 20) = _S29;
          *(_DWORD *)(v58 + 24) = _S4;
          *(float *)(v58 + 28) = v56;
          v58 += 32;
          v55 += 2;
        }
        while (v10 > v55);
      }
      v44 = &v54[v16];
      v51 += v17;
      result += v18 + v18;
      v47 = v53 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_RGfA_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  float *v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  float v45;
  char *v46;
  float *v47;
  unsigned __int16 *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *(_QWORD *)(result + 152);
    v15 = *(_QWORD **)(result + 56);
    v14 = *(uint64_t **)(result + 64);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **(_QWORD **)(result + 136);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(_QWORD *)(result + 112);
    v30 = *(_QWORD **)(result + 128);
    v31 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v6);
    v32 = *(_QWORD *)(result + 36);
    v33 = v15[1];
    v34 = (char *)(*v15 + v16 * v11 + 2 * v32);
    v35 = v15[2];
    v36 = v35 == 0;
    v37 = v35 + v18 * v11 + 2 * v32;
    if (v36)
      v37 = 0;
    v38 = (float *)(*v30 + v31 * v19 + 16 * v29);
    v39 = *(unsigned __int8 *)(v13 + 124);
    if (v39 >= 0x11)
      v40 = 0;
    else
      v40 = 16 - v39;
    v41 = v33 + v17 * (v11 / 2) + 2 * v32;
    result = v40;
    do
    {
      v42 = (char *)v38 + v19;
      v43 = &v34[v16];
      if (v10)
      {
        v44 = 0;
        if (v37)
          v45 = 0.0;
        else
          v45 = 1.0;
        v46 = &v34[v16];
        v47 = (float *)((char *)v38 + v19);
        do
        {
          v48 = (unsigned __int16 *)(v41 + 2 * v44);
          v49 = (float)(*v48 >> result) - v23;
          v50 = (float)(v48[1] >> result) - v23;
          v51 = v24 * (float)((float)(*(unsigned __int16 *)v34 >> result) - v22);
          v52 = v25 * v50;
          v53 = v24 * (float)((float)(*((unsigned __int16 *)v34 + 1) >> result) - v22);
          v34 += 4;
          v54 = v28 * v49;
          v55 = (float)(v27 * v50) + (float)(v49 * v26);
          v56 = v24 * (float)((float)(*(unsigned __int16 *)v46 >> result) - v22);
          v57 = v24 * (float)((float)(*((unsigned __int16 *)v46 + 1) >> result) - v22);
          v38[2] = v54 + v51;
          v38[3] = v45;
          v46 += 4;
          v38[6] = v54 + v53;
          v38[7] = v45;
          *v38 = v52 + v51;
          v38[1] = v51 + v55;
          v38[4] = v52 + v53;
          v38[5] = v55 + v53;
          v38 += 8;
          *v47 = v52 + v56;
          v47[1] = v55 + v56;
          v47[2] = v54 + v56;
          v47[3] = v45;
          v47[4] = v52 + v57;
          v47[5] = v55 + v57;
          v47[6] = v54 + v57;
          v47[7] = v45;
          v47 += 8;
          v44 += 2;
        }
        while (v10 > v44);
      }
      v34 = &v43[v16];
      v41 += v17;
      v37 += v18 + v18;
      v38 = (float *)&v42[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t VTTemporalFilterSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTTemporalFilterSessionGetTypeID_sRegisterVTTemporalFilterSessionOnce, RegisterVTTemporalFilterSession);
  return sVTTemporalFilterSessionID;
}

void RegisterVTTemporalFilterSession()
{
  sVTTemporalFilterSessionID = _CFRuntimeRegisterClass();
  sVTTemporalFilterSessionPropertyCallbacks = 0;
  unk_1EE2852C0 = VTTemporalFilterSessionCopySupportedPropertyDictionary;
  qword_1EE2852C8 = (uint64_t)VTTemporalFilterSessionSessionSetProperty;
  unk_1EE2852D0 = VTTemporalFilterSessionCopyProperty;
  qword_1EE2852D8 = (uint64_t)VTTemporalFilterSessionSetProperties;
  unk_1EE2852E0 = VTTemporalFilterSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTTemporalFilterSessionPropertyCallbacks, (const void *)sVTTemporalFilterSessionID);
}

uint64_t VTTemporalFilterSessionCreate(const __CFAllocator *a1, const void *a2, int a3, int a4, const void *a5, const void *a6, const void *a7, const void *a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t Instance;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t TemporalFilterInstance;
  const __CFAllocator *v27;
  CFMutableArrayRef Mutable;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  CFDictionaryRef poolAttributes;

  poolAttributes = 0;
  if (!a11)
    return FigSignalErrorAt();
  if (!a9
    || (*a11 = 0,
        MEMORY[0x1940281CC](&VTTemporalFilterSessionGetTypeID_sRegisterVTTemporalFilterSessionOnce, RegisterVTTemporalFilterSession), (Instance = _CFRuntimeCreateInstance()) == 0))
  {
    v32 = FigSignalErrorAt();
    goto LABEL_28;
  }
  v20 = Instance;
  if (a2)
    v21 = CFRetain(a2);
  else
    v21 = 0;
  *(_QWORD *)(v20 + 40) = v21;
  if (a5)
    v22 = CFRetain(a5);
  else
    v22 = 0;
  *(_QWORD *)(v20 + 48) = v22;
  *(_DWORD *)(v20 + 56) = a3;
  *(_DWORD *)(v20 + 60) = a4;
  *(_QWORD *)(v20 + 104) = FigSimpleMutexCreate();
  if (a6)
    v23 = CFRetain(a6);
  else
    v23 = 0;
  *(_QWORD *)(v20 + 112) = v23;
  if (a7)
    v24 = CFRetain(a7);
  else
    v24 = 0;
  *(_QWORD *)(v20 + 120) = v24;
  if (a8)
    v25 = CFRetain(a8);
  else
    v25 = 0;
  *(_QWORD *)(v20 + 128) = v25;
  FigCFDictionaryGetInt32IfPresent();
  if (*(_QWORD *)(v20 + 120))
  {
    TemporalFilterInstance = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(v20, (uint64_t)CFSTR("output"), &poolAttributes);
    if ((_DWORD)TemporalFilterInstance)
      goto LABEL_31;
    TemporalFilterInstance = CVPixelBufferPoolCreate(a1, poolAttributes, *(CFDictionaryRef *)(v20 + 120), (CVPixelBufferPoolRef *)(v20 + 184));
    if ((_DWORD)TemporalFilterInstance)
      goto LABEL_31;
  }
  *(_QWORD *)(v20 + 88) = a9;
  *(_QWORD *)(v20 + 96) = a10;
  *(_QWORD *)(v20 + 216) = FigSimpleMutexCreate();
  v27 = CFGetAllocator((CFTypeRef)v20);
  Mutable = CFArrayCreateMutable(v27, 0, 0);
  *(_QWORD *)(v20 + 224) = 1;
  *(_QWORD *)(v20 + 232) = Mutable;
  *(_QWORD *)(v20 + 240) = dispatch_group_create();
  TemporalFilterInstance = VTSelectAndCreateTemporalFilterInstance(*(_QWORD *)(v20 + 40), (uint64_t)a1, *(_QWORD *)(v20 + 48), v20 + 24);
  if ((_DWORD)TemporalFilterInstance)
  {
LABEL_31:
    v32 = TemporalFilterInstance;
    goto LABEL_27;
  }
  *(_QWORD *)(v20 + 32) = v20;
  v29 = *(_QWORD *)(v20 + 24);
  v30 = *(_QWORD *)(v20 + 56);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v31)
  {
    v32 = 4294954514;
    goto LABEL_27;
  }
  v32 = v31(v29, v20 + 32, v30);
  if ((_DWORD)v32)
  {
LABEL_27:
    CFRelease((CFTypeRef)v20);
    goto LABEL_28;
  }
  *a11 = v20;
LABEL_28:
  if (poolAttributes)
    CFRelease(poolAttributes);
  return v32;
}

uint64_t vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  const __CFDictionary *v6;
  const __CFString *Value;
  const __CFString *v8;
  const __CFString *v9;
  const __CFAllocator *v10;
  const __CFString *v11;
  const __CFAllocator *v12;
  uint64_t v13;

  v6 = *(const __CFDictionary **)(a1 + 128);
  if (v6)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("ShortName"));
    v8 = Value;
    if (!a2)
    {
      if (!Value)
      {
        v9 = 0;
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    v8 = CFSTR("filter");
    if (!a2)
    {
LABEL_7:
      v11 = (const __CFString *)CFRetain(v8);
      goto LABEL_8;
    }
  }
  v10 = CFGetAllocator((CFTypeRef)a1);
  v11 = CFStringCreateWithFormat(v10, 0, CFSTR("%@-%@"), v8, a2);
LABEL_8:
  v9 = v11;
LABEL_9:
  v12 = CFGetAllocator((CFTypeRef)a1);
  v13 = VTCreatePixelBufferPoolAttributesWithName(v12, *(unsigned int *)(a1 + 136), v9, a3);
  if (v9)
    CFRelease(v9);
  return v13;
}

void VTTemporalFilterSessionInvalidate(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  NSObject *v17;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    VTTemporalFilterSessionCompleteFrames(a1);
    *(_BYTE *)(a1 + 16) = 1;
    v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 48) = 0;
    }
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 104) = 0;
    v5 = *(const void **)(a1 + 112);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 112) = 0;
    }
    v6 = *(const void **)(a1 + 120);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v7 = *(const void **)(a1 + 128);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v8 = *(const void **)(a1 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 144) = 0;
    }
    v9 = *(const void **)(a1 + 152);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v10 = *(const void **)(a1 + 160);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 160) = 0;
    }
    v11 = *(const void **)(a1 + 168);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 168) = 0;
    }
    v12 = *(const void **)(a1 + 176);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 176) = 0;
    }
    v13 = *(const void **)(a1 + 184);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 184) = 0;
    }
    v14 = *(const void **)(a1 + 192);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 192) = 0;
    }
    v15 = *(const void **)(a1 + 200);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 200) = 0;
    }
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 216) = 0;
    v16 = *(const void **)(a1 + 232);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v17 = *(NSObject **)(a1 + 240);
    if (v17)
    {
      dispatch_release(v17);
      *(_QWORD *)(a1 + 240) = 0;
    }
  }
}

uint64_t VTTemporalFilterSessionCompleteFrames(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __int128 *);
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  v3 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v3)
    return 4294954514;
  v5 = *MEMORY[0x1E0CA2E30];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  result = v3(v2, &v5);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 232))
    {
      dispatch_group_wait(*(dispatch_group_t *)(a1 + 240), 0xFFFFFFFFFFFFFFFFLL);
      return 0;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTTemporalFilterSessionProcessFrame(uint64_t a1, __CVBuffer *a2, __int128 *a3, uint64_t a4)
{
  __CFArray *v8;
  char *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(uint64_t, char *, CFTypeRef, CFTypeRef *, uint64_t);
  uint64_t v15;
  const void *v17;
  VTPixelTransferSessionRef *v18;
  const void *v19;
  const __CFAllocator *v20;
  uint64_t PixelBufferPoolAttributesWithNameSuffix;
  const __CFAllocator *v22;
  CVPixelBufferPoolRef *PixelBuffer;
  const __CFAllocator *v24;
  __int128 v25;
  uint64_t v26;
  CFTypeRef v27;
  CFTypeRef cf[2];
  uint64_t v29;

  v27 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16) || !*(_QWORD *)(a1 + 24) || !a2)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_17;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 216));
  v8 = *(__CFArray **)(a1 + 232);
  if (v8)
  {
    v9 = *(char **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v9 + 1;
    CFArrayAppendValue(v8, v9);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 240));
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 216));
  }
  else
  {
    v10 = FigSignalErrorAt();
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 216));
    if ((_DWORD)v10)
      goto LABEL_19;
    v9 = 0;
  }
  cf[0] = 0;
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
  if (*(_QWORD *)(a1 + 144) && !CVPixelBufferIsCompatibleWithAttributes())
  {
    if (*(_BYTE *)(a1 + 81))
    {
      v11 = 0;
      v10 = 4294955078;
      goto LABEL_10;
    }
    v18 = (VTPixelTransferSessionRef *)(a1 + 160);
    v17 = *(const void **)(a1 + 160);
    if (*(_BYTE *)(a1 + 208))
    {
      if (!v17)
      {
LABEL_30:
        v19 = *(const void **)(a1 + 176);
        if (v19)
        {
          CFRelease(v19);
          *(_QWORD *)(a1 + 176) = 0;
        }
        v20 = CFGetAllocator((CFTypeRef)a1);
        PixelBufferPoolAttributesWithNameSuffix = VTPixelTransferSessionCreate(v20, (VTPixelTransferSessionRef *)(a1 + 160));
        if ((_DWORD)PixelBufferPoolAttributesWithNameSuffix
          || (PixelBufferPoolAttributesWithNameSuffix = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(a1, (uint64_t)CFSTR("input"), (__CFDictionary **)cf), (_DWORD)PixelBufferPoolAttributesWithNameSuffix))
        {
          v10 = PixelBufferPoolAttributesWithNameSuffix;
          v11 = 0;
          goto LABEL_10;
        }
        v11 = CVPixelBufferCopyCreationAttributes(a2);
        v22 = CFGetAllocator((CFTypeRef)a1);
        PixelBuffer = VTBuildPixelBufferPools2(v22, *(const __CFDictionary **)(a1 + 144), v11, (const __CFDictionary *)cf[0], *(_QWORD *)(a1 + 56), 0, 0, 0, 0, 0, (CVPixelBufferPoolRef *)(a1 + 176), 0, 0, 0);
        if ((_DWORD)PixelBuffer)
          goto LABEL_38;
        *(_BYTE *)(a1 + 208) = 0;
LABEL_36:
        v24 = CFGetAllocator((CFTypeRef)a1);
        PixelBuffer = (CVPixelBufferPoolRef *)CVPixelBufferPoolCreatePixelBuffer(v24, *(CVPixelBufferPoolRef *)(a1 + 176), (CVPixelBufferRef *)&v27);
        if (!(_DWORD)PixelBuffer)
          PixelBuffer = (CVPixelBufferPoolRef *)VTPixelTransferSessionTransferImage(*v18, a2, (CVPixelBufferRef)v27);
LABEL_38:
        v10 = (uint64_t)PixelBuffer;
        goto LABEL_10;
      }
    }
    else
    {
      if (!v17)
        goto LABEL_30;
      if (*(_QWORD *)(a1 + 176))
      {
        v11 = 0;
        goto LABEL_36;
      }
    }
    CFRelease(v17);
    *v18 = 0;
    goto LABEL_30;
  }
  v10 = 0;
  v11 = 0;
  v27 = CFRetain(a2);
LABEL_10:
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
  if (cf[0])
    CFRelease(cf[0]);
  if (v11)
    CFRelease(v11);
  if ((_DWORD)v10)
  {
    if (v9)
      vtTemporalFilterSessionTrackFrameExitingPlugin(a1, v9);
    goto LABEL_19;
  }
  v12 = *(_QWORD *)(a1 + 24);
  v13 = v27;
  v25 = *a3;
  v26 = *((_QWORD *)a3 + 2);
  v14 = *(uint64_t (**)(uint64_t, char *, CFTypeRef, CFTypeRef *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
  if (!v14)
  {
    v10 = 4294954514;
    goto LABEL_19;
  }
  *(_OWORD *)cf = v25;
  v29 = v26;
  v15 = v14(v12, v9, v13, cf, a4);
LABEL_17:
  v10 = v15;
LABEL_19:
  if (v27)
    CFRelease(v27);
  return v10;
}

uint64_t vtTemporalFilterSessionTrackFrameExitingPlugin(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex FirstIndexOfValue;
  uint64_t v7;
  CFRange v9;

  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 216));
  v4 = *(const __CFArray **)(a1 + 232);
  if (!v4
    || CFArrayGetCount(v4) <= 0
    || (v5 = *(const __CFArray **)(a1 + 232),
        v9.length = CFArrayGetCount(v5),
        v9.location = 0,
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v9, a2),
        FirstIndexOfValue == -1))
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 232), FirstIndexOfValue);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 240));
    v7 = 0;
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 216));
  return v7;
}

uint64_t VTTemporalFilterPluginSessionSetInputPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  uint64_t v2;
  const void *v4;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *a1;
  if (!*a1 || *(_BYTE *)(v2 + 16))
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(v2 + 104));
  v4 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  *(_BYTE *)(v2 + 208) = 1;
  MEMORY[0x1940280D0](*(_QWORD *)(v2 + 104));
  return 0;
}

uint64_t VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  uint64_t v2;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  const __CFAllocator *v9;
  const __CFArray *v10;
  CFDictionaryRef v11;
  int v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFDictionaryRef poolAttributes;
  CFDictionaryRef resolvedDictionaryOut;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  poolAttributes = 0;
  if (!a1)
    return FigSignalErrorAt();
  v2 = *a1;
  if (!*a1 || *(_BYTE *)(v2 + 16))
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(v2 + 104));
  v4 = *(const void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  v6 = (_QWORD *)(v2 + 192);
  v5 = *(const void **)(v2 + 192);
  *(_BYTE *)(v2 + 209) = 1;
  if (v5)
  {
    CFRelease(v5);
    *v6 = 0;
  }
  v7 = *(void **)(v2 + 200);
  if (v7)
  {
    v8 = *(void **)(v2 + 152);
    resolvedDictionaryOut = 0;
    if (!v8)
    {
LABEL_20:
      v7 = (void *)CFRetain(v7);
LABEL_21:
      *(_QWORD *)(v2 + 192) = v7;
      v14 = *(const void **)(v2 + 184);
      if (v14)
      {
        CFRelease(v14);
        *(_QWORD *)(v2 + 184) = 0;
      }
      v15 = *(const void **)(v2 + 120);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(v2 + 120) = 0;
      }
      goto LABEL_30;
    }
    values[0] = CVPixelBufferPoolGetPixelBufferAttributes((CVPixelBufferPoolRef)v7);
    values[1] = v8;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
    if (!CVPixelBufferCreateResolvedAttributesDictionary(v9, v10, &resolvedDictionaryOut))
    {
      v11 = resolvedDictionaryOut;
      if (resolvedDictionaryOut)
      {
        v12 = 1;
        goto LABEL_15;
      }
      FigSignalErrorAt();
    }
    v12 = 0;
    v13 = 0;
    v11 = resolvedDictionaryOut;
    if (!resolvedDictionaryOut)
    {
LABEL_16:
      if (v10)
        CFRelease(v10);
      if (!v13)
      {
        v16 = *(const void **)(v2 + 184);
        if (v16)
          CFRelease(v16);
        v17 = *(CFTypeRef *)(v2 + 200);
        if (v17)
          v17 = CFRetain(v17);
        *(_QWORD *)(v2 + 184) = v17;
        goto LABEL_30;
      }
      v7 = *(void **)(v2 + 200);
      if (!v7)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_15:
    CFRelease(v11);
    v13 = v12;
    goto LABEL_16;
  }
LABEL_30:
  if (*v6 || !*(_QWORD *)(v2 + 152))
  {
    v18 = 0;
  }
  else
  {
    v19 = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(v2, 0, &poolAttributes);
    if (!(_DWORD)v19)
    {
      v20 = CFGetAllocator((CFTypeRef)v2);
      v19 = CVPixelBufferPoolCreate(v20, poolAttributes, *(CFDictionaryRef *)(v2 + 152), (CVPixelBufferPoolRef *)(v2 + 192));
    }
    v18 = v19;
  }
  MEMORY[0x1940280D0](*(_QWORD *)(v2 + 104));
  if (poolAttributes)
    CFRelease(poolAttributes);
  return v18;
}

uint64_t VTTemporalFilterPluginSessionGetOutputPixelBufferPool(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 && (v1 = *a1) != 0 && !*(_BYTE *)(v1 + 16))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v1 + 104));
    v2 = *(_QWORD *)(v1 + 192);
    MEMORY[0x1940280D0](*(_QWORD *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginSessionEmitOutputFrame(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  CVPixelBufferRef v10;
  const void *v11;
  VTPixelTransferSessionRef *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, __int128 *, CVPixelBufferRef);
  __int128 v19;
  uint64_t v20;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a1)
    return FigSignalErrorAt();
  v5 = *a1;
  if (!*a1 || *(_BYTE *)(v5 + 16))
    return FigSignalErrorAt();
  v9 = a2;
  v10 = 0;
  if (!(_DWORD)a2 && a5)
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
    if (!*(_QWORD *)(v5 + 120) || CVPixelBufferIsCompatibleWithAttributes())
    {
      v9 = 0;
      pixelBufferOut = (CVPixelBufferRef)CFRetain(a5);
LABEL_19:
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
      v10 = pixelBufferOut;
      goto LABEL_20;
    }
    v12 = (VTPixelTransferSessionRef *)(v5 + 168);
    v11 = *(const void **)(v5 + 168);
    if (*(_BYTE *)(v5 + 209))
    {
      if (v11)
      {
        CFRelease(v11);
        *v12 = 0;
      }
    }
    else if (v11)
    {
      goto LABEL_15;
    }
    v13 = CFGetAllocator((CFTypeRef)v5);
    v14 = VTPixelTransferSessionCreate(v13, (VTPixelTransferSessionRef *)(v5 + 168));
    if ((_DWORD)v14)
    {
LABEL_18:
      v9 = v14;
      goto LABEL_19;
    }
    *(_BYTE *)(v5 + 209) = 0;
LABEL_15:
    if (*(_QWORD *)(v5 + 184))
    {
      v15 = CFGetAllocator((CFTypeRef)v5);
      v14 = CVPixelBufferPoolCreatePixelBuffer(v15, *(CVPixelBufferPoolRef *)(v5 + 184), &pixelBufferOut);
      if (!(_DWORD)v14)
        v14 = VTPixelTransferSessionTransferImage(*v12, (CVPixelBufferRef)a5, pixelBufferOut);
    }
    else
    {
      v14 = FigSignalErrorAt();
    }
    goto LABEL_18;
  }
LABEL_20:
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, CVPixelBufferRef))(v5 + 88);
  v16 = *(_QWORD *)(v5 + 96);
  v19 = *a4;
  v20 = *((_QWORD *)a4 + 2);
  v17(v16, v9, a3, &v19, v10);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return 0;
}

uint64_t VTTemporalFilterPluginSessionConcludeInputFrame(uint64_t *a1, const void *a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0 && !*(_BYTE *)(v2 + 16))
    return vtTemporalFilterSessionTrackFrameExitingPlugin(v2, a2);
  else
    return FigSignalErrorAt();
}

uint64_t VTTemporalFilterPluginSessionGetClientInputPixelBufferAttributesHint(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 && (v1 = *a1) != 0 && !*(_BYTE *)(v1 + 16))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v1 + 104));
    v2 = *(_QWORD *)(v1 + 112);
    MEMORY[0x1940280D0](*(_QWORD *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginSessionGetClientOutputPixelBufferAttributes(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 && (v1 = *a1) != 0 && !*(_BYTE *)(v1 + 16))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v1 + 104));
    v2 = *(_QWORD *)(v1 + 120);
    MEMORY[0x1940280D0](*(_QWORD *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginGetClassID()
{
  MEMORY[0x1940281CC](&VTTemporalFilterPluginGetClassID_sRegisterVTTemporalFilterTypeOnce, RegisterVTTemporalFilterPluginType);
  return sVTTemporalFilterPluginClassID;
}

uint64_t RegisterVTTemporalFilterPluginType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t VTTemporalFilterPluginGetTypeID()
{
  MEMORY[0x1940281CC](&VTTemporalFilterPluginGetClassID_sRegisterVTTemporalFilterTypeOnce, RegisterVTTemporalFilterPluginType);
  return CMBaseClassGetCFTypeID();
}

uint64_t VTTemporalFilterSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef cf;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  cf = 0;
  v13[0] = 0;
  v13[1] = 0;
  *a2 = 0;
  if (*(_BYTE *)(a1 + 16)
    || (v3 = *(_QWORD *)(a1 + 24),
        (v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32)) != 0)
    && ((v5 = v4(v3, &cf), v5 != -12782) ? (v6 = v5 == 0) : (v6 = 1), !v6))
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox(&v11);
    if (!(_DWORD)v7)
    {
      if (cf)
      {
        v13[0] = cf;
        v8 = 1;
      }
      else
      {
        v8 = 0;
      }
      if (v11)
        v13[v8] = v11;
      CFGetAllocator((CFTypeRef)a1);
      v7 = FigCFCreateCombinedDictionary();
    }
  }
  v9 = v7;
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v9;
}

uint64_t VTTemporalFilterSessionSessionSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *, const void *);
  CFTypeID v10;
  const void *v11;
  CFTypeRef v12;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
      goto LABEL_11;
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("FilterSourcePixelBufferAttributes"), a2)
    || CFEqual(CFSTR("FilterDestinationPixelBufferAttributes"), a2)
    || CFEqual(CFSTR("MaxLookBehind"), a2)
    || CFEqual(CFSTR("MaxLookAhead"), a2))
  {
    v6 = FigSignalErrorAt();
  }
  else if (CFEqual(CFSTR("RealTime"), a2) || CFEqual(CFSTR("AllowPixelTransfer"), a2))
  {
    v6 = vtTemporalFilterSessionValidateBooleanProperty(a3);
    if ((_DWORD)v6)
      return v6;
  }
  else
  {
    v6 = 0;
  }
  if (!CFEqual(CFSTR("AllowPixelTransfer"), a2))
  {
    if (CFEqual(CFSTR("OutputPixelBufferPool"), a2))
    {
      if (a3 && (v10 = CFGetTypeID(a3), v10 == CVPixelBufferPoolGetTypeID()) || (v6 = FigSignalErrorAt(), !(_DWORD)v6))
      {
        v11 = *(const void **)(a1 + 200);
        if (v11)
          CFRelease(v11);
        if (a3)
          v12 = CFRetain(a3);
        else
          v12 = 0;
        v6 = 0;
        *(_QWORD *)(a1 + 200) = v12;
      }
      return v6;
    }
    if (!vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
    {
      if (CFEqual(CFSTR("RealTime"), a2))
        *(_BYTE *)(a1 + 80) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
      return v6;
    }
LABEL_11:
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v8)
      return v8(v7, a2, a3);
    return 4294954514;
  }
  *(_BYTE *)(a1 + 81) = *MEMORY[0x1E0C9AE40] == (_QWORD)a3;
  return v6;
}

uint64_t VTTemporalFilterSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *, uint64_t, _QWORD *);
  uint64_t result;
  int v11;
  CFTypeRef *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
      goto LABEL_6;
    return FigSignalErrorAt();
  }
  if (!CFEqual(CFSTR("FilterSourcePixelBufferAttributes"), a2)
    && !CFEqual(CFSTR("FilterDestinationPixelBufferAttributes"), a2)
    && !CFEqual(CFSTR("AllowPixelTransfer"), a2)
    && !CFEqual(CFSTR("OutputPixelBufferPool"), a2)
    && !CFEqual(CFSTR("MaxLookBehind"), a2)
    && !CFEqual(CFSTR("MaxLookAhead"), a2))
  {
    result = CFEqual(CFSTR("RealTime"), a2);
    if (!(_DWORD)result)
      return result;
  }
  if (CFEqual(CFSTR("AllowPixelTransfer"), a2))
  {
    result = 0;
    v11 = *(unsigned __int8 *)(a1 + 81);
    v12 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v13 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_16:
    if (v11)
      v14 = v12;
    else
      v14 = v13;
    v15 = *v14;
    goto LABEL_37;
  }
  if (CFEqual(CFSTR("OutputPixelBufferPool"), a2))
  {
    v16 = *(const void **)(a1 + 200);
    if (v16)
    {
LABEL_22:
      v15 = CFRetain(v16);
LABEL_36:
      result = 0;
LABEL_37:
      *a4 = v15;
      return result;
    }
LABEL_35:
    v15 = 0;
    goto LABEL_36;
  }
  if (vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
  {
LABEL_6:
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v9)
      return v9(v8, a2, a3, a4);
    else
      return 4294954514;
  }
  if (CFEqual(CFSTR("FilterSourcePixelBufferAttributes"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v17 = *(CFTypeRef *)(a1 + 144);
    if (!v17)
    {
LABEL_29:
      *a4 = v17;
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      return 0;
    }
LABEL_28:
    v17 = CFRetain(v17);
    goto LABEL_29;
  }
  if (CFEqual(CFSTR("FilterDestinationPixelBufferAttributes"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v17 = *(CFTypeRef *)(a1 + 152);
    if (!v17)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (CFEqual(CFSTR("MaxLookBehind"), a2))
  {
    v16 = *(const void **)(a1 + 64);
    if (v16)
      goto LABEL_22;
    goto LABEL_35;
  }
  if (CFEqual(CFSTR("MaxLookAhead"), a2))
  {
    v16 = *(const void **)(a1 + 72);
    if (v16)
      goto LABEL_22;
    goto LABEL_35;
  }
  result = CFEqual(CFSTR("RealTime"), a2);
  if ((_DWORD)result)
  {
    result = 0;
    v11 = *(unsigned __int8 *)(a1 + 80);
    v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v13 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_16;
  }
  return result;
}

uint64_t VTTemporalFilterSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, char *);
  int v7;
  BOOL v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFDictionary *);
  uint64_t v15;
  uint64_t v16;
  __int128 context;
  __int128 v18;

  v15 = a1;
  v16 = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    LODWORD(v16) = FigSignalErrorAt();
    return v16;
  }
  if (a2)
  {
    context = 0u;
    v18 = 0u;
    v4 = vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
    if (v4)
    {
      v11 = v4;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v6 || ((v7 = v6(v5, (char *)&context + 8), v7 != -12782) ? (v8 = v7 == 0) : (v8 = 1), v8))
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtTemporalFilterSessionAddPropertyToPartition, &context);
        v11 = 0;
        v10 = (const __CFDictionary *)*((_QWORD *)&v18 + 1);
        v9 = (const __CFDictionary *)v18;
LABEL_12:
        if ((_QWORD)context)
          CFRelease((CFTypeRef)context);
        if (*((_QWORD *)&context + 1))
          CFRelease(*((CFTypeRef *)&context + 1));
        LODWORD(v16) = v11;
        if (!v11)
        {
          if (v9)
            CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtTemporalFilterSessionSetOneProperty, &v15);
          if (v10)
          {
            v12 = *(_QWORD *)(a1 + 24);
            v13 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 40);
            if (!v13 || (LODWORD(v16) = v13(v12, v10), (_DWORD)v16 == -12782))
            {
              LODWORD(v16) = 0;
              CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)vtTemporalFilterSessionSetOneProperty, &v15);
            }
          }
        }
        if (v9)
          CFRelease(v9);
        if (v10)
          CFRelease(v10);
        return v16;
      }
      v11 = v7;
      FigSignalErrorAt();
    }
    v9 = 0;
    v10 = 0;
    goto LABEL_12;
  }
  return v16;
}

uint64_t VTTemporalFilterSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD *);
  uint64_t result;

  *a3 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v6)
    return 0;
  result = v6(v5, a2, a3);
  if ((_DWORD)result == -12782)
    return 0;
  return result;
}

double vtTemporalFilterSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

CFTypeRef vtTemporalFilterSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTTemporalFilterSession]"));
}

__CFString *vtTemporalFilterSessionCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTTemporalFilterSession %p [%p]>{}"), a1, v4);
  return Mutable;
}

uint64_t vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x1940281CC](&sCreatePropertiesHandledByVideoToolboxOnce_1, vtTemporalFilterSessionCreatePropertiesHandledByVideoToolbox);
  if (!a1 || !sVTTemporalFilterSessionPropertiesHandledByVideoToolbox)
    return FigSignalErrorAt();
  *a1 = CFRetain((CFTypeRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox);
  return 0;
}

void vtTemporalFilterSessionCreatePropertiesHandledByVideoToolbox()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  __CFDictionary *Mutable;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sVTTemporalFilterSessionPropertiesHandledByVideoToolbox = (uint64_t)Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, CFSTR("FilterSourcePixelBufferAttributes"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("FilterDestinationPixelBufferAttributes"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("MaxLookBehind"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("MaxLookAhead"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("RealTime"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("AllowPixelTransfer"), v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, CFSTR("OutputPixelBufferPool"), v2);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

BOOL vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  _BOOL8 v2;
  CFDictionaryRef theDict;

  theDict = 0;
  vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&theDict);
  if (!theDict)
    return 0;
  v2 = CFDictionaryContainsKey(theDict, a1) != 0;
  if (theDict)
    CFRelease(theDict);
  return v2;
}

uint64_t vtTemporalFilterSessionValidateBooleanProperty(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return 0;
  v1 = CFGetTypeID(a1);
  if (v1 == CFBooleanGetTypeID())
    return 0;
  else
    return FigSignalErrorAt();
}

BOOL vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(uint64_t a1, const void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, CFDictionaryRef *);
  _BOOL8 v5;
  CFDictionaryRef theDict;

  theDict = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v4)
    return 0;
  v4(v3, &theDict);
  if (!theDict)
    return 0;
  v5 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict)
    CFRelease(theDict);
  return v5;
}

uint64_t vtTemporalFilterSessionSetOneProperty(CFStringRef propertyKey, CFTypeRef propertyValue, uint64_t a3)
{
  uint64_t result;

  result = VTSessionSetProperty(*(VTSessionRef *)a3, propertyKey, propertyValue);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

void vtTemporalFilterSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v7;

  if (CFDictionaryContainsKey(*a3, key))
  {
    Mutable = a3[2];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[2] = Mutable;
    }
LABEL_8:
    CFDictionarySetValue(Mutable, key, a2);
    return;
  }
  v7 = a3[1];
  if (v7 && CFDictionaryContainsKey(v7, key))
  {
    Mutable = a3[3];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[3] = Mutable;
    }
    goto LABEL_8;
  }
}

CFTypeRef VTTemporalFilterPluginCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTTemporalFilterPlugin]"));
}

uint64_t VTFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t VTBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t VTEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t VTSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

uint64_t vtRotatePixelRect180_1BPP_inplace_arm(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 0xF) != 0 || (a4 & 0xF) != 0 || (a5 & 0xF) != 0)
    return -1;
  v6 = a3 + a4 * a6;
  v7 = a6 >> 1;
  v8 = a2 - a5;
  v9 = a4 - a5;
  v10 = a5 >> 4;
  v11 = (unint64_t *)(v6 - v9);
  while (1)
  {
    do
    {
      v12 = bswap64(*a1);
      v13 = bswap64(a1[1]);
      v11 -= 2;
      v14 = bswap64(*v11);
      *a1 = bswap64(v11[1]);
      a1[1] = v14;
      a1 += 2;
      *v11 = v13;
      v11[1] = v12;
      --v10;
    }
    while (v10);
    if (!--v7)
      break;
    a1 = (unint64_t *)((char *)a1 + v8);
    v11 = (unint64_t *)((char *)v11 - v9);
    v10 = a5 >> 4;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_1BPP_arm(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;

  if ((a1 & 3) != 0 || (a3 & 3) != 0)
    return -1;
  if ((a2 & 0x1F) != 0 || (a4 & 0x1F) != 0 || (a5 & 0x1F) != 0)
  {
    if ((a2 & 0xF) == 0 && (a4 & 0xF) == 0 && (a5 & 0xF) == 0)
    {
      v15 = a3 + a4 * a6;
      v16 = a2 - a5;
      v17 = a4 - a5;
      v18 = a5 >> 4;
      v19 = (_QWORD *)(v15 - v17);
      while (1)
      {
        do
        {
          v20 = a1->i64[0];
          v21 = a1->u64[1];
          ++a1;
          v19 -= 2;
          *v19 = bswap64(v21);
          v19[1] = bswap64(v20);
          --v18;
        }
        while (v18);
        if (!--a6)
          break;
        a1 = (int8x16_t *)((char *)a1 + v16);
        v19 = (_QWORD *)((char *)v19 - v17);
        v18 = a5 >> 4;
      }
      return 0;
    }
    return -1;
  }
  v6 = a3 + a4 * a6;
  v7 = a2 - a5;
  v8 = a4 - a5;
  v9 = a5 >> 5;
  v10 = (int8x16_t *)(v6 - v8);
  while (1)
  {
    do
    {
      v11 = *a1;
      v12 = a1[1];
      a1 += 2;
      v13 = vrev64q_s8(v11);
      v14 = vrev64q_s8(v12);
      v10 -= 2;
      *v10 = vextq_s8(v14, v14, 8uLL);
      v10[1] = vextq_s8(v13, v13, 8uLL);
      --v9;
    }
    while (v9);
    if (!--a6)
      break;
    a1 = (int8x16_t *)((char *)a1 + v7);
    v10 = (int8x16_t *)((char *)v10 - v8);
    v9 = a5 >> 5;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_2BPP_inplace_arm(int16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int8x16_t v13;
  int8x16_t v14;

  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 0xF) != 0 || (a4 & 0xF) != 0 || (a5 & 0xF) != 0)
    return -1;
  v6 = a3 + a4 * a6;
  v7 = a6 >> 1;
  v8 = 2 * a5;
  v9 = a2 - v8;
  v10 = a4 - v8;
  v11 = v8 >> 4;
  v12 = (int16x8_t *)(v6 - v10);
  while (1)
  {
    do
    {
      v13 = (int8x16_t)vrev64q_s16(*a1);
      v14 = (int8x16_t)vrev64q_s16(*--v12);
      *(int8x16_t *)a1++ = vextq_s8(v14, v14, 8uLL);
      *(int8x16_t *)v12 = vextq_s8(v13, v13, 8uLL);
      --v11;
    }
    while (v11);
    if (!--v7)
      break;
    a1 = (int16x8_t *)((char *)a1 + v9);
    v12 = (int16x8_t *)((char *)v12 - v10);
    v11 = v8 >> 4;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_2BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x4_t *v21;
  int16x4_t v22;
  int16x4_t v23;

  if ((a1 & 3) != 0 || (a3 & 3) != 0)
    return -1;
  if ((a2 & 0x1F) != 0 || (a4 & 0x1F) != 0 || (a5 & 0x1F) != 0)
  {
    if ((a2 & 0xF) == 0 && (a4 & 0xF) == 0 && (a5 & 0xF) == 0)
    {
      v16 = a3 + a4 * a6;
      v17 = 2 * a5;
      v18 = a2 - v17;
      v19 = a4 - v17;
      v20 = v17 >> 4;
      v21 = (int16x4_t *)(v16 - v19);
      while (1)
      {
        do
        {
          v22 = *(int16x4_t *)a1;
          v23 = *(int16x4_t *)(a1 + 8);
          a1 += 16;
          v21 -= 2;
          *v21 = vrev64_s16(v23);
          v21[1] = vrev64_s16(v22);
          --v20;
        }
        while (v20);
        if (!--a6)
          break;
        a1 += v18;
        v21 = (int16x4_t *)((char *)v21 - v19);
        v20 = v17 >> 4;
      }
      return 0;
    }
    return -1;
  }
  v6 = a3 + a4 * a6;
  v7 = 2 * a5;
  v8 = a2 - v7;
  v9 = a4 - v7;
  v10 = v7 >> 5;
  v11 = (int8x16_t *)(v6 - v9);
  while (1)
  {
    do
    {
      v12 = *(int16x8_t *)a1;
      v13 = *(int16x8_t *)(a1 + 16);
      a1 += 32;
      v14 = (int8x16_t)vrev64q_s16(v12);
      v15 = (int8x16_t)vrev64q_s16(v13);
      v11 -= 2;
      *v11 = vextq_s8(v15, v15, 8uLL);
      v11[1] = vextq_s8(v14, v14, 8uLL);
      --v10;
    }
    while (v10);
    if (!--a6)
      break;
    a1 += v8;
    v11 = (int8x16_t *)((char *)v11 - v9);
    v10 = v7 >> 5;
  }
  return 0;
}

uint64_t vtRotatePixelRect90CW_1BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  int8x16_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int8x16_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int8x16_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;

  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 7) != 0 || (a4 & 7) != 0 || (a5 & 7) != 0 || (a6 & 7) != 0)
    return -1;
  v6 = (_QWORD *)(a3 + a5 - 8);
  v7 = v6;
  v8 = a5;
  for (i = a6 >> 3; ; i = a6 >> 3)
  {
    do
    {
      v11.i64[0] = *(_QWORD *)a1;
      v10 = (uint64_t *)(a1 + a2);
      v11.i64[1] = *v10;
      v12 = (uint64_t *)((char *)v10 + a2);
      v14.i64[0] = *v12;
      v13 = (uint64_t *)((char *)v12 + a2);
      v14.i64[1] = *v13;
      v15 = (uint64_t *)((char *)v13 + a2);
      v17.i64[0] = *v15;
      v16 = (uint64_t *)((char *)v15 + a2);
      v17.i64[1] = *v16;
      v18 = (uint64_t *)((char *)v16 + a2);
      v20.i64[0] = *v18;
      v19 = (uint64_t *)((char *)v18 + a2);
      v20.i64[1] = *v19;
      v21 = vuzp1q_s8(v11, v14);
      v22 = vuzp2q_s8(v11, v14);
      v23 = vuzp1q_s8(v21, v22);
      v24 = vuzp2q_s8(v21, v22);
      v25 = (int32x4_t)vuzp1q_s8(v23, v24);
      v26 = (int32x4_t)vuzp2q_s8(v23, v24);
      v27 = vuzp1q_s8(v17, v20);
      v28 = vuzp2q_s8(v17, v20);
      v29 = vuzp1q_s8(v27, v28);
      v30 = vuzp2q_s8(v27, v28);
      v31 = (int32x4_t)vuzp1q_s8(v29, v30);
      v32 = (int32x4_t)vuzp2q_s8(v29, v30);
      v33 = (int8x16_t)vtrn2q_s32(v25, v31);
      v34 = (int8x16_t)vtrn2q_s32(v26, v32);
      v35 = vrev64q_s8((int8x16_t)vtrn1q_s32(v25, v31));
      v36 = vrev64q_s8((int8x16_t)vtrn1q_s32(v26, v32));
      v37 = vrev64q_s8(v33);
      v38 = vrev64q_s8(v34);
      *v6 = v35.i64[0];
      v39 = (_QWORD *)((char *)v6 + a4);
      *v39 = v37.i64[0];
      v40 = (_QWORD *)((char *)v39 + a4);
      *v40 = v35.i64[1];
      v41 = (_QWORD *)((char *)v40 + a4);
      *v41 = v37.i64[1];
      v42 = (_QWORD *)((char *)v41 + a4);
      *v42 = v36.i64[0];
      v43 = (_QWORD *)((char *)v42 + a4);
      *v43 = v38.i64[0];
      v44 = (_QWORD *)((char *)v43 + a4);
      *v44 = v36.i64[1];
      v45 = (_QWORD *)((char *)v44 + a4);
      *v45 = v38.i64[1];
      v6 = (_QWORD *)((char *)v45 + a4);
      a1 = (uint64_t)v19 + a2 + -8 * a2 + 8;
      --i;
    }
    while (i);
    v8 -= 8;
    if (!v8)
      break;
    a1 = a1 - a6 + 8 * a2;
    v6 = --v7;
  }
  return 0;
}

uint64_t vtRotatePixelRect90CCW_1BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  int8x16_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int8x16_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int8x16_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;

  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 7) != 0 || (a4 & 7) != 0 || (a5 & 7) != 0 || (a6 & 7) != 0)
    return -1;
  v6 = (_QWORD *)(a3 + a4 * (a6 - 1));
  v7 = v6;
  v8 = -a4;
  v9 = a5;
  for (i = a6 >> 3; ; i = a6 >> 3)
  {
    do
    {
      v12.i64[0] = *(_QWORD *)a1;
      v11 = (uint64_t *)(a1 + a2);
      v12.i64[1] = *v11;
      v13 = (uint64_t *)((char *)v11 + a2);
      v15.i64[0] = *v13;
      v14 = (uint64_t *)((char *)v13 + a2);
      v15.i64[1] = *v14;
      v16 = (uint64_t *)((char *)v14 + a2);
      v18.i64[0] = *v16;
      v17 = (uint64_t *)((char *)v16 + a2);
      v18.i64[1] = *v17;
      v19 = (uint64_t *)((char *)v17 + a2);
      v21.i64[0] = *v19;
      v20 = (uint64_t *)((char *)v19 + a2);
      v21.i64[1] = *v20;
      v22 = vuzp1q_s8(v12, v15);
      v23 = vuzp2q_s8(v12, v15);
      v24 = vuzp1q_s8(v22, v23);
      v25 = vuzp2q_s8(v22, v23);
      v26 = (int32x4_t)vuzp1q_s8(v24, v25);
      v27 = (int32x4_t)vuzp2q_s8(v24, v25);
      v28 = vuzp1q_s8(v18, v21);
      v29 = vuzp2q_s8(v18, v21);
      v30 = vuzp1q_s8(v28, v29);
      v31 = vuzp2q_s8(v28, v29);
      v32 = (int32x4_t)vuzp1q_s8(v30, v31);
      v33 = (int32x4_t)vuzp2q_s8(v30, v31);
      v34 = vtrn1q_s32(v26, v32);
      v35 = vtrn2q_s32(v26, v32);
      v36 = vtrn1q_s32(v27, v33);
      v37 = vtrn2q_s32(v27, v33);
      *v6 = v34.i64[0];
      v38 = (_QWORD *)((char *)v6 + v8);
      *v38 = v35.i64[0];
      v39 = (_QWORD *)((char *)v38 + v8);
      *v39 = v34.i64[1];
      v40 = (_QWORD *)((char *)v39 + v8);
      *v40 = v35.i64[1];
      v41 = (_QWORD *)((char *)v40 + v8);
      *v41 = v36.i64[0];
      v42 = (_QWORD *)((char *)v41 + v8);
      *v42 = v37.i64[0];
      v43 = (_QWORD *)((char *)v42 + v8);
      *v43 = v36.i64[1];
      v44 = (_QWORD *)((char *)v43 + v8);
      *v44 = v37.i64[1];
      v6 = (_QWORD *)((char *)v44 + v8);
      a1 = (uint64_t)v20 + a2 + -8 * a2 + 8;
      --i;
    }
    while (i);
    v9 -= 8;
    if (!v9)
      break;
    a1 = a1 - a6 + 8 * a2;
    v6 = ++v7;
  }
  return 0;
}

uint64_t VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken != -1)
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken, &__block_literal_global_11);
  return VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_featureEnabled;
}

BOOL VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken != -1)
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken, &__block_literal_global_11);
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_featureEnabled)
    return 0;
  if (shouldUseMIGInterfaceForRemoteDecompressionSession_onceToken != -1)
    dispatch_once(&shouldUseMIGInterfaceForRemoteDecompressionSession_onceToken, &__block_literal_global_19);
  return shouldUseMIGInterfaceForRemoteDecompressionSession_featureEnabled != 1;
}

BOOL VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession()
{
  if (VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_onceToken != -1)
    dispatch_once(&VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_onceToken, &__block_literal_global_4);
  return !VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_prefersMIG
      && VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession();
}

uint64_t VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer()
{
  if (VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_onceToken != -1)
    dispatch_once(&VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_onceToken, &__block_literal_global_9);
  return VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_featureEnabled;
}

uint64_t VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_onceToken != -1)
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_onceToken, &__block_literal_global_12);
  return VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_featureEnabled;
}

uint64_t __deviceIsDarwinOSProduct_block_invoke()
{
  uint64_t result;

  result = os_variant_is_darwinos();
  deviceIsDarwinOSProduct_isDarwinOS = result;
  return result;
}

uint64_t __shouldUseMIGInterfaceForRemoteDecompressionSession_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  shouldUseMIGInterfaceForRemoteDecompressionSession_featureEnabled = result;
  return result;
}

uint64_t VTCelesteRotationNodeCreate(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  VTPixelTransferNodeGetClassID();
  v1 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v1;
}

uint64_t VTPixelTransferChainAppendCelesteRotationNode(uint64_t a1, int a2, char a3, char a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  uint64_t appended;
  CFTypeRef cf;

  cf = 0;
  VTCelesteRotationNodeCreate((uint64_t)&cf);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
    v11 = CFRetain(a5);
  else
    v11 = 0;
  *(_QWORD *)DerivedStorage = v11;
  *(_DWORD *)(DerivedStorage + 112) = a2;
  *(_BYTE *)(DerivedStorage + 116) = a3;
  *(_BYTE *)(DerivedStorage + 117) = a4;
  appended = VTPixelTransferChainAppendNode(a1, cf);
  if (cf)
    CFRelease(cf);
  return appended;
}

uint64_t VTPixelTransferNodeCelesteRotationSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID v9;
  uint64_t result;
  CFTypeID v11;
  CGSize v12;
  CGSize v13;
  CGSize size;
  const void *v15;
  CGRect v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("RotationEnableHighSpeedTransfer")))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        *(_BYTE *)(DerivedStorage + 32) = CFBooleanGetValue(a3);
        goto LABEL_17;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("RotationZeroFillData")))
  {
    if (!a3)
      return FigSignalErrorAt();
    v7 = CFBooleanGetTypeID();
    if (v7 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    *(_BYTE *)(DerivedStorage + 33) = CFBooleanGetValue(a3);
LABEL_17:
    result = *(_QWORD *)(DerivedStorage + 88);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      result = 0;
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    return result;
  }
  if (CFEqual(a2, CFSTR("RotationEnableHistogram")))
  {
    if (!a3)
      return FigSignalErrorAt();
    v8 = CFBooleanGetTypeID();
    if (v8 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    *(_BYTE *)(DerivedStorage + 34) = CFBooleanGetValue(a3);
    goto LABEL_17;
  }
  if (CFEqual(a2, CFSTR("ReducedPrecisionFractionalOffsets")))
  {
    if (!a3)
      return FigSignalErrorAt();
    v9 = CFBooleanGetTypeID();
    if (v9 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    *(_BYTE *)(DerivedStorage + 118) = CFBooleanGetValue(a3);
    goto LABEL_17;
  }
  if (!CFEqual(a2, CFSTR("RotationHistogramRectangle")))
    return 4294954396;
  if (a3)
  {
    v11 = CFDictionaryGetTypeID();
    if (v11 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    v12 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v16.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v16.size = v12;
    if (CGRectMakeWithDictionaryRepresentation(a3, &v16))
    {
      v16 = CGRectStandardize(v16);
      v16 = CGRectIntegral(v16);
    }
  }
  else
  {
    v13 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v16.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v16.size = v13;
  }
  size = v16.size;
  *(CGPoint *)(DerivedStorage + 48) = v16.origin;
  *(CGSize *)(DerivedStorage + 64) = size;
  v15 = *(const void **)(DerivedStorage + 88);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  return 0;
}

uint64_t VTPixelTransferNodeCelesteRotationCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void **v7;
  int v8;
  _BOOL4 v9;
  const void *DictionaryRepresentation;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  if (CFEqual(a2, CFSTR("RotationEnableHighSpeedTransfer")))
  {
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    v8 = *(unsigned __int8 *)(DerivedStorage + 32);
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("ScalingSupported")))
  {
    v7 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_11:
    DictionaryRepresentation = *v7;
LABEL_12:
    DictionaryRepresentation = CFRetain(DictionaryRepresentation);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("NonIntegralSourceBoundingOriginSupported")))
  {
    v9 = hardwareSupportsNonIntegralSrcOffset();
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v9)
      v7 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("RotationZeroFillData")))
  {
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    v8 = *(unsigned __int8 *)(DerivedStorage + 33);
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("RotationEnableHistogram")))
  {
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    v8 = *(unsigned __int8 *)(DerivedStorage + 34);
LABEL_3:
    if (!v8)
      v7 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("RotationHistogramData")))
  {
    DictionaryRepresentation = *(const void **)(DerivedStorage + 40);
    if (!DictionaryRepresentation)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!CFEqual(a2, CFSTR("RotationHistogramRectangle")))
    return 4294954396;
  if (CGRectIsNull(*(CGRect *)(DerivedStorage + 48)))
    DictionaryRepresentation = 0;
  else
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(DerivedStorage + 48));
LABEL_13:
  v11 = 0;
  *a4 = DictionaryRepresentation;
  return v11;
}

BOOL hardwareSupportsNonIntegralSrcOffset()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  uint64_t valuePtr;

  if ((isH3Platform_checked_0 & 1) == 0)
  {
    v0 = *MEMORY[0x1E0CBBAA8];
    v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
    MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      v3 = MatchingService;
      valuePtr = 0;
      v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
      if (v4)
      {
        v5 = v4;
        Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("IOSurfaceAcceleratorScalerVersion"));
        if (Value)
        {
          v7 = Value;
          v8 = CFGetTypeID(Value);
          if (v8 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr);
            if (valuePtr == 131079 || valuePtr == 131074)
              isH3Platform_isH3Platform_0 = 1;
          }
        }
        CFRelease(v5);
      }
      IOObjectRelease(v3);
    }
    isH3Platform_checked_0 = 1;
  }
  return (isH3Platform_isH3Platform_0 & 1) == 0;
}

uint64_t VTPixelTransferNodeCelesteRotationCopySupportedPropertyDictionary(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  uint64_t v11;
  void *values;
  const __CFString *v14;
  void *keys;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a2 = 0;
  keys = CFSTR("PropertyType");
  v16 = CFSTR("ReadWriteStatus");
  values = CFSTR("Boolean");
  v14 = CFSTR("ReadWrite");
  v7 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 2, v4, v5);
  if (!v7)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v8 = v7;
  keys = CFSTR("PropertyType");
  v16 = CFSTR("ReadWriteStatus");
  values = CFSTR("Boolean");
  v14 = CFSTR("ReadOnly");
  v9 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v9)
  {
    v11 = FigSignalErrorAt();
    CFRelease(v8);
LABEL_8:
    if (!Mutable)
      return v11;
    goto LABEL_4;
  }
  v10 = v9;
  CFDictionarySetValue(Mutable, CFSTR("RotationEnableHighSpeedTransfer"), v8);
  CFDictionarySetValue(Mutable, CFSTR("ScalingSupported"), v8);
  CFDictionarySetValue(Mutable, CFSTR("NonIntegralSourceBoundingOriginSupported"), v8);
  CFDictionarySetValue(Mutable, CFSTR("RotationZeroFillData"), v8);
  CFDictionarySetValue(Mutable, CFSTR("RotationEnableHistogram"), v8);
  CFDictionarySetValue(Mutable, CFSTR("RotationHistogramData"), v10);
  CFDictionarySetValue(Mutable, CFSTR("RotationHistogramRectangle"), v8);
  *a2 = Mutable;
  CFRelease(v8);
  v11 = 0;
  Mutable = v10;
LABEL_4:
  CFRelease(Mutable);
  return v11;
}

uint64_t vt_Rotate_Celeste(int a1, __CVBuffer *a2, const __CFDictionary *a3, CVPixelBufferRef pixelBuffer, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, const __CFDictionary *a13, int a14, int a15, int a16)
{
  OSType PixelFormatType;
  IOSurfaceRef IOSurface;
  IOSurfaceRef v31;
  uint64_t DerivedStorage;
  uint64_t v33;
  const void *v34;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v37;
  double v38;
  double v39;
  const __CFAllocator *v40;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  CFIndex v43;
  __CFDictionary *v44;
  const void *v45;
  int v46;
  int v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  mach_port_t v63;
  const __CFDictionary *v64;
  io_service_t MatchingService;
  io_object_t v66;
  CFTypeRef v67;
  const void *v68;
  int v69;
  int v70;
  unsigned __int16 v71;
  int v72;
  int v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  unsigned __int16 v76;
  int v77;
  __IOSurface *v78;
  size_t PlaneCount;
  size_t v80;
  uint64_t v81;
  char v82;
  int CompressionTypeOfPlane;
  int v84;
  signed int v85;
  unsigned __int16 v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned __int16 v91;
  int v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  int v95;
  __IOSurface *v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  char v100;
  int v101;
  int v102;
  int v103;
  mach_port_t v104;
  const __CFDictionary *v105;
  io_service_t v106;
  io_object_t v107;
  const __CFDictionary *v108;
  const __CFDictionary *v109;
  const __CFNumber *Value;
  const __CFNumber *v111;
  CFTypeID v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  char v119;
  int v120;
  int v121;
  unsigned __int16 v122;
  int v123;
  double v124;
  double v125;
  double v126;
  double v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  BOOL v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  const void *v139;
  __CFDictionary *Mutable;
  const void *v141;
  CFNumberRef v142;
  const void **v143;
  int v144;
  int v145;
  double v146;
  double v147;
  const __CFAllocator *v148;
  CFNumberRef v149;
  CFNumberRef v150;
  CFNumberRef v151;
  CFNumberRef v152;
  CFNumberRef v153;
  const void *v154;
  CFStringRef *v155;
  int v156;
  unsigned __int16 v157;
  const void *v158;
  const __CFString *v159;
  CFTypeRef v160;
  const __CFString *v161;
  CFTypeRef v162;
  int v163;
  float v164;
  float v165;
  float v166;
  char v167;
  char v168;
  char v169;
  char v170;
  float v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  size_t Height;
  size_t Width;
  size_t v181;
  char v182;
  size_t v183;
  int v184;
  int v185;
  int v186;
  signed int v187;
  OSType v188;
  _OWORD valuePtr[7];
  int v192;
  UInt8 *bytes;
  UInt8 *v194;
  UInt8 *v195;
  _OWORD v196[7];
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  IOSurface = CVPixelBufferGetIOSurface(a2);
  v31 = CVPixelBufferGetIOSurface(pixelBuffer);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 34))
  {
    v34 = *(const void **)(DerivedStorage + 40);
    if (v34)
      CFRelease(v34);
    *(_QWORD *)(v33 + 40) = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  }
  if (!IOSurface)
  {
    if ((vt_Rotate_Celeste_sAlreadyLogged & 1) == 0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      vt_Rotate_Celeste_sAlreadyLogged = 1;
    }
    return FigSignalErrorAt();
  }
  if (!v31)
  {
    if ((vt_Rotate_Celeste_sAlreadyLogged_5 & 1) == 0)
    {
      v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      vt_Rotate_Celeste_sAlreadyLogged_5 = 1;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(IOSurface, v31))
    return FigSignalErrorAt();
  if (!hardwareSupportsNonIntegralSrcOffset())
  {
    v38 = a5 + a7;
    a5 = floor(a5);
    v39 = a6 + a8;
    a6 = floor(a6);
    a7 = ceil(v38) - a5;
    a8 = ceil(v39) - a6;
  }
  v188 = CVPixelBufferGetPixelFormatType(a2);
  v187 = CVPixelBufferGetPixelFormatType(pixelBuffer);
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v183 = CVPixelBufferGetWidth(pixelBuffer);
  v181 = CVPixelBufferGetHeight(pixelBuffer);
  v184 = a14;
  if (a3 && a13)
  {
    v40 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Count = CFDictionaryGetCount(a3);
    MutableCopy = CFDictionaryCreateMutableCopy(v40, Count, a3);
    v43 = CFDictionaryGetCount(a13);
    v44 = CFDictionaryCreateMutableCopy(v40, v43, a13);
    v45 = (const void *)*MEMORY[0x1E0CA8EE8];
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8EE8]);
    CFDictionaryRemoveValue(v44, v45);
    v46 = VTDoColorDictionariesMatch(MutableCopy, v44);
    if (MutableCopy)
      CFRelease(MutableCopy);
    v186 = v46;
    if (v44)
      CFRelease(v44);
  }
  else
  {
    v186 = VTDoColorDictionariesMatch(0, 0);
  }
  v47 = v188;
  v48 = 0x1EE284000;
  v49 = (_BYTE *)&unk_1ECED9000;
  v50 = (_BYTE *)&unk_1ECED9000;
  v51 = (_BYTE *)&unk_1ECED9000;
  v52 = (_BYTE *)&unk_1ECED9000;
  v53 = (_BYTE *)&unk_1ECED9000;
  v54 = (_BYTE *)&unk_1ECED9000;
  v55 = (_BYTE *)&unk_1ECED9000;
  v56 = (_BYTE *)&unk_1ECED9000;
  v57 = (_BYTE *)&unk_1ECED9000;
  v58 = (_BYTE *)&unk_1ECED9000;
  v59 = (_BYTE *)&unk_1ECED9000;
  v60 = (_BYTE *)&unk_1ECED9000;
  v61 = (_BYTE *)&unk_1ECED9000;
  v62 = (_BYTE *)&unk_1ECED9000;
  if ((scalerCapabilities_checked_0 & 1) == 0)
  {
    v63 = *MEMORY[0x1E0CBBAA8];
    v64 = IOServiceMatching("AppleM2ScalerCSCDriver");
    MatchingService = IOServiceGetMatchingService(v63, v64);
    if (MatchingService)
    {
      v66 = MatchingService;
      *(_QWORD *)&valuePtr[0] = 0;
      v67 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
      if (v67)
      {
        v68 = v67;
        FigCFDictionaryGetFloatIfPresent();
        FigCFDictionaryGetFloatIfPresent();
        if (FigCFDictionaryGetFloatIfPresent())
          *(float *)&scalerCapabilities_maxHDownscale = 1.0 / *(float *)&scalerCapabilities_maxHDownscale;
        if (FigCFDictionaryGetFloatIfPresent())
          *(float *)&scalerCapabilities_maxVDownscale = 1.0 / *(float *)&scalerCapabilities_maxVDownscale;
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        *(_QWORD *)&valuePtr[0] = 0;
        FigCFDictionaryGetInt64IfPresent();
        CFRelease(v68);
      }
      IOObjectRelease(v66);
      v47 = v188;
    }
    scalerCapabilities_checked_0 = 1;
    v62 = &unk_1ECED9000;
    v48 = 0x1EE284000uLL;
    v49 = &unk_1ECED9000;
    v50 = &unk_1ECED9000;
    v51 = &unk_1ECED9000;
    v52 = &unk_1ECED9000;
    v53 = &unk_1ECED9000;
    v54 = &unk_1ECED9000;
    v55 = &unk_1ECED9000;
    v56 = &unk_1ECED9000;
    v57 = &unk_1ECED9000;
    v58 = &unk_1ECED9000;
    v59 = &unk_1ECED9000;
    v60 = (unsigned __int8 *)&unk_1ECED9000;
    v61 = (unsigned __int8 *)&unk_1ECED9000;
  }
  v172 = v53[899];
  v173 = v57[907];
  v69 = v60[912];
  v70 = v61[913];
  v163 = PixelFormatType;
  v164 = *(float *)(v48 + 3596);
  v165 = *(float *)&scalerCapabilities_maxVUpscale;
  v166 = *(float *)&scalerCapabilities_maxHDownscale;
  v171 = *(float *)&scalerCapabilities_maxHUpscale;
  v182 = v62[915];
  v185 = scalerCapabilities_hasSupportOut_colorConversion;
  v176 = v54[901];
  v177 = v58[909];
  v174 = v56[905];
  v175 = v55[903];
  v169 = v52[897];
  v170 = v49[891];
  v178 = v59[911];
  v167 = v51[895];
  v168 = v50[893];
  if (v47 <= 1530422831)
  {
    if (v47 > 762869295)
    {
      if (v47 > 875704421)
      {
        if (v47 <= 875836533)
        {
          if (v47 <= 875704933)
          {
            if (v47 == 875704422)
              goto LABEL_183;
            v72 = 875704438;
          }
          else
          {
            if (v47 == 875704934 || v188 == 875704950)
              goto LABEL_183;
            v72 = 875836518;
          }
          goto LABEL_159;
        }
        if (v47 <= 1278226487)
        {
          if (v47 == 875836534)
            goto LABEL_183;
          v72 = 1111970369;
          goto LABEL_159;
        }
        if (v47 == 1278226488)
        {
          if ((scalerCapabilities_hasSupportIn_L008 & 1) == 0)
            return FigSignalErrorAt();
          goto LABEL_183;
        }
        if (v47 == 1278226742)
        {
          if ((scalerCapabilities_hasSupportIn_L016 & 1) == 0)
            return FigSignalErrorAt();
          goto LABEL_183;
        }
        if (v47 != 1380411457)
          return FigSignalErrorAt();
        goto LABEL_167;
      }
      if (v47 > 792872768)
      {
        if (v47 <= 796419633)
        {
          if (v47 == 792872769)
            goto LABEL_167;
          v74 = 26160;
        }
        else
        {
          if (v47 == 796419634 || v188 == 796423728)
            goto LABEL_167;
          v74 = 30258;
        }
        v73 = v74 | 0x2F780000;
        goto LABEL_166;
      }
      if (v47 > 792225327)
      {
        if (v47 != 792225328)
        {
          v73 = 792229424;
LABEL_166:
          if (v188 != v73)
            return FigSignalErrorAt();
          goto LABEL_167;
        }
        goto LABEL_167;
      }
      if (v47 == 762869296)
        goto LABEL_167;
      v75 = 30258;
    }
    else
    {
      if (v47 <= 645424687)
      {
        if (v47 <= 645101103)
        {
          if (v47 != 641230384 && v188 != 641234480)
          {
            v73 = 641877825;
            goto LABEL_166;
          }
        }
        else if (((v47 - 645101104) > 4 || ((1 << (v47 - 48)) & 0x15) == 0)
               && (v188 - 645166640 > 4 || ((1 << (v188 - 48)) & 0x15) == 0))
        {
          return FigSignalErrorAt();
        }
        goto LABEL_167;
      }
      if (v47 <= 758670895)
      {
        if (v47 <= 645428783)
        {
          if (v47 == 645424688)
            goto LABEL_167;
          v71 = 26162;
        }
        else
        {
          if (v47 == 645428784 || v188 == 645428786)
            goto LABEL_167;
          v71 = 30512;
        }
        v73 = v71 | 0x26780000;
        goto LABEL_166;
      }
      if (v47 <= 759318336)
      {
        if (v47 != 758670896)
        {
          v73 = 758674992;
          goto LABEL_166;
        }
        goto LABEL_167;
      }
      if (v47 == 759318337 || v188 == 762865200)
        goto LABEL_167;
      v75 = 26162;
    }
    v73 = v75 | 0x2D780000;
    goto LABEL_166;
  }
  if (v47 > 1953903667)
  {
    if (v47 <= 2021078067)
    {
      if (v47 <= 2019963439)
      {
        if (v47 <= 2016686639)
        {
          if (v47 != 1953903668 && (v188 != 1999843442 || (scalerCapabilities_hasSupportIn_w30r & 1) == 0))
            return FigSignalErrorAt();
          goto LABEL_183;
        }
        if (v47 != 2016686640)
        {
          if (v47 != 2016686642)
          {
            if (v188 != 2016687156)
              return FigSignalErrorAt();
            goto LABEL_138;
          }
LABEL_149:
          if ((scalerCapabilities_hasSupportIn_2plane10bit422 & 1) == 0)
            return FigSignalErrorAt();
          goto LABEL_183;
        }
        goto LABEL_151;
      }
      if (v47 <= 2019963955)
      {
        if (v47 != 2019963440)
        {
          if (v47 != 2019963442)
            return FigSignalErrorAt();
          goto LABEL_149;
        }
        goto LABEL_151;
      }
      if (v47 != 2019963956)
      {
        if (v188 != 2021077552)
        {
          if (v188 != 2021077554)
            return FigSignalErrorAt();
          goto LABEL_149;
        }
LABEL_151:
        if ((scalerCapabilities_hasSupportIn_2plane10bit420 & 1) == 0)
          return FigSignalErrorAt();
        goto LABEL_183;
      }
LABEL_138:
      if ((scalerCapabilities_hasSupportIn_2plane10bit444 & 1) == 0)
        return FigSignalErrorAt();
      goto LABEL_183;
    }
    if (v47 <= 2084718400)
    {
      if (v47 > 2037741170)
      {
        if (v47 == 2037741171)
          goto LABEL_183;
        if (v188 == 2084070960)
          goto LABEL_167;
        v73 = 2084075056;
        goto LABEL_166;
      }
      if (v47 == 2021078068)
        goto LABEL_138;
      v72 = 2037741158;
LABEL_159:
      if (v188 != v72)
        return FigSignalErrorAt();
      goto LABEL_183;
    }
    if (v47 <= 2088265265)
    {
      if (v47 != 2084718401)
      {
        v76 = 26160;
        goto LABEL_163;
      }
    }
    else if (v47 != 2088265266 && v188 != 2088269360)
    {
      v76 = 30258;
LABEL_163:
      v73 = v76 | 0x7C780000;
      goto LABEL_166;
    }
LABEL_167:
    v78 = CVPixelBufferGetIOSurface(a2);
    if (v78)
    {
      PlaneCount = IOSurfaceGetPlaneCount(v78);
      if (PlaneCount)
      {
        v80 = PlaneCount;
        v81 = 0;
        v82 = 1;
        do
        {
          while (1)
          {
            CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
            if (CompressionTypeOfPlane != 2)
              break;
            v82 = 0;
            if (++v81 == v80)
              return FigSignalErrorAt();
          }
          if (CompressionTypeOfPlane == 4)
            v84 = v70;
          else
            v84 = 1;
          if (CompressionTypeOfPlane == 3)
            v84 = v69;
          if (!v84)
            v82 = 0;
          ++v81;
        }
        while (v81 != v80);
        if (!v82)
          return FigSignalErrorAt();
      }
    }
    goto LABEL_183;
  }
  if (v47 > 1885745713)
  {
    if (v47 > 1937125935)
    {
      if (v47 <= 1937126451)
      {
        if (v47 == 1937125936)
          goto LABEL_183;
        v72 = 1937125938;
      }
      else
      {
        if (v47 == 1937126452 || v188 == 1953903152)
          goto LABEL_183;
        v72 = 1953903154;
      }
      goto LABEL_159;
    }
    if (v47 <= 1886859823)
    {
      if (v47 != 1885745714)
      {
        if (v47 != 1885746228)
          return FigSignalErrorAt();
        goto LABEL_130;
      }
      goto LABEL_132;
    }
    if (v47 != 1886859824)
    {
      if (v188 != 1886859826)
      {
        if (v188 != 1886860340)
          return FigSignalErrorAt();
        goto LABEL_130;
      }
LABEL_132:
      if ((scalerCapabilities_hasSupportIn_2planePacked10bit422 & 1) == 0)
        return FigSignalErrorAt();
      goto LABEL_183;
    }
LABEL_142:
    if ((scalerCapabilities_hasSupportIn_2planePacked10bit420 & 1) == 0)
      return FigSignalErrorAt();
    goto LABEL_183;
  }
  if (v47 > 1647534391)
  {
    if (v47 <= 1882468913)
    {
      if (v47 == 1647534392)
      {
        if ((scalerCapabilities_hasSupportIn_b3a8 & 1) == 0)
          return FigSignalErrorAt();
        goto LABEL_183;
      }
      if (v47 != 1882468912)
        return FigSignalErrorAt();
    }
    else
    {
      if (v47 == 1882468914)
        goto LABEL_132;
      if (v47 == 1882469428)
      {
LABEL_130:
        if ((scalerCapabilities_hasSupportIn_2planePacked10bit444 & 1) == 0)
          return FigSignalErrorAt();
        goto LABEL_183;
      }
      if (v188 != 1885745712)
        return FigSignalErrorAt();
    }
    goto LABEL_142;
  }
  if (v47 > 1534617135)
  {
    if (v47 != 1534617136)
    {
      v77 = 1534621232;
LABEL_118:
      if (v188 != v77)
        return FigSignalErrorAt();
    }
  }
  else if (v47 != 1530422832)
  {
    v77 = 1530426928;
    goto LABEL_118;
  }
  if ((scalerCapabilities_hasSupportIn_mediaCompression & 1) == 0)
    return FigSignalErrorAt();
LABEL_183:
  v85 = v187;
  if (v187 <= 1530422831)
  {
    if (v187 > 762869295)
    {
      if (v187 > 875704421)
      {
        if (v187 > 875836533)
        {
          if (v187 > 1278226487)
          {
            if (v187 == 1278226488)
            {
              if ((v167 & 1) == 0)
                return FigSignalErrorAt();
              goto LABEL_334;
            }
            if (v187 == 1278226742)
            {
              if ((v169 & 1) == 0)
                return FigSignalErrorAt();
              goto LABEL_334;
            }
            v89 = 1380411457;
LABEL_317:
            if (v85 != v89)
              return FigSignalErrorAt();
            goto LABEL_318;
          }
          if (v187 == 875836534)
            goto LABEL_334;
          v88 = 1111970369;
        }
        else if (v187 <= 875704933)
        {
          if (v187 == 875704422)
            goto LABEL_334;
          v88 = 875704438;
        }
        else
        {
          if (v187 == 875704934 || v187 == 875704950)
            goto LABEL_334;
          v88 = 875836518;
        }
        goto LABEL_304;
      }
      if (v187 > 792872768)
      {
        if (v187 <= 796419633)
        {
          if (v187 == 792872769)
            goto LABEL_318;
          v91 = 26160;
        }
        else
        {
          if (v187 == 796419634 || v187 == 796423728)
            goto LABEL_318;
          v91 = 30258;
        }
        v89 = v91 | 0x2F780000;
        goto LABEL_316;
      }
      if (v187 > 792225327)
      {
        if (v187 == 792225328)
          goto LABEL_318;
        v89 = 792229424;
        goto LABEL_316;
      }
      if (v187 == 762869296)
        goto LABEL_318;
      v93 = 30258;
    }
    else
    {
      if (v187 <= 645424687)
      {
        if (v187 > 645101103)
        {
          if (((v187 - 645101104) > 4 || ((1 << (v187 - 48)) & 0x15) == 0)
            && ((v187 - 645166640) > 4 || ((1 << (v187 - 48)) & 0x15) == 0))
          {
            return FigSignalErrorAt();
          }
          goto LABEL_318;
        }
        if (v187 == 641230384 || v187 == 641234480)
        {
LABEL_318:
          v96 = CVPixelBufferGetIOSurface(pixelBuffer);
          if (v96)
          {
            v97 = IOSurfaceGetPlaneCount(v96);
            if (v97)
            {
              v98 = v97;
              v99 = 0;
              v100 = 1;
              do
              {
                while (1)
                {
                  v101 = IOSurfaceGetCompressionTypeOfPlane();
                  if (v101 != 2)
                    break;
                  v100 = 0;
                  if (++v99 == v98)
                    return FigSignalErrorAt();
                }
                if (v101 == 4)
                  v102 = v70;
                else
                  v102 = 1;
                if (v101 == 3)
                  v102 = v69;
                if (!v102)
                  v100 = 0;
                ++v99;
              }
              while (v99 != v98);
              if (!v100)
                return FigSignalErrorAt();
            }
          }
          goto LABEL_334;
        }
        v89 = 641877825;
        goto LABEL_316;
      }
      if (v187 <= 758670895)
      {
        if (v187 <= 645428783)
        {
          if (v187 == 645424688)
            goto LABEL_318;
          v86 = 26162;
        }
        else
        {
          if (v187 == 645428784 || v187 == 645428786)
            goto LABEL_318;
          v86 = 30512;
        }
        v89 = v86 | 0x26780000;
        goto LABEL_316;
      }
      if (v187 <= 759318336)
      {
        if (v187 == 758670896)
          goto LABEL_318;
        v89 = 758674992;
        goto LABEL_316;
      }
      if (v187 == 759318337 || v187 == 762865200)
        goto LABEL_318;
      v93 = 26162;
    }
    v89 = v93 | 0x2D780000;
LABEL_316:
    v85 = v187;
    goto LABEL_317;
  }
  if (v187 <= 1953903667)
  {
    if (v187 > 1885745713)
    {
      if (v187 > 1937125935)
      {
        if (v187 <= 1937126451)
        {
          if (v187 == 1937125936)
            goto LABEL_334;
          v88 = 1937125938;
        }
        else
        {
          if (v187 == 1937126452 || v187 == 1953903152)
            goto LABEL_334;
          v88 = 1953903154;
        }
        goto LABEL_304;
      }
      if (v187 <= 1886859823)
      {
        if (v187 != 1885745714)
        {
          v87 = 1885746228;
LABEL_272:
          if (v85 != v87)
            return FigSignalErrorAt();
          goto LABEL_273;
        }
LABEL_275:
        if ((v173 & 1) == 0)
          return FigSignalErrorAt();
        goto LABEL_334;
      }
      if (v187 != 1886859824)
      {
        v85 = v187;
        if (v187 != 1886859826)
        {
          v87 = 1886860340;
          goto LABEL_272;
        }
        goto LABEL_275;
      }
LABEL_286:
      if ((v174 & 1) == 0)
        return FigSignalErrorAt();
      goto LABEL_334;
    }
    if (v187 > 1647534391)
    {
      if (v187 <= 1882468913)
      {
        if (v187 == 1647534392)
        {
          if ((v168 & 1) != 0)
            goto LABEL_334;
          return FigSignalErrorAt();
        }
        v90 = 1882468912;
      }
      else
      {
        if (v187 == 1882468914)
          goto LABEL_275;
        if (v187 == 1882469428)
        {
LABEL_273:
          if ((v177 & 1) == 0)
            return FigSignalErrorAt();
LABEL_334:
          v103 = v185;
          if (v186)
            v103 = 1;
          if (v103 != 1)
            return FigSignalErrorAt();
          if (v188 == 2037741171 || v188 == 2037741158 || v187 == 2037741171 || v187 == 2037741158)
          {
            if ((hardwareSupportsYUVS_checked & 1) == 0)
            {
              v104 = *MEMORY[0x1E0CBBAA8];
              v105 = IOServiceMatching("AppleM2ScalerCSCDriver");
              v106 = IOServiceGetMatchingService(v104, v105);
              if (v106)
              {
                v107 = v106;
                *(_QWORD *)&valuePtr[0] = 0;
                v108 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v106, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
                if (v108)
                {
                  v109 = v108;
                  Value = (const __CFNumber *)CFDictionaryGetValue(v108, CFSTR("IOSurfaceAcceleratorFormatInInterleaved422"));
                  if (Value)
                  {
                    v111 = Value;
                    v112 = CFGetTypeID(Value);
                    if (v112 == CFNumberGetTypeID())
                    {
                      CFNumberGetValue(v111, kCFNumberLongLongType, valuePtr);
                      if (*(_QWORD *)&valuePtr[0])
                        hardwareSupportsYUVS_hasSupport = 1;
                    }
                  }
                  CFRelease(v109);
                }
                IOObjectRelease(v107);
              }
              hardwareSupportsYUVS_checked = 1;
            }
            if (hardwareSupportsYUVS_hasSupport != 1)
              return FigSignalErrorAt();
          }
          if (v184 > 179)
          {
            if (v184 != 270 && v184 != 180)
              return FigSignalErrorAt();
          }
          else if (v184 && v184 != 90)
          {
            return FigSignalErrorAt();
          }
          v113 = 0;
          v114 = a10 + a12;
          v115 = floor(a9);
          v116 = floor(a10);
          v117 = ceil(a9 + a11);
          v118 = ceil(v114);
          if (v187 > 1886859825)
          {
            v119 = v182;
            if (v187 <= 2019963441)
            {
              if (v187 > 2016686641)
              {
                v120 = v188;
                if (v187 == 2016686642)
                  goto LABEL_385;
                v121 = 2019963440;
              }
              else
              {
                v120 = v188;
                if (v187 == 1886859826)
                  goto LABEL_385;
                v121 = 2016686640;
              }
            }
            else if (v187 <= 2021077553)
            {
              v120 = v188;
              if (v187 == 2019963442)
                goto LABEL_385;
              v121 = 2021077552;
            }
            else
            {
              v120 = v188;
              if (v187 == 2021077554 || v187 == 2037741171)
                goto LABEL_385;
              v121 = 2037741158;
            }
          }
          else
          {
            v119 = v182;
            if (v187 <= 1882468911)
            {
              if (v187 > 875704933)
              {
                v120 = v188;
                if (v187 == 875704934)
                  goto LABEL_385;
                v122 = 12918;
              }
              else
              {
                v120 = v188;
                if (v187 == 875704422)
                  goto LABEL_385;
                v122 = 12406;
              }
              v121 = v122 | 0x34320000;
            }
            else if (v187 <= 1885745711)
            {
              v120 = v188;
              if (v187 == 1882468912)
                goto LABEL_385;
              v121 = 1882468914;
            }
            else
            {
              v120 = v188;
              if (v187 == 1885745712 || v187 == 1885745714)
                goto LABEL_385;
              v121 = 1886859824;
            }
          }
          if (v187 != v121)
            goto LABEL_402;
LABEL_385:
          v113 = v183 & 1;
          if (v187 <= 2016686639)
          {
            if (v187 <= 1882468911)
            {
              if (v187 == 875704422)
                goto LABEL_400;
              v123 = 875704438;
            }
            else
            {
              if (v187 == 1882468912 || v187 == 1885745712)
                goto LABEL_400;
              v123 = 1886859824;
            }
          }
          else
          {
            if (v187 <= 2019963441)
            {
              if (v187 != 2016686640 && v187 != 2016686642)
              {
                v123 = 2019963440;
                goto LABEL_399;
              }
LABEL_400:
              if ((v181 & 1) != 0)
                v113 = 1;
LABEL_402:
              v124 = v117 - v115;
              v125 = v118 - v116;
              if ((v119 & 1) != 0)
                goto LABEL_403;
              if (v120 > 875704949)
              {
                if (v120 != 875704950 && v188 != 2037741171)
                {
                  v136 = 2037741158;
LABEL_436:
                  if (v188 != v136)
                    goto LABEL_439;
                }
              }
              else if (v120 != 875704422 && v188 != 875704438)
              {
                v136 = 875704934;
                goto LABEL_436;
              }
              if (((unint64_t)a7 & 1) != 0 || ((unint64_t)a8 & 1) != 0)
                return FigSignalErrorAt();
LABEL_439:
              if (v187 > 875704949)
              {
                if (v187 != 875704950 && v187 != 2037741171)
                {
                  v137 = 2037741158;
LABEL_446:
                  if (v187 != v137)
                    goto LABEL_403;
                }
              }
              else if (v187 != 875704422 && v187 != 875704438)
              {
                v137 = 875704934;
                goto LABEL_446;
              }
              if (((unint64_t)v124 & 1) != 0 || ((unint64_t)v125 & 1) != 0)
                return FigSignalErrorAt();
LABEL_403:
              if (a5 < 0.0
                || a5 + a7 > (double)Width
                || a6 < 0.0
                || a6 + a8 > (double)Height
                || v115 < 0.0
                || v115 + v124 > (double)v183
                || v116 < 0.0
                || v116 + v125 > (double)v181)
              {
                return FigSignalErrorAt();
              }
              v126 = a8;
              v127 = a7;
              if (v184 != 90)
              {
                v126 = a8;
                v127 = a7;
                if (v184 != 270)
                {
                  v126 = a7;
                  v127 = a8;
                }
              }
              v128 = v124;
              v129 = v126;
              v130 = v128 / v129;
              if (v130 > v171 || v130 < v166)
                return FigSignalErrorAt();
              v131 = v125;
              v132 = v127;
              v133 = v131 / v132;
              v134 = v133 >= v164 && v133 <= v165;
              if (!v134 || !*(_QWORD *)(v33 + 24) && IOSurfaceAcceleratorCreate())
                return FigSignalErrorAt();
              IOSurfaceBindAccel();
              if (a15)
                v135 = (a16 != 0) | 2;
              else
                v135 = a16 != 0;
              switch(v184)
              {
                case 270:
                  v135 ^= 7u;
                  break;
                case 180:
                  v135 ^= 3u;
                  break;
                case 90:
                  v135 |= 4u;
                  break;
              }
              v139 = *(const void **)(v33 + 88);
              if (*(_DWORD *)(v33 + 80) == v135)
              {
                if (v139)
                  goto LABEL_483;
              }
              else if (v139)
              {
                CFRelease(v139);
                *(_QWORD *)(v33 + 88) = 0;
              }
              Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *(_QWORD *)(v33 + 88) = Mutable;
              *(_DWORD *)(v33 + 80) = v135;
              v141 = (const void *)*MEMORY[0x1E0D3A330];
              LODWORD(valuePtr[0]) = v135;
              v142 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(Mutable, v141, v142);
              CFRelease(v142);
              v143 = (const void **)MEMORY[0x1E0C9AE50];
              if (*(_BYTE *)(v33 + 32))
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A248], (const void *)*MEMORY[0x1E0C9AE50]);
              if (*(_BYTE *)(v33 + 33))
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A370], *v143);
              if (*(_BYTE *)(v33 + 118))
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), CFSTR("ReducedPrecisionFractionalOffsets"), *v143);
              if (*(_BYTE *)(v33 + 34))
              {
                LODWORD(valuePtr[0]) = 1;
                if (CGRectIsNull(*(CGRect *)(v33 + 48)))
                {
                  v144 = 0;
                  v145 = 0;
                  v146 = v124;
                  v147 = v125;
                }
                else
                {
                  v146 = *(double *)(v33 + 64);
                  v147 = *(double *)(v33 + 72);
                  v144 = (int)*(double *)(v33 + 48);
                  v145 = (int)*(double *)(v33 + 56);
                }
                v148 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v149 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A258], v149);
                CFRelease(v149);
                LODWORD(v196[0]) = v144;
                v150 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A268], v150);
                CFRelease(v150);
                LODWORD(v196[0]) = v145;
                v151 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A270], v151);
                CFRelease(v151);
                LODWORD(v196[0]) = (int)v146;
                v152 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A278], v152);
                CFRelease(v152);
                LODWORD(v196[0]) = (int)v147;
                v153 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E0D3A260], v153);
                CFRelease(v153);
              }
LABEL_483:
              v154 = 0;
              v155 = (CFStringRef *)MEMORY[0x1E0CA8D68];
              if (v163 <= 793522279)
              {
                if (v163 <= 759967799)
                {
                  if ((v163 - 642527536) <= 6 && ((1 << (v163 - 48)) & 0x45) != 0 || v163 == 642527288)
                    goto LABEL_502;
                  v156 = 642527336;
                  goto LABEL_501;
                }
                if (v163 == 759967800 || v163 == 759967848)
                  goto LABEL_502;
                v157 = 12344;
              }
              else
              {
                if (v163 > 1278226735)
                {
                  if ((v163 - 1278226736) <= 6 && ((1 << (v163 - 48)) & 0x45) != 0 || v163 == 2085367912)
                    goto LABEL_502;
                  v156 = 2085367864;
                  goto LABEL_501;
                }
                if ((v163 - 1278226488) <= 0x30
                  && ((1 << (v163 - 56)) & 0x1400000000001) != 0)
                {
                  goto LABEL_502;
                }
                v157 = 12392;
              }
              v156 = v157 | 0x2F4C0000;
LABEL_501:
              v158 = 0;
              if (v163 != v156)
              {
LABEL_512:
                v138 = IOSurfaceAcceleratorTransformSurface();
                if ((_DWORD)v138)
                {
                  v192 = 0;
                  memset(valuePtr, 0, sizeof(valuePtr));
                  v197 = 0;
                  memset(v196, 0, sizeof(v196));
                  IOSurfaceGetBulkAttachments();
                  IOSurfaceGetBulkAttachments();
                  FigSignalErrorAt();
                }
                else
                {
                  if (v158)
                    CVBufferSetAttachment(pixelBuffer, *v155, v158, kCVAttachmentMode_ShouldPropagate);
                  if (v154)
                    CVBufferSetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8E98], v154, kCVAttachmentMode_ShouldPropagate);
                  if (v113)
                    vtDuplicateOddPixels(pixelBuffer);
                  if (*(_BYTE *)(v33 + 34))
                  {
                    bzero(valuePtr, 0x620uLL);
                    if (!IOSurfaceAcceleratorGetHistogram())
                    {
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), bytes, 4 * LODWORD(valuePtr[0]));
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), v194, 4 * LODWORD(valuePtr[0]));
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), v195, 4 * LODWORD(valuePtr[0]));
                    }
                  }
                }
                if (v158)
                  CFRelease(v158);
                if (v154)
                  CFRelease(v154);
                return v138;
              }
LABEL_502:
              LODWORD(valuePtr[0]) = 0;
              v159 = (const __CFString *)*MEMORY[0x1E0CA8D68];
              v160 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8D68], (CVAttachmentMode *)valuePtr);
              v158 = v160;
              if (v160 && LODWORD(valuePtr[0]) == 1)
              {
                CVBufferRemoveAttachment(pixelBuffer, v159);
              }
              else if (v160)
              {
                CFRelease(v160);
                v158 = 0;
              }
              v161 = (const __CFString *)*MEMORY[0x1E0CA8E98];
              v162 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8E98], (CVAttachmentMode *)valuePtr);
              v154 = v162;
              if (v162 && LODWORD(valuePtr[0]) == 1)
              {
                CVBufferRemoveAttachment(pixelBuffer, v161);
              }
              else if (v162)
              {
                CFRelease(v162);
                v154 = 0;
              }
              goto LABEL_512;
            }
            if (v187 == 2019963442 || v187 == 2021077554)
              goto LABEL_400;
            v123 = 2021077552;
          }
LABEL_399:
          if (v187 != v123)
            goto LABEL_402;
          goto LABEL_400;
        }
        v90 = 1885745712;
        v85 = v187;
      }
      if (v85 != v90)
        return FigSignalErrorAt();
      goto LABEL_286;
    }
    if (v187 > 1534617135)
    {
      if (v187 == 1534617136)
        goto LABEL_312;
      v95 = 1534621232;
    }
    else
    {
      if (v187 == 1530422832)
        goto LABEL_312;
      v95 = 1530426928;
    }
    if (v187 != v95)
      return FigSignalErrorAt();
LABEL_312:
    if ((v178 & 1) == 0)
      return FigSignalErrorAt();
    goto LABEL_334;
  }
  if (v187 > 2021078067)
  {
    if (v187 > 2084718400)
    {
      if (v187 <= 2088265265)
      {
        if (v187 == 2084718401)
          goto LABEL_318;
        v94 = 26160;
      }
      else
      {
        if (v187 == 2088265266 || v187 == 2088269360)
          goto LABEL_318;
        v94 = 30258;
      }
      v89 = v94 | 0x7C780000;
      goto LABEL_316;
    }
    if (v187 > 2037741170)
    {
      if (v187 == 2037741171)
        goto LABEL_334;
      if (v187 == 2084070960)
        goto LABEL_318;
      v89 = 2084075056;
      goto LABEL_316;
    }
    if (v187 == 2021078068)
      goto LABEL_281;
    v88 = 2037741158;
LABEL_304:
    if (v187 != v88)
      return FigSignalErrorAt();
    goto LABEL_334;
  }
  if (v187 <= 2019963439)
  {
    if (v187 <= 2016686639)
    {
      if (v187 != 1953903668 && (v187 != 1999843442 || (v170 & 1) == 0))
        return FigSignalErrorAt();
      goto LABEL_334;
    }
    if (v187 != 2016686640)
    {
      if (v187 != 2016686642)
      {
        if (v187 != 2016687156)
          return FigSignalErrorAt();
        goto LABEL_281;
      }
LABEL_294:
      if ((v176 & 1) == 0)
        return FigSignalErrorAt();
      goto LABEL_334;
    }
LABEL_296:
    if ((v172 & 1) == 0)
      return FigSignalErrorAt();
    goto LABEL_334;
  }
  if (v187 <= 2019963955)
  {
    if (v187 == 2019963440)
      goto LABEL_296;
    v92 = 2019963442;
    goto LABEL_293;
  }
  if (v187 == 2019963956)
  {
LABEL_281:
    if ((v175 & 1) == 0)
      return FigSignalErrorAt();
    goto LABEL_334;
  }
  v85 = v187;
  if (v187 == 2021077552)
    goto LABEL_296;
  v92 = 2021077554;
LABEL_293:
  if (v85 == v92)
    goto LABEL_294;
  return FigSignalErrorAt();
}

uint64_t vtDuplicateOddPixels(__CVBuffer *a1)
{
  size_t PlaneCount;
  uint64_t result;
  const __CFDictionary *v4;
  int IntIfPresent;
  int v6;
  void *v7;
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  BOOL v11;
  CFIndex v12;
  const void *ValueAtIndex;
  CFTypeID v14;
  size_t i;
  void *key;

  CVPixelBufferGetPixelFormatType(a1);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    v4 = (const __CFDictionary *)result;
    IntIfPresent = FigCFDictionaryGetIntIfPresent();
    v6 = FigCFDictionaryGetIntIfPresent();
    v7 = (void *)*MEMORY[0x1E0CA91B0];
    if (!(IntIfPresent | v6))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E0CA91B0]);
      if (Value)
      {
        v9 = Value;
        key = v7;
        v10 = CFGetTypeID(Value);
        v11 = v10 == CFArrayGetTypeID();
        v7 = key;
        if (v11 && CFArrayGetCount(v9) >= 1)
        {
          v12 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
            if (ValueAtIndex)
            {
              v14 = CFGetTypeID(ValueAtIndex);
              if (v14 == CFDictionaryGetTypeID())
              {
                FigCFDictionaryGetIntIfPresent();
                FigCFDictionaryGetIntIfPresent();
                FigCFDictionaryGetInt32IfPresent();
              }
            }
            ++v12;
          }
          while (CFArrayGetCount(v9) > v12);
          v7 = key;
        }
      }
    }
    CFDictionaryGetValue(v4, v7);
    CVPixelBufferLockBaseAddress(a1, 0);
    if (PlaneCount)
    {
      for (i = 0; i != PlaneCount; ++i)
      {
        CVPixelBufferGetWidthOfPlane(a1, i);
        CVPixelBufferGetHeightOfPlane(a1, i);
        CVPixelBufferGetBytesPerRowOfPlane(a1, i);
        if (!CVPixelBufferGetBaseAddressOfPlane(a1, i))
          break;
      }
    }
    return CVPixelBufferUnlockBaseAddress(a1, 0);
  }
  return result;
}

void VTPixelTransferNodeCelesteRotationFinalize()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = (_QWORD *)DerivedStorage;
    v2 = *(const void **)(DerivedStorage + 24);
    if (v2)
    {
      CFRelease(v2);
      v1[3] = 0;
    }
    v3 = (const void *)v1[5];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)v1[11];
    if (v4)
    {
      CFRelease(v4);
      v1[11] = 0;
    }
  }
  VTPixelTransferNodeBaseFinalize();
}

CFTypeRef VTPixelTransferNodeCelesteRotationCopyDebugDescription()
{
  return CFRetain(CFSTR("[VTPixelTransferNodeCelesteRotation]"));
}

uint64_t VTPixelTransferNodeCelesteRotationDoTransfer(int a1, __CVBuffer *a2, double *a3, __CVBuffer *a4, double *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return vt_Rotate_Celeste(a1, a2, *(const __CFDictionary **)(DerivedStorage + 96), a4, a3[2], a3[3], a3[4], a3[5], a5[2], a5[3], a5[4], a5[5], *(const __CFDictionary **)(DerivedStorage + 104), *(_DWORD *)(DerivedStorage + 112), *(unsigned __int8 *)(DerivedStorage + 116), *(unsigned __int8 *)(DerivedStorage + 117));
}

uint64_t VTAddCMSampleBufferToXPCMessage()
{
  return FigXPCMessageAddCMSampleBuffer();
}

uint64_t VTCopyCMSampleBufferFromXPCMessage()
{
  return FigXPCMessageCopyCMSampleBuffer();
}

uint64_t DecodeProgressiveScan(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 4408);
  v5 = *(unsigned __int8 *)(a1 + 4409);
  v6 = *(unsigned __int8 *)(a1 + 4410);
  v7 = *(unsigned __int8 *)(a1 + 4411);
  v66 = *(_OWORD *)(a1 + 4200);
  v67 = *(_QWORD *)(a1 + 4216);
  v64 = *(_OWORD *)(a1 + 4224);
  v65 = *(_QWORD *)(a1 + 4240);
  if (v4)
  {
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeACRefine;
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeACFirst;
  }
  else
  {
    if (v5)
      return 101;
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeDCRefine;
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeDCFirst;
  }
  if (!v6)
    v8 = v9;
  v63 = v8;
  if (v6 && v6 - 1 != v7)
    return 102;
  *(_DWORD *)(a1 + 4356) = 0;
  v11 = *(_DWORD *)(a1 + 4392);
  if (v11 == 1)
  {
    v12 = *(_DWORD *)(a1 + 4396);
    v13 = a1 + 4 * (__int16)v12;
    v14 = *(_DWORD *)(v13 + 4148);
    v15 = v14 & 0xF;
    v16 = *(_DWORD *)(a1 + 4388) * v15 - *(_DWORD *)(v13 + 4172);
    if (v16 << 16 >= 1)
    {
      v17 = 0;
      v18 = 0;
      v19 = v14 << 16;
      v20 = v14 >> 4;
      v50 = (__int16)v16;
      v21 = *((_QWORD *)&v66 + (__int16)v12);
      v22 = v20 * *(_DWORD *)(a1 + 4384) - *(_DWORD *)(a1 + 4 * (__int16)v12 + 4160);
      v51 = v22 << 16;
      v61 = (__int16)v22;
      v23 = v19;
      v57 = v21;
      v59 = (unint64_t)(v19 == 1114112) << 6;
      v55 = a1 + 4344;
      v24 = (__int16)v12;
      while (1)
      {
        v53 = v18;
        if (v51 >= 1)
          break;
LABEL_24:
        v18 = v53 + 1;
        v17 = (__int16)(v53 + 1);
        if (v50 <= v17)
          goto LABEL_51;
      }
      v25 = 0;
      v26 = 0;
      while (1)
      {
        if (*(_WORD *)(a2 + 48))
        {
          v27 = *(_DWORD *)(a2 + 52);
          v28 = __OFSUB__(v27--, 1);
          *(_DWORD *)(a2 + 52) = v27;
          if ((v27 < 0) ^ v28 | (v27 == 0))
          {
            v29 = -*(unsigned __int16 *)(a2 + 12) & 7;
            if (v29)
              popbitsa((unsigned __int8 **)a2, v29);
            while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
              ;
            *(_DWORD *)(v55 + 8) = 0;
            *(_QWORD *)v55 = 0;
            *(_DWORD *)(a2 + 52) = *(unsigned __int16 *)(a2 + 48);
          }
        }
        if (v23 != 1114112)
          v21 = v57
              + 2
              * ((v25 % v20
                + (v17 % v15 + ((__int16)(v17 / v15) * *(_DWORD *)(a1 + 4384) + (__int16)(v25 / v20)) * v15) * v20) << 6);
        result = v63(a1, a2, v24, v21);
        if ((_DWORD)result)
          return result;
        v21 += 2 * v59;
        v25 = (__int16)++v26;
        if (v61 <= (__int16)v26)
          goto LABEL_24;
      }
    }
LABEL_51:
    v47 = 0x200000 - (*(_DWORD *)(a2 + 12) << 16);
    v48 = v47 >> 19;
    if (v47 < 0x80000)
    {
      v49 = *(unsigned __int8 **)a2;
    }
    else
    {
      v49 = *(unsigned __int8 **)a2;
      if (*(_DWORD *)(a2 + 20) == 255 && !*(v49 - 1) && *(v49 - 2) == 255)
        ++v48;
    }
    result = 0;
    *(_QWORD *)a2 = &v49[-v48];
    *(_DWORD *)(a2 + 12) = 32;
    return result;
  }
  v30 = *(_DWORD *)(a1 + 4388);
  if (v30 << 16 < 1)
    goto LABEL_51;
  v31 = 0;
  v56 = (__int16)v30;
  v32 = *(_DWORD *)(a1 + 4384);
  v33 = v32 << 16;
  v60 = (__int16)v32;
  v34 = v11 << 16;
  v35 = (__int16)v11;
  v52 = a1 + 4344;
  v54 = v32 << 16;
  v58 = v11 << 16;
  while (1)
  {
    v62 = v31;
    if (v33 >= 1)
      break;
LABEL_50:
    v31 = v62 + 1;
    v33 = v54;
    if (v56 <= (__int16)(v62 + 1))
      goto LABEL_51;
  }
  v36 = 0;
  while (1)
  {
    if (*(_WORD *)(a2 + 48))
    {
      v37 = *(_DWORD *)(a2 + 52);
      v28 = __OFSUB__(v37--, 1);
      *(_DWORD *)(a2 + 52) = v37;
      if ((v37 < 0) ^ v28 | (v37 == 0))
      {
        v38 = -*(unsigned __int16 *)(a2 + 12) & 7;
        if (v38)
          popbitsa((unsigned __int8 **)a2, v38);
        while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
          ;
        *(_DWORD *)(v52 + 8) = 0;
        *(_QWORD *)v52 = 0;
        *(_DWORD *)(a2 + 52) = *(unsigned __int16 *)(a2 + 48);
      }
    }
    if (v34 >= 1)
      break;
LABEL_49:
    ++v36;
    v34 = v58;
    if (v60 <= (__int16)v36)
      goto LABEL_50;
  }
  v39 = 0;
  while (1)
  {
    v40 = *(_DWORD *)(a1 + 4 * v39 + 4396);
    v41 = *(_DWORD *)(a1 + 4 * (__int16)v40 + 4136);
    v42 = *((_QWORD *)&v66 + (__int16)v40);
    if (v41 << 16 >= 1)
      break;
LABEL_46:
    v46 = *(_QWORD *)(a1 + 8 * (__int16)v40 + 4200);
    if (v42 - v46 >= *((_QWORD *)&v64 + (__int16)v40))
      *((_QWORD *)&v66 + (__int16)v40) = v46;
    if ((int)v35 <= ++v39)
      goto LABEL_49;
  }
  v43 = v35;
  v44 = 0;
  v45 = (__int16)v41;
  while (1)
  {
    result = v63(a1, a2, (__int16)v40, v42);
    if ((_DWORD)result)
      break;
    v42 += 128;
    if (v45 <= (__int16)++v44)
    {
      *((_QWORD *)&v66 + (__int16)v40) = v42;
      v35 = v43;
      goto LABEL_46;
    }
  }
  *((_QWORD *)&v66 + (__int16)v40) = v42;
  return result;
}

uint64_t DecodeDCFirst(uint64_t a1, unsigned __int8 **a2, int a3, _WORD *a4)
{
  __int16 *v4;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  __int16 v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  _WORD *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  __int16 v39;

  v4 = *(__int16 **)(a1 + 8 * a3 + 4320);
  v5 = *((_QWORD *)v4 + 1);
  v6 = *v4;
  if (*v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
    return -1;
  v8 = *(_BYTE *)(a1 + 4411);
  v10 = *((_DWORD *)a2 + 2);
  v9 = *((_DWORD *)a2 + 3);
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 5);
  v13 = *((_QWORD *)v4 + 2);
  v14 = v4[2];
  v15 = v4[1];
  v16 = v9 - 16;
  if (v9 < 0x10)
  {
    v16 = *((_DWORD *)a2 + 3);
  }
  else
  {
    v17 = (unint64_t)a2[8];
    if ((unint64_t)(v11 + 1) >= v17)
      return -1;
    v18 = *v11;
    v19 = v11[1];
    if (v12 == v18 && v19 == 0)
    {
      if ((unint64_t)(v11 + 2) >= v17)
        return -1;
      v19 = v11[2];
      v11 += 3;
    }
    else
    {
      v11 += 2;
    }
    if (v12 == v19)
    {
      if ((unint64_t)v11 >= v17)
        return -1;
      if (!*v11)
        ++v11;
    }
    v10 = (v10 << 16) | (v18 << 8) | v19;
  }
  v21 = *(_WORD *)(v5 + 2 * ((v10 << v16) >> -(char)v6));
  if ((v21 & 0xFC00) == 0x8000)
  {
    v16 += v14;
    v22 = v16 - 16;
    if (v16 >= 0x10)
    {
      v23 = (unint64_t)a2[8];
      if ((unint64_t)(v11 + 1) >= v23)
        return -1;
      v24 = *v11;
      v25 = v11 + 2;
      v26 = v11[1];
      if (__PAIR64__(v26, v24) == v12)
      {
        if ((unint64_t)v25 >= v23)
          return -1;
        v25 = v11 + 3;
        v26 = v11[2];
      }
      if (v12 == v26)
      {
        if ((unint64_t)v25 >= v23)
          return -1;
        if (!*v25)
          ++v25;
      }
      v10 = (v10 << 16) | (v24 << 8) | v26;
      v16 = v22;
      v11 = v25;
    }
    v21 = *(_WORD *)(v13 + 2 * ((v10 << v16) >> -(char)v15));
    if ((v21 & 0xFC00) == 0x8000)
      return -1;
  }
  v27 = (_WORD *)(a1 + 4 * a3 + 4344);
  if (v21 < 0)
  {
    v28 = ((v21 >> 11) & 0xF) + v16;
    v38 = (__int16)(*v27 + (char)v21);
LABEL_51:
    *(_DWORD *)v27 = v38;
LABEL_53:
    v39 = 0;
    *a4 = v38 << v8;
    *((_DWORD *)a2 + 2) = v10;
    *((_DWORD *)a2 + 3) = v28;
    *a2 = v11;
    return v39;
  }
  v28 = v16 + (v21 >> 8);
  v29 = v21 & 0xF;
  if (!v29)
  {
    v38 = *(_DWORD *)v27;
    goto LABEL_53;
  }
  v30 = v28 - 16;
  if (v28 < 0x10)
  {
LABEL_44:
    v35 = (v10 << v28) >> -(char)v29;
    v28 += v29;
    v36 = (unsigned __int16)(1 << (v29 - 1));
    if (v36 <= v35)
      v37 = 0;
    else
      v37 = 2 * v36 - 1;
    v38 = v35 - v37 + *(_DWORD *)v27;
    goto LABEL_51;
  }
  v31 = (unint64_t)a2[8];
  if ((unint64_t)(v11 + 1) < v31)
  {
    v32 = *v11;
    v33 = v11 + 2;
    v34 = v11[1];
    if (__PAIR64__(v34, v32) == v12)
    {
      if ((unint64_t)v33 >= v31)
        return -1;
      v33 = v11 + 3;
      v34 = v11[2];
    }
    if (v12 != v34)
    {
LABEL_43:
      v10 = (v10 << 16) | (v32 << 8) | v34;
      v28 = v30;
      v11 = v33;
      goto LABEL_44;
    }
    if ((unint64_t)v33 < v31)
    {
      if (!*v33)
        ++v33;
      goto LABEL_43;
    }
  }
  return -1;
}

uint64_t DecodeDCRefine(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _WORD *a4)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v13;
  unsigned int v14;
  __int16 v15;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a2 + 3);
  v6 = *a2;
  v7 = v5 - 16;
  if (v5 >= 0x10)
  {
    v8 = (unint64_t)a2[8];
    if ((unint64_t)(v6 + 1) < v8)
    {
      v9 = *((_DWORD *)a2 + 5);
      v10 = *v6;
      v11 = v6[1];
      if (v9 == v10 && v11 == 0)
      {
        if ((unint64_t)(v6 + 2) >= v8)
          return -1;
        v11 = v6[2];
        v6 += 3;
      }
      else
      {
        v6 += 2;
      }
      if (v9 != v11)
      {
LABEL_15:
        v4 = (v4 << 16) | (v10 << 8) | v11;
        goto LABEL_16;
      }
      if ((unint64_t)v6 < v8)
      {
        if (!*v6)
          ++v6;
        goto LABEL_15;
      }
    }
    return -1;
  }
  v7 = *((_DWORD *)a2 + 3);
LABEL_16:
  v13 = v4 << v7;
  v14 = v7 + 1;
  if (v13 < 0)
    *a4 |= 1 << *(_BYTE *)(a1 + 4411);
  v15 = 0;
  *((_DWORD *)a2 + 2) = v4;
  *((_DWORD *)a2 + 3) = v14;
  *a2 = v6;
  return v15;
}

uint64_t DecodeACFirst(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  __int16 v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;

  v4 = *(_DWORD *)(a1 + 4356);
  if (v4 << 16 >= 1)
  {
    LOWORD(v4) = v4 - 1;
LABEL_3:
    v5 = 0;
    *(_DWORD *)(a1 + 4356) = (__int16)v4;
    return v5;
  }
  v6 = *(_QWORD *)(a1 + 8 * a3 + 4296);
  v7 = *(_QWORD *)(v6 + 8);
  if (*(_WORD *)v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return -1;
  v10 = *(unsigned __int8 *)(a1 + 4409);
  v12 = *((_DWORD *)a2 + 2);
  v11 = *((_DWORD *)a2 + 3);
  v13 = *a2;
  v14 = *(unsigned __int8 *)(a1 + 4408);
  if (v14 > v10)
  {
LABEL_12:
    *((_DWORD *)a2 + 2) = v12;
    *((_DWORD *)a2 + 3) = v11;
    *a2 = v13;
    goto LABEL_3;
  }
  v15 = *(_BYTE *)(a1 + 4411);
  v16 = *((_DWORD *)a2 + 5);
  v17 = *(_QWORD *)(v6 + 16);
  v18 = *(__int16 *)(v6 + 4);
  v19 = 32 - *(_WORD *)v6;
  v20 = 32 - *(_WORD *)(v6 + 2);
  while (1)
  {
    v21 = v11 - 16;
    if (v11 >= 0x10)
    {
      v22 = (unint64_t)a2[8];
      if ((unint64_t)(v13 + 1) >= v22)
        return -1;
      v23 = *v13;
      v24 = v13[1];
      if (v16 == v23 && v24 == 0)
      {
        if ((unint64_t)(v13 + 2) >= v22)
          return -1;
        v24 = v13[2];
        v13 += 3;
      }
      else
      {
        v13 += 2;
      }
      if (v16 == v24)
      {
        if ((unint64_t)v13 >= v22)
          return -1;
        if (!*v13)
          ++v13;
      }
      v12 = (v12 << 16) | (v23 << 8) | v24;
      v11 = v21;
    }
    LOWORD(v26) = *(_WORD *)(v7 + 2 * ((v12 << v11) >> v19));
    if ((v26 & 0xFC00) == 0x8000)
    {
      v11 += v18;
      v27 = v11 - 16;
      if (v11 >= 0x10)
      {
        v28 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v28)
          return -1;
        v29 = *v13;
        v30 = v13 + 2;
        v31 = v13[1];
        if (__PAIR64__(v31, v29) == v16)
        {
          if ((unint64_t)v30 >= v28)
            return -1;
          v30 = v13 + 3;
          v31 = v13[2];
        }
        if (v16 == v31)
        {
          if ((unint64_t)v30 >= v28)
            return -1;
          if (!*v30)
            ++v30;
        }
        v12 = (v12 << 16) | (v29 << 8) | v31;
        v11 = v27;
        v13 = v30;
      }
      LOWORD(v26) = *(_WORD *)(v17 + 2 * ((v12 << v11) >> v20));
      if ((v26 & 0xFC00) == 0x8000)
        return -3;
    }
    v32 = v26;
    if ((v26 & 0x8000) == 0)
      break;
    v14 += ((__int16)v26 >> 8) & 7;
    if ((v14 & 0xFFC0) != 0)
      return -1;
    v11 += ((__int16)v26 >> 11) & 0xF;
    v26 = (char)v26;
LABEL_59:
    *(_WORD *)(a4 + 2 * (unsigned __int16)v14) = v26 << v15;
LABEL_62:
    v14 = (unsigned __int16)(v14 + 1);
    if (v14 > v10)
      goto LABEL_12;
  }
  v11 += (__int16)v26 >> 8;
  v33 = v26 >> 4;
  v34 = v32 & 0xF;
  if ((v32 & 0xF) != 0)
  {
    LOWORD(v14) = v14 + v33;
    if ((v14 & 0xFFC0) != 0)
      return -5;
    v35 = v11 - 16;
    if (v11 >= 0x10)
    {
      v36 = (unint64_t)a2[8];
      if ((unint64_t)(v13 + 1) >= v36)
        return -1;
      v37 = *v13;
      v38 = v13 + 2;
      v39 = v13[1];
      if (__PAIR64__(v39, v37) == v16)
      {
        if ((unint64_t)v38 >= v36)
          return -1;
        v38 = v13 + 3;
        v39 = v13[2];
      }
      if (v16 == v39)
      {
        if ((unint64_t)v38 >= v36)
          return -1;
        if (!*v38)
          ++v38;
      }
      v12 = (v12 << 16) | (v37 << 8) | v39;
      v11 = v35;
      v13 = v38;
    }
    v40 = (v12 << v11) >> -(char)v34;
    v11 += v34;
    v41 = 1 << (v34 - 1);
    if (v40 >= (unsigned __int16)v41)
      v42 = 0;
    else
      v42 = 2 * v41 - 1;
    v26 = v40 - v42;
    goto LABEL_59;
  }
  if (v33 == 15)
  {
    LOWORD(v14) = v14 + 15;
    goto LABEL_62;
  }
  v4 = 1 << v33;
  if (v32 < 0x10u)
  {
LABEL_78:
    LOWORD(v4) = v4 - 1;
    goto LABEL_12;
  }
  if (v11 < 0x10)
  {
LABEL_77:
    v47 = (v12 << v11) >> -(char)v33;
    v11 += v33;
    LOWORD(v4) = v47 + v4;
    goto LABEL_78;
  }
  v43 = (unint64_t)a2[8];
  if ((unint64_t)(v13 + 1) >= v43)
    return -1;
  v44 = *v13;
  v45 = v13 + 2;
  v46 = v13[1];
  if (__PAIR64__(v46, v44) != v16)
    goto LABEL_72;
  if ((unint64_t)v45 >= v43)
    return -1;
  v45 = v13 + 3;
  v46 = v13[2];
LABEL_72:
  if (v16 != v46)
  {
LABEL_76:
    v12 = (v12 << 16) | (v44 << 8) | v46;
    v11 -= 16;
    v13 = v45;
    goto LABEL_77;
  }
  if ((unint64_t)v45 < v43)
  {
    if (!*v45)
      ++v45;
    goto LABEL_76;
  }
  return -1;
}

uint64_t DecodeACRefine(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  __int16 *v4;
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  __int16 v8;
  signed int v9;
  char v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v25;
  __int16 v26;
  int v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  __int16 v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v58;
  __int16 v59;
  unint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned int v64;

  v4 = *(__int16 **)(a1 + 8 * a3 + 4296);
  v5 = *((_QWORD *)v4 + 1);
  v6 = *v4;
  if (*v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = *(unsigned __int8 *)(a1 + 4409);
    v10 = *(_BYTE *)(a1 + 4411);
    v11 = 1 << v10;
    v12 = *((_DWORD *)a2 + 5);
    v13 = *a2;
    v14 = *((_DWORD *)a2 + 2);
    v15 = *((_DWORD *)a2 + 3);
    LODWORD(v16) = *(unsigned __int8 *)(a1 + 4408);
    v17 = *(_WORD *)(a1 + 4356);
    if (v17 || v16 > v9)
    {
LABEL_9:
      LOWORD(v18) = v17;
      if (v17 < 1)
      {
LABEL_34:
        v8 = 0;
        *(_DWORD *)(a1 + 4356) = (__int16)v18;
        *((_DWORD *)a2 + 2) = v14;
        *((_DWORD *)a2 + 3) = v15;
        *a2 = v13;
        return v8;
      }
LABEL_10:
      if (v9 >= (__int16)v16)
      {
        v19 = 0xFFFF << v10;
        do
        {
          v16 = (__int16)v16;
          v20 = *(__int16 *)(a4 + 2 * (__int16)v16);
          if (*(_WORD *)(a4 + 2 * (__int16)v16))
          {
            if (v15 >= 0x10)
            {
              v21 = (unint64_t)a2[8];
              if ((unint64_t)(v13 + 1) >= v21)
                return -1;
              v22 = *v13;
              v23 = v13[1];
              if (v12 == v22 && v23 == 0)
              {
                if ((unint64_t)(v13 + 2) >= v21)
                  return -1;
                v23 = v13[2];
                v13 += 3;
              }
              else
              {
                v13 += 2;
              }
              if (v12 == v23)
              {
                if ((unint64_t)v13 >= v21)
                  return -1;
                if (!*v13)
                  ++v13;
              }
              v14 = (v14 << 16) | (v22 << 8) | v23;
              v15 -= 16;
            }
            v25 = v14 << v15++;
            if (v25 < 0)
            {
              if (v20 >= 0)
                v26 = v11;
              else
                v26 = v19;
              *(_WORD *)(a4 + 2 * v16) = v20 + v26;
            }
          }
          LOWORD(v16) = v16 + 1;
        }
        while (v9 >= (__int16)v16);
      }
      LOWORD(v18) = v18 - 1;
      goto LABEL_34;
    }
    LOWORD(v28) = 0;
    v29 = *((_QWORD *)v4 + 2);
    v30 = v4[2];
    v31 = v4[1];
    while (1)
    {
      v32 = v15 - 16;
      if (v15 >= 0x10)
      {
        v33 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v33)
          return -1;
        v34 = *v13;
        v35 = v13[1];
        if (v12 == v34 && v35 == 0)
        {
          if ((unint64_t)(v13 + 2) >= v33)
            return -1;
          v35 = v13[2];
          v13 += 3;
        }
        else
        {
          v13 += 2;
        }
        if (v12 == v35)
        {
          if ((unint64_t)v13 >= v33)
            return -1;
          if (!*v13)
            ++v13;
        }
        v14 = (v14 << 16) | (v34 << 8) | v35;
        v15 = v32;
      }
      v37 = *(_WORD *)(v5 + 2 * ((v14 << v15) >> (32 - v6)));
      if (v29 && (v37 & 0xFC00) == 0x8000)
      {
        v15 += v30;
        v38 = v15 - 16;
        if (v15 >= 0x10)
        {
          v39 = (unint64_t)a2[8];
          if ((unint64_t)(v13 + 1) >= v39)
            return -1;
          v40 = *v13;
          v41 = v13 + 2;
          v42 = v13[1];
          if (__PAIR64__(v42, v40) == v12)
          {
            if ((unint64_t)v41 >= v39)
              return -1;
            v41 = v13 + 3;
            v42 = v13[2];
          }
          if (v12 == v42)
          {
            if ((unint64_t)v41 >= v39)
              return -1;
            if (!*v41)
              ++v41;
          }
          v14 = (v14 << 16) | (v40 << 8) | v42;
          v15 = v38;
          v13 = v41;
        }
        v37 = *(_WORD *)(v29 + 2 * ((v14 << v15) >> (32 - v31)));
        if ((v37 & 0xFC00) == 0x8000)
          return -4;
      }
      v43 = v37;
      if (v37 < 0)
      {
        LOBYTE(v18) = 0;
        v15 += (v43 >> 11) & 0xF;
        v44 = (v43 >> 8) & 7;
        v28 = (char)v43 << v10;
        goto LABEL_82;
      }
      v44 = v37 >> 4;
      v15 += v37 >> 8;
      v45 = v37 & 0xF;
      if ((v43 & 0xF) == 0)
        break;
      if (v45 != 1)
        return -1;
      v46 = v15 - 16;
      if (v15 >= 0x10)
      {
        v47 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v47)
          return -1;
        v48 = *v13;
        v49 = v13 + 2;
        v50 = v13[1];
        if (__PAIR64__(v50, v48) == v12)
        {
          if ((unint64_t)v49 >= v47)
            return -1;
          v49 = v13 + 3;
          v50 = v13[2];
        }
        if (v12 == v50)
        {
          if ((unint64_t)v49 >= v47)
            return -1;
          if (!*v49)
            ++v49;
        }
        v14 = (v14 << 16) | (v48 << 8) | v50;
        v15 = v46;
        v13 = v49;
      }
      LOBYTE(v18) = 0;
      v51 = v14 << v15++;
      if (v51 >= 0)
        LOWORD(v28) = -1 << v10;
      else
        LOWORD(v28) = 1 << v10;
      do
      {
LABEL_82:
        v52 = *(__int16 *)(a4 + 2 * (__int16)v16);
        if (*(_WORD *)(a4 + 2 * (__int16)v16))
        {
          v53 = v15 - 16;
          if (v15 >= 0x10)
          {
            v54 = (unint64_t)a2[8];
            if ((unint64_t)(v13 + 1) >= v54)
              return -1;
            v55 = *v13;
            v56 = v13[1];
            if (v12 == v55 && v56 == 0)
            {
              if ((unint64_t)(v13 + 2) >= v54)
                return -1;
              v56 = v13[2];
              v13 += 3;
            }
            else
            {
              v13 += 2;
            }
            if (v12 == v56)
            {
              if ((unint64_t)v13 >= v54)
                return -1;
              if (!*v13)
                ++v13;
            }
            v14 = (v14 << 16) | (v55 << 8) | v56;
            v15 = v53;
          }
          v58 = v14 << v15++;
          if (v58 < 0)
          {
            if (v52 >= 0)
              v59 = 1 << v10;
            else
              v59 = 0xFFFF << v10;
            *(_WORD *)(a4 + 2 * (__int16)v16) = v52 + v59;
          }
        }
        else
        {
          LOWORD(v44) = v44 - 1;
          if ((v44 & 0x8000) != 0)
            break;
        }
        LODWORD(v16) = v16 + 1;
      }
      while (v9 >= (__int16)v16);
      if ((v18 & 1) == 0)
      {
        if (v9 < (__int16)v16)
          return -1;
        *(_WORD *)(a4 + 2 * (__int16)v16) = v28;
      }
      LODWORD(v16) = v16 + 1;
      if (v9 < (__int16)v16)
        goto LABEL_9;
    }
    LOWORD(v18) = 1;
    if (v44 == 15)
      goto LABEL_82;
    if (!v44)
      goto LABEL_10;
    if (v15 < 0x10)
    {
LABEL_122:
      v64 = (v14 << v15) >> -(char)v44;
      v15 += v44;
      v18 = (1 << v44) + v64;
      goto LABEL_10;
    }
    v60 = (unint64_t)a2[8];
    if ((unint64_t)(v13 + 1) < v60)
    {
      v61 = *v13;
      v62 = v13 + 2;
      v63 = v13[1];
      if (__PAIR64__(v63, v61) == v12)
      {
        if ((unint64_t)v62 >= v60)
          return -1;
        v62 = v13 + 3;
        v63 = v13[2];
      }
      if (v12 != v63)
      {
LABEL_121:
        v14 = (v14 << 16) | (v61 << 8) | v63;
        v15 -= 16;
        v13 = v62;
        goto LABEL_122;
      }
      if ((unint64_t)v62 < v60)
      {
        if (!*v62)
          ++v62;
        goto LABEL_121;
      }
    }
  }
  return -1;
}

uint64_t ExtractBufferedBlocks(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v4;
  __int16 i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  _DWORD *v12;
  uint64_t j;
  uint64_t v14;
  int v15;
  __int16 v16;

  v4 = *(_DWORD *)(a1 + 4132);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = a1 + 8 * i;
      v7 = *(_QWORD *)(v6 + 4248);
      v8 = a1 + 4 * i;
      if (*(int *)(v8 + 4136) >= 1)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v6 + 4360);
        v11 = *(_WORD *)(v10 + 128);
        v12 = (_DWORD *)(v8 + 4136);
        while (2)
        {
          for (j = 0; j != 64; ++j)
          {
            v14 = tables[j];
            v15 = ((1 << (v11 - 1)) + *(unsigned __int16 *)(v10 + v14) * *(__int16 *)(v7 + 2 * j)) >> v11;
            if (v15 != (__int16)v15)
              return -6;
            *(_WORD *)(a3 + v14) = v15;
          }
          a3 += 128;
          v7 += 128;
          *a4++ = 8;
          if (*v12 > (__int16)++v9)
            continue;
          break;
        }
        v4 = *(_DWORD *)(a1 + 4132);
      }
      *(_QWORD *)(v6 + 4248) = v7;
    }
  }
  v16 = 0;
  *a4 = 0;
  return v16;
}

uint64_t vtdcrb_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTDecompressionSessionXPCRemoteBridgeID = result;
  return result;
}

uint64_t VTDecompressionSessionRemoteBridge_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, const __CFDictionary *a5, _OWORD *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t Instance;
  uint64_t v17;
  _BOOL4 ShouldUseXPCRemoteDecompressionSession;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1940281CC](&VTDecompressionSessionRemoteBridgeGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcrb_Register);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v17 = Instance;
    ShouldUseXPCRemoteDecompressionSession = VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession();
    *(_BYTE *)(v17 + 32) = ShouldUseXPCRemoteDecompressionSession;
    if (ShouldUseXPCRemoteDecompressionSession)
    {
      v19 = VTDecompressionSessionRemoteXPC_Create(a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, (CFTypeRef *)(v17 + 24));
      if (!(_DWORD)v19)
      {
        if (*(_QWORD *)(v17 + 24))
        {
          FigStartForwardingMediaServicesProcessDeathNotification();
LABEL_8:
          v20 = 0;
          *a8 = v17;
          return v20;
        }
        goto LABEL_12;
      }
    }
    else
    {
      v19 = VTDecompressionSessionRemote_Create(a1, a2, a3, a4, a5, a6, (uint64_t *)(v17 + 16));
      if (!(_DWORD)v19)
      {
        if (*(_QWORD *)(v17 + 16))
          goto LABEL_8;
LABEL_12:
        v20 = FigSignalErrorAt();
        if (!(_DWORD)v20)
          return v20;
LABEL_13:
        CFRelease((CFTypeRef)v17);
        return v20;
      }
    }
    v20 = v19;
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteBridge_Invalidate(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_Invalidate(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_Invalidate(*(_QWORD *)(a1 + 16));
}

uint64_t VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_CopySupportedPropertyDictionary(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_CopySupportedPropertyDictionary(*(_QWORD *)(a1 + 16));
}

uint64_t VTDecompressionSessionRemoteBridge_CopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_CopySerializableProperties(*(_QWORD *)(a1 + 24), a2, a3);
  else
    return VTDecompressionSessionRemote_CopySerializableProperties(*(_QWORD *)(a1 + 16), a2, (uint64_t)a3);
}

uint64_t VTDecompressionSessionRemoteBridge_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_CopyProperty(*(_QWORD *)(a1 + 24), a2, a3, a4);
  else
    return VTDecompressionSessionRemote_CopyProperty(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t VTDecompressionSessionRemoteBridge_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_SetProperty(*(_QWORD *)(a1 + 24), a2, a3);
  else
    return VTDecompressionSessionRemote_SetProperty(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t VTDecompressionSessionRemoteBridge_SetProperties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_SetProperties(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_SetProperties(*(mach_port_t **)(a1 + 16), a2);
}

uint64_t VTDecompressionSessionRemoteBridge_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_SetMultiImageCallback(*(_QWORD *)(a1 + 24), a2, a3);
  else
    return VTDecompressionSessionRemote_SetMultiImageCallback(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_DecodeFrame(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6);
  else
    return VTDecompressionSessionRemote_DecodeFrame(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (!(a6 | a7))
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_DecodeFrameWithOutputHandler(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7);
  return VTDecompressionSessionRemote_DecodeFrameWithOutputHandler(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t VTDecompressionSessionRemoteBridge_FinishDelayedFrames(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    VTDecompressionSessionRemoteXPC_FinishDelayedFrames(*(_QWORD *)(a1 + 24));
  else
    VTDecompressionSessionRemote_FinishDelayedFrames(*(_QWORD *)(a1 + 16));
  return 0;
}

uint64_t VTDecompressionSessionRemoteBridge_CanAcceptFormatDescription(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_CanAcceptFormatDescription(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_CanAcceptFormatDescription(*(_QWORD *)(a1 + 16), a2);
}

uint64_t VTDecompressionSessionRemoteBridge_WaitForAsynchronousFrames(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_WaitForAsynchronousFrames(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_WaitForAsynchronousFrames(*(_QWORD *)(a1 + 16));
}

uint64_t VTDecompressionSessionRemoteBridge_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_CopyBlackPixelBuffer(*(_QWORD *)(a1 + 24), a2);
  else
    return VTDecompressionSessionRemote_CopyBlackPixelBuffer(*(_QWORD *)(a1 + 16), a2);
}

void VTDecompressionSessionRemoteBridge_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_BYTE *)(a1 + 32))
    VTDecompressionSessionRemoteXPC_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 24), (uint64_t)a2);
  else
    VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 16), (uint64_t)a2);
}

uint64_t VTDecompressionSessionRemoteBridge_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 24), a2, a3);
  else
    return VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 16), (uint64_t)a2, (uint64_t)a3);
}

uint64_t VTTileDecompressionSessionRemoteBridge_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t Instance;
  uint64_t v15;
  _BOOL4 ShouldUseXPCRemoteTileDecompressionSession;
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1940281CC](&VTDecompressionSessionRemoteBridgeGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcrb_Register);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v15 = Instance;
    ShouldUseXPCRemoteTileDecompressionSession = VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession();
    *(_BYTE *)(v15 + 32) = ShouldUseXPCRemoteTileDecompressionSession;
    if (ShouldUseXPCRemoteTileDecompressionSession)
    {
      v17 = VTTileDecompressionSessionRemoteXPC_Create(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (CFTypeRef *)(v15 + 24));
      if (*(_QWORD *)(v15 + 24))
        goto LABEL_4;
    }
    else
    {
      v17 = VTTileDecompressionSessionRemote_Create(a1, a2, a3, a4, a5, a6, (_QWORD *)(v15 + 16));
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_4:
        v18 = v17;
        *a7 = v15;
        if (!(_DWORD)v17)
          return v18;
LABEL_5:
        CFRelease((CFTypeRef)v15);
        return v18;
      }
    }
    v18 = FigSignalErrorAt();
    if (!(_DWORD)v18)
      return v18;
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7, uint64_t a8, _DWORD *a9)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_DecodeTile(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return VTDecompressionSessionRemote_DecodeTile(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t VTDecompressionSessionRemoteBridge_FinishDelayedTiles(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return VTDecompressionSessionRemoteXPC_FinishDelayedTiles(*(_QWORD *)(a1 + 24));
  else
    return VTDecompressionSessionRemote_FinishDelayedTiles(*(_QWORD *)(a1 + 16));
}

_QWORD *vtdsrb_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void vtdsrb_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_QWORD *)(a1 + 24))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    v2 = *(const void **)(a1 + 24);
    if (v2)
      CFRelease(v2);
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

CFStringRef vtdsrb_CopyFormattingDesc(uint64_t a1)
{
  uint64_t v1;
  const char *v2;

  v1 = 24;
  if (!*(_BYTE *)(a1 + 32))
    v1 = 16;
  v2 = "xpc based";
  if (!*(_BYTE *)(a1 + 32))
    v2 = "mig based";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTDecompressionSessionRemoteBridge %p] concreteSession: (type: %s) %@"), a1, v2, *(_QWORD *)(a1 + v1));
}

CFStringRef vtdsrb_CopyDebugDesc(uint64_t a1)
{
  uint64_t v1;
  const char *v2;

  v1 = 24;
  if (!*(_BYTE *)(a1 + 32))
    v1 = 16;
  v2 = "xpc based";
  if (!*(_BYTE *)(a1 + 32))
    v2 = "mig based";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTDecompressionSessionRemoteBridge %p] concreteSession: (type: %s) %@"), a1, v2, *(_QWORD *)(a1 + v1));
}

uint64_t VTBlackFillGetPixelFormatPixelBlockInfo(OSType pixelFormat, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _BYTE *a8, _BYTE *a9, _BYTE *a10, _BYTE *a11, char *a12)
{
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  const void *Value;
  const void *v23;
  _QWORD *v24;
  _BYTE *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  CFTypeID TypeID;
  CFTypeID v30;
  uint64_t v31;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v33;
  const void *v34;
  CFTypeID v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  CFTypeID v47;
  const __CFData *v48;
  const __CFData *v49;
  CFTypeID v50;
  int Length;
  const __CFNumber *v53;
  const __CFNumber *v54;
  CFTypeID v55;
  const __CFNumber *v56;
  char v57;
  uint64_t v58;
  const UInt8 *BytePtr;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  int v63;
  int v64;
  int valuePtr;
  int v66;
  int v67;

  v66 = 1;
  v67 = 1;
  v64 = 1;
  valuePtr = 0;
  v62 = 0;
  v63 = 1;
  v20 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, pixelFormat);
  if (v20)
  {
    v21 = v20;
    if (a2 || (v34 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CA90E8]), v33 = v21, !v34))
    {
      Value = CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0CA91B0]);
      if (!Value)
        goto LABEL_29;
      v23 = Value;
      v61 = a3;
      v24 = a4;
      v25 = a8;
      v26 = a5;
      v27 = a6;
      v28 = a7;
      TypeID = CFArrayGetTypeID();
      v30 = CFGetTypeID(v23);
      v31 = 4294954391;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_30;
      if (TypeID != v30)
        goto LABEL_30;
      if (CFArrayGetCount((CFArrayRef)v23) <= a2)
        goto LABEL_30;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v23, a2);
      if (!ValueAtIndex)
        goto LABEL_30;
      v33 = ValueAtIndex;
      v34 = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA90E8]);
      a7 = v28;
      a6 = v27;
      a5 = v26;
      a8 = v25;
      a4 = v24;
      a3 = v61;
      if (!v34)
        goto LABEL_29;
    }
    v60 = a7;
    v35 = CFNumberGetTypeID();
    if (v35 != CFGetTypeID(v34))
      goto LABEL_29;
    CFNumberGetValue((CFNumberRef)v34, kCFNumberIntType, &valuePtr);
    v36 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA9108]);
    if (v36)
    {
      v37 = v36;
      v38 = CFNumberGetTypeID();
      if (v38 == CFGetTypeID(v37))
      {
        CFNumberGetValue(v37, kCFNumberIntType, &v67);
        if (!v67)
          goto LABEL_29;
      }
    }
    v39 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA9100]);
    if (v39)
    {
      v40 = v39;
      v41 = CFNumberGetTypeID();
      if (v41 == CFGetTypeID(v40))
      {
        CFNumberGetValue(v40, kCFNumberIntType, &v66);
        if (!v66)
          goto LABEL_29;
      }
    }
    v42 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA91A0]);
    if (v42)
    {
      v43 = v42;
      v44 = CFNumberGetTypeID();
      if (v44 == CFGetTypeID(v43))
      {
        CFNumberGetValue(v43, kCFNumberIntType, &v64);
        if (!v64)
          goto LABEL_29;
      }
    }
    v45 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA91B8]);
    if (v45)
    {
      v46 = v45;
      v47 = CFNumberGetTypeID();
      if (v47 == CFGetTypeID(v46))
      {
        CFNumberGetValue(v46, kCFNumberIntType, &v63);
        if (!v63)
          goto LABEL_29;
      }
    }
    v48 = (const __CFData *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA90F8]);
    if (v48 && (v49 = v48, v50 = CFDataGetTypeID(), v50 == CFGetTypeID(v49)))
    {
      Length = CFDataGetLength(v49);
      if (Length > 64)
      {
LABEL_29:
        v31 = 4294954391;
LABEL_30:
        CFRelease(v21);
        return v31;
      }
      BytePtr = CFDataGetBytePtr(v49);
      memcpy(a9, BytePtr, Length);
    }
    else
    {
      *a9 = 0;
      LOBYTE(Length) = 1;
    }
    v53 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA9158]);
    if (v53)
    {
      v54 = v53;
      v55 = CFNumberGetTypeID();
      if (v55 == CFGetTypeID(v54))
        CFNumberGetValue(v54, kCFNumberIntType, &v62);
    }
    v56 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E0CA9150]);
    if (v56)
    {
      v57 = 1;
      CFNumberGetValue(v56, kCFNumberSInt8Type, a11);
      if (!*a11)
      {
        v31 = FigSignalErrorAt();
        goto LABEL_30;
      }
    }
    else
    {
      v57 = 0;
    }
    v31 = 0;
    v58 = v66;
    *a3 = v67;
    *a4 = v58;
    *a5 = valuePtr;
    *a6 = v64;
    *v60 = v63;
    *a8 = v62;
    *a12 = v57;
    *a10 = Length;
    goto LABEL_30;
  }
  if (pixelFormat != 1380401729)
    return 4294954391;
  v31 = 0;
  *a3 = 1;
  *a4 = 1;
  *a5 = 32;
  *a6 = 1;
  *a7 = 1;
  *(_DWORD *)a9 = -16777216;
  return v31;
}

uint64_t VTFillBufferPixelsWithBlack(__CVBuffer *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v9;
  size_t v10;
  int v11;
  void *BaseAddressOfPlane;
  uint64_t v13;
  size_t BytesPerRowOfPlane;
  const __CFDictionary *DescriptionWithPixelFormatType;
  size_t Width;
  size_t Height;
  const __CFArray *Value;
  const __CFArray *v19;
  CFTypeID v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  IOSurfaceRef IOSurface;
  __IOSurface *v27;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  void *v29;
  uint64_t BytesPerRowOfCompressedTileHeaderGroupsOfPlane;
  unint64_t HeightInCompressedTilesOfPlane;
  size_t v32;
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane;
  uint64_t v34;
  uint64_t CompressedTileWidthOfPlane;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *BaseAddress;
  uint64_t v40;
  size_t BytesPerRow;
  const void *v43;
  uint64_t v44;

  if (CVPixelBufferIsPlanar(a1))
  {
    result = CVPixelBufferGetPlaneCount(a1);
    if (result)
    {
      v9 = result;
      v10 = 0;
      v43 = (const void *)*MEMORY[0x1E0CA91B0];
      v44 = result;
      while (1)
      {
        v11 = BYTE1(a6[14 * v10 + 13]);
        if ((v11 - 3) < 2)
        {
          if (a1)
          {
            CVPixelBufferGetPixelFormatType(a1);
            DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
            if (DescriptionWithPixelFormatType)
            {
              if (a4)
              {
                if (a5)
                {
                  Width = CVPixelBufferGetWidth(a1);
                  Height = CVPixelBufferGetHeight(a1);
                  if (Width)
                  {
                    if (Height)
                    {
                      Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, v43);
                      if (Value)
                      {
                        v19 = Value;
                        v20 = CFGetTypeID(Value);
                        if (v20 == CFArrayGetTypeID())
                        {
                          CFArrayGetValueAtIndex(v19, v10);
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          v21 = 0;
                          v22 = 16;
                          do
                          {
                            ++v21;
                            v23 = v22 > 3;
                            v22 >>= 1;
                          }
                          while (v23);
                          v24 = 0;
                          v25 = 16;
                          do
                          {
                            ++v24;
                            v23 = v25 > 3;
                            v25 >>= 1;
                          }
                          while (v23);
                          IOSurface = CVPixelBufferGetIOSurface(a1);
                          if (IOSurface)
                          {
                            v27 = IOSurface;
                            if (!IOSurfaceGetProtectionOptions())
                            {
                              IOSurfaceGetWidthInCompressedTilesOfPlane();
                              IOSurfaceGetHeightInCompressedTilesOfPlane();
                              IOSurfaceGetBytesPerRowOfTileDataOfPlane();
                              IOSurfaceGetBytesPerElementOfPlane(v27, v10);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          result = FigSignalErrorAt();
          v9 = v44;
          if ((_DWORD)result)
            return result;
        }
        else if (v11 == 1)
        {
          if (a3 | a2 || !CVPixelBufferGetIOSurface(a1))
          {
LABEL_34:
            result = FigSignalErrorAt();
            if ((_DWORD)result)
              return result;
            goto LABEL_37;
          }
          BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
          if (BaseAddressOfCompressedTileHeaderRegionOfPlane)
          {
            v29 = (void *)BaseAddressOfCompressedTileHeaderRegionOfPlane;
            BytesPerRowOfCompressedTileHeaderGroupsOfPlane = IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
            HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
            v32 = (HeightInCompressedTilesOfPlane >> IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane())
                * BytesPerRowOfCompressedTileHeaderGroupsOfPlane;
            if (v32 >= IOSurfaceGetSizeOfPlane())
              goto LABEL_34;
            bzero(v29, v32);
          }
          BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
          if (BaseAddressOfCompressedTileDataRegionOfPlane)
          {
            v34 = BaseAddressOfCompressedTileDataRegionOfPlane;
            CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
            v36 = IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane * a6[14 * v10 + 2];
            if (v36 >= 8)
            {
              v37 = 0;
              v38 = v36 >> 3;
              do
              {
                *(_BYTE *)(v34 + v37) = *((_BYTE *)&a6[14 * v10 + 5] + v37 % LOBYTE(a6[14 * v10 + 13]));
                ++v37;
              }
              while (v38 != v37);
            }
          }
        }
        else
        {
          if (BYTE1(a6[14 * v10 + 13]))
            return FigSignalErrorAt();
          BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v10);
          if (!BaseAddressOfPlane)
            return 4294954394;
          v13 = (uint64_t)BaseAddressOfPlane;
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v10);
          vtFillPlanePixelsWithBlack(v13, BytesPerRowOfPlane, a2, a3, a4, a5, 1, &a6[14 * v10]);
        }
LABEL_37:
        if (++v10 == v9)
          return 0;
      }
    }
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    if (BaseAddress)
    {
      v40 = (uint64_t)BaseAddress;
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      vtFillPlanePixelsWithBlack(v40, BytesPerRow, a2, a3, a4, a5, 0, a6);
      return 0;
    }
    else
    {
      return 4294954394;
    }
  }
  return result;
}

void vtFillPlanePixelsWithBlack(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned __int8 *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  unint64_t v23;
  char v24;

  v9 = *a8;
  v10 = a8[1];
  if (a7)
  {
    v9 *= a8[3];
    v10 *= a8[4];
  }
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = a8[2];
    v13 = ~(a3 / v9 * v9) + a3 + a5 + v9;
    v14 = ~(a4 / v10 * v10) + a4 + a6 + v10;
    v15 = (char *)(a1 + a4 / v10 * a2 + a3 / v9 * (v12 >> 3));
    v16 = (unsigned __int8 *)(a8 + 5);
    v17 = v13 / v9 * (v12 >> 3);
    v18 = v14 / v10;
    switch(v12 >> 3)
    {
      case 1uLL:
        if (v10 <= v14)
        {
          do
          {
            memset(v15, *v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      case 2uLL:
        *((_WORD *)a8 + 21) = *((_WORD *)a8 + 20);
        goto LABEL_28;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_17;
      case 4uLL:
LABEL_28:
        if (v10 <= v14)
        {
          do
          {
            memset_pattern4(v15, v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      case 8uLL:
        if (v10 <= v14)
        {
          do
          {
            memset_pattern8(v15, v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      default:
        if (v12 >> 3 == 16)
        {
          if (v10 <= v14)
          {
            do
            {
              memset_pattern16(v15, v16, v17);
              v15 += a2;
              --v18;
            }
            while (v18);
          }
        }
        else
        {
LABEL_17:
          if (v10 <= v14)
          {
            v19 = 0;
            do
            {
              if (v9 <= v13)
              {
                v20 = 0;
                v21 = v15;
                do
                {
                  if (v12 >= 8)
                  {
                    v22 = (char *)(a8 + 5);
                    v23 = v12 >> 3;
                    do
                    {
                      v24 = *v22++;
                      *v21++ = v24;
                      --v23;
                    }
                    while (v23);
                  }
                  ++v20;
                }
                while (v20 != v13 / v9);
              }
              v15 += a2;
              ++v19;
            }
            while (v19 != v18);
          }
        }
        break;
    }
  }
}

uint64_t VTFillPixelBufferWithBlack(__CVBuffer *a1)
{
  size_t PlaneCount;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  OSType PixelFormatType;
  uint64_t PixelFormatPixelBlockInfo;
  size_t Width;
  size_t Height;
  _OWORD v14[28];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  if (!a1)
    return FigSignalErrorAt();
  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    v5 = 0;
    v6 = 4294954394;
    goto LABEL_16;
  }
  if (!CVPixelBufferIsPlanar(a1))
  {
    v5 = 0;
    v4 = (uint64_t *)v14;
    v3 = 1;
    goto LABEL_10;
  }
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v3 = PlaneCount;
  if (PlaneCount < 5)
  {
    v5 = 0;
    v4 = (uint64_t *)v14;
    if (!PlaneCount)
    {
LABEL_13:
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, 0, Width, Height, v4);
LABEL_14:
      v6 = PixelFormatPixelBlockInfo;
      goto LABEL_15;
    }
LABEL_10:
    v8 = 0;
    v9 = 0;
    while (1)
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(PixelFormatType, v9, &v4[v8], &v4[v8 + 1], &v4[v8 + 2], &v4[v8 + 3], &v4[v8 + 4], (_BYTE *)&v4[v8 + 13] + 1, &v4[v8 + 5], &v4[v8 + 13], (_BYTE *)&v4[v8 + 13] + 2, (char *)&v4[v8 + 13] + 6);
      if ((_DWORD)PixelFormatPixelBlockInfo)
        goto LABEL_14;
      ++v9;
      v8 += 14;
      if (v3 == v9)
        goto LABEL_13;
    }
  }
  v4 = (uint64_t *)malloc_type_calloc(PlaneCount, 0x70uLL, 0x100004081F0E799uLL);
  v5 = v4;
  if (v4)
    goto LABEL_10;
  v6 = 4294954392;
LABEL_15:
  CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_16:
  free(v5);
  return v6;
}

uint64_t VTFillPixelBufferBorderWithBlack(__CVBuffer *a1, double a2, double a3, double a4, double a5)
{
  size_t PlaneCount;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  OSType PixelFormatType;
  uint64_t PixelFormatPixelBlockInfo;
  size_t Width;
  size_t Height;
  unint64_t v22;
  _OWORD v23[28];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  memset(v23, 0, sizeof(v23));
  if (!a1)
    return FigSignalErrorAt();
  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    v13 = 0;
    v14 = 4294954394;
    goto LABEL_25;
  }
  if (!CVPixelBufferIsPlanar(a1))
  {
    v13 = 0;
    v12 = (uint64_t *)v23;
    v11 = 1;
    goto LABEL_10;
  }
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v11 = PlaneCount;
  if (PlaneCount < 5)
  {
    v12 = (uint64_t *)v23;
    v13 = 0;
    if (!PlaneCount)
    {
LABEL_13:
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      if (BYTE1(v12[14 * v11 + 13]))
      {
        PixelFormatPixelBlockInfo = FigSignalErrorAt();
      }
      else
      {
        v22 = Height;
        if (a3 <= 0.0
          || (PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, 0, Width, (unint64_t)a3, v12),
              !(_DWORD)PixelFormatPixelBlockInfo))
        {
          if (a2 <= 0.0
            || (PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, (unint64_t)a3, (unint64_t)a2, (unint64_t)a5, v12), !(_DWORD)PixelFormatPixelBlockInfo))
          {
            if (a2 + a4 >= (double)Width
              || (PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, (unint64_t)(a2 + a4), (unint64_t)a3, (unint64_t)((double)Width - (a2 + a4)), (unint64_t)a5, v12), !(_DWORD)PixelFormatPixelBlockInfo))
            {
              if (a3 + a5 >= (double)v22)
              {
                v14 = 0;
                goto LABEL_24;
              }
              PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, (unint64_t)(a3 + a5), Width, (unint64_t)((double)v22 - (a3 + a5)), v12);
            }
          }
        }
      }
      goto LABEL_23;
    }
LABEL_10:
    v16 = 0;
    v17 = 0;
    while (1)
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(PixelFormatType, v17, &v12[v16], &v12[v16 + 1], &v12[v16 + 2], &v12[v16 + 3], &v12[v16 + 4], (_BYTE *)&v12[v16 + 13] + 1, &v12[v16 + 5], &v12[v16 + 13], (_BYTE *)&v12[v16 + 13] + 2, (char *)&v12[v16 + 13] + 6);
      if ((_DWORD)PixelFormatPixelBlockInfo)
        break;
      ++v17;
      v16 += 14;
      if (v11 == v17)
        goto LABEL_13;
    }
LABEL_23:
    v14 = PixelFormatPixelBlockInfo;
    goto LABEL_24;
  }
  v12 = (uint64_t *)malloc_type_calloc(PlaneCount, 0x70uLL, 0x100004081F0E799uLL);
  v13 = v12;
  if (v12)
    goto LABEL_10;
  v14 = 4294954392;
LABEL_24:
  CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_25:
  free(v13);
  return v14;
}

uint64_t vtWritePatternToMemory(_BYTE *a1, char *p_pattern4, unint64_t a3, size_t __len)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char __pattern4;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;

  v4 = 4294954394;
  if (a1 && p_pattern4)
  {
    switch(a3)
    {
      case 1uLL:
        memset(a1, *p_pattern4, __len);
        goto LABEL_17;
      case 2uLL:
        __pattern4 = *p_pattern4;
        v9 = p_pattern4[1];
        v10 = __pattern4;
        v11 = v9;
        p_pattern4 = &__pattern4;
        goto LABEL_15;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_7;
      case 4uLL:
LABEL_15:
        memset_pattern4(a1, p_pattern4, __len);
        goto LABEL_17;
      case 8uLL:
        memset_pattern8(a1, p_pattern4, __len);
        goto LABEL_17;
      default:
        if (a3 == 16)
        {
          memset_pattern16(a1, p_pattern4, __len);
        }
        else
        {
LABEL_7:
          if (__len)
          {
            v5 = 0;
            do
            {
              if (v5 >= a3)
                v6 = 0;
              else
                v6 = v5;
              v5 = v6 + 1;
              *a1++ = p_pattern4[v6];
              --__len;
            }
            while (__len);
          }
        }
LABEL_17:
        v4 = 0;
        break;
    }
  }
  return v4;
}

uint64_t VTCopyTemporalFilterList(const __CFDictionary *a1, const __CFArray **a2)
{
  uint64_t v4;
  uint64_t Count;
  const __CFAllocator *v6;
  CFIndex v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  uint64_t v10;
  __CFDictionary *Mutable;
  const void *Value;
  CFTypeID TypeID;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  const void *v18;
  CFTypeID v19;
  uint64_t v20;
  const __CFArray **v22;
  const __CFArray *theArray;
  CFRange v24;

  MEMORY[0x1940281CC](&sCreateAndPopulateTemporalFiltersRegistryOnce, vtCreateAndPopulateTemporalFilterRegistry);
  if (!sTemporalFilterRegistry)
    return FigSignalErrorAt();
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, CFSTR("Class")))
      CFDictionaryGetValue(a1, CFSTR("Class"));
    if (CFDictionaryContainsKey(a1, CFSTR("TemporalFilterSpecifications")))
      CFDictionaryGetValue(a1, CFSTR("TemporalFilterSpecifications"));
  }
  v4 = FigRegistryCopyFilteredItemList();
  if ((_DWORD)v4)
    return v4;
  v22 = a2;
  Count = CFArrayGetCount(0);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (Count < 1)
  {
LABEL_32:
    v24.length = CFArrayGetCount(theArray);
    v24.location = 0;
    CFArraySortValues(theArray, v24, (CFComparatorFunction)vtCompareClassNameThenTemporalFilterName, 0);
    v20 = 0;
    *v22 = theArray;
    return v20;
  }
  v7 = 0;
  v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  while (1)
  {
    CFArrayGetValueAtIndex(0, v7);
    v10 = FigRegistryItemCopyDescription();
    if ((_DWORD)v10)
      break;
    v10 = FigRegistryItemCopyMatchingInfo();
    if ((_DWORD)v10)
      break;
    v10 = FigRegistryItemCopyBundle();
    if ((_DWORD)v10)
      break;
    Mutable = CFDictionaryCreateMutable(v6, 0, v8, v9);
    Value = CFDictionaryGetValue(0, CFSTR("VTTemporalFilterClass"));
    if (!Value)
      goto LABEL_20;
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(Value))
    {
      CFDictionarySetValue(Mutable, CFSTR("Class"), Value);
      v14 = CFDictionaryGetValue(0, CFSTR("CMClassImplementationID"));
      if (!v14)
        goto LABEL_20;
      v15 = CFStringGetTypeID();
      if (v15 == CFGetTypeID(v14))
      {
        CFDictionarySetValue(Mutable, CFSTR("TemporalFilterID"), v14);
        v16 = CFDictionaryGetValue(0, CFSTR("VTTemporalFilterClassName"));
        if (!v16)
        {
LABEL_20:
          if (!Mutable)
            goto LABEL_24;
          goto LABEL_23;
        }
        v17 = CFStringGetTypeID();
        if (v17 == CFGetTypeID(v16))
        {
          CFDictionarySetValue(Mutable, CFSTR("ClassName"), v16);
          v18 = CFDictionaryGetValue(0, CFSTR("VTTemporalFilterName"));
          if (v18)
          {
            v19 = CFStringGetTypeID();
            if (v19 == CFGetTypeID(v18))
            {
              CFDictionarySetValue(Mutable, CFSTR("TemporalFilterName"), v18);
              CFDictionarySetValue(Mutable, CFSTR("DisplayName"), v18);
              CFArrayAppendValue(theArray, Mutable);
              if (!Mutable)
                goto LABEL_24;
LABEL_23:
              CFRelease(Mutable);
              goto LABEL_24;
            }
          }
        }
      }
    }
    if (Mutable)
      goto LABEL_23;
LABEL_24:
    if (++v7 == Count)
      goto LABEL_32;
  }
  v20 = v10;
  if (theArray)
    CFRelease(theArray);
  return v20;
}

void vtCreateAndPopulateTemporalFilterRegistry()
{
  const __CFAllocator *v0;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v2;
  CFMutableArrayRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  int valuePtr;
  void *values[7];
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  MEMORY[0x1940281CC](&sCreateTemporalFiltersRegistryOnce, vtCreateTemporalFilterRegistry);
  vtLoadTemporalFilterPluginsFromPath("/System/Library/Video/Plug-Ins");
  vtLoadTemporalFilterPluginsFromPath("/Library/Video/Plug-Ins");
  FigRegistryRescan();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v2 = Mutable;
    v3 = CFArrayCreateMutable(v0, 2, MEMORY[0x1E0C9B378]);
    FigCFArrayAppendDouble();
    FigCFArrayAppendDouble();
    CFDictionaryAddValue(v2, CFSTR("VTTemporalFilterClass"), CFSTR("Enhancement"));
    CFDictionaryAddValue(v2, CFSTR("SupportedScaleFactors"), v3);
    valuePtr = 1;
    keys[0] = CFSTR("CMClassID");
    keys[1] = CFSTR("CMClassImplementationName");
    keys[2] = CFSTR("VTTemporalFilterClassName");
    keys[3] = CFSTR("VTTemporalFilterName");
    keys[4] = CFSTR("CMClassImplementationVersion");
    keys[5] = CFSTR("CMClassImplementationID");
    keys[6] = CFSTR("CMMatchingInfo");
    v4 = CFNumberCreate(v0, kCFNumberIntType, &valuePtr);
    if (v4)
    {
      v5 = v4;
      values[0] = CFSTR("com.apple.videotoolbox.temporalfilter");
      values[1] = CFSTR("SRS Enhancement Filter");
      values[2] = CFSTR("SRSEnhancementFilter");
      values[3] = CFSTR("SRSEnhancementFilter");
      values[4] = v4;
      values[5] = CFSTR("com.apple.videotoolbox.temporalfilter.SRSEnhancementFilter");
      values[6] = v2;
      v6 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v6)
      {
        v7 = v6;
        FigRegistryAddItem();
        CFRelease(v5);
        v8 = v7;
      }
      else
      {
        FigSignalErrorAt();
        v8 = v5;
      }
      CFRelease(v8);
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      FigSignalErrorAt();
      if (!v3)
        goto LABEL_10;
    }
    CFRelease(v3);
LABEL_10:
    CFRelease(v2);
  }
}

uint64_t vtFilterRegistryItemByFilterClassAndFilterSpecification(uint64_t a1)
{
  const __CFDictionary *v2;
  int v3;
  const void *Value;
  CFTypeID v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *v9;
  uint64_t v10;
  CFTypeID v11;
  const __CFString *v12;
  const __CFString *v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  _BOOL4 v17;
  char v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v23;
  const __CFString *ValueAtIndex;
  CFIndex v25;
  const __CFString *v26;
  uint64_t v28;
  uint64_t v29;
  CFDictionaryRef theDict;
  CFDictionaryRef v31;

  theDict = 0;
  v31 = 0;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = 1;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription())
    goto LABEL_38;
  v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2 && CFDictionaryGetValue(v2, CFSTR("TemporalFilterID")))
  {
    CFDictionaryGetValue(theDict, CFSTR("CMClassImplementationID"));
    v3 = 0;
    if (!FigCFEqual())
      goto LABEL_38;
  }
  else
  {
    v3 = 1;
  }
  Value = CFDictionaryGetValue(v31, CFSTR("VTTemporalFilterClass"));
  if (!Value)
    goto LABEL_38;
  v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID() || !FigCFEqual())
    goto LABEL_38;
  v6 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("CMDependencies"));
  if (!v6 || (v7 = v6, v8 = CFGetTypeID(v6), v8 != CFDictionaryGetTypeID()))
  {
    if (!v3)
    {
LABEL_28:
      v10 = 1;
      goto LABEL_39;
    }
    goto LABEL_25;
  }
  v9 = CFDictionaryGetValue(v7, CFSTR("IORegistryRequiredKey"));
  v10 = (uint64_t)v9;
  if (!v9)
    goto LABEL_39;
  v11 = CFGetTypeID(v9);
  if (v11 != CFStringGetTypeID())
    goto LABEL_38;
  v12 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("IORegistryServiceName"));
  if (!v12)
    goto LABEL_38;
  v13 = v12;
  v14 = CFGetTypeID(v12);
  if (v14 != CFStringGetTypeID())
  {
    v15 = CFGetTypeID(v13);
    if (v15 != CFArrayGetTypeID())
      goto LABEL_38;
  }
  v16 = CFGetTypeID(v13);
  if (v16 == CFStringGetTypeID())
  {
    v17 = VTDoesIOServiceSupportRegistryKey(v13, (const __CFString *)v10);
    v10 = v17;
    if (v17)
      v18 = v3;
    else
      v18 = 0;
    if ((v18 & 1) == 0)
      goto LABEL_39;
    goto LABEL_25;
  }
  Count = CFArrayGetCount((CFArrayRef)v13);
  if (Count < 1)
  {
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  v23 = Count;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, 0);
  if (!VTDoesIOServiceSupportRegistryKey(ValueAtIndex, (const __CFString *)v10))
  {
    v25 = 1;
    while (v23 != v25)
    {
      v26 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v25++);
      if (VTDoesIOServiceSupportRegistryKey(v26, (const __CFString *)v10))
      {
        v10 = v25 - 1 < v23;
        goto LABEL_36;
      }
    }
    goto LABEL_38;
  }
  v10 = 1;
LABEL_36:
  if ((v3 & v10 & 1) != 0)
  {
LABEL_25:
    v19 = (const __CFDictionary *)CFDictionaryGetValue(v31, CFSTR("VTRequiredSpecificationEntries"));
    if (v19)
    {
      v20 = v19;
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v20))
      {
        CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)vtCheckRequiredTemporalFilterSpecificationKey, &v28);
        v10 = v29;
        goto LABEL_39;
      }
    }
    goto LABEL_28;
  }
LABEL_39:
  if (v31)
    CFRelease(v31);
  if (theDict)
    CFRelease(theDict);
  return v10;
}

CFComparisonResult vtCompareClassNameThenTemporalFilterName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  CFComparisonResult result;
  const __CFString *v7;
  const __CFString *v8;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("ClassName"));
  v5 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("ClassName"));
  result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    v7 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("TemporalFilterName"));
    v8 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("TemporalFilterName"));
    return CFStringCompare(v7, v8, 0);
  }
  return result;
}

uint64_t VTSelectAndCreateTemporalFilterInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    MEMORY[0x1940281CC](&sCreateAndPopulateTemporalFiltersRegistryOnce, vtCreateAndPopulateTemporalFilterRegistry);
    if (sTemporalFilterRegistry)
      FigRegistryCopyFilteredItemList();
  }
  return FigSignalErrorAt();
}

uint64_t vtCreateTemporalFilterRegistry()
{
  return FigRegistryCreate();
}

void vtLoadTemporalFilterPluginsFromPath(const char *a1)
{
  const __CFAllocator *v2;
  const __CFString *v3;
  const __CFString *v4;
  CFURLRef v5;
  CFURLRef v6;

  if (access(a1, 4) != -1)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0x8000100u);
    if (v3)
    {
      v4 = v3;
      v5 = CFURLCreateWithFileSystemPath(v2, v3, kCFURLPOSIXPathStyle, 1u);
      if (v5)
      {
        v6 = v5;
        FigRegistryAddSearchPathWithOptions();
        CFRelease(v6);
      }
      CFRelease(v4);
    }
  }
}

const __CFDictionary *vtCheckRequiredTemporalFilterSpecificationKey(void *key, const void *a2, uint64_t a3)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)a3;
  if (!*(_QWORD *)a3
    || (result = (const __CFDictionary *)CFDictionaryGetValue(result, key), !a2)
    || !result
    || (result = (const __CFDictionary *)CFEqual(result, a2), !(_DWORD)result))
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t vt_Copy_32BGRA_444vITU601(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE *v20;
  uint32x2_t v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v11 = *a6;
    v10 = a6[1];
    v12 = *a4 + 2;
    v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        v14 = 0;
        v15 = (unsigned __int8 *)v12;
        do
        {
          v16 = *v15;
          v17 = *(v15 - 1);
          v18 = *(v15 - 2);
          *(_BYTE *)(v11 + v14) = (16519 * v17 + 8414 * v16 + 3208 * v18 + 540672) >> 15;
          v19 = vdup_n_s32(v16);
          v20 = (_BYTE *)(v10 + 2 * v14);
          v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FD0ED007FDAC2), v19, (int32x2_t)0x3838007FED08), vdup_n_s32(v18), (int32x2_t)0x7FF6DC00003838), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU601(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = *a4 + 2;
    v11 = *a6;
    v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        v13 = 0;
        v14 = (unsigned __int8 *)v10;
        v15 = v12;
        do
        {
          v16 = *v14;
          v17 = *(v14 - 1);
          v18 = *(v14 - 2);
          v19 = (19235 * v17 + 9798 * v16 + 3736 * v18 + 0x4000) >> 15;
          v20 = -10854 * v17 - 5528 * v16 + (v18 << 14);
          v21 = v20 + 0x400000;
          v22 = (v20 + 4210688) >> 15;
          v23 = -13719 * v17 + (v16 << 14) - 2663 * v18;
          v24 = v23 + 0x400000;
          v25 = (v23 + 4210688) >> 15;
          *(_BYTE *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF)
            v26 = -1;
          else
            v26 = v22;
          *v15 = v26;
          if (v24 > 0x7FBFFF)
            LOBYTE(v25) = -1;
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444vITU709(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE *v20;
  uint32x2_t v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v11 = *a6;
    v10 = a6[1];
    v12 = *a4 + 2;
    v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        v14 = 0;
        v15 = (unsigned __int8 *)v12;
        do
        {
          v16 = *v15;
          v17 = *(v15 - 1);
          v18 = *(v15 - 2);
          *(_BYTE *)(v11 + v14) = (20127 * v17 + 5983 * v16 + 2032 * v18 + 540672) >> 15;
          v19 = vdup_n_s32(v16);
          v20 = (_BYTE *)(v10 + 2 * v14);
          v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FCCF0007FD4ABLL), v19, (int32x2_t)0x3838007FF31FLL), vdup_n_s32(v18), (int32x2_t)0x7FFAD900003838), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU709(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = *a4 + 2;
    v11 = *a6;
    v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        v13 = 0;
        v14 = (unsigned __int8 *)v10;
        v15 = v12;
        do
        {
          v16 = *v14;
          v17 = *(v14 - 1);
          v18 = *(v14 - 2);
          v19 = (23436 * v17 + 6966 * v16 + 2366 * v18 + 0x4000) >> 15;
          v20 = -12629 * v17 - 3753 * v16 + (v18 << 14);
          v21 = v20 + 0x400000;
          v22 = (v20 + 4210688) >> 15;
          v23 = -14881 * v17 + (v16 << 14) - 1501 * v18;
          v24 = v23 + 0x400000;
          v25 = (v23 + 4210688) >> 15;
          *(_BYTE *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF)
            v26 = -1;
          else
            v26 = v22;
          *v15 = v26;
          if (v24 > 0x7FBFFF)
            LOBYTE(v25) = -1;
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444vITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int32x2_t v19;
  _BYTE *v20;
  uint32x2_t v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v11 = *a6;
    v10 = a6[1];
    v12 = *a4 + 2;
    v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        v14 = 0;
        v15 = (unsigned __int8 *)v12;
        do
        {
          v16 = *v15;
          v17 = *(v15 - 1);
          v18 = *(v15 - 2);
          *(_BYTE *)(v11 + v14) = (19024 * v17 + 7371 * v16 + 1664 * v18 + 540672) >> 15;
          v19 = vdup_n_s32(v16);
          v20 = (_BYTE *)(v10 + 2 * v14);
          v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FCC75007FD79ALL), v19, (int32x2_t)0x380E007FF05ALL), vdup_n_s32(v18), (int32x2_t)0x7FFB7F0000380ELL), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = *a4 + 2;
    v11 = *a6;
    v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        v13 = 0;
        v14 = (unsigned __int8 *)v10;
        v15 = v12;
        do
        {
          v16 = *v14;
          v17 = *(v14 - 1);
          v18 = *(v14 - 2);
          v19 = (22217 * v17 + 8608 * v16 + 1943 * v18 + 0x4000) >> 15;
          v20 = -11808 * v17 - 4574 * v16 + (v18 << 14);
          v21 = v20 + 0x400000;
          v22 = (v20 + 4210688) >> 15;
          v23 = -15065 * v17 + (v16 << 14) - 1317 * v18;
          v24 = v23 + 0x400000;
          v25 = (v23 + 4210688) >> 15;
          *(_BYTE *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF)
            v26 = -1;
          else
            v26 = v22;
          *v15 = v26;
          if (v24 > 0x7FBFFF)
            LOBYTE(v25) = -1;
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t VTPixelBufferConformerGetTypeID()
{
  if (sRegisterVTPixelBufferConformerTypeOnce != -1)
    dispatch_once_f(&sRegisterVTPixelBufferConformerTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferConformerIDType);
  return sVTPixelBufferConformerID;
}

uint64_t RegisterVTPixelBufferConformerIDType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTPixelBufferConformerID = result;
  return result;
}

uint64_t VTPixelBufferConformerCreateWithAttributes(uint64_t a1, const void *a2, uint64_t *a3)
{
  const __CFAllocator *v5;
  uint64_t Instance;
  uint64_t v7;
  uint64_t v8;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (sRegisterVTPixelBufferConformerTypeOnce != -1)
    dispatch_once_f(&sRegisterVTPixelBufferConformerTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferConformerIDType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v7 + 32) = a2;
  v8 = VTPixelTransferSessionCreate(v5, (VTPixelTransferSessionRef *)(v7 + 24));
  if ((_DWORD)v8 || !*(_QWORD *)(v7 + 24))
  {
    CFRelease((CFTypeRef)v7);
  }
  else
  {
    v8 = 0;
    *a3 = v7;
  }
  return v8;
}

uint64_t VTPixelBufferConformerGetAttributes(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

void VTPixelBufferConformerSetAttributes(uint64_t a1, const void *a2)
{
  CFTypeRef *v3;

  v3 = (CFTypeRef *)(a1 + 32);
  if (!FigCFEqual())
  {
    if (a2)
      CFRetain(a2);
    if (*v3)
      CFRelease(*v3);
    *v3 = a2;
  }
}

uint64_t VTPixelBufferConformerGetColorProperties(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t VTPixelBufferConformerSetColorProperties(uint64_t result, const void *a2)
{
  uint64_t v3;
  const void *v4;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;

  if (result)
  {
    v3 = result;
    result = FigCFEqual();
    if (!(_DWORD)result)
    {
      v4 = *(const void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = a2;
      if (a2)
        CFRetain(a2);
      if (v4)
        CFRelease(v4);
      v5 = *(const __CFDictionary **)(v3 + 40);
      if (v5)
      {
        Value = CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0CA8D68]);
        v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E0CA8E98]);
        v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E0CA8EE8]);
        v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E0CA8E40]);
      }
      else
      {
        Value = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
      }
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), CFSTR("DestinationColorPrimaries"), Value);
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), CFSTR("DestinationTransferFunction"), v7);
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), CFSTR("DestinationYCbCrMatrix"), v8);
      return VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), CFSTR("DestinationICCProfile"), v9);
    }
  }
  return result;
}

uint64_t VTPixelBufferConformerIsConformantPixelBuffer(uint64_t a1, void *cf)
{
  CFTypeID v4;
  uint64_t result;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CVPixelBufferGetTypeID())
    return 0;
  if (!*(_QWORD *)(a1 + 32) || (result = CVPixelBufferIsCompatibleWithAttributes(), (_DWORD)result))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      result = VTIsBufferTaggedWithColorProperties(cf);
      if ((_DWORD)result)
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0CA8D68]);
        v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0CA8E98]);
        v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0CA8EE8]);
        v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0CA8E40]);
        return VTIsPixelBufferCompatibleWithColorProperties(cf, Value, v7, v8, v9, 0);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t VTPixelBufferConformerCopyBlackPixelBuffer(uint64_t a1, const opaqueCMFormatDescription *a2, CVPixelBufferRef *a3)
{
  __CVPixelBufferPool *v6;
  CVPixelBufferPoolRef *v7;
  CFTypeRef v8;
  const __CFAllocator *v9;
  const __CFDictionary *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  const void *v19;
  uint64_t MutableCopy;
  uint64_t v21;
  CVPixelBufferRef v22;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a3)
    return FigSignalErrorAt();
  v7 = (CVPixelBufferPoolRef *)(a1 + 16);
  v6 = *(__CVPixelBufferPool **)(a1 + 16);
  if (v6)
  {
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_23;
  }
  v10 = *(const __CFDictionary **)(a1 + 32);
  if (v10)
  {
    v11 = CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E0CA8FD8]);
    v12 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E0CA90E0]);
    v13 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E0CA9040]);
    v14 = v11 != 0;
    v15 = v12 != 0;
    v16 = v13 != 0;
    if (v11)
      v17 = v12 == 0;
    else
      v17 = 1;
    if (!v17 && v13 != 0)
    {
      v19 = *(const void **)(a1 + 32);
      if (!v19)
        return FigSignalErrorAt();
      v8 = CFRetain(v19);
      if (!v8)
        return FigSignalErrorAt();
LABEL_21:
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)v8, v7)
        || (v6 = *v7) == 0)
      {
        v21 = FigSignalErrorAt();
LABEL_27:
        CFRelease(v8);
        return v21;
      }
LABEL_23:
      v21 = CVPixelBufferPoolCreatePixelBuffer(v9, v6, &pixelBufferOut);
      v22 = pixelBufferOut;
      if ((_DWORD)v21 || (v21 = VTFillPixelBufferWithBlack(pixelBufferOut), v22 = pixelBufferOut, (_DWORD)v21))
      {
        if (v22)
          CFRelease(v22);
      }
      else
      {
        *a3 = pixelBufferOut;
        pixelBufferOut = 0;
      }
      if (!v8)
        return v21;
      goto LABEL_27;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v14 = 0;
  }
  CMVideoFormatDescriptionGetDimensions(a2);
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v8 = (CFTypeRef)MutableCopy;
    if (v14)
    {
      if (v15)
        goto LABEL_19;
    }
    else
    {
      FigCFDictionarySetInt32();
      if (v15)
      {
LABEL_19:
        if (v16)
          goto LABEL_21;
LABEL_20:
        FigCFDictionarySetInt32();
        goto LABEL_21;
      }
    }
    FigCFDictionarySetInt32();
    if (v16)
      goto LABEL_21;
    goto LABEL_20;
  }
  FigSignalErrorAt();
  return FigSignalErrorAt();
}

uint64_t VTPixelBufferConformerCopyConformedPixelBuffer(uint64_t a1, void *cf, int a3, CFTypeRef *a4)
{
  CFTypeRef *v4;
  void *v5;
  const __CFDictionary *Attributes;
  CVPixelBufferRef v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  __CVBuffer *v11;
  const __CFAllocator *v12;
  CFIndex Count;
  const __CFDictionary *Mutable;
  uint64_t v16;
  uint64_t v17;
  CVPixelBufferRef v18;
  CFTypeID v19;
  void *v20;
  void *v21;
  signed int PixelFormatType;
  const __CFArray *v23;
  int v24;
  CFIndex v25;
  int v26;
  uint64_t v27;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v29;
  CFTypeID v30;
  int v31;
  int v32;
  int v33;
  BOOL v35;
  BOOL v36;
  CFNumberRef v37;
  __CVPixelBufferPool *v38;
  CVPixelBufferPoolRef *v39;
  uint64_t PixelBuffer;
  int IsCompatibleWithAttributes;
  __CVBuffer *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef *v46;
  const __CFArray *cfa;
  __CVBuffer *key;
  const __CFDictionary *v49;
  const __CFAllocator *allocator;
  void *v51;
  CFTypeRef v52;
  int v53;
  void *value;
  CFDictionaryRef resolvedDictionaryOut;
  int valuePtr;
  CVPixelBufferRef pixelBufferOut[6];
  void *values[3];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v52 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v4 = a4;
  v5 = cf;
  if (!cf)
  {
    Mutable = 0;
    v16 = 0;
    *a4 = 0;
    goto LABEL_105;
  }
  if (!a3 && VTPixelBufferConformerIsConformantPixelBuffer(a1, cf))
  {
    *v4 = v5;
    CFRetain(v5);
    Mutable = 0;
    v16 = 0;
    goto LABEL_105;
  }
  resolvedDictionaryOut = 0;
  values[0] = *(void **)(a1 + 32);
  Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes();
  v8 = (CVPixelBufferRef)*MEMORY[0x1E0CA9040];
  v9 = (__CVBuffer *)*MEMORY[0x1E0CA90E0];
  pixelBufferOut[0] = *(CVPixelBufferRef *)MEMORY[0x1E0CA9040];
  pixelBufferOut[1] = v9;
  v10 = (__CVBuffer *)*MEMORY[0x1E0CA8F68];
  pixelBufferOut[2] = *(CVPixelBufferRef *)MEMORY[0x1E0CA8FD8];
  pixelBufferOut[3] = v10;
  v11 = (__CVBuffer *)*MEMORY[0x1E0CA9010];
  pixelBufferOut[4] = *(CVPixelBufferRef *)MEMORY[0x1E0CA8FF0];
  pixelBufferOut[5] = v11;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!*(_QWORD *)(a1 + 32))
  {
    cfa = 0;
    goto LABEL_13;
  }
  cfa = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
  CVPixelBufferCreateResolvedAttributesDictionary(v12, cfa, &resolvedDictionaryOut);
  if (!resolvedDictionaryOut
    || (Count = CFDictionaryGetCount(resolvedDictionaryOut),
        (Mutable = CFDictionaryCreateMutableCopy(v12, Count + 6, resolvedDictionaryOut)) == 0))
  {
LABEL_13:
    Mutable = CFDictionaryCreateMutable(v12, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v16 = 4294954392;
      goto LABEL_100;
    }
  }
  v46 = v4;
  v17 = 0;
  allocator = v12;
  v51 = v5;
  key = v8;
  v49 = Attributes;
  while (1)
  {
    value = 0;
    v18 = pixelBufferOut[v17];
    if (!CFDictionaryGetValueIfPresent(Mutable, v18, (const void **)&value))
      break;
    v19 = CFGetTypeID(value);
    if (v19 != CFArrayGetTypeID())
      goto LABEL_96;
    if (v18 != v8)
    {
      value = (void *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
      CFDictionarySetValue(Mutable, v18, value);
      goto LABEL_96;
    }
    v53 = 0;
    PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v5);
    v23 = (const __CFArray *)value;
    v24 = CFArrayGetCount((CFArrayRef)value);
    if (v24 < 1)
    {
      v26 = 0;
      goto LABEL_95;
    }
    v25 = 0;
    v26 = 0;
    v27 = v24;
    while (1)
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v23, v25);
      if (!ValueAtIndex)
        goto LABEL_90;
      v29 = ValueAtIndex;
      v30 = CFGetTypeID(ValueAtIndex);
      if (v30 != CFNumberGetTypeID())
        goto LABEL_90;
      CFNumberGetValue(v29, kCFNumberSInt32Type, &valuePtr);
      v31 = valuePtr;
      if (valuePtr == PixelFormatType)
        break;
      if (PixelFormatType > 1380401728)
      {
        if (PixelFormatType <= 1983131703)
        {
          if (PixelFormatType == 1380401729)
            goto LABEL_59;
          if (PixelFormatType == 1916022840)
          {
LABEL_55:
            if (valuePtr > 1380401728)
            {
              if (valuePtr == 1380401729 || valuePtr == 1916022840)
                goto LABEL_94;
              v32 = 1983131704;
            }
            else
            {
              if (valuePtr == 32)
                goto LABEL_94;
LABEL_57:
              if (valuePtr == 1094862674)
                goto LABEL_94;
              v32 = 1111970369;
            }
            goto LABEL_76;
          }
        }
        else
        {
          switch(PixelFormatType)
          {
            case 1983131704:
              goto LABEL_55;
            case 2037741171:
              goto LABEL_49;
            case 2033463856:
LABEL_43:
              if (valuePtr <= 1380401728)
              {
                if (valuePtr > 875704437)
                {
                  if (valuePtr == 875704438)
                    goto LABEL_94;
                  goto LABEL_57;
                }
LABEL_51:
                if (valuePtr == 32)
                  goto LABEL_94;
                v32 = 846624121;
LABEL_76:
                if (valuePtr == v32)
                  goto LABEL_94;
                break;
              }
              if (valuePtr > 1983131703)
              {
                if (valuePtr == 1983131704)
                  goto LABEL_94;
                v33 = 2033463856;
                goto LABEL_74;
              }
LABEL_68:
              if (valuePtr == 1380401729)
                goto LABEL_94;
              v32 = 1916022840;
              goto LABEL_76;
          }
        }
      }
      else if (PixelFormatType <= 875704437)
      {
        if (PixelFormatType == 32)
          goto LABEL_59;
        if (PixelFormatType == 846624121)
        {
LABEL_49:
          if (valuePtr <= 1380401728)
          {
            if (valuePtr > 1094862673)
              goto LABEL_57;
            goto LABEL_51;
          }
          if (valuePtr > 1983131703)
          {
            v33 = 1983131704;
LABEL_74:
            if (valuePtr == v33)
              goto LABEL_94;
            v32 = 2037741171;
            goto LABEL_76;
          }
          goto LABEL_68;
        }
      }
      else
      {
        if (PixelFormatType == 875704438)
          goto LABEL_43;
        if (PixelFormatType == 1094862674 || PixelFormatType == 1111970369)
        {
LABEL_59:
          if (valuePtr > 1111970368)
          {
            if (valuePtr == 1111970369)
              goto LABEL_94;
            v32 = 1380401729;
          }
          else
          {
            if (valuePtr == 32)
              goto LABEL_94;
            v32 = 1094862674;
          }
          goto LABEL_76;
        }
      }
      v35 = PixelFormatType == 1983000880 && valuePtr == 2016686640;
      v36 = valuePtr == 1111970369 && PixelFormatType == 1378955371;
      if (v36 || v35)
        goto LABEL_94;
      if (!v26)
        v26 = valuePtr;
LABEL_90:
      if (v27 == ++v25)
        goto LABEL_95;
    }
    v31 = PixelFormatType;
LABEL_94:
    v26 = v31;
LABEL_95:
    v53 = v26;
    v12 = allocator;
    v37 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v53);
    v8 = key;
    CFDictionarySetValue(Mutable, key, v37);
    CFRelease(v37);
    v5 = v51;
    Attributes = v49;
LABEL_96:
    if (++v17 == 6)
    {
      v16 = 0;
      goto LABEL_98;
    }
  }
  v20 = (void *)CFDictionaryGetValue(Attributes, v18);
  value = v20;
  if (v20)
  {
    CFRetain(v20);
    v21 = value;
    if (value)
    {
LABEL_21:
      CFDictionarySetValue(Mutable, v18, v21);
      CFRelease(value);
      goto LABEL_96;
    }
  }
  else if ((_DWORD)v17 != 3 && (_DWORD)v17 != 5)
  {
    v21 = (void *)((uint64_t (*)(void *))vtCreateCompletePixelBufferAttributesFromSourceBufferAttributes_fallbacks[v17])(v5);
    value = v21;
    if (v21)
      goto LABEL_21;
  }
  if ((_DWORD)v17 == 5 || (_DWORD)v17 == 3)
    goto LABEL_96;
  v16 = FigSignalErrorAt();
  CFRelease(Mutable);
  Mutable = 0;
LABEL_98:
  v4 = v46;
LABEL_100:
  if (resolvedDictionaryOut)
    CFRelease(resolvedDictionaryOut);
  if (cfa)
    CFRelease(cfa);
  if (!(_DWORD)v16)
  {
    v39 = (CVPixelBufferPoolRef *)(a1 + 16);
    v38 = *(__CVPixelBufferPool **)(a1 + 16);
    pixelBufferOut[0] = 0;
    if (v38)
    {
      PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v12, v38, pixelBufferOut);
      if ((_DWORD)PixelBuffer)
      {
        v16 = PixelBuffer;
LABEL_113:
        v52 = 0;
        goto LABEL_107;
      }
      if (!pixelBufferOut[0])
      {
        v43 = FigSignalErrorAt();
        v52 = 0;
        if ((_DWORD)v43)
        {
          v16 = v43;
          goto LABEL_107;
        }
        goto LABEL_123;
      }
      IsCompatibleWithAttributes = CVPixelBufferIsCompatibleWithAttributes();
      v42 = pixelBufferOut[0];
      if (IsCompatibleWithAttributes)
      {
        v52 = pixelBufferOut[0];
        if (!pixelBufferOut[0])
        {
          v16 = 4294954392;
          goto LABEL_107;
        }
        goto LABEL_130;
      }
      if (pixelBufferOut[0])
        CFRelease(pixelBufferOut[0]);
    }
    v52 = 0;
LABEL_123:
    CVPixelBufferPoolRelease(*v39);
    *v39 = 0;
    v44 = CVPixelBufferPoolCreate(v12, 0, Mutable, (CVPixelBufferPoolRef *)(a1 + 16));
    if ((_DWORD)v44)
    {
      v16 = v44;
      goto LABEL_105;
    }
    if (!*v39)
    {
      v16 = 4294954392;
      goto LABEL_105;
    }
    v45 = CVPixelBufferPoolCreatePixelBuffer(v12, *v39, (CVPixelBufferRef *)&v52);
    if ((_DWORD)v45)
    {
      v16 = v45;
      FigSignalErrorAt();
      goto LABEL_105;
    }
    v42 = (__CVBuffer *)v52;
LABEL_130:
    v16 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 24), (CVPixelBufferRef)v5, v42);
    if ((_DWORD)v16)
      goto LABEL_105;
    *v4 = v52;
    goto LABEL_113;
  }
LABEL_105:
  if (v52)
    CFRelease(v52);
LABEL_107:
  if (Mutable)
    CFRelease(Mutable);
  return v16;
}

uint64_t VTPixelBufferConformerCopyConformedTaggedBufferGroup(uint64_t a1, CMTaggedBufferGroupRef group, int a3, CFTypeRef *a4)
{
  uint64_t v4;
  CMItemCount Count;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  CFIndex v15;
  CMTagCollectionRef TagCollectionAtIndex;
  CMTagCollectionRef v17;
  void *CVPixelBufferAtIndex;
  uint64_t v19;
  __CFArray *v20;
  CFTypeRef *v22;
  void *value;
  CFTypeRef cf;

  v4 = 0;
  value = 0;
  cf = 0;
  if (group && a4)
  {
    Count = CMTaggedBufferGroupGetCount(group);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v12 = Mutable;
      v13 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
      if (v13)
      {
        v14 = v13;
        v22 = a4;
        if (Count < 1)
        {
LABEL_13:
          v4 = MEMORY[0x194028160](v10, v12, v14, &cf);
          if (!(_DWORD)v4)
          {
            *v22 = cf;
            cf = 0;
          }
        }
        else
        {
          v15 = 0;
          while (1)
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v15);
            if (!TagCollectionAtIndex)
              break;
            v17 = TagCollectionAtIndex;
            CVPixelBufferAtIndex = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex)
              break;
            v19 = VTPixelBufferConformerCopyConformedPixelBuffer(a1, CVPixelBufferAtIndex, a3, (CFTypeRef *)&value);
            if ((_DWORD)v19)
              goto LABEL_23;
            CFArrayAppendValue(v12, v17);
            CFArrayAppendValue(v14, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (Count == ++v15)
              goto LABEL_13;
          }
          v19 = FigSignalErrorAt();
LABEL_23:
          v4 = v19;
        }
        CFRelease(v12);
        v20 = v14;
      }
      else
      {
        v4 = FigSignalErrorAt();
        v20 = v12;
      }
      CFRelease(v20);
    }
    else
    {
      v4 = FigSignalErrorAt();
    }
  }
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  return v4;
}

double vtPixelBufferConformerInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtPixelBufferConformerFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

__CFString *vtPixelBufferConformerCopyDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const __CFString *v4;
  uint64_t v5;
  const void *v6;
  const __CFString *v7;
  const __CFString *v8;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = (const __CFString *)FigCFCopyCompactDescription();
  v5 = FigCFCopyCompactDescription();
  v6 = (const void *)v5;
  v7 = CFSTR("<No attributes, conformer is pass thru>");
  if (a1[4])
    v7 = v4;
  v8 = CFSTR("<No color properties>");
  if (a1[5])
    v8 = (const __CFString *)v5;
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPixelBufferConformerRef %p>\n\tTarget Attributes:\n\t\t%@\nColor Properties:\n\t\t%@"), a1, v7, v8);
  if (v4)
    CFRelease(v4);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

CFNumberRef vtCopyPixelFormatTypeFromPixelBuffer(__CVBuffer *a1)
{
  OSType valuePtr;

  valuePtr = CVPixelBufferGetPixelFormatType(a1);
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef vtCopyWidthFromPixelBuffer(__CVBuffer *a1)
{
  size_t Width;
  int valuePtr;

  Width = CVPixelBufferGetWidth(a1);
  if (Width >> 31)
    return 0;
  valuePtr = Width;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef vtCopyHeightFromPixelBuffer(__CVBuffer *a1)
{
  size_t Height;
  int valuePtr;

  Height = CVPixelBufferGetHeight(a1);
  if (Height >> 31)
    return 0;
  valuePtr = Height;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

CFDictionaryRef vtCopyIOSurfacePropertiesFromPixelBuffer()
{
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

uint64_t VTParavirtualizationGuestInstallHandlerForUUID(CFUUIDBytes *a1, const void *a2, const void *a3)
{
  CFUUIDRef v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a1);
  if (a2)
  {
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1)
      dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_11);
    v6 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
    if (!vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
      if (!CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v5))
      {
        v7 = malloc_type_calloc(1uLL, 0x28uLL, 0xA0040987D6AD5uLL);
        if (!v7)
          goto LABEL_21;
        v8 = _Block_copy(a2);
        *v7 = v8;
        if (!v8)
          goto LABEL_21;
        v9 = a3 ? CFRetain(a3) : 0;
        v7[1] = v9;
        v10 = FigDispatchQueueCreateWithPriority();
        v7[2] = v10;
        if (v10 && (v11 = FigDispatchQueueCreateWithPriority(), (v7[3] = v11) != 0))
        {
          v12 = VTParavirtualizationReplyClerkCreate((uint64_t)"guest", v7 + 4);
          if (!(_DWORD)v12)
          {
            v6 = VTParavirtualizationGuestSupportRegisterGuestUUID();
            if ((_DWORD)v6)
            {
LABEL_17:
              os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
              goto LABEL_18;
            }
            CFDictionarySetValue((CFMutableDictionaryRef)sVTParavirtualizationGuests, v5, v7);
LABEL_16:
            v7 = 0;
            goto LABEL_17;
          }
        }
        else
        {
LABEL_21:
          v12 = FigSignalErrorAt();
        }
        v6 = v12;
        goto LABEL_17;
      }
      v6 = FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  v7 = 0;
LABEL_18:
  vtParavirtualizationGuestFinalize((const void **)v7);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t VTParavirtualizationReplyClerkCreate(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t Instance;
  _QWORD *v6;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  CFDictionaryValueCallBacks valueCallBacks;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce != -1)
    dispatch_once_f(&VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce, &VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID, (dispatch_function_t)vtParavirtualizationReplyClerk_RegisterType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneParavirtualizationPendingReply;
  valueCallBacks.copyDescription = 0;
  valueCallBacks.equal = 0;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeParavirtualizationPendingReply;
  v7 = CFDictionaryCreateMutable(v4, 10, 0, &valueCallBacks);
  v6[5] = v7;
  if (v7)
  {
    v8 = 0;
    v6[2] = a1;
    v6[4] = 100;
    *a2 = v6;
  }
  else
  {
    v8 = FigSignalErrorAt();
    CFRelease(v6);
  }
  return v8;
}

void vtParavirtualizationGuestFinalize(const void **a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      _Block_release(v2);
      *a1 = 0;
    }
    v3 = a1[2];
    if (v3)
    {
      dispatch_release(v3);
      a1[2] = 0;
    }
    v4 = a1[3];
    if (v4)
    {
      dispatch_release(v4);
      a1[3] = 0;
    }
    v5 = a1[1];
    if (v5)
    {
      CFRelease(v5);
      a1[1] = 0;
    }
    v6 = a1[4];
    if (v6)
      CFRelease(v6);
    free(a1);
  }
}

uint64_t VTParavirtualizationGuestRemoveHandlerForUUID(CFUUIDBytes *a1)
{
  CFUUIDRef v1;
  uint64_t v2;
  dispatch_queue_t *Value;
  dispatch_queue_t *v4;
  uint64_t v5;

  v1 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a1);
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1)
    dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_11);
  v2 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
  if (!vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    Value = (dispatch_queue_t *)CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v1);
    if (Value)
    {
      v4 = Value;
      CFDictionaryRemoveValue((CFMutableDictionaryRef)sVTParavirtualizationGuests, v1);
      dispatch_sync(v4[2], &__block_literal_global_12);
      vtParavirtualizationGuestFinalize((const void **)v4);
      v5 = VTParavirtualizationGuestSupportDeregisterGuestUUID();
    }
    else
    {
      v5 = FigSignalErrorAt();
    }
    v2 = v5;
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  }
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t VTParavirtualizationGuestSendMessageToHostAsync(OpaqueCMBlockBuffer *a1)
{
  return VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAsync(a1);
}

uint64_t VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAsync(OpaqueCMBlockBuffer *a1)
{
  uint64_t v2;
  uint64_t MessageTypeAndFlagsAndGuestUUID;
  CFUUIDRef v4;
  CFUUIDBytes v6;
  uint64_t v7;

  v7 = 0;
  if (a1)
  {
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1)
      dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_11);
    v2 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
      return v2;
    *(_QWORD *)&v6.byte0 = 0;
    *(_QWORD *)&v6.byte8 = 0;
    MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v7 + 1, &v7, &v6);
    if (!(_DWORD)MessageTypeAndFlagsAndGuestUUID)
    {
      if ((v7 & 1) == 0 && (v7 & 2) == 0)
      {
        v4 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
        os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
        if (CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v4))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
          v2 = vtParavirtualizationGuestSendRawMessageBlockBufferToHost(a1);
          if (!v4)
            return v2;
        }
        else
        {
          v2 = FigSignalErrorAt();
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
          if (!v4)
            return v2;
        }
        CFRelease(v4);
        return v2;
      }
      return FigSignalErrorAt();
    }
    return MessageTypeAndFlagsAndGuestUUID;
  }
  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(OpaqueCMBlockBuffer *a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  size_t DataLength;
  uint64_t result;
  unsigned int destination;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v12, &v11);
  if (!(_DWORD)result)
  {
    if (a2)
    {
      destination = 0;
      result = CMBlockBufferCopyDataBytes(a1, v12 + 8, 4uLL, &destination);
      if ((_DWORD)result)
        return result;
      *a2 = bswap32(destination);
    }
    if (a3)
    {
      destination = 0;
      result = CMBlockBufferCopyDataBytes(a1, v12 + 12, 4uLL, &destination);
      if ((_DWORD)result)
        return result;
      *a3 = bswap32(destination);
    }
    if (a4)
      return CMBlockBufferCopyDataBytes(a1, v12 + 16, 0x10uLL, a4);
    else
      return 0;
  }
  return result;
}

uint64_t vtParavirtualizationGuestSendRawMessageBlockBufferToHost(OpaqueCMBlockBuffer *a1)
{
  uint64_t DataPointer;
  size_t v3;
  uint64_t v4;
  size_t v5;
  char **v6;
  uint64_t v7;
  size_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v14;
  size_t lengthAtOffsetOut;

  v14 = 0;
  lengthAtOffsetOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a1, 0, &lengthAtOffsetOut, &v14, 0);
  if ((_DWORD)DataPointer)
  {
LABEL_16:
    v12 = DataPointer;
    v6 = 0;
    goto LABEL_14;
  }
  v3 = lengthAtOffsetOut;
  if (lengthAtOffsetOut < v14)
  {
    v4 = -1;
    v5 = 16;
    while (1)
    {
      DataPointer = CMBlockBufferGetDataPointer(a1, v3, &lengthAtOffsetOut, 0, 0);
      if ((_DWORD)DataPointer)
        goto LABEL_16;
      v3 += lengthAtOffsetOut;
      v5 += 16;
      --v4;
      if (v3 >= v14)
      {
        v6 = (char **)malloc_type_malloc(v5, 0x1050040717B85FCuLL);
        if (v4)
        {
          v7 = -v4;
          goto LABEL_9;
        }
LABEL_12:
        v11 = VTParavirtualizationGuestSupportSendRawMessageToHost();
        goto LABEL_13;
      }
    }
  }
  v6 = (char **)malloc_type_malloc(0x10uLL, 0x1050040717B85FCuLL);
  v7 = 1;
LABEL_9:
  v8 = 0;
  v9 = v6;
  v10 = v7;
  while (1)
  {
    v11 = CMBlockBufferGetDataPointer(a1, v8, &lengthAtOffsetOut, 0, v9);
    if ((_DWORD)v11)
      break;
    v9[1] = (char *)lengthAtOffsetOut;
    v8 += lengthAtOffsetOut;
    v9 += 2;
    if (!--v10)
      goto LABEL_12;
  }
LABEL_13:
  v12 = v11;
LABEL_14:
  free(v6);
  return v12;
}

uint64_t VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(OpaqueCMBlockBuffer *a1, _QWORD *a2)
{
  return VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(a1, 0, 0, a2);
}

uint64_t VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(OpaqueCMBlockBuffer *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t MessageTypeAndFlagsAndGuestUUID;
  CFUUIDRef v8;
  _QWORD *Value;
  const void *v10;
  const __CFUUID *v11;
  uint64_t v12;
  CFUUIDRef v13;
  const void *v15;
  CFUUIDBytes v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0;
  if (!a1 || !a4)
    return FigSignalErrorAt();
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1)
    dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_11);
  v6 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
    return v6;
  *(_QWORD *)&v16.byte0 = 0;
  *(_QWORD *)&v16.byte8 = 0;
  MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v17 + 1, &v17, &v16);
  if ((_DWORD)MessageTypeAndFlagsAndGuestUUID)
    return MessageTypeAndFlagsAndGuestUUID;
  if ((v17 & 1) == 0 || (v17 & 0x10) != 0 || (v17 & 2) != 0)
    return FigSignalErrorAt();
  v8 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16);
  os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  Value = CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v8);
  if (Value)
  {
    v10 = (const void *)Value[4];
    if (v10)
      v11 = (const __CFUUID *)CFRetain(v10);
    else
      v11 = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    v12 = VTParavirtualizationReplyClerkPrepareForReply((uint64_t)v11, a1, &v15);
    if (!(_DWORD)v12)
    {
      v12 = vtParavirtualizationGuestSendRawMessageBlockBufferToHost(a1);
      if (!(_DWORD)v12)
        v12 = VTParavirtualizationReplyClerkWaitForReply((uint64_t)v11, v15, a4, 0, 0);
    }
    v6 = v12;
    if (v11)
    {
      VTParavirtualizationReplyClerkCleanUpReply((uint64_t)v11, v15);
      if (v8)
        CFRelease(v8);
      v13 = v11;
      goto LABEL_27;
    }
  }
  else
  {
    v6 = FigSignalErrorAt();
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  }
  if (v8)
  {
    v13 = v8;
LABEL_27:
    CFRelease(v13);
  }
  return v6;
}

uint64_t VTParavirtualizationReplyClerkPrepareForReply(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  uint64_t result;
  __CFDictionary *v8;
  char *v9;

  v6 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(_BYTE *)(a1 + 48))
  {
    os_unfair_lock_unlock(v6);
    return 4294948201;
  }
  else
  {
    v9 = *(char **)(a1 + 32);
    v8 = *(__CFDictionary **)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v9 + 1;
    CFDictionarySetValue(v8, v9, 0);
    CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v9);
    os_unfair_lock_unlock(v6);
    result = VTParavirtualizationMessageSetReplyIdentifier(a2, (unint64_t)v9);
    if (!(_DWORD)result)
      *a3 = v9;
  }
  return result;
}

uint64_t VTParavirtualizationReplyClerkWaitForReply(uint64_t a1, const void *a2, _QWORD *a3, NSObject **a4, _QWORD *a5)
{
  int v10;
  uint64_t result;
  NSObject **Value;
  NSObject *v13;
  int64_t v14;
  dispatch_time_t v15;
  NSObject *v16;

  if (vParavirtualizationGetReplyTimeoutInNanoSeconds_sCheckDefaultsWriteOnce != -1)
    dispatch_once(&vParavirtualizationGetReplyTimeoutInNanoSeconds_sCheckDefaultsWriteOnce, &__block_literal_global_25);
  v10 = vParavirtualizationGetReplyTimeoutInNanoSeconds_sReplyTimeoutInNanoSeconds;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(_BYTE *)(a1 + 48))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    return 4294948201;
  }
  Value = (NSObject **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
  if (!Value)
    return FigSignalErrorAt();
  v13 = *Value;
  v14 = v10 ? 1000000000 : 0;
  v15 = dispatch_time(0, v14);
  if (dispatch_semaphore_wait(v13, v15) || *((_BYTE *)Value + 40))
    return FigSignalErrorAt();
  *a3 = Value[1];
  Value[1] = 0;
  v16 = Value[3];
  if (a4)
  {
    *a4 = v16;
LABEL_16:
    Value[3] = 0;
    goto LABEL_17;
  }
  if (v16)
  {
    CFRelease(v16);
    goto LABEL_16;
  }
LABEL_17:
  if (a5)
    *a5 = Value[4];
  result = 0;
  Value[4] = 0;
  return result;
}

uint64_t VTParavirtualizationReplyClerkCleanUpReply(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
  os_unfair_lock_unlock(v4);
  return 0;
}

uint64_t VTParavirtualizationCopyNotificationQueueForGuestUUID(CFUUIDBytes *a1)
{
  CFUUIDRef v1;
  const void *Value;
  uint64_t v3;

  v1 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a1);
  os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  Value = CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v1);
  if (Value)
  {
    v3 = *((_QWORD *)Value + 3);
    if (v3)
      dispatch_retain(*((dispatch_object_t *)Value + 3));
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  if (v1)
    CFRelease(v1);
  return v3;
}

BOOL VTParavirtualizationIsRunningInGuest()
{
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1)
    dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_11);
  return vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus == 0;
}

uint64_t VTParavirtualizationCreateMessageAndByteStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMBlockBufferRef *a5, _QWORD *a6)
{
  uint64_t WritableForBlockBuffer;
  uint64_t v9;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x10u, 0, &blockBufferOut);
  if ((_DWORD)WritableForBlockBuffer)
    goto LABEL_16;
  WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  if ((_DWORD)WritableForBlockBuffer)
    goto LABEL_16;
  WritableForBlockBuffer = FigAtomWriterInitWithByteStream();
  if ((_DWORD)WritableForBlockBuffer
    || (WritableForBlockBuffer = FigAtomWriterBeginAtom(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterAppendData(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterAppendData(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterAppendData(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterAppendData(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterAppendData(), (_DWORD)WritableForBlockBuffer)
    || (WritableForBlockBuffer = FigAtomWriterEndAtom(), (_DWORD)WritableForBlockBuffer))
  {
LABEL_16:
    v9 = WritableForBlockBuffer;
  }
  else
  {
    *a5 = blockBufferOut;
    blockBufferOut = 0;
    v9 = 0;
    if (!a6)
      return v9;
    *a6 = 0;
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v9;
}

uint64_t VTParavirtualizationCreateReplyAndByteStream(OpaqueCMBlockBuffer *a1, uint64_t a2, CMBlockBufferRef *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = 0;
  v11 = 0;
  v9 = 0;
  v10[0] = 0;
  result = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v11 + 1, &v11, v10);
  if (!(_DWORD)result)
  {
    result = VTParavirtualizationMessageGetReplyIdentifier(a1, &v9);
    if (!(_DWORD)result)
      return VTParavirtualizationCreateMessageAndByteStream(HIDWORD(v11), a2, (uint64_t)v10, v9, a3, a4);
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetReplyIdentifier(OpaqueCMBlockBuffer *a1, _QWORD *a2)
{
  size_t DataLength;
  uint64_t result;
  unint64_t destination;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v8, &v7);
  if (!(_DWORD)result)
  {
    result = CMBlockBufferCopyDataBytes(a1, v8 + 32, 8uLL, &destination);
    if (!(_DWORD)result)
      *a2 = bswap64(destination);
  }
  return result;
}

uint64_t vtpvScanForTopLevelBoxWithType(CMBlockBufferRef theSourceBuffer, uint64_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int destination;
  uint64_t v20;
  uint64_t v21;

  if (a3 < 8)
    return 4294948203;
  v20 = v5;
  v21 = v6;
  v13 = 0;
  while (1)
  {
    destination = 0;
    result = CMBlockBufferCopyDataBytes(theSourceBuffer, v13 + a2, 4uLL, &destination);
    if ((_DWORD)result)
      break;
    v14 = bswap32(destination);
    destination = v14;
    if (v14 < 8 || a3 - v13 < v14)
      return FigSignalErrorAt();
    v18 = 0;
    result = CMBlockBufferCopyDataBytes(theSourceBuffer, v13 + a2 + 4, 4uLL, &v18);
    if ((_DWORD)result)
      return result;
    v16 = v18;
    v18 = bswap32(v18);
    v17 = destination;
    if (v16 == 1987081334)
    {
      if (destination > 0x2F)
      {
        result = 0;
        *a4 = v13;
        *a5 = v17;
        return result;
      }
      return FigSignalErrorAt();
    }
    v13 += destination;
    if (v13 + 8 > a3)
      return 4294948203;
  }
  return result;
}

uint64_t VTParavirtualizationMessageChangeMessageFlags(OpaqueCMBlockBuffer *a1, int a2, int a3)
{
  size_t DataLength;
  uint64_t result;
  size_t v8;
  unsigned int destination;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v11, &v10);
  if (!(_DWORD)result)
  {
    v8 = v11 + 12;
    result = CMBlockBufferCopyDataBytes(a1, v11 + 12, 4uLL, &destination);
    if (!(_DWORD)result)
    {
      destination = bswap32(bswap32(destination) & ~a3 | a3 & a2);
      return CMBlockBufferReplaceDataBytes(&destination, a1, v8, 4uLL);
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageSetReplyIdentifier(OpaqueCMBlockBuffer *a1, unint64_t a2)
{
  size_t DataLength;
  uint64_t result;
  unint64_t sourceBytes;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  sourceBytes = bswap64(a2);
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v7, &v6);
  if (!(_DWORD)result)
    return CMBlockBufferReplaceDataBytes(&sourceBytes, a1, v7 + 32, 8uLL);
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFPropertyList()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigCreateCFDataFromCFPropertyList();
          if (!(_DWORD)result)
          {
            CFDataGetBytePtr(0);
            CFDataGetLength(0);
            result = FigAtomWriterAppendData();
            if (!(_DWORD)result)
              return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

BOOL VTParavirtualizationMessageContainsParameter(OpaqueCMBlockBuffer *a1, int a2, int a3)
{
  size_t DataLength;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  if (vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, a3, &v10, &v9))
    v7 = 1;
  else
    v7 = v9 == 0;
  return !v7;
}

uint64_t vtpvScanForParameterBoxWithType(CMBlockBufferRef theSourceBuffer, uint64_t a2, unint64_t a3, int a4, int a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int destination;
  uint64_t v26;
  uint64_t v27;

  if (a3 < 0x10)
    return 0;
  v26 = v7;
  v27 = v8;
  v17 = 0;
  while (1)
  {
    destination = 0;
    v18 = v17 + a2;
    result = CMBlockBufferCopyDataBytes(theSourceBuffer, v17 + a2, 4uLL, &destination);
    if ((_DWORD)result)
      break;
    v19 = bswap32(destination);
    destination = v19;
    if (v19 < 8 || a3 - v17 < v19)
      return FigSignalErrorAt();
    v24 = 0;
    result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 4, 4uLL, &v24);
    if ((_DWORD)result)
      return result;
    v21 = v24;
    v24 = bswap32(v24);
    if (v21 == 1634886000)
    {
      v23 = 0;
      result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 8, 4uLL, &v23);
      if ((_DWORD)result)
        return result;
      v23 = bswap32(v23);
      if (v23 == a4)
      {
        v22 = 0;
        result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 12, 4uLL, &v22);
        if ((_DWORD)result)
          return result;
        v22 = bswap32(v22);
        if (v22 == a5)
        {
          result = 0;
          *a6 = v17;
          *a7 = destination;
          return result;
        }
        return FigSignalErrorAt();
      }
    }
    v17 += destination;
    if (v17 + 16 > a3)
      return 0;
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFPropertyList(OpaqueCMBlockBuffer *a1, int a2, CFTypeRef *a3)
{
  size_t DataLength;
  uint64_t DataPointer;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t CFPropertyListFromData;
  uint64_t v12;
  char *v14;
  CFTypeRef cf;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  cf = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  DataPointer = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030777971, &v17, &v16);
  if ((_DWORD)DataPointer)
  {
LABEL_14:
    v12 = DataPointer;
    v10 = 0;
    goto LABEL_18;
  }
  if (v16)
  {
    v8 = v16 - 16;
    if (v16 == 16)
    {
      v10 = 0;
      cf = 0;
      goto LABEL_12;
    }
    v9 = v17 + 16;
    if (CMBlockBufferIsRangeContiguous(a1, v17 + 16, v8))
    {
      v14 = 0;
      DataPointer = CMBlockBufferGetDataPointer(a1, v9, 0, 0, &v14);
      if (!(_DWORD)DataPointer)
      {
        DataPointer = FigCreateCFPropertyListFromData();
        if (!(_DWORD)DataPointer)
        {
          v10 = 0;
LABEL_12:
          v12 = 0;
          *a3 = cf;
          cf = 0;
          goto LABEL_13;
        }
      }
      goto LABEL_14;
    }
    v10 = malloc_type_malloc(v8, 0xDC74BA9FuLL);
    if (v10)
    {
      CFPropertyListFromData = CMBlockBufferCopyDataBytes(a1, v9, v8, v10);
      if (!(_DWORD)CFPropertyListFromData)
      {
        CFPropertyListFromData = FigCreateCFPropertyListFromData();
        if (!(_DWORD)CFPropertyListFromData)
          goto LABEL_12;
      }
    }
    else
    {
      CFPropertyListFromData = FigSignalErrorAt();
    }
    v12 = CFPropertyListFromData;
  }
  else
  {
    v12 = 0;
    v10 = 0;
    *a3 = 0;
  }
LABEL_18:
  if (cf)
    CFRelease(cf);
LABEL_13:
  free(v10);
  return v12;
}

uint64_t VTParavirtualizationMessageAppendCFData(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          CFDataGetBytePtr(a3);
          CFDataGetLength(a3);
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFData(OpaqueCMBlockBuffer *a1, int a2, __CFData **a3)
{
  __CFData *Mutable;
  CFIndex v7;
  uint64_t v8;
  uint64_t MessageFlagsStartingAtOffset;
  size_t DataLength;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  UInt8 *MutableBytePtr;
  uint64_t v19;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v7 = 0;
  v8 = 0;
  v21 = 0;
  while (1)
  {
    MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v8, &v21);
    if ((_DWORD)MessageFlagsStartingAtOffset)
      break;
    DataLength = CMBlockBufferGetDataLength(a1);
    MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v8, DataLength, a2, 1029988724, &v23, &v22);
    if ((_DWORD)MessageFlagsStartingAtOffset)
      break;
    if (!v22)
    {
LABEL_16:
      v19 = 0;
      *a3 = 0;
      goto LABEL_19;
    }
    if (v22 <= 0x10)
    {
LABEL_17:
      MessageFlagsStartingAtOffset = FigSignalErrorAt();
      break;
    }
    v7 = v7 + v22 - 16;
    v8 += v22 + v23;
    if ((v21 & 0x10) == 0)
    {
      CFDataSetLength(Mutable, v7);
      v11 = 0;
      v12 = 0;
      while (1)
      {
        MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v11, &v21);
        if ((_DWORD)MessageFlagsStartingAtOffset)
          goto LABEL_18;
        v13 = CMBlockBufferGetDataLength(a1);
        MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v11, v13, a2, 1029988724, &v23, &v22);
        if ((_DWORD)MessageFlagsStartingAtOffset)
          goto LABEL_18;
        v14 = v22;
        if (!v22)
          goto LABEL_16;
        v15 = v22 - 16;
        if (v22 <= 0x10)
          goto LABEL_17;
        v16 = v23;
        v17 = v11 + v23 + 16;
        MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
        MessageFlagsStartingAtOffset = CMBlockBufferCopyDataBytes(a1, v17, v14 - 16, &MutableBytePtr[v12]);
        if ((_DWORD)MessageFlagsStartingAtOffset)
          goto LABEL_18;
        v12 += v15;
        v11 += v14 + v16;
        if ((v21 & 0x10) == 0)
        {
          v19 = 0;
          *a3 = Mutable;
          return v19;
        }
      }
    }
  }
LABEL_18:
  v19 = MessageFlagsStartingAtOffset;
LABEL_19:
  if (Mutable)
    CFRelease(Mutable);
  return v19;
}

uint64_t vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(OpaqueCMBlockBuffer *a1, uint64_t a2, _DWORD *a3)
{
  size_t DataLength;
  uint64_t result;
  unsigned int destination;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForTopLevelBoxWithType(a1, a2, DataLength, &v10, &v9);
  if (!(_DWORD)result)
  {
    result = CMBlockBufferCopyDataBytes(a1, a2 + v10 + 12, 4uLL, &destination);
    if (!(_DWORD)result)
      *a3 = bswap32(destination);
  }
  return result;
}

uint64_t VTParavirtualizationMessageCFDataRequiresFragmentation(uint64_t a1, unint64_t a2, const __CFData *a3, BOOL *a4)
{
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  BOOL v10;
  unint64_t Length;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = 0;
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
    return 4294954514;
  result = v8(a1, 0, &v15);
  if (!(_DWORD)result)
  {
    if (v15 + 17 <= a2)
    {
      Length = CFDataGetLength(a3);
      v12 = a2 - v15 - 16;
      if (v12 >= Length)
        v13 = Length;
      else
        v13 = a2 - v15 - 16;
      if (!v13)
        return FigSignalErrorAt();
      v14 = Length;
      result = 0;
      v10 = v14 > v12;
    }
    else
    {
      result = 0;
      v10 = 1;
    }
    *a4 = v10;
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFDataWithLimitFromOffset(uint64_t a1, int a2, unint64_t a3, CFDataRef theData, CFIndex *a5)
{
  CFIndex Length;
  unint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v16 = 0;
  Length = CFDataGetLength(theData);
  v10 = Length - *a5;
  if (Length == *a5)
    return 0;
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v11)
    return 4294954514;
  result = v11(a1, 0, &v16);
  if (!(_DWORD)result)
  {
    if (v16 + 17 > a3)
      return 0;
    v13 = a3 - v16 - 16;
    if (v13 >= v10)
      v14 = v10;
    else
      v14 = a3 - v16 - 16;
    if (v14)
    {
      result = FigAtomWriterInitWithByteStream();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterBeginAtom();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
          {
            result = FigAtomWriterAppendData();
            if (!(_DWORD)result)
            {
              CFDataGetBytePtr(theData);
              result = FigAtomWriterAppendData();
              if (!(_DWORD)result)
              {
                result = FigAtomWriterEndAtom();
                if (!(_DWORD)result)
                {
                  if (v10 <= v13)
                    v15 = CFDataGetLength(theData);
                  else
                    v15 = *a5 + v14;
                  result = 0;
                  *a5 = v15;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFDictionary(OpaqueCMBlockBuffer *a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeID v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  v4 = VTParavirtualizationMessageCopyCFPropertyList(a1, a2, &cf);
  v5 = cf;
  if ((_DWORD)v4)
  {
    v7 = v4;
    if (!cf)
      return v7;
    goto LABEL_9;
  }
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 != CFDictionaryGetTypeID())
    {
      v7 = FigSignalErrorAt();
LABEL_9:
      CFRelease(v5);
      return v7;
    }
  }
  v7 = 0;
  *a3 = v5;
  return v7;
}

uint64_t VTParavirtualizationMessageAppendCFUUID(uint64_t a1, uint64_t a2, const __CFUUID *a3)
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          CFUUIDGetUUIDBytes(a3);
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFUUID(OpaqueCMBlockBuffer *a1, int a2, CFUUIDRef *a3)
{
  size_t DataLength;
  uint64_t result;
  CFUUIDRef v8;
  CFUUIDBytes v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  *(_QWORD *)&v9.byte0 = 0;
  *(_QWORD *)&v9.byte8 = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031107945, &v11, &v10);
  if (!(_DWORD)result)
  {
    if (v10 == 32)
    {
      result = CMBlockBufferCopyDataBytes(a1, v11 + 16, 0x10uLL, &v9);
      if (!(_DWORD)result)
      {
        v8 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9);
        result = 0;
        *a3 = v8;
      }
    }
    else if (v10)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFUUIDArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFUUID *ValueAtIndex;
  const __CFUUID *v9;
  CFTypeID v10;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          Count = CFArrayGetCount(a3);
          if (Count < 1)
          {
            return FigAtomWriterEndAtom();
          }
          else
          {
            v6 = Count;
            v7 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(a3, v7);
              if (!ValueAtIndex)
                break;
              v9 = ValueAtIndex;
              v10 = CFGetTypeID(ValueAtIndex);
              if (v10 != CFUUIDGetTypeID())
                break;
              CFUUIDGetUUIDBytes(v9);
              result = FigAtomWriterAppendData();
              if ((_DWORD)result)
                return result;
              if (v6 == ++v7)
                return FigAtomWriterEndAtom();
            }
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFUUIDArray(OpaqueCMBlockBuffer *a1, int a2, __CFArray **a3)
{
  size_t DataLength;
  uint64_t v7;
  unint64_t v8;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  CFUUIDRef v14;
  uint64_t v15;
  CFUUIDBytes v17;
  unint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  *(_QWORD *)&v17.byte0 = 0;
  *(_QWORD *)&v17.byte8 = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  v7 = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031104811, &v19, &v18);
  if ((_DWORD)v7)
    return v7;
  if (!v18)
  {
    v15 = 0;
    *a3 = 0;
    return v15;
  }
  if (v18 > 0xF)
  {
    v8 = v18 - 16;
    if (v18 == ((v18 - 16) & 0xFFFFFFFFFFFFFFF0) + 16)
    {
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8 >> 4, MEMORY[0x1E0C9B378]);
      if (v8 < 0x10)
      {
LABEL_14:
        v15 = 0;
        *a3 = Mutable;
      }
      else
      {
        if (v8 >> 4 <= 1)
          v11 = 1;
        else
          v11 = v8 >> 4;
        v12 = v19 + 16;
        while (1)
        {
          v13 = CMBlockBufferCopyDataBytes(a1, v12, 0x10uLL, &v17);
          if ((_DWORD)v13)
            break;
          v14 = CFUUIDCreateFromUUIDBytes(v9, v17);
          CFArrayAppendValue(Mutable, v14);
          if (v14)
            CFRelease(v14);
          v12 += 16;
          if (!--v11)
            goto LABEL_14;
        }
        v15 = v13;
        if (Mutable)
          CFRelease(Mutable);
      }
      return v15;
    }
  }
  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageAppendFigTagCollectionArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t appended;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeID v11;
  const __CFData *v12;
  uint64_t v13;
  uint64_t v14;

  appended = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)appended)
  {
    appended = FigAtomWriterBeginAtom();
    if (!(_DWORD)appended)
    {
      appended = FigAtomWriterAppendData();
      if (!(_DWORD)appended)
      {
        appended = FigAtomWriterAppendData();
        if (!(_DWORD)appended)
        {
          Count = CFArrayGetCount(a3);
          if (Count < 1)
          {
            return FigAtomWriterEndAtom();
          }
          else
          {
            v6 = Count;
            v7 = 0;
            v8 = *MEMORY[0x1E0C9AE00];
            while (1)
            {
              appended = FigAtomWriterInitWithParent();
              if ((_DWORD)appended)
                break;
              appended = FigAtomWriterBeginAtom();
              if ((_DWORD)appended)
                break;
              ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
              if (!ValueAtIndex)
                return FigSignalErrorAt();
              v10 = ValueAtIndex;
              v11 = CFGetTypeID(ValueAtIndex);
              if (v11 != FigTagCollectionGetTypeID())
                return FigSignalErrorAt();
              v12 = (const __CFData *)MEMORY[0x19402810C](v10, v8);
              CFDataGetBytePtr(v12);
              CFDataGetLength(v12);
              v13 = FigAtomWriterAppendData();
              if ((_DWORD)v13 || (v13 = FigAtomWriterEndAtom(), (_DWORD)v13))
              {
                v14 = v13;
                if (v12)
                  CFRelease(v12);
                return v14;
              }
              if (v12)
                CFRelease(v12);
              if (v6 == ++v7)
                return FigAtomWriterEndAtom();
            }
          }
        }
      }
    }
  }
  return appended;
}

uint64_t VTParavirtualizationMessageCopyFigTagCollectionArray(OpaqueCMBlockBuffer *a1, int a2, _QWORD *a3)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  size_t DataLength;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v11;
  void *value;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  value = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v7 = Mutable;
    DataLength = CMBlockBufferGetDataLength(a1);
    CurrentAtomTypeAndDataLength = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031037739, &v28, &v27);
    if (!(_DWORD)CurrentAtomTypeAndDataLength)
    {
      if (!v27)
      {
        v11 = 0;
        *a3 = 0;
        goto LABEL_14;
      }
      if (v27 <= 0xF
        || (CurrentAtomTypeAndDataLength = FigAtomStreamInitWithBBuf(), !(_DWORD)CurrentAtomTypeAndDataLength)
        && (CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent(), !(_DWORD)CurrentAtomTypeAndDataLength)
        && (CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength(),
            !(_DWORD)CurrentAtomTypeAndDataLength))
      {
        CurrentAtomTypeAndDataLength = FigSignalErrorAt();
      }
    }
    v11 = CurrentAtomTypeAndDataLength;
LABEL_14:
    CFRelease(v7);
    goto LABEL_9;
  }
  v11 = FigSignalErrorAt();
LABEL_9:
  if (value)
    CFRelease(value);
  return v11;
}

uint64_t VTParavirtualizationMessageAppendSInt32()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetSInt32(OpaqueCMBlockBuffer *a1, int a2, _DWORD *a3)
{
  size_t DataLength;
  uint64_t result;
  unsigned int destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030959922, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 20)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 4uLL, &destination);
      if (!(_DWORD)result)
        *a3 = bswap32(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendUInt32()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetUInt32(OpaqueCMBlockBuffer *a1, int a2, _DWORD *a3)
{
  size_t DataLength;
  uint64_t result;
  unsigned int destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031090994, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 20)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 4uLL, &destination);
      if (!(_DWORD)result)
        *a3 = bswap32(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendSInt64()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetSInt64(OpaqueCMBlockBuffer *a1, int a2, _QWORD *a3)
{
  size_t DataLength;
  uint64_t result;
  unint64_t destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030960692, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 24)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!(_DWORD)result)
        *a3 = bswap64(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMFormatDescription(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t appended;
  const __CFAllocator *v5;
  CFStringEncoding SystemEncoding;
  uint64_t v7;
  CMBlockBufferRef blockBufferOut;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  blockBufferOut = 0;
  appended = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)appended)
  {
    appended = FigAtomWriterBeginAtom();
    if (!(_DWORD)appended)
    {
      appended = FigAtomWriterAppendData();
      if (!(_DWORD)appended)
      {
        appended = FigAtomWriterAppendData();
        if (!(_DWORD)appended)
        {
          v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          SystemEncoding = CFStringGetSystemEncoding();
          appended = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(v5, a3, SystemEncoding, 0, &blockBufferOut);
          if (!(_DWORD)appended)
          {
            CMBlockBufferGetDataLength(blockBufferOut);
            appended = FigAtomWriterAppendBlockBufferData();
            if (!(_DWORD)appended)
              appended = FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  v7 = appended;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v7;
}

uint64_t VTParavirtualizationMessageCopyCMFormatDescription(OpaqueCMBlockBuffer *a1, int a2, CFTypeRef *a3)
{
  size_t DataLength;
  uint64_t v7;
  const __CFAllocator *v8;
  OpaqueCMBlockBuffer *v9;
  CFStringEncoding SystemEncoding;
  uint64_t v11;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  unint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  cf = 0;
  blockBufferOut = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  v7 = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030120563, &v16, &v15);
  if ((_DWORD)v7)
    goto LABEL_14;
  if (!v15)
  {
    v11 = 0;
    *a3 = 0;
    goto LABEL_7;
  }
  if (v15 <= 0x65)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v16 + 16, v15 - 16, 0, &blockBufferOut);
  if ((_DWORD)v7)
  {
LABEL_14:
    v11 = v7;
    goto LABEL_7;
  }
  v9 = blockBufferOut;
  SystemEncoding = CFStringGetSystemEncoding();
  v11 = CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(v8, v9, SystemEncoding, 0, (CMVideoFormatDescriptionRef *)&cf);
  if (!(_DWORD)v11)
  {
    *a3 = cf;
    cf = 0;
  }
LABEL_7:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBuffer(uint64_t a1, uint64_t a2, int a3, opaqueCMSampleBuffer *a4, CFTypeRef *a5)
{
  uint64_t appended;
  uint64_t v9;
  CMBlockBufferRef theBuffer;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  theBuffer = 0;
  appended = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)appended)
  {
    appended = FigAtomWriterBeginAtom();
    if (!(_DWORD)appended)
    {
      appended = FigAtomWriterAppendData();
      if (!(_DWORD)appended)
      {
        appended = FigAtomWriterAppendData();
        if (!(_DWORD)appended)
        {
          if (a3)
          {
            appended = VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(*MEMORY[0x1E0C9AE00], *MEMORY[0x1E0C9AE00], a4, a5, &theBuffer);
            if (!(_DWORD)appended)
            {
              CMBlockBufferGetDataLength(theBuffer);
              appended = FigAtomWriterAppendBlockBufferData();
              if (!(_DWORD)appended)
                appended = FigAtomWriterEndAtom();
            }
          }
          else
          {
            appended = FigSignalErrorAt();
          }
        }
      }
    }
  }
  v9 = appended;
  if (theBuffer)
    CFRelease(theBuffer);
  return v9;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, CMBlockBufferRef *a5)
{
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  OpaqueCMBlockBuffer *v11;
  size_t DataLength;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v16 = 0;
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v9)
    return 4294954514;
  result = v9(a1, 0, &v16);
  if ((_DWORD)result)
    return result;
  if (v16 + 17 > a3)
  {
    v11 = (OpaqueCMBlockBuffer *)CFRetain(a4);
    result = 0;
    *a5 = v11;
    return result;
  }
  DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a4);
  v13 = DataLength;
  v14 = a3 - v16 - 16;
  if (v14 >= DataLength)
    v15 = DataLength;
  else
    v15 = a3 - v16 - 16;
  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendBlockBufferData();
          if (!(_DWORD)result)
          {
            result = FigAtomWriterEndAtom();
            if (!(_DWORD)result)
            {
              if (v13 <= v14)
              {
                *a5 = 0;
              }
              else
              {
                result = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)a4, v15, v13 - v15, 0, a5);
                if ((_DWORD)result)
                  return result;
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData(uint64_t a1, uint64_t a2, int a3, unint64_t a4, opaqueCMSampleBuffer *a5, CFTypeRef *a6, CMBlockBufferRef *a7)
{
  uint64_t SerializedAtomDataBlockBufferForSampleBuffer;
  CFTypeRef v12;
  uint64_t appended;
  CFTypeRef cf;

  cf = 0;
  if (a3)
  {
    SerializedAtomDataBlockBufferForSampleBuffer = VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(*MEMORY[0x1E0C9AE00], *MEMORY[0x1E0C9AE00], a5, a6, (CMBlockBufferRef *)&cf);
    v12 = cf;
    if ((_DWORD)SerializedAtomDataBlockBufferForSampleBuffer)
    {
      appended = SerializedAtomDataBlockBufferForSampleBuffer;
      if (!cf)
        return appended;
    }
    else
    {
      appended = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData(a1, a2, a4, (void *)cf, a7);
      v12 = cf;
      if (!cf)
        return appended;
    }
    CFRelease(v12);
    return appended;
  }
  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageCopyCMSampleBuffer(OpaqueCMBlockBuffer *a1, int a2, int a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v12;
  OpaqueCMBlockBuffer *v13;
  const __CFAllocator *v14;
  uint64_t MessageFlagsStartingAtOffset;
  size_t DataLength;
  CMBlockBufferRef v17;
  uint64_t SampleBufferFromSerializedAtomDataBlockBuffer;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;
  unint64_t v23;
  uint64_t v24;
  int v25;

  v12 = 0;
  v13 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  theBuffer = 0;
  blockBufferOut = 0;
  cf = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v12, &v25);
    if ((_DWORD)MessageFlagsStartingAtOffset)
      goto LABEL_20;
    DataLength = CMBlockBufferGetDataLength(a1);
    MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v12, DataLength, a2, 1030972006, &v24, &v23);
    if ((_DWORD)MessageFlagsStartingAtOffset)
      goto LABEL_20;
    if (!v23)
    {
      SampleBufferFromSerializedAtomDataBlockBuffer = 0;
      *a6 = 0;
      goto LABEL_21;
    }
    if (v23 <= 0x10)
      goto LABEL_19;
    MessageFlagsStartingAtOffset = CMBlockBufferCreateWithBufferReference(v14, a1, v12 + v24 + 16, v23 - 16, 0, &blockBufferOut);
    if ((_DWORD)MessageFlagsStartingAtOffset)
      goto LABEL_20;
    v17 = blockBufferOut;
    if (v13)
    {
      MessageFlagsStartingAtOffset = CMBlockBufferAppendBufferReference(v13, blockBufferOut, 0, 0, 0);
      if ((_DWORD)MessageFlagsStartingAtOffset)
        goto LABEL_20;
      if (blockBufferOut)
      {
        CFRelease(blockBufferOut);
        blockBufferOut = 0;
      }
    }
    else
    {
      blockBufferOut = 0;
      v13 = v17;
    }
    v12 += v24 + v23;
  }
  while ((v25 & 0x10) != 0);
  if (CMBlockBufferIsRangeContiguous(v13, 0, 0))
  {
    theBuffer = (CMBlockBufferRef)CFRetain(v13);
    goto LABEL_16;
  }
  MessageFlagsStartingAtOffset = CMBlockBufferCreateContiguous(v14, v13, v14, 0, 0, 0, 0, &theBuffer);
  if ((_DWORD)MessageFlagsStartingAtOffset)
  {
LABEL_20:
    SampleBufferFromSerializedAtomDataBlockBuffer = MessageFlagsStartingAtOffset;
    goto LABEL_21;
  }
LABEL_16:
  if (!a3)
  {
LABEL_19:
    MessageFlagsStartingAtOffset = FigSignalErrorAt();
    goto LABEL_20;
  }
  SampleBufferFromSerializedAtomDataBlockBuffer = VTParavirtualizationCreateSampleBufferFromSerializedAtomDataBlockBuffer((int)v14, theBuffer, 0, a4, a5, (uint64_t)&cf);
  if (!(_DWORD)SampleBufferFromSerializedAtomDataBlockBuffer)
  {
    *a6 = cf;
    cf = 0;
  }
LABEL_21:
  if (theBuffer)
    CFRelease(theBuffer);
  if (v13)
    CFRelease(v13);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return SampleBufferFromSerializedAtomDataBlockBuffer;
}

uint64_t VTParavirtualizationMessageAppendCMVideoDimensions()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetCMVideoDimensions(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  size_t DataLength;
  uint64_t result;
  int8x8_t destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031239784, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 24)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!(_DWORD)result)
        *a3 = vrev32_s8(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMTime()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetCMTime(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  unint64_t v6;
  size_t DataLength;
  uint64_t result;
  unint64_t v9;
  __int128 v10;
  __int128 destination;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0;
  v10 = *MEMORY[0x1E0CA2E18];
  destination = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = v6;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031039341, &v14, &v13);
  if (!(_DWORD)result)
  {
    if (v13 == 40)
    {
      result = CMBlockBufferCopyDataBytes(a1, v14 + 16, 0x18uLL, &destination);
      if (!(_DWORD)result)
      {
        v9 = bswap64(v12);
        *a3 = (int8x8_t)bswap64(destination);
        a3[1] = vrev32_s8(*(int8x8_t *)((char *)&destination + 8));
        a3[2] = (int8x8_t)v9;
      }
    }
    else if (v13)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *(_OWORD *)a3->i8 = v10;
      a3[2] = (int8x8_t)v6;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendVTInt32Point()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetVTInt32Point(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  size_t DataLength;
  uint64_t result;
  int8x8_t destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1026765424, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 24)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!(_DWORD)result)
        *a3 = vrev32_s8(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendVTInt32Size()
{
  uint64_t result;

  result = FigAtomWriterInitWithByteStream();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterAppendData();
      if (!(_DWORD)result)
      {
        result = FigAtomWriterAppendData();
        if (!(_DWORD)result)
        {
          result = FigAtomWriterAppendData();
          if (!(_DWORD)result)
            return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetVTInt32Size(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  size_t DataLength;
  uint64_t result;
  int8x8_t destination;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  destination = 0;
  DataLength = CMBlockBufferGetDataLength(a1);
  result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1026765427, &v10, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == 24)
    {
      result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!(_DWORD)result)
        *a3 = vrev32_s8(destination);
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendPixelBufferAndIOSurfaceAttachments(uint64_t a1, CVBufferRef buffer)
{
  const __CFDictionary *v4;
  CFAllocatorRef *v5;
  __CFDictionary *MutableCopy;
  __CFDictionary *v7;
  uint64_t appended;
  const __CFData *v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v12;
  __CFData *Mutable;
  __CFData *v14;
  uint64_t v16;
  CFIndex capacity[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  v4 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  CVPixelBufferGetIOSurface(buffer);
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v26 = 116;
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v4 && CFDictionaryGetCount(v4) >= 1)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(*v5, 0, v4);
    v7 = MutableCopy;
    if (!MutableCopy)
    {
      appended = FigSignalErrorAt();
LABEL_32:
      v10 = appended;
      goto LABEL_20;
    }
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8CD8]);
    appended = VTParavirtualizationMessageAppendCFPropertyList();
    if ((_DWORD)appended)
      goto LABEL_32;
  }
  else
  {
    v7 = 0;
  }
  if (!IOSurfaceGetBulkAttachments())
  {
    v22 = v31;
    v23 = v32;
    v24 = v33;
    v25 = v34;
    *(_OWORD *)capacity = v27;
    v19 = v28;
    v20 = v29;
    v21 = v30;
    if ((_BYTE)v27)
      goto LABEL_9;
    v16 = 1;
    do
    {
      if (v16 == 116)
        goto LABEL_12;
    }
    while (!*((unsigned __int8 *)capacity + v16++));
    if ((unint64_t)(v16 - 2) < 0x73)
    {
LABEL_9:
      v22 = v31;
      v23 = v32;
      v24 = v33;
      v25 = v34;
      *(_OWORD *)capacity = v27;
      v19 = v28;
      v20 = v29;
      v21 = v30;
      v9 = CFDataCreate(*v5, (const UInt8 *)capacity, 116);
      v10 = VTParavirtualizationMessageAppendCFData(a1, 744644980, v9);
      if (v9)
        CFRelease(v9);
      if ((_DWORD)v10)
      {
LABEL_19:
        if (!v4)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
  }
LABEL_12:
  v11 = 0;
  v12 = *v5;
  while (1)
  {
    capacity[0] = 0;
    if (!IOSurfaceGetDataProperty())
    {
      if (capacity[0])
        break;
    }
LABEL_17:
    if (++v11 == 3)
    {
      v10 = 0;
      goto LABEL_19;
    }
  }
  Mutable = CFDataCreateMutable(v12, capacity[0]);
  if (Mutable)
  {
    v14 = Mutable;
    CFDataSetLength(Mutable, capacity[0]);
    CFDataGetMutableBytePtr(v14);
    IOSurfaceGetDataProperty();
    v10 = VTParavirtualizationMessageAppendCFData(a1, (v11 + 744779824), v14);
    CFRelease(v14);
    if ((_DWORD)v10)
      goto LABEL_19;
    goto LABEL_17;
  }
  v10 = FigSignalErrorAt();
  if (v4)
LABEL_20:
    CFRelease(v4);
LABEL_21:
  if (v7)
    CFRelease(v7);
  return v10;
}

uint64_t VTParavirtualizationMessageSetAttachmentsOnPixelBufferAndIOSurfaceIfPresent(OpaqueCMBlockBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  CFDictionaryRef v5;
  uint64_t v6;
  const __CFData *v7;
  unint64_t Length;
  CFRange v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  const __CFData *v14;
  CFDataRef theData[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  CFDataRef v24;
  UInt8 buffer[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  CFDictionaryRef v33;

  v33 = 0;
  CVPixelBufferGetIOSurface(pixelBuffer);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)buffer = 0u;
  v24 = 0;
  v4 = VTParavirtualizationMessageCopyCFDictionary(a1, 745562484, &v33);
  v5 = v33;
  if ((_DWORD)v4)
  {
    v6 = v4;
    goto LABEL_28;
  }
  if (v33)
    CVBufferSetAttachments(pixelBuffer, v33, kCVAttachmentMode_ShouldPropagate);
  theData[0] = 0;
  v6 = VTParavirtualizationMessageCopyCFData(a1, 744644980, theData);
  v7 = theData[0];
  if (!(_DWORD)v6 && theData[0])
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)buffer = 0u;
    Length = CFDataGetLength(theData[0]);
    if (Length >= 0x74)
      v9.length = 116;
    else
      v9.length = Length;
    v9.location = 0;
    CFDataGetBytes(v7, v9, buffer);
    goto LABEL_11;
  }
  if (theData[0])
LABEL_11:
    CFRelease(v7);
  if ((_DWORD)v6)
    goto LABEL_28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  *(_OWORD *)theData = *(_OWORD *)buffer;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  if (buffer[0])
  {
LABEL_14:
    if (IOSurfaceSetBulkAttachments2())
    {
LABEL_27:
      v6 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    v10 = 1;
    while (v10 != 116)
    {
      if (*((unsigned __int8 *)theData + v10++))
      {
        if ((unint64_t)(v10 - 2) < 0x73)
          goto LABEL_14;
        break;
      }
    }
  }
  v12 = 0;
  while (1)
  {
    v13 = VTParavirtualizationMessageCopyCFData(a1, v12 + 744779824, &v24);
    v14 = v24;
    if ((_DWORD)v13)
      break;
    if (v24)
    {
      if (CFDataGetLength(v24))
      {
        CFDataGetBytePtr(v14);
        if (IOSurfaceSetDataProperty())
        {
          v6 = 0;
LABEL_32:
          CFRelease(v14);
          goto LABEL_28;
        }
      }
      CFRelease(v14);
      v24 = 0;
    }
    if (++v12 == 3)
      goto LABEL_27;
  }
  v6 = v13;
  if (v24)
    goto LABEL_32;
LABEL_28:
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t VTParavirtualizationReplyClerkGetTypeID()
{
  if (VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce != -1)
    dispatch_once_f(&VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce, &VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID, (dispatch_function_t)vtParavirtualizationReplyClerk_RegisterType);
  return VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID;
}

uint64_t vtParavirtualizationReplyClerk_RegisterType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

char *vtCloneParavirtualizationPendingReply(const __CFAllocator *a1)
{
  char *v1;

  v1 = (char *)CFAllocatorAllocate(a1, 48, 0);
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)v1 = dispatch_semaphore_create(0);
  v1[40] = 0;
  return v1;
}

void vtFreeParavirtualizationPendingReply(CFAllocatorRef allocator, dispatch_object_t *ptr)
{
  dispatch_object_t v4;
  dispatch_object_t v5;
  dispatch_object_t v6;

  v4 = ptr[1];
  if (v4)
  {
    CFRelease(v4);
    ptr[1] = 0;
  }
  v5 = ptr[2];
  if (v5)
  {
    CFRelease(v5);
    ptr[2] = 0;
  }
  v6 = ptr[3];
  if (v6)
  {
    CFRelease(v6);
    ptr[3] = 0;
  }
  if (*ptr)
  {
    dispatch_release(*ptr);
    *ptr = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

void VTParavirtualizationReplyClerkInvalidate(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int64_t Count;
  const void **v4;
  const void **v5;
  uint64_t v6;

  v2 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  *(_BYTE *)(a1 + 48) = 1;
  Count = FigCFDictionaryGetCount();
  v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), 0, v4);
  if (Count >= 1)
  {
    v5 = v4;
    do
    {
      v6 = (uint64_t)*v5++;
      *(_BYTE *)(v6 + 40) = 1;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)v6);
      --Count;
    }
    while (Count);
  }
  os_unfair_lock_unlock(v2);
  free(v4);
}

uint64_t VTParavirtualizationReplyClerkDeliverReply(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, OpaqueCMBlockBuffer *a4)
{
  uint64_t result;
  os_unfair_lock_s *v9;
  OpaqueCMBlockBuffer **Value;
  OpaqueCMBlockBuffer **v11;
  OpaqueCMBlockBuffer *v12;
  OpaqueCMBlockBuffer *v13;
  OpaqueCMBlockBuffer *v14;
  NSObject *v15;
  OpaqueCMBlockBuffer *v16;
  OpaqueCMBlockBuffer *v17;
  uint64_t v18;
  void *key;

  v18 = 0;
  key = 0;
  result = VTParavirtualizationMessageGetReplyIdentifier(a2, &key);
  if ((_DWORD)result)
    return result;
  result = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v18, (_DWORD *)&v18 + 1, 0);
  if ((_DWORD)result)
    return result;
  v9 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(_BYTE *)(a1 + 48)
    || (Value = (OpaqueCMBlockBuffer **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key)) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    return FigSignalErrorAt();
  }
  v11 = Value;
  v12 = Value[2];
  if ((v18 & 0x1000000000) == 0)
  {
    if (v12)
    {
      CMBlockBufferAppendBufferReference(v12, a2, 0, 0, 0);
      v14 = v11[1];
      v13 = v11[2];
      v11[1] = v13;
      if (!v13)
        goto LABEL_15;
    }
    else
    {
      v14 = v11[1];
      v11[1] = a2;
      if (!a2)
      {
LABEL_15:
        if (v14)
          CFRelease(v14);
        v16 = v11[3];
        v11[3] = a3;
        if (a3)
          CFRetain(a3);
        if (v16)
          CFRelease(v16);
        v11[4] = a4;
        v15 = *v11;
        dispatch_retain((dispatch_object_t)*v11);
        goto LABEL_26;
      }
      v13 = a2;
    }
    CFRetain(v13);
    goto LABEL_15;
  }
  if (v12)
  {
    CMBlockBufferAppendBufferReference(v12, a2, 0, 0, 0);
    v15 = 0;
  }
  else
  {
    if (a2)
      v17 = (OpaqueCMBlockBuffer *)CFRetain(a2);
    else
      v17 = 0;
    v15 = 0;
    v11[2] = v17;
  }
LABEL_26:
  os_unfair_lock_unlock(v9);
  if ((v18 & 0x1000000000) == 0)
    dispatch_semaphore_signal(v15);
  if (v15)
    dispatch_release(v15);
  return 0;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke()
{
  uint64_t result;

  if (!MEMORY[0x1E0DC6938])
  {
    result = 4294948206;
LABEL_6:
    vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus = result;
    return result;
  }
  vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus = VTParavirtualizationGuestSupportSetUpWithHandlers();
  result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 10, MEMORY[0x1E0C9B390], 0);
  sVTParavirtualizationGuests = result;
  if (!result)
  {
    result = FigSignalErrorAt();
    goto LABEL_6;
  }
  return result;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_2(int a1, size_t blockLength, CMBlockBufferRef *a3, char **a4)
{
  uint64_t result;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;

  dataPointerOut = 0;
  theBuffer = 0;
  result = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, blockLength, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, blockLength, 1u, &theBuffer);
  if (!(_DWORD)result)
  {
    result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
    if (!(_DWORD)result)
    {
      *a3 = theBuffer;
      *a4 = dataPointerOut;
    }
  }
  return result;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_3(int a1, OpaqueCMBlockBuffer *a2, size_t dataLength)
{
  const __CFAllocator *v3;
  uint64_t v4;
  OpaqueCMBlockBuffer *v5;
  uint64_t MessageTypeAndFlagsAndGuestUUID;
  CFUUIDRef v7;
  CFUUIDRef v8;
  const void **Value;
  _QWORD *v10;
  void (**v11)(void *, OpaqueCMBlockBuffer *, CFTypeRef);
  const void *v12;
  CFTypeRef v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  CFTypeRef v17;
  uint64_t v18;
  CMBlockBufferRef blockBufferOut;
  _QWORD block[7];
  CFUUIDBytes v22;
  uint64_t v23;

  blockBufferOut = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0, dataLength, 0, &blockBufferOut);
  if ((_DWORD)v4)
  {
    v18 = v4;
    goto LABEL_27;
  }
  v5 = blockBufferOut;
  v23 = 0;
  *(_QWORD *)&v22.byte0 = 0;
  *(_QWORD *)&v22.byte8 = 0;
  MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(blockBufferOut, (_DWORD *)&v23 + 1, &v23, &v22);
  if ((_DWORD)MessageTypeAndFlagsAndGuestUUID)
    goto LABEL_32;
  v7 = CFUUIDCreateFromUUIDBytes(v3, v22);
  if (!v7)
  {
    MessageTypeAndFlagsAndGuestUUID = FigSignalErrorAt();
LABEL_32:
    v18 = MessageTypeAndFlagsAndGuestUUID;
    _Block_release(0);
    goto LABEL_27;
  }
  v8 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v8);
  v10 = Value;
  if (!Value)
  {
    v18 = FigSignalErrorAt();
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    v11 = 0;
    v14 = 0;
    goto LABEL_23;
  }
  v11 = (void (**)(void *, OpaqueCMBlockBuffer *, CFTypeRef))_Block_copy(*Value);
  v12 = (const void *)v10[1];
  if (v12)
    v13 = CFRetain(v12);
  else
    v13 = 0;
  v14 = v10[2];
  dispatch_retain(v14);
  v15 = (const void *)v10[4];
  if (v15)
    v10 = CFRetain(v15);
  else
    v10 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  if (HIDWORD(v23) == 1115252001)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    v16 = (const void *)*((_QWORD *)CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v8) + 4);
    if (v16)
    {
      v17 = CFRetain(v16);
      os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
      if (v17)
      {
        VTParavirtualizationReplyClerkInvalidate((uint64_t)v17);
        CFRelease(v17);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    }
    v11[2](v11, v5, v13);
  }
  else
  {
    if ((v23 & 4) != 0)
    {
      v18 = VTParavirtualizationReplyClerkDeliverReply((uint64_t)v10, v5, 0, 0);
      if (!v13)
        goto LABEL_23;
      goto LABEL_22;
    }
    CFRetain(v5);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vtParavirtualizationGuestDispatchOneMessageFromHost_block_invoke;
    block[3] = &unk_1E2F649B8;
    block[4] = v11;
    block[5] = v5;
    block[6] = v13;
    dispatch_async(v14, block);
    v11 = 0;
  }
  v18 = 0;
  if (v13)
LABEL_22:
    CFRelease(v13);
LABEL_23:
  CFRelease(v8);
  _Block_release(v11);
  if (v14)
    dispatch_release(v14);
  if (v10)
    CFRelease(v10);
LABEL_27:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v18;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_4(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  return 0;
}

void __vtParavirtualizationGuestDispatchOneMessageFromHost_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  _Block_release(*(const void **)(a1 + 32));
}

double vtParavirtualizationReplyClerk_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void vtParavirtualizationReplyClerk_Finalize(uint64_t a1)
{
  __CFDictionary *v2;
  const void *v3;

  v2 = *(__CFDictionary **)(a1 + 40);
  if (v2)
  {
    CFDictionaryRemoveAllValues(v2);
    v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
}

__CFString *vtParavirtualizationReplyClerk_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  uint64_t Count;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  Count = FigCFDictionaryGetCount();
  CFStringAppendFormat(Mutable, 0, CFSTR("VTParavirtualizationReplyClerk %p RC: %d  %d pending replies"), a1, v4, Count);
  return Mutable;
}

void __vParavirtualizationGetReplyTimeoutInNanoSeconds_block_invoke()
{
  vParavirtualizationGetReplyTimeoutInNanoSeconds_sReplyTimeoutInNanoSeconds = 1;
}

void VTFigAudioSessionInitialize(uint64_t a1)
{
  _QWORD block[5];

  if (!a1 || sFigAudioSessionFunctionsHasBeenSet == 1)
  {
    FigSignalErrorAt();
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __VTFigAudioSessionInitialize_block_invoke;
    block[3] = &__block_descriptor_tmp_23;
    block[4] = a1;
    if (VTFigAudioSessionInitialize_once != -1)
      dispatch_once(&VTFigAudioSessionInitialize_once, block);
  }
}

uint64_t VTFigAudioSessionCreateWithCMSession()
{
  if ((sFigAudioSessionFunctionsHasBeenSet & 1) == 0)
    return FigSignalErrorAt();
  if (sFigAudioSessionFunctions)
    return sFigAudioSessionFunctions();
  return 4294947943;
}

uint64_t VTFigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[2];

  if ((sFigAudioSessionFunctionsHasBeenSet & 1) == 0)
    return FigSignalErrorAt();
  if (!*(&sFigAudioSessionFunctions + 1))
    return 4294947943;
  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return ((uint64_t (*)(uint64_t, _OWORD *))*(&sFigAudioSessionFunctions + 1))(a1, v4);
}

uint64_t VTInAudioMXServerProcess()
{
  if ((sFigAudioSessionFunctionsHasBeenSet & 1) != 0)
  {
    if (off_1EE285348)
      return off_1EE285348();
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTFigAudioSessionCreate(_OWORD *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[2];
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  if (VTCMSessionIsSupported())
  {
    if (VTInAudioMXServerProcess())
    {
      UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
      if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        UsingPrimaryAVAudioSessionSiblingForAuditToken = VTFigAudioSessionCreateWithCMSession();
        if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
          Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetInt32();
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_8;
        }
      }
LABEL_15:
      v11 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
      goto LABEL_10;
    }
    v9 = *MEMORY[0x1E0C9AE00];
    v10 = a1[1];
    v13[0] = *a1;
    v13[1] = v10;
    UsingPrimaryAVAudioSessionSiblingForAuditToken = VTFigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(v9, v13);
    if ((_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
      goto LABEL_15;
  }
LABEL_8:
  v11 = 0;
  if (a4)
  {
    *a4 = v14;
    v14 = 0;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  return v11;
}

uint64_t vt_Copy_32ARGB_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v36 = a5[2];
    v37 = a5[1];
    v9 = a6[1];
    v35 = a2 >> 1;
    v34 = 2 * v7;
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v40 = *a4 + 7;
    v41 = *a6 + 1;
    v11 = a6[2];
    do
    {
      v39 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v13 = (unsigned __int8 *)v40;
        v14 = (_BYTE *)v41;
        do
        {
          v15 = &v14[v8];
          v16 = *(v13 - 6);
          v17 = *(v13 - 5);
          v18 = *(v13 - 4);
          v19 = *(v13 - 2);
          v20 = *(v13 - 1);
          v21 = *v13;
          v22 = v7;
          v23 = &v13[v7];
          v24 = *(v23 - 6);
          v25 = *(v23 - 5);
          v26 = *(v23 - 4);
          v27 = *(v23 - 2);
          v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          *v14 = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          *v15 = (8414 * v27 + 540672 + 16519 * v28 + 3208 * (_DWORD)v23) >> 15;
          v29 = v21 + v18 + v26;
          v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          v31 = 33544898 * v28 - 9534 * (_DWORD)v15 + 33549576 * v30 + 14392 * (v29 + (_DWORD)v23);
          v32 = 33542381 * v28 - 12051 * (_DWORD)v15 + 33552092 * v29 + 33552092 * (_DWORD)v23;
          v7 = v22;
          *(_BYTE *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(_BYTE *)(v11 + v12++) = (v32 + 14392 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v39 = a5[2];
    v40 = a5[1];
    v9 = a2 >> 1;
    v10 = a6[1];
    v11 = a6[2];
    v37 = 2 * *a5;
    v38 = v9;
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v43 = *a4;
    v44 = *a6 + 1;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = (_BYTE *)v44;
        do
        {
          v16 = &v14[v8];
          v17 = v7;
          v18 = &v15[v7];
          v19 = v15[2];
          v20 = v15[1];
          v21 = *v15;
          v22 = v15[6];
          v23 = v15[5];
          v24 = v15[4];
          v25 = v18[2];
          v26 = v18[1];
          v27 = *v18;
          v28 = v18[6];
          v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          *v14 = (8414 * v22 + 540672 + 16519 * v23 + 3208 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (8414 * v25 + 540672 + 16519 * v26 + 3208 * v27) >> 15;
          *v16 = (8414 * v28 + 540672 + 16519 * v29 + 3208 * (_DWORD)v18) >> 15;
          v30 = v24 + v21 + v27;
          v31 = v22 + v19 + v25 + v28;
          v32 = v23 + v20 + v26;
          v33 = 33544898 * v29 - 9534 * v32 + 33549576 * v31 + 14392 * (v30 + (_DWORD)v18);
          v34 = 33542381 * v29 - 12051 * v32 + 33552092 * v30 + 33552092 * (_DWORD)v18;
          v7 = v17;
          *(_BYTE *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v11 + v13) = (v34 + 14392 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a5[1];
    v37 = a2 >> 1;
    v43 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v35 = v9;
    v42 = *a6 + 1;
    v41 = *a4 + 7;
    do
    {
      v40 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v41;
        v11 = (_BYTE *)v42;
        v12 = v35;
        v13 = v43;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = &v10[v7];
          v22 = v7;
          v23 = v10[v7 - 6];
          v24 = *(v21 - 5);
          v25 = *(v21 - 4);
          v26 = *(v21 - 2);
          v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *v11 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (8414 * v23 + 540672 + 16519 * v24 + 3208 * v25) >> 15;
          *v14 = (8414 * v26 + 540672 + 16519 * v27 + 3208 * (_DWORD)v21) >> 15;
          v28 = v20 + v17 + v25;
          v29 = v18 + v15 + v23 + v26;
          v30 = v19 + v16 + v24;
          v31 = 33544898 * v27 - 9534 * v30 + 33549576 * v29 + 14392 * (v28 + (_DWORD)v21);
          v32 = 33542381 * v27 - 12051 * v30 + 33552092 * v28 + 33552092 * (_DWORD)v21 + 14392 * v29;
          v33 = v31 + 16842752;
          v7 = v22;
          *v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *v10 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          *v14 = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33544898 * v25 - 9534 * v29 + 33549576 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33542381 * v25 - 12051 * v29 + 33552092 * v27 + 33552092 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *v10 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          *v14 = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33544898 * v25 - 9534 * v29 + 33549576 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33542381 * v25 - 12051 * v29 + 33552092 * v27 + 33552092 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *v10 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4 + 7;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v42;
        v11 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = v10[v7 - 6];
          v22 = v10[v7 - 5];
          v23 = v10[v7 - 4];
          v24 = v10[v7 - 2];
          v25 = v10[v7 - 1];
          v26 = v10[v7];
          *(v11 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *v11 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *v10 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = 2 * *a5;
    v11 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v12 = *a4;
    v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = (_BYTE *)v13;
        v15 = v9;
        v16 = v12;
        do
        {
          v17 = &v14[v8];
          v18 = (19235 * v16[5] + 9798 * v16[6] + 3736 * v16[4] + 0x4000) >> 15;
          v19 = (19235 * v16[v7 + 1] + 9798 * v16[v7 + 2] + 3736 * v16[v7] + 0x4000) >> 15;
          v20 = 19235 * v16[v7 + 5] + 9798 * v16[v7 + 6] + 3736 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (19235 * v16[1] + 9798 * v16[2] + 3736 * *v16 + 0x4000) >> 15;
          *v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v36 = a5[2];
    v37 = a5[1];
    v9 = a6[1];
    v35 = a2 >> 1;
    v34 = 2 * v7;
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v40 = *a4 + 7;
    v41 = *a6 + 1;
    v11 = a6[2];
    do
    {
      v39 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v13 = (unsigned __int8 *)v40;
        v14 = (_BYTE *)v41;
        do
        {
          v15 = &v14[v8];
          v16 = *(v13 - 6);
          v17 = *(v13 - 5);
          v18 = *(v13 - 4);
          v19 = *(v13 - 2);
          v20 = *(v13 - 1);
          v21 = *v13;
          v22 = v7;
          v23 = &v13[v7];
          v24 = *(v23 - 6);
          v25 = *(v23 - 5);
          v26 = *(v23 - 4);
          v27 = *(v23 - 2);
          v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          *v14 = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          *v15 = (5983 * v27 + 540672 + 20127 * v28 + 2032 * (_DWORD)v23) >> 15;
          v29 = v21 + v18 + v26;
          v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          v31 = 33543339 * v28 - 11093 * (_DWORD)v15 + 33551135 * v30 + 14392 * (v29 + (_DWORD)v23);
          v32 = 33541360 * v28 - 13072 * (_DWORD)v15 + 33553113 * v29 + 33553113 * (_DWORD)v23;
          v7 = v22;
          *(_BYTE *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(_BYTE *)(v11 + v12++) = (v32 + 14392 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v39 = a5[2];
    v40 = a5[1];
    v9 = a2 >> 1;
    v10 = a6[1];
    v11 = a6[2];
    v37 = 2 * *a5;
    v38 = v9;
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v43 = *a4;
    v44 = *a6 + 1;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = (_BYTE *)v44;
        do
        {
          v16 = &v14[v8];
          v17 = v7;
          v18 = &v15[v7];
          v19 = v15[2];
          v20 = v15[1];
          v21 = *v15;
          v22 = v15[6];
          v23 = v15[5];
          v24 = v15[4];
          v25 = v18[2];
          v26 = v18[1];
          v27 = *v18;
          v28 = v18[6];
          v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          *v14 = (5983 * v22 + 540672 + 20127 * v23 + 2032 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (5983 * v25 + 540672 + 20127 * v26 + 2032 * v27) >> 15;
          *v16 = (5983 * v28 + 540672 + 20127 * v29 + 2032 * (_DWORD)v18) >> 15;
          v30 = v24 + v21 + v27;
          v31 = v22 + v19 + v25 + v28;
          v32 = v23 + v20 + v26;
          v33 = 33543339 * v29 - 11093 * v32 + 33551135 * v31 + 14392 * (v30 + (_DWORD)v18);
          v34 = 33541360 * v29 - 13072 * v32 + 33553113 * v30 + 33553113 * (_DWORD)v18;
          v7 = v17;
          *(_BYTE *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v11 + v13) = (v34 + 14392 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a5[1];
    v37 = a2 >> 1;
    v43 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v35 = v9;
    v42 = *a6 + 1;
    v41 = *a4 + 7;
    do
    {
      v40 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v41;
        v11 = (_BYTE *)v42;
        v12 = v35;
        v13 = v43;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = &v10[v7];
          v22 = v7;
          v23 = v10[v7 - 6];
          v24 = *(v21 - 5);
          v25 = *(v21 - 4);
          v26 = *(v21 - 2);
          v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *v11 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (5983 * v23 + 540672 + 20127 * v24 + 2032 * v25) >> 15;
          *v14 = (5983 * v26 + 540672 + 20127 * v27 + 2032 * (_DWORD)v21) >> 15;
          v28 = v20 + v17 + v25;
          v29 = v18 + v15 + v23 + v26;
          v30 = v19 + v16 + v24;
          v31 = 33543339 * v27 - 11093 * v30 + 33551135 * v29 + 14392 * (v28 + (_DWORD)v21);
          v32 = 33541360 * v27 - 13072 * v30 + 33553113 * v28 + 33553113 * (_DWORD)v21 + 14392 * v29;
          v33 = v31 + 16842752;
          v7 = v22;
          *v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *v10 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          *v14 = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33543339 * v25 - 11093 * v29 + 33551135 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541360 * v25 - 13072 * v29 + 33553113 * v27 + 33553113 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *v10 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          *v14 = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33543339 * v25 - 11093 * v29 + 33551135 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541360 * v25 - 13072 * v29 + 33553113 * v27 + 33553113 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *v10 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4 + 7;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v42;
        v11 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = v10[v7 - 6];
          v22 = v10[v7 - 5];
          v23 = v10[v7 - 4];
          v24 = v10[v7 - 2];
          v25 = v10[v7 - 1];
          v26 = v10[v7];
          *(v11 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *v11 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *v10 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = 2 * *a5;
    v11 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v12 = *a4;
    v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = (_BYTE *)v13;
        v15 = v9;
        v16 = v12;
        do
        {
          v17 = &v14[v8];
          v18 = (23436 * v16[5] + 6966 * v16[6] + 2366 * v16[4] + 0x4000) >> 15;
          v19 = (23436 * v16[v7 + 1] + 6966 * v16[v7 + 2] + 2366 * v16[v7] + 0x4000) >> 15;
          v20 = 23436 * v16[v7 + 5] + 6966 * v16[v7 + 6] + 2366 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (23436 * v16[1] + 6966 * v16[2] + 2366 * *v16 + 0x4000) >> 15;
          *v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v36 = a5[2];
    v37 = a5[1];
    v9 = a6[1];
    v35 = a2 >> 1;
    v34 = 2 * v7;
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v40 = *a4 + 7;
    v41 = *a6 + 1;
    v11 = a6[2];
    do
    {
      v39 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v13 = (unsigned __int8 *)v40;
        v14 = (_BYTE *)v41;
        do
        {
          v15 = &v14[v8];
          v16 = *(v13 - 6);
          v17 = *(v13 - 5);
          v18 = *(v13 - 4);
          v19 = *(v13 - 2);
          v20 = *(v13 - 1);
          v21 = *v13;
          v22 = v7;
          v23 = &v13[v7];
          v24 = *(v23 - 6);
          v25 = *(v23 - 5);
          v26 = *(v23 - 4);
          v27 = *(v23 - 2);
          v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          *v14 = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          *v15 = (7371 * v27 + 540672 + 19024 * v28 + 1664 * (_DWORD)v23) >> 15;
          v29 = v21 + v18 + v26;
          v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          v31 = 33544090 * v28 - 10342 * (_DWORD)v15 + 33550426 * v30 + 14350 * (v29 + (_DWORD)v23);
          v32 = 33541237 * v28 - 13195 * (_DWORD)v15 + 33553279 * v29 + 33553279 * (_DWORD)v23;
          v7 = v22;
          *(_BYTE *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(_BYTE *)(v11 + v12++) = (v32 + 14350 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v39 = a5[2];
    v40 = a5[1];
    v9 = a2 >> 1;
    v10 = a6[1];
    v11 = a6[2];
    v37 = 2 * *a5;
    v38 = v9;
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v43 = *a4;
    v44 = *a6 + 1;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = (_BYTE *)v44;
        do
        {
          v16 = &v14[v8];
          v17 = v7;
          v18 = &v15[v7];
          v19 = v15[2];
          v20 = v15[1];
          v21 = *v15;
          v22 = v15[6];
          v23 = v15[5];
          v24 = v15[4];
          v25 = v18[2];
          v26 = v18[1];
          v27 = *v18;
          v28 = v18[6];
          v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          *v14 = (7371 * v22 + 540672 + 19024 * v23 + 1664 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (7371 * v25 + 540672 + 19024 * v26 + 1664 * v27) >> 15;
          *v16 = (7371 * v28 + 540672 + 19024 * v29 + 1664 * (_DWORD)v18) >> 15;
          v30 = v24 + v21 + v27;
          v31 = v22 + v19 + v25 + v28;
          v32 = v23 + v20 + v26;
          v33 = 33544090 * v29 - 10342 * v32 + 33550426 * v31 + 14350 * (v30 + (_DWORD)v18);
          v34 = 33541237 * v29 - 13195 * v32 + 33553279 * v30 + 33553279 * (_DWORD)v18;
          v7 = v17;
          *(_BYTE *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v11 + v13) = (v34 + 14350 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a5[1];
    v37 = a2 >> 1;
    v43 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v35 = v9;
    v42 = *a6 + 1;
    v41 = *a4 + 7;
    do
    {
      v40 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v41;
        v11 = (_BYTE *)v42;
        v12 = v35;
        v13 = v43;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = &v10[v7];
          v22 = v7;
          v23 = v10[v7 - 6];
          v24 = *(v21 - 5);
          v25 = *(v21 - 4);
          v26 = *(v21 - 2);
          v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *v11 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (7371 * v23 + 540672 + 19024 * v24 + 1664 * v25) >> 15;
          *v14 = (7371 * v26 + 540672 + 19024 * v27 + 1664 * (_DWORD)v21) >> 15;
          v28 = v20 + v17 + v25;
          v29 = v18 + v15 + v23 + v26;
          v30 = v19 + v16 + v24;
          v31 = 33544090 * v27 - 10342 * v30 + 33550426 * v29 + 14350 * (v28 + (_DWORD)v21);
          v32 = 33541237 * v27 - 13195 * v30 + 33553279 * v28 + 33553279 * (_DWORD)v21 + 14350 * v29;
          v33 = v31 + 16842752;
          v7 = v22;
          *v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *v10 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          *v14 = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33544090 * v25 - 10342 * v29 + 33550426 * v28 + 14350 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541237 * v25 - 13195 * v29 + 33553279 * v27 + 33553279 * v26 + 14350 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE *v39;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v34 = a5[1];
    v33 = a2 >> 1;
    v39 = (_BYTE *)a6[1];
    v32 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    v31 = v9;
    v38 = *a6 + 1;
    v37 = *a4;
    do
    {
      v36 = v6;
      if (a1 >= 2)
      {
        v11 = v37;
        v10 = (_BYTE *)v38;
        v12 = v31;
        v13 = v39;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *v10 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          *v14 = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          v27 = v20 + v17 + v23;
          v28 = v18 + v15 + v21 + v24;
          v29 = v19 + v16 + v22;
          *v13 = (33544090 * v25 - 10342 * v29 + 33550426 * v28 + 14350 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541237 * v25 - 13195 * v29 + 33553279 * v27 + 33553279 * v26 + 14350 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = v11[2];
          v16 = v11[1];
          v17 = *v11;
          v18 = v11[6];
          v19 = v11[5];
          v20 = v11[4];
          v21 = v11[v7 + 2];
          v22 = v11[v7 + 1];
          v23 = v11[v7];
          v24 = v11[v7 + 6];
          v25 = v11[v7 + 5];
          v26 = v11[v7 + 4];
          *(v10 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *v10 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4 + 7;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v42;
        v11 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v11[v8];
          v15 = *(v10 - 6);
          v16 = *(v10 - 5);
          v17 = *(v10 - 4);
          v18 = *(v10 - 2);
          v19 = *(v10 - 1);
          v20 = *v10;
          v21 = v10[v7 - 6];
          v22 = v10[v7 - 5];
          v23 = v10[v7 - 4];
          v24 = v10[v7 - 2];
          v25 = v10[v7 - 1];
          v26 = v10[v7];
          *(v11 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *v11 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v38 = a2 >> 1;
    v39 = a5[1];
    v9 = a1 >> 1;
    v44 = (_BYTE *)a6[1];
    v36 = 2 * *a3;
    v37 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v35 = v9;
    v43 = *a6 + 1;
    v42 = *a4;
    do
    {
      v41 = v6;
      if (a1 >= 2)
      {
        v11 = v42;
        v10 = (_BYTE *)v43;
        v12 = v35;
        v13 = v44;
        do
        {
          v14 = &v10[v8];
          v15 = *v11;
          v16 = v11[1];
          v17 = v11[2];
          v18 = v11[3];
          v19 = v11[4];
          v20 = v11[5];
          v21 = v11[v7];
          v22 = v11[v7 + 1];
          v23 = v11[v7 + 2];
          v24 = v11[v7 + 3];
          v25 = v11[v7 + 4];
          v26 = v11[v7 + 5];
          *(v10 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *v10 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          v27 = v19 + v16 + v22 + v25;
          v28 = v20 + v17 + v23 + v26;
          v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF)
            LOBYTE(v31) = -1;
          *v13 = v31;
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = 2 * *a5;
    v11 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v12 = *a4;
    v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = (_BYTE *)v13;
        v15 = v9;
        v16 = v12;
        do
        {
          v17 = &v14[v8];
          v18 = (22217 * v16[5] + 8608 * v16[6] + 1943 * v16[4] + 0x4000) >> 15;
          v19 = (22217 * v16[v7 + 1] + 8608 * v16[v7 + 2] + 1943 * v16[v7] + 0x4000) >> 15;
          v20 = 22217 * v16[v7 + 5] + 8608 * v16[v7 + 6] + 1943 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (22217 * v16[1] + 8608 * v16[2] + 1943 * *v16 + 0x4000) >> 15;
          *v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_y420ITU601_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  char v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int8x8x4_t v171;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v170 = 4 * (a1 >> 3);
    v169 = 2 * *a3;
    v168 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFCDDC);
    v22 = vdupq_n_s32(0xFFFF97F2);
    v23 = vdupq_n_s32(0x10235u);
    v24 = vdupq_n_s32(0xCC4Bu);
    v25 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v27 = -1;
    v28.i32[1] = 0;
    v165 = a1 >> 1;
    v166 = a1;
    v163 = a3[2];
    v164 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip2q_s32(v41, v41);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip1q_s32(v39, v39);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v171.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v47, v49), 0xFuLL));
          v171.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v47, v52), 0xFuLL));
          v171.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v171.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v171);
          v31 += 32;
          vst4_s8(v36, *(int8x8x4_t *)&v27);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v170)
      {
        v167 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38155 * v34->u8[0] - 610480;
          v62 = -12836 * v58 - 26638 * v59;
          v63 = 66101 * v58;
          v64 = 52299 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38155 * v60 - 610480;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = -1;
          v31[1] = v66;
          v31[2] = v67;
          v31[3] = v70;
          v31[4] = -1;
          v31[5] = v73;
          v31[6] = v77;
          v31[7] = v79;
          v31 += 8;
          v80 = v29[1];
          v81 = 38155 * *v29 - 610480;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38155 * v80 - 610480;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          *v30 = -1;
          v30[1] = v83;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v85;
          v30[3] = v88;
          v30[4] = -1;
          if (v96 >= 0)
            v98 = v97;
          else
            v98 = 0;
          v30[5] = v92;
          v30[6] = v95;
          v30[7] = v98;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v165;
        a1 = v166;
        v11 = v167;
        v14 = v163;
        v12 = v164;
      }
      if ((a1 & 1) != 0)
      {
        v99 = *v33 - 128;
        v100 = *v32 - 128;
        v101 = 38155 * v34->u8[0] - 610480;
        v102 = -12836 * v99 - 26638 * v100;
        v103 = 66101 * v99;
        v104 = 52299 * v100;
        v105 = (v101 + v104) >> 15;
        if (v105 >= 255)
          LOBYTE(v105) = -1;
        if (v101 + v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = (v102 + v101) >> 15;
        if (v107 >= 255)
          LOBYTE(v107) = -1;
        if (v102 + v101 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + v103;
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v31 = -1;
        v31[1] = v106;
        v31[2] = v108;
        v31[3] = v111;
        v112 = 38155 * *v29 - 610480;
        v113 = v112 + v104;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v112 + v102;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v112 + v103;
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        *v30 = -1;
        v30[1] = v115;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v30[2] = v118;
        v30[3] = v121;
      }
      v6 = (uint8x8_t *)((char *)v6 + v169);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v168;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v122 = 1;
      else
        v122 = v9;
      do
      {
        v123 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v124 = v123 - 128;
        v125 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v126 = v6->u8[0];
        v127 = v6->u8[1];
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v128 = 38155 * v126 - 610480;
        v129 = -12836 * v124 - 26638 * (v125 - 128);
        v130 = 66101 * v124;
        v131 = 52299 * (v125 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38155 * v127 - 610480;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v122;
      }
      while (v122);
    }
    if ((a1 & 1) != 0)
    {
      v149 = v7->u8[0] - 128;
      v150 = v8->u8[0] - 128;
      v151 = 38155 * v6->u8[0] - 610480;
      v152 = -12836 * v149 - 26638 * v150;
      v153 = v151 + 52299 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 66101 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  char v84;
  int v85;
  int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int8x8x4_t v173;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v167 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v171 = 4 * (a1 >> 3);
    v172 = v13;
    v170 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v165 = v12;
    v166 = a1 >> 1;
    v17 = &v7[v12];
    v163 = v6 - 4 * (a1 >> 3);
    v164 = v16;
    v18 = vdupq_n_s32(0xFFFFCDDC);
    v19 = vdupq_n_s32(0xFFFF97F2);
    v20 = vdupq_n_s32(0x10235u);
    v21 = vdupq_n_s32(0xCC4Bu);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v164;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v165];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v171)
      {
        v168 = v11;
        v169 = v9;
        v56 = v163;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38155 * *v31 - 610480;
          v61 = -12836 * v58 - 26638 * (v59 - 128);
          v62 = 66101 * v58;
          v63 = 52299 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38155 * v31[1] - 610480;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v31 += 2;
          *v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          v78 = *v26;
          v79 = v26[1];
          v26 += 2;
          v80 = 38155 * v78 - 610480;
          v81 = (v80 + v63) >> 15;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v80 + v63 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = (v80 + v61) >> 15;
          if (v83 >= 255)
            LOBYTE(v83) = -1;
          if (v80 + v61 >= 0)
            v84 = v83;
          else
            v84 = 0;
          v85 = v80 + v62;
          v86 = v85 >> 15;
          if (v85 >> 15 >= 255)
            LOBYTE(v86) = -1;
          if (v85 >= 0)
            v87 = v86;
          else
            v87 = 0;
          v88 = 38155 * v79 - 610480;
          v89 = v88 + v63;
          v90 = (v88 + v63) >> 15;
          if (v90 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v88 + v61;
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v88 + v62;
          v95 = v94 >> 15;
          *v27 = -1;
          v27[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v166;
        a1 = v167;
        v11 = v168;
        v9 = v169;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v30 - 128;
        v99 = *v29 - 128;
        v100 = 38155 * *v31 - 610480;
        v101 = -12836 * v98 - 26638 * v99;
        v102 = 66101 * v98;
        v103 = 52299 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        v111 = 38155 * *v26 - 610480;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        *v27 = -1;
        v27[1] = v114;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v121 = 1;
      else
        v121 = v6;
      do
      {
        v122 = *v8;
        v8 += 2;
        v123 = v122 - 128;
        v124 = *v9;
        v125 = *v7;
        v126 = v9 + 2;
        v127 = v7[1];
        v7 += 2;
        v128 = 38155 * v125 - 610480;
        v129 = -12836 * v123 - 26638 * (v124 - 128);
        v130 = 66101 * v123;
        v131 = 52299 * (v124 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38155 * v127 - 610480;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if ((a1 & 1) != 0)
    {
      v149 = *v8 - 128;
      v150 = *v9 - 128;
      v151 = 38155 * *v7 - 610480;
      v152 = -12836 * v149 - 26638 * v150;
      v153 = v151 + 52299 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 66101 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU601_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  char v144;
  char v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  char v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int8x8x4_t v168;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v167 = 4 * (a1 >> 3);
    v166 = 2 * *a3;
    v165 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFCDDC);
    v22 = vdupq_n_s32(0xFFFF97F2);
    v23 = vdupq_n_s32(0x10235u);
    v24 = vdupq_n_s32(0xCC4Bu);
    v25 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v27 = -1;
    v28.i32[1] = 0;
    v162 = a1 >> 1;
    v163 = a1;
    v160 = a3[2];
    v161 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip1q_s32(v39, v39);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip2q_s32(v41, v41);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v168.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v50, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v168.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          vst4_s8(v31, *(int8x8x4_t *)(&v27 - 3));
          v31 += 32;
          v168.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v168.val[3] = (int8x8_t)-1;
          vst4_s8(v36, v168);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v167)
      {
        v164 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38155 * v34->u8[0] - 610480;
          v62 = -12836 * v58 - 26638 * v59;
          v63 = 66101 * v58;
          v64 = 52299 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38155 * v60 - 610480;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = v70;
          v31[1] = v67;
          v31[2] = v66;
          v31[3] = -1;
          v31[5] = v77;
          v31[6] = v73;
          v31[4] = v79;
          v31[7] = -1;
          v31 += 8;
          v80 = v29[1];
          v81 = 38155 * *v29 - 610480;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38155 * v80 - 610480;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          v30[1] = v85;
          *v30 = v88;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v83;
          v30[3] = -1;
          if (v96 < 0)
            v97 = 0;
          v30[4] = v97;
          v30[5] = v95;
          v30[6] = v92;
          v30[7] = -1;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v162;
        a1 = v163;
        v11 = v164;
        v14 = v160;
        v12 = v161;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v33 - 128;
        v99 = *v32 - 128;
        v100 = 38155 * v34->u8[0] - 610480;
        v101 = -12836 * v98 - 26638 * v99;
        v102 = 66101 * v98;
        v103 = 52299 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v31 = v110;
        v31[1] = v107;
        v31[2] = v105;
        v31[3] = -1;
        v111 = 38155 * *v29 - 610480;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        *v30 = v120;
        v30[1] = v117;
        v30[2] = v114;
        v30[3] = -1;
      }
      v6 = (uint8x8_t *)((char *)v6 + v166);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v165;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v121 = 1;
      else
        v121 = v9;
      do
      {
        v122 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v123 = v122 - 128;
        v124 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v125 = 38155 * v6->u8[0] - 610480;
        v126 = -12836 * v123 - 26638 * (v124 - 128);
        v127 = 66101 * v123;
        v128 = 52299 * (v124 - 128);
        v129 = (v125 + v128) >> 15;
        if (v129 >= 255)
          LOBYTE(v129) = -1;
        if (v125 + v128 >= 0)
          v130 = v129;
        else
          v130 = 0;
        v131 = (v126 + v125) >> 15;
        if (v131 >= 255)
          LOBYTE(v131) = -1;
        if (v126 + v125 >= 0)
          v132 = v131;
        else
          v132 = 0;
        v133 = v125 + v127;
        v134 = v133 >> 15;
        if (v133 >> 15 >= 255)
          LOBYTE(v134) = -1;
        if (v133 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = 38155 * v6->u8[1] - 610480;
        v137 = v136 + v128;
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v136 + v126;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v136 + v127;
        *v10 = v135;
        v10[1] = v132;
        if (v143 >> 15 >= 255)
          v144 = -1;
        else
          v144 = v143 >> 15;
        v10[2] = v130;
        v10[3] = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v10[4] = v145;
        v10[5] = v142;
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v139;
        v10[7] = -1;
        v10 += 8;
        --v121;
      }
      while (v121);
    }
    if ((a1 & 1) != 0)
    {
      v146 = v7->u8[0] - 128;
      v147 = v8->u8[0] - 128;
      v148 = 38155 * v6->u8[0] - 610480;
      v149 = -12836 * v146 - 26638 * v147;
      v150 = v148 + 52299 * v147;
      v151 = v150 >> 15;
      if (v150 >> 15 >= 255)
        LOBYTE(v151) = -1;
      if (v150 >= 0)
        v152 = v151;
      else
        v152 = 0;
      v153 = v149 + v148;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v148 + 66101 * v146;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      *v10 = v158;
      v10[1] = v155;
      v10[2] = v152;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  char v89;
  int v90;
  int v91;
  char v92;
  int v93;
  char v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  char v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  char v129;
  int v130;
  char v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  int v142;
  char v143;
  char v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  char v151;
  int v152;
  int v153;
  char v154;
  int v155;
  int v156;
  char v157;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int8x8x4_t v169;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v163 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v167 = 4 * (a1 >> 3);
    v168 = v13;
    v166 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v161 = v12;
    v162 = a1 >> 1;
    v17 = &v7[v12];
    v159 = v6 - 4 * (a1 >> 3);
    v160 = v16;
    v18 = vdupq_n_s32(0xFFFFCDDC);
    v19 = vdupq_n_s32(0xFFFF97F2);
    v20 = vdupq_n_s32(0x10235u);
    v21 = vdupq_n_s32(0xCC4Bu);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v160;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v161];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v167)
      {
        v164 = v11;
        v165 = v9;
        v56 = v159;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38155 * *v31 - 610480;
          v61 = -12836 * v58 - 26638 * (v59 - 128);
          v62 = 66101 * v58;
          v63 = 52299 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38155 * v31[1] - 610480;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          v78 = 38155 * *v26 - 610480;
          v31 += 2;
          v79 = (v78 + v63) >> 15;
          if (v79 >= 255)
            LOBYTE(v79) = -1;
          v80 = v78 + v61;
          if (v78 + v63 < 0)
            LOBYTE(v79) = 0;
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          v82 = v78 + v62;
          if (v80 >= 0)
            v83 = v81;
          else
            v83 = 0;
          v84 = v82 >> 15;
          if (v82 >> 15 >= 255)
            LOBYTE(v84) = -1;
          v67 = v82 < 0;
          v85 = 38155 * v26[1] - 610480;
          if (v67)
            v86 = 0;
          else
            v86 = v84;
          v87 = v85 + v63;
          v88 = (v85 + v63) >> 15;
          if (v88 >= 255)
            LOBYTE(v88) = -1;
          if (v87 >= 0)
            v89 = v88;
          else
            v89 = 0;
          v90 = v85 + v61;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v85 + v62;
          *v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255)
            v94 = -1;
          else
            v94 = v93 >> 15;
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v162;
        a1 = v163;
        v11 = v164;
        v9 = v165;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v96 = *v30 - 128;
        v97 = *v29 - 128;
        v98 = 38155 * *v31 - 610480;
        v99 = -12836 * v96 - 26638 * v97;
        v100 = 66101 * v96;
        v101 = 52299 * v97;
        v102 = (v98 + v101) >> 15;
        if (v102 >= 255)
          LOBYTE(v102) = -1;
        if (v98 + v101 >= 0)
          v103 = v102;
        else
          v103 = 0;
        v104 = (v99 + v98) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v99 + v98 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v98 + v100;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        *v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        v109 = 38155 * *v26 - 610480;
        v110 = v109 + v101;
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        v113 = v109 + v99;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v109 + v100;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        *v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v119 = 1;
      else
        v119 = v6;
      do
      {
        v120 = *v8;
        v8 += 2;
        v121 = v120 - 128;
        v122 = *v9;
        v123 = v9 + 2;
        v124 = 38155 * *v7 - 610480;
        v125 = -12836 * v121 - 26638 * (v122 - 128);
        v126 = 66101 * v121;
        v127 = 52299 * (v122 - 128);
        v128 = (v124 + v127) >> 15;
        if (v128 >= 255)
          LOBYTE(v128) = -1;
        if (v124 + v127 >= 0)
          v129 = v128;
        else
          v129 = 0;
        v130 = (v125 + v124) >> 15;
        if (v130 >= 255)
          LOBYTE(v130) = -1;
        if (v125 + v124 >= 0)
          v131 = v130;
        else
          v131 = 0;
        v132 = v124 + v126;
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = 38155 * v7[1] - 610480;
        v136 = v135 + v127;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = v135 + v125;
        v140 = v139 >> 15;
        if (v139 >> 15 >= 255)
          LOBYTE(v140) = -1;
        if (v139 >= 0)
          v141 = v140;
        else
          v141 = 0;
        v142 = v135 + v126;
        *v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255)
          v143 = -1;
        else
          v143 = v142 >> 15;
        v9 = v123;
        v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0)
          v144 = v143;
        else
          v144 = 0;
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if ((a1 & 1) != 0)
    {
      v145 = *v8 - 128;
      v146 = *v9 - 128;
      v147 = 38155 * *v7 - 610480;
      v148 = -12836 * v145 - 26638 * v146;
      v149 = v147 + 52299 * v146;
      v150 = v149 >> 15;
      if (v149 >> 15 >= 255)
        LOBYTE(v150) = -1;
      if (v149 >= 0)
        v151 = v150;
      else
        v151 = 0;
      v152 = v148 + v147;
      v153 = v152 >> 15;
      if (v152 >> 15 >= 255)
        LOBYTE(v153) = -1;
      if (v152 >= 0)
        v154 = v153;
      else
        v154 = 0;
      v155 = v147 + 66101 * v145;
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      *v10 = v157;
      v10[1] = v154;
      v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  int16x8_t v12;
  int32x4_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int32x4_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  char *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  int32x4_t v65;
  __int32 v66;
  int v67;
  int32x4_t v68;
  int32x4_t v69;
  char v70;
  int v71;
  int v72;
  char v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x8_t v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  int v94;
  char v95;
  int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  int v101;
  char v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  uint64_t v109;
  int32x4_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int32x2_t v116;
  int32x4_t v117;
  int v118;
  int v119;
  int v120;
  int32x4_t v121;
  char v122;
  int32x4_t v123;
  int8x8_t v124;
  int16x8_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int8x8x3_t v149;
  int8x8x3_t v150;

  v14 = a1 >> 1;
  v16 = *a4;
  v15 = a4[1];
  v17 = v15 + 1;
  v18 = *a6;
  if (a2 >= 2)
  {
    v19 = 0;
    v21 = *a3;
    v20 = a3[1];
    v22 = *a5;
    v23 = a2 >> 1;
    v147 = 2 * v21;
    v148 = 4 * (a1 >> 3);
    v146 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v24 = 1;
    else
      v24 = a1 >> 3;
    v143 = v21;
    v25 = &v16[v21];
    v140 = v14 - 4 * (a1 >> 3);
    v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6AF50);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    v28 = vdupq_n_s32(0xFFFFCDDC);
    a12 = vdupq_n_s32(0xFFFF97F2);
    v29 = vdupq_n_s32(0x10235u);
    v30 = vdupq_n_s32(0xCC4Bu);
    v31 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v32 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v144 = a1 >> 1;
    v145 = a1;
    v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        v39 = 0;
        v40 = v141;
        v35 = v18;
        do
        {
          v41 = *(int8x8_t *)&v15[v39];
          v42 = &v35[v22];
          v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          v46 = vmulq_s32(v43, v29);
          v47 = vmulq_s32(v44, v30);
          v13 = vzip1q_s32(v46, v46);
          v48 = vzip2q_s32(v46, v46);
          v49 = vzip1q_s32(v47, v47);
          v50 = vzip1q_s32(v45, v45);
          v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          v54 = vzip2q_s32(v47, v47);
          v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          v57 = vzip2q_s32(v45, v45);
          v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        v38 = &v16[v39];
        v33 = &v25[v39];
        v37 = &v15[v39];
        v36 = &v15[v39 + 1];
        v34 = &v35[v22];
      }
      else
      {
        v33 = &v16[v143];
        v34 = &v18[v22];
        v35 = v18;
        v36 = v17;
        v37 = v15;
        v38 = v16;
      }
      if (v14 > v148)
      {
        v59 = 0;
        v60 = v140;
        do
        {
          v61 = &v33[v59];
          v62 = v37[v59] - 128;
          v63 = 52299 * (v36[v59] - 128);
          v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          v65 = a7;
          v65.i32[0] = -12836 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x950BFFFF97F2);
          v66 = v65.i32[0];
          v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38155 * v38[v59] - 610480;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v13.i32[0] = 38155 * v38[v59] - 610480;
          v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0)
            v70 = v67;
          else
            v70 = 0;
          v71 = 66101 * v62;
          v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255)
            v73 = -1;
          else
            v73 = v72;
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0)
            v73 = 0;
          v74 = vaddq_s32(v69, v68);
          v75 = vcltzq_s32(v74);
          v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38155 * *v61 - 610480;
          v77 = 38155 * v61[1] - 610480;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          v79 = vaddq_s32(v13, v78);
          v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v77 + v66 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          *(_DWORD *)v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        v14 = v144;
        a1 = v145;
        v23 = a2 >> 1;
        v20 = v142;
      }
      if ((a1 & 1) != 0)
      {
        v86 = *v37 - 128;
        v87 = *v36 - 128;
        v88 = 38155 * *v38 - 610480;
        v89 = -12836 * v86 - 26638 * v87;
        v90 = 66101 * v86;
        v91 = 52299 * v87;
        v92 = (v88 + v91) >> 15;
        if (v92 >= 255)
          LOBYTE(v92) = -1;
        if (v88 + v91 >= 0)
          v93 = v92;
        else
          v93 = 0;
        v94 = (v89 + v88) >> 15;
        if (v94 >= 255)
          LOBYTE(v94) = -1;
        if (v89 + v88 >= 0)
          v95 = v94;
        else
          v95 = 0;
        v96 = v88 + v90;
        v97 = v96 >> 15;
        if (v96 >> 15 >= 255)
          LOBYTE(v97) = -1;
        if (v96 >= 0)
          v98 = v97;
        else
          v98 = 0;
        *v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        v99 = 38155 * *v33 - 610480;
        v100 = v99 + v91;
        v101 = v100 >> 15;
        if (v100 >> 15 >= 255)
          LOBYTE(v101) = -1;
        if (v100 >= 0)
          v102 = v101;
        else
          v102 = 0;
        v103 = v99 + v89;
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v99 + v90;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        *v34 = v102;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1)
        v109 = 1;
      else
        v109 = v14;
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        v112 = *v15;
        v15 += 2;
        v111 = v112;
        v113 = *v17;
        v17 += 2;
        v111 -= 128;
        v114 = v113 - 128;
        v115 = 52299 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        v117 = a8;
        v117.i32[0] = -12836 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x950BFFFF97F2);
        a12.i32[0] = 38155 * *v16 - 610480;
        a12 = vzip1q_s32(a12, v117);
        v118 = 66101 * v111;
        v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255)
          LOBYTE(v119) = -1;
        v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0)
          LOBYTE(v119) = 0;
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255)
          v122 = -1;
        else
          v122 = (v117.i32[1] + v118) >> 15;
        v121.i32[3] = v115;
        v121.i32[1] = 38155 * *v16 - 610480;
        v121.i32[0] = 52299 * v114;
        v123 = vaddq_s32(a12, v121);
        v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0)
          v122 = 0;
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if ((a1 & 1) != 0)
    {
      v126 = *v15 - 128;
      v127 = *v17 - 128;
      v128 = 38155 * *v16 - 610480;
      v129 = -12836 * v126 - 26638 * v127;
      v130 = v128 + 52299 * v127;
      v131 = v130 >> 15;
      if (v130 >> 15 >= 255)
        LOBYTE(v131) = -1;
      if (v130 >= 0)
        v132 = v131;
      else
        v132 = 0;
      v133 = v129 + v128;
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v128 + 66101 * v126;
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      *v18 = v132;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  int v135;
  char v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  int v160;
  int v161;
  char v162;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int8x8x4_t v175;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v164 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v174 = a2 >> 1;
    v173 = 4 * (a1 >> 3);
    v172 = 2 * *a3;
    v171 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v168 = *a3;
    v169 = a1 >> 1;
    v16 = &v6[*a3];
    v165 = (a1 >> 1) - 4 * (a1 >> 3);
    v166 = v15;
    v17 = vdupq_n_s32(0xFFFFD3F4);
    v18 = vdupq_n_s32(0xFFFFA498);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xE2D1u);
    v21 = vdupq_n_s32(0xB375u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v166;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v168];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v173)
      {
        v54 = v165;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -11276 * v55 - 23400 * (v57 - 128);
          v61 = 58065 * v55;
          v62 = 45941 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          v78 = *v23;
          v79 = v23[1];
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          if (v92 >= 0)
            v94 = v93;
          else
            v94 = 0;
          v95 = v61 + (v79 << 15);
          *v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255)
            LOBYTE(v96) = -1;
          else
            v96 = v95 >> 15;
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0)
            LOBYTE(v96) = 0;
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v169;
        v10 = a1;
        v13 = v167;
      }
      if ((v10 & 1) != 0)
      {
        v97 = *v27 - 128;
        v98 = *v26 - 128;
        v99 = *v28;
        v100 = -11276 * v97 - 23400 * v98;
        v101 = 58065 * v97;
        v102 = 45941 * v98;
        v103 = v102 + (v99 << 15);
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v100 + (v99 << 15);
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + (v99 << 15);
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        v112 = *v23;
        v113 = v102 + (v112 << 15);
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v100 + (v112 << 15);
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v101 + (v112 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        *v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v164 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v122 = 1;
      else
        v122 = v11;
      do
      {
        v123 = *v7;
        v7 += 2;
        v124 = v123 - 128;
        v125 = *v8;
        v8 += 2;
        v126 = *v6;
        v127 = v6[1];
        v128 = -11276 * v124 - 23400 * (v125 - 128);
        v129 = 58065 * v124;
        v130 = 45941 * (v125 - 128);
        v131 = v130 + (v126 << 15);
        v132 = v131 >> 15;
        if (v131 >> 15 >= 255)
          LOBYTE(v132) = -1;
        if (v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = v128 + (v126 << 15);
        v135 = v134 >> 15;
        if (v134 >> 15 >= 255)
          LOBYTE(v135) = -1;
        if (v134 >= 0)
          v136 = v135;
        else
          v136 = 0;
        v137 = v129 + (v126 << 15);
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v130 + (v127 << 15);
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v128 + (v127 << 15);
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v129 + (v127 << 15);
        *v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        else
          v147 = v146 >> 15;
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v149 = *v7 - 128;
      v150 = *v8 - 128;
      v151 = *v6;
      v152 = -11276 * v149 - 23400 * v150;
      v153 = 58065 * v149;
      v154 = 45941 * v150 + (v151 << 15);
      v155 = v154 >> 15;
      if (v154 >> 15 >= 255)
        LOBYTE(v155) = -1;
      if (v154 >= 0)
        v156 = v155;
      else
        v156 = 0;
      v157 = v152 + (v151 << 15);
      v158 = v157 >> 15;
      if (v157 >> 15 >= 255)
        LOBYTE(v158) = -1;
      if (v157 >= 0)
        v159 = v158;
      else
        v159 = 0;
      v160 = v153 + (v151 << 15);
      v161 = v160 >> 15;
      if (v160 >> 15 >= 255)
        LOBYTE(v161) = -1;
      if (v160 >= 0)
        v162 = v161;
      else
        v162 = 0;
      *v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  int v108;
  char v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  char v116;
  int v117;
  int v118;
  char v119;
  int v120;
  int v121;
  char v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  char v137;
  int v138;
  int v139;
  char v140;
  int v141;
  int v142;
  char v143;
  int v144;
  int v145;
  char v146;
  int v147;
  int v148;
  char v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  char v157;
  int v158;
  int v159;
  char v160;
  int v161;
  int v162;
  char v163;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int8x8x4_t v176;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v165 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v175 = a2 >> 1;
    v174 = 4 * (a1 >> 3);
    v173 = 2 * *a3;
    v172 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v169 = *a3;
    v170 = a1 >> 1;
    v16 = &v6[*a3];
    v166 = (a1 >> 1) - 4 * (a1 >> 3);
    v167 = v15;
    v17 = vdupq_n_s32(0xFFFFD3F4);
    v18 = vdupq_n_s32(0xFFFFA498);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xE2D1u);
    v21 = vdupq_n_s32(0xB375u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v167;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v169];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v174)
      {
        v54 = v166;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -11276 * v55 - 23400 * (v57 - 128);
          v61 = 58065 * v55;
          v62 = 45941 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          v78 = *v23;
          v25 += 8;
          v79 = v23[1];
          v23 += 2;
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v61 + (v79 << 15);
          v95 = v94 >> 15;
          *v24 = -1;
          v24[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v170;
        v10 = a1;
        v13 = v168;
      }
      if ((v10 & 1) != 0)
      {
        v98 = *v27 - 128;
        v99 = *v26 - 128;
        v100 = *v28;
        v101 = -11276 * v98 - 23400 * v99;
        v102 = 58065 * v98;
        v103 = 45941 * v99;
        v104 = v103 + (v100 << 15);
        v105 = v104 >> 15;
        if (v104 >> 15 >= 255)
          LOBYTE(v105) = -1;
        if (v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = v101 + (v100 << 15);
        v108 = v107 >> 15;
        if (v107 >> 15 >= 255)
          LOBYTE(v108) = -1;
        if (v107 >= 0)
          v109 = v108;
        else
          v109 = 0;
        v110 = v102 + (v100 << 15);
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        *v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        v113 = *v23;
        v114 = v103 + (v113 << 15);
        v115 = v114 >> 15;
        if (v114 >> 15 >= 255)
          LOBYTE(v115) = -1;
        if (v114 >= 0)
          v116 = v115;
        else
          v116 = 0;
        v117 = v101 + (v113 << 15);
        v118 = v117 >> 15;
        if (v117 >> 15 >= 255)
          LOBYTE(v118) = -1;
        if (v117 >= 0)
          v119 = v118;
        else
          v119 = 0;
        v120 = v102 + (v113 << 15);
        v121 = v120 >> 15;
        if (v120 >> 15 >= 255)
          LOBYTE(v121) = -1;
        *v24 = -1;
        v24[1] = v116;
        if (v120 >= 0)
          v122 = v121;
        else
          v122 = 0;
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v165 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v123 = 1;
      else
        v123 = v11;
      do
      {
        v124 = *v7;
        v7 += 2;
        v125 = v124 - 128;
        v126 = *v8;
        v8 += 2;
        v127 = *v6;
        v128 = v6[1];
        v6 += 2;
        v129 = -11276 * v125 - 23400 * (v126 - 128);
        v130 = 58065 * v125;
        v131 = 45941 * (v126 - 128);
        v132 = v131 + (v127 << 15);
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = v129 + (v127 << 15);
        v136 = v135 >> 15;
        if (v135 >> 15 >= 255)
          LOBYTE(v136) = -1;
        if (v135 >= 0)
          v137 = v136;
        else
          v137 = 0;
        v138 = v130 + (v127 << 15);
        v139 = v138 >> 15;
        if (v138 >> 15 >= 255)
          LOBYTE(v139) = -1;
        if (v138 >= 0)
          v140 = v139;
        else
          v140 = 0;
        v141 = v131 + (v128 << 15);
        v142 = v141 >> 15;
        if (v141 >> 15 >= 255)
          LOBYTE(v142) = -1;
        if (v141 >= 0)
          v143 = v142;
        else
          v143 = 0;
        v144 = v129 + (v128 << 15);
        v145 = v144 >> 15;
        if (v144 >> 15 >= 255)
          LOBYTE(v145) = -1;
        if (v144 >= 0)
          v146 = v145;
        else
          v146 = 0;
        v147 = v130 + (v128 << 15);
        v148 = v147 >> 15;
        *v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255)
          LOBYTE(v148) = -1;
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0)
          v149 = v148;
        else
          v149 = 0;
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v150 = *v7 - 128;
      v151 = *v8 - 128;
      v152 = *v6;
      v153 = -11276 * v150 - 23400 * v151;
      v154 = 58065 * v150;
      v155 = 45941 * v151 + (v152 << 15);
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      v158 = v153 + (v152 << 15);
      v159 = v158 >> 15;
      if (v158 >> 15 >= 255)
        LOBYTE(v159) = -1;
      if (v158 >= 0)
        v160 = v159;
      else
        v160 = 0;
      v161 = v154 + (v152 << 15);
      v162 = v161 >> 15;
      if (v161 >> 15 >= 255)
        LOBYTE(v162) = -1;
      *v9 = -1;
      v9[1] = v157;
      if (v161 >= 0)
        v163 = v162;
      else
        v163 = 0;
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int32x4_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unsigned __int8 *v22;
  char *v23;
  char *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  char *v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  __int32 v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int8x8_t v70;
  int16x8_t v71;
  char v72;
  int v73;
  __int32 v74;
  int v75;
  int v76;
  int v77;
  int32x4_t v78;
  char v79;
  int32x4_t v80;
  int8x8_t v81;
  int16x8_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  char v101;
  int v102;
  int v103;
  char v104;
  int v105;
  int v106;
  char v107;
  uint64_t v108;
  int32x4_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  __int32 v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  char v121;
  int v122;
  int32x4_t v123;
  char v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int8x8x3_t v153;
  int8x8x3_t v154;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v148 = a1;
  v143 = a2;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = a3[1];
    v13 = *a5;
    v152 = a2 >> 1;
    v151 = 4 * (a1 >> 3);
    v150 = 2 * *a3;
    v149 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v14 = 1;
    else
      v14 = a1 >> 3;
    v146 = a3[1];
    v147 = *a3;
    v15 = &v6[*a3];
    v144 = (a1 >> 1) - 4 * (a1 >> 3);
    v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    v18 = vdupq_n_s32(0xFFFFD3F4);
    v19 = vdupq_n_s32(0xFFFFA498);
    v20 = vdupq_n_s32(0xE2D1u);
    v21 = vdupq_n_s32(0xB375u);
    v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        v28 = 0;
        v29 = v145;
        v24 = v9;
        do
        {
          v30 = *(int8x8_t *)&v7[v28];
          v31 = &v24[v13];
          v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          v35 = vmulq_s32(v32, v20);
          v36 = vmulq_s32(v33, v21);
          v37 = vzip1q_s32(v35, v35);
          v38 = vzip2q_s32(v35, v35);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v34, v34);
          v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v47 = vzip2q_s32(v34, v34);
          v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        v27 = &v6[v28];
        v22 = &v15[v28];
        v26 = &v7[v28];
        v25 = &v7[v28 + 1];
        v23 = &v24[v13];
      }
      else
      {
        v22 = &v6[v147];
        v23 = &v9[v13];
        v24 = v9;
        v25 = v8;
        v26 = v7;
        v27 = v6;
      }
      if (v10 > v151)
      {
        v49 = v10;
        v50 = v144;
        do
        {
          v52 = *v26;
          v26 += 2;
          v51 = v52;
          v53 = *v25;
          v25 += 2;
          v51 -= 128;
          v54 = *v27;
          v55 = v27[1];
          v27 += 2;
          v56 = v54 << 15;
          v57 = -11276 * v51 - 23400 * (v53 - 128);
          v58 = 58065 * v51;
          v59 = 45941 * (v53 - 128);
          v60 = v55 << 15;
          v61 = v57 + (v55 << 15);
          v62 = v61 >> 15;
          if (v61 >> 15 >= 255)
            LOBYTE(v62) = -1;
          v63 = v61 < 0;
          v64 = v58 + (v55 << 15);
          v65 = v64 >> 15;
          if (v63)
            LOBYTE(v62) = 0;
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          v69 = vaddq_s32(v67, v68);
          v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0)
            v72 = v65;
          else
            v72 = 0;
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          v73 = v22[1];
          v74 = v73 << 15;
          v75 = v57 + (v73 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          v77 = v58 + (v73 << 15);
          if (v75 < 0)
            LOBYTE(v76) = 0;
          v66.i32[1] = *v22 << 15;
          v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255)
            v79 = -1;
          else
            v79 = v77 >> 15;
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          v80 = vaddq_s32(v66, v78);
          v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0)
            v79 = 0;
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        v10 = v49;
        v12 = v146;
      }
      if ((a1 & 1) != 0)
      {
        v83 = *v26 - 128;
        v84 = *v25 - 128;
        v85 = *v27;
        v86 = -11276 * v83 - 23400 * v84;
        v87 = 58065 * v83;
        v88 = 45941 * v84;
        v89 = v88 + (v85 << 15);
        v90 = v89 >> 15;
        if (v89 >> 15 >= 255)
          LOBYTE(v90) = -1;
        if (v89 >= 0)
          v91 = v90;
        else
          v91 = 0;
        v92 = v86 + (v85 << 15);
        v93 = v92 >> 15;
        if (v92 >> 15 >= 255)
          LOBYTE(v93) = -1;
        if (v92 >= 0)
          v94 = v93;
        else
          v94 = 0;
        v95 = v87 + (v85 << 15);
        v96 = v95 >> 15;
        if (v95 >> 15 >= 255)
          LOBYTE(v96) = -1;
        if (v95 >= 0)
          v97 = v96;
        else
          v97 = 0;
        *v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        v98 = *v22;
        v99 = v88 + (v98 << 15);
        v100 = v99 >> 15;
        if (v99 >> 15 >= 255)
          LOBYTE(v100) = -1;
        if (v99 >= 0)
          v101 = v100;
        else
          v101 = 0;
        v102 = v86 + (v98 << 15);
        v103 = v102 >> 15;
        if (v102 >> 15 >= 255)
          LOBYTE(v103) = -1;
        if (v102 >= 0)
          v104 = v103;
        else
          v104 = 0;
        v105 = v87 + (v98 << 15);
        v106 = v105 >> 15;
        if (v105 >> 15 >= 255)
          LOBYTE(v106) = -1;
        *v23 = v101;
        if (v105 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    v10 = a1 >> 1;
  }
  if ((v143 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1)
        v108 = 1;
      else
        v108 = v10;
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        v110 = *v7;
        v7 += 2;
        v111 = v110 - 128;
        v112 = *v8;
        v8 += 2;
        v113 = v6[1];
        v114 = -11276 * v111;
        v115 = 58065 * v111;
        v116 = v114 - 23400 * (v112 - 128);
        v117 = 45941 * (v112 - 128);
        v118 = v113 << 15;
        v119 = v116 + (v113 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255)
          v124 = -1;
        else
          v124 = v122 >> 15;
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0)
          v124 = 0;
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if ((a1 & 1) != 0)
    {
      v128 = *v7 - 128;
      v129 = *v8 - 128;
      v130 = *v6;
      v131 = -11276 * v128 - 23400 * v129;
      v132 = 58065 * v128;
      v133 = 45941 * v129 + (v130 << 15);
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v131 + (v130 << 15);
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v139 = v132 + (v130 << 15);
      v140 = v139 >> 15;
      if (v139 >> 15 >= 255)
        LOBYTE(v140) = -1;
      *v9 = v135;
      if (v139 >= 0)
        v141 = v140;
      else
        v141 = 0;
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU709_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  char v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int8x8x4_t v171;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v170 = 4 * (a1 >> 3);
    v169 = 2 * *a3;
    v168 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFE4B5);
    v22 = vdupq_n_s32(0xFFFFBBCB);
    v23 = vdupq_n_s32(0x10E63u);
    v24 = vdupq_n_s32(0xE579u);
    v25 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v27 = -1;
    v28.i32[1] = 0;
    v165 = a1 >> 1;
    v166 = a1;
    v163 = a3[2];
    v164 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip2q_s32(v41, v41);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip1q_s32(v39, v39);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v171.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v47, v49), 0xFuLL));
          v171.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v47, v52), 0xFuLL));
          v171.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v171.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v171);
          v31 += 32;
          vst4_s8(v36, *(int8x8x4_t *)&v27);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v170)
      {
        v167 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38155 * v34->u8[0] - 610480;
          v62 = -6987 * v58 - 17461 * v59;
          v63 = 69219 * v58;
          v64 = 58745 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38155 * v60 - 610480;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = -1;
          v31[1] = v66;
          v31[2] = v67;
          v31[3] = v70;
          v31[4] = -1;
          v31[5] = v73;
          v31[6] = v77;
          v31[7] = v79;
          v31 += 8;
          v80 = v29[1];
          v81 = 38155 * *v29 - 610480;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38155 * v80 - 610480;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          *v30 = -1;
          v30[1] = v83;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v85;
          v30[3] = v88;
          v30[4] = -1;
          if (v96 >= 0)
            v98 = v97;
          else
            v98 = 0;
          v30[5] = v92;
          v30[6] = v95;
          v30[7] = v98;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v165;
        a1 = v166;
        v11 = v167;
        v14 = v163;
        v12 = v164;
      }
      if ((a1 & 1) != 0)
      {
        v99 = *v33 - 128;
        v100 = *v32 - 128;
        v101 = 38155 * v34->u8[0] - 610480;
        v102 = -6987 * v99 - 17461 * v100;
        v103 = 69219 * v99;
        v104 = 58745 * v100;
        v105 = (v101 + v104) >> 15;
        if (v105 >= 255)
          LOBYTE(v105) = -1;
        if (v101 + v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = (v102 + v101) >> 15;
        if (v107 >= 255)
          LOBYTE(v107) = -1;
        if (v102 + v101 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + v103;
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v31 = -1;
        v31[1] = v106;
        v31[2] = v108;
        v31[3] = v111;
        v112 = 38155 * *v29 - 610480;
        v113 = v112 + v104;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v112 + v102;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v112 + v103;
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        *v30 = -1;
        v30[1] = v115;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v30[2] = v118;
        v30[3] = v121;
      }
      v6 = (uint8x8_t *)((char *)v6 + v169);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v168;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v122 = 1;
      else
        v122 = v9;
      do
      {
        v123 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v124 = v123 - 128;
        v125 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v126 = v6->u8[0];
        v127 = v6->u8[1];
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v128 = 38155 * v126 - 610480;
        v129 = -6987 * v124 - 17461 * (v125 - 128);
        v130 = 69219 * v124;
        v131 = 58745 * (v125 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38155 * v127 - 610480;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v122;
      }
      while (v122);
    }
    if ((a1 & 1) != 0)
    {
      v149 = v7->u8[0] - 128;
      v150 = v8->u8[0] - 128;
      v151 = 38155 * v6->u8[0] - 610480;
      v152 = -6987 * v149 - 17461 * v150;
      v153 = v151 + 58745 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 69219 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  char v84;
  int v85;
  int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int8x8x4_t v173;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v167 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v171 = 4 * (a1 >> 3);
    v172 = v13;
    v170 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v165 = v12;
    v166 = a1 >> 1;
    v17 = &v7[v12];
    v163 = v6 - 4 * (a1 >> 3);
    v164 = v16;
    v18 = vdupq_n_s32(0xFFFFE4B5);
    v19 = vdupq_n_s32(0xFFFFBBCB);
    v20 = vdupq_n_s32(0x10E63u);
    v21 = vdupq_n_s32(0xE579u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v164;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v165];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v171)
      {
        v168 = v11;
        v169 = v9;
        v56 = v163;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38155 * *v31 - 610480;
          v61 = -6987 * v58 - 17461 * (v59 - 128);
          v62 = 69219 * v58;
          v63 = 58745 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38155 * v31[1] - 610480;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v31 += 2;
          *v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          v78 = *v26;
          v79 = v26[1];
          v26 += 2;
          v80 = 38155 * v78 - 610480;
          v81 = (v80 + v63) >> 15;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v80 + v63 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = (v80 + v61) >> 15;
          if (v83 >= 255)
            LOBYTE(v83) = -1;
          if (v80 + v61 >= 0)
            v84 = v83;
          else
            v84 = 0;
          v85 = v80 + v62;
          v86 = v85 >> 15;
          if (v85 >> 15 >= 255)
            LOBYTE(v86) = -1;
          if (v85 >= 0)
            v87 = v86;
          else
            v87 = 0;
          v88 = 38155 * v79 - 610480;
          v89 = v88 + v63;
          v90 = (v88 + v63) >> 15;
          if (v90 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v88 + v61;
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v88 + v62;
          v95 = v94 >> 15;
          *v27 = -1;
          v27[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v166;
        a1 = v167;
        v11 = v168;
        v9 = v169;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v30 - 128;
        v99 = *v29 - 128;
        v100 = 38155 * *v31 - 610480;
        v101 = -6987 * v98 - 17461 * v99;
        v102 = 69219 * v98;
        v103 = 58745 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        v111 = 38155 * *v26 - 610480;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        *v27 = -1;
        v27[1] = v114;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v121 = 1;
      else
        v121 = v6;
      do
      {
        v122 = *v8;
        v8 += 2;
        v123 = v122 - 128;
        v124 = *v9;
        v125 = *v7;
        v126 = v9 + 2;
        v127 = v7[1];
        v7 += 2;
        v128 = 38155 * v125 - 610480;
        v129 = -6987 * v123 - 17461 * (v124 - 128);
        v130 = 69219 * v123;
        v131 = 58745 * (v124 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38155 * v127 - 610480;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if ((a1 & 1) != 0)
    {
      v149 = *v8 - 128;
      v150 = *v9 - 128;
      v151 = 38155 * *v7 - 610480;
      v152 = -6987 * v149 - 17461 * v150;
      v153 = v151 + 58745 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 69219 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU709_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  char v144;
  char v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  char v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int8x8x4_t v168;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v167 = 4 * (a1 >> 3);
    v166 = 2 * *a3;
    v165 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFE4B5);
    v22 = vdupq_n_s32(0xFFFFBBCB);
    v23 = vdupq_n_s32(0x10E63u);
    v24 = vdupq_n_s32(0xE579u);
    v25 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v27 = -1;
    v28.i32[1] = 0;
    v162 = a1 >> 1;
    v163 = a1;
    v160 = a3[2];
    v161 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip1q_s32(v39, v39);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip2q_s32(v41, v41);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v168.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v50, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v168.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          vst4_s8(v31, *(int8x8x4_t *)(&v27 - 3));
          v31 += 32;
          v168.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v168.val[3] = (int8x8_t)-1;
          vst4_s8(v36, v168);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v167)
      {
        v164 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38155 * v34->u8[0] - 610480;
          v62 = -6987 * v58 - 17461 * v59;
          v63 = 69219 * v58;
          v64 = 58745 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38155 * v60 - 610480;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = v70;
          v31[1] = v67;
          v31[2] = v66;
          v31[3] = -1;
          v31[5] = v77;
          v31[6] = v73;
          v31[4] = v79;
          v31[7] = -1;
          v31 += 8;
          v80 = v29[1];
          v81 = 38155 * *v29 - 610480;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38155 * v80 - 610480;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          v30[1] = v85;
          *v30 = v88;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v83;
          v30[3] = -1;
          if (v96 < 0)
            v97 = 0;
          v30[4] = v97;
          v30[5] = v95;
          v30[6] = v92;
          v30[7] = -1;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v162;
        a1 = v163;
        v11 = v164;
        v14 = v160;
        v12 = v161;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v33 - 128;
        v99 = *v32 - 128;
        v100 = 38155 * v34->u8[0] - 610480;
        v101 = -6987 * v98 - 17461 * v99;
        v102 = 69219 * v98;
        v103 = 58745 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v31 = v110;
        v31[1] = v107;
        v31[2] = v105;
        v31[3] = -1;
        v111 = 38155 * *v29 - 610480;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        *v30 = v120;
        v30[1] = v117;
        v30[2] = v114;
        v30[3] = -1;
      }
      v6 = (uint8x8_t *)((char *)v6 + v166);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v165;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v121 = 1;
      else
        v121 = v9;
      do
      {
        v122 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v123 = v122 - 128;
        v124 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v125 = 38155 * v6->u8[0] - 610480;
        v126 = -6987 * v123 - 17461 * (v124 - 128);
        v127 = 69219 * v123;
        v128 = 58745 * (v124 - 128);
        v129 = (v125 + v128) >> 15;
        if (v129 >= 255)
          LOBYTE(v129) = -1;
        if (v125 + v128 >= 0)
          v130 = v129;
        else
          v130 = 0;
        v131 = (v126 + v125) >> 15;
        if (v131 >= 255)
          LOBYTE(v131) = -1;
        if (v126 + v125 >= 0)
          v132 = v131;
        else
          v132 = 0;
        v133 = v125 + v127;
        v134 = v133 >> 15;
        if (v133 >> 15 >= 255)
          LOBYTE(v134) = -1;
        if (v133 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = 38155 * v6->u8[1] - 610480;
        v137 = v136 + v128;
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v136 + v126;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v136 + v127;
        *v10 = v135;
        v10[1] = v132;
        if (v143 >> 15 >= 255)
          v144 = -1;
        else
          v144 = v143 >> 15;
        v10[2] = v130;
        v10[3] = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v10[4] = v145;
        v10[5] = v142;
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v139;
        v10[7] = -1;
        v10 += 8;
        --v121;
      }
      while (v121);
    }
    if ((a1 & 1) != 0)
    {
      v146 = v7->u8[0] - 128;
      v147 = v8->u8[0] - 128;
      v148 = 38155 * v6->u8[0] - 610480;
      v149 = -6987 * v146 - 17461 * v147;
      v150 = v148 + 58745 * v147;
      v151 = v150 >> 15;
      if (v150 >> 15 >= 255)
        LOBYTE(v151) = -1;
      if (v150 >= 0)
        v152 = v151;
      else
        v152 = 0;
      v153 = v149 + v148;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v148 + 69219 * v146;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      *v10 = v158;
      v10[1] = v155;
      v10[2] = v152;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  char v89;
  int v90;
  int v91;
  char v92;
  int v93;
  char v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  char v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  char v129;
  int v130;
  char v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  int v142;
  char v143;
  char v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  char v151;
  int v152;
  int v153;
  char v154;
  int v155;
  int v156;
  char v157;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int8x8x4_t v169;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v163 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v167 = 4 * (a1 >> 3);
    v168 = v13;
    v166 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v161 = v12;
    v162 = a1 >> 1;
    v17 = &v7[v12];
    v159 = v6 - 4 * (a1 >> 3);
    v160 = v16;
    v18 = vdupq_n_s32(0xFFFFE4B5);
    v19 = vdupq_n_s32(0xFFFFBBCB);
    v20 = vdupq_n_s32(0x10E63u);
    v21 = vdupq_n_s32(0xE579u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v160;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v161];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v167)
      {
        v164 = v11;
        v165 = v9;
        v56 = v159;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38155 * *v31 - 610480;
          v61 = -6987 * v58 - 17461 * (v59 - 128);
          v62 = 69219 * v58;
          v63 = 58745 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38155 * v31[1] - 610480;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          v78 = 38155 * *v26 - 610480;
          v31 += 2;
          v79 = (v78 + v63) >> 15;
          if (v79 >= 255)
            LOBYTE(v79) = -1;
          v80 = v78 + v61;
          if (v78 + v63 < 0)
            LOBYTE(v79) = 0;
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          v82 = v78 + v62;
          if (v80 >= 0)
            v83 = v81;
          else
            v83 = 0;
          v84 = v82 >> 15;
          if (v82 >> 15 >= 255)
            LOBYTE(v84) = -1;
          v67 = v82 < 0;
          v85 = 38155 * v26[1] - 610480;
          if (v67)
            v86 = 0;
          else
            v86 = v84;
          v87 = v85 + v63;
          v88 = (v85 + v63) >> 15;
          if (v88 >= 255)
            LOBYTE(v88) = -1;
          if (v87 >= 0)
            v89 = v88;
          else
            v89 = 0;
          v90 = v85 + v61;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v85 + v62;
          *v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255)
            v94 = -1;
          else
            v94 = v93 >> 15;
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v162;
        a1 = v163;
        v11 = v164;
        v9 = v165;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v96 = *v30 - 128;
        v97 = *v29 - 128;
        v98 = 38155 * *v31 - 610480;
        v99 = -6987 * v96 - 17461 * v97;
        v100 = 69219 * v96;
        v101 = 58745 * v97;
        v102 = (v98 + v101) >> 15;
        if (v102 >= 255)
          LOBYTE(v102) = -1;
        if (v98 + v101 >= 0)
          v103 = v102;
        else
          v103 = 0;
        v104 = (v99 + v98) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v99 + v98 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v98 + v100;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        *v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        v109 = 38155 * *v26 - 610480;
        v110 = v109 + v101;
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        v113 = v109 + v99;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v109 + v100;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        *v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v119 = 1;
      else
        v119 = v6;
      do
      {
        v120 = *v8;
        v8 += 2;
        v121 = v120 - 128;
        v122 = *v9;
        v123 = v9 + 2;
        v124 = 38155 * *v7 - 610480;
        v125 = -6987 * v121 - 17461 * (v122 - 128);
        v126 = 69219 * v121;
        v127 = 58745 * (v122 - 128);
        v128 = (v124 + v127) >> 15;
        if (v128 >= 255)
          LOBYTE(v128) = -1;
        if (v124 + v127 >= 0)
          v129 = v128;
        else
          v129 = 0;
        v130 = (v125 + v124) >> 15;
        if (v130 >= 255)
          LOBYTE(v130) = -1;
        if (v125 + v124 >= 0)
          v131 = v130;
        else
          v131 = 0;
        v132 = v124 + v126;
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = 38155 * v7[1] - 610480;
        v136 = v135 + v127;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = v135 + v125;
        v140 = v139 >> 15;
        if (v139 >> 15 >= 255)
          LOBYTE(v140) = -1;
        if (v139 >= 0)
          v141 = v140;
        else
          v141 = 0;
        v142 = v135 + v126;
        *v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255)
          v143 = -1;
        else
          v143 = v142 >> 15;
        v9 = v123;
        v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0)
          v144 = v143;
        else
          v144 = 0;
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if ((a1 & 1) != 0)
    {
      v145 = *v8 - 128;
      v146 = *v9 - 128;
      v147 = 38155 * *v7 - 610480;
      v148 = -6987 * v145 - 17461 * v146;
      v149 = v147 + 58745 * v146;
      v150 = v149 >> 15;
      if (v149 >> 15 >= 255)
        LOBYTE(v150) = -1;
      if (v149 >= 0)
        v151 = v150;
      else
        v151 = 0;
      v152 = v148 + v147;
      v153 = v152 >> 15;
      if (v152 >> 15 >= 255)
        LOBYTE(v153) = -1;
      if (v152 >= 0)
        v154 = v153;
      else
        v154 = 0;
      v155 = v147 + 69219 * v145;
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      *v10 = v157;
      v10[1] = v154;
      v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  int16x8_t v12;
  int32x4_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int32x4_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  char *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  int32x4_t v65;
  __int32 v66;
  int v67;
  int32x4_t v68;
  int32x4_t v69;
  char v70;
  int v71;
  int v72;
  char v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x8_t v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  int v94;
  char v95;
  int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  int v101;
  char v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  uint64_t v109;
  int32x4_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int32x2_t v116;
  int32x4_t v117;
  int v118;
  int v119;
  int v120;
  int32x4_t v121;
  char v122;
  int32x4_t v123;
  int8x8_t v124;
  int16x8_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int8x8x3_t v149;
  int8x8x3_t v150;

  v14 = a1 >> 1;
  v16 = *a4;
  v15 = a4[1];
  v17 = v15 + 1;
  v18 = *a6;
  if (a2 >= 2)
  {
    v19 = 0;
    v21 = *a3;
    v20 = a3[1];
    v22 = *a5;
    v23 = a2 >> 1;
    v147 = 2 * v21;
    v148 = 4 * (a1 >> 3);
    v146 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v24 = 1;
    else
      v24 = a1 >> 3;
    v143 = v21;
    v25 = &v16[v21];
    v140 = v14 - 4 * (a1 >> 3);
    v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6AF50);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    v28 = vdupq_n_s32(0xFFFFE4B5);
    a12 = vdupq_n_s32(0xFFFFBBCB);
    v29 = vdupq_n_s32(0x10E63u);
    v30 = vdupq_n_s32(0xE579u);
    v31 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    v32 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    v144 = a1 >> 1;
    v145 = a1;
    v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        v39 = 0;
        v40 = v141;
        v35 = v18;
        do
        {
          v41 = *(int8x8_t *)&v15[v39];
          v42 = &v35[v22];
          v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          v46 = vmulq_s32(v43, v29);
          v47 = vmulq_s32(v44, v30);
          v13 = vzip1q_s32(v46, v46);
          v48 = vzip2q_s32(v46, v46);
          v49 = vzip1q_s32(v47, v47);
          v50 = vzip1q_s32(v45, v45);
          v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          v54 = vzip2q_s32(v47, v47);
          v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          v57 = vzip2q_s32(v45, v45);
          v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        v38 = &v16[v39];
        v33 = &v25[v39];
        v37 = &v15[v39];
        v36 = &v15[v39 + 1];
        v34 = &v35[v22];
      }
      else
      {
        v33 = &v16[v143];
        v34 = &v18[v22];
        v35 = v18;
        v36 = v17;
        v37 = v15;
        v38 = v16;
      }
      if (v14 > v148)
      {
        v59 = 0;
        v60 = v140;
        do
        {
          v61 = &v33[v59];
          v62 = v37[v59] - 128;
          v63 = 58745 * (v36[v59] - 128);
          v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          v65 = a7;
          v65.i32[0] = -6987 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x950BFFFFBBCBLL);
          v66 = v65.i32[0];
          v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38155 * v38[v59] - 610480;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v13.i32[0] = 38155 * v38[v59] - 610480;
          v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0)
            v70 = v67;
          else
            v70 = 0;
          v71 = 69219 * v62;
          v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255)
            v73 = -1;
          else
            v73 = v72;
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0)
            v73 = 0;
          v74 = vaddq_s32(v69, v68);
          v75 = vcltzq_s32(v74);
          v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38155 * *v61 - 610480;
          v77 = 38155 * v61[1] - 610480;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          v79 = vaddq_s32(v13, v78);
          v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v77 + v66 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          *(_DWORD *)v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        v14 = v144;
        a1 = v145;
        v23 = a2 >> 1;
        v20 = v142;
      }
      if ((a1 & 1) != 0)
      {
        v86 = *v37 - 128;
        v87 = *v36 - 128;
        v88 = 38155 * *v38 - 610480;
        v89 = -6987 * v86 - 17461 * v87;
        v90 = 69219 * v86;
        v91 = 58745 * v87;
        v92 = (v88 + v91) >> 15;
        if (v92 >= 255)
          LOBYTE(v92) = -1;
        if (v88 + v91 >= 0)
          v93 = v92;
        else
          v93 = 0;
        v94 = (v89 + v88) >> 15;
        if (v94 >= 255)
          LOBYTE(v94) = -1;
        if (v89 + v88 >= 0)
          v95 = v94;
        else
          v95 = 0;
        v96 = v88 + v90;
        v97 = v96 >> 15;
        if (v96 >> 15 >= 255)
          LOBYTE(v97) = -1;
        if (v96 >= 0)
          v98 = v97;
        else
          v98 = 0;
        *v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        v99 = 38155 * *v33 - 610480;
        v100 = v99 + v91;
        v101 = v100 >> 15;
        if (v100 >> 15 >= 255)
          LOBYTE(v101) = -1;
        if (v100 >= 0)
          v102 = v101;
        else
          v102 = 0;
        v103 = v99 + v89;
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v99 + v90;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        *v34 = v102;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1)
        v109 = 1;
      else
        v109 = v14;
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        v112 = *v15;
        v15 += 2;
        v111 = v112;
        v113 = *v17;
        v17 += 2;
        v111 -= 128;
        v114 = v113 - 128;
        v115 = 58745 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        v117 = a8;
        v117.i32[0] = -6987 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x950BFFFFBBCBLL);
        a12.i32[0] = 38155 * *v16 - 610480;
        a12 = vzip1q_s32(a12, v117);
        v118 = 69219 * v111;
        v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255)
          LOBYTE(v119) = -1;
        v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0)
          LOBYTE(v119) = 0;
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255)
          v122 = -1;
        else
          v122 = (v117.i32[1] + v118) >> 15;
        v121.i32[3] = v115;
        v121.i32[1] = 38155 * *v16 - 610480;
        v121.i32[0] = 58745 * v114;
        v123 = vaddq_s32(a12, v121);
        v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0)
          v122 = 0;
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if ((a1 & 1) != 0)
    {
      v126 = *v15 - 128;
      v127 = *v17 - 128;
      v128 = 38155 * *v16 - 610480;
      v129 = -6987 * v126 - 17461 * v127;
      v130 = v128 + 58745 * v127;
      v131 = v130 >> 15;
      if (v130 >> 15 >= 255)
        LOBYTE(v131) = -1;
      if (v130 >= 0)
        v132 = v131;
      else
        v132 = 0;
      v133 = v129 + v128;
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v128 + 69219 * v126;
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      *v18 = v132;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  int v135;
  char v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  int v160;
  int v161;
  char v162;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int8x8x4_t v175;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v164 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v174 = a2 >> 1;
    v173 = 4 * (a1 >> 3);
    v172 = 2 * *a3;
    v171 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v168 = *a3;
    v169 = a1 >> 1;
    v16 = &v6[*a3];
    v165 = (a1 >> 1) - 4 * (a1 >> 3);
    v166 = v15;
    v17 = vdupq_n_s32(0xFFFFE807);
    v18 = vdupq_n_s32(0xFFFFC416);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xED84u);
    v21 = vdupq_n_s32(0xC993u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v166;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v168];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v173)
      {
        v54 = v165;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -6137 * v55 - 15338 * (v57 - 128);
          v61 = 60804 * v55;
          v62 = 51603 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          v78 = *v23;
          v79 = v23[1];
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          if (v92 >= 0)
            v94 = v93;
          else
            v94 = 0;
          v95 = v61 + (v79 << 15);
          *v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255)
            LOBYTE(v96) = -1;
          else
            v96 = v95 >> 15;
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0)
            LOBYTE(v96) = 0;
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v169;
        v10 = a1;
        v13 = v167;
      }
      if ((v10 & 1) != 0)
      {
        v97 = *v27 - 128;
        v98 = *v26 - 128;
        v99 = *v28;
        v100 = -6137 * v97 - 15338 * v98;
        v101 = 60804 * v97;
        v102 = 51603 * v98;
        v103 = v102 + (v99 << 15);
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v100 + (v99 << 15);
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + (v99 << 15);
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        v112 = *v23;
        v113 = v102 + (v112 << 15);
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v100 + (v112 << 15);
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v101 + (v112 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        *v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v164 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v122 = 1;
      else
        v122 = v11;
      do
      {
        v123 = *v7;
        v7 += 2;
        v124 = v123 - 128;
        v125 = *v8;
        v8 += 2;
        v126 = *v6;
        v127 = v6[1];
        v128 = -6137 * v124 - 15338 * (v125 - 128);
        v129 = 60804 * v124;
        v130 = 51603 * (v125 - 128);
        v131 = v130 + (v126 << 15);
        v132 = v131 >> 15;
        if (v131 >> 15 >= 255)
          LOBYTE(v132) = -1;
        if (v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = v128 + (v126 << 15);
        v135 = v134 >> 15;
        if (v134 >> 15 >= 255)
          LOBYTE(v135) = -1;
        if (v134 >= 0)
          v136 = v135;
        else
          v136 = 0;
        v137 = v129 + (v126 << 15);
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v130 + (v127 << 15);
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v128 + (v127 << 15);
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v129 + (v127 << 15);
        *v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        else
          v147 = v146 >> 15;
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v149 = *v7 - 128;
      v150 = *v8 - 128;
      v151 = *v6;
      v152 = -6137 * v149 - 15338 * v150;
      v153 = 60804 * v149;
      v154 = 51603 * v150 + (v151 << 15);
      v155 = v154 >> 15;
      if (v154 >> 15 >= 255)
        LOBYTE(v155) = -1;
      if (v154 >= 0)
        v156 = v155;
      else
        v156 = 0;
      v157 = v152 + (v151 << 15);
      v158 = v157 >> 15;
      if (v157 >> 15 >= 255)
        LOBYTE(v158) = -1;
      if (v157 >= 0)
        v159 = v158;
      else
        v159 = 0;
      v160 = v153 + (v151 << 15);
      v161 = v160 >> 15;
      if (v160 >> 15 >= 255)
        LOBYTE(v161) = -1;
      if (v160 >= 0)
        v162 = v161;
      else
        v162 = 0;
      *v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  int v108;
  char v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  char v116;
  int v117;
  int v118;
  char v119;
  int v120;
  int v121;
  char v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  char v137;
  int v138;
  int v139;
  char v140;
  int v141;
  int v142;
  char v143;
  int v144;
  int v145;
  char v146;
  int v147;
  int v148;
  char v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  char v157;
  int v158;
  int v159;
  char v160;
  int v161;
  int v162;
  char v163;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int8x8x4_t v176;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v165 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v175 = a2 >> 1;
    v174 = 4 * (a1 >> 3);
    v173 = 2 * *a3;
    v172 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v169 = *a3;
    v170 = a1 >> 1;
    v16 = &v6[*a3];
    v166 = (a1 >> 1) - 4 * (a1 >> 3);
    v167 = v15;
    v17 = vdupq_n_s32(0xFFFFE807);
    v18 = vdupq_n_s32(0xFFFFC416);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xED84u);
    v21 = vdupq_n_s32(0xC993u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v167;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v169];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v174)
      {
        v54 = v166;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -6137 * v55 - 15338 * (v57 - 128);
          v61 = 60804 * v55;
          v62 = 51603 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          v78 = *v23;
          v25 += 8;
          v79 = v23[1];
          v23 += 2;
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v61 + (v79 << 15);
          v95 = v94 >> 15;
          *v24 = -1;
          v24[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v170;
        v10 = a1;
        v13 = v168;
      }
      if ((v10 & 1) != 0)
      {
        v98 = *v27 - 128;
        v99 = *v26 - 128;
        v100 = *v28;
        v101 = -6137 * v98 - 15338 * v99;
        v102 = 60804 * v98;
        v103 = 51603 * v99;
        v104 = v103 + (v100 << 15);
        v105 = v104 >> 15;
        if (v104 >> 15 >= 255)
          LOBYTE(v105) = -1;
        if (v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = v101 + (v100 << 15);
        v108 = v107 >> 15;
        if (v107 >> 15 >= 255)
          LOBYTE(v108) = -1;
        if (v107 >= 0)
          v109 = v108;
        else
          v109 = 0;
        v110 = v102 + (v100 << 15);
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        *v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        v113 = *v23;
        v114 = v103 + (v113 << 15);
        v115 = v114 >> 15;
        if (v114 >> 15 >= 255)
          LOBYTE(v115) = -1;
        if (v114 >= 0)
          v116 = v115;
        else
          v116 = 0;
        v117 = v101 + (v113 << 15);
        v118 = v117 >> 15;
        if (v117 >> 15 >= 255)
          LOBYTE(v118) = -1;
        if (v117 >= 0)
          v119 = v118;
        else
          v119 = 0;
        v120 = v102 + (v113 << 15);
        v121 = v120 >> 15;
        if (v120 >> 15 >= 255)
          LOBYTE(v121) = -1;
        *v24 = -1;
        v24[1] = v116;
        if (v120 >= 0)
          v122 = v121;
        else
          v122 = 0;
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v165 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v123 = 1;
      else
        v123 = v11;
      do
      {
        v124 = *v7;
        v7 += 2;
        v125 = v124 - 128;
        v126 = *v8;
        v8 += 2;
        v127 = *v6;
        v128 = v6[1];
        v6 += 2;
        v129 = -6137 * v125 - 15338 * (v126 - 128);
        v130 = 60804 * v125;
        v131 = 51603 * (v126 - 128);
        v132 = v131 + (v127 << 15);
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = v129 + (v127 << 15);
        v136 = v135 >> 15;
        if (v135 >> 15 >= 255)
          LOBYTE(v136) = -1;
        if (v135 >= 0)
          v137 = v136;
        else
          v137 = 0;
        v138 = v130 + (v127 << 15);
        v139 = v138 >> 15;
        if (v138 >> 15 >= 255)
          LOBYTE(v139) = -1;
        if (v138 >= 0)
          v140 = v139;
        else
          v140 = 0;
        v141 = v131 + (v128 << 15);
        v142 = v141 >> 15;
        if (v141 >> 15 >= 255)
          LOBYTE(v142) = -1;
        if (v141 >= 0)
          v143 = v142;
        else
          v143 = 0;
        v144 = v129 + (v128 << 15);
        v145 = v144 >> 15;
        if (v144 >> 15 >= 255)
          LOBYTE(v145) = -1;
        if (v144 >= 0)
          v146 = v145;
        else
          v146 = 0;
        v147 = v130 + (v128 << 15);
        v148 = v147 >> 15;
        *v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255)
          LOBYTE(v148) = -1;
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0)
          v149 = v148;
        else
          v149 = 0;
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v150 = *v7 - 128;
      v151 = *v8 - 128;
      v152 = *v6;
      v153 = -6137 * v150 - 15338 * v151;
      v154 = 60804 * v150;
      v155 = 51603 * v151 + (v152 << 15);
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      v158 = v153 + (v152 << 15);
      v159 = v158 >> 15;
      if (v158 >> 15 >= 255)
        LOBYTE(v159) = -1;
      if (v158 >= 0)
        v160 = v159;
      else
        v160 = 0;
      v161 = v154 + (v152 << 15);
      v162 = v161 >> 15;
      if (v161 >> 15 >= 255)
        LOBYTE(v162) = -1;
      *v9 = -1;
      v9[1] = v157;
      if (v161 >= 0)
        v163 = v162;
      else
        v163 = 0;
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int32x4_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unsigned __int8 *v22;
  char *v23;
  char *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  char *v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  __int32 v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int8x8_t v70;
  int16x8_t v71;
  char v72;
  int v73;
  __int32 v74;
  int v75;
  int v76;
  int v77;
  int32x4_t v78;
  char v79;
  int32x4_t v80;
  int8x8_t v81;
  int16x8_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  char v101;
  int v102;
  int v103;
  char v104;
  int v105;
  int v106;
  char v107;
  uint64_t v108;
  int32x4_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  __int32 v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  char v121;
  int v122;
  int32x4_t v123;
  char v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int8x8x3_t v153;
  int8x8x3_t v154;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v148 = a1;
  v143 = a2;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = a3[1];
    v13 = *a5;
    v152 = a2 >> 1;
    v151 = 4 * (a1 >> 3);
    v150 = 2 * *a3;
    v149 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v14 = 1;
    else
      v14 = a1 >> 3;
    v146 = a3[1];
    v147 = *a3;
    v15 = &v6[*a3];
    v144 = (a1 >> 1) - 4 * (a1 >> 3);
    v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    v18 = vdupq_n_s32(0xFFFFE807);
    v19 = vdupq_n_s32(0xFFFFC416);
    v20 = vdupq_n_s32(0xED84u);
    v21 = vdupq_n_s32(0xC993u);
    v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        v28 = 0;
        v29 = v145;
        v24 = v9;
        do
        {
          v30 = *(int8x8_t *)&v7[v28];
          v31 = &v24[v13];
          v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          v35 = vmulq_s32(v32, v20);
          v36 = vmulq_s32(v33, v21);
          v37 = vzip1q_s32(v35, v35);
          v38 = vzip2q_s32(v35, v35);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v34, v34);
          v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v47 = vzip2q_s32(v34, v34);
          v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        v27 = &v6[v28];
        v22 = &v15[v28];
        v26 = &v7[v28];
        v25 = &v7[v28 + 1];
        v23 = &v24[v13];
      }
      else
      {
        v22 = &v6[v147];
        v23 = &v9[v13];
        v24 = v9;
        v25 = v8;
        v26 = v7;
        v27 = v6;
      }
      if (v10 > v151)
      {
        v49 = v10;
        v50 = v144;
        do
        {
          v52 = *v26;
          v26 += 2;
          v51 = v52;
          v53 = *v25;
          v25 += 2;
          v51 -= 128;
          v54 = *v27;
          v55 = v27[1];
          v27 += 2;
          v56 = v54 << 15;
          v57 = -6137 * v51 - 15338 * (v53 - 128);
          v58 = 60804 * v51;
          v59 = 51603 * (v53 - 128);
          v60 = v55 << 15;
          v61 = v57 + (v55 << 15);
          v62 = v61 >> 15;
          if (v61 >> 15 >= 255)
            LOBYTE(v62) = -1;
          v63 = v61 < 0;
          v64 = v58 + (v55 << 15);
          v65 = v64 >> 15;
          if (v63)
            LOBYTE(v62) = 0;
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          v69 = vaddq_s32(v67, v68);
          v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0)
            v72 = v65;
          else
            v72 = 0;
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          v73 = v22[1];
          v74 = v73 << 15;
          v75 = v57 + (v73 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          v77 = v58 + (v73 << 15);
          if (v75 < 0)
            LOBYTE(v76) = 0;
          v66.i32[1] = *v22 << 15;
          v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255)
            v79 = -1;
          else
            v79 = v77 >> 15;
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          v80 = vaddq_s32(v66, v78);
          v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0)
            v79 = 0;
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        v10 = v49;
        v12 = v146;
      }
      if ((a1 & 1) != 0)
      {
        v83 = *v26 - 128;
        v84 = *v25 - 128;
        v85 = *v27;
        v86 = -6137 * v83 - 15338 * v84;
        v87 = 60804 * v83;
        v88 = 51603 * v84;
        v89 = v88 + (v85 << 15);
        v90 = v89 >> 15;
        if (v89 >> 15 >= 255)
          LOBYTE(v90) = -1;
        if (v89 >= 0)
          v91 = v90;
        else
          v91 = 0;
        v92 = v86 + (v85 << 15);
        v93 = v92 >> 15;
        if (v92 >> 15 >= 255)
          LOBYTE(v93) = -1;
        if (v92 >= 0)
          v94 = v93;
        else
          v94 = 0;
        v95 = v87 + (v85 << 15);
        v96 = v95 >> 15;
        if (v95 >> 15 >= 255)
          LOBYTE(v96) = -1;
        if (v95 >= 0)
          v97 = v96;
        else
          v97 = 0;
        *v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        v98 = *v22;
        v99 = v88 + (v98 << 15);
        v100 = v99 >> 15;
        if (v99 >> 15 >= 255)
          LOBYTE(v100) = -1;
        if (v99 >= 0)
          v101 = v100;
        else
          v101 = 0;
        v102 = v86 + (v98 << 15);
        v103 = v102 >> 15;
        if (v102 >> 15 >= 255)
          LOBYTE(v103) = -1;
        if (v102 >= 0)
          v104 = v103;
        else
          v104 = 0;
        v105 = v87 + (v98 << 15);
        v106 = v105 >> 15;
        if (v105 >> 15 >= 255)
          LOBYTE(v106) = -1;
        *v23 = v101;
        if (v105 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    v10 = a1 >> 1;
  }
  if ((v143 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1)
        v108 = 1;
      else
        v108 = v10;
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        v110 = *v7;
        v7 += 2;
        v111 = v110 - 128;
        v112 = *v8;
        v8 += 2;
        v113 = v6[1];
        v114 = -6137 * v111;
        v115 = 60804 * v111;
        v116 = v114 - 15338 * (v112 - 128);
        v117 = 51603 * (v112 - 128);
        v118 = v113 << 15;
        v119 = v116 + (v113 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255)
          v124 = -1;
        else
          v124 = v122 >> 15;
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0)
          v124 = 0;
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if ((a1 & 1) != 0)
    {
      v128 = *v7 - 128;
      v129 = *v8 - 128;
      v130 = *v6;
      v131 = -6137 * v128 - 15338 * v129;
      v132 = 60804 * v128;
      v133 = 51603 * v129 + (v130 << 15);
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v131 + (v130 << 15);
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v139 = v132 + (v130 << 15);
      v140 = v139 >> 15;
      if (v139 >> 15 >= 255)
        LOBYTE(v140) = -1;
      *v9 = v135;
      if (v139 >= 0)
        v141 = v140;
      else
        v141 = 0;
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU2020_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  char v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int8x8x4_t v171;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v170 = 4 * (a1 >> 3);
    v169 = 2 * *a3;
    v168 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFE7F5);
    v22 = vdupq_n_s32(0xFFFFAC81);
    v23 = vdupq_n_s32(0x112F4u);
    v24 = vdupq_n_s32(0xD781u);
    v25 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    v27 = -1;
    v28.i32[1] = 0;
    v165 = a1 >> 1;
    v166 = a1;
    v163 = a3[2];
    v164 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip2q_s32(v41, v41);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip1q_s32(v39, v39);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v171.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v47, v49), 0xFuLL));
          v171.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v47, v52), 0xFuLL));
          v171.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v171.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v171);
          v31 += 32;
          vst4_s8(v36, *(int8x8x4_t *)&v27);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v170)
      {
        v167 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38267 * v34->u8[0] - 612272;
          v62 = -6155 * v58 - 21375 * v59;
          v63 = 70388 * v58;
          v64 = 55169 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38267 * v60 - 612272;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = -1;
          v31[1] = v66;
          v31[2] = v67;
          v31[3] = v70;
          v31[4] = -1;
          v31[5] = v73;
          v31[6] = v77;
          v31[7] = v79;
          v31 += 8;
          v80 = v29[1];
          v81 = 38267 * *v29 - 612272;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38267 * v80 - 612272;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          *v30 = -1;
          v30[1] = v83;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v85;
          v30[3] = v88;
          v30[4] = -1;
          if (v96 >= 0)
            v98 = v97;
          else
            v98 = 0;
          v30[5] = v92;
          v30[6] = v95;
          v30[7] = v98;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v165;
        a1 = v166;
        v11 = v167;
        v14 = v163;
        v12 = v164;
      }
      if ((a1 & 1) != 0)
      {
        v99 = *v33 - 128;
        v100 = *v32 - 128;
        v101 = 38267 * v34->u8[0] - 612272;
        v102 = -6155 * v99 - 21375 * v100;
        v103 = 70388 * v99;
        v104 = 55169 * v100;
        v105 = (v101 + v104) >> 15;
        if (v105 >= 255)
          LOBYTE(v105) = -1;
        if (v101 + v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = (v102 + v101) >> 15;
        if (v107 >= 255)
          LOBYTE(v107) = -1;
        if (v102 + v101 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + v103;
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v31 = -1;
        v31[1] = v106;
        v31[2] = v108;
        v31[3] = v111;
        v112 = 38267 * *v29 - 612272;
        v113 = v112 + v104;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v112 + v102;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v112 + v103;
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        *v30 = -1;
        v30[1] = v115;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v30[2] = v118;
        v30[3] = v121;
      }
      v6 = (uint8x8_t *)((char *)v6 + v169);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v168;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v122 = 1;
      else
        v122 = v9;
      do
      {
        v123 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v124 = v123 - 128;
        v125 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v126 = v6->u8[0];
        v127 = v6->u8[1];
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v128 = 38267 * v126 - 612272;
        v129 = -6155 * v124 - 21375 * (v125 - 128);
        v130 = 70388 * v124;
        v131 = 55169 * (v125 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38267 * v127 - 612272;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v122;
      }
      while (v122);
    }
    if ((a1 & 1) != 0)
    {
      v149 = v7->u8[0] - 128;
      v150 = v8->u8[0] - 128;
      v151 = 38267 * v6->u8[0] - 612272;
      v152 = -6155 * v149 - 21375 * v150;
      v153 = v151 + 55169 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 70388 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  char v84;
  int v85;
  int v86;
  char v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  char v161;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int8x8x4_t v173;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v167 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v171 = 4 * (a1 >> 3);
    v172 = v13;
    v170 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v165 = v12;
    v166 = a1 >> 1;
    v17 = &v7[v12];
    v163 = v6 - 4 * (a1 >> 3);
    v164 = v16;
    v18 = vdupq_n_s32(0xFFFFE7F5);
    v19 = vdupq_n_s32(0xFFFFAC81);
    v20 = vdupq_n_s32(0x112F4u);
    v21 = vdupq_n_s32(0xD781u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v164;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v165];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v171)
      {
        v168 = v11;
        v169 = v9;
        v56 = v163;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38267 * *v31 - 612272;
          v61 = -6155 * v58 - 21375 * (v59 - 128);
          v62 = 70388 * v58;
          v63 = 55169 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38267 * v31[1] - 612272;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v31 += 2;
          *v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          v78 = *v26;
          v79 = v26[1];
          v26 += 2;
          v80 = 38267 * v78 - 612272;
          v81 = (v80 + v63) >> 15;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v80 + v63 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = (v80 + v61) >> 15;
          if (v83 >= 255)
            LOBYTE(v83) = -1;
          if (v80 + v61 >= 0)
            v84 = v83;
          else
            v84 = 0;
          v85 = v80 + v62;
          v86 = v85 >> 15;
          if (v85 >> 15 >= 255)
            LOBYTE(v86) = -1;
          if (v85 >= 0)
            v87 = v86;
          else
            v87 = 0;
          v88 = 38267 * v79 - 612272;
          v89 = v88 + v63;
          v90 = (v88 + v63) >> 15;
          if (v90 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v88 + v61;
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v88 + v62;
          v95 = v94 >> 15;
          *v27 = -1;
          v27[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v166;
        a1 = v167;
        v11 = v168;
        v9 = v169;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v30 - 128;
        v99 = *v29 - 128;
        v100 = 38267 * *v31 - 612272;
        v101 = -6155 * v98 - 21375 * v99;
        v102 = 70388 * v98;
        v103 = 55169 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        v111 = 38267 * *v26 - 612272;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        *v27 = -1;
        v27[1] = v114;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v121 = 1;
      else
        v121 = v6;
      do
      {
        v122 = *v8;
        v8 += 2;
        v123 = v122 - 128;
        v124 = *v9;
        v125 = *v7;
        v126 = v9 + 2;
        v127 = v7[1];
        v7 += 2;
        v128 = 38267 * v125 - 612272;
        v129 = -6155 * v123 - 21375 * (v124 - 128);
        v130 = 70388 * v123;
        v131 = 55169 * (v124 - 128);
        v132 = (v128 + v131) >> 15;
        if (v132 >= 255)
          LOBYTE(v132) = -1;
        if (v128 + v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = (v129 + v128) >> 15;
        if (v134 >= 255)
          LOBYTE(v134) = -1;
        if (v129 + v128 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = v128 + v130;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = 38267 * v127 - 612272;
        v140 = v139 + v131;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v139 + v129;
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v139 + v130;
        v147 = v146 >> 15;
        *v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if ((a1 & 1) != 0)
    {
      v149 = *v8 - 128;
      v150 = *v9 - 128;
      v151 = 38267 * *v7 - 612272;
      v152 = -6155 * v149 - 21375 * v150;
      v153 = v151 + 55169 * v150;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v152 + v151;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      v159 = v151 + 70388 * v149;
      v160 = v159 >> 15;
      if (v159 >> 15 >= 255)
        LOBYTE(v160) = -1;
      *v10 = -1;
      v10[1] = v155;
      if (v159 >= 0)
        v161 = v160;
      else
        v161 = 0;
      v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU2020_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint64_t v27;
  uint8x8_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint8x8_t *v34;
  unint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  int v94;
  char v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  char v107;
  int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  char v144;
  char v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  char v152;
  int v153;
  int v154;
  char v155;
  int v156;
  int v157;
  char v158;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int8x8x4_t v168;

  v6 = *a4;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a1 >> 1;
  v10 = *a6;
  if (a2 >= 2)
  {
    v11 = 0;
    v13 = *a3;
    v12 = a3[1];
    v14 = a3[2];
    v15 = *a5;
    v167 = 4 * (a1 >> 3);
    v166 = 2 * *a3;
    v165 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v17 = 4 * v16;
    v18 = v9 - 4 * (a1 >> 3);
    v19.i32[1] = 0;
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = vdupq_n_s32(0xFFFFE7F5);
    v22 = vdupq_n_s32(0xFFFFAC81);
    v23 = vdupq_n_s32(0x112F4u);
    v24 = vdupq_n_s32(0xD781u);
    v25 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    v26 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    v27 = -1;
    v28.i32[1] = 0;
    v162 = a1 >> 1;
    v163 = a1;
    v160 = a3[2];
    v161 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        v35 = 0;
        v34 = v6;
        v31 = v10;
        do
        {
          v19.i32[0] = v7->i32[v35 / 4];
          v28.i32[0] = v8->i32[v35 / 4];
          v36 = &v31[v15];
          v37 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
          v38 = (int32x4_t)vaddw_u16(v20, (uint16x4_t)*(_OWORD *)&vmovl_u8(v28));
          v39 = vmlaq_s32(vmulq_s32(v37, v21), v38, v22);
          v40 = vmulq_s32(v37, v23);
          v41 = vmulq_s32(v38, v24);
          v42 = vzip1q_s32(v40, v40);
          v43 = vzip2q_s32(v40, v40);
          v44 = vzip1q_s32(v41, v41);
          v45 = vmovl_u8(*v34);
          v46 = vmovl_u8(*(uint8x8_t *)((char *)v34 + v13));
          v47 = vzip1q_s32(v39, v39);
          v48 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v25.i8);
          v49 = (int32x4_t)vmlal_high_u16(v26, v45, v25);
          v50 = vzip2q_s32(v41, v41);
          v51 = (int32x4_t)vmlal_u16(v26, *(uint16x4_t *)v46.i8, *(uint16x4_t *)v25.i8);
          v52 = (int32x4_t)vmlal_high_u16(v26, v46, v25);
          v53 = vzip2q_s32(v39, v39);
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v48), 0xFuLL), vaddq_s32(v53, v49), 0xFuLL));
          v168.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v44, v51), 0xFuLL), vaddq_s32(v50, v52), 0xFuLL));
          v56 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v43, v49), 0xFuLL));
          v168.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v47, v51), 0xFuLL), vaddq_s32(v53, v52), 0xFuLL));
          vst4_s8(v31, *(int8x8x4_t *)(&v27 - 3));
          v31 += 32;
          v168.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v51), 0xFuLL), vaddq_s32(v43, v52), 0xFuLL));
          v168.val[3] = (int8x8_t)-1;
          vst4_s8(v36, v168);
          ++v34;
          v35 += 4;
        }
        while (v17 != v35);
        v29 = (unsigned __int8 *)v34 + v13;
        v33 = (unsigned __int8 *)v7 + v35;
        v32 = (unsigned __int8 *)v8 + v35;
        v30 = &v31[v15];
      }
      else
      {
        v29 = (unsigned __int8 *)v6 + v13;
        v30 = &v10[v15];
        v31 = v10;
        v32 = (unsigned __int8 *)v8;
        v33 = (unsigned __int8 *)v7;
        v34 = v6;
      }
      if (v9 > v167)
      {
        v164 = v11;
        v57 = 0;
        do
        {
          v58 = v33[v57] - 128;
          v59 = v32[v57] - 128;
          v60 = v34->u8[1];
          v61 = 38267 * v34->u8[0] - 612272;
          v62 = -6155 * v58 - 21375 * v59;
          v63 = 70388 * v58;
          v64 = 55169 * v59;
          v65 = (v61 + v64) >> 15;
          v34 = (uint8x8_t *)((char *)v34 + 2);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          if (v61 + v64 >= 0)
            v66 = v65;
          else
            v66 = 0;
          v67 = (v62 + v61) >> 15;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v68 = v62 + v61 < 0;
          v69 = v61 + v63;
          v70 = v69 >> 15;
          if (v68)
            LOBYTE(v67) = 0;
          if (v70 >= 255)
            LOBYTE(v70) = -1;
          v68 = v69 < 0;
          v71 = 38267 * v60 - 612272;
          v72 = v71 + v64;
          if (v68)
            LOBYTE(v70) = 0;
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          v68 = v72 < 0;
          v74 = v71 + v62;
          if (v68)
            LOBYTE(v73) = 0;
          v75 = v74 >> 15;
          if (v74 >> 15 >= 255)
            LOBYTE(v75) = -1;
          v76 = v71 + v63;
          if (v74 >= 0)
            v77 = v75;
          else
            v77 = 0;
          v78 = v76 >> 15;
          if (v76 >> 15 >= 255)
            LOBYTE(v78) = -1;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = 0;
          *v31 = v70;
          v31[1] = v67;
          v31[2] = v66;
          v31[3] = -1;
          v31[5] = v77;
          v31[6] = v73;
          v31[4] = v79;
          v31[7] = -1;
          v31 += 8;
          v80 = v29[1];
          v81 = 38267 * *v29 - 612272;
          v29 += 2;
          v82 = (v81 + v64) >> 15;
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          if (v81 + v64 >= 0)
            v83 = v82;
          else
            v83 = 0;
          v84 = (v81 + v62) >> 15;
          if (v84 >= 255)
            LOBYTE(v84) = -1;
          if (v81 + v62 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v81 + v63;
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = 38267 * v80 - 612272;
          v90 = v89 + v64;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v89 + v62;
          v94 = v93 >> 15;
          if (v93 >> 15 >= 255)
            LOBYTE(v94) = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v96 = v89 + v63;
          v30[1] = v85;
          *v30 = v88;
          if (v96 >> 15 >= 255)
            v97 = -1;
          else
            v97 = v96 >> 15;
          v30[2] = v83;
          v30[3] = -1;
          if (v96 < 0)
            v97 = 0;
          v30[4] = v97;
          v30[5] = v95;
          v30[6] = v92;
          v30[7] = -1;
          v30 += 8;
          ++v57;
        }
        while (v18 != v57);
        v33 += v57;
        v32 += v57;
        v9 = v162;
        a1 = v163;
        v11 = v164;
        v14 = v160;
        v12 = v161;
      }
      if ((a1 & 1) != 0)
      {
        v98 = *v33 - 128;
        v99 = *v32 - 128;
        v100 = 38267 * v34->u8[0] - 612272;
        v101 = -6155 * v98 - 21375 * v99;
        v102 = 70388 * v98;
        v103 = 55169 * v99;
        v104 = (v100 + v103) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v100 + v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = (v101 + v100) >> 15;
        if (v106 >= 255)
          LOBYTE(v106) = -1;
        if (v101 + v100 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v100 + v102;
        v109 = v108 >> 15;
        if (v108 >> 15 >= 255)
          LOBYTE(v109) = -1;
        if (v108 >= 0)
          v110 = v109;
        else
          v110 = 0;
        *v31 = v110;
        v31[1] = v107;
        v31[2] = v105;
        v31[3] = -1;
        v111 = 38267 * *v29 - 612272;
        v112 = v111 + v103;
        v113 = v112 >> 15;
        if (v112 >> 15 >= 255)
          LOBYTE(v113) = -1;
        if (v112 >= 0)
          v114 = v113;
        else
          v114 = 0;
        v115 = v111 + v101;
        v116 = v115 >> 15;
        if (v115 >> 15 >= 255)
          LOBYTE(v116) = -1;
        if (v115 >= 0)
          v117 = v116;
        else
          v117 = 0;
        v118 = v111 + v102;
        v119 = v118 >> 15;
        if (v118 >> 15 >= 255)
          LOBYTE(v119) = -1;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = 0;
        *v30 = v120;
        v30[1] = v117;
        v30[2] = v114;
        v30[3] = -1;
      }
      v6 = (uint8x8_t *)((char *)v6 + v166);
      v7 = (uint8x8_t *)((char *)v7 + v12);
      v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v165;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1)
        v121 = 1;
      else
        v121 = v9;
      do
      {
        v122 = v7->u8[0];
        v7 = (uint8x8_t *)((char *)v7 + 1);
        v123 = v122 - 128;
        v124 = v8->u8[0];
        v8 = (uint8x8_t *)((char *)v8 + 1);
        v125 = 38267 * v6->u8[0] - 612272;
        v126 = -6155 * v123 - 21375 * (v124 - 128);
        v127 = 70388 * v123;
        v128 = 55169 * (v124 - 128);
        v129 = (v125 + v128) >> 15;
        if (v129 >= 255)
          LOBYTE(v129) = -1;
        if (v125 + v128 >= 0)
          v130 = v129;
        else
          v130 = 0;
        v131 = (v126 + v125) >> 15;
        if (v131 >= 255)
          LOBYTE(v131) = -1;
        if (v126 + v125 >= 0)
          v132 = v131;
        else
          v132 = 0;
        v133 = v125 + v127;
        v134 = v133 >> 15;
        if (v133 >> 15 >= 255)
          LOBYTE(v134) = -1;
        if (v133 >= 0)
          v135 = v134;
        else
          v135 = 0;
        v136 = 38267 * v6->u8[1] - 612272;
        v137 = v136 + v128;
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v136 + v126;
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v136 + v127;
        *v10 = v135;
        v10[1] = v132;
        if (v143 >> 15 >= 255)
          v144 = -1;
        else
          v144 = v143 >> 15;
        v10[2] = v130;
        v10[3] = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v10[4] = v145;
        v10[5] = v142;
        v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v139;
        v10[7] = -1;
        v10 += 8;
        --v121;
      }
      while (v121);
    }
    if ((a1 & 1) != 0)
    {
      v146 = v7->u8[0] - 128;
      v147 = v8->u8[0] - 128;
      v148 = 38267 * v6->u8[0] - 612272;
      v149 = -6155 * v146 - 21375 * v147;
      v150 = v148 + 55169 * v147;
      v151 = v150 >> 15;
      if (v150 >> 15 >= 255)
        LOBYTE(v151) = -1;
      if (v150 >= 0)
        v152 = v151;
      else
        v152 = 0;
      v153 = v149 + v148;
      v154 = v153 >> 15;
      if (v153 >> 15 >= 255)
        LOBYTE(v154) = -1;
      if (v153 >= 0)
        v155 = v154;
      else
        v155 = 0;
      v156 = v148 + 70388 * v146;
      v157 = v156 >> 15;
      if (v156 >> 15 >= 255)
        LOBYTE(v157) = -1;
      if (v156 >= 0)
        v158 = v157;
      else
        v158 = 0;
      *v10 = v158;
      v10[1] = v155;
      v10[2] = v152;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int8x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  int v85;
  char v86;
  int v87;
  int v88;
  char v89;
  int v90;
  int v91;
  char v92;
  int v93;
  char v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  char v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  char v129;
  int v130;
  char v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  int v142;
  char v143;
  char v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  char v151;
  int v152;
  int v153;
  char v154;
  int v155;
  int v156;
  char v157;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int8x8x4_t v169;

  v6 = a1 >> 1;
  v7 = *a4;
  v8 = a4[1];
  v9 = v8 + 1;
  v10 = *a6;
  v163 = a1;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = *a5;
    v15 = a2 >> 1;
    v167 = 4 * (a1 >> 3);
    v168 = v13;
    v166 = 2 * v12;
    if (a1 >> 3 <= 1)
      v16 = 1;
    else
      v16 = a1 >> 3;
    v161 = v12;
    v162 = a1 >> 1;
    v17 = &v7[v12];
    v159 = v6 - 4 * (a1 >> 3);
    v160 = v16;
    v18 = vdupq_n_s32(0xFFFFE7F5);
    v19 = vdupq_n_s32(0xFFFFAC81);
    v20 = vdupq_n_s32(0x112F4u);
    v21 = vdupq_n_s32(0xD781u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    v24 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        v32 = 0;
        v33 = v160;
        v28 = v10;
        do
        {
          v34 = &v28[v14];
          v35 = *(int8x8_t *)&v8[v32];
          v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          v39 = vmulq_s32(v36, v20);
          v40 = vmulq_s32(v37, v21);
          v41 = vzip1q_s32(v39, v39);
          v42 = vzip2q_s32(v39, v39);
          v43 = vzip1q_s32(v40, v40);
          v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          v46 = vzip1q_s32(v38, v38);
          v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          v49 = vzip2q_s32(v40, v40);
          v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          v52 = vzip2q_s32(v38, v38);
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        v31 = &v7[v32];
        v26 = &v17[v32];
        v30 = &v8[v32];
        v29 = &v8[v32 + 1];
        v27 = &v28[v14];
      }
      else
      {
        v26 = &v7[v161];
        v27 = &v10[v14];
        v28 = v10;
        v29 = v9;
        v30 = v8;
        v31 = v7;
      }
      if (v6 > v167)
      {
        v164 = v11;
        v165 = v9;
        v56 = v159;
        do
        {
          v57 = *v30;
          v30 += 2;
          v58 = v57 - 128;
          v59 = *v29;
          v29 += 2;
          v60 = 38267 * *v31 - 612272;
          v61 = -6155 * v58 - 21375 * (v59 - 128);
          v62 = 70388 * v58;
          v63 = 55169 * (v59 - 128);
          v64 = (v60 + v63) >> 15;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          if (v60 + v63 >= 0)
            v65 = v64;
          else
            v65 = 0;
          v66 = (v61 + v60) >> 15;
          if (v66 >= 255)
            LOBYTE(v66) = -1;
          v67 = v61 + v60 < 0;
          v68 = v60 + v62;
          v69 = v68 >> 15;
          if (v67)
            LOBYTE(v66) = 0;
          if (v69 >= 255)
            LOBYTE(v69) = -1;
          v67 = v68 < 0;
          v70 = 38267 * v31[1] - 612272;
          v71 = v70 + v63;
          if (v67)
            LOBYTE(v69) = 0;
          v72 = v71 >> 15;
          if (v71 >> 15 >= 255)
            LOBYTE(v72) = -1;
          v67 = v71 < 0;
          v73 = v70 + v61;
          if (v67)
            LOBYTE(v72) = 0;
          v74 = v73 >> 15;
          if (v73 >> 15 >= 255)
            LOBYTE(v74) = -1;
          v75 = v70 + v62;
          if (v73 < 0)
            LOBYTE(v74) = 0;
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          v78 = 38267 * *v26 - 612272;
          v31 += 2;
          v79 = (v78 + v63) >> 15;
          if (v79 >= 255)
            LOBYTE(v79) = -1;
          v80 = v78 + v61;
          if (v78 + v63 < 0)
            LOBYTE(v79) = 0;
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          v82 = v78 + v62;
          if (v80 >= 0)
            v83 = v81;
          else
            v83 = 0;
          v84 = v82 >> 15;
          if (v82 >> 15 >= 255)
            LOBYTE(v84) = -1;
          v67 = v82 < 0;
          v85 = 38267 * v26[1] - 612272;
          if (v67)
            v86 = 0;
          else
            v86 = v84;
          v87 = v85 + v63;
          v88 = (v85 + v63) >> 15;
          if (v88 >= 255)
            LOBYTE(v88) = -1;
          if (v87 >= 0)
            v89 = v88;
          else
            v89 = 0;
          v90 = v85 + v61;
          v91 = v90 >> 15;
          if (v90 >> 15 >= 255)
            LOBYTE(v91) = -1;
          if (v90 >= 0)
            v92 = v91;
          else
            v92 = 0;
          v93 = v85 + v62;
          *v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255)
            v94 = -1;
          else
            v94 = v93 >> 15;
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0)
            v95 = v94;
          else
            v95 = 0;
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        v6 = v162;
        a1 = v163;
        v11 = v164;
        v9 = v165;
        v15 = a2 >> 1;
      }
      if ((a1 & 1) != 0)
      {
        v96 = *v30 - 128;
        v97 = *v29 - 128;
        v98 = 38267 * *v31 - 612272;
        v99 = -6155 * v96 - 21375 * v97;
        v100 = 70388 * v96;
        v101 = 55169 * v97;
        v102 = (v98 + v101) >> 15;
        if (v102 >= 255)
          LOBYTE(v102) = -1;
        if (v98 + v101 >= 0)
          v103 = v102;
        else
          v103 = 0;
        v104 = (v99 + v98) >> 15;
        if (v104 >= 255)
          LOBYTE(v104) = -1;
        if (v99 + v98 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v98 + v100;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        *v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        v109 = 38267 * *v26 - 612272;
        v110 = v109 + v101;
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        v113 = v109 + v99;
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v109 + v100;
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        *v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1)
        v119 = 1;
      else
        v119 = v6;
      do
      {
        v120 = *v8;
        v8 += 2;
        v121 = v120 - 128;
        v122 = *v9;
        v123 = v9 + 2;
        v124 = 38267 * *v7 - 612272;
        v125 = -6155 * v121 - 21375 * (v122 - 128);
        v126 = 70388 * v121;
        v127 = 55169 * (v122 - 128);
        v128 = (v124 + v127) >> 15;
        if (v128 >= 255)
          LOBYTE(v128) = -1;
        if (v124 + v127 >= 0)
          v129 = v128;
        else
          v129 = 0;
        v130 = (v125 + v124) >> 15;
        if (v130 >= 255)
          LOBYTE(v130) = -1;
        if (v125 + v124 >= 0)
          v131 = v130;
        else
          v131 = 0;
        v132 = v124 + v126;
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = 38267 * v7[1] - 612272;
        v136 = v135 + v127;
        v137 = v136 >> 15;
        if (v136 >> 15 >= 255)
          LOBYTE(v137) = -1;
        if (v136 >= 0)
          v138 = v137;
        else
          v138 = 0;
        v139 = v135 + v125;
        v140 = v139 >> 15;
        if (v139 >> 15 >= 255)
          LOBYTE(v140) = -1;
        if (v139 >= 0)
          v141 = v140;
        else
          v141 = 0;
        v142 = v135 + v126;
        *v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255)
          v143 = -1;
        else
          v143 = v142 >> 15;
        v9 = v123;
        v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0)
          v144 = v143;
        else
          v144 = 0;
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if ((a1 & 1) != 0)
    {
      v145 = *v8 - 128;
      v146 = *v9 - 128;
      v147 = 38267 * *v7 - 612272;
      v148 = -6155 * v145 - 21375 * v146;
      v149 = v147 + 55169 * v146;
      v150 = v149 >> 15;
      if (v149 >> 15 >= 255)
        LOBYTE(v150) = -1;
      if (v149 >= 0)
        v151 = v150;
      else
        v151 = 0;
      v152 = v148 + v147;
      v153 = v152 >> 15;
      if (v152 >> 15 >= 255)
        LOBYTE(v153) = -1;
      if (v152 >= 0)
        v154 = v153;
      else
        v154 = 0;
      v155 = v147 + 70388 * v145;
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      *v10 = v157;
      v10[1] = v154;
      v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  int16x8_t v12;
  int32x4_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int32x4_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  char *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  int32x4_t v65;
  __int32 v66;
  int v67;
  int32x4_t v68;
  int32x4_t v69;
  char v70;
  int v71;
  int v72;
  char v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x8_t v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  int v94;
  char v95;
  int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  int v101;
  char v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  uint64_t v109;
  int32x4_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int32x2_t v116;
  int32x4_t v117;
  int v118;
  int v119;
  int v120;
  int32x4_t v121;
  char v122;
  int32x4_t v123;
  int8x8_t v124;
  int16x8_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int8x8x3_t v149;
  int8x8x3_t v150;

  v14 = a1 >> 1;
  v16 = *a4;
  v15 = a4[1];
  v17 = v15 + 1;
  v18 = *a6;
  if (a2 >= 2)
  {
    v19 = 0;
    v21 = *a3;
    v20 = a3[1];
    v22 = *a5;
    v23 = a2 >> 1;
    v147 = 2 * v21;
    v148 = 4 * (a1 >> 3);
    v146 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v24 = 1;
    else
      v24 = a1 >> 3;
    v143 = v21;
    v25 = &v16[v21];
    v140 = v14 - 4 * (a1 >> 3);
    v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6A850);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    v28 = vdupq_n_s32(0xFFFFE7F5);
    a12 = vdupq_n_s32(0xFFFFAC81);
    v29 = vdupq_n_s32(0x112F4u);
    v30 = vdupq_n_s32(0xD781u);
    v31 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    v32 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    v144 = a1 >> 1;
    v145 = a1;
    v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        v39 = 0;
        v40 = v141;
        v35 = v18;
        do
        {
          v41 = *(int8x8_t *)&v15[v39];
          v42 = &v35[v22];
          v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          v46 = vmulq_s32(v43, v29);
          v47 = vmulq_s32(v44, v30);
          v13 = vzip1q_s32(v46, v46);
          v48 = vzip2q_s32(v46, v46);
          v49 = vzip1q_s32(v47, v47);
          v50 = vzip1q_s32(v45, v45);
          v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          v54 = vzip2q_s32(v47, v47);
          v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          v57 = vzip2q_s32(v45, v45);
          v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        v38 = &v16[v39];
        v33 = &v25[v39];
        v37 = &v15[v39];
        v36 = &v15[v39 + 1];
        v34 = &v35[v22];
      }
      else
      {
        v33 = &v16[v143];
        v34 = &v18[v22];
        v35 = v18;
        v36 = v17;
        v37 = v15;
        v38 = v16;
      }
      if (v14 > v148)
      {
        v59 = 0;
        v60 = v140;
        do
        {
          v61 = &v33[v59];
          v62 = v37[v59] - 128;
          v63 = 55169 * (v36[v59] - 128);
          v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          v65 = a7;
          v65.i32[0] = -6155 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x957BFFFFAC81);
          v66 = v65.i32[0];
          v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38267 * v38[v59] - 612272;
          if (v67 >= 255)
            LOBYTE(v67) = -1;
          v13.i32[0] = 38267 * v38[v59] - 612272;
          v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0)
            v70 = v67;
          else
            v70 = 0;
          v71 = 70388 * v62;
          v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255)
            v73 = -1;
          else
            v73 = v72;
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0)
            v73 = 0;
          v74 = vaddq_s32(v69, v68);
          v75 = vcltzq_s32(v74);
          v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38267 * *v61 - 612272;
          v77 = 38267 * v61[1] - 612272;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          v79 = vaddq_s32(v13, v78);
          v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          if (v77 + v66 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          *(_DWORD *)v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        v14 = v144;
        a1 = v145;
        v23 = a2 >> 1;
        v20 = v142;
      }
      if ((a1 & 1) != 0)
      {
        v86 = *v37 - 128;
        v87 = *v36 - 128;
        v88 = 38267 * *v38 - 612272;
        v89 = -6155 * v86 - 21375 * v87;
        v90 = 70388 * v86;
        v91 = 55169 * v87;
        v92 = (v88 + v91) >> 15;
        if (v92 >= 255)
          LOBYTE(v92) = -1;
        if (v88 + v91 >= 0)
          v93 = v92;
        else
          v93 = 0;
        v94 = (v89 + v88) >> 15;
        if (v94 >= 255)
          LOBYTE(v94) = -1;
        if (v89 + v88 >= 0)
          v95 = v94;
        else
          v95 = 0;
        v96 = v88 + v90;
        v97 = v96 >> 15;
        if (v96 >> 15 >= 255)
          LOBYTE(v97) = -1;
        if (v96 >= 0)
          v98 = v97;
        else
          v98 = 0;
        *v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        v99 = 38267 * *v33 - 612272;
        v100 = v99 + v91;
        v101 = v100 >> 15;
        if (v100 >> 15 >= 255)
          LOBYTE(v101) = -1;
        if (v100 >= 0)
          v102 = v101;
        else
          v102 = 0;
        v103 = v99 + v89;
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v99 + v90;
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        *v34 = v102;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if ((a2 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1)
        v109 = 1;
      else
        v109 = v14;
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        v112 = *v15;
        v15 += 2;
        v111 = v112;
        v113 = *v17;
        v17 += 2;
        v111 -= 128;
        v114 = v113 - 128;
        v115 = 55169 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        v117 = a8;
        v117.i32[0] = -6155 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x957BFFFFAC81);
        a12.i32[0] = 38267 * *v16 - 612272;
        a12 = vzip1q_s32(a12, v117);
        v118 = 70388 * v111;
        v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255)
          LOBYTE(v119) = -1;
        v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0)
          LOBYTE(v119) = 0;
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255)
          v122 = -1;
        else
          v122 = (v117.i32[1] + v118) >> 15;
        v121.i32[3] = v115;
        v121.i32[1] = 38267 * *v16 - 612272;
        v121.i32[0] = 55169 * v114;
        v123 = vaddq_s32(a12, v121);
        v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0)
          v122 = 0;
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if ((a1 & 1) != 0)
    {
      v126 = *v15 - 128;
      v127 = *v17 - 128;
      v128 = 38267 * *v16 - 612272;
      v129 = -6155 * v126 - 21375 * v127;
      v130 = v128 + 55169 * v127;
      v131 = v130 >> 15;
      if (v130 >> 15 >= 255)
        LOBYTE(v131) = -1;
      if (v130 >= 0)
        v132 = v131;
      else
        v132 = 0;
      v133 = v129 + v128;
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v128 + 70388 * v126;
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      *v18 = v132;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  char v108;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  int v114;
  char v115;
  int v116;
  int v117;
  char v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  char v133;
  int v134;
  int v135;
  char v136;
  int v137;
  int v138;
  char v139;
  int v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  int v146;
  int v147;
  char v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  int v160;
  int v161;
  char v162;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int8x8x4_t v175;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v164 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v174 = a2 >> 1;
    v173 = 4 * (a1 >> 3);
    v172 = 2 * *a3;
    v171 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v168 = *a3;
    v169 = a1 >> 1;
    v16 = &v6[*a3];
    v165 = (a1 >> 1) - 4 * (a1 >> 3);
    v166 = v15;
    v17 = vdupq_n_s32(0xFFFFEAF1);
    v18 = vdupq_n_s32(0xFFFFB6DF);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xF0D2u);
    v21 = vdupq_n_s32(0xBCC0u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v166;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v168];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v173)
      {
        v54 = v165;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -5391 * v55 - 18721 * (v57 - 128);
          v61 = 61650 * v55;
          v62 = 48320 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          v78 = *v23;
          v79 = v23[1];
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          if (v92 >= 0)
            v94 = v93;
          else
            v94 = 0;
          v95 = v61 + (v79 << 15);
          *v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255)
            LOBYTE(v96) = -1;
          else
            v96 = v95 >> 15;
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0)
            LOBYTE(v96) = 0;
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v169;
        v10 = a1;
        v13 = v167;
      }
      if ((v10 & 1) != 0)
      {
        v97 = *v27 - 128;
        v98 = *v26 - 128;
        v99 = *v28;
        v100 = -5391 * v97 - 18721 * v98;
        v101 = 61650 * v97;
        v102 = 48320 * v98;
        v103 = v102 + (v99 << 15);
        v104 = v103 >> 15;
        if (v103 >> 15 >= 255)
          LOBYTE(v104) = -1;
        if (v103 >= 0)
          v105 = v104;
        else
          v105 = 0;
        v106 = v100 + (v99 << 15);
        v107 = v106 >> 15;
        if (v106 >> 15 >= 255)
          LOBYTE(v107) = -1;
        if (v106 >= 0)
          v108 = v107;
        else
          v108 = 0;
        v109 = v101 + (v99 << 15);
        v110 = v109 >> 15;
        if (v109 >> 15 >= 255)
          LOBYTE(v110) = -1;
        if (v109 >= 0)
          v111 = v110;
        else
          v111 = 0;
        *v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        v112 = *v23;
        v113 = v102 + (v112 << 15);
        v114 = v113 >> 15;
        if (v113 >> 15 >= 255)
          LOBYTE(v114) = -1;
        if (v113 >= 0)
          v115 = v114;
        else
          v115 = 0;
        v116 = v100 + (v112 << 15);
        v117 = v116 >> 15;
        if (v116 >> 15 >= 255)
          LOBYTE(v117) = -1;
        if (v116 >= 0)
          v118 = v117;
        else
          v118 = 0;
        v119 = v101 + (v112 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        *v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v164 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v122 = 1;
      else
        v122 = v11;
      do
      {
        v123 = *v7;
        v7 += 2;
        v124 = v123 - 128;
        v125 = *v8;
        v8 += 2;
        v126 = *v6;
        v127 = v6[1];
        v128 = -5391 * v124 - 18721 * (v125 - 128);
        v129 = 61650 * v124;
        v130 = 48320 * (v125 - 128);
        v131 = v130 + (v126 << 15);
        v132 = v131 >> 15;
        if (v131 >> 15 >= 255)
          LOBYTE(v132) = -1;
        if (v131 >= 0)
          v133 = v132;
        else
          v133 = 0;
        v134 = v128 + (v126 << 15);
        v135 = v134 >> 15;
        if (v134 >> 15 >= 255)
          LOBYTE(v135) = -1;
        if (v134 >= 0)
          v136 = v135;
        else
          v136 = 0;
        v137 = v129 + (v126 << 15);
        v138 = v137 >> 15;
        if (v137 >> 15 >= 255)
          LOBYTE(v138) = -1;
        if (v137 >= 0)
          v139 = v138;
        else
          v139 = 0;
        v140 = v130 + (v127 << 15);
        v141 = v140 >> 15;
        if (v140 >> 15 >= 255)
          LOBYTE(v141) = -1;
        if (v140 >= 0)
          v142 = v141;
        else
          v142 = 0;
        v143 = v128 + (v127 << 15);
        v144 = v143 >> 15;
        if (v143 >> 15 >= 255)
          LOBYTE(v144) = -1;
        if (v143 >= 0)
          v145 = v144;
        else
          v145 = 0;
        v146 = v129 + (v127 << 15);
        *v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255)
          LOBYTE(v147) = -1;
        else
          v147 = v146 >> 15;
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0)
          v148 = v147;
        else
          v148 = 0;
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v149 = *v7 - 128;
      v150 = *v8 - 128;
      v151 = *v6;
      v152 = -5391 * v149 - 18721 * v150;
      v153 = 61650 * v149;
      v154 = 48320 * v150 + (v151 << 15);
      v155 = v154 >> 15;
      if (v154 >> 15 >= 255)
        LOBYTE(v155) = -1;
      if (v154 >= 0)
        v156 = v155;
      else
        v156 = 0;
      v157 = v152 + (v151 << 15);
      v158 = v157 >> 15;
      if (v157 >> 15 >= 255)
        LOBYTE(v158) = -1;
      if (v157 >= 0)
        v159 = v158;
      else
        v159 = 0;
      v160 = v153 + (v151 << 15);
      v161 = v160 >> 15;
      if (v160 >> 15 >= 255)
        LOBYTE(v161) = -1;
      if (v160 >= 0)
        v162 = v161;
      else
        v162 = 0;
      *v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int8x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  char v74;
  int v75;
  int v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  int v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  int v108;
  char v109;
  int v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  char v116;
  int v117;
  int v118;
  char v119;
  int v120;
  int v121;
  char v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  char v134;
  int v135;
  int v136;
  char v137;
  int v138;
  int v139;
  char v140;
  int v141;
  int v142;
  char v143;
  int v144;
  int v145;
  char v146;
  int v147;
  int v148;
  char v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  char v157;
  int v158;
  int v159;
  char v160;
  int v161;
  int v162;
  char v163;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int8x8x4_t v176;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v165 = a2;
  if (a2 >= 2)
  {
    v12 = 0;
    v13 = a3[1];
    v14 = *a5;
    v175 = a2 >> 1;
    v174 = 4 * (a1 >> 3);
    v173 = 2 * *a3;
    v172 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v15 = 1;
    else
      v15 = a1 >> 3;
    v169 = *a3;
    v170 = a1 >> 1;
    v16 = &v6[*a3];
    v166 = (a1 >> 1) - 4 * (a1 >> 3);
    v167 = v15;
    v17 = vdupq_n_s32(0xFFFFEAF1);
    v18 = vdupq_n_s32(0xFFFFB6DF);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    v20 = vdupq_n_s32(0xF0D2u);
    v21 = vdupq_n_s32(0xBCC0u);
    v22 = -1;
    v10 = a1;
    v11 = a1 >> 1;
    v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        v29 = 0;
        v30 = v167;
        v25 = v9;
        do
        {
          v31 = &v25[v14];
          v32 = *(int8x8_t *)&v7[v29];
          v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          v35 = vmulq_s32(v33, v17);
          v36 = vmulq_s32(v33, v20);
          v37 = vmulq_s32(v34, v21);
          v38 = vmlaq_s32(v35, v34, v18);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v37, v37);
          v42 = vzip1q_s32(v38, v38);
          v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v46 = vzip2q_s32(v37, v37);
          v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          v50 = vzip2q_s32(v38, v38);
          v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        v28 = &v6[v29];
        v23 = &v16[v29];
        v27 = &v7[v29];
        v26 = &v7[v29 + 1];
        v24 = &v25[v14];
      }
      else
      {
        v23 = &v6[v169];
        v24 = &v9[v14];
        v25 = v9;
        v26 = v8;
        v27 = v7;
        v28 = v6;
      }
      if (v11 > v174)
      {
        v54 = v166;
        do
        {
          v56 = *v27;
          v27 += 2;
          v55 = v56;
          v57 = *v26;
          v26 += 2;
          v55 -= 128;
          v58 = *v28;
          v59 = v28[1];
          v28 += 2;
          v60 = -5391 * v55 - 18721 * (v57 - 128);
          v61 = 61650 * v55;
          v62 = 48320 * (v57 - 128);
          v63 = v62 + (v58 << 15);
          v64 = v63 >> 15;
          if (v63 >> 15 >= 255)
            LOBYTE(v64) = -1;
          if (v63 < 0)
            LOBYTE(v64) = 0;
          v65 = v60 + (v58 << 15);
          v66 = v65 >> 15;
          if (v65 >> 15 >= 255)
            LOBYTE(v66) = -1;
          if (v65 < 0)
            LOBYTE(v66) = 0;
          v67 = v61 + (v58 << 15);
          v68 = v67 >> 15;
          if (v67 >> 15 >= 255)
            LOBYTE(v68) = -1;
          if (v67 >= 0)
            v69 = v68;
          else
            v69 = 0;
          v70 = v62 + (v59 << 15);
          v71 = v70 >> 15;
          if (v70 >> 15 >= 255)
            LOBYTE(v71) = -1;
          if (v70 < 0)
            LOBYTE(v71) = 0;
          v72 = v60 + (v59 << 15);
          v73 = v72 >> 15;
          if (v72 >> 15 >= 255)
            LOBYTE(v73) = -1;
          if (v72 >= 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v61 + (v59 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          if (v75 >= 0)
            v77 = v76;
          else
            v77 = 0;
          *v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          v78 = *v23;
          v25 += 8;
          v79 = v23[1];
          v23 += 2;
          v80 = v62 + (v78 << 15);
          v81 = v80 >> 15;
          if (v80 >> 15 >= 255)
            LOBYTE(v81) = -1;
          if (v80 >= 0)
            v82 = v81;
          else
            v82 = 0;
          v83 = v60 + (v78 << 15);
          v84 = v83 >> 15;
          if (v83 >> 15 >= 255)
            LOBYTE(v84) = -1;
          if (v83 >= 0)
            v85 = v84;
          else
            v85 = 0;
          v86 = v61 + (v78 << 15);
          v87 = v86 >> 15;
          if (v86 >> 15 >= 255)
            LOBYTE(v87) = -1;
          if (v86 >= 0)
            v88 = v87;
          else
            v88 = 0;
          v89 = v62 + (v79 << 15);
          v90 = v89 >> 15;
          if (v89 >> 15 >= 255)
            LOBYTE(v90) = -1;
          if (v89 >= 0)
            v91 = v90;
          else
            v91 = 0;
          v92 = v60 + (v79 << 15);
          v93 = v92 >> 15;
          if (v92 >> 15 >= 255)
            LOBYTE(v93) = -1;
          v94 = v61 + (v79 << 15);
          v95 = v94 >> 15;
          *v24 = -1;
          v24[1] = v82;
          if (v92 >= 0)
            v96 = v93;
          else
            v96 = 0;
          if (v95 >= 255)
            LOBYTE(v95) = -1;
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0)
            v97 = v95;
          else
            v97 = 0;
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        v11 = v170;
        v10 = a1;
        v13 = v168;
      }
      if ((v10 & 1) != 0)
      {
        v98 = *v27 - 128;
        v99 = *v26 - 128;
        v100 = *v28;
        v101 = -5391 * v98 - 18721 * v99;
        v102 = 61650 * v98;
        v103 = 48320 * v99;
        v104 = v103 + (v100 << 15);
        v105 = v104 >> 15;
        if (v104 >> 15 >= 255)
          LOBYTE(v105) = -1;
        if (v104 >= 0)
          v106 = v105;
        else
          v106 = 0;
        v107 = v101 + (v100 << 15);
        v108 = v107 >> 15;
        if (v107 >> 15 >= 255)
          LOBYTE(v108) = -1;
        if (v107 >= 0)
          v109 = v108;
        else
          v109 = 0;
        v110 = v102 + (v100 << 15);
        v111 = v110 >> 15;
        if (v110 >> 15 >= 255)
          LOBYTE(v111) = -1;
        if (v110 >= 0)
          v112 = v111;
        else
          v112 = 0;
        *v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        v113 = *v23;
        v114 = v103 + (v113 << 15);
        v115 = v114 >> 15;
        if (v114 >> 15 >= 255)
          LOBYTE(v115) = -1;
        if (v114 >= 0)
          v116 = v115;
        else
          v116 = 0;
        v117 = v101 + (v113 << 15);
        v118 = v117 >> 15;
        if (v117 >> 15 >= 255)
          LOBYTE(v118) = -1;
        if (v117 >= 0)
          v119 = v118;
        else
          v119 = 0;
        v120 = v102 + (v113 << 15);
        v121 = v120 >> 15;
        if (v120 >> 15 >= 255)
          LOBYTE(v121) = -1;
        *v24 = -1;
        v24[1] = v116;
        if (v120 >= 0)
          v122 = v121;
        else
          v122 = 0;
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    v10 = a1;
    v11 = a1 >> 1;
  }
  if ((v165 & 1) != 0)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1)
        v123 = 1;
      else
        v123 = v11;
      do
      {
        v124 = *v7;
        v7 += 2;
        v125 = v124 - 128;
        v126 = *v8;
        v8 += 2;
        v127 = *v6;
        v128 = v6[1];
        v6 += 2;
        v129 = -5391 * v125 - 18721 * (v126 - 128);
        v130 = 61650 * v125;
        v131 = 48320 * (v126 - 128);
        v132 = v131 + (v127 << 15);
        v133 = v132 >> 15;
        if (v132 >> 15 >= 255)
          LOBYTE(v133) = -1;
        if (v132 >= 0)
          v134 = v133;
        else
          v134 = 0;
        v135 = v129 + (v127 << 15);
        v136 = v135 >> 15;
        if (v135 >> 15 >= 255)
          LOBYTE(v136) = -1;
        if (v135 >= 0)
          v137 = v136;
        else
          v137 = 0;
        v138 = v130 + (v127 << 15);
        v139 = v138 >> 15;
        if (v138 >> 15 >= 255)
          LOBYTE(v139) = -1;
        if (v138 >= 0)
          v140 = v139;
        else
          v140 = 0;
        v141 = v131 + (v128 << 15);
        v142 = v141 >> 15;
        if (v141 >> 15 >= 255)
          LOBYTE(v142) = -1;
        if (v141 >= 0)
          v143 = v142;
        else
          v143 = 0;
        v144 = v129 + (v128 << 15);
        v145 = v144 >> 15;
        if (v144 >> 15 >= 255)
          LOBYTE(v145) = -1;
        if (v144 >= 0)
          v146 = v145;
        else
          v146 = 0;
        v147 = v130 + (v128 << 15);
        v148 = v147 >> 15;
        *v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255)
          LOBYTE(v148) = -1;
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0)
          v149 = v148;
        else
          v149 = 0;
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if ((v10 & 1) != 0)
    {
      v150 = *v7 - 128;
      v151 = *v8 - 128;
      v152 = *v6;
      v153 = -5391 * v150 - 18721 * v151;
      v154 = 61650 * v150;
      v155 = 48320 * v151 + (v152 << 15);
      v156 = v155 >> 15;
      if (v155 >> 15 >= 255)
        LOBYTE(v156) = -1;
      if (v155 >= 0)
        v157 = v156;
      else
        v157 = 0;
      v158 = v153 + (v152 << 15);
      v159 = v158 >> 15;
      if (v158 >> 15 >= 255)
        LOBYTE(v159) = -1;
      if (v158 >= 0)
        v160 = v159;
      else
        v160 = 0;
      v161 = v154 + (v152 << 15);
      v162 = v161 >> 15;
      if (v161 >> 15 >= 255)
        LOBYTE(v162) = -1;
      *v9 = -1;
      v9[1] = v157;
      if (v161 >= 0)
        v163 = v162;
      else
        v163 = 0;
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int32x4_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unsigned __int8 *v22;
  char *v23;
  char *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  char *v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  __int32 v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int8x8_t v70;
  int16x8_t v71;
  char v72;
  int v73;
  __int32 v74;
  int v75;
  int v76;
  int v77;
  int32x4_t v78;
  char v79;
  int32x4_t v80;
  int8x8_t v81;
  int16x8_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  int v93;
  char v94;
  int v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  char v101;
  int v102;
  int v103;
  char v104;
  int v105;
  int v106;
  char v107;
  uint64_t v108;
  int32x4_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  __int32 v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  char v121;
  int v122;
  int32x4_t v123;
  char v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  int v136;
  int v137;
  char v138;
  int v139;
  int v140;
  char v141;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int8x8x3_t v153;
  int8x8x3_t v154;

  v6 = *a4;
  v7 = a4[1];
  v8 = v7 + 1;
  v9 = *a6;
  v148 = a1;
  v143 = a2;
  if (a2 >= 2)
  {
    v11 = 0;
    v12 = a3[1];
    v13 = *a5;
    v152 = a2 >> 1;
    v151 = 4 * (a1 >> 3);
    v150 = 2 * *a3;
    v149 = 2 * *a5;
    if (a1 >> 3 <= 1)
      v14 = 1;
    else
      v14 = a1 >> 3;
    v146 = a3[1];
    v147 = *a3;
    v15 = &v6[*a3];
    v144 = (a1 >> 1) - 4 * (a1 >> 3);
    v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    v18 = vdupq_n_s32(0xFFFFEAF1);
    v19 = vdupq_n_s32(0xFFFFB6DF);
    v20 = vdupq_n_s32(0xF0D2u);
    v21 = vdupq_n_s32(0xBCC0u);
    v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        v28 = 0;
        v29 = v145;
        v24 = v9;
        do
        {
          v30 = *(int8x8_t *)&v7[v28];
          v31 = &v24[v13];
          v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          v35 = vmulq_s32(v32, v20);
          v36 = vmulq_s32(v33, v21);
          v37 = vzip1q_s32(v35, v35);
          v38 = vzip2q_s32(v35, v35);
          v39 = vzip1q_s32(v36, v36);
          v40 = vzip2q_s32(v36, v36);
          v41 = vzip1q_s32(v34, v34);
          v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          v47 = vzip2q_s32(v34, v34);
          v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        v27 = &v6[v28];
        v22 = &v15[v28];
        v26 = &v7[v28];
        v25 = &v7[v28 + 1];
        v23 = &v24[v13];
      }
      else
      {
        v22 = &v6[v147];
        v23 = &v9[v13];
        v24 = v9;
        v25 = v8;
        v26 = v7;
        v27 = v6;
      }
      if (v10 > v151)
      {
        v49 = v10;
        v50 = v144;
        do
        {
          v52 = *v26;
          v26 += 2;
          v51 = v52;
          v53 = *v25;
          v25 += 2;
          v51 -= 128;
          v54 = *v27;
          v55 = v27[1];
          v27 += 2;
          v56 = v54 << 15;
          v57 = -5391 * v51 - 18721 * (v53 - 128);
          v58 = 61650 * v51;
          v59 = 48320 * (v53 - 128);
          v60 = v55 << 15;
          v61 = v57 + (v55 << 15);
          v62 = v61 >> 15;
          if (v61 >> 15 >= 255)
            LOBYTE(v62) = -1;
          v63 = v61 < 0;
          v64 = v58 + (v55 << 15);
          v65 = v64 >> 15;
          if (v63)
            LOBYTE(v62) = 0;
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255)
            LOBYTE(v65) = -1;
          v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          v69 = vaddq_s32(v67, v68);
          v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0)
            v72 = v65;
          else
            v72 = 0;
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          v73 = v22[1];
          v74 = v73 << 15;
          v75 = v57 + (v73 << 15);
          v76 = v75 >> 15;
          if (v75 >> 15 >= 255)
            LOBYTE(v76) = -1;
          v77 = v58 + (v73 << 15);
          if (v75 < 0)
            LOBYTE(v76) = 0;
          v66.i32[1] = *v22 << 15;
          v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255)
            v79 = -1;
          else
            v79 = v77 >> 15;
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          v80 = vaddq_s32(v66, v78);
          v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0)
            v79 = 0;
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        v10 = v49;
        v12 = v146;
      }
      if ((a1 & 1) != 0)
      {
        v83 = *v26 - 128;
        v84 = *v25 - 128;
        v85 = *v27;
        v86 = -5391 * v83 - 18721 * v84;
        v87 = 61650 * v83;
        v88 = 48320 * v84;
        v89 = v88 + (v85 << 15);
        v90 = v89 >> 15;
        if (v89 >> 15 >= 255)
          LOBYTE(v90) = -1;
        if (v89 >= 0)
          v91 = v90;
        else
          v91 = 0;
        v92 = v86 + (v85 << 15);
        v93 = v92 >> 15;
        if (v92 >> 15 >= 255)
          LOBYTE(v93) = -1;
        if (v92 >= 0)
          v94 = v93;
        else
          v94 = 0;
        v95 = v87 + (v85 << 15);
        v96 = v95 >> 15;
        if (v95 >> 15 >= 255)
          LOBYTE(v96) = -1;
        if (v95 >= 0)
          v97 = v96;
        else
          v97 = 0;
        *v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        v98 = *v22;
        v99 = v88 + (v98 << 15);
        v100 = v99 >> 15;
        if (v99 >> 15 >= 255)
          LOBYTE(v100) = -1;
        if (v99 >= 0)
          v101 = v100;
        else
          v101 = 0;
        v102 = v86 + (v98 << 15);
        v103 = v102 >> 15;
        if (v102 >> 15 >= 255)
          LOBYTE(v103) = -1;
        if (v102 >= 0)
          v104 = v103;
        else
          v104 = 0;
        v105 = v87 + (v98 << 15);
        v106 = v105 >> 15;
        if (v105 >> 15 >= 255)
          LOBYTE(v106) = -1;
        *v23 = v101;
        if (v105 >= 0)
          v107 = v106;
        else
          v107 = 0;
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    v10 = a1 >> 1;
  }
  if ((v143 & 1) != 0)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1)
        v108 = 1;
      else
        v108 = v10;
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        v110 = *v7;
        v7 += 2;
        v111 = v110 - 128;
        v112 = *v8;
        v8 += 2;
        v113 = v6[1];
        v114 = -5391 * v111;
        v115 = 61650 * v111;
        v116 = v114 - 18721 * (v112 - 128);
        v117 = 48320 * (v112 - 128);
        v118 = v113 << 15;
        v119 = v116 + (v113 << 15);
        v120 = v119 >> 15;
        if (v119 >> 15 >= 255)
          LOBYTE(v120) = -1;
        if (v119 >= 0)
          v121 = v120;
        else
          v121 = 0;
        v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255)
          v124 = -1;
        else
          v124 = v122 >> 15;
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0)
          v124 = 0;
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if ((a1 & 1) != 0)
    {
      v128 = *v7 - 128;
      v129 = *v8 - 128;
      v130 = *v6;
      v131 = -5391 * v128 - 18721 * v129;
      v132 = 61650 * v128;
      v133 = 48320 * v129 + (v130 << 15);
      v134 = v133 >> 15;
      if (v133 >> 15 >= 255)
        LOBYTE(v134) = -1;
      if (v133 >= 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v131 + (v130 << 15);
      v137 = v136 >> 15;
      if (v136 >> 15 >= 255)
        LOBYTE(v137) = -1;
      if (v136 >= 0)
        v138 = v137;
      else
        v138 = 0;
      v139 = v132 + (v130 << 15);
      v140 = v139 >> 15;
      if (v139 >> 15 >= 255)
        LOBYTE(v140) = -1;
      *v9 = v135;
      if (v139 >= 0)
        v141 = v140;
      else
        v141 = 0;
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

BOOL VTRequiresMatrixChange(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _BOOL8 result;

  result = 0;
  if (a2)
  {
    if (a4)
      return FigCFEqual() == 0;
  }
  return result;
}

uint64_t VTCreateYCbCrCFStringsAndProvideDefaultsFromColorSpaceHint(unint64_t cf, int a2, unint64_t a3, int a4, CGColorSpace *a5, CGColorSpace *a6, _QWORD *a7, _QWORD *a8)
{
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;
  CFTypeRef cfa;
  const void *v21;

  if (cf)
    v16 = CFRetain((CFTypeRef)cf);
  else
    v16 = 0;
  v21 = v16;
  if (a3)
    v17 = CFRetain((CFTypeRef)a3);
  else
    v17 = 0;
  cfa = v17;
  if (!a7 || !a8)
  {
    v18 = FigSignalErrorAt();
    if (!v16)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!(cf | a3))
  {
    if (!a2 || a4)
    {
      if (!a2 && a4)
      {
        _createBestGuessYCbCrCFStringFromColorSpace(a6, &cfa);
        v17 = cfa;
      }
    }
    else
    {
      _createBestGuessYCbCrCFStringFromColorSpace(a5, &v21);
      v16 = v21;
    }
  }
  v18 = VTCreateYCbCrCFStringsAndProvideDefaults(v16, a2, v17, a4, a7, a8);
  v16 = v21;
  if (v21)
LABEL_14:
    CFRelease(v16);
LABEL_15:
  if (cfa)
    CFRelease(cfa);
  return v18;
}

void _createBestGuessYCbCrCFStringFromColorSpace(CGColorSpace *a1, const void **a2)
{
  CFStringRef Name;
  const void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    if (a1)
    {
      Name = CGColorSpaceGetName(a1);
      VTGetDefaultColorAttributesWithHints(0, (uint64_t)Name, 0, 0, 0, 0, &cf);
      v4 = *a2;
      v5 = cf;
      *a2 = cf;
      if (v5)
        CFRetain(v5);
      if (v4)
        CFRelease(v4);
    }
    else
    {
      *a2 = 0;
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTCreateYCbCrCFStringsAndProvideDefaults(CFTypeRef cf, int a2, const void *a3, int a4, _QWORD *a5, _QWORD *a6)
{
  const void *v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;

  if (cf)
  {
    v12 = CFRetain(cf);
    if (a3)
      goto LABEL_3;
LABEL_6:
    v13 = 0;
    if (!a5)
      goto LABEL_13;
    goto LABEL_7;
  }
  v12 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v13 = CFRetain(a3);
  if (!a5)
    goto LABEL_13;
LABEL_7:
  if (a6)
  {
    if (a2)
    {
      if (!cf)
      {
        if (a3)
        {
          v12 = CFRetain(a3);
          if (!a4)
          {
LABEL_26:
            if (v13)
            {
              CFRelease(v13);
              v13 = 0;
            }
            goto LABEL_28;
          }
        }
        else if (!a4)
        {
          v12 = (const void *)VTGetDefaultYCbCrMatrixWithNoHints();
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
    else if (v12)
    {
      CFRelease(v12);
      v12 = 0;
    }
    if (!a4)
      goto LABEL_26;
    if (!a3)
    {
      if (cf)
      {
        v15 = (uint64_t)CFRetain(cf);
      }
      else
      {
        if (a2)
          goto LABEL_28;
        v15 = VTGetDefaultYCbCrMatrixWithNoHints();
      }
      v13 = (CFTypeRef)v15;
    }
LABEL_28:
    v14 = 0;
    *a5 = v12;
    *a6 = v13;
    return v14;
  }
LABEL_13:
  v14 = FigSignalErrorAt();
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  return v14;
}

uint64_t VTConvertToSessionPropertiesFromCVProperties(const __CFDictionary *a1, __CFDictionary *a2)
{
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;

  Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8D68]);
  v5 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E98]);
  v6 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E40]);
  v7 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8EE8]);
  if (Value)
    CFDictionarySetValue(a2, CFSTR("DestinationColorPrimaries"), Value);
  else
    CFDictionaryRemoveValue(a2, CFSTR("DestinationColorPrimaries"));
  if (v5)
    CFDictionarySetValue(a2, CFSTR("DestinationTransferFunction"), v5);
  else
    CFDictionaryRemoveValue(a2, CFSTR("DestinationTransferFunction"));
  if (v6)
    CFDictionarySetValue(a2, CFSTR("DestinationICCProfile"), v6);
  else
    CFDictionaryRemoveValue(a2, CFSTR("DestinationICCProfile"));
  if (v7)
    CFDictionarySetValue(a2, CFSTR("DestinationYCbCrMatrix"), v7);
  else
    CFDictionaryRemoveValue(a2, CFSTR("DestinationYCbCrMatrix"));
  return 0;
}

uint64_t VTGetBitsPerComponentFromPixelFormatType(int a1)
{
  if (CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
  {
    if (a1 == 1380410945)
    {
      return 32;
    }
    else
    {
      FigCFDictionaryGetInt32IfPresent();
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTCreateColorAttachments(unint64_t a1, unint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, unint64_t a8, unint64_t a9, const void *a10, const void *a11, uint64_t a12, const void *a13, int a14, char a15, __CFDictionary **a16, __CFDictionary **a17)
{
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  const void *v26;
  const CFDictionaryKeyCallBacks *v28;
  const CFDictionaryValueCallBacks *v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  const void **v32;
  const void *v33;
  const void *v34;
  _BOOL4 v35;
  CGColorSpace *v36;
  _BOOL4 v37;
  CGColorSpaceRef v38;
  CGColorSpaceRef v39;
  __CFDictionary **v40;
  __CFDictionary **v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v47;
  CFTypeID v48;
  int v49;
  _BOOL4 v50;
  CFTypeID v51;
  _BOOL4 v52;
  CGColorSpaceRef v53;
  const void *v54;
  const void *v55;
  __CFDictionary *v56;
  _BOOL4 v57;
  _BOOL4 v58;
  int v59;
  int v60;
  _BOOL4 v61;
  const void *v62;
  const void **v63;
  const void *v64;
  const void *v65;
  __CFDictionary *v66;
  CGColorSpaceRef v67;
  _BOOL4 v68;
  int v73;

  if (a3)
    v17 = a4 == 0;
  else
    v17 = 1;
  v18 = !v17;
  if (a1 | a2)
    v19 = 1;
  else
    v19 = v18;
  if (a10)
    v20 = a11 == 0;
  else
    v20 = 1;
  v21 = !v20;
  if (a8 | a9)
    v22 = 1;
  else
    v22 = v21;
  v73 = v22;
  if (a16)
    v23 = a17 == 0;
  else
    v23 = 1;
  if (v23)
    return FigSignalErrorAt();
  v26 = a4;
  v68 = (a1 | a2) != 0;
  v28 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v29 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v31 = CFDictionaryCreateMutable(0, 0, v28, v29);
  v32 = (const void **)MEMORY[0x1E0CA8EE8];
  if (a6)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], a6);
  if (a13)
    CFDictionarySetValue(v31, *v32, a13);
  if (v26 && a5)
  {
    FigSignalErrorAt();
    v26 = 0;
  }
  if (!a11 && !v26 && a3 && a5 && (!a10 || FigCFEqual()))
  {
    v33 = (const void *)*MEMORY[0x1E0CA8D68];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], a3);
    v34 = (const void *)*MEMORY[0x1E0CA8E48];
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8E48], a5);
    CFDictionarySetValue(v31, v33, a3);
    CFDictionarySetValue(v31, v34, a5);
  }
  if ((v19 | v73) != 1)
  {
    v38 = 0;
    v39 = 0;
    v41 = a16;
    v40 = a17;
    goto LABEL_53;
  }
  if (!v19)
  {
    v38 = 0;
    v39 = 0;
    v41 = a16;
    v40 = a17;
    v42 = a7;
    goto LABEL_45;
  }
  if (FigCFEqual())
  {
    v35 = 1;
    v36 = (CGColorSpace *)a1;
  }
  else
  {
    v47 = FigCFEqual();
    v35 = v47 != 0;
    v36 = (CGColorSpace *)a1;
    if (!v47 && a1)
    {
      v48 = CFGetTypeID((CFTypeRef)a1);
      v35 = v48 == CGColorSpaceGetTypeID() && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)a1);
    }
  }
  if (FigCFEqual())
  {
    v37 = 1;
  }
  else
  {
    v49 = FigCFEqual();
    v37 = v49 != 0;
    if (!v49 && a8)
    {
      v50 = v35;
      v51 = CFGetTypeID((CFTypeRef)a8);
      v37 = v51 == CGColorSpaceGetTypeID() && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)a8);
      v36 = (CGColorSpace *)a1;
      v35 = v50;
    }
  }
  if (!v36)
  {
    v54 = (const void *)a2;
    if (a2)
    {
      v55 = (const void *)*MEMORY[0x1E0CA8E40];
      v56 = Mutable;
    }
    else
    {
      v38 = 0;
      if (!a3 || !v26)
        goto LABEL_91;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], a3);
      v55 = (const void *)*MEMORY[0x1E0CA8E98];
      v56 = Mutable;
      v54 = v26;
    }
    CFDictionarySetValue(v56, v55, v54);
    v38 = 0;
    goto LABEL_91;
  }
  if (FigCFEqual() && (FigCFEqual() ? (v52 = v37) : (v52 = 0), v52))
    v38 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
  else
    v38 = 0;
  if (v38)
    v53 = v38;
  else
    v53 = v36;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8CD8], v53);
LABEL_91:
  if (!v73)
  {
    if (a15)
    {
      if (!a7 || !a14)
      {
        v45 = FigSignalErrorAt();
        v39 = 0;
        if (!v38)
          goto LABEL_55;
        goto LABEL_54;
      }
      v59 = VTGetBitsPerComponentFromPixelFormatType(a7);
      v60 = VTGetBitsPerComponentFromPixelFormatType(a14);
      v61 = v59 > 9 && v35;
      v36 = (CGColorSpace *)a1;
      if (v61 && v60 <= 9)
      {
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8D68], (const void *)*MEMORY[0x1E0CA8D88]);
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8E98], (const void *)*MEMORY[0x1E0CA8EB0]);
        v43 = a14;
        v42 = a7;
        if (CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
          FigCFDictionaryGetBooleanIfPresent();
        else
          FigSignalErrorAt();
        v39 = 0;
        v41 = a16;
        v40 = a17;
        goto LABEL_46;
      }
    }
    v42 = a7;
    if (v68)
    {
      if (v36)
        v62 = v36;
      else
        v62 = (const void *)a2;
      v63 = (const void **)MEMORY[0x1E0CA8CD8];
      if (!v36)
        v63 = (const void **)MEMORY[0x1E0CA8E40];
      CFDictionarySetValue(v31, *v63, v62);
    }
    v39 = 0;
    v41 = a16;
    v40 = a17;
    if (a3 && v26)
    {
      CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8D68], a3);
      CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8E98], v26);
      v39 = 0;
    }
LABEL_45:
    v43 = a14;
    goto LABEL_46;
  }
  if (!a8)
  {
    v41 = a16;
    v40 = a17;
    v43 = a14;
    v64 = (const void *)a9;
    if (a9)
    {
      v65 = (const void *)*MEMORY[0x1E0CA8E40];
      v66 = v31;
    }
    else
    {
      v39 = 0;
      if (!a10 || !a11)
        goto LABEL_132;
      CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8D68], a10);
      v65 = (const void *)*MEMORY[0x1E0CA8E98];
      v66 = v31;
      v64 = a11;
    }
    CFDictionarySetValue(v66, v65, v64);
    v39 = 0;
LABEL_132:
    v42 = a7;
    goto LABEL_46;
  }
  v57 = v35;
  v41 = a16;
  v40 = a17;
  v43 = a14;
  if (FigCFEqual())
  {
    if (FigCFEqual())
      v58 = v57;
    else
      v58 = 0;
    v42 = a7;
    if (v58)
      v39 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
    else
      v39 = 0;
  }
  else
  {
    v39 = 0;
    v42 = a7;
  }
  if (v39)
    v67 = v39;
  else
    v67 = (CGColorSpaceRef)a8;
  CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8CD8], v67);
LABEL_46:
  v44 = v42 == 1651521076 || v42 == 1647392369;
  if (v44 && v43 == 1380411457)
    CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E0CA8E90], (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_53:
  v45 = 0;
  *v41 = Mutable;
  *v40 = v31;
  Mutable = 0;
  v31 = 0;
  if (v38)
LABEL_54:
    CFRelease(v38);
LABEL_55:
  if (v39)
    CFRelease(v39);
  if (Mutable)
    CFRelease(Mutable);
  if (v31)
    CFRelease(v31);
  return v45;
}

uint64_t VTDoColorDictionariesMatch(const __CFDictionary *a1, const __CFDictionary *a2)
{
  uint64_t v2;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  v2 = 1;
  if (a1 && a2)
  {
    VTCreateColorSpacesFromDictionaries(a1, a2, &cf, &v4);
    v2 = FigCFEqual();
    if (cf)
      CFRelease(cf);
    if (v4)
      CFRelease(v4);
  }
  return v2;
}

uint64_t VTCreateColorSpacesFromDictionaries(CFDictionaryRef theDict, CFDictionaryRef MutableCopy, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  const void **v7;
  const void **v8;
  const void **v9;
  const void **v10;
  const void *Value;
  void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  const void *v19;
  _BOOL4 v20;
  BOOL v21;
  const void *v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  BOOL v25;
  int v26;
  int v27;
  char v28;
  const void **v29;
  const void *v30;
  CGColorSpaceRef v31;
  int v32;
  _BOOL4 v33;
  CFTypeID v34;
  const void *v35;
  CGColorSpaceRef ColorSpaceFromAttachments;
  CFTypeID v37;
  const void *v40;
  BOOL v41;
  const void *v42;
  const void *v43;

  result = 4294954394;
  if (!a3 || !a4)
    return result;
  v7 = (const void **)MEMORY[0x1E0CA8CD8];
  v8 = (const void **)MEMORY[0x1E0CA8E40];
  v9 = (const void **)MEMORY[0x1E0CA8D68];
  v10 = (const void **)MEMORY[0x1E0CA8E98];
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8CD8]);
    if (Value)
      v12 = (void *)CFRetain(Value);
    else
      v12 = 0;
    v13 = CFDictionaryGetValue(theDict, *v8);
    v43 = CFDictionaryGetValue(theDict, *v9);
    v14 = CFDictionaryGetValue(theDict, *v10);
    v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8E48]);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v43 = 0;
    v14 = 0;
    v15 = 0;
  }
  v40 = v15;
  if (!MutableCopy)
  {
    v17 = 0;
    v18 = 0;
    v42 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v12 != 0;
    v41 = 1;
    goto LABEL_22;
  }
  v16 = CFDictionaryGetValue(MutableCopy, *v7);
  if (v16)
    v17 = (void *)CFRetain(v16);
  else
    v17 = 0;
  v22 = CFDictionaryGetValue(MutableCopy, *v8);
  v18 = CFDictionaryGetValue(MutableCopy, *v9);
  v42 = CFDictionaryGetValue(MutableCopy, *v10);
  v19 = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8E48]);
  v21 = v12 != 0;
  v41 = v17 != 0;
  if (!v12 || !v17 || !FigCFEqual())
  {
    if (v13 && v22 && FigCFEqual())
    {
LABEL_40:
      v24 = 0;
      v23 = 0;
      goto LABEL_79;
    }
    v20 = v17 != 0;
LABEL_22:
    if (v43)
      v25 = v18 == 0;
    else
      v25 = 1;
    v26 = !v25;
    if (!v25 && v14 && v42 && FigCFEqual() && FigCFEqual())
      goto LABEL_40;
    v27 = v40 ? v26 : 0;
    if (v27 == 1 && v19 && FigCFEqual() && FigCFEqual())
      goto LABEL_40;
    if (theDict)
      v28 = v21;
    else
      v28 = 1;
    v29 = (const void **)MEMORY[0x1E0CA8EE8];
    if ((v28 & 1) != 0)
    {
      v24 = 0;
      goto LABEL_63;
    }
    v30 = (const void *)*MEMORY[0x1E0CA8EE8];
    if (CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8EE8]))
    {
      v24 = 0;
    }
    else
    {
      theDict = (CFDictionaryRef)FigCFDictionaryCreateMutableCopy();
      CFDictionarySetValue(theDict, v30, (const void *)*MEMORY[0x1E0C9B0D0]);
      v24 = theDict;
    }
    if (!FigCFEqual())
    {
      v32 = FigCFEqual();
      if (v32)
        v33 = 0;
      else
        v33 = v20;
      if (v33)
      {
        v34 = CFGetTypeID(v17);
        if (v34 != CGColorSpaceGetTypeID() || !CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)v17))
          goto LABEL_61;
      }
      else if (!v32)
      {
        goto LABEL_61;
      }
    }
    if (FigCFEqual() && FigCFEqual())
    {
      v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
LABEL_62:
      v12 = v31;
LABEL_63:
      if (v41)
      {
        v23 = 0;
      }
      else
      {
        v35 = *v29;
        if (CFDictionaryGetValue(MutableCopy, *v29))
        {
          v23 = 0;
        }
        else
        {
          MutableCopy = (CFDictionaryRef)FigCFDictionaryCreateMutableCopy();
          CFDictionarySetValue(MutableCopy, v35, (const void *)*MEMORY[0x1E0C9B0D0]);
          v23 = MutableCopy;
        }
        if ((FigCFEqual()
           || FigCFEqual()
           || v12
           && (v37 = CFGetTypeID(v12), v37 == CGColorSpaceGetTypeID())
           && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)v12))
          && FigCFEqual()
          && FigCFEqual())
        {
          ColorSpaceFromAttachments = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
        }
        else
        {
          ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(MutableCopy);
        }
        v17 = ColorSpaceFromAttachments;
      }
      if (!FigCFEqual())
      {
        *a3 = v12;
        *a4 = v17;
        if (!v24)
          goto LABEL_85;
        goto LABEL_84;
      }
LABEL_79:
      if (!v12)
        goto LABEL_81;
      goto LABEL_80;
    }
LABEL_61:
    v31 = CVImageBufferCreateColorSpaceFromAttachments(theDict);
    goto LABEL_62;
  }
  v23 = 0;
  v24 = 0;
LABEL_80:
  CFRelease(v12);
LABEL_81:
  if (v17)
    CFRelease(v17);
  if (!v24)
    goto LABEL_85;
LABEL_84:
  CFRelease(v24);
LABEL_85:
  if (v23)
    CFRelease(v23);
  return 0;
}

uint64_t VTCreateVImageConverter(int a1, CGColorSpace *a2, int a3, CGColorSpace *a4, vImageConverterRef *a5)
{
  CGBitmapInfo v8;
  uint64_t v9;
  CGBitmapInfo v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  const CGColorConversionInfo *v13;
  const CGColorConversionInfo *v14;
  vImageConverterRef v15;
  uint64_t v16;
  vImage_Error error;
  vImage_CGImageFormat dFormat;
  vImage_CGImageFormat sFormat;

  if (!a5)
    return FigSignalErrorAt();
  v8 = 0;
  *(_QWORD *)&sFormat.renderingIntent = 0;
  *(_QWORD *)&dFormat.renderingIntent = 0;
  error = 0;
  v9 = 0;
  if (a1 <= 1380410944)
  {
    if (a1 == 32)
    {
      v9 = 0x2000000008;
      v8 = 4;
    }
    else if (a1 == 1111970369)
    {
      v9 = 0x2000000008;
      v8 = 8196;
    }
  }
  else
  {
    switch(a1)
    {
      case 1380410945:
        v9 = 0x8000000020;
        v8 = 8451;
        break;
      case 1380411457:
        v9 = 0x4000000010;
        v8 = 4355;
        break;
      case 1815491698:
        v9 = 0x4000000010;
        v8 = 4099;
        break;
    }
  }
  v10 = 0;
  sFormat.bitmapInfo = v8;
  *(_QWORD *)&sFormat.bitsPerComponent = v9;
  sFormat.colorSpace = a2;
  v11 = 0;
  *(_OWORD *)&sFormat.version = 0uLL;
  if (a3 <= 1380410944)
  {
    if (a3 == 32)
    {
      v11 = 0x2000000008;
      v10 = 4;
    }
    else if (a3 == 1111970369)
    {
      v11 = 0x2000000008;
      v10 = 8196;
    }
  }
  else
  {
    switch(a3)
    {
      case 1380410945:
        v11 = 0x8000000020;
        v10 = 8451;
        break;
      case 1380411457:
        v11 = 0x4000000010;
        v10 = 4355;
        break;
      case 1815491698:
        v11 = 0x4000000010;
        v10 = 4099;
        break;
    }
  }
  dFormat.bitmapInfo = v10;
  *(_QWORD *)&dFormat.bitsPerComponent = v11;
  dFormat.colorSpace = a4;
  *(_OWORD *)&dFormat.version = 0uLL;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("kCGUseLegacyHDREcosystem"), (const void *)*MEMORY[0x1E0C9AE50]);
  v13 = CGColorConversionInfoCreateFromList(Mutable, a2, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a4, 1, 0, 0);
  v14 = v13;
  if (v13)
  {
    v15 = vImageConverter_CreateWithCGColorConversionInfo(v13, &sFormat, &dFormat, 0, 0, &error);
    if (v15)
      goto LABEL_26;
LABEL_32:
    v16 = 4294955084;
    if (!Mutable)
      goto LABEL_28;
    goto LABEL_27;
  }
  v15 = vImageConverter_CreateWithCGImageFormat(&sFormat, &dFormat, 0, 0, &error);
  if (!v15)
    goto LABEL_32;
LABEL_26:
  v16 = 0;
  *a5 = v15;
  if (Mutable)
LABEL_27:
    CFRelease(Mutable);
LABEL_28:
  if (v14)
    CFRelease(v14);
  return v16;
}

BOOL VTIsBufferTaggedWithColorProperties(const void *a1)
{
  return CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0)
      || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0)
      || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0)
      || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0)
      || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E40], 0) != 0;
}

uint64_t VTIsPixelBufferCompatibleWithColorProperties(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, CGColorSpaceRef *a6)
{
  uint64_t Value;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  const void **v17;
  CGColorSpaceRef ColorSpaceFromAttachments;

  if (checkTransferServiceTrace_onceToken == -1)
  {
    if (a2)
      goto LABEL_6;
  }
  else
  {
    dispatch_once_f(&checkTransferServiceTrace_onceToken, 0, (dispatch_function_t)initTransferServiceTrace);
    if (a2)
      goto LABEL_6;
  }
  if (!a3 && !a4 && !a5)
    return 1;
LABEL_6:
  if (!VTIsBufferTaggedWithColorProperties(a1))
    return 1;
  Value = 1;
  v13 = CVBufferCopyAttachments((CVBufferRef)a1, kCVAttachmentMode_ShouldPropagate);
  v14 = v13;
  if (a2)
  {
    if (v13)
      CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA8D68]);
    Value = FigCFEqual() != 0;
  }
  if (a3 && (_DWORD)Value)
  {
    if (v14)
      CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8E98]);
    if (FigCFEqual())
      Value = Value;
    else
      Value = 0;
  }
  if (a4 && (_DWORD)Value)
  {
    if (v14)
      CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8EE8]);
    if (FigCFEqual())
      Value = Value;
    else
      Value = 0;
  }
  if (a5 && (_DWORD)Value)
  {
    if (v14)
      CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8E40]);
    if (FigCFEqual())
      Value = Value;
    else
      Value = 0;
  }
  if (!a6 || (_DWORD)Value)
  {
    if (!v14)
      return Value;
    goto LABEL_54;
  }
  if (v14)
  {
    Value = (uint64_t)CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8CD8]);
    if (!Value)
    {
LABEL_54:
      CFRelease(v14);
      return Value;
    }
    if (*a6)
    {
LABEL_53:
      Value = FigCFEqual();
      goto LABEL_54;
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v16 = Mutable;
    if (a5)
    {
      v17 = (const void **)MEMORY[0x1E0CA8E40];
    }
    else
    {
      if (a2)
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], a2);
      if (a3)
        CFDictionaryAddValue(v16, (const void *)*MEMORY[0x1E0CA8E98], a3);
      if (!a4)
        goto LABEL_50;
      v17 = (const void **)MEMORY[0x1E0CA8EE8];
      a5 = a4;
    }
    CFDictionaryAddValue(v16, *v17, a5);
LABEL_50:
    ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v16);
    if (v16)
      CFRelease(v16);
    *a6 = ColorSpaceFromAttachments;
    goto LABEL_53;
  }
  return 0;
}

CFTypeID VTFrameSiloGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTFrameSiloGetTypeID_sRegisterVTFrameSiloOnce, RegisterVTFrameSilo);
  return sVTFrameSiloID;
}

uint64_t RegisterVTFrameSilo()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTFrameSiloID = result;
  return result;
}

OSStatus VTFrameSiloCreate(CFAllocatorRef allocator, CFURLRef fileURL, CMTimeRange *timeRange, CFDictionaryRef options, VTFrameSiloRef *frameSiloOut)
{
  uint64_t Instance;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  OSStatus v18;
  CFStringRef v19;
  OSStatus v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CMTimeRange range2;
  CMTimeRange range1;
  CFArrayCallBacks callBacks;

  if (!frameSiloOut)
    return -12902;
  MEMORY[0x1940281CC](&VTFrameSiloGetTypeID_sRegisterVTFrameSiloOnce, RegisterVTFrameSilo, timeRange, options);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return -12904;
  v10 = Instance;
  memset(&callBacks, 0, sizeof(callBacks));
  v11 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(Instance + 32) = *MEMORY[0x1E0CA2E18];
  v12 = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(Instance + 72) = 1;
  *(_QWORD *)(Instance + 48) = v12;
  *(_QWORD *)(Instance + 56) = 1;
  v13 = *(_OWORD *)&timeRange->start.epoch;
  *(_OWORD *)&range1.start.value = *(_OWORD *)&timeRange->start.value;
  *(_OWORD *)&range1.start.epoch = v13;
  *(_OWORD *)&range1.duration.timescale = *(_OWORD *)&timeRange->duration.timescale;
  v14 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v24 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&range2.start.value = *MEMORY[0x1E0CA2E40];
  v22 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v23 = v14;
  *(_OWORD *)&range2.start.epoch = v14;
  *(_OWORD *)&range2.duration.timescale = v22;
  if (!CMTimeRangeEqual(&range1, &range2)
    && ((timeRange->start.flags & 1) == 0
     || (timeRange->duration.flags & 1) == 0
     || timeRange->duration.epoch
     || timeRange->duration.value < 0))
  {
    v18 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v15 = malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  *(_QWORD *)(v10 + 64) = v15;
  v17 = *(_OWORD *)&timeRange->start.epoch;
  v16 = *(_OWORD *)&timeRange->duration.timescale;
  *v15 = *(_OWORD *)&timeRange->start.value;
  v15[1] = v17;
  v15[2] = v16;
  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)vtFrameSiloFormatDescriptionRetain;
  callBacks.release = (CFArrayReleaseCallBack)vtFrameSiloFormatDescriptionRelease;
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)vtFrameSiloFormatDescriptionCopyDescription;
  callBacks.equal = (CFArrayEqualCallBack)vtFrameSiloFormatDescriptionEqual;
  *(_QWORD *)(v10 + 80) = CFArrayCreateMutable(allocator, 0, &callBacks);
  *(_OWORD *)&range1.start.value = v24;
  *(_OWORD *)&range1.start.epoch = v23;
  *(_OWORD *)&range1.duration.timescale = v22;
  v18 = VTMultiPassStorageCreate(allocator, fileURL, &range1, 0, (VTMultiPassStorageRef *)(v10 + 24));
  if (v18)
  {
LABEL_17:
    v20 = v18;
LABEL_18:
    CFRelease((CFTypeRef)v10);
    return v20;
  }
  v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("VTFrameSilo-%d"), 1);
  v20 = VTMultiPassStorageSetIdentifier(*(_QWORD *)(v10 + 24), v19);
  if (!v20)
  {
    *frameSiloOut = (VTFrameSiloRef)v10;
    v10 = 0;
  }
  if (v19)
    CFRelease(v19);
  if (v10)
    goto LABEL_18;
  return v20;
}

uint64_t vtFrameSiloFormatDescriptionRetain(uint64_t a1, uint64_t a2)
{
  return a2;
}

void vtFrameSiloFormatDescriptionRelease(int a1, _QWORD *a2)
{
  const void *v3;

  v3 = (const void *)a2[6];
  if (v3)
    CFRelease(v3);
  free(a2);
}

__CFString *vtFrameSiloFormatDescriptionCopyDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTFrameSiloFormatDescription>{formatDescription:%p, timeRange:[%lld/%d,%lld/%d]}"), *(_QWORD *)(a1 + 48), *(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
  return Mutable;
}

uint64_t vtFrameSiloFormatDescriptionEqual()
{
  return FigCFEqual();
}

uint64_t VTFrameSiloInvalidate(uint64_t a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 16) = 1;
    v2 = *(void **)(a1 + 64);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v3 = *(const void **)(a1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 80) = 0;
    }
    VTMultiPassStorageClose(*(VTMultiPassStorageRef *)(a1 + 24));
    v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return 0;
}

OSStatus VTFrameSiloAddSampleBuffer(VTFrameSiloRef silo, CMSampleBufferRef sampleBuffer)
{
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  CMFormatDescriptionRef FormatDescription;
  CMFormatDescriptionRef v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  const __CFArray *v17;
  CFIndex Count;
  __int128 *ValueAtIndex;
  char *v20;
  CFIndex v21;
  CFIndex v22;
  __int128 v23;
  CFIndex v24;
  _QWORD *v25;
  __int128 v26;
  const __CFArray *v27;
  CFIndex v28;
  uint64_t v29;
  OSStatus TimeStamp;
  uint64_t v31;
  CFIndex v32;
  CMTime *v33;
  CMTime *v34;
  __int128 v35;
  BOOL v36;
  char v37;
  __int128 v38;
  BOOL v39;
  __int128 v40;
  _DWORD *v41;
  CMTimeValue v42;
  CMTimeScale v43;
  const __CFAllocator *v44;
  __CFData *Mutable;
  OSStatus SampleTimingInfoArray;
  CFArrayRef SampleAttachmentsArray;
  const __CFData *Data;
  OpaqueCMBlockBuffer *DataBuffer;
  OSStatus Code;
  CFIndex Length;
  const UInt8 *BytePtr;
  size_t v53;
  OSStatus DataPointer;
  uint64_t v55;
  char *v56;
  CMTimeEpoch v57;
  const opaqueCMFormatDescription *v58;
  CMTimeRange time2;
  CMTime v60;
  CMTime v61;
  CMTime duration;
  CMTime time;
  CMSampleTimingInfo time1;
  CMTimeValue v65;
  CMTimeScale v66;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v69;
  CMTimeScale v70;
  UInt8 bytes[8];
  CMTimeScale v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (!silo || *((_BYTE *)silo + 16) || !sampleBuffer || !CMSampleBufferIsValid(sampleBuffer))
    return FigSignalErrorAt();
  CMSampleBufferGetDecodeTimeStamp(&time1.duration, sampleBuffer);
  value = time1.duration.value;
  flags = time1.duration.flags;
  timescale = time1.duration.timescale;
  epoch = time1.duration.epoch;
  CMSampleBufferGetPresentationTimeStamp(&time1.duration, sampleBuffer);
  v65 = time1.duration.value;
  v66 = time1.duration.timescale;
  if ((flags & 1) == 0)
    return FigSignalErrorAt();
  v7 = (_OWORD *)((char *)silo + 32);
  if ((*((_BYTE *)silo + 44) & 1) != 0)
  {
    time1.duration.value = value;
    time1.duration.timescale = timescale;
    time1.duration.flags = flags;
    time1.duration.epoch = epoch;
    *(_OWORD *)&time2.start.value = *v7;
    time2.start.epoch = *((_QWORD *)silo + 6);
    if (CMTimeCompare(&time1.duration, &time2.start) <= 0)
      return FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)v7 = value;
    *((_DWORD *)silo + 10) = timescale;
    *((_DWORD *)silo + 11) = flags;
    *((_QWORD *)silo + 6) = epoch;
  }
  if (!*((_BYTE *)silo + 72)
    || (v8 = *((_QWORD *)silo + 8), (*(_BYTE *)(v8 + 12) & 1) != 0)
    && (*(_BYTE *)(v8 + 36) & 1) != 0
    && !*(_QWORD *)(v8 + 40)
    && (*(_QWORD *)(v8 + 24) & 0x8000000000000000) == 0)
  {
    if (*((uint64_t *)silo + 7) >= 1)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (_OWORD *)(*((_QWORD *)silo + 8) + v9);
        *(_OWORD *)&time1.duration.value = *v11;
        *(_OWORD *)&time1.duration.epoch = v11[1];
        *(_OWORD *)&time1.presentationTimeStamp.timescale = v11[2];
        *(_OWORD *)&time2.start.value = *(_OWORD *)&time1.duration.value;
        *(_OWORD *)&time2.start.epoch = *(_OWORD *)&time1.duration.epoch;
        *(_OWORD *)&time2.duration.timescale = *(_OWORD *)&time1.presentationTimeStamp.timescale;
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = epoch;
        if (CMTimeRangeContainsTime(&time2, &time))
          goto LABEL_20;
        v12 = *((_QWORD *)silo + 7);
        ++v10;
        v9 += 48;
      }
      while (v10 < v12);
      if (v12 >= 1)
        return FigSignalErrorAt();
    }
  }
LABEL_20:
  FormatDescription = CMSampleBufferGetFormatDescription(sampleBuffer);
  if (!FormatDescription)
  {
    TimeStamp = FigSignalErrorAt();
    goto LABEL_104;
  }
  v14 = FormatDescription;
  CMSampleBufferGetDecodeTimeStamp(&time1.duration, sampleBuffer);
  *(_QWORD *)bytes = time1.duration.value;
  v15 = time1.duration.flags;
  v72 = time1.duration.timescale;
  v16 = time1.duration.epoch;
  CMSampleBufferGetPresentationTimeStamp(&time1.duration, sampleBuffer);
  v69 = time1.duration.value;
  v70 = time1.duration.timescale;
  CMSampleBufferGetOutputPresentationTimeStamp(&time2.start, sampleBuffer);
  CMSampleBufferGetPresentationTimeStamp(&time, sampleBuffer);
  CMTimeCompare(&time2.start, &time);
  if (*((_BYTE *)silo + 72))
  {
    if (CFArrayGetCount(*((CFArrayRef *)silo + 10)) < 1
      || (v17 = (const __CFArray *)*((_QWORD *)silo + 10),
          Count = CFArrayGetCount(v17),
          ValueAtIndex = (__int128 *)CFArrayGetValueAtIndex(v17, Count - 1),
          !FigCFEqual()))
    {
      v20 = (char *)malloc_type_malloc(0x38uLL, 0x106004046CD1912uLL);
      *(_QWORD *)v20 = *(_QWORD *)bytes;
      *((_DWORD *)v20 + 2) = v72;
      *((_DWORD *)v20 + 3) = v15;
      *((_QWORD *)v20 + 2) = v16;
      *((_QWORD *)v20 + 5) = v16;
      *(_OWORD *)(v20 + 24) = *(_OWORD *)v20;
      *((_QWORD *)v20 + 6) = CFRetain(v14);
      CFArrayAppendValue(*((CFMutableArrayRef *)silo + 10), v20);
      goto LABEL_70;
    }
    *((_QWORD *)ValueAtIndex + 3) = *(_QWORD *)bytes;
    *((_DWORD *)ValueAtIndex + 8) = v72;
LABEL_40:
    *((_DWORD *)ValueAtIndex + 9) = v15;
    *((_QWORD *)ValueAtIndex + 5) = v16;
    goto LABEL_70;
  }
  v21 = *((_QWORD *)silo + 11);
  if (v21 >= CFArrayGetCount(*((CFArrayRef *)silo + 10)))
  {
    v22 = CFArrayGetCount(*((CFArrayRef *)silo + 10)) - 1;
    *((_QWORD *)silo + 11) = v22;
  }
  else
  {
    v22 = *((_QWORD *)silo + 11);
  }
  if (v22 >= CFArrayGetCount(*((CFArrayRef *)silo + 10)))
  {
    ValueAtIndex = 0;
  }
  else
  {
    do
    {
      ValueAtIndex = (__int128 *)CFArrayGetValueAtIndex(*((CFArrayRef *)silo + 10), *((_QWORD *)silo + 11));
      time1.duration.value = *(_QWORD *)bytes;
      time1.duration.timescale = v72;
      time1.duration.flags = v15;
      time1.duration.epoch = v16;
      v23 = *ValueAtIndex;
      duration.epoch = *((_QWORD *)ValueAtIndex + 2);
      *(_OWORD *)&duration.value = v23;
      if ((CMTimeCompare(&time1.duration, &duration) & 0x80000000) == 0)
      {
        time1.duration.value = *(_QWORD *)bytes;
        time1.duration.timescale = v72;
        time1.duration.flags = v15;
        time1.duration.epoch = v16;
        duration = *(CMTime *)((_BYTE *)ValueAtIndex + 1);
        if (CMTimeCompare(&time1.duration, &duration) < 1)
          break;
      }
      v24 = *((_QWORD *)silo + 11) + 1;
      if (v24 >= CFArrayGetCount(*((CFArrayRef *)silo + 10)))
        break;
      v25 = CFArrayGetValueAtIndex(*((CFArrayRef *)silo + 10), *((_QWORD *)silo + 11) + 1);
      time1.duration.value = *(_QWORD *)bytes;
      time1.duration.timescale = v72;
      time1.duration.flags = v15;
      time1.duration.epoch = v16;
      v26 = *(_OWORD *)v25;
      duration.epoch = v25[2];
      *(_OWORD *)&duration.value = v26;
      if (CMTimeCompare(&time1.duration, &duration) < 0)
        break;
      v27 = (const __CFArray *)*((_QWORD *)silo + 10);
      v28 = *((_QWORD *)silo + 11) + 1;
      *((_QWORD *)silo + 11) = v28;
    }
    while (v28 < CFArrayGetCount(v27));
  }
  if (FigCFEqual())
  {
    time1.duration.value = *(_QWORD *)bytes;
    time1.duration.timescale = v72;
    time1.duration.flags = v15;
    time1.duration.epoch = v16;
    duration = *(CMTime *)((_BYTE *)ValueAtIndex + 1);
    if (CMTimeCompare(&time1.duration, &duration) < 1)
      goto LABEL_70;
    *((_QWORD *)ValueAtIndex + 3) = *(_QWORD *)bytes;
    *((_DWORD *)ValueAtIndex + 8) = v72;
    goto LABEL_40;
  }
  *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E18];
  time1.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  duration = time1.duration;
  v29 = *((_QWORD *)silo + 3);
  v61.value = *(_QWORD *)bytes;
  v61.timescale = v72;
  v61.flags = v15;
  v61.epoch = v16;
  TimeStamp = VTMultiPassStorageGetTimeStamp(v29, (__int128 *)&v61.value, CFSTR("GetPreviousTimeStamp"), (uint64_t)&time1);
  if (TimeStamp
    || (v31 = *((_QWORD *)silo + 3),
        v61.value = *(_QWORD *)bytes,
        v61.timescale = v72,
        v61.flags = v15,
        v61.epoch = v16,
        (TimeStamp = VTMultiPassStorageGetTimeStamp(v31, (__int128 *)&v61.value, CFSTR("GetNextTimeStamp"), (uint64_t)&duration)) != 0))
  {
LABEL_104:
    Code = TimeStamp;
    if (!TimeStamp)
      goto LABEL_70;
    return Code;
  }
  if (CFArrayGetCount(*((CFArrayRef *)silo + 10)) < 1)
  {
    v32 = 0;
    goto LABEL_69;
  }
  v32 = 0;
  v58 = v14;
  while (1)
  {
    v33 = (CMTime *)CFArrayGetValueAtIndex(*((CFArrayRef *)silo + 10), v32);
    v34 = v33;
    if ((time1.duration.flags & 0x1D) == 1)
    {
      v61 = v33[1];
      v60 = time1.duration;
      if (CMTimeCompare(&v61, &v60) >= 1)
      {
        v35 = *(_OWORD *)&v34->value;
        v61.epoch = v34->epoch;
        *(_OWORD *)&v61.value = v35;
        v60 = time1.duration;
        v36 = CMTimeCompare(&v61, &v60) > 0;
        v37 = 1;
        goto LABEL_51;
      }
      v37 = 0;
    }
    else
    {
      v37 = 1;
    }
    v36 = 1;
LABEL_51:
    if ((duration.flags & 0x1D) == 1)
    {
      v61 = duration;
      v38 = *(_OWORD *)&v34->value;
      v60.epoch = v34->epoch;
      *(_OWORD *)&v60.value = v38;
      if (CMTimeCompare(&v61, &v60) < 1)
      {
        v14 = v58;
        goto LABEL_69;
      }
      v61 = duration;
      v60 = v34[1];
      v39 = CMTimeCompare(&v61, &v60) > 0;
    }
    else
    {
      v39 = 1;
    }
    if ((v37 & 1) == 0)
    {
      v14 = v58;
      if (!v39)
        goto LABEL_69;
      goto LABEL_65;
    }
    if (!v36)
      break;
    v14 = v58;
    if (!v39)
    {
      v40 = *(_OWORD *)&duration.value;
      v34->epoch = duration.epoch;
      *(_OWORD *)&v34->value = v40;
      goto LABEL_69;
    }
    CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)silo + 10), v32);
LABEL_59:
    if (v32 >= CFArrayGetCount(*((CFArrayRef *)silo + 10)))
      goto LABEL_69;
  }
  v14 = v58;
  if (v39)
  {
    *(_OWORD *)&v34[1].value = *(_OWORD *)&time1.duration.value;
    v34[1].epoch = time1.duration.epoch;
LABEL_65:
    ++v32;
    goto LABEL_59;
  }
  v56 = (char *)malloc_type_malloc(0x38uLL, 0x106004046CD1912uLL);
  *(CMTime *)v56 = duration;
  v57 = v34[1].epoch;
  *(_OWORD *)(v56 + 24) = *(_OWORD *)&v34[1].value;
  *((_QWORD *)v56 + 5) = v57;
  *((_QWORD *)v56 + 6) = CFRetain((CFTypeRef)v34[2].value);
  CFArrayInsertValueAtIndex(*((CFMutableArrayRef *)silo + 10), ++v32, v56);
  *(_OWORD *)&v34[1].value = *(_OWORD *)&time1.duration.value;
  v34[1].epoch = time1.duration.epoch;
LABEL_69:
  v41 = malloc_type_malloc(0x38uLL, 0x106004046CD1912uLL);
  v42 = *(_QWORD *)bytes;
  *(_QWORD *)v41 = *(_QWORD *)bytes;
  v43 = v72;
  v41[2] = v72;
  v41[3] = v15;
  *((_QWORD *)v41 + 2) = v16;
  *((_QWORD *)v41 + 3) = v42;
  v41[8] = v43;
  v41[9] = v15;
  *((_QWORD *)v41 + 5) = v16;
  *((_QWORD *)v41 + 6) = CFRetain(v14);
  CFArrayInsertValueAtIndex(*((CFMutableArrayRef *)silo + 10), v32, v41);
LABEL_70:
  memset(&time1, 0, sizeof(time1));
  time2.start.value = 0;
  time.value = 0;
  duration.value = 0;
  v61.value = 0;
  *(_DWORD *)bytes = 0;
  v60.value = 0;
  v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(sampleBuffer, 0, 0, &v61.value);
  if (SampleTimingInfoArray)
    goto LABEL_107;
  if (v61.value != 1)
  {
    SampleTimingInfoArray = FigSignalErrorAt();
    goto LABEL_107;
  }
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(sampleBuffer, 1, &time1, 0);
  if (SampleTimingInfoArray)
  {
LABEL_107:
    Code = SampleTimingInfoArray;
    Data = 0;
    goto LABEL_101;
  }
  CFDataAppendBytes(Mutable, (const UInt8 *)&time1, 72);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sampleBuffer, 1u);
  Data = CFPropertyListCreateData(v44, SampleAttachmentsArray, kCFPropertyListBinaryFormat_v1_0, 0, (CFErrorRef *)&v60);
  if (!Data)
    goto LABEL_99;
  if (v60.value)
  {
    DataBuffer = (OpaqueCMBlockBuffer *)CFErrorCopyFailureReason((CFErrorRef)v60.value);
    Code = CFErrorGetCode((CFErrorRef)v60.value);
    goto LABEL_76;
  }
  Length = CFDataGetLength(Data);
  if (Length >= 0x80000000 || (*(_DWORD *)bytes = Length, (int)Length <= 0))
  {
LABEL_99:
    DataPointer = FigSignalErrorAt();
    goto LABEL_100;
  }
  CFDataAppendBytes(Mutable, bytes, 4);
  BytePtr = CFDataGetBytePtr(Data);
  CFDataAppendBytes(Mutable, BytePtr, *(int *)bytes);
  DataBuffer = CMSampleBufferGetDataBuffer(sampleBuffer);
  if (DataBuffer)
  {
    v53 = 0;
    while (1)
    {
      DataPointer = CMBlockBufferGetDataPointer(DataBuffer, v53, (size_t *)&time, (size_t *)&time2, (char **)&duration);
      if (DataPointer)
        break;
      CFDataAppendBytes(Mutable, (const UInt8 *)duration.value, time.value);
      v53 += time.value;
      if (v53 >= time2.start.value)
      {
        DataBuffer = 0;
        Code = 0;
        goto LABEL_85;
      }
    }
LABEL_100:
    Code = DataPointer;
LABEL_101:
    DataBuffer = 0;
  }
  else
  {
    Code = FigSignalErrorAt();
  }
LABEL_76:
  if (Mutable)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
LABEL_85:
  if (v60.value)
    CFRelease((CFTypeRef)v60.value);
  if (Data)
    CFRelease(Data);
  if (DataBuffer)
    CFRelease(DataBuffer);
  if (!Code)
  {
    v55 = *((_QWORD *)silo + 3);
    time1.duration.value = value;
    time1.duration.timescale = timescale;
    time1.duration.flags = flags;
    time1.duration.epoch = epoch;
    Code = VTMultiPassStorageSetDataAtTimeStamp(v55, (__int128 *)&time1.duration.value, 0, Mutable);
    if (!Code)
    {
      *((_QWORD *)silo + 4) = value;
      *((_DWORD *)silo + 10) = timescale;
      *((_DWORD *)silo + 11) = flags;
      *((_QWORD *)silo + 6) = epoch;
    }
  }
  if (Mutable)
    CFRelease(Mutable);
  return Code;
}

OSStatus VTFrameSiloSetTimeRangesForNextPass(VTFrameSiloRef silo, CMItemCount timeRangeCount, const CMTimeRange *timeRangeArray)
{
  OSStatus result;
  CMTimeFlags flags;
  CMTimeValue v8;
  CMTimeEpoch epoch;
  CMTimeScale v10;
  CMTimeFlags v11;
  uint64_t v12;
  void *v13;
  CMTimeValue v14;
  CMTimeEpoch v15;
  CMTimeScale v16;
  CMTime *p_duration;
  CMItemCount v18;
  CMTimeFlags v19;
  CMTimeFlags v20;
  CMTimeValue v21;
  CMTimeEpoch v22;
  CMTimeScale v23;
  CMTimeEpoch v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  CMTimeRange *v28;
  CMTimeEpoch v29;
  uint64_t v30;
  uint64_t v31;
  const CMTimeRange *__src;
  unint64_t v33;
  VTFrameSiloRef v34;
  CMTimeScale v35;
  CMTimeValue v36;
  CMTime time2;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v40;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v43;
  CMTimeScale v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43 = *MEMORY[0x1E0CA2E40];
  v44 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
  if (!silo || *((_BYTE *)silo + 16) || timeRangeCount <= 0 || !timeRangeArray)
    return FigSignalErrorAt();
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v11 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
  *((_BYTE *)silo + 72) = 0;
  *((_QWORD *)silo + 7) = 0;
  v13 = (void *)*((_QWORD *)silo + 8);
  if (v13)
  {
    v14 = v8;
    v15 = epoch;
    v16 = v10;
    free(v13);
    v10 = v16;
    epoch = v15;
    v8 = v14;
    *((_QWORD *)silo + 8) = 0;
  }
  v34 = silo;
  __src = timeRangeArray;
  v33 = timeRangeCount;
  p_duration = &timeRangeArray->duration;
  v18 = timeRangeCount;
  do
  {
    v19 = flags;
    value = p_duration[-1].value;
    flags = p_duration[-1].flags;
    timescale = p_duration[-1].timescale;
    if ((flags & 1) == 0)
      return FigSignalErrorAt();
    v20 = v11;
    v11 = p_duration->flags;
    if ((v11 & 1) == 0)
      return FigSignalErrorAt();
    if (p_duration->epoch)
      return FigSignalErrorAt();
    v21 = v8;
    v8 = p_duration->value;
    if (p_duration->value < 0 || (flags & 0x1D) != 1 || (p_duration->flags & 0x1D) != 1)
      return FigSignalErrorAt();
    v22 = epoch;
    v23 = v10;
    epoch = p_duration[-1].epoch;
    v10 = p_duration->timescale;
    if ((v19 & 1) != 0 && (v20 & 1) != 0 && !v12 && (v21 & 0x8000000000000000) == 0)
    {
      memset(&v40, 0, sizeof(v40));
      range.start.value = p_duration[-1].value;
      range.start.timescale = p_duration[-1].timescale;
      range.start.flags = flags;
      v24 = epoch;
      range.start.epoch = epoch;
      range.duration.value = v8;
      v36 = v8;
      v35 = v10;
      range.duration.timescale = v10;
      range.duration.flags = v11;
      range.duration.epoch = 0;
      otherRange.start.value = v43;
      otherRange.start.timescale = v44;
      otherRange.start.flags = v19;
      otherRange.start.epoch = v22;
      otherRange.duration.value = v21;
      otherRange.duration.timescale = v23;
      otherRange.duration.flags = v20;
      otherRange.duration.epoch = 0;
      CMTimeRangeGetIntersection(&v40, &range, &otherRange);
      memset(&otherRange, 0, 24);
      range.start.value = v43;
      range.start.timescale = v44;
      range.start.flags = v19;
      range.start.epoch = v22;
      range.duration.value = v21;
      range.duration.timescale = v23;
      range.duration.flags = v20;
      range.duration.epoch = 0;
      CMTimeRangeGetEnd(&otherRange.start, &range);
      if ((v40.start.flags & 1) == 0)
        return FigSignalErrorAt();
      if ((v40.duration.flags & 1) == 0)
        return FigSignalErrorAt();
      if (v40.duration.epoch)
        return FigSignalErrorAt();
      if (v40.duration.value < 0)
        return FigSignalErrorAt();
      range.start = v40.duration;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&range.start, &time2))
        return FigSignalErrorAt();
      *(_OWORD *)&range.start.value = *(_OWORD *)&otherRange.start.value;
      range.start.epoch = otherRange.start.epoch;
      time2.value = value;
      time2.timescale = timescale;
      time2.flags = flags;
      time2.epoch = v24;
      if (CMTimeCompare(&range.start, &time2) >= 1)
        return FigSignalErrorAt();
      v8 = v36;
      epoch = v24;
      v10 = v35;
    }
    v12 = 0;
    v43 = value;
    v44 = timescale;
    p_duration += 2;
    --v18;
  }
  while (v18);
  *((_QWORD *)v34 + 7) = v33;
  if (v33 > 0x555555555555555 || !(48 * v33))
  {
    *((_QWORD *)v34 + 8) = 0;
    return -12904;
  }
  v25 = malloc_type_malloc(48 * v33, 0x5CC9CBA6uLL);
  *((_QWORD *)v34 + 8) = v25;
  if (!v25)
    return -12904;
  memcpy(v25, __src, 48 * *((_QWORD *)v34 + 7));
  v26 = MEMORY[0x1E0CA2E18];
  if (*((uint64_t *)v34 + 7) >= 1)
  {
    v27 = 0;
    do
    {
      v28 = (CMTimeRange *)(*((_QWORD *)v34 + 8) + 48 * v27);
      v40 = *v28;
      *(_OWORD *)&otherRange.start.value = *(_OWORD *)&v28->start.value;
      v29 = v28->start.epoch;
      otherRange.start.epoch = v29;
      range = v40;
      for (*(_OWORD *)&time2.value = *(_OWORD *)&otherRange.start.value;
            ;
            *(_OWORD *)&time2.value = *(_OWORD *)&otherRange.start.value)
      {
        time2.epoch = v29;
        if (!CMTimeRangeContainsTime(&range, &time2))
          break;
        *(_OWORD *)&range.start.value = *(_OWORD *)v26;
        range.start.epoch = *(_QWORD *)(v26 + 16);
        v30 = *((_QWORD *)v34 + 3);
        time2 = otherRange.start;
        result = VTMultiPassStorageSetDataAtTimeStamp(v30, (__int128 *)&time2.value, 0, 0);
        if (result)
          return result;
        v31 = *((_QWORD *)v34 + 3);
        time2 = otherRange.start;
        result = VTMultiPassStorageGetTimeStamp(v31, (__int128 *)&time2.value, CFSTR("GetNextTimeStamp"), (uint64_t)&range);
        if (result)
          return result;
        if ((range.start.flags & 1) == 0)
          break;
        *(_OWORD *)&otherRange.start.value = *(_OWORD *)&range.start.value;
        v29 = range.start.epoch;
        otherRange.start.epoch = range.start.epoch;
        range = v40;
      }
      ++v27;
    }
    while (v27 < *((_QWORD *)v34 + 7));
  }
  result = 0;
  *((_QWORD *)v34 + 11) = 0;
  *((_OWORD *)v34 + 2) = *(_OWORD *)v26;
  *((_QWORD *)v34 + 6) = *(_QWORD *)(v26 + 16);
  return result;
}

OSStatus VTFrameSiloGetProgressOfCurrentPass(VTFrameSiloRef silo, Float32 *progressOut)
{
  CMTimeEpoch v2;
  OSStatus result;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  CMTimeFlags v9;
  CMTimeFlags v10;
  CMTimeValue v11;
  CMTimeEpoch v13;
  CMTimeScale v14;
  double Seconds;
  float v16;
  CMTimeEpoch v17;
  __int128 v19;
  CMTime start;
  CMTimeRange lhs;
  CMTime time2;
  CMTime rhs;
  CMTime v24;
  CMTime v25;
  CMTimeValue v26;
  CMTimeScale v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v25.value = *MEMORY[0x1E0CA2E68];
  v2 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v25.epoch = v2;
  v19 = *(_OWORD *)&v25.value;
  *(_OWORD *)&v24.value = *(_OWORD *)&v25.value;
  v24.epoch = v2;
  if (!silo || !progressOut || *((_BYTE *)silo + 16))
    return FigSignalErrorAt();
  v17 = v2;
  if (*((uint64_t *)silo + 7) < 1)
  {
LABEL_22:
    lhs.start = v24;
    *(_OWORD *)&rhs.value = v19;
    rhs.epoch = v17;
    if (CMTimeCompare(&lhs.start, &rhs) < 1)
    {
      v16 = 0.0;
    }
    else
    {
      lhs.start = v25;
      Seconds = CMTimeGetSeconds(&lhs.start);
      lhs.start = v24;
      v16 = Seconds / CMTimeGetSeconds(&lhs.start);
    }
    result = 0;
    *progressOut = v16;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = (_OWORD *)((char *)silo + 32);
    while (1)
    {
      v8 = *((_QWORD *)silo + 8) + v5;
      v26 = *(_QWORD *)v8;
      v9 = *(_DWORD *)(v8 + 12);
      v27 = *(_DWORD *)(v8 + 8);
      if ((v9 & 1) == 0)
        break;
      v10 = *(_DWORD *)(v8 + 36);
      if ((v10 & 1) == 0)
        break;
      if (*(_QWORD *)(v8 + 40))
        break;
      v11 = *(_QWORD *)(v8 + 24);
      if (v11 < 0)
        break;
      if ((v9 & 0x1D) != 1 || (*(_DWORD *)(v8 + 36) & 0x1D) != 1)
        break;
      v13 = *(_QWORD *)(v8 + 16);
      v14 = *(_DWORD *)(v8 + 32);
      lhs.start = v24;
      rhs.value = v11;
      rhs.timescale = v14;
      rhs.flags = v10;
      rhs.epoch = 0;
      CMTimeAdd(&v24, &lhs.start, &rhs);
      if ((*((_BYTE *)silo + 44) & 1) == 0)
        goto LABEL_19;
      lhs.start.value = v26;
      lhs.start.timescale = v27;
      lhs.start.flags = v9;
      lhs.start.epoch = v13;
      lhs.duration.value = v11;
      lhs.duration.timescale = v14;
      lhs.duration.flags = v10;
      lhs.duration.epoch = 0;
      CMTimeRangeGetEnd(&time2, &lhs);
      *(_OWORD *)&lhs.start.value = *v7;
      lhs.start.epoch = *((_QWORD *)silo + 6);
      if (CMTimeCompare(&lhs.start, &time2) >= 1)
      {
        v25 = v24;
      }
      else
      {
LABEL_19:
        lhs.start.value = v26;
        lhs.start.timescale = v27;
        lhs.start.flags = v9;
        lhs.start.epoch = v13;
        lhs.duration.value = v11;
        lhs.duration.timescale = v14;
        lhs.duration.flags = v10;
        lhs.duration.epoch = 0;
        *(_OWORD *)&rhs.value = *v7;
        rhs.epoch = *((_QWORD *)silo + 6);
        if (CMTimeRangeContainsTime(&lhs, &rhs))
        {
          memset(&lhs, 0, 24);
          *(_OWORD *)&rhs.value = *v7;
          rhs.epoch = *((_QWORD *)silo + 6);
          start.value = v26;
          start.timescale = v27;
          start.flags = v9;
          start.epoch = v13;
          CMTimeSubtract(&lhs.start, &rhs, &start);
          rhs = v25;
          start = lhs.start;
          CMTimeAdd(&v25, &rhs, &start);
        }
      }
      ++v6;
      v5 += 48;
      if (v6 >= *((_QWORD *)silo + 7))
        goto LABEL_22;
    }
    return FigSignalErrorAt();
  }
  return result;
}

OSStatus VTFrameSiloCallFunctionForEachSampleBuffer(VTFrameSiloRef silo, CMTimeRange *timeRange, void *refcon, OSStatus (__cdecl *callback)(void *, CMSampleBufferRef))
{
  CMTimeRange *v7;
  __int128 *v8;
  uint64_t v9;
  OSStatus TimeStamp;
  __int128 v11;
  __int128 v12;
  char v13;
  CFIndex v14;
  const __CFAllocator *v15;
  uint64_t v16;
  const __CFData *v17;
  size_t Length;
  UInt8 *BytePtr;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CMTimeFlags flags;
  CMTimeEpoch v24;
  int v25;
  const __CFData *v26;
  const __CFAllocator *v27;
  CMTimeRange *v28;
  const __CFArray *v29;
  CFStringRef v30;
  OSStatus Code;
  CMSampleBufferRef v32;
  OSStatus (__cdecl *v33)(void *, CMSampleBufferRef);
  const __CFArray *v34;
  const __CFData *v35;
  const __CFDictionary *ValueAtIndex;
  size_t v37;
  OSStatus v38;
  CMTime *v39;
  const opaqueCMFormatDescription *v40;
  OSStatus v41;
  const __CFArray *SampleAttachmentsArray;
  void *v43;
  OSStatus v44;
  uint64_t v45;
  __int128 v46;
  const __CFDictionary *theDict;
  const __CFArray *v48;
  OSStatus (__cdecl *v49)(void *, CMSampleBufferRef);
  const __CFAllocator *blockAllocator;
  void (__cdecl *v52)(void *, void *, size_t);
  __int128 v53;
  const __CFData *cf;
  __int128 v55;
  void (__cdecl *v56)(void *, void *, size_t);
  __int128 v57;
  void (__cdecl *epoch)(void *, void *, size_t);
  CFDataRef theData;
  CMTime end;
  CMTime start;
  CFErrorRef error;
  CFPropertyListFormat format;
  CMBlockBufferCustomBlockSource time;
  CMSampleTimingInfo range;
  size_t sampleSizeArray;
  CMSampleBufferRef sampleBufferOut;
  CMBlockBufferRef blockBufferOut;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  epoch = 0;
  theData = 0;
  v57 = 0uLL;
  if (!silo || !callback)
  {
LABEL_73:
    TimeStamp = FigSignalErrorAt();
    goto LABEL_74;
  }
  if (*((_BYTE *)silo + 16))
    return FigSignalErrorAt();
  v7 = timeRange;
  v8 = (__int128 *)MEMORY[0x1E0CA2E18];
  if ((timeRange->start.flags & 1) != 0
    && (timeRange->duration.flags & 1) != 0
    && !timeRange->duration.epoch
    && (timeRange->duration.value & 0x8000000000000000) == 0)
  {
    goto LABEL_10;
  }
  *(_OWORD *)&time.version = *MEMORY[0x1E0CA2E18];
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time.FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E18] + 16);
  v9 = *((_QWORD *)silo + 3);
  *(_OWORD *)&range.duration.value = *(_OWORD *)&time.version;
  range.duration.epoch = *(CMTimeEpoch *)((char *)&time.FreeBlock + 4);
  TimeStamp = VTMultiPassStorageGetTimeStamp(v9, (__int128 *)&range.duration.value, CFSTR("GetFirstTimeStamp"), (uint64_t)&time);
  if (TimeStamp)
  {
LABEL_74:
    Code = TimeStamp;
    v32 = 0;
    goto LABEL_65;
  }
  *(_OWORD *)&start.value = *(_OWORD *)&time.version;
  start.epoch = *(CMTimeEpoch *)((char *)&time.FreeBlock + 4);
  end = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  CMTimeRangeFromTimeToTime((CMTimeRange *)&range, &start, &end);
  v11 = *(_OWORD *)&range.duration.epoch;
  *(_OWORD *)&v7->start.value = *(_OWORD *)&range.duration.value;
  *(_OWORD *)&v7->start.epoch = v11;
  *(_OWORD *)&v7->duration.timescale = *(_OWORD *)&range.presentationTimeStamp.timescale;
LABEL_10:
  v12 = *(_OWORD *)&v7->start.epoch;
  v57 = *(_OWORD *)&v7->start.value;
  epoch = (void (__cdecl *)(void *, void *, size_t))v7->start.epoch;
  *(_OWORD *)&range.duration.value = *(_OWORD *)&v7->start.value;
  *(_OWORD *)&range.duration.epoch = v12;
  *(_OWORD *)&range.presentationTimeStamp.timescale = *(_OWORD *)&v7->duration.timescale;
  *(_OWORD *)&time.version = *(_OWORD *)&v7->start.value;
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time.FreeBlock + 4) = (void (__cdecl *)(void *, void *, size_t))v7->start.epoch;
  if (CMTimeRangeContainsTime((CMTimeRange *)&range, (CMTime *)&time))
  {
    v13 = 0;
    v14 = 0;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v53 = *v8;
    v52 = (void (__cdecl *)(void *, void *, size_t))*((_QWORD *)v8 + 2);
    blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v49 = callback;
    do
    {
      v55 = v53;
      v56 = v52;
      v16 = *((_QWORD *)silo + 3);
      *(_OWORD *)&range.duration.value = v57;
      range.duration.epoch = (CMTimeEpoch)epoch;
      TimeStamp = VTMultiPassStorageCopyDataAtTimeStamp(v16, (__int128 *)&range.duration.value, 0, &theData);
      if (TimeStamp)
        goto LABEL_74;
      v17 = theData;
      if ((v13 & (theData == 0)) == 1)
        goto LABEL_73;
      if (!theData)
      {
        v32 = 0;
        goto LABEL_50;
      }
      sampleBufferOut = 0;
      blockBufferOut = 0;
      sampleSizeArray = 0;
      memset(&range, 0, sizeof(range));
      memset(&time, 0, sizeof(time));
      error = 0;
      format = kCFPropertyListBinaryFormat_v1_0;
      Length = CFDataGetLength(theData);
      BytePtr = (UInt8 *)CFDataGetBytePtr(v17);
      CFRetain(v17);
      v21 = *((_OWORD *)BytePtr + 1);
      v20 = *((_OWORD *)BytePtr + 2);
      v22 = *((_OWORD *)BytePtr + 3);
      range.decodeTimeStamp.epoch = *((_QWORD *)BytePtr + 8);
      *(_OWORD *)&range.decodeTimeStamp.value = v22;
      *(_OWORD *)&range.duration.value = *(_OWORD *)BytePtr;
      *(_OWORD *)&range.duration.epoch = v21;
      *(_OWORD *)&range.presentationTimeStamp.timescale = v20;
      value = v22;
      timescale = DWORD2(v22);
      flags = HIDWORD(v22);
      v24 = range.decodeTimeStamp.epoch;
      if ((BYTE12(v22) & 1) == 0 && (range.presentationTimeStamp.flags & 1) != 0)
      {
        value = range.presentationTimeStamp.value;
        timescale = range.presentationTimeStamp.timescale;
        v24 = range.presentationTimeStamp.epoch;
        flags = range.presentationTimeStamp.flags;
      }
      v25 = *((_DWORD *)BytePtr + 18);
      if (v25 > 0 && (v26 = CFDataCreate(v15, BytePtr + 76, *((unsigned int *)BytePtr + 18))) != 0)
      {
        v27 = v15;
        v28 = v7;
        cf = v26;
        v29 = (const __CFArray *)CFPropertyListCreateWithData(v27, v26, 0, &format, &error);
        if (error)
        {
          v30 = CFErrorCopyFailureReason(error);
          Code = CFErrorGetCode(error);
          v32 = 0;
          v33 = v49;
          v34 = v29;
LABEL_22:
          v7 = v28;
LABEL_23:
          v35 = cf;
          goto LABEL_36;
        }
        v48 = v29;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, 0);
        if (!ValueAtIndex)
        {
          Code = FigSignalErrorAt();
          v32 = 0;
          v30 = 0;
          v34 = v29;
          v33 = v49;
          goto LABEL_22;
        }
        theDict = ValueAtIndex;
        v37 = (v25 + 76);
        sampleSizeArray = Length - v37;
        time.version = 0;
        time.AllocateBlock = 0;
        time.FreeBlock = (void (__cdecl *)(void *, void *, size_t))vtFrameSiloFreeBlockCFData;
        time.refCon = v17;
        v38 = CMBlockBufferCreateWithMemoryBlock(blockAllocator, BytePtr, Length, blockAllocator, &time, v37, Length - v37, 0, &blockBufferOut);
        v7 = v28;
        if (v38)
        {
          Code = v38;
          v32 = 0;
          v30 = 0;
          v34 = v48;
          v33 = v49;
          goto LABEL_23;
        }
        v35 = cf;
        while (1)
        {
          v39 = (CMTime *)CFArrayGetValueAtIndex(*((CFArrayRef *)silo + 10), v14);
          start = v39[1];
          end.value = value;
          end.timescale = timescale;
          end.flags = flags;
          end.epoch = v24;
          if ((CMTimeCompare(&start, &end) & 0x80000000) == 0)
            break;
          if (++v14 >= CFArrayGetCount(*((CFArrayRef *)silo + 10)))
          {
            v32 = 0;
            v30 = 0;
            Code = -12902;
            v34 = v48;
            v33 = v49;
            goto LABEL_36;
          }
        }
        v40 = (const opaqueCMFormatDescription *)v39[2].value;
        v34 = v48;
        v33 = v49;
        if (v40)
        {
          v41 = CMSampleBufferCreate(blockAllocator, blockBufferOut, 1u, 0, 0, v40, 1, 1, &range, 1, &sampleSizeArray, &sampleBufferOut);
          if (!v41)
          {
            SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
            v43 = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
            if (v43)
            {
              CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtFrameSiloMergeDictionary, v43);
              Code = 0;
              v30 = 0;
              v32 = sampleBufferOut;
              sampleBufferOut = 0;
              goto LABEL_36;
            }
            v41 = FigSignalErrorAt();
          }
          Code = v41;
          v32 = 0;
          v30 = 0;
        }
        else
        {
          v32 = 0;
          v30 = 0;
          Code = -12902;
        }
      }
      else
      {
        Code = FigSignalErrorAt();
        v32 = 0;
        v34 = 0;
        v35 = 0;
        v30 = 0;
        v33 = v49;
      }
LABEL_36:
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (sampleBufferOut)
        CFRelease(sampleBufferOut);
      if (v34)
        CFRelease(v34);
      if (v35)
        CFRelease(v35);
      if (error)
        CFRelease(error);
      v15 = blockAllocator;
      if (v30)
        CFRelease(v30);
      if (Code)
        goto LABEL_65;
      v44 = ((uint64_t (*)(void *, CMSampleBufferRef))v33)(refcon, v32);
      if (v44)
      {
LABEL_72:
        Code = v44;
        goto LABEL_65;
      }
LABEL_50:
      v45 = *((_QWORD *)silo + 3);
      *(_OWORD *)&range.duration.value = v57;
      range.duration.epoch = (CMTimeEpoch)epoch;
      v44 = VTMultiPassStorageGetTimeStamp(v45, (__int128 *)&range.duration.value, CFSTR("GetNextTimeStamp"), (uint64_t)&v55);
      if (v44)
        goto LABEL_72;
      if ((BYTE12(v55) & 1) == 0)
        goto LABEL_64;
      v57 = v55;
      epoch = v56;
      if (theData)
      {
        CFRelease(theData);
        theData = 0;
      }
      if (v32)
        CFRelease(v32);
      v46 = *(_OWORD *)&v7->start.epoch;
      *(_OWORD *)&range.duration.value = *(_OWORD *)&v7->start.value;
      *(_OWORD *)&range.duration.epoch = v46;
      *(_OWORD *)&range.presentationTimeStamp.timescale = *(_OWORD *)&v7->duration.timescale;
      *(_OWORD *)&time.version = v57;
      *(void (__cdecl **)(void *, void *, size_t))((char *)&time.FreeBlock + 4) = epoch;
      v13 = 1;
    }
    while (CMTimeRangeContainsTime((CMTimeRange *)&range, (CMTime *)&time));
  }
  v32 = 0;
LABEL_64:
  Code = 0;
LABEL_65:
  if (theData)
    CFRelease(theData);
  if (v32)
    CFRelease(v32);
  return Code;
}

OSStatus VTFrameSiloCallBlockForEachSampleBuffer(VTFrameSiloRef silo, CMTimeRange *timeRange, void *handler)
{
  __int128 v3;
  CMTimeRange v5;

  v3 = *(_OWORD *)&timeRange->start.epoch;
  *(_OWORD *)&v5.start.value = *(_OWORD *)&timeRange->start.value;
  *(_OWORD *)&v5.start.epoch = v3;
  *(_OWORD *)&v5.duration.timescale = *(_OWORD *)&timeRange->duration.timescale;
  return VTFrameSiloCallFunctionForEachSampleBuffer(silo, &v5, handler, (OSStatus (__cdecl *)(void *, CMSampleBufferRef))vtFrameSiloBlockFunctionCallback);
}

uint64_t vtFrameSiloBlockFunctionCallback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

double vtFrameSiloInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

CFTypeRef vtFrameSiloCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTFrameSilo]"));
}

__CFString *vtFrameSiloCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTFrameSilo %p [%p]>{}"), a1, v4);
  return Mutable;
}

void vtFrameSiloFreeBlockCFData(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void vtFrameSiloMergeDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  _BYTE *v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int *v48;
  unsigned int v49;
  float32x2_t v50;
  int32x2_t v58;
  float v61;
  float v62;
  float v63;
  int8x8_t v66;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  int32x2_t v77;
  float v79;
  float v80;
  int8x8_t v83;
  float v87;
  float v88;
  unsigned int v89;
  int v90;
  char v91;
  char v92;
  char v93;
  float v96;
  float v97;
  float v98;
  float v100;
  float v107;
  float v110;
  float v112;
  float v113;
  float v114;
  float v117;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v137;
  float v138;
  BOOL v139;
  float v140;
  char v141;
  float v142;
  float v143;
  char v144;
  float v145;
  float v146;
  char v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v159 = 2 * v11 - 2 * v10;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[2];
    v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 140);
    *(float *)&a6 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v20 = (float)LODWORD(a5);
    LOWORD(a7) = *(_WORD *)(v14 + 146);
    v21 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v14 + 148);
    v22 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v14 + 150);
    *(float *)&v23 = (float)LODWORD(a8);
    v183 = v21;
    v184 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    v181 = *(float *)(v14 + 36);
    v182 = (float)v23;
    v179 = *(float *)(v14 + 44);
    v180 = *(float *)(v14 + 40);
    v178 = *(float *)(v14 + 48) * 0.25;
    v177 = *(float *)(v14 + 52) * 0.25;
    v176 = *(float *)(v14 + 56) * 0.25;
    v175 = *(float *)(v14 + 60) * 0.25;
    v174 = *(float *)(v14 + 64) * 0.25;
    v172 = *(float *)(v14 + 68) * 0.25;
    v173 = *(float *)(v14 + 72);
    v170 = *(float *)(v14 + 80);
    v171 = *(float *)(v14 + 76);
    v168 = *(float *)(v14 + 88);
    v169 = *(float *)(v14 + 84);
    v166 = *(float *)(v14 + 96);
    v167 = *(float *)(v14 + 92);
    v24 = *(float *)(v14 + 108);
    v164 = *(float *)(v14 + 104);
    v165 = *(float *)(v14 + 100);
    v25 = v14 + 164;
    v26 = v14 + 16548;
    v27 = v14 + 32932;
    v28 = *(float *)(v14 + 112);
    v29 = *(float *)(v14 + 116);
    v30 = *(float *)(v14 + 120);
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v9;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = *((_QWORD *)result + 15) + 2 * v32;
    result = (unsigned __int8 *)(**((_QWORD **)result + 7)
                               + v16 * (*(_QWORD *)(result + 44) + 2 * v10)
                               + 4 * *(_QWORD *)(result + 36));
    v35 = v33[1];
    v36 = (_BYTE *)(*v33 + v34 * *v15 + v31);
    v37 = v33[2];
    if (v37)
      v38 = (_BYTE *)(v37 + v34 * v18 + v31);
    else
      v38 = 0;
    if (v34 >= 0)
      v39 = v34;
    else
      v39 = v34 + 1;
    v157 = v15[2];
    v158 = v15[1];
    v40 = v35 + (v39 >> 1) * v158 + v31;
    v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    v162 = v28;
    v163 = v24;
    v160 = v30;
    v161 = v29;
    do
    {
      v42 = &v38[v18];
      v43 = &v36[v17];
      v44 = &result[v16];
      if (v13)
      {
        v45 = 0;
        v46 = &v38[v18];
        v47 = &v36[v17];
        v48 = (unsigned int *)&result[v16];
        do
        {
          v49 = *((_DWORD *)result + 1);
          v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D3 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)result), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S19, H3 }
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          __asm { FCVT            S20, H3 }
          _D3.i32[0] = *(_DWORD *)result;
          _D3.i32[1] = v49 >> 20;
          v58 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D3, (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _H5 = *(_WORD *)(v25 + 2 * v58.u32[0]);
          __asm { FCVT            S21, H5 }
          v61 = fmaxf(_S19, fmaxf(_S20, _S21));
          v62 = (float)((float)((float)(v28 * _S20) + (float)(v24 * _S19)) + (float)(v29 * _S21)) + (float)(v30 * v61);
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)((float)((float)(v28 * _S20) + (float)(v24 * _S19)) + (float)(v29 * _S21)) + (float)(v30 * v61);
            if (v62 < 0.0)
              v63 = 0.0;
          }
          _H3 = *(_WORD *)(v25 + 2 * v58.u32[1]);
          __asm { FCVT            S24, H3 }
          v66.i32[0] = v49 >> 10;
          v66.i32[1] = *((_DWORD *)result + 1);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v66, (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S5, H3 }
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          __asm { FCVT            S3, H3 }
          v70 = fmaxf(_S24, fmaxf(_S5, _S3));
          v71 = (float)((float)((float)(v28 * _S5) + (float)(v24 * _S24)) + (float)(v29 * _S3)) + (float)(v30 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v28 * _S5) + (float)(v24 * _S24)) + (float)(v29 * _S3)) + (float)(v30 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v48[1];
          _D6 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v48), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _D6.i16[0] = *(_WORD *)(v25 + 2 * _D6.u32[0]);
          __asm { FCVT            S7, H6 }
          _D6.i16[0] = *(_WORD *)(v25 + 2 * _D6.u32[1]);
          __asm { FCVT            S16, H6 }
          _D6.i32[0] = *v48;
          _D6.i32[1] = v73 >> 20;
          v77 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D6, (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _D6.i16[0] = *(_WORD *)(v25 + 2 * v77.u32[0]);
          __asm { FCVT            S17, H6 }
          v79 = (float)((float)((float)(v28 * _S16) + (float)(v24 * _S7)) + (float)(v29 * _S17))
              + (float)(v30 * fmaxf(_S7, fmaxf(_S16, _S17)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          _H23 = *(_WORD *)(v25 + 2 * v77.u32[1]);
          __asm { FCVT            S23, H23 }
          v83.i32[0] = v73 >> 10;
          v83.i32[1] = v48[1];
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v83, (int8x8_t)0x300000003)), v41), v19), 0), v50)));
          _D25.i16[0] = *(_WORD *)(v25 + 2 * _D25.u32[0]);
          __asm { FCVT            S14, H25 }
          _D25.i16[0] = *(_WORD *)(v25 + 2 * _D25.u32[1]);
          __asm { FCVT            S25, H25 }
          v87 = (float)((float)((float)(v28 * _S14) + (float)(v24 * _S23)) + (float)(v29 * _S25))
              + (float)(v30 * fmaxf(_S23, fmaxf(_S14, _S25)));
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          if (v38)
          {
            v89 = v49 >> 30;
            v90 = 85 * (*(_DWORD *)result >> 30);
            v91 = 85 * v89;
            v92 = 85 * (*v48 >> 30);
            v93 = 85 * (v73 >> 30);
          }
          else
          {
            v92 = 0;
            LOBYTE(v90) = 0;
            v91 = 0;
            v93 = 0;
          }
          _H22 = *(_WORD *)(v26 + 2 * llroundf(v63));
          __asm { FCVT            S22, H22 }
          v96 = _S19 * _S22;
          v97 = _S20 * _S22;
          v98 = _S21 * _S22;
          LOWORD(_S22) = *(_WORD *)(v26 + 2 * llroundf(v72));
          __asm { FCVT            S22, H22 }
          v100 = _S24 * _S22;
          _S5 = _S5 * _S22;
          _S3 = _S3 * _S22;
          _H6 = *(_WORD *)(v26 + 2 * llroundf(v80));
          __asm { FCVT            S6, H6 }
          _S7 = _S7 * _S6;
          _S16 = _S16 * _S6;
          v107 = _S17 * _S6;
          _H17 = *(_WORD *)(v26 + 2 * llroundf(v88));
          __asm { FCVT            S17, H17 }
          v110 = _S23 * _S17;
          _S23 = _S14 * _S17;
          v112 = _S25 * _S17;
          v113 = (float)((float)(v171 * v97) + (float)(v96 * v173)) + (float)(v98 * v170);
          v114 = (float)((float)(v168 * v97) + (float)(v96 * v169)) + (float)(v98 * v167);
          _S19 = (float)((float)(v165 * v97) + (float)(v96 * v166)) + (float)(v98 * v164);
          _S20 = (float)((float)(v171 * _S5) + (float)(v100 * v173)) + (float)(_S3 * v170);
          v117 = (float)((float)(v168 * _S5) + (float)(v100 * v169)) + (float)(_S3 * v167);
          _S24 = (float)((float)(v165 * _S5) + (float)(v100 * v166)) + (float)(_S3 * v164);
          v119 = (float)((float)(v171 * _S16) + (float)(_S7 * v173)) + (float)(v107 * v170);
          v120 = (float)((float)(v168 * _S16) + (float)(_S7 * v169)) + (float)(v107 * v167);
          v121 = (float)((float)(v165 * _S16) + (float)(_S7 * v166)) + (float)(v107 * v164);
          v122 = (float)((float)(v171 * _S23) + (float)(v110 * v173)) + (float)(v112 * v170);
          v123 = (float)((float)(v168 * _S23) + (float)(v110 * v169)) + (float)(v112 * v167);
          _S22 = (float)((float)(v165 * _S23) + (float)(v110 * v166)) + (float)(v112 * v164);
          LOWORD(_S3) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H16
            FCVT            S16, H19
          }
          LOWORD(_S19) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S21, H19 }
          LOWORD(_S19) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S23) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          LOWORD(_S24) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S22, H22
          }
          v137 = (float)((float)((float)(v180 * _S3) + (float)(v181 * _S6)) + (float)(v179 * _S5)) + v20;
          if (v137 < v20)
            v138 = v20;
          else
            v138 = (float)((float)((float)(v180 * _S3) + (float)(v181 * _S6)) + (float)(v179 * _S5)) + v20;
          v139 = v137 <= v22;
          v140 = (float)((float)((float)(v180 * _S17) + (float)(v181 * _S7)) + (float)(v179 * _S16)) + v20;
          if (!v139)
            v138 = v22;
          v141 = llroundf(v138);
          if (v140 < v20)
            v142 = v20;
          else
            v142 = (float)((float)((float)(v180 * _S17) + (float)(v181 * _S7)) + (float)(v179 * _S16)) + v20;
          v139 = v140 <= v22;
          v143 = (float)((float)((float)(v180 * _S19) + (float)(v181 * _S21)) + (float)(v179 * _S20)) + v20;
          if (!v139)
            v142 = v22;
          v144 = llroundf(v142);
          if (v143 < v20)
            v145 = v20;
          else
            v145 = (float)((float)((float)(v180 * _S19) + (float)(v181 * _S21)) + (float)(v179 * _S20)) + v20;
          v139 = v143 <= v22;
          v146 = (float)((float)((float)(v180 * _S24) + (float)(v181 * _S23)) + (float)(v179 * _S22)) + v20;
          if (!v139)
            v145 = v22;
          v147 = llroundf(v145);
          if (v146 < v20)
            v148 = v20;
          else
            v148 = (float)((float)((float)(v180 * _S24) + (float)(v181 * _S23)) + (float)(v179 * _S22)) + v20;
          if (v146 <= v22)
            v149 = v148;
          else
            v149 = v22;
          v150 = (float)((float)(_S6 + _S7) + _S21) + _S23;
          v151 = (float)((float)(_S3 + _S17) + _S19) + _S24;
          *v36 = v141;
          v36[1] = v144;
          *v47 = v147;
          v47[1] = llroundf(v149);
          v152 = (float)((float)(_S5 + _S16) + _S20) + _S22;
          v153 = (float)((float)(v183 + (float)(v150 * v178)) + (float)(v151 * v177)) + (float)(v152 * v176);
          v154 = v182;
          if (v153 <= v182)
          {
            v154 = (float)((float)(v183 + (float)(v150 * v178)) + (float)(v151 * v177)) + (float)(v152 * v176);
            if (v153 < v184)
              v154 = v184;
          }
          v155 = (float)((float)(v183 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v172);
          *(_BYTE *)(v40 + v45) = llroundf(v154);
          v156 = v182;
          if (v155 <= v182)
          {
            v156 = v155;
            if (v155 < v184)
              v156 = v184;
          }
          *(_BYTE *)(v40 + v45 + 1) = llroundf(v156);
          v28 = v162;
          v24 = v163;
          v30 = v160;
          v29 = v161;
          if (v38)
          {
            *v38 = v90;
            v38[1] = v91;
            v38 += 2;
            *v46 = v92;
            v46[1] = v93;
            v46 += 2;
          }
          result += 8;
          v48 += 2;
          v36 += 2;
          v47 += 2;
          v45 += 2;
        }
        while (v13 > v45);
      }
      result = &v44[v16];
      v36 = &v43[v17];
      v18 = v157;
      v40 += v158;
      v38 = &v42[v157];
      v12 += 2;
    }
    while (v159 > v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, double a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  float32x2_t v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  char *v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned __int8 *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int8x8_t v65;
  int8x8_t v68;
  float v75;
  float v76;
  float v78;
  float v79;
  float v92;
  float v93;
  BOOL v94;
  float v95;
  unsigned __int8 v96;
  float v97;
  float v98;
  unsigned __int8 v99;
  float v100;
  float v101;
  unsigned __int8 v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  float32x2_t v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;

  v9 = *(_QWORD *)(result + 28);
  v10 = 2 * *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = *(_QWORD *)(result + 44) + 2 * v11;
    v115 = 2 * v12 - 2 * v11;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = **((_QWORD **)result + 8);
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[2];
    v22 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 140);
    *(float *)&a8 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v24 = (float)LODWORD(a7);
    LOWORD(a9) = *(_WORD *)(v16 + 150);
    v136 = (float)LODWORD(a6);
    v137 = (float)LODWORD(a9);
    LOWORD(a9) = *(_WORD *)(v16 + 152);
    v134 = *(float *)(v16 + 36);
    v135 = (float)LODWORD(a9);
    v132 = *(float *)(v16 + 44);
    v133 = *(float *)(v16 + 40);
    v130 = *(float *)(v16 + 52) * 0.25;
    v131 = *(float *)(v16 + 48) * 0.25;
    v128 = *(float *)(v16 + 60) * 0.25;
    v129 = *(float *)(v16 + 56) * 0.25;
    v126 = *(float *)(v16 + 72);
    v127 = *(float *)(v16 + 64) * 0.25;
    v124 = *(float *)(v16 + 76);
    v125 = *(float *)(v16 + 68) * 0.25;
    v122 = *(float *)(v16 + 84);
    v123 = *(float *)(v16 + 80);
    v120 = *(float *)(v16 + 92);
    v121 = *(float *)(v16 + 88);
    v118 = *(float *)(v16 + 100);
    v119 = *(float *)(v16 + 96);
    v117 = *(float *)(v16 + 104);
    v25 = v16 + 164;
    v26 = v16 + 16548;
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v10;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 15) + 2 * v28;
    v31 = (unsigned int *)(**((_QWORD **)result + 7) + v18 * v15 + 4 * *(_QWORD *)(result + 36));
    result = (unsigned __int8 *)(*v29 + v30 * v19 + v27);
    v32 = v29[2];
    if (v32)
      v33 = (_BYTE *)(v32 + v30 * v21 + v27);
    else
      v33 = 0;
    v34 = v29[1] + v30 / 2 * v20 + v27;
    v116 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
    v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v113 = v19;
    v114 = v18;
    v112 = v21;
    do
    {
      v36 = &v33[v21];
      v37 = &result[v19];
      v38 = (char *)v31 + v18;
      if (v14)
      {
        v39 = 0;
        v40 = v36;
        v41 = &result[v19];
        v42 = (unsigned int *)((char *)v31 + v18);
        do
        {
          v43 = *v31;
          v44 = v31[1];
          v46 = *v42;
          v45 = v42[1];
          if (v33)
          {
            v47 = 85 * (v43 >> 30);
            v48 = 85 * (v44 >> 30);
            v49 = 85 * (v46 >> 30);
            v50 = 85 * (v45 >> 30);
          }
          else
          {
            LOBYTE(v49) = 0;
            LOBYTE(v47) = 0;
            LOBYTE(v48) = 0;
            LOBYTE(v50) = 0;
          }
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v43), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[0]);
          __asm { FCVT            S15, H5 }
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[1]);
          _D19.i32[0] = *v31;
          _D19.i32[1] = v44 >> 20;
          __asm { FCVT            S18, H5 }
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D19, (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[0]);
          __asm { FCVT            S19, H5 }
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[1]);
          _D20.i32[0] = v44 >> 10;
          _D20.i32[1] = v31[1];
          _D21 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D20, (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          __asm { FCVT            S20, H5 }
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D21.u32[0]);
          _D21.i16[0] = *(_WORD *)(v25 + 2 * _D21.u32[1]);
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H21
          }
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[0]);
          __asm { FCVT            S24, H5 }
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[1]);
          v65.i32[0] = *v42;
          v65.i32[1] = v45 >> 20;
          __asm { FCVT            S5, H5 }
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v65, (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _H10 = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          v68.i32[0] = v45 >> 10;
          v68.i32[1] = v42[1];
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v68, (int8x8_t)0x300000003)), v116), v22), 0), v35)));
          __asm { FCVT            S10, H10 }
          _D11.i16[0] = *(_WORD *)(v25 + 2 * _D11.u32[0]);
          _H12 = *(_WORD *)(v25 + 2 * _D11.u32[1]);
          __asm
          {
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _S7 = (float)((float)(v124 * _S18) + (float)(_S15 * v126)) + (float)(*(float *)_D19.i32 * v123);
          _S16 = (float)((float)(v121 * _S18) + (float)(_S15 * v122)) + (float)(*(float *)_D19.i32 * v120);
          v75 = (float)((float)(v118 * _S18) + (float)(_S15 * v119)) + (float)(*(float *)_D19.i32 * v117);
          v76 = (float)((float)(v124 * _S22) + (float)(*(float *)_D20.i32 * v126)) + (float)(*(float *)_D21.i32 * v123);
          _S6 = (float)((float)(v121 * _S22) + (float)(*(float *)_D20.i32 * v122)) + (float)(*(float *)_D21.i32 * v120);
          *(float *)_D21.i32 = (float)((float)(v118 * _S22) + (float)(*(float *)_D20.i32 * v119))
                             + (float)(*(float *)_D21.i32 * v117);
          v78 = (float)((float)(v124 * *(float *)_D5.i32) + (float)(_S24 * v126)) + (float)(*(float *)_D3.i32 * v123);
          v79 = (float)((float)(v121 * *(float *)_D5.i32) + (float)(_S24 * v122)) + (float)(*(float *)_D3.i32 * v120);
          *(float *)_D3.i32 = (float)((float)(v118 * *(float *)_D5.i32) + (float)(_S24 * v119))
                            + (float)(*(float *)_D3.i32 * v117);
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(*(float *)_D21.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H6
          }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S6, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _D3.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(*(float *)_D3.i32, 0.0), 8191.0)));
          __asm { FCVT            S5, H3 }
          _D3.i16[0] = *(_WORD *)(v26
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(v124 * *(float *)_D11.i32) + (float)(_S10 * v126))+ (float)(_S12 * v123), 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S7) = *(_WORD *)(v26
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v121 * *(float *)_D11.i32) + (float)(_S10 * v122))+ (float)(_S12 * v120), 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v26
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v118 * *(float *)_D11.i32) + (float)(_S10 * v119))+ (float)(_S12 * v117), 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S16, H16
          }
          v92 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S19)) + (float)(v132 * _S15)) + v23;
          if (v92 < v23)
            v93 = v23;
          else
            v93 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S19)) + (float)(v132 * _S15)) + v23;
          v94 = v92 <= v24;
          v95 = (float)((float)((float)(v133 * _S22) + (float)(v134 * _S20)) + (float)(v132 * _S21)) + v23;
          if (!v94)
            v93 = v24;
          v96 = llroundf(v93);
          if (v95 < v23)
            v97 = v23;
          else
            v97 = (float)((float)((float)(v133 * _S22) + (float)(v134 * _S20)) + (float)(v132 * _S21)) + v23;
          v94 = v95 <= v24;
          v98 = (float)((float)((float)(v133 * _S24) + (float)(v134 * _S6)) + (float)(v132 * _S5)) + v23;
          if (!v94)
            v97 = v24;
          v99 = llroundf(v97);
          if (v98 < v23)
            v100 = v23;
          else
            v100 = (float)((float)((float)(v133 * _S24) + (float)(v134 * _S6)) + (float)(v132 * _S5)) + v23;
          v94 = v98 <= v24;
          v101 = (float)((float)((float)(v133 * _S7) + (float)(v134 * _S3)) + (float)(v132 * _S16)) + v23;
          if (!v94)
            v100 = v24;
          v102 = llroundf(v100);
          if (v101 < v23)
            v103 = v23;
          else
            v103 = (float)((float)((float)(v133 * _S7) + (float)(v134 * _S3)) + (float)(v132 * _S16)) + v23;
          if (v101 <= v24)
            v104 = v103;
          else
            v104 = v24;
          v105 = (float)((float)(_S19 + _S20) + _S6) + _S3;
          v106 = (float)((float)(_S18 + _S22) + _S24) + _S7;
          *result = v96;
          result[1] = v99;
          *v41 = v102;
          v41[1] = llroundf(v104);
          v107 = (float)((float)(_S15 + _S21) + _S5) + _S16;
          v108 = (float)((float)(v136 + (float)(v105 * v131)) + (float)(v106 * v130)) + (float)(v107 * v129);
          v109 = v135;
          if (v108 <= v135)
          {
            v109 = (float)((float)(v136 + (float)(v105 * v131)) + (float)(v106 * v130)) + (float)(v107 * v129);
            if (v108 < v137)
              v109 = v137;
          }
          v110 = (float)((float)(v136 + (float)(v105 * v128)) + (float)(v106 * v127)) + (float)(v107 * v125);
          *(_BYTE *)(v34 + v39) = llroundf(v109);
          v111 = v135;
          if (v110 <= v135)
          {
            v111 = v110;
            if (v110 < v137)
              v111 = v137;
          }
          *(_BYTE *)(v34 + v39 + 1) = llroundf(v111);
          if (v33)
          {
            *v33 = v47;
            v33[1] = v48;
            v33 += 2;
            *v40 = v49;
            v40[1] = v50;
            v40 += 2;
          }
          v31 += 2;
          v42 += 2;
          result += 2;
          v41 += 2;
          v39 += 2;
        }
        while (v14 > v39);
      }
      v19 = v113;
      v18 = v114;
      v31 = (unsigned int *)&v38[v114];
      result = &v37[v113];
      v21 = v112;
      v34 += v20;
      v33 = &v36[v112];
      v13 += 2;
    }
    while (v115 > v13);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_420vf_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_rgb_420vf_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  char *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  char v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;

  v9 = *(_QWORD *)(result + 28);
  v10 = 2 * *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = *(_QWORD *)(result + 44) + 2 * v11;
    v16 = 2 * v12 - 2 * v11;
    v17 = *(_QWORD *)(result + 152);
    v18 = *(uint64_t **)(result + 136);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v18;
    v21 = v18[1];
    v22 = v18[2];
    *(float *)&v23 = (float)*(unsigned int *)(v17 + 136);
    v24 = *(float *)&v23 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v23) = *(_WORD *)(v17 + 140);
    v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v29 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v30 = (float)LODWORD(a9);
    v31 = *(float *)(v17 + 36);
    v32 = *(float *)(v17 + 40);
    v33 = *(float *)(v17 + 44);
    v92 = *(float *)(v17 + 48) * 0.25;
    v34 = *(float *)(v17 + 52) * 0.25;
    v35 = *(float *)(v17 + 56) * 0.25;
    v36 = *(float *)(v17 + 60) * 0.25;
    v37 = *(float *)(v17 + 64) * 0.25;
    v38 = *(float *)(v17 + 68) * 0.25;
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD **)(result + 128);
    v41 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v10);
    v42 = (char *)(**(_QWORD **)(result + 56) + v19 * v15 + 4 * *(_QWORD *)(result + 36));
    v43 = v40[1];
    v44 = (_BYTE *)(*v40 + v41 * v20 + v39);
    v45 = v40[2];
    v46 = (_BYTE *)(v45 + v41 * v22 + v39);
    if (!v45)
      v46 = 0;
    if (v41 >= 0)
      v47 = v41;
    else
      v47 = v41 + 1;
    v48 = v43 + (v47 >> 1) * v21 + v39;
    result = 85;
    do
    {
      v49 = &v46[v22];
      v50 = &v44[v20];
      v51 = &v42[v19];
      if (v14)
      {
        v52 = 0;
        v53 = &v46[v22];
        v54 = &v44[v20];
        v55 = &v42[v19];
        do
        {
          v57 = *(_DWORD *)v42;
          v56 = *((_DWORD *)v42 + 1);
          v59 = *(_DWORD *)v55;
          v58 = *((_DWORD *)v55 + 1);
          if (v46)
          {
            v60 = 85 * (v57 >> 30);
            v61 = 85 * (v56 >> 30);
            v62 = 85 * (v59 >> 30);
            v63 = 85 * (v58 >> 30);
          }
          else
          {
            LOBYTE(v62) = 0;
            LOBYTE(v60) = 0;
            LOBYTE(v61) = 0;
            LOBYTE(v63) = 0;
          }
          v64 = v24 * (float)((float)(*(_DWORD *)v42 & 0x3FF) - v25);
          v65 = v24 * (float)((float)((v57 >> 10) & 0x3FF) - v25);
          v66 = v24 * (float)((float)((v57 >> 20) & 0x3FF) - v25);
          v67 = v24 * (float)((float)(*((_DWORD *)v42 + 1) & 0x3FF) - v25);
          v68 = v24 * (float)((float)((v56 >> 10) & 0x3FF) - v25);
          v69 = v24 * (float)((float)((v56 >> 20) & 0x3FF) - v25);
          v70 = v24 * (float)((float)(*(_DWORD *)v55 & 0x3FF) - v25);
          v71 = v24 * (float)((float)((v59 >> 10) & 0x3FF) - v25);
          v72 = v24 * (float)((float)((v59 >> 20) & 0x3FF) - v25);
          v73 = v24 * (float)((float)(*((_DWORD *)v55 + 1) & 0x3FF) - v25);
          v74 = v24 * (float)((float)((v58 >> 10) & 0x3FF) - v25);
          v75 = v24 * (float)((float)((v58 >> 20) & 0x3FF) - v25);
          v76 = (float)((float)((float)(v32 * v65) + (float)(v31 * v66)) + (float)(v33 * v64)) + v26;
          v77 = (float)((float)((float)(v32 * v68) + (float)(v31 * v69)) + (float)(v33 * v67)) + v26;
          v78 = (float)((float)((float)(v32 * v71) + (float)(v31 * v72)) + (float)(v33 * v70)) + v26;
          v79 = (float)((float)((float)(v32 * v74) + (float)(v31 * v75)) + (float)(v33 * v73)) + v26;
          if (v76 < v26)
            v80 = v26;
          else
            v80 = (float)((float)((float)(v32 * v65) + (float)(v31 * v66)) + (float)(v33 * v64)) + v26;
          if (v76 > v28)
            v80 = v28;
          v81 = llroundf(v80);
          if (v77 < v26)
            v82 = v26;
          else
            v82 = (float)((float)((float)(v32 * v68) + (float)(v31 * v69)) + (float)(v33 * v67)) + v26;
          if (v77 > v28)
            v82 = v28;
          *v44 = v81;
          v44[1] = llroundf(v82);
          if (v78 < v26)
            v83 = v26;
          else
            v83 = (float)((float)((float)(v32 * v71) + (float)(v31 * v72)) + (float)(v33 * v70)) + v26;
          if (v78 > v28)
            v83 = v28;
          *v54 = llroundf(v83);
          if (v79 < v26)
            v84 = v26;
          else
            v84 = (float)((float)((float)(v32 * v74) + (float)(v31 * v75)) + (float)(v33 * v73)) + v26;
          if (v79 > v28)
            v84 = v28;
          v54[1] = llroundf(v84);
          v85 = (float)((float)(v66 + v69) + v72) + v75;
          v86 = (float)((float)(v65 + v68) + v71) + v74;
          v87 = (float)((float)(v64 + v67) + v70) + v73;
          v88 = (float)((float)(v27 + (float)(v85 * v92)) + (float)(v86 * v34)) + (float)(v87 * v35);
          v89 = v30;
          if (v88 <= v30)
          {
            v89 = (float)((float)(v27 + (float)(v85 * v92)) + (float)(v86 * v34)) + (float)(v87 * v35);
            if (v88 < v29)
              v89 = v29;
          }
          v90 = (float)((float)(v27 + (float)(v85 * v36)) + (float)(v86 * v37)) + (float)(v87 * v38);
          *(_BYTE *)(v48 + v52) = llroundf(v89);
          v91 = v30;
          if (v90 <= v30)
          {
            v91 = v90;
            if (v90 < v29)
              v91 = v29;
          }
          *(_BYTE *)(v48 + v52 + 1) = llroundf(v91);
          if (v46)
          {
            *v46 = v60;
            v46[1] = v61;
            v46 += 2;
            *v53 = v62;
            v53[1] = v63;
            v53 += 2;
          }
          v42 += 8;
          v55 += 8;
          v44 += 2;
          v54 += 2;
          v52 += 2;
        }
        while (v14 > v52);
      }
      v42 = &v51[v19];
      v44 = &v50[v20];
      v48 += v21;
      v46 = &v49[v22];
      v13 += 2;
    }
    while (v16 > v13);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  unsigned __int8 *v44;
  char *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned int *v48;
  unsigned int v49;
  float32x2_t v50;
  int32x2_t v58;
  float v61;
  float v62;
  float v63;
  int8x8_t v66;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  int32x2_t v77;
  float v79;
  float v80;
  int8x8_t v83;
  float v87;
  float v88;
  float v89;
  float v92;
  float v93;
  float v94;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v106;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v133;
  float v134;
  BOOL v135;
  float v136;
  unsigned int v137;
  float v138;
  float v139;
  unsigned int v140;
  float v141;
  float v142;
  unsigned int v143;
  float v144;
  float v145;
  unsigned int v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  _WORD *v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[1];
    *(float *)&v19 = (float)*(unsigned int *)(v14 + 128);
    v20 = 8191.0 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v14 + 140);
    *(float *)&a3 = (float)v19;
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v23 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    v24 = (float)LODWORD(a6);
    v179 = v24;
    LOWORD(v24) = *(_WORD *)(v14 + 152);
    v175 = *(float *)(v14 + 40);
    v176 = *(float *)(v14 + 36);
    v173 = *(float *)(v14 + 48) * 0.25;
    v174 = *(float *)(v14 + 44);
    v171 = *(float *)(v14 + 56) * 0.25;
    v172 = *(float *)(v14 + 52) * 0.25;
    v169 = *(float *)(v14 + 64) * 0.25;
    v170 = *(float *)(v14 + 60) * 0.25;
    v167 = *(float *)(v14 + 68) * 0.25;
    v168 = *(float *)(v14 + 72);
    v165 = *(float *)(v14 + 80);
    v166 = *(float *)(v14 + 76);
    v163 = *(float *)(v14 + 88);
    v164 = *(float *)(v14 + 84);
    v161 = *(float *)(v14 + 96);
    v162 = *(float *)(v14 + 92);
    v25 = *(float *)(v14 + 108);
    v159 = *(float *)(v14 + 104);
    v160 = *(float *)(v14 + 100);
    v26 = v14 + 164;
    v27 = v14 + 16548;
    v28 = v14 + 32932;
    v29 = *(float *)(v14 + 112);
    v30 = *(float *)(v14 + 116);
    v31 = *(float *)(v14 + 120);
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 13) * a2 / v7;
    v34 = (uint64_t *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * v33;
    v36 = (unsigned int *)(**((_QWORD **)result + 7) + v16 * v12 + 4 * *(_QWORD *)(result + 36));
    v37 = *v34;
    v38 = v34[1];
    result = (unsigned __int8 *)(v37 + v35 * v17 + 2 * v32);
    v39 = *(unsigned __int8 *)(v14 + 132);
    if (v39 >= 0x11)
      v40 = 0;
    else
      v40 = 16 - v39;
    if (v35 >= 0)
      v41 = v35;
    else
      v41 = v35 + 1;
    v42 = v38 + (v41 >> 1) * v18 + 2 * v32;
    v43 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    v177 = (float)LODWORD(v24);
    v178 = v22;
    v157 = v29;
    v158 = v25;
    v155 = v31;
    v156 = v30;
    do
    {
      v44 = &result[v17];
      v45 = (char *)v36 + v16;
      if (v11)
      {
        v46 = 0;
        v47 = &result[v17];
        v48 = (unsigned int *)((char *)v36 + v16);
        do
        {
          v49 = v36[1];
          v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v36), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v36;
          _D0.i32[1] = v49 >> 20;
          v58 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _H3 = *(_WORD *)(v26 + 2 * v58.u32[0]);
          __asm { FCVT            S22, H3 }
          v61 = fmaxf(_S19, fmaxf(_S20, _S22));
          v62 = (float)((float)((float)(v29 * _S20) + (float)(v25 * _S19)) + (float)(v30 * _S22)) + (float)(v31 * v61);
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)((float)((float)(v29 * _S20) + (float)(v25 * _S19)) + (float)(v30 * _S22)) + (float)(v31 * v61);
            if (v62 < 0.0)
              v63 = 0.0;
          }
          _H0 = *(_WORD *)(v26 + 2 * v58.u32[1]);
          __asm { FCVT            S5, H0 }
          v66.i32[0] = v49 >> 10;
          v66.i32[1] = v36[1];
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v66, (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[0]);
          __asm { FCVT            S3, H0 }
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[1]);
          __asm { FCVT            S14, H0 }
          v70 = fmaxf(_S5, fmaxf(_S3, _S14));
          v71 = (float)((float)((float)(v29 * _S3) + (float)(v25 * _S5)) + (float)(v30 * _S14)) + (float)(v31 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v29 * _S3) + (float)(v25 * _S5)) + (float)(v30 * _S14)) + (float)(v31 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v48[1];
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v48), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[0]);
          __asm { FCVT            S15, H0 }
          _D0.i16[0] = *(_WORD *)(v26 + 2 * _D0.u32[1]);
          __asm { FCVT            S16, H0 }
          _D0.i32[0] = *v48;
          _D0.i32[1] = v73 >> 20;
          v77 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _D0.i16[0] = *(_WORD *)(v26 + 2 * v77.u32[0]);
          __asm { FCVT            S17, H0 }
          v79 = (float)((float)((float)(v29 * _S16) + (float)(v25 * _S15)) + (float)(v30 * _S17))
              + (float)(v31 * fmaxf(_S15, fmaxf(_S16, _S17)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          _H6 = *(_WORD *)(v26 + 2 * v77.u32[1]);
          __asm { FCVT            S6, H6 }
          v83.i32[0] = v73 >> 10;
          v83.i32[1] = v48[1];
          _D21 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v83, (int8x8_t)0x300000003)), v43), v20), 0), v50)));
          _D21.i16[0] = *(_WORD *)(v26 + 2 * _D21.u32[0]);
          __asm { FCVT            S26, H21 }
          _D21.i16[0] = *(_WORD *)(v26 + 2 * _D21.u32[1]);
          __asm { FCVT            S27, H21 }
          _D21.i16[0] = *(_WORD *)(v27 + 2 * llroundf(v63));
          __asm { FCVT            S21, H21 }
          v87 = _S19 * *(float *)_D21.i32;
          v88 = _S20 * *(float *)_D21.i32;
          v89 = _S22 * *(float *)_D21.i32;
          _H7 = *(_WORD *)(v27 + 2 * llroundf(v72));
          __asm { FCVT            S7, H7 }
          v92 = _S5 * _S7;
          v93 = _S3 * _S7;
          v94 = _S14 * _S7;
          _H0 = *(_WORD *)(v27 + 2 * llroundf(v80));
          __asm { FCVT            S0, H0 }
          v97 = _S15 * _S0;
          v98 = _S16 * _S0;
          v99 = _S17 * _S0;
          v100 = (float)((float)((float)(v29 * _S26) + (float)(v25 * _S6)) + (float)(v30 * _S27))
               + (float)(v31 * fmaxf(_S6, fmaxf(_S26, _S27)));
          v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          _H0 = *(_WORD *)(v27 + 2 * llroundf(v101));
          __asm { FCVT            S0, H0 }
          _S6 = _S6 * _S0;
          _S16 = _S26 * _S0;
          v106 = _S27 * _S0;
          _S17 = (float)((float)(v166 * v88) + (float)(v87 * v168)) + (float)(v89 * v165);
          v108 = (float)((float)(v163 * v88) + (float)(v87 * v164)) + (float)(v89 * v162);
          v109 = (float)((float)(v160 * v88) + (float)(v87 * v161)) + (float)(v89 * v159);
          v110 = (float)((float)(v166 * v93) + (float)(v92 * v168)) + (float)(v94 * v165);
          v111 = (float)((float)(v163 * v93) + (float)(v92 * v164)) + (float)(v94 * v162);
          v112 = (float)((float)(v160 * v93) + (float)(v92 * v161)) + (float)(v94 * v159);
          v113 = (float)((float)(v166 * v98) + (float)(v97 * v168)) + (float)(v99 * v165);
          v114 = (float)((float)(v163 * v98) + (float)(v97 * v164)) + (float)(v99 * v162);
          v115 = (float)((float)(v160 * v98) + (float)(v97 * v161)) + (float)(v99 * v159);
          v116 = (float)((float)(v166 * _S16) + (float)(_S6 * v168)) + (float)(v106 * v165);
          v117 = (float)((float)(v163 * _S16) + (float)(_S6 * v164)) + (float)(v106 * v162);
          _S0 = (float)((float)(v160 * _S16) + (float)(_S6 * v161)) + (float)(v106 * v159);
          _H3 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H5 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H6
            FCVT            S19, H16
          }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S21, H6 }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S20, H6 }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S16, H6 }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S22, H6 }
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          LOWORD(_S17) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H6
            FCVT            S6, H17
          }
          LOWORD(_S17) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S0) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S23, H0 }
          v133 = (float)((float)((float)(v175 * _S5) + (float)(v176 * _S3)) + (float)(v174 * _S7)) + v21;
          if (v133 < v21)
            v134 = v21;
          else
            v134 = (float)((float)((float)(v175 * _S5) + (float)(v176 * _S3)) + (float)(v174 * _S7)) + v21;
          v135 = v133 <= v23;
          v136 = (float)((float)((float)(v175 * _S21) + (float)(v176 * _S19)) + (float)(v174 * _S20)) + v21;
          if (!v135)
            v134 = v23;
          v137 = llroundf(v134);
          if (v136 < v21)
            v138 = v21;
          else
            v138 = (float)((float)((float)(v175 * _S21) + (float)(v176 * _S19)) + (float)(v174 * _S20)) + v21;
          v135 = v136 <= v23;
          v139 = (float)((float)((float)(v175 * _S22) + (float)(v176 * _S16)) + (float)(v174 * _S24)) + v21;
          if (!v135)
            v138 = v23;
          v140 = llroundf(v138);
          if (v139 < v21)
            v141 = v21;
          else
            v141 = (float)((float)((float)(v175 * _S22) + (float)(v176 * _S16)) + (float)(v174 * _S24)) + v21;
          v135 = v139 <= v23;
          v142 = (float)((float)((float)(v175 * _S17) + (float)(v176 * _S6)) + (float)(v174 * _S23)) + v21;
          if (!v135)
            v141 = v23;
          v143 = llroundf(v141);
          if (v142 < v21)
            v144 = v21;
          else
            v144 = (float)((float)((float)(v175 * _S17) + (float)(v176 * _S6)) + (float)(v174 * _S23)) + v21;
          if (v142 <= v23)
            v145 = v144;
          else
            v145 = v23;
          v146 = llroundf(v145);
          v147 = (float)((float)(_S3 + _S19) + _S16) + _S6;
          v148 = (float)((float)(_S5 + _S21) + _S22) + _S17;
          *(_WORD *)result = v137 << v40;
          *((_WORD *)result + 1) = v140 << v40;
          *(_WORD *)v47 = v143 << v40;
          *((_WORD *)v47 + 1) = v146 << v40;
          v149 = (float)((float)(_S7 + _S20) + _S24) + _S23;
          v150 = (float)((float)(v178 + (float)(v147 * v173)) + (float)(v148 * v172)) + (float)(v149 * v171);
          v151 = v177;
          if (v150 <= v177)
          {
            v151 = (float)((float)(v178 + (float)(v147 * v173)) + (float)(v148 * v172)) + (float)(v149 * v171);
            if (v150 < v179)
              v151 = v179;
          }
          v152 = (_WORD *)(v42 + 2 * v46);
          v153 = (float)((float)(v178 + (float)(v147 * v170)) + (float)(v148 * v169)) + (float)(v149 * v167);
          *v152 = llroundf(v151) << v40;
          v154 = v177;
          if (v153 <= v177)
          {
            v154 = v153;
            if (v153 < v179)
              v154 = v179;
          }
          v36 += 2;
          v48 += 2;
          result += 4;
          v47 += 4;
          v152[1] = llroundf(v154) << v40;
          v46 += 2;
          v29 = v157;
          v25 = v158;
          v31 = v155;
          v30 = v156;
        }
        while (v11 > v46);
      }
      v36 = (unsigned int *)&v45[v16];
      result = &v44[v17];
      v42 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  float32x2_t v37;
  float32x2_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unsigned int *v42;
  char *v43;
  unsigned __int32 v44;
  unsigned __int32 v45;
  int8x8_t v52;
  int8x8_t v61;
  int8x8_t v65;
  float v71;
  float v72;
  float v73;
  float v74;
  float v76;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  unsigned int v93;
  float v94;
  float v95;
  unsigned int v96;
  float v97;
  float v98;
  unsigned int v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unsigned __int8 *v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = **((_QWORD **)result + 8);
    v19 = *v17;
    v20 = v17[1];
    v110 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 140);
    *(float *)&a6 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v21 = (float)LODWORD(a5);
    LOWORD(a7) = *(_WORD *)(v16 + 146);
    v22 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v23 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v24 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v130 = (float)LODWORD(a8);
    v128 = *(float *)(v16 + 36);
    v129 = v24;
    v126 = *(float *)(v16 + 44);
    v127 = *(float *)(v16 + 40);
    v124 = *(float *)(v16 + 52) * 0.25;
    v125 = *(float *)(v16 + 48) * 0.25;
    v122 = *(float *)(v16 + 60) * 0.25;
    v123 = *(float *)(v16 + 56) * 0.25;
    v120 = *(float *)(v16 + 72);
    v121 = *(float *)(v16 + 64) * 0.25;
    v118 = *(float *)(v16 + 76);
    v119 = *(float *)(v16 + 68) * 0.25;
    v116 = *(float *)(v16 + 84);
    v117 = *(float *)(v16 + 80);
    v114 = *(float *)(v16 + 92);
    v115 = *(float *)(v16 + 88);
    v112 = *(float *)(v16 + 100);
    v113 = *(float *)(v16 + 96);
    v111 = *(float *)(v16 + 104);
    v25 = v16 + 164;
    v26 = v16 + 16548;
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v9;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 15) + 2 * v28;
    v31 = (unsigned int *)(**((_QWORD **)result + 7) + v18 * v14 + 4 * *(_QWORD *)(result + 36));
    v32 = v29[1];
    v33 = (char *)(*v29 + v30 * v19 + 2 * v27);
    v34 = *(unsigned __int8 *)(v16 + 132);
    if (v34 >= 0x11)
      v35 = 0;
    else
      v35 = 16 - v34;
    if (v30 >= 0)
      v36 = v30;
    else
      v36 = v30 + 1;
    result = (unsigned __int8 *)(v32 + (v36 >> 1) * v20 + 2 * v27);
    v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    v38 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      v39 = &v33[v19];
      v40 = (char *)v31 + v18;
      if (v13)
      {
        v41 = 0;
        v42 = (unsigned int *)((char *)v31 + v18);
        v43 = &v33[v19];
        do
        {
          v44 = v31[1];
          v45 = v42[1];
          _D3 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v31), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          v52.i32[0] = *v31;
          v52.i32[1] = v44 >> 20;
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v52, (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          __asm { FCVT            S19, H3 }
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[0]);
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D5.u32[1]);
          __asm
          {
            FCVT            S20, H3
            FCVT            S18, H5
          }
          _D3.i32[0] = v44 >> 10;
          _D3.i32[1] = v44;
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D3, (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S22, H3 }
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          __asm { FCVT            S21, H3 }
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v42), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          _D3.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _D5.i16[0] = *(_WORD *)(v25 + 2 * _D3.u32[1]);
          v61.i32[0] = *v42;
          v61.i32[1] = v45 >> 20;
          _D24 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v61, (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          __asm { FCVT            S5, H5 }
          _D24.i16[0] = *(_WORD *)(v25 + 2 * _D24.u32[0]);
          _H10 = *(_WORD *)(v25 + 2 * _D24.u32[1]);
          __asm
          {
            FCVT            S24, H24
            FCVT            S10, H10
          }
          v65.i32[0] = v45 >> 10;
          v65.i32[1] = v45;
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v65, (int8x8_t)0x300000003)), v37), v110), 0), v38)));
          _D11.i16[0] = *(_WORD *)(v25 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v25 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          _S7 = (float)((float)(v118 * _S19) + (float)(_S15 * v120)) + (float)(_S20 * v117);
          _S16 = (float)((float)(v115 * _S19) + (float)(_S15 * v116)) + (float)(_S20 * v114);
          v71 = (float)((float)(v112 * _S19) + (float)(_S15 * v113)) + (float)(_S20 * v111);
          v72 = (float)((float)(v118 * _S22) + (float)(_S18 * v120)) + (float)(_S21 * v117);
          v73 = (float)((float)(v115 * _S22) + (float)(_S18 * v116)) + (float)(_S21 * v114);
          v74 = (float)((float)(v112 * _S22) + (float)(_S18 * v113)) + (float)(_S21 * v111);
          _S6 = (float)((float)(v118 * *(float *)_D5.i32) + (float)(*(float *)_D3.i32 * v120))
              + (float)(*(float *)_D24.i32 * v117);
          v76 = (float)((float)(v115 * *(float *)_D5.i32) + (float)(*(float *)_D3.i32 * v116))
              + (float)(*(float *)_D24.i32 * v114);
          *(float *)_D3.i32 = (float)((float)(v112 * *(float *)_D5.i32) + (float)(*(float *)_D3.i32 * v113))
                            + (float)(*(float *)_D24.i32 * v111);
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H5
            FCVT            S20, H7
          }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _D5.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _D3.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(*(float *)_D3.i32, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v26
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v118 * *(float *)_D11.i32) + (float)(_S10 * v120))+ (float)(_S12 * v117), 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S6, H6
          }
          LOWORD(_S7) = *(_WORD *)(v26
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v115 * *(float *)_D11.i32) + (float)(_S10 * v116))+ (float)(_S12 * v114), 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v26
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v112 * *(float *)_D11.i32) + (float)(_S10 * v113))+ (float)(_S12 * v111), 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          v89 = (float)((float)((float)(v127 * _S18) + (float)(v128 * _S15)) + (float)(v126 * _S19)) + v21;
          if (v89 < v21)
            v90 = v21;
          else
            v90 = (float)((float)((float)(v127 * _S18) + (float)(v128 * _S15)) + (float)(v126 * _S19)) + v21;
          v91 = v89 <= v23;
          v92 = (float)((float)((float)(v127 * _S22) + (float)(v128 * _S20)) + (float)(v126 * _S21)) + v21;
          if (!v91)
            v90 = v23;
          v93 = llroundf(v90);
          if (v92 < v21)
            v94 = v21;
          else
            v94 = (float)((float)((float)(v127 * _S22) + (float)(v128 * _S20)) + (float)(v126 * _S21)) + v21;
          v91 = v92 <= v23;
          v95 = (float)((float)((float)(v127 * _S5) + (float)(v128 * _S24)) + (float)(v126 * _S3)) + v21;
          if (!v91)
            v94 = v23;
          v96 = llroundf(v94);
          if (v95 < v21)
            v97 = v21;
          else
            v97 = (float)((float)((float)(v127 * _S5) + (float)(v128 * _S24)) + (float)(v126 * _S3)) + v21;
          v91 = v95 <= v23;
          v98 = (float)((float)((float)(v127 * _S7) + (float)(v128 * _S6)) + (float)(v126 * _S16)) + v21;
          if (!v91)
            v97 = v23;
          v99 = llroundf(v97);
          if (v98 < v21)
            v100 = v21;
          else
            v100 = (float)((float)((float)(v127 * _S7) + (float)(v128 * _S6)) + (float)(v126 * _S16)) + v21;
          if (v98 <= v23)
            v101 = v100;
          else
            v101 = v23;
          v102 = (float)((float)(_S15 + _S20) + _S24) + _S6;
          v103 = (float)((float)(_S18 + _S22) + _S5) + _S7;
          *(_WORD *)v33 = v93 << v35;
          *((_WORD *)v33 + 1) = v96 << v35;
          *(_WORD *)v43 = v99 << v35;
          *((_WORD *)v43 + 1) = llroundf(v101) << v35;
          v104 = v130;
          v105 = (float)((float)(_S19 + _S21) + _S3) + _S16;
          v106 = (float)((float)(v22 + (float)(v102 * v125)) + (float)(v103 * v124)) + (float)(v105 * v123);
          if (v106 <= v130)
          {
            v104 = (float)((float)(v22 + (float)(v102 * v125)) + (float)(v103 * v124)) + (float)(v105 * v123);
            if (v106 < v129)
              v104 = v129;
          }
          v107 = &result[2 * v41];
          v108 = (float)((float)(v22 + (float)(v102 * v122)) + (float)(v103 * v121)) + (float)(v105 * v119);
          *(_WORD *)v107 = llroundf(v104) << v35;
          v109 = v130;
          if (v108 <= v130)
          {
            v109 = v108;
            if (v108 < v129)
              v109 = v129;
          }
          v31 += 2;
          v42 += 2;
          v33 += 4;
          v43 += 4;
          *((_WORD *)v107 + 1) = llroundf(v109) << v35;
          v41 += 2;
        }
        while (v13 > v41);
      }
      v31 = (unsigned int *)&v40[v18];
      v33 = &v39[v19];
      result += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unsigned __int8 *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  float v53;
  float v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _WORD *v81;
  float v82;
  float v83;
  float v84;

  v9 = *(_QWORD *)(result + 28);
  v10 = 2 * *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = *(_QWORD *)(result + 44) + 2 * v11;
    v16 = 2 * v12 - 2 * v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = **((_QWORD **)result + 8);
    v20 = *v18;
    v21 = v18[1];
    *(float *)&v22 = (float)*(unsigned int *)(v17 + 136);
    v23 = *(float *)&v22 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v22) = *(_WORD *)(v17 + 140);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v29 = (float)LODWORD(a9);
    v30 = *(float *)(v17 + 36);
    v31 = *(float *)(v17 + 40);
    v32 = *(float *)(v17 + 44);
    v84 = *(float *)(v17 + 48) * 0.25;
    v33 = *(float *)(v17 + 52) * 0.25;
    v34 = *(float *)(v17 + 56) * 0.25;
    v35 = *(float *)(v17 + 60) * 0.25;
    v36 = *(float *)(v17 + 64) * 0.25;
    v37 = *(float *)(v17 + 68) * 0.25;
    v38 = *((_QWORD *)result + 14);
    v39 = *((_QWORD *)result + 13) * a2 / v10;
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * v39;
    v42 = (char *)(**((_QWORD **)result + 7) + v19 * v15 + 4 * *(_QWORD *)(result + 36));
    v43 = (unsigned __int8 *)(*v40 + v41 * v20 + 2 * v38);
    LODWORD(v17) = *(unsigned __int8 *)(v17 + 132);
    v44 = 16 - v17;
    if (v17 >= 0x11)
      v44 = 0;
    if (v41 >= 0)
      v45 = v41;
    else
      v45 = v41 + 1;
    v46 = v40[1] + (v45 >> 1) * v21 + 2 * v38;
    v47 = v44;
    do
    {
      result = &v43[v20];
      v48 = &v42[v19];
      if (v14)
      {
        v49 = 0;
        v50 = &v42[v19];
        v51 = &v43[v20];
        do
        {
          v52 = *((_DWORD *)v42 + 1);
          v53 = (float)((v52 >> 10) & 0x3FF);
          v54 = (float)((v52 >> 20) & 0x3FF);
          v55 = *((_DWORD *)v50 + 1);
          v56 = v23 * (float)((float)(*(_DWORD *)v42 & 0x3FF) - v24);
          v57 = v23 * (float)((float)((*(_DWORD *)v42 >> 10) & 0x3FF) - v24);
          v58 = v23 * (float)((float)((*(_DWORD *)v42 >> 20) & 0x3FF) - v24);
          v59 = v23 * (float)((float)(*((_DWORD *)v42 + 1) & 0x3FF) - v24);
          v60 = v23 * (float)(v53 - v24);
          v61 = v23 * (float)(v54 - v24);
          v62 = v23 * (float)((float)(*(_DWORD *)v50 & 0x3FF) - v24);
          v63 = v23 * (float)((float)((*(_DWORD *)v50 >> 10) & 0x3FF) - v24);
          v64 = v23 * (float)((float)((*(_DWORD *)v50 >> 20) & 0x3FF) - v24);
          v65 = v23 * (float)((float)(v55 & 0x3FF) - v24);
          v66 = v23 * (float)((float)((v55 >> 10) & 0x3FF) - v24);
          v67 = v23 * (float)((float)((v55 >> 20) & 0x3FF) - v24);
          v68 = (float)((float)((float)(v31 * v57) + (float)(v30 * v58)) + (float)(v32 * v56)) + v25;
          v69 = (float)((float)((float)(v31 * v60) + (float)(v30 * v61)) + (float)(v32 * v59)) + v25;
          v70 = (float)((float)((float)(v31 * v63) + (float)(v30 * v64)) + (float)(v32 * v62)) + v25;
          v71 = (float)((float)((float)(v31 * v66) + (float)(v30 * v67)) + (float)(v32 * v65)) + v25;
          if (v68 < v25)
            v72 = v25;
          else
            v72 = (float)((float)((float)(v31 * v57) + (float)(v30 * v58)) + (float)(v32 * v56)) + v25;
          if (v68 > v27)
            v72 = v27;
          *(_WORD *)v43 = llroundf(v72) << v47;
          if (v69 < v25)
            v73 = v25;
          else
            v73 = (float)((float)((float)(v31 * v60) + (float)(v30 * v61)) + (float)(v32 * v59)) + v25;
          if (v69 > v27)
            v73 = v27;
          *((_WORD *)v43 + 1) = llroundf(v73) << v47;
          if (v70 < v25)
            v74 = v25;
          else
            v74 = (float)((float)((float)(v31 * v63) + (float)(v30 * v64)) + (float)(v32 * v62)) + v25;
          if (v70 > v27)
            v74 = v27;
          *(_WORD *)v51 = llroundf(v74) << v47;
          if (v71 < v25)
            v75 = v25;
          else
            v75 = (float)((float)((float)(v31 * v66) + (float)(v30 * v67)) + (float)(v32 * v65)) + v25;
          if (v71 > v27)
            v75 = v27;
          *((_WORD *)v51 + 1) = llroundf(v75) << v47;
          v76 = (float)((float)(v58 + v61) + v64) + v67;
          v77 = (float)((float)(v57 + v60) + v63) + v66;
          v78 = (float)((float)(v56 + v59) + v62) + v65;
          v79 = (float)((float)(v26 + (float)(v76 * v84)) + (float)(v77 * v33)) + (float)(v78 * v34);
          v80 = v29;
          if (v79 <= v29)
          {
            v80 = (float)((float)(v26 + (float)(v76 * v84)) + (float)(v77 * v33)) + (float)(v78 * v34);
            if (v79 < v28)
              v80 = v28;
          }
          v81 = (_WORD *)(v46 + 2 * v49);
          v82 = (float)((float)(v26 + (float)(v76 * v35)) + (float)(v77 * v36)) + (float)(v78 * v37);
          *v81 = llroundf(v80) << v47;
          v83 = v29;
          if (v82 <= v29)
          {
            v83 = v82;
            if (v82 < v28)
              v83 = v28;
          }
          v42 += 8;
          v50 += 8;
          v43 += 4;
          v51 += 4;
          v81[1] = llroundf(v83) << v47;
          v49 += 2;
        }
        while (v14 > v49);
      }
      v42 = &v48[v19];
      v43 = &result[v20];
      v46 += v21;
      v13 += 2;
    }
    while (v16 > v13);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  float32x2_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float32x2_t v67;
  int32x2_t v74;
  float v76;
  float v77;
  float v84;
  float v85;
  float v88;
  float v89;
  float v90;
  float v93;
  float v96;
  float v97;
  float v99;
  unsigned int v104;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 128);
    v24 = 8191.0 / *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v16 + 140);
    *(float *)&a3 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a7) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    *(float *)&v28 = (float)LODWORD(a8);
    v128 = *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v16 + 152);
    v29 = (float)v28;
    v30 = *(float *)(v16 + 40);
    v127 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 44);
    v126 = *(float *)(v16 + 48) * 0.5;
    v125 = *(float *)(v16 + 52) * 0.5;
    v124 = *(float *)(v16 + 56) * 0.5;
    v123 = *(float *)(v16 + 60) * 0.5;
    v122 = *(float *)(v16 + 64) * 0.5;
    v32 = *(float *)(v16 + 72);
    v121 = *(float *)(v16 + 68) * 0.5;
    v33 = *(float *)(v16 + 76);
    v34 = *(float *)(v16 + 80);
    v35 = *(float *)(v16 + 84);
    v36 = *(float *)(v16 + 88);
    v37 = *(float *)(v16 + 92);
    v38 = *(float *)(v16 + 96);
    v40 = *(float *)(v16 + 100);
    v39 = *(float *)(v16 + 104);
    v41 = v16 + 164;
    v42 = v16 + 16548;
    v43 = v16 + 32932;
    v44 = *(float *)(v16 + 108);
    v45 = *(float *)(v16 + 112);
    v46 = *(float *)(v16 + 116);
    v47 = *(float *)(v16 + 120);
    v48 = *((_QWORD *)result + 14);
    v49 = (_QWORD *)*((_QWORD *)result + 16);
    v50 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v51 = *(_QWORD *)(result + 36);
    v52 = v49[2];
    if (v52)
      result = (unsigned __int8 *)(v52 + v50 * v22 + v48);
    else
      result = 0;
    v55 = v49;
    v54 = *v49;
    v53 = v55[1];
    _ZF = v53 == 0;
    v57 = v53 + v50 * v21 + v48;
    if (_ZF)
      v57 = 0;
    v58 = (_BYTE *)(v54 + v50 * v20 + v48);
    v59 = *v18 + v19 * v14 + 4 * v51;
    v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      if (v13)
      {
        v61 = 0;
        v62 = result;
        v63 = v58;
        v64 = (unsigned int *)v59;
        do
        {
          v65 = *v64;
          v66 = v64[1];
          v67 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v64), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v60), v24), 0), v67)));
          _D0.i16[0] = *(_WORD *)(v41 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v41 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v64;
          _D0.i32[1] = v66 >> 20;
          v74 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v60), v24), 0), v67)));
          _D0.i16[0] = *(_WORD *)(v41 + 2 * v74.u32[0]);
          __asm { FCVT            S21, H0 }
          v76 = (float)((float)((float)(v45 * _S20) + (float)(v44 * _S19)) + (float)(v46 * _S21))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S21)));
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          _H5 = *(_WORD *)(v41 + 2 * v74.u32[1]);
          __asm { FCVT            S5, H5 }
          _D24.i32[0] = v66 >> 10;
          _D24.i32[1] = v64[1];
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D24, (int8x8_t)0x300000003)), v60), v24), 0), v67)));
          _D22.i16[0] = *(_WORD *)(v41 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _D24.i16[0] = *(_WORD *)(v41 + 2 * _D22.u32[1]);
          __asm { FCVT            S14, H24 }
          v84 = (float)((float)((float)(v45 * _S22) + (float)(v44 * _S5)) + (float)(v46 * _S14))
              + (float)(v47 * fmaxf(_S5, fmaxf(_S22, _S14)));
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v77));
          __asm { FCVT            S0, H0 }
          v88 = _S19 * _S0;
          v89 = _S20 * _S0;
          v90 = _S21 * _S0;
          _H21 = *(_WORD *)(v42 + 2 * llroundf(v85));
          __asm { FCVT            S21, H21 }
          v93 = _S5 * _S21;
          _S22 = _S22 * _S21;
          _S21 = _S14 * _S21;
          v96 = (float)((float)(v33 * v89) + (float)(v88 * v32)) + (float)(v90 * v34);
          v97 = (float)((float)(v36 * v89) + (float)(v88 * v35)) + (float)(v90 * v37);
          _S0 = (float)((float)(v40 * v89) + (float)(v88 * v38)) + (float)(v90 * v39);
          v99 = (float)((float)(v33 * _S22) + (float)(v93 * v32)) + (float)(_S21 * v34);
          _S20 = (float)((float)(v36 * _S22) + (float)(v93 * v35)) + (float)(_S21 * v37);
          _S5 = (float)((float)(v40 * _S22) + (float)(v93 * v38)) + (float)(_S21 * v39);
          LOWORD(_S21) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
          }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v104 = llroundf(fminf(fmaxf(v99, 0.0), 8191.0));
          __asm { FCVT            S19, H0 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * v104);
          __asm { FCVT            S0, H0 }
          LOWORD(_S20) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S5) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          v109 = (float)((float)((float)(v30 * _S22) + (float)(v127 * _S21)) + (float)(v31 * _S19)) + v25;
          v110 = (float)((float)((float)(v30 * _S20) + (float)(v127 * _S0)) + (float)(v31 * _S24)) + v25;
          if (v109 < v25)
            v111 = v25;
          else
            v111 = (float)((float)((float)(v30 * _S22) + (float)(v127 * _S21)) + (float)(v31 * _S19)) + v25;
          if (v109 <= v27)
            v112 = v111;
          else
            v112 = v27;
          *v63 = llroundf(v112);
          if (v110 < v25)
            v113 = v25;
          else
            v113 = (float)((float)((float)(v30 * _S20) + (float)(v127 * _S0)) + (float)(v31 * _S24)) + v25;
          if (v110 > v27)
            v113 = v27;
          v63[1] = llroundf(v113);
          v114 = _S21 + _S0;
          v115 = _S22 + _S20;
          v116 = _S19 + _S24;
          v117 = (float)((float)(v26 + (float)(v114 * v126)) + (float)((float)(_S22 + _S20) * v125))
               + (float)(v116 * v124);
          v118 = v29;
          if (v117 <= v29)
          {
            v118 = v117;
            if (v117 < v128)
              v118 = v128;
          }
          v119 = (float)((float)(v26 + (float)(v114 * v123)) + (float)(v115 * v122)) + (float)(v116 * v121);
          *(_BYTE *)(v57 + v61) = llroundf(v118);
          v120 = v29;
          if (v119 <= v29)
          {
            v120 = v119;
            if (v119 < v128)
              v120 = v128;
          }
          *(_BYTE *)(v57 + v61 + 1) = llroundf(v120);
          if (v62)
          {
            *v62 = 85 * (v65 >> 30);
            v62[1] = 85 * (v66 >> 30);
            v62 += 2;
          }
          v61 += 2;
          v64 += 2;
          v63 += 2;
        }
        while (v13 > v61);
      }
      v59 += v19;
      v58 += v20;
      v57 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, double a9, float a10)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  unint64_t v58;
  unsigned int *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  unsigned __int32 v63;
  int8x8_t v70;
  int8x8_t v73;
  float v79;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  char v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;

  v10 = *(_QWORD *)(result + 28);
  v11 = *result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = v12 + *(_QWORD *)(result + 44);
    v17 = v13 - v12;
    v18 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 17);
    v20 = (_QWORD *)*((_QWORD *)result + 7);
    v21 = **((_QWORD **)result + 8);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v25 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    *(float *)&a9 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 144);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 146);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 148);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v18 + 150);
    v29 = (float)LODWORD(a8);
    LOWORD(a10) = *(_WORD *)(v18 + 152);
    v30 = (float)LODWORD(a10);
    v31 = *(float *)(v18 + 36);
    v32 = *(float *)(v18 + 40);
    v33 = *(float *)(v18 + 44);
    v107 = *(float *)(v18 + 52) * 0.5;
    v108 = *(float *)(v18 + 48) * 0.5;
    v105 = *(float *)(v18 + 60) * 0.5;
    v106 = *(float *)(v18 + 56) * 0.5;
    v34 = *(float *)(v18 + 72);
    v103 = *(float *)(v18 + 68) * 0.5;
    v104 = *(float *)(v18 + 64) * 0.5;
    v35 = *(float *)(v18 + 76);
    v36 = *(float *)(v18 + 80);
    v37 = *(float *)(v18 + 84);
    v38 = *(float *)(v18 + 88);
    v39 = *(float *)(v18 + 92);
    v40 = *(float *)(v18 + 96);
    v42 = *(float *)(v18 + 100);
    v41 = *(float *)(v18 + 104);
    v43 = v18 + 164;
    v44 = v18 + 16548;
    v45 = *((_QWORD *)result + 14);
    v46 = (uint64_t *)*((_QWORD *)result + 16);
    v47 = *((_QWORD *)result + 13) * a2 / v11 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = v46[2];
    if (v49)
      v50 = (_BYTE *)(v49 + v47 * v24 + v45);
    else
      v50 = 0;
    v52 = *v46;
    v51 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v51 == 0;
    result = (unsigned __int8 *)(v51 + v47 * v23 + v45);
    if (_ZF)
      result = 0;
    v54 = (_BYTE *)(v52 + v47 * v22 + v45);
    v55 = *v20 + v21 * v16 + 4 * v48;
    v56 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v57 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v15)
      {
        v58 = 0;
        v59 = (unsigned int *)v55;
        v60 = v50;
        v61 = v54;
        do
        {
          v62 = *v59;
          v63 = v59[1];
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v59), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v56), v25), 0), v57)));
          _D6.i16[0] = *(_WORD *)(v43 + 2 * _D6.u32[0]);
          _H18 = *(_WORD *)(v43 + 2 * _D6.u32[1]);
          __asm
          {
            FCVT            S6, H6
            FCVT            S18, H18
          }
          v70.i32[0] = *v59;
          v70.i32[1] = v63 >> 20;
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v70, (int8x8_t)0x300000003)), v56), v25), 0), v57)));
          _D19.i16[0] = *(_WORD *)(v43 + 2 * _D19.u32[0]);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v43 + 2 * _D19.u32[1]);
          v73.i32[0] = v63 >> 10;
          v73.i32[1] = v63;
          __asm { FCVT            S20, H20 }
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v73, (int8x8_t)0x300000003)), v56), v25), 0), v57)));
          _D15.i16[0] = *(_WORD *)(v43 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H22 = *(_WORD *)(v43 + 2 * _D15.u32[1]);
          __asm { FCVT            S22, H22 }
          _S24 = (float)((float)(v35 * _S18) + (float)(*(float *)_D6.i32 * v34)) + (float)(*(float *)_D19.i32 * v36);
          v79 = (float)((float)(v38 * _S18) + (float)(*(float *)_D6.i32 * v37)) + (float)(*(float *)_D19.i32 * v39);
          *(float *)_D6.i32 = (float)((float)(v42 * _S18) + (float)(*(float *)_D6.i32 * v40))
                            + (float)(*(float *)_D19.i32 * v41);
          _S18 = (float)((float)(v35 * *(float *)_D15.i32) + (float)(_S20 * v34)) + (float)(_S22 * v36);
          *(float *)_D19.i32 = (float)((float)(v38 * *(float *)_D15.i32) + (float)(_S20 * v37)) + (float)(_S22 * v39);
          _S20 = (float)((float)(v42 * *(float *)_D15.i32) + (float)(_S20 * v40)) + (float)(_S22 * v41);
          LOWORD(_S22) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          LOWORD(_S24) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
          }
          _D6.i16[0] = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)_D6.i32, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S18) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D19.i16[0] = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          v88 = (float)((float)((float)(v32 * _S24) + (float)(v31 * _S22)) + (float)(v33 * _S6)) + v26;
          if (v88 < v26)
            v89 = v26;
          else
            v89 = (float)((float)((float)(v32 * _S24) + (float)(v31 * _S22)) + (float)(v33 * _S6)) + v26;
          v90 = v88 <= v28;
          v91 = (float)((float)((float)(v32 * _S19) + (float)(v31 * _S18)) + (float)(v33 * _S20)) + v26;
          if (!v90)
            v89 = v28;
          v92 = llroundf(v89);
          if (v91 < v26)
            v93 = v26;
          else
            v93 = (float)((float)((float)(v32 * _S19) + (float)(v31 * _S18)) + (float)(v33 * _S20)) + v26;
          if (v91 <= v28)
            v94 = v93;
          else
            v94 = v28;
          v95 = _S22 + _S18;
          *v61 = v92;
          v61[1] = llroundf(v94);
          v96 = _S24 + _S19;
          v97 = (float)(v27 + (float)(v95 * v108)) + (float)((float)(_S24 + _S19) * v107);
          v98 = _S6 + _S20;
          v99 = v97 + (float)((float)(_S6 + _S20) * v106);
          v100 = v30;
          if (v99 <= v30)
          {
            v100 = v99;
            if (v99 < v29)
              v100 = v29;
          }
          v101 = (float)((float)(v27 + (float)(v95 * v105)) + (float)(v96 * v104)) + (float)(v98 * v103);
          result[v58] = llroundf(v100);
          v102 = v30;
          if (v101 <= v30)
          {
            v102 = v101;
            if (v101 < v29)
              v102 = v29;
          }
          result[v58 + 1] = llroundf(v102);
          if (v60)
          {
            *v60 = 85 * (v62 >> 30);
            v60[1] = 85 * (v63 >> 30);
            v60 += 2;
          }
          v58 += 2;
          v59 += 2;
          v61 += 2;
        }
        while (v15 > v58);
      }
      v55 += v21;
      v54 += v22;
      result += v23;
      v50 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unsigned int *v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v17 + 36);
    v33 = *(float *)(v17 + 40);
    v34 = *(float *)(v17 + 44);
    v35 = *(float *)(v17 + 48) * 0.5;
    v36 = *(float *)(v17 + 52) * 0.5;
    v37 = *(float *)(v17 + 56) * 0.5;
    v38 = *(float *)(v17 + 60) * 0.5;
    v39 = *(float *)(v17 + 64) * 0.5;
    v40 = *(float *)(v17 + 68) * 0.5;
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2;
    v43 = (_QWORD *)*((_QWORD *)result + 16);
    v44 = v42 / v10 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = v43[2];
    if (v46)
      v47 = (_BYTE *)(v46 + v44 * v23 + v41);
    else
      v47 = 0;
    v50 = v43;
    v48 = *v43;
    v49 = v50[1];
    v51 = v49 == 0;
    v52 = v49 + v44 * v22 + v41;
    if (v51)
      v52 = 0;
    v53 = (_BYTE *)(v48 + v44 * v21 + v41);
    result = (unsigned __int8 *)(*v19 + v20 * v15 + 4 * v45);
    do
    {
      if (v14)
      {
        v54 = 0;
        v55 = (unsigned int *)result;
        v56 = v47;
        v57 = v53;
        do
        {
          v58 = *v55;
          v59 = v55[1];
          v60 = v25 * (float)((float)(*v55 & 0x3FF) - v26);
          v61 = v25 * (float)((float)((*v55 >> 10) & 0x3FF) - v26);
          v62 = v25 * (float)((float)((*v55 >> 20) & 0x3FF) - v26);
          v63 = v25 * (float)((float)(v59 & 0x3FF) - v26);
          v64 = v25 * (float)((float)((v59 >> 10) & 0x3FF) - v26);
          v65 = v25 * (float)((float)((v59 >> 20) & 0x3FF) - v26);
          v66 = (float)((float)((float)(v33 * v61) + (float)(v32 * v62)) + (float)(v34 * v60)) + v27;
          v67 = (float)((float)((float)(v33 * v64) + (float)(v32 * v65)) + (float)(v34 * v63)) + v27;
          if (v66 < v27)
            v68 = v27;
          else
            v68 = (float)((float)((float)(v33 * v61) + (float)(v32 * v62)) + (float)(v34 * v60)) + v27;
          if (v66 <= v29)
            v69 = v68;
          else
            v69 = v29;
          *v57 = llroundf(v69);
          if (v67 < v27)
            v70 = v27;
          else
            v70 = (float)((float)((float)(v33 * v64) + (float)(v32 * v65)) + (float)(v34 * v63)) + v27;
          if (v67 > v29)
            v70 = v29;
          v57[1] = llroundf(v70);
          v71 = v62 + v65;
          v72 = v61 + v64;
          v73 = v60 + v63;
          v74 = (float)((float)(v28 + (float)(v71 * v35)) + (float)(v72 * v36)) + (float)(v73 * v37);
          v75 = v31;
          if (v74 <= v31)
          {
            v75 = (float)((float)(v28 + (float)(v71 * v35)) + (float)(v72 * v36)) + (float)(v73 * v37);
            if (v74 < v30)
              v75 = v30;
          }
          v76 = (float)((float)(v28 + (float)(v71 * v38)) + (float)(v72 * v39)) + (float)(v73 * v40);
          *(_BYTE *)(v52 + v54) = llroundf(v75);
          v77 = v31;
          if (v76 <= v31)
          {
            v77 = v76;
            if (v76 < v30)
              v77 = v30;
          }
          *(_BYTE *)(v52 + v54 + 1) = llroundf(v77);
          if (v56)
          {
            *v56 = 85 * (v58 >> 30);
            v56[1] = 85 * (v59 >> 30);
            v56 += 2;
          }
          v54 += 2;
          v55 += 2;
          v57 += 2;
        }
        while (v14 > v54);
      }
      result += v20;
      v53 += v21;
      v52 += v22;
      v47 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  float32x2_t v60;
  int32x2_t v68;
  float v70;
  float v71;
  float v72;
  int8x8_t v74;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v89;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v100;
  unsigned int v102;
  unsigned int v107;
  float v108;
  float v109;
  float v111;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  BOOL v119;
  float v120;
  char v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = v18 + v21;
    v28 = **((_QWORD **)result + 7) + v23 * v22 + 4 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v26 + v14);
    v30 = v27 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a7) = *(_WORD *)(v25 + 144);
    LOWORD(a8) = *(_WORD *)(v25 + 146);
    LOWORD(a9) = *(_WORD *)(v25 + 148);
    LOWORD(a10) = *(_WORD *)(v25 + 150);
    LOWORD(v10) = *(_WORD *)(v25 + 152);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)&a3 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a7);
    v133 = (float)LODWORD(a8);
    v33 = (float)LODWORD(a9);
    v34 = (float)LODWORD(a10);
    v35 = (float)v10;
    v36 = *(float *)(v25 + 40);
    v134 = *(float *)(v25 + 36);
    v37 = *(float *)(v25 + 44);
    v131 = *(float *)(v25 + 52) * 0.5;
    v132 = *(float *)(v25 + 48) * 0.5;
    v130 = *(float *)(v25 + 56) * 0.5;
    v129 = *(float *)(v25 + 60) * 0.5;
    v128 = *(float *)(v25 + 64) * 0.5;
    v126 = *(float *)(v25 + 72);
    v127 = *(float *)(v25 + 68) * 0.5;
    v38 = *(float *)(v25 + 76);
    v39 = *(float *)(v25 + 80);
    v40 = *(float *)(v25 + 84);
    v41 = *(float *)(v25 + 88);
    v42 = *(float *)(v25 + 92);
    v43 = *(float *)(v25 + 96);
    v45 = *(float *)(v25 + 100);
    v44 = *(float *)(v25 + 104);
    v46 = v25 + 164;
    v47 = v25 + 16548;
    v48 = v25 + 32932;
    v49 = *(float *)(v25 + 108);
    v50 = *(float *)(v25 + 112);
    v51 = *(float *)(v25 + 116);
    v52 = *(float *)(v25 + 120);
    result = *(unsigned __int8 **)(result + 20);
    v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      if (result)
      {
        v54 = 0;
        v55 = v19;
        v56 = v29;
        v57 = (unsigned int *)v28;
        do
        {
          v58 = *v57;
          v59 = v57[1];
          v60 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v57), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          _D0.i16[0] = *(_WORD *)(v46 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v46 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v57;
          _D0.i32[1] = v59 >> 20;
          v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          _D0.i16[0] = *(_WORD *)(v46 + 2 * v68.u32[0]);
          __asm { FCVT            S22, H0 }
          v70 = fmaxf(_S19, fmaxf(_S20, _S22));
          v71 = (float)((float)((float)(v50 * _S20) + (float)(v49 * _S19)) + (float)(v51 * _S22)) + (float)(v52 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v50 * _S20) + (float)(v49 * _S19)) + (float)(v51 * _S22)) + (float)(v52 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H24 = *(_WORD *)(v46 + 2 * v68.u32[1]);
          v74.i32[0] = v59 >> 10;
          v74.i32[1] = v57[1];
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v74, (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          __asm { FCVT            S21, H24 }
          _H24 = *(_WORD *)(v46 + 2 * _D13.u32[0]);
          _D13.i16[0] = *(_WORD *)(v46 + 2 * _D13.u32[1]);
          __asm
          {
            FCVT            S14, H24
            FCVT            S13, H13
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(v72));
          __asm { FCVT            S24, H0 }
          v82 = _S19 * _S24;
          v83 = _S20 * _S24;
          v84 = _S22 * _S24;
          v85 = (float)((float)((float)(v50 * _S14) + (float)(v49 * _S21)) + (float)(v51 * _S13))
              + (float)(v52 * fmaxf(_S21, fmaxf(_S14, _S13)));
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          _H22 = *(_WORD *)(v47 + 2 * llroundf(v86));
          __asm { FCVT            S22, H22 }
          v89 = _S21 * _S22;
          _S24 = _S14 * _S22;
          v91 = _S13 * _S22;
          v92 = (float)((float)(v38 * v83) + (float)(v82 * v126)) + (float)(v84 * v39);
          v93 = (float)((float)(v41 * v83) + (float)(v82 * v40)) + (float)(v84 * v42);
          v94 = (float)((float)(v45 * v83) + (float)(v82 * v43)) + (float)(v84 * v44);
          v95 = (float)(v38 * _S24) + (float)(v89 * v126);
          v96 = (float)(v41 * _S24) + (float)(v89 * v40);
          v97 = (float)(v45 * _S24) + (float)(v89 * v43);
          _S19 = v95 + (float)(v91 * v39);
          _S20 = v96 + (float)(v91 * v42);
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          v100 = v97 + (float)(v91 * v44);
          __asm { FCVT            S22, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v102 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          __asm { FCVT            S0, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v102);
          __asm { FCVT            S24, H24 }
          LOWORD(_S19) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          v107 = llroundf(fminf(fmaxf(v100, 0.0), 8191.0));
          v108 = (float)(v36 * _S0) + (float)(v134 * _S22);
          v109 = _S22 + _S19;
          _S0 = _S0 + _S20;
          v111 = (float)(v133 + (float)(v109 * v132)) + (float)(_S0 * v131);
          v112 = (float)(v133 + (float)(v109 * v129)) + (float)(_S0 * v128);
          LOWORD(_S0) = *(_WORD *)(v48 + 2 * v107);
          __asm { FCVT            S0, H0 }
          v114 = v108 + (float)(v37 * _S24);
          v115 = _S24 + _S0;
          v116 = v111 + (float)((float)(_S24 + _S0) * v130);
          v117 = v112 + (float)(v115 * v127);
          if (v116 < v34)
            v118 = (float)LODWORD(a10);
          else
            v118 = v116;
          v119 = v116 <= v35;
          v120 = v114 + v32;
          if (!v119)
            v118 = (float)v10;
          v121 = llroundf(v118);
          if (v120 < v32)
            v122 = v32;
          else
            v122 = v114 + v32;
          *v56 = v121;
          if (v120 > v33)
            v122 = v33;
          v56[1] = llroundf(v122);
          v123 = (float)v10;
          if (v117 <= v35)
          {
            v123 = v117;
            if (v117 < v34)
              v123 = (float)LODWORD(a10);
          }
          v124 = (float)((float)((float)(v36 * _S20) + (float)(v134 * _S19)) + (float)(v37 * _S0)) + v32;
          v56[2] = llroundf(v123);
          v125 = v33;
          if (v124 <= v33)
          {
            v125 = v124;
            if (v124 < v32)
              v125 = v32;
          }
          v56[3] = llroundf(v125);
          if (v55)
          {
            *v55 = 85 * (v58 >> 30);
            v55[1] = 85 * (v59 >> 30);
            v55 += 2;
          }
          v54 += 2;
          v57 += 2;
          v56 += 4;
        }
        while ((unint64_t)result > v54);
      }
      v28 += v23;
      v29 += v24;
      ++v20;
    }
    while (v20 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_2vuyf_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  int32x2_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  unint64_t v53;
  unsigned int *v54;
  _BYTE *v55;
  _BYTE *v56;
  unsigned int v57;
  unsigned __int32 v58;
  int8x8_t v65;
  int8x8_t v70;
  float v75;
  float v76;
  unsigned int v78;
  unsigned int v82;
  float v83;
  float v84;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  char v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_BYTE *)v14[1];
  if (v18)
    v18 += v16[1] * v15 + v13;
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *(_QWORD *)(result + 152);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 4 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v24 + v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 144);
    LOWORD(a7) = *(_WORD *)(v25 + 146);
    LOWORD(a8) = *(_WORD *)(v25 + 148);
    LOWORD(a9) = *(_WORD *)(v25 + 150);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)v9.i32 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a9);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v102 = *(float *)(v25 + 48) * 0.5;
    v101 = *(float *)(v25 + 52) * 0.5;
    v100 = *(float *)(v25 + 56) * 0.5;
    v99 = *(float *)(v25 + 60) * 0.5;
    v98 = *(float *)(v25 + 64) * 0.5;
    v40 = *(float *)(v25 + 72);
    v97 = *(float *)(v25 + 68) * 0.5;
    v41 = *(float *)(v25 + 76);
    v42 = *(float *)(v25 + 80);
    v43 = *(float *)(v25 + 84);
    v44 = *(float *)(v25 + 88);
    v45 = *(float *)(v25 + 92);
    v46 = *(float *)(v25 + 96);
    v47 = v25 + 164;
    v48 = v25 + 16548;
    v50 = *(float *)(v25 + 100);
    v49 = *(float *)(v25 + 104);
    v51 = (float32x2_t)vdup_lane_s32(v9, 0);
    result = 85;
    v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v26)
      {
        v53 = 0;
        v54 = (unsigned int *)v28;
        v55 = v18;
        v56 = v29;
        do
        {
          v57 = *v54;
          v58 = v54[1];
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v54), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D6.i16[0] = *(_WORD *)(v47 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _H18 = *(_WORD *)(v47 + 2 * _D6.u32[1]);
          v65.i32[0] = *v54;
          v65.i32[1] = v58 >> 20;
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v65, (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D19.i16[0] = *(_WORD *)(v47 + 2 * _D19.u32[0]);
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          _H20 = *(_WORD *)(v47 + 2 * _D19.u32[1]);
          __asm { FCVT            S20, H20 }
          v70.i32[0] = v58 >> 10;
          v70.i32[1] = v58;
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v70, (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v47 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S22 = (float)((float)(v41 * _S18) + (float)(*(float *)_D6.i32 * v40)) + (float)(*(float *)_D19.i32 * v42);
          _S24 = (float)((float)(v44 * _S18) + (float)(*(float *)_D6.i32 * v43)) + (float)(*(float *)_D19.i32 * v45);
          *(float *)_D6.i32 = (float)((float)(v50 * _S18) + (float)(*(float *)_D6.i32 * v46))
                            + (float)(*(float *)_D19.i32 * v49);
          _S18 = (float)(v41 * *(float *)_D15.i32) + (float)(_S20 * v40);
          *(float *)_D19.i32 = (float)(v44 * *(float *)_D15.i32) + (float)(_S20 * v43);
          v75 = (float)(v50 * *(float *)_D15.i32) + (float)(_S20 * v46);
          _D15.i16[0] = *(_WORD *)(v47 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D19.i32 = *(float *)_D19.i32 + (float)(*(float *)_D15.i32 * v45);
          LOWORD(_S22) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          v76 = v75 + (float)(*(float *)_D15.i32 * v49);
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          v78 = llroundf(fminf(fmaxf(*(float *)_D6.i32, 0.0), 8191.0));
          __asm { FCVT            S6, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v78);
          __asm { FCVT            S24, H24 }
          LOWORD(_S18) = *(_WORD *)(v48
                                  + 2 * llroundf(fminf(fmaxf(_S18 + (float)(*(float *)_D15.i32 * v42), 0.0), 8191.0)));
          __asm { FCVT            S15, H18 }
          LOWORD(_S18) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v82 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          v83 = (float)(v38 * *(float *)_D6.i32) + (float)(v37 * _S22);
          *(float *)_D19.i32 = _S22 + _S15;
          *(float *)_D6.i32 = *(float *)_D6.i32 + _S18;
          v84 = (float)(v33 + (float)((float)(_S22 + _S15) * v102)) + (float)(*(float *)_D6.i32 * v101);
          *(float *)_D6.i32 = (float)(v33 + (float)(*(float *)_D19.i32 * v99)) + (float)(*(float *)_D6.i32 * v98);
          _D19.i16[0] = *(_WORD *)(v48 + 2 * v82);
          __asm { FCVT            S19, H19 }
          v86 = v83 + (float)(v39 * _S24);
          v87 = v84 + (float)((float)(_S24 + _S19) * v100);
          v88 = *(float *)_D6.i32 + (float)((float)(_S24 + _S19) * v97);
          if (v87 < v35)
            v89 = v35;
          else
            v89 = v87;
          v90 = v87 <= v36;
          v91 = v86 + v32;
          if (!v90)
            v89 = v36;
          v92 = llroundf(v89);
          if (v91 < v32)
            v93 = v32;
          else
            v93 = v86 + v32;
          *v56 = v92;
          if (v91 > v34)
            v93 = v34;
          v56[1] = llroundf(v93);
          v94 = v36;
          if (v88 <= v36)
          {
            v94 = v88;
            if (v88 < v35)
              v94 = v35;
          }
          v95 = (float)((float)((float)(v38 * _S18) + (float)(v37 * _S15)) + (float)(v39 * _S19)) + v32;
          v56[2] = llroundf(v94);
          v96 = v34;
          if (v95 <= v34)
          {
            v96 = v95;
            if (v95 < v32)
              v96 = v32;
          }
          v56[3] = llroundf(v96);
          if (v55)
          {
            *v55 = 85 * (v57 >> 30);
            v55[1] = 85 * (v58 >> 30);
            v55 += 2;
          }
          v53 += 2;
          v54 += 2;
          v56 += 4;
        }
        while (v26 > v53);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 4 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    *(float *)&v30 = (float)*(unsigned int *)(v24 + 136);
    v31 = *(float *)&v30 / (float)*(unsigned int *)(v24 + 128);
    LOWORD(v30) = *(_WORD *)(v24 + 140);
    v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    v36 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v24 + 36);
    v39 = *(float *)(v24 + 40);
    v40 = *(float *)(v24 + 44);
    v41 = *(float *)(v24 + 48) * 0.5;
    v42 = *(float *)(v24 + 52) * 0.5;
    v43 = *(float *)(v24 + 56) * 0.5;
    v44 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 64) * 0.5;
    v46 = *(float *)(v24 + 68) * 0.5;
    do
    {
      if (v25)
      {
        v47 = 0;
        result = (unsigned __int8 *)v27;
        v48 = v17;
        v49 = v28;
        do
        {
          v50 = *(_DWORD *)result;
          v51 = *((_DWORD *)result + 1);
          v52 = v31 * (float)((float)(*(_DWORD *)result & 0x3FF) - v32);
          v53 = v31 * (float)((float)((*(_DWORD *)result >> 10) & 0x3FF) - v32);
          v54 = v31 * (float)((float)((*(_DWORD *)result >> 20) & 0x3FF) - v32);
          v55 = v31 * (float)((float)(v51 & 0x3FF) - v32);
          v56 = v31 * (float)((float)((v51 >> 10) & 0x3FF) - v32);
          v57 = v31 * (float)((float)((v51 >> 20) & 0x3FF) - v32);
          v58 = (float)((float)((float)(v39 * v53) + (float)(v38 * v54)) + (float)(v40 * v52)) + v33;
          v59 = v54 + v57;
          v60 = v53 + v56;
          v61 = v52 + v55;
          v62 = (float)((float)(v34 + (float)(v59 * v41)) + (float)(v60 * v42)) + (float)(v61 * v43);
          v63 = (float)((float)(v34 + (float)(v59 * v44)) + (float)(v60 * v45)) + (float)(v61 * v46);
          if (v62 < v36)
            v64 = v36;
          else
            v64 = v62;
          if (v62 > v37)
            v64 = v37;
          *v49 = llroundf(v64);
          if (v58 < v33)
            v65 = v33;
          else
            v65 = v58;
          if (v58 > v35)
            v65 = v35;
          v49[1] = llroundf(v65);
          v66 = v37;
          if (v63 <= v37)
          {
            v66 = v63;
            if (v63 < v36)
              v66 = v36;
          }
          v67 = (float)((float)((float)(v39 * v56) + (float)(v38 * v57)) + (float)(v40 * v55)) + v33;
          v49[2] = llroundf(v66);
          v68 = v35;
          if (v67 <= v35)
          {
            v68 = v67;
            if (v67 < v33)
              v68 = v33;
          }
          v49[3] = llroundf(v68);
          if (v48)
          {
            *v48 = 85 * (v50 >> 30);
            v48[1] = 85 * (v51 >> 30);
            v48 += 2;
          }
          v47 += 2;
          result += 8;
          v49 += 4;
        }
        while (v25 > v47);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  float32x2_t v61;
  int32x2_t v69;
  float v71;
  float v72;
  float v79;
  float v80;
  float v83;
  float v84;
  float v86;
  float v89;
  float v90;
  float v91;
  float v92;
  float v95;
  float v96;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = v18 + v21;
    v28 = **((_QWORD **)result + 7) + v23 * v22 + 4 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v26 + v14);
    v30 = v27 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a7) = *(_WORD *)(v25 + 144);
    LOWORD(a8) = *(_WORD *)(v25 + 146);
    LOWORD(a9) = *(_WORD *)(v25 + 148);
    LOWORD(a10) = *(_WORD *)(v25 + 150);
    LOWORD(v10) = *(_WORD *)(v25 + 152);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)&a3 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a7);
    v123 = (float)LODWORD(a8);
    v33 = (float)LODWORD(a9);
    v122 = (float)LODWORD(a10);
    v34 = (float)v10;
    v35 = *(float *)(v25 + 36);
    v36 = *(float *)(v25 + 40);
    v37 = *(float *)(v25 + 44);
    v121 = *(float *)(v25 + 48) * 0.5;
    v120 = *(float *)(v25 + 52) * 0.5;
    v119 = *(float *)(v25 + 56) * 0.5;
    v118 = *(float *)(v25 + 60) * 0.5;
    v117 = *(float *)(v25 + 64) * 0.5;
    v38 = *(float *)(v25 + 72);
    v116 = *(float *)(v25 + 68) * 0.5;
    v39 = *(float *)(v25 + 76);
    v40 = *(float *)(v25 + 80);
    v41 = *(float *)(v25 + 84);
    v42 = *(float *)(v25 + 88);
    v43 = *(float *)(v25 + 92);
    v44 = *(float *)(v25 + 96);
    v46 = *(float *)(v25 + 100);
    v45 = *(float *)(v25 + 104);
    v47 = v25 + 164;
    v48 = v25 + 16548;
    v49 = v25 + 32932;
    v50 = *(float *)(v25 + 108);
    v51 = *(float *)(v25 + 112);
    v52 = *(float *)(v25 + 116);
    v53 = *(float *)(v25 + 120);
    result = *(unsigned __int8 **)(result + 20);
    v54 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      if (result)
      {
        v55 = 0;
        v56 = v19;
        v57 = v29;
        v58 = (unsigned int *)v28;
        do
        {
          v59 = *v58;
          v60 = v58[1];
          v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v58), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v54), v31), 0), v61)));
          _D0.i16[0] = *(_WORD *)(v47 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v47 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v58;
          _D0.i32[1] = v60 >> 20;
          v69 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v54), v31), 0), v61)));
          _D0.i16[0] = *(_WORD *)(v47 + 2 * v69.u32[0]);
          __asm { FCVT            S21, H0 }
          v71 = (float)((float)((float)(v51 * _S20) + (float)(v50 * _S19)) + (float)(v52 * _S21))
              + (float)(v53 * fmaxf(_S19, fmaxf(_S20, _S21)));
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H5 = *(_WORD *)(v47 + 2 * v69.u32[1]);
          __asm { FCVT            S5, H5 }
          _D24.i32[0] = v60 >> 10;
          _D24.i32[1] = v58[1];
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D24, (int8x8_t)0x300000003)), v54), v31), 0), v61)));
          _D22.i16[0] = *(_WORD *)(v47 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _D24.i16[0] = *(_WORD *)(v47 + 2 * _D22.u32[1]);
          __asm { FCVT            S13, H24 }
          v79 = (float)((float)((float)(v51 * _S22) + (float)(v50 * _S5)) + (float)(v52 * _S13))
              + (float)(v53 * fmaxf(_S5, fmaxf(_S22, _S13)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(v72));
          __asm { FCVT            S0, H0 }
          v83 = _S19 * _S0;
          v84 = _S20 * _S0;
          _H24 = *(_WORD *)(v48 + 2 * llroundf(v80));
          v86 = _S21 * _S0;
          __asm { FCVT            S21, H24 }
          _S5 = _S5 * _S21;
          v89 = _S22 * _S21;
          v90 = _S13 * _S21;
          v91 = (float)((float)(v39 * v84) + (float)(v83 * v38)) + (float)(v86 * v40);
          v92 = (float)((float)(v42 * v84) + (float)(v83 * v41)) + (float)(v86 * v43);
          _S0 = (float)((float)(v46 * v84) + (float)(v83 * v44)) + (float)(v86 * v45);
          _S19 = (float)((float)(v39 * v89) + (float)(_S5 * v38)) + (float)(v90 * v40);
          v95 = (float)((float)(v42 * v89) + (float)(_S5 * v41)) + (float)(v90 * v43);
          v96 = (float)((float)(v46 * v89) + (float)(_S5 * v44)) + (float)(v90 * v45);
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H5
            FCVT            S13, H0
          }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S19) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          v103 = (float)((float)((float)(v36 * _S24) + (float)(v35 * _S22)) + (float)(v37 * _S13)) + v32;
          v104 = _S22 + _S0;
          v105 = _S24 + _S5;
          v106 = (float)(v123 + (float)((float)(_S22 + _S0) * v121)) + (float)((float)(_S24 + _S5) * v120);
          v107 = _S13 + _S19;
          v108 = v106 + (float)((float)(_S13 + _S19) * v119);
          if (v103 < v32)
            v109 = v32;
          else
            v109 = v103;
          if (v103 > v33)
            v109 = v33;
          *v57 = llroundf(v109);
          v110 = v34;
          if (v108 <= v34)
          {
            v110 = v108;
            if (v108 < v122)
              v110 = v122;
          }
          v111 = (float)((float)((float)(v36 * _S5) + (float)(v35 * _S0)) + (float)(v37 * _S19)) + v32;
          v112 = (float)((float)(v123 + (float)(v104 * v118)) + (float)(v105 * v117)) + (float)(v107 * v116);
          v57[1] = llroundf(v110);
          if (v111 < v32)
            v113 = v32;
          else
            v113 = v111;
          if (v111 <= v33)
            v114 = v113;
          else
            v114 = v33;
          v57[2] = llroundf(v114);
          v115 = v34;
          if (v112 <= v34)
          {
            v115 = (float)((float)(v123 + (float)(v104 * v118)) + (float)(v105 * v117)) + (float)(v107 * v116);
            if (v112 < v122)
              v115 = v122;
          }
          v57[3] = llroundf(v115);
          if (v56)
          {
            *v56 = 85 * (v59 >> 30);
            v56[1] = 85 * (v60 >> 30);
            v56 += 2;
          }
          v55 += 2;
          v58 += 2;
          v57 += 4;
        }
        while ((unint64_t)result > v55);
      }
      v28 += v23;
      v29 += v24;
      ++v20;
    }
    while (v20 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_yuvsf_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  int32x2_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  unint64_t v52;
  unsigned int *v53;
  _BYTE *v54;
  _BYTE *v55;
  unsigned int v56;
  unsigned __int32 v57;
  int8x8_t v65;
  int8x8_t v68;
  float v73;
  float v74;
  float v76;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_BYTE *)v14[1];
  if (v18)
    v18 += v16[1] * v15 + v13;
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *(_QWORD *)(result + 152);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 4 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v24 + v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 144);
    LOWORD(a7) = *(_WORD *)(v25 + 146);
    LOWORD(a8) = *(_WORD *)(v25 + 148);
    LOWORD(a9) = *(_WORD *)(v25 + 150);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)v9.i32 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v103 = (float)LODWORD(a9);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v25 + 36);
    v37 = *(float *)(v25 + 40);
    v38 = *(float *)(v25 + 44);
    v102 = *(float *)(v25 + 48) * 0.5;
    v101 = *(float *)(v25 + 52) * 0.5;
    v100 = *(float *)(v25 + 56) * 0.5;
    v99 = *(float *)(v25 + 60) * 0.5;
    v98 = *(float *)(v25 + 64) * 0.5;
    v39 = *(float *)(v25 + 72);
    v97 = *(float *)(v25 + 68) * 0.5;
    v40 = *(float *)(v25 + 76);
    v41 = *(float *)(v25 + 80);
    v42 = *(float *)(v25 + 84);
    v43 = *(float *)(v25 + 88);
    v44 = *(float *)(v25 + 92);
    v45 = *(float *)(v25 + 96);
    v46 = v25 + 164;
    v47 = v25 + 16548;
    v49 = *(float *)(v25 + 100);
    v48 = *(float *)(v25 + 104);
    v50 = (float32x2_t)vdup_lane_s32(v9, 0);
    result = 85;
    v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v26)
      {
        v52 = 0;
        v53 = (unsigned int *)v28;
        v54 = v18;
        v55 = v29;
        do
        {
          v56 = *v53;
          v57 = v53[1];
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v53), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v50), v31), 0), v51)));
          _D6.i16[0] = *(_WORD *)(v46 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _H18 = *(_WORD *)(v46 + 2 * _D6.u32[1]);
          __asm { FCVT            S18, H18 }
          v65.i32[0] = *v53;
          v65.i32[1] = v57 >> 20;
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v65, (int8x8_t)0x300000003)), v50), v31), 0), v51)));
          _D19.i16[0] = *(_WORD *)(v46 + 2 * _D19.u32[0]);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v46 + 2 * _D19.u32[1]);
          v68.i32[0] = v57 >> 10;
          v68.i32[1] = v57;
          _D21 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v68, (int8x8_t)0x300000003)), v50), v31), 0), v51)));
          _D21.i16[0] = *(_WORD *)(v46 + 2 * _D21.u32[0]);
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v46 + 2 * _D21.u32[1]);
          __asm { FCVT            S22, H22 }
          v73 = (float)((float)(v40 * _S18) + (float)(*(float *)_D6.i32 * v39)) + (float)(*(float *)_D19.i32 * v41);
          v74 = (float)((float)(v43 * _S18) + (float)(*(float *)_D6.i32 * v42)) + (float)(*(float *)_D19.i32 * v44);
          *(float *)_D6.i32 = (float)((float)(v49 * _S18) + (float)(*(float *)_D6.i32 * v45))
                            + (float)(*(float *)_D19.i32 * v48);
          _S18 = (float)((float)(v40 * *(float *)_D21.i32) + (float)(_S20 * v39)) + (float)(_S22 * v41);
          *(float *)_D19.i32 = (float)((float)(v43 * *(float *)_D21.i32) + (float)(_S20 * v42)) + (float)(_S22 * v44);
          v76 = (float)((float)(v49 * *(float *)_D21.i32) + (float)(_S20 * v45)) + (float)(_S22 * v48);
          _D21.i16[0] = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _D6.i16[0] = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(*(float *)_D6.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S6, H6
          }
          LOWORD(_S18) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S15, H18 }
          LOWORD(_S18) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D19.i16[0] = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          v83 = (float)((float)((float)(v37 * _S22) + (float)(v36 * _S21)) + (float)(v38 * _S6)) + v32;
          v84 = _S21 + _S15;
          if (v83 < v32)
            v85 = v32;
          else
            v85 = (float)((float)((float)(v37 * _S22) + (float)(v36 * _S21)) + (float)(v38 * _S6)) + v32;
          v86 = v83 <= v34;
          v87 = _S22 + _S18;
          v88 = (float)(v33 + (float)(v84 * v102)) + (float)((float)(_S22 + _S18) * v101);
          v89 = _S6 + _S19;
          v90 = v88 + (float)((float)(_S6 + _S19) * v100);
          if (!v86)
            v85 = v34;
          *v55 = llroundf(v85);
          v91 = v35;
          if (v90 <= v35)
          {
            v91 = v90;
            if (v90 < v103)
              v91 = v103;
          }
          v92 = (float)((float)((float)(v37 * _S18) + (float)(v36 * _S15)) + (float)(v38 * _S19)) + v32;
          v93 = (float)((float)(v33 + (float)(v84 * v99)) + (float)(v87 * v98)) + (float)(v89 * v97);
          v55[1] = llroundf(v91);
          if (v92 < v32)
            v94 = v32;
          else
            v94 = v92;
          if (v92 <= v34)
            v95 = v94;
          else
            v95 = v34;
          v55[2] = llroundf(v95);
          v96 = v35;
          if (v93 <= v35)
          {
            v96 = (float)((float)(v33 + (float)(v84 * v99)) + (float)(v87 * v98)) + (float)(v89 * v97);
            if (v93 < v103)
              v96 = v103;
          }
          v55[3] = llroundf(v96);
          if (v54)
          {
            *v54 = 85 * (v56 >> 30);
            v54[1] = 85 * (v57 >> 30);
            v54 += 2;
          }
          v52 += 2;
          v53 += 2;
          v55 += 4;
        }
        while (v26 > v52);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 4 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    *(float *)&v30 = (float)*(unsigned int *)(v24 + 136);
    v31 = *(float *)&v30 / (float)*(unsigned int *)(v24 + 128);
    LOWORD(v30) = *(_WORD *)(v24 + 140);
    v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    v36 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v24 + 36);
    v39 = *(float *)(v24 + 40);
    v40 = *(float *)(v24 + 44);
    v41 = *(float *)(v24 + 48) * 0.5;
    v42 = *(float *)(v24 + 52) * 0.5;
    v43 = *(float *)(v24 + 56) * 0.5;
    v44 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 64) * 0.5;
    v46 = *(float *)(v24 + 68) * 0.5;
    do
    {
      if (v25)
      {
        v47 = 0;
        result = (unsigned __int8 *)v27;
        v48 = v17;
        v49 = v28;
        do
        {
          v50 = *(_DWORD *)result;
          v51 = *((_DWORD *)result + 1);
          v52 = v31 * (float)((float)(*(_DWORD *)result & 0x3FF) - v32);
          v53 = v31 * (float)((float)((*(_DWORD *)result >> 10) & 0x3FF) - v32);
          v54 = v31 * (float)((float)((*(_DWORD *)result >> 20) & 0x3FF) - v32);
          v55 = v31 * (float)((float)(v51 & 0x3FF) - v32);
          v56 = v31 * (float)((float)((v51 >> 10) & 0x3FF) - v32);
          v57 = v31 * (float)((float)((v51 >> 20) & 0x3FF) - v32);
          v58 = (float)((float)((float)(v39 * v53) + (float)(v38 * v54)) + (float)(v40 * v52)) + v33;
          v59 = (float)((float)((float)(v39 * v56) + (float)(v38 * v57)) + (float)(v40 * v55)) + v33;
          v60 = v54 + v57;
          v61 = v53 + v56;
          v62 = v52 + v55;
          v63 = (float)((float)(v34 + (float)(v60 * v41)) + (float)(v61 * v42)) + (float)(v62 * v43);
          v64 = (float)(v34 + (float)(v60 * v44)) + (float)(v61 * v45);
          if (v58 < v33)
            v65 = v33;
          else
            v65 = v58;
          if (v58 > v35)
            v65 = v35;
          v66 = v64 + (float)(v62 * v46);
          *v49 = llroundf(v65);
          if (v63 < v36)
            v67 = v36;
          else
            v67 = v63;
          if (v63 > v37)
            v67 = v37;
          v49[1] = llroundf(v67);
          if (v59 < v33)
            v68 = v33;
          else
            v68 = v59;
          if (v59 > v35)
            v68 = v35;
          v49[2] = llroundf(v68);
          v69 = v37;
          if (v66 <= v37)
          {
            v69 = v66;
            if (v66 < v36)
              v69 = v36;
          }
          v49[3] = llroundf(v69);
          if (v48)
          {
            *v48 = 85 * (v50 >> 30);
            v48[1] = 85 * (v51 >> 30);
            v48 += 2;
          }
          v47 += 2;
          result += 8;
          v49 += 4;
        }
        while (v25 > v47);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  unint64_t v63;
  _WORD *v64;
  _WORD *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  float32x2_t v69;
  int32x2_t v76;
  float v78;
  float v79;
  float v86;
  float v87;
  float v90;
  float v91;
  float v92;
  float v95;
  float v98;
  float v99;
  float v102;
  float v103;
  unsigned int v108;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  _WORD *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 128);
    v24 = 8191.0 / *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v16 + 140);
    *(float *)&a3 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a7) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    *(float *)&v28 = (float)LODWORD(a8);
    v131 = *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v16 + 152);
    v29 = (float)v28;
    v30 = *(float *)(v16 + 40);
    v130 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 44);
    v129 = *(float *)(v16 + 48) * 0.5;
    v128 = *(float *)(v16 + 52) * 0.5;
    v127 = *(float *)(v16 + 56) * 0.5;
    v126 = *(float *)(v16 + 60) * 0.5;
    v125 = *(float *)(v16 + 64) * 0.5;
    v32 = *(float *)(v16 + 72);
    v124 = *(float *)(v16 + 68) * 0.5;
    v33 = *(float *)(v16 + 76);
    v34 = *(float *)(v16 + 80);
    v35 = *(float *)(v16 + 84);
    v36 = *(float *)(v16 + 88);
    v37 = *(float *)(v16 + 92);
    v38 = *(float *)(v16 + 96);
    v40 = *(float *)(v16 + 100);
    v39 = *(float *)(v16 + 104);
    v41 = v16 + 164;
    v42 = v16 + 16548;
    v43 = v16 + 32932;
    v44 = *(float *)(v16 + 108);
    v45 = *(float *)(v16 + 112);
    v46 = *(float *)(v16 + 116);
    v47 = *(float *)(v16 + 120);
    v48 = *((_QWORD *)result + 14);
    v49 = (_QWORD *)*((_QWORD *)result + 16);
    v50 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v51 = *(_QWORD *)(result + 36);
    v52 = *(unsigned __int8 *)(v16 + 132);
    if (v52 >= 0x11)
      v53 = 0;
    else
      v53 = 16 - v52;
    v54 = v49[2];
    if (v54)
      result = (unsigned __int8 *)(v54 + v50 * v22 + 2 * v48);
    else
      result = 0;
    v57 = v49;
    v56 = *v49;
    v55 = v57[1];
    _ZF = v55 == 0;
    v59 = v55 + v50 * v21 + 2 * v48;
    if (_ZF)
      v59 = 0;
    v60 = v56 + v50 * v20 + 2 * v48;
    v61 = *v18 + v19 * v14 + 4 * v51;
    v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      if (v13)
      {
        v63 = 0;
        v64 = result;
        v65 = (_WORD *)v60;
        v66 = (unsigned int *)v61;
        do
        {
          v67 = *v66;
          v68 = v66[1];
          v69 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v66), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v62), v24), 0), v69)));
          _D0.i16[0] = *(_WORD *)(v41 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v41 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v66;
          _D0.i32[1] = v68 >> 20;
          v76 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v62), v24), 0), v69)));
          _D0.i16[0] = *(_WORD *)(v41 + 2 * v76.u32[0]);
          __asm { FCVT            S21, H0 }
          v78 = (float)((float)((float)(v45 * _S20) + (float)(v44 * _S19)) + (float)(v46 * _S21))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S21)));
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          _H5 = *(_WORD *)(v41 + 2 * v76.u32[1]);
          __asm { FCVT            S5, H5 }
          _D24.i32[0] = v68 >> 10;
          _D24.i32[1] = v66[1];
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D24, (int8x8_t)0x300000003)), v62), v24), 0), v69)));
          _D22.i16[0] = *(_WORD *)(v41 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _D24.i16[0] = *(_WORD *)(v41 + 2 * _D22.u32[1]);
          __asm { FCVT            S14, H24 }
          v86 = (float)((float)((float)(v45 * _S22) + (float)(v44 * _S5)) + (float)(v46 * _S14))
              + (float)(v47 * fmaxf(_S5, fmaxf(_S22, _S14)));
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v79));
          __asm { FCVT            S0, H0 }
          v90 = _S19 * _S0;
          v91 = _S20 * _S0;
          v92 = _S21 * _S0;
          _H21 = *(_WORD *)(v42 + 2 * llroundf(v87));
          __asm { FCVT            S21, H21 }
          v95 = _S5 * _S21;
          _S22 = _S22 * _S21;
          _S21 = _S14 * _S21;
          v98 = (float)((float)(v33 * v91) + (float)(v90 * v32)) + (float)(v92 * v34);
          v99 = (float)((float)(v36 * v91) + (float)(v90 * v35)) + (float)(v92 * v37);
          _S0 = (float)((float)(v40 * v91) + (float)(v90 * v38)) + (float)(v92 * v39);
          _S19 = (float)((float)(v33 * _S22) + (float)(v95 * v32)) + (float)(_S21 * v34);
          v102 = (float)((float)(v36 * _S22) + (float)(v95 * v35)) + (float)(_S21 * v37);
          v103 = (float)((float)(v40 * _S22) + (float)(v95 * v38)) + (float)(_S21 * v39);
          LOWORD(_S21) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H0
            FCVT            S0, H19
          }
          LOWORD(_S19) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          v108 = llroundf(fminf(fmaxf(v103, 0.0), 8191.0));
          __asm { FCVT            S5, H19 }
          LOWORD(_S19) = *(_WORD *)(v43 + 2 * v108);
          __asm { FCVT            S19, H19 }
          v111 = (float)((float)((float)(v30 * _S22) + (float)(v130 * _S21)) + (float)(v31 * _S24)) + v25;
          v112 = (float)((float)((float)(v30 * _S5) + (float)(v130 * _S0)) + (float)(v31 * _S19)) + v25;
          if (v111 < v25)
            v113 = v25;
          else
            v113 = (float)((float)((float)(v30 * _S22) + (float)(v130 * _S21)) + (float)(v31 * _S24)) + v25;
          if (v111 <= v27)
            v114 = v113;
          else
            v114 = v27;
          *v65 = llroundf(v114) << v53;
          if (v112 < v25)
            v115 = v25;
          else
            v115 = (float)((float)((float)(v30 * _S5) + (float)(v130 * _S0)) + (float)(v31 * _S19)) + v25;
          if (v112 > v27)
            v115 = v27;
          v65[1] = llroundf(v115) << v53;
          v116 = _S21 + _S0;
          v117 = _S22 + _S5;
          v118 = _S24 + _S19;
          v119 = (float)((float)(v26 + (float)(v116 * v129)) + (float)(v117 * v128)) + (float)(v118 * v127);
          v120 = v29;
          if (v119 <= v29)
          {
            v120 = (float)((float)(v26 + (float)(v116 * v129)) + (float)(v117 * v128)) + (float)(v118 * v127);
            if (v119 < v131)
              v120 = v131;
          }
          v121 = (_WORD *)(v59 + 2 * v63);
          v122 = (float)((float)(v26 + (float)(v116 * v126)) + (float)(v117 * v125)) + (float)(v118 * v124);
          *v121 = llroundf(v120) << v53;
          v123 = v29;
          if (v122 <= v29)
          {
            v123 = v122;
            if (v122 < v131)
              v123 = v131;
          }
          v121[1] = llroundf(v123) << v53;
          if (v64)
          {
            *v64 = 21845 * (v67 >> 30);
            v64[1] = 21845 * (v68 >> 30);
            v64 += 2;
          }
          v63 += 2;
          v66 += 2;
          v65 += 2;
        }
        while (v13 > v63);
      }
      v61 += v19;
      v60 += v20;
      v59 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, double a9, float a10)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  unint64_t v60;
  unsigned int *v61;
  _WORD *v62;
  _WORD *v63;
  unsigned int v64;
  unsigned __int32 v65;
  int8x8_t v71;
  int8x8_t v76;
  float v81;
  float v90;
  float v91;
  BOOL v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unsigned __int8 *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;

  v10 = *(_QWORD *)(result + 28);
  v11 = *result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = v12 + *(_QWORD *)(result + 44);
    v17 = v13 - v12;
    v18 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 17);
    v20 = (_QWORD *)*((_QWORD *)result + 7);
    v21 = **((_QWORD **)result + 8);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v25 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    *(float *)&a9 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 144);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 146);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 148);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v18 + 150);
    v29 = (float)LODWORD(a8);
    LOWORD(a10) = *(_WORD *)(v18 + 152);
    v30 = (float)LODWORD(a10);
    v31 = *(float *)(v18 + 36);
    v32 = *(float *)(v18 + 40);
    v33 = *(float *)(v18 + 44);
    v110 = *(float *)(v18 + 52) * 0.5;
    v111 = *(float *)(v18 + 48) * 0.5;
    v108 = *(float *)(v18 + 60) * 0.5;
    v109 = *(float *)(v18 + 56) * 0.5;
    v34 = *(float *)(v18 + 72);
    v106 = *(float *)(v18 + 68) * 0.5;
    v107 = *(float *)(v18 + 64) * 0.5;
    v35 = *(float *)(v18 + 76);
    v36 = *(float *)(v18 + 80);
    v37 = *(float *)(v18 + 84);
    v38 = *(float *)(v18 + 88);
    v39 = *(float *)(v18 + 92);
    v40 = *(float *)(v18 + 96);
    v42 = *(float *)(v18 + 100);
    v41 = *(float *)(v18 + 104);
    v43 = v18 + 164;
    v44 = v18 + 16548;
    v45 = *((_QWORD *)result + 14);
    v46 = (uint64_t *)*((_QWORD *)result + 16);
    v47 = *((_QWORD *)result + 13) * a2 / v11 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v18 + 132);
    if (v49 >= 0x11)
      v50 = 0;
    else
      v50 = 16 - v49;
    v51 = v46[2];
    if (v51)
      v52 = v51 + v47 * v24 + 2 * v45;
    else
      v52 = 0;
    v54 = *v46;
    v53 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v53 == 0;
    result = (unsigned __int8 *)(v53 + v47 * v23 + 2 * v45);
    if (_ZF)
      result = 0;
    v56 = v54 + v47 * v22 + 2 * v45;
    v57 = *v20 + v21 * v16 + 4 * v48;
    v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v15)
      {
        v60 = 0;
        v61 = (unsigned int *)v57;
        v62 = (_WORD *)v52;
        v63 = (_WORD *)v56;
        do
        {
          v64 = *v61;
          v65 = v61[1];
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v61), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v58), v25), 0), v59)));
          _D6.i16[0] = *(_WORD *)(v43 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _H18 = *(_WORD *)(v43 + 2 * _D6.u32[1]);
          v71.i32[0] = *v61;
          v71.i32[1] = v65 >> 20;
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v71, (int8x8_t)0x300000003)), v58), v25), 0), v59)));
          __asm { FCVT            S18, H18 }
          _D19.i16[0] = *(_WORD *)(v43 + 2 * _D19.u32[0]);
          _H20 = *(_WORD *)(v43 + 2 * _D19.u32[1]);
          __asm
          {
            FCVT            S19, H19
            FCVT            S20, H20
          }
          v76.i32[0] = v65 >> 10;
          v76.i32[1] = v65;
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v76, (int8x8_t)0x300000003)), v58), v25), 0), v59)));
          _D15.i16[0] = *(_WORD *)(v43 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H22 = *(_WORD *)(v43 + 2 * _D15.u32[1]);
          __asm { FCVT            S22, H22 }
          _S24 = (float)((float)(v35 * _S18) + (float)(*(float *)_D6.i32 * v34)) + (float)(*(float *)_D19.i32 * v36);
          v81 = (float)((float)(v38 * _S18) + (float)(*(float *)_D6.i32 * v37)) + (float)(*(float *)_D19.i32 * v39);
          *(float *)_D6.i32 = (float)((float)(v42 * _S18) + (float)(*(float *)_D6.i32 * v40))
                            + (float)(*(float *)_D19.i32 * v41);
          _S18 = (float)((float)(v35 * *(float *)_D15.i32) + (float)(_S20 * v34)) + (float)(_S22 * v36);
          *(float *)_D19.i32 = (float)((float)(v38 * *(float *)_D15.i32) + (float)(_S20 * v37)) + (float)(_S22 * v39);
          _S20 = (float)((float)(v42 * *(float *)_D15.i32) + (float)(_S20 * v40)) + (float)(_S22 * v41);
          LOWORD(_S22) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _D6.i16[0] = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)_D6.i32, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S18, H18
          }
          _D19.i16[0] = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          v90 = (float)((float)((float)(v32 * _S24) + (float)(v31 * _S22)) + (float)(v33 * _S6)) + v26;
          if (v90 < v26)
            v91 = v26;
          else
            v91 = (float)((float)((float)(v32 * _S24) + (float)(v31 * _S22)) + (float)(v33 * _S6)) + v26;
          v92 = v90 <= v28;
          v93 = (float)((float)((float)(v32 * _S19) + (float)(v31 * _S18)) + (float)(v33 * _S20)) + v26;
          if (!v92)
            v91 = v28;
          v94 = llroundf(v91);
          if (v93 < v26)
            v95 = v26;
          else
            v95 = (float)((float)((float)(v32 * _S19) + (float)(v31 * _S18)) + (float)(v33 * _S20)) + v26;
          if (v93 <= v28)
            v96 = v95;
          else
            v96 = v28;
          v97 = _S22 + _S18;
          *v63 = v94 << v50;
          v63[1] = llroundf(v96) << v50;
          v98 = _S24 + _S19;
          v99 = (float)(v27 + (float)(v97 * v111)) + (float)((float)(_S24 + _S19) * v110);
          v100 = _S6 + _S20;
          v101 = v99 + (float)((float)(_S6 + _S20) * v109);
          v102 = v30;
          if (v101 <= v30)
          {
            v102 = v101;
            if (v101 < v29)
              v102 = v29;
          }
          v103 = &result[2 * v60];
          v104 = (float)((float)(v27 + (float)(v97 * v108)) + (float)(v98 * v107)) + (float)(v100 * v106);
          *(_WORD *)v103 = llroundf(v102) << v50;
          v105 = v30;
          if (v104 <= v30)
          {
            v105 = v104;
            if (v104 < v29)
              v105 = v29;
          }
          *((_WORD *)v103 + 1) = llroundf(v105) << v50;
          if (v62)
          {
            *v62 = 21845 * (v64 >> 30);
            v62[1] = 21845 * (v65 >> 30);
            v62 += 2;
          }
          v60 += 2;
          v61 += 2;
          v63 += 2;
        }
        while (v15 > v60);
      }
      v57 += v21;
      v56 += v22;
      result += v23;
      v52 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unsigned int *v58;
  _WORD *v59;
  _WORD *v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  _WORD *v78;
  float v79;
  float v80;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v17 + 36);
    v33 = *(float *)(v17 + 40);
    v34 = *(float *)(v17 + 44);
    v35 = *(float *)(v17 + 48) * 0.5;
    v36 = *(float *)(v17 + 52) * 0.5;
    v37 = *(float *)(v17 + 56) * 0.5;
    v38 = *(float *)(v17 + 60) * 0.5;
    v39 = *(float *)(v17 + 64) * 0.5;
    v40 = *(float *)(v17 + 68) * 0.5;
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2;
    v43 = (_QWORD *)*((_QWORD *)result + 16);
    v44 = v42 / v10 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v17 + 132);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = v43[2];
    if (v48)
      v49 = v48 + v44 * v23 + 2 * v41;
    else
      v49 = 0;
    v52 = v43;
    v50 = *v43;
    v51 = v52[1];
    v53 = v51 == 0;
    v54 = v51 + v44 * v22 + 2 * v41;
    if (v53)
      v54 = 0;
    v55 = v50 + v44 * v21 + 2 * v41;
    result = (unsigned __int8 *)(*v19 + v20 * v15 + 4 * v45);
    v56 = v47;
    do
    {
      if (v14)
      {
        v57 = 0;
        v58 = (unsigned int *)result;
        v59 = (_WORD *)v49;
        v60 = (_WORD *)v55;
        do
        {
          v61 = *v58;
          v62 = v25 * (float)((float)(*v58 & 0x3FF) - v26);
          v63 = v25 * (float)((float)((*v58 >> 10) & 0x3FF) - v26);
          v64 = v25 * (float)((float)((*v58 >> 20) & 0x3FF) - v26);
          v65 = (float)((float)((float)(v33 * v63) + (float)(v32 * v64)) + (float)(v34 * v62)) + v27;
          v66 = v29;
          if (v65 <= v29)
          {
            v66 = (float)((float)((float)(v33 * v63) + (float)(v32 * v64)) + (float)(v34 * v62)) + v27;
            if (v65 < v27)
              v66 = v27;
          }
          v67 = v58[1];
          v68 = v25 * (float)((float)(v67 & 0x3FF) - v26);
          v69 = v25 * (float)((float)((v67 >> 10) & 0x3FF) - v26);
          v70 = v25 * (float)((float)((v67 >> 20) & 0x3FF) - v26);
          v71 = (float)((float)((float)(v33 * v69) + (float)(v32 * v70)) + (float)(v34 * v68)) + v27;
          *v60 = llroundf(v66) << v56;
          v72 = v29;
          if (v71 <= v29)
          {
            v72 = (float)((float)((float)(v33 * v69) + (float)(v32 * v70)) + (float)(v34 * v68)) + v27;
            if (v71 < v27)
              v72 = v27;
          }
          v60[1] = llroundf(v72) << v56;
          v73 = v64 + v70;
          v74 = v63 + v69;
          v75 = v62 + v68;
          v76 = (float)((float)(v28 + (float)(v73 * v35)) + (float)(v74 * v36)) + (float)(v75 * v37);
          v77 = v31;
          if (v76 <= v31)
          {
            v77 = (float)((float)(v28 + (float)(v73 * v35)) + (float)(v74 * v36)) + (float)(v75 * v37);
            if (v76 < v30)
              v77 = v30;
          }
          v78 = (_WORD *)(v54 + 2 * v57);
          v79 = (float)((float)(v28 + (float)(v73 * v38)) + (float)(v74 * v39)) + (float)(v75 * v40);
          *v78 = llroundf(v77) << v56;
          v80 = v31;
          if (v79 <= v31)
          {
            v80 = v79;
            if (v79 < v30)
              v80 = v30;
          }
          v78[1] = llroundf(v80) << v56;
          if (v59)
          {
            *v59 = 21845 * (v61 >> 30);
            v59[1] = 21845 * (v67 >> 30);
            v59 += 2;
          }
          v57 += 2;
          v58 += 2;
          v60 += 2;
        }
        while (v14 > v57);
      }
      result += v20;
      v55 += v21;
      v54 += v22;
      v49 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  unint64_t v54;
  _WORD *v55;
  _WORD *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  float32x2_t v60;
  int32x2_t v68;
  float v70;
  float v71;
  float v72;
  int8x8_t v74;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v89;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v100;
  unsigned int v102;
  unsigned int v107;
  float v108;
  float v109;
  float v111;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  BOOL v119;
  float v120;
  __int16 v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_WORD *)v15[1];
  if (v19)
    v19 = (_WORD *)((char *)v19 + 2 * v14 + v17[1] * v16);
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = v18 + v21;
    v28 = **((_QWORD **)result + 7) + v23 * v22 + 4 * *(_QWORD *)(result + 36);
    v29 = (_WORD *)(v26 + 2 * v14);
    v30 = v27 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a7) = *(_WORD *)(v25 + 144);
    LOWORD(a8) = *(_WORD *)(v25 + 146);
    LOWORD(a9) = *(_WORD *)(v25 + 148);
    LOWORD(a10) = *(_WORD *)(v25 + 150);
    LOWORD(v10) = *(_WORD *)(v25 + 152);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)&a3 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a7);
    v133 = (float)LODWORD(a8);
    v33 = (float)LODWORD(a9);
    v34 = (float)LODWORD(a10);
    v35 = (float)v10;
    v36 = *(float *)(v25 + 40);
    v134 = *(float *)(v25 + 36);
    v37 = *(float *)(v25 + 44);
    v131 = *(float *)(v25 + 52) * 0.5;
    v132 = *(float *)(v25 + 48) * 0.5;
    v130 = *(float *)(v25 + 56) * 0.5;
    v129 = *(float *)(v25 + 60) * 0.5;
    v128 = *(float *)(v25 + 64) * 0.5;
    v126 = *(float *)(v25 + 72);
    v127 = *(float *)(v25 + 68) * 0.5;
    v38 = *(float *)(v25 + 76);
    v39 = *(float *)(v25 + 80);
    v40 = *(float *)(v25 + 84);
    v41 = *(float *)(v25 + 88);
    v42 = *(float *)(v25 + 92);
    v43 = *(float *)(v25 + 96);
    v45 = *(float *)(v25 + 100);
    v44 = *(float *)(v25 + 104);
    v46 = v25 + 164;
    v47 = v25 + 16548;
    v48 = v25 + 32932;
    v49 = *(float *)(v25 + 108);
    v50 = *(float *)(v25 + 112);
    v51 = *(float *)(v25 + 116);
    v52 = *(float *)(v25 + 120);
    result = *(unsigned __int8 **)(result + 20);
    v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    do
    {
      if (result)
      {
        v54 = 0;
        v55 = v19;
        v56 = v29;
        v57 = (unsigned int *)v28;
        do
        {
          v58 = *v57;
          v59 = v57[1];
          v60 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = (int8x8_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v57), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          _D0.i16[0] = *(_WORD *)(v46 + 2 * _D0.u32[0]);
          __asm { FCVT            S19, H0 }
          _D0.i16[0] = *(_WORD *)(v46 + 2 * _D0.u32[1]);
          __asm { FCVT            S20, H0 }
          _D0.i32[0] = *v57;
          _D0.i32[1] = v59 >> 20;
          v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(_D0, (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          _D0.i16[0] = *(_WORD *)(v46 + 2 * v68.u32[0]);
          __asm { FCVT            S22, H0 }
          v70 = fmaxf(_S19, fmaxf(_S20, _S22));
          v71 = (float)((float)((float)(v50 * _S20) + (float)(v49 * _S19)) + (float)(v51 * _S22)) + (float)(v52 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v50 * _S20) + (float)(v49 * _S19)) + (float)(v51 * _S22)) + (float)(v52 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H24 = *(_WORD *)(v46 + 2 * v68.u32[1]);
          v74.i32[0] = v59 >> 10;
          v74.i32[1] = v57[1];
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v74, (int8x8_t)0x300000003)), v53), v31), 0), v60)));
          __asm { FCVT            S21, H24 }
          _H24 = *(_WORD *)(v46 + 2 * _D13.u32[0]);
          _D13.i16[0] = *(_WORD *)(v46 + 2 * _D13.u32[1]);
          __asm
          {
            FCVT            S14, H24
            FCVT            S13, H13
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(v72));
          __asm { FCVT            S24, H0 }
          v82 = _S19 * _S24;
          v83 = _S20 * _S24;
          v84 = _S22 * _S24;
          v85 = (float)((float)((float)(v50 * _S14) + (float)(v49 * _S21)) + (float)(v51 * _S13))
              + (float)(v52 * fmaxf(_S21, fmaxf(_S14, _S13)));
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          _H22 = *(_WORD *)(v47 + 2 * llroundf(v86));
          __asm { FCVT            S22, H22 }
          v89 = _S21 * _S22;
          _S24 = _S14 * _S22;
          v91 = _S13 * _S22;
          v92 = (float)((float)(v38 * v83) + (float)(v82 * v126)) + (float)(v84 * v39);
          v93 = (float)((float)(v41 * v83) + (float)(v82 * v40)) + (float)(v84 * v42);
          v94 = (float)((float)(v45 * v83) + (float)(v82 * v43)) + (float)(v84 * v44);
          v95 = (float)(v38 * _S24) + (float)(v89 * v126);
          v96 = (float)(v41 * _S24) + (float)(v89 * v40);
          v97 = (float)(v45 * _S24) + (float)(v89 * v43);
          _S19 = v95 + (float)(v91 * v39);
          _S20 = v96 + (float)(v91 * v42);
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          v100 = v97 + (float)(v91 * v44);
          __asm { FCVT            S22, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v102 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          __asm { FCVT            S0, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v102);
          __asm { FCVT            S24, H24 }
          LOWORD(_S19) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          v107 = llroundf(fminf(fmaxf(v100, 0.0), 8191.0));
          v108 = (float)(v36 * _S0) + (float)(v134 * _S22);
          v109 = _S22 + _S19;
          _S0 = _S0 + _S20;
          v111 = (float)(v133 + (float)(v109 * v132)) + (float)(_S0 * v131);
          v112 = (float)(v133 + (float)(v109 * v129)) + (float)(_S0 * v128);
          LOWORD(_S0) = *(_WORD *)(v48 + 2 * v107);
          __asm { FCVT            S0, H0 }
          v114 = v108 + (float)(v37 * _S24);
          v115 = _S24 + _S0;
          v116 = v111 + (float)((float)(_S24 + _S0) * v130);
          v117 = v112 + (float)(v115 * v127);
          if (v116 < v32)
            v118 = v32;
          else
            v118 = v116;
          v119 = v116 <= v33;
          v120 = v114 + v32;
          if (!v119)
            v118 = v33;
          v121 = llroundf(v118);
          if (v120 < v34)
            v122 = (float)LODWORD(a10);
          else
            v122 = v114 + v32;
          *v56 = v121;
          if (v120 > v35)
            v122 = (float)v10;
          v56[1] = llroundf(v122);
          v123 = v33;
          if (v117 <= v33)
          {
            v123 = v117;
            if (v117 < v32)
              v123 = v32;
          }
          v124 = (float)((float)((float)(v36 * _S20) + (float)(v134 * _S19)) + (float)(v37 * _S0)) + v32;
          v56[2] = llroundf(v123);
          v125 = (float)v10;
          if (v124 <= v35)
          {
            v125 = v124;
            if (v124 < v34)
              v125 = (float)LODWORD(a10);
          }
          v56[3] = llroundf(v125);
          if (v55)
          {
            *v55 = 21845 * (v58 >> 30);
            v55[1] = 21845 * (v59 >> 30);
            v55 += 2;
          }
          v54 += 2;
          v57 += 2;
          v56 += 4;
        }
        while ((unint64_t)result > v54);
      }
      v28 += v23;
      v29 = (_WORD *)((char *)v29 + v24);
      ++v20;
    }
    while (v20 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_v216_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_v216_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  int32x2_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  unint64_t v53;
  unsigned int *v54;
  _WORD *v55;
  _WORD *v56;
  unsigned int v57;
  unsigned __int32 v58;
  int8x8_t v65;
  int8x8_t v70;
  float v75;
  float v76;
  unsigned int v78;
  unsigned int v82;
  float v83;
  float v84;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  __int16 v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_WORD *)v14[1];
  if (v18)
    v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *(_QWORD *)(result + 152);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 4 * *(_QWORD *)(result + 36);
    v29 = (_WORD *)(v24 + 2 * v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 144);
    LOWORD(a7) = *(_WORD *)(v25 + 146);
    LOWORD(a8) = *(_WORD *)(v25 + 148);
    LOWORD(a9) = *(_WORD *)(v25 + 150);
    v31 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    *(float *)v9.i32 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    LOWORD(a7) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a7);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v102 = *(float *)(v25 + 48) * 0.5;
    v101 = *(float *)(v25 + 52) * 0.5;
    v100 = *(float *)(v25 + 56) * 0.5;
    v99 = *(float *)(v25 + 60) * 0.5;
    v98 = *(float *)(v25 + 64) * 0.5;
    v40 = *(float *)(v25 + 72);
    v97 = *(float *)(v25 + 68) * 0.5;
    v41 = *(float *)(v25 + 76);
    v42 = *(float *)(v25 + 80);
    v43 = *(float *)(v25 + 84);
    v44 = *(float *)(v25 + 88);
    v45 = *(float *)(v25 + 92);
    v46 = *(float *)(v25 + 96);
    v47 = v25 + 164;
    v48 = v25 + 16548;
    v50 = *(float *)(v25 + 100);
    v49 = *(float *)(v25 + 104);
    v51 = (float32x2_t)vdup_lane_s32(v9, 0);
    result = 21845;
    v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v26)
      {
        v53 = 0;
        v54 = (unsigned int *)v28;
        v55 = v18;
        v56 = v29;
        do
        {
          v57 = *v54;
          v58 = v54[1];
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v54), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D4.i16[0] = *(_WORD *)(v47 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H18 = *(_WORD *)(v47 + 2 * _D4.u32[1]);
          v65.i32[0] = *v54;
          v65.i32[1] = v58 >> 20;
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v65, (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D19.i16[0] = *(_WORD *)(v47 + 2 * _D19.u32[0]);
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          _H20 = *(_WORD *)(v47 + 2 * _D19.u32[1]);
          __asm { FCVT            S20, H20 }
          v70.i32[0] = v58 >> 10;
          v70.i32[1] = v58;
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v70, (int8x8_t)0x300000003)), v51), v31), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v47 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S22 = (float)((float)(v41 * _S18) + (float)(*(float *)_D4.i32 * v40)) + (float)(*(float *)_D19.i32 * v42);
          _S24 = (float)((float)(v44 * _S18) + (float)(*(float *)_D4.i32 * v43)) + (float)(*(float *)_D19.i32 * v45);
          *(float *)_D4.i32 = (float)((float)(v50 * _S18) + (float)(*(float *)_D4.i32 * v46))
                            + (float)(*(float *)_D19.i32 * v49);
          _S18 = (float)(v41 * *(float *)_D15.i32) + (float)(_S20 * v40);
          *(float *)_D19.i32 = (float)(v44 * *(float *)_D15.i32) + (float)(_S20 * v43);
          v75 = (float)(v50 * *(float *)_D15.i32) + (float)(_S20 * v46);
          _D15.i16[0] = *(_WORD *)(v47 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D19.i32 = *(float *)_D19.i32 + (float)(*(float *)_D15.i32 * v45);
          LOWORD(_S22) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          v76 = v75 + (float)(*(float *)_D15.i32 * v49);
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          v78 = llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0));
          __asm { FCVT            S4, H24 }
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v78);
          __asm { FCVT            S24, H24 }
          LOWORD(_S18) = *(_WORD *)(v48
                                  + 2 * llroundf(fminf(fmaxf(_S18 + (float)(*(float *)_D15.i32 * v42), 0.0), 8191.0)));
          __asm { FCVT            S15, H18 }
          LOWORD(_S18) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v82 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          v83 = (float)(v38 * *(float *)_D4.i32) + (float)(v37 * _S22);
          *(float *)_D19.i32 = _S22 + _S15;
          *(float *)_D4.i32 = *(float *)_D4.i32 + _S18;
          v84 = (float)(v33 + (float)((float)(_S22 + _S15) * v102)) + (float)(*(float *)_D4.i32 * v101);
          *(float *)_D4.i32 = (float)(v33 + (float)(*(float *)_D19.i32 * v99)) + (float)(*(float *)_D4.i32 * v98);
          _D19.i16[0] = *(_WORD *)(v48 + 2 * v82);
          __asm { FCVT            S19, H19 }
          v86 = v83 + (float)(v39 * _S24);
          v87 = v84 + (float)((float)(_S24 + _S19) * v100);
          v88 = *(float *)_D4.i32 + (float)((float)(_S24 + _S19) * v97);
          if (v87 < v32)
            v89 = v32;
          else
            v89 = v87;
          v90 = v87 <= v34;
          v91 = v86 + v32;
          if (!v90)
            v89 = v34;
          v92 = llroundf(v89);
          if (v91 < v35)
            v93 = v35;
          else
            v93 = v86 + v32;
          *v56 = v92;
          if (v91 > v36)
            v93 = v36;
          v56[1] = llroundf(v93);
          v94 = v34;
          if (v88 <= v34)
          {
            v94 = v88;
            if (v88 < v32)
              v94 = v32;
          }
          v95 = (float)((float)((float)(v38 * _S18) + (float)(v37 * _S15)) + (float)(v39 * _S19)) + v32;
          v56[2] = llroundf(v94);
          v96 = v36;
          if (v95 <= v36)
          {
            v96 = v95;
            if (v95 < v35)
              v96 = v35;
          }
          v56[3] = llroundf(v96);
          if (v55)
          {
            *v55 = 21845 * (v57 >> 30);
            v55[1] = 21845 * (v58 >> 30);
            v55 += 2;
          }
          v53 += 2;
          v54 += 2;
          v56 += 4;
        }
        while (v26 > v53);
      }
      v28 += v22;
      v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  _WORD *v48;
  _WORD *v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_WORD *)v13[1];
  if (v17)
    v17 = (_WORD *)((char *)v17 + 2 * v12 + v15[1] * v14);
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 4 * *(_QWORD *)(result + 36);
    v28 = (_WORD *)(v23 + 2 * v12);
    v29 = v26 - v20;
    *(float *)&v30 = (float)*(unsigned int *)(v24 + 136);
    v31 = *(float *)&v30 / (float)*(unsigned int *)(v24 + 128);
    LOWORD(v30) = *(_WORD *)(v24 + 140);
    v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    v36 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v24 + 36);
    v39 = *(float *)(v24 + 40);
    v40 = *(float *)(v24 + 44);
    v41 = *(float *)(v24 + 48) * 0.5;
    v42 = *(float *)(v24 + 52) * 0.5;
    v43 = *(float *)(v24 + 56) * 0.5;
    v44 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 64) * 0.5;
    v46 = *(float *)(v24 + 68) * 0.5;
    do
    {
      if (v25)
      {
        v47 = 0;
        result = (unsigned __int8 *)v27;
        v48 = v17;
        v49 = v28;
        do
        {
          v50 = *(_DWORD *)result;
          v51 = *((_DWORD *)result + 1);
          v52 = v31 * (float)((float)(*(_DWORD *)result & 0x3FF) - v32);
          v53 = v31 * (float)((float)((*(_DWORD *)result >> 10) & 0x3FF) - v32);
          v54 = v31 * (float)((float)((*(_DWORD *)result >> 20) & 0x3FF) - v32);
          v55 = v31 * (float)((float)(v51 & 0x3FF) - v32);
          v56 = v31 * (float)((float)((v51 >> 10) & 0x3FF) - v32);
          v57 = v31 * (float)((float)((v51 >> 20) & 0x3FF) - v32);
          v58 = (float)((float)((float)(v39 * v53) + (float)(v38 * v54)) + (float)(v40 * v52)) + v33;
          v59 = v54 + v57;
          v60 = v53 + v56;
          v61 = v52 + v55;
          v62 = (float)((float)(v34 + (float)(v59 * v41)) + (float)(v60 * v42)) + (float)(v61 * v43);
          v63 = (float)((float)(v34 + (float)(v59 * v44)) + (float)(v60 * v45)) + (float)(v61 * v46);
          if (v62 < v33)
            v64 = v33;
          else
            v64 = v62;
          if (v62 > v35)
            v64 = v35;
          *v49 = llroundf(v64);
          if (v58 < v36)
            v65 = v36;
          else
            v65 = v58;
          if (v58 > v37)
            v65 = v37;
          v49[1] = llroundf(v65);
          v66 = v35;
          if (v63 <= v35)
          {
            v66 = v63;
            if (v63 < v33)
              v66 = v33;
          }
          v67 = (float)((float)((float)(v39 * v56) + (float)(v38 * v57)) + (float)(v40 * v55)) + v33;
          v49[2] = llroundf(v66);
          v68 = v37;
          if (v67 <= v37)
          {
            v68 = v67;
            if (v67 < v36)
              v68 = v36;
          }
          v49[3] = llroundf(v68);
          if (v48)
          {
            *v48 = 21845 * (v50 >> 30);
            v48[1] = 21845 * (v51 >> 30);
            v48 += 2;
          }
          v47 += 2;
          result += 8;
          v49 += 4;
        }
        while (v25 > v47);
      }
      v27 += v21;
      v28 = (_WORD *)((char *)v28 + v22);
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  float32x2_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float v75;
  float v76;
  float v80;
  float v81;
  float v82;
  float v83;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 17);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = **((_QWORD **)result + 8);
    v17 = *v14;
    v18 = v14[1];
    v19 = v14[2];
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 144);
    v22 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 146);
    v23 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 148);
    v24 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 150);
    v25 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 152);
    v26 = (float)v20;
    v27 = *(float *)(v13 + 36);
    v28 = *(float *)(v13 + 40);
    v29 = *(float *)(v13 + 44);
    v98 = *(float *)(v13 + 52);
    v99 = *(float *)(v13 + 48);
    v96 = *(float *)(v13 + 60);
    v97 = *(float *)(v13 + 56);
    v30 = *(float *)(v13 + 68);
    v95 = *(float *)(v13 + 64);
    v31 = *(float *)(v13 + 72);
    v32 = *(float *)(v13 + 76);
    v33 = *(float *)(v13 + 80);
    v34 = *(float *)(v13 + 84);
    v35 = *(float *)(v13 + 88);
    v36 = *(float *)(v13 + 92);
    v38 = *(float *)(v13 + 96);
    v37 = *(float *)(v13 + 100);
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = v13 + 164;
    v42 = v13 + 16548;
    v43 = v13 + 32932;
    v44 = *(float *)(v13 + 112);
    v45 = *(float *)(v13 + 116);
    v46 = *(float *)(v13 + 120);
    v47 = *((_QWORD *)result + 14);
    v48 = (_QWORD *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    v51 = v48[2];
    if (v51)
      result = (unsigned __int8 *)(v51 + v49 * v19 + v47);
    else
      result = 0;
    v54 = v48;
    v53 = *v48;
    v52 = v54[1];
    _ZF = v52 == 0;
    v56 = (_BYTE *)(v52 + v49 * v18 + v47);
    if (_ZF)
      v56 = 0;
    v57 = (_BYTE *)(v53 + v49 * v17 + v47);
    v58 = *v15 + v16 * v11 + 4 * v50;
    v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      if (v10)
      {
        v60 = v10;
        v61 = result;
        v62 = v56;
        v63 = v57;
        v64 = (unsigned int *)v58;
        do
        {
          v66 = *v64++;
          v65 = v66;
          _D7 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v66), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v59), v21), 0), (float32x2_t)vdup_n_s32(0x45FFF800u))));
          _D7.i16[0] = *(_WORD *)(v41 + 2 * _D7.u32[0]);
          __asm { FCVT            S19, H7 }
          _D7.i16[0] = *(_WORD *)(v41 + 2 * _D7.u32[1]);
          __asm { FCVT            S20, H7 }
          _H0 = *(_WORD *)(v41
                         + 2
                         * llroundf(fminf(fmaxf(v21 * (float)((float)(v66 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          v75 = (float)((float)((float)(v44 * _S20) + (float)(v40 * _S19)) + (float)(v45 * _S21))
              + (float)(v46 * fmaxf(_S19, fmaxf(_S20, _S21)));
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          _S7 = _S19 * _S0;
          v80 = _S20 * _S0;
          v81 = _S21 * _S0;
          v82 = (float)((float)(v32 * v80) + (float)(_S7 * v31)) + (float)(v81 * v33);
          v83 = (float)((float)(v35 * v80) + (float)(_S7 * v34)) + (float)(v81 * v36);
          _S0 = (float)((float)(v37 * v80) + (float)(_S7 * v38)) + (float)(v81 * v39);
          LOWORD(_S7) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S19, H7 }
          LOWORD(_S7) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          v88 = (float)((float)((float)(v28 * _S20) + (float)(v27 * _S19)) + (float)(v29 * _S21)) + v22;
          v89 = v24;
          if (v88 <= v24)
          {
            v89 = (float)((float)((float)(v28 * _S20) + (float)(v27 * _S19)) + (float)(v29 * _S21)) + v22;
            if (v88 < v22)
              v89 = v22;
          }
          *v63++ = llroundf(v89);
          if (v62)
          {
            v90 = (float)((float)(v23 + (float)(_S19 * v99)) + (float)(_S20 * v98)) + (float)(_S21 * v97);
            v91 = v26;
            if (v90 <= v26)
            {
              v91 = (float)((float)(v23 + (float)(_S19 * v99)) + (float)(_S20 * v98)) + (float)(_S21 * v97);
              if (v90 < v25)
                v91 = v25;
            }
            v92 = (float)(v23 + (float)(_S19 * v96)) + (float)(_S20 * v95);
            v93 = v92 + (float)(_S21 * v30);
            *v62 = llroundf(v91);
            v94 = v26;
            if (v93 <= v26)
            {
              v94 = v92 + (float)(_S21 * v30);
              if (v93 < v25)
                v94 = v25;
            }
            v62[1] = llroundf(v94);
            v62 += 2;
          }
          if (v61)
            *v61++ = 85 * (v65 >> 30);
          --v60;
        }
        while (v60);
      }
      v58 += v16;
      v57 += v17;
      v56 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v55;
  uint64_t v56;
  float32x2_t v57;
  uint64_t v58;
  unsigned int *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  unsigned int v64;
  float v73;
  float v74;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v86 = *(float *)(v16 + 52);
    v87 = *(float *)(v16 + 48);
    v32 = *(float *)(v16 + 60);
    v85 = *(float *)(v16 + 56);
    v33 = *(float *)(v16 + 64);
    v34 = *(float *)(v16 + 68);
    v35 = *(float *)(v16 + 72);
    v36 = *(float *)(v16 + 76);
    v37 = *(float *)(v16 + 80);
    v38 = *(float *)(v16 + 84);
    v39 = *(float *)(v16 + 88);
    v40 = *(float *)(v16 + 92);
    v42 = *(float *)(v16 + 96);
    v41 = *(float *)(v16 + 100);
    v43 = *(float *)(v16 + 104);
    v44 = v16 + 164;
    v45 = v16 + 16548;
    v46 = *((_QWORD *)result + 14);
    v47 = (uint64_t *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = v47[2];
    if (v50)
      v51 = (_BYTE *)(v50 + v48 * v22 + v46);
    else
      v51 = 0;
    v53 = *v47;
    v52 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v52 == 0;
    result = (unsigned __int8 *)(v52 + v48 * v21 + v46);
    if (_ZF)
      result = 0;
    v55 = (_BYTE *)(v53 + v48 * v20 + v46);
    v56 = *v18 + v19 * v14 + 4 * v49;
    v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      if (v13)
      {
        v58 = v13;
        v59 = (unsigned int *)v56;
        v60 = v51;
        v61 = result;
        v62 = v55;
        do
        {
          v64 = *v59++;
          v63 = v64;
          _D7 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v64), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v57), v23), 0), (float32x2_t)vdup_n_s32(0x45FFF800u))));
          _D7.i16[0] = *(_WORD *)(v44 + 2 * _D7.u32[0]);
          __asm { FCVT            S7, H7 }
          _H12 = *(_WORD *)(v44 + 2 * _D7.u32[1]);
          __asm { FCVT            S12, H12 }
          _H5 = *(_WORD *)(v44
                         + 2
                         * llroundf(fminf(fmaxf(v23 * (float)((float)(v64 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v73 = (float)((float)(v36 * _S12) + (float)(*(float *)_D7.i32 * v35)) + (float)(_S5 * v37);
          v74 = (float)((float)(v39 * _S12) + (float)(*(float *)_D7.i32 * v38)) + (float)(_S5 * v40);
          _S5 = (float)((float)(v41 * _S12) + (float)(*(float *)_D7.i32 * v42)) + (float)(_S5 * v43);
          _D7.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S15, H7 }
          _D7.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S12, H7 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S13, H5 }
          v79 = (float)((float)((float)(v30 * _S12) + (float)(v29 * _S15)) + (float)(v31 * _S13)) + v24;
          v80 = v26;
          if (v79 <= v26)
          {
            v80 = (float)((float)((float)(v30 * _S12) + (float)(v29 * _S15)) + (float)(v31 * _S13)) + v24;
            if (v79 < v24)
              v80 = v24;
          }
          *v62++ = llroundf(v80);
          if (v61)
          {
            v81 = (float)((float)(v25 + (float)(_S15 * v87)) + (float)(_S12 * v86)) + (float)(_S13 * v85);
            v82 = v28;
            if (v81 <= v28)
            {
              v82 = (float)((float)(v25 + (float)(_S15 * v87)) + (float)(_S12 * v86)) + (float)(_S13 * v85);
              if (v81 < v27)
                v82 = v27;
            }
            v83 = (float)((float)(v25 + (float)(_S15 * v32)) + (float)(_S12 * v33)) + (float)(_S13 * v34);
            *v61 = llroundf(v82);
            v84 = v28;
            if (v83 <= v28)
            {
              v84 = v83;
              if (v83 < v27)
                v84 = v27;
            }
            v61[1] = llroundf(v84);
            v61 += 2;
          }
          if (v60)
            *v60++ = 85 * (v63 >> 30);
          --v58;
        }
        while (v58);
      }
      v56 += v19;
      v55 += v20;
      result += v21;
      v51 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned int *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v17 + 36);
    v33 = *(float *)(v17 + 40);
    v34 = *(float *)(v17 + 44);
    v35 = *(float *)(v17 + 48);
    v36 = *(float *)(v17 + 52);
    v37 = *(float *)(v17 + 56);
    v38 = *(float *)(v17 + 60);
    v39 = *(float *)(v17 + 64);
    v40 = *(float *)(v17 + 68);
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2;
    v43 = (_QWORD *)*((_QWORD *)result + 16);
    v44 = v42 / v10 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = v43[2];
    if (v46)
      v47 = (_BYTE *)(v46 + v44 * v23 + v41);
    else
      v47 = 0;
    v50 = v43;
    v48 = *v43;
    v49 = v50[1];
    v51 = v49 == 0;
    v52 = (_BYTE *)(v49 + v44 * v22 + v41);
    if (v51)
      v52 = 0;
    v53 = (_BYTE *)(v48 + v44 * v21 + v41);
    result = (unsigned __int8 *)(*v19 + v20 * v15 + 4 * v45);
    do
    {
      if (v14)
      {
        v54 = v14;
        v55 = (unsigned int *)result;
        v56 = v47;
        v57 = v52;
        v58 = v53;
        do
        {
          v60 = *v55++;
          v59 = v60;
          v61 = v25 * (float)((float)(v60 & 0x3FF) - v26);
          v62 = v25 * (float)((float)((v60 >> 10) & 0x3FF) - v26);
          v63 = v25 * (float)((float)((v60 >> 20) & 0x3FF) - v26);
          v64 = (float)((float)((float)(v33 * v62) + (float)(v32 * v63)) + (float)(v34 * v61)) + v27;
          v65 = v29;
          if (v64 <= v29)
          {
            v65 = (float)((float)((float)(v33 * v62) + (float)(v32 * v63)) + (float)(v34 * v61)) + v27;
            if (v64 < v27)
              v65 = v27;
          }
          *v58++ = llroundf(v65);
          if (v57)
          {
            v66 = (float)((float)(v28 + (float)(v63 * v35)) + (float)(v62 * v36)) + (float)(v61 * v37);
            v67 = v31;
            if (v66 <= v31)
            {
              v67 = (float)((float)(v28 + (float)(v63 * v35)) + (float)(v62 * v36)) + (float)(v61 * v37);
              if (v66 < v30)
                v67 = v30;
            }
            v68 = (float)((float)(v28 + (float)(v63 * v38)) + (float)(v62 * v39)) + (float)(v61 * v40);
            *v57 = llroundf(v67);
            v69 = v31;
            if (v68 <= v31)
            {
              v69 = v68;
              if (v68 < v30)
                v69 = v30;
            }
            v57[1] = llroundf(v69);
            v57 += 2;
          }
          if (v56)
            *v56++ = 85 * (v59 >> 30);
          --v54;
        }
        while (v54);
      }
      result += v20;
      v53 += v21;
      v52 += v22;
      v47 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  float v77;
  float v78;
  float v82;
  float v83;
  float v84;
  float v85;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 17);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = **((_QWORD **)result + 8);
    v17 = *v14;
    v18 = v14[1];
    v19 = v14[2];
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 144);
    v22 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 146);
    v23 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 148);
    v24 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 150);
    v25 = (float)v20;
    LOWORD(v20) = *(_WORD *)(v13 + 152);
    v26 = (float)v20;
    v27 = *(float *)(v13 + 36);
    v28 = *(float *)(v13 + 40);
    v29 = *(float *)(v13 + 44);
    v100 = *(float *)(v13 + 52);
    v101 = *(float *)(v13 + 48);
    v98 = *(float *)(v13 + 60);
    v99 = *(float *)(v13 + 56);
    v30 = *(float *)(v13 + 68);
    v97 = *(float *)(v13 + 64);
    v31 = *(float *)(v13 + 72);
    v32 = *(float *)(v13 + 76);
    v33 = *(float *)(v13 + 80);
    v34 = *(float *)(v13 + 84);
    v35 = *(float *)(v13 + 88);
    v36 = *(float *)(v13 + 92);
    v38 = *(float *)(v13 + 96);
    v37 = *(float *)(v13 + 100);
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = v13 + 164;
    v42 = v13 + 16548;
    v43 = v13 + 32932;
    v44 = *(float *)(v13 + 112);
    v45 = *(float *)(v13 + 116);
    v46 = *(float *)(v13 + 120);
    v47 = *((_QWORD *)result + 14);
    v48 = (_QWORD *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    v51 = *(unsigned __int8 *)(v13 + 132);
    if (v51 >= 0x11)
      v52 = 0;
    else
      v52 = 16 - v51;
    v53 = v48[2];
    if (v53)
      result = (unsigned __int8 *)(v53 + v49 * v19 + 2 * v47);
    else
      result = 0;
    v56 = v48;
    v55 = *v48;
    v54 = v56[1];
    _ZF = v54 == 0;
    v58 = v54 + v49 * v18 + 2 * v47;
    if (_ZF)
      v58 = 0;
    v59 = v55 + v49 * v17 + 2 * v47;
    v60 = *v15 + v16 * v11 + 4 * v50;
    v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      if (v10)
      {
        v62 = v10;
        v63 = result;
        v64 = (_WORD *)v58;
        v65 = (_WORD *)v59;
        v66 = (unsigned int *)v60;
        do
        {
          v68 = *v66++;
          v67 = v68;
          _D7 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v68), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v61), v21), 0), (float32x2_t)vdup_n_s32(0x45FFF800u))));
          _D7.i16[0] = *(_WORD *)(v41 + 2 * _D7.u32[0]);
          __asm { FCVT            S19, H7 }
          _D7.i16[0] = *(_WORD *)(v41 + 2 * _D7.u32[1]);
          __asm { FCVT            S20, H7 }
          _H0 = *(_WORD *)(v41
                         + 2
                         * llroundf(fminf(fmaxf(v21 * (float)((float)(v68 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          v77 = (float)((float)((float)(v44 * _S20) + (float)(v40 * _S19)) + (float)(v45 * _S21))
              + (float)(v46 * fmaxf(_S19, fmaxf(_S20, _S21)));
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          _S7 = _S19 * _S0;
          v82 = _S20 * _S0;
          v83 = _S21 * _S0;
          v84 = (float)((float)(v32 * v82) + (float)(_S7 * v31)) + (float)(v83 * v33);
          v85 = (float)((float)(v35 * v82) + (float)(_S7 * v34)) + (float)(v83 * v36);
          _S0 = (float)((float)(v37 * v82) + (float)(_S7 * v38)) + (float)(v83 * v39);
          LOWORD(_S7) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S19, H7 }
          LOWORD(_S7) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          v90 = (float)((float)((float)(v28 * _S20) + (float)(v27 * _S19)) + (float)(v29 * _S21)) + v22;
          v91 = v24;
          if (v90 <= v24)
          {
            v91 = (float)((float)((float)(v28 * _S20) + (float)(v27 * _S19)) + (float)(v29 * _S21)) + v22;
            if (v90 < v22)
              v91 = v22;
          }
          *v65++ = llroundf(v91) << v52;
          if (v64)
          {
            v92 = (float)((float)(v23 + (float)(_S19 * v101)) + (float)(_S20 * v100)) + (float)(_S21 * v99);
            v93 = v26;
            if (v92 <= v26)
            {
              v93 = (float)((float)(v23 + (float)(_S19 * v101)) + (float)(_S20 * v100)) + (float)(_S21 * v99);
              if (v92 < v25)
                v93 = v25;
            }
            v94 = (float)(v23 + (float)(_S19 * v98)) + (float)(_S20 * v97);
            v95 = v94 + (float)(_S21 * v30);
            *v64 = llroundf(v93) << v52;
            v96 = v26;
            if (v95 <= v26)
            {
              v96 = v94 + (float)(_S21 * v30);
              if (v95 < v25)
                v96 = v25;
            }
            v64[1] = llroundf(v96) << v52;
            v64 += 2;
          }
          if (v63)
            *v63++ = 21845 * (v67 >> 30);
          --v62;
        }
        while (v62);
      }
      v60 += v16;
      v59 += v17;
      v58 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  float32x2_t v59;
  uint64_t v60;
  unsigned int *v61;
  _WORD *v62;
  _WORD *v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  float v75;
  float v76;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v88 = *(float *)(v16 + 52);
    v89 = *(float *)(v16 + 48);
    v32 = *(float *)(v16 + 60);
    v87 = *(float *)(v16 + 56);
    v33 = *(float *)(v16 + 64);
    v34 = *(float *)(v16 + 68);
    v35 = *(float *)(v16 + 72);
    v36 = *(float *)(v16 + 76);
    v37 = *(float *)(v16 + 80);
    v38 = *(float *)(v16 + 84);
    v39 = *(float *)(v16 + 88);
    v40 = *(float *)(v16 + 92);
    v42 = *(float *)(v16 + 96);
    v41 = *(float *)(v16 + 100);
    v43 = *(float *)(v16 + 104);
    v44 = v16 + 164;
    v45 = v16 + 16548;
    v46 = *((_QWORD *)result + 14);
    v47 = (uint64_t *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v16 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = v47[2];
    if (v52)
      v53 = v52 + v48 * v22 + 2 * v46;
    else
      v53 = 0;
    v55 = *v47;
    v54 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v54 == 0;
    result = (unsigned __int8 *)(v54 + v48 * v21 + 2 * v46);
    if (_ZF)
      result = 0;
    v57 = v55 + v48 * v20 + 2 * v46;
    v58 = *v18 + v19 * v14 + 4 * v49;
    v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      if (v13)
      {
        v60 = v13;
        v61 = (unsigned int *)v58;
        v62 = (_WORD *)v53;
        v63 = result;
        v64 = (_WORD *)v57;
        do
        {
          v66 = *v61++;
          v65 = v66;
          _D7 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v66), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v59), v23), 0), (float32x2_t)vdup_n_s32(0x45FFF800u))));
          _D7.i16[0] = *(_WORD *)(v44 + 2 * _D7.u32[0]);
          __asm { FCVT            S7, H7 }
          _H12 = *(_WORD *)(v44 + 2 * _D7.u32[1]);
          __asm { FCVT            S12, H12 }
          _H5 = *(_WORD *)(v44
                         + 2
                         * llroundf(fminf(fmaxf(v23 * (float)((float)(v66 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v75 = (float)((float)(v36 * _S12) + (float)(*(float *)_D7.i32 * v35)) + (float)(_S5 * v37);
          v76 = (float)((float)(v39 * _S12) + (float)(*(float *)_D7.i32 * v38)) + (float)(_S5 * v40);
          _S5 = (float)((float)(v41 * _S12) + (float)(*(float *)_D7.i32 * v42)) + (float)(_S5 * v43);
          _D7.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S15, H7 }
          _D7.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H7 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S13, H5 }
          v81 = (float)((float)((float)(v30 * _S12) + (float)(v29 * _S15)) + (float)(v31 * _S13)) + v24;
          v82 = v26;
          if (v81 <= v26)
          {
            v82 = (float)((float)((float)(v30 * _S12) + (float)(v29 * _S15)) + (float)(v31 * _S13)) + v24;
            if (v81 < v24)
              v82 = v24;
          }
          *v64++ = llroundf(v82) << v51;
          if (v63)
          {
            v83 = (float)((float)(v25 + (float)(_S15 * v89)) + (float)(_S12 * v88)) + (float)(_S13 * v87);
            v84 = v28;
            if (v83 <= v28)
            {
              v84 = (float)((float)(v25 + (float)(_S15 * v89)) + (float)(_S12 * v88)) + (float)(_S13 * v87);
              if (v83 < v27)
                v84 = v27;
            }
            v85 = (float)((float)(v25 + (float)(_S15 * v32)) + (float)(_S12 * v33)) + (float)(_S13 * v34);
            *v63 = llroundf(v84) << v51;
            v86 = v28;
            if (v85 <= v28)
            {
              v86 = v85;
              if (v85 < v27)
                v86 = v27;
            }
            v63[1] = llroundf(v86) << v51;
            v63 += 2;
          }
          if (v62)
            *v62++ = 21845 * (v65 >> 30);
          --v60;
        }
        while (v60);
      }
      v58 += v19;
      v57 += v20;
      result += v21;
      v53 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unsigned int *v58;
  _WORD *v59;
  _WORD *v60;
  _WORD *v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v17 + 36);
    v33 = *(float *)(v17 + 40);
    v34 = *(float *)(v17 + 44);
    v35 = *(float *)(v17 + 48);
    v36 = *(float *)(v17 + 52);
    v37 = *(float *)(v17 + 56);
    v38 = *(float *)(v17 + 60);
    v39 = *(float *)(v17 + 64);
    v40 = *(float *)(v17 + 68);
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2;
    v43 = (_QWORD *)*((_QWORD *)result + 16);
    v44 = v42 / v10 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v17 + 132);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = v43[2];
    if (v48)
      v49 = v48 + v44 * v23 + 2 * v41;
    else
      v49 = 0;
    v52 = v43;
    v50 = *v43;
    v51 = v52[1];
    v53 = v51 == 0;
    v54 = v51 + v44 * v22 + 2 * v41;
    if (v53)
      v54 = 0;
    v55 = v50 + v44 * v21 + 2 * v41;
    result = (unsigned __int8 *)(*v19 + v20 * v15 + 4 * v45);
    v56 = v47;
    do
    {
      if (v14)
      {
        v57 = v14;
        v58 = (unsigned int *)result;
        v59 = (_WORD *)v49;
        v60 = (_WORD *)v54;
        v61 = (_WORD *)v55;
        do
        {
          v63 = *v58++;
          v62 = v63;
          v64 = v25 * (float)((float)(v63 & 0x3FF) - v26);
          v65 = v25 * (float)((float)((v63 >> 10) & 0x3FF) - v26);
          v66 = v25 * (float)((float)((v63 >> 20) & 0x3FF) - v26);
          v67 = (float)((float)((float)(v33 * v65) + (float)(v32 * v66)) + (float)(v34 * v64)) + v27;
          v68 = v29;
          if (v67 <= v29)
          {
            v68 = (float)((float)((float)(v33 * v65) + (float)(v32 * v66)) + (float)(v34 * v64)) + v27;
            if (v67 < v27)
              v68 = v27;
          }
          *v61++ = llroundf(v68) << v56;
          if (v60)
          {
            v69 = (float)((float)(v28 + (float)(v66 * v35)) + (float)(v65 * v36)) + (float)(v64 * v37);
            v70 = v31;
            if (v69 <= v31)
            {
              v70 = (float)((float)(v28 + (float)(v66 * v35)) + (float)(v65 * v36)) + (float)(v64 * v37);
              if (v69 < v30)
                v70 = v30;
            }
            v71 = (float)((float)(v28 + (float)(v66 * v38)) + (float)(v65 * v39)) + (float)(v64 * v40);
            *v60 = llroundf(v70) << v56;
            v72 = v31;
            if (v71 <= v31)
            {
              v72 = v71;
              if (v71 < v30)
                v72 = v30;
            }
            v60[1] = llroundf(v72) << v56;
            v60 += 2;
          }
          if (v59)
            *v59++ = 21845 * (v62 >> 30);
          --v57;
        }
        while (v57);
      }
      result += v20;
      v55 += v21;
      v54 += v22;
      v49 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  float v69;
  float v70;
  float v73;
  float v74;
  float v75;
  float v78;
  float v79;
  float v80;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = v13 + 32932;
    v31 = *(float *)(v13 + 104);
    v32 = *(float *)(v13 + 108);
    v33 = *(float *)(v13 + 112);
    v34 = *(float *)(v13 + 116);
    v35 = *(float *)(v13 + 120);
    v36 = *((_QWORD *)result + 14);
    v37 = (_QWORD *)*((_QWORD *)result + 16);
    v38 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v39 = *(_QWORD *)(result + 36);
    v40 = *(unsigned __int8 *)(v13 + 161);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 160);
    v41 = *v37 + v38 * v18;
    v42 = *(unsigned __int8 *)(v13 + 159);
    v43 = *(unsigned __int8 *)(v13 + 158);
    v44 = v41 + v36;
    v46 = *v14;
    v45 = v14[1];
    v47 = v45 + v17 * v11 + 4 * v39;
    if (!v45)
      v47 = 0;
    v48 = v46 + v16 * v11 + 4 * v39;
    v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v51 = v10;
        v52 = (unsigned int *)v48;
        v53 = v44;
        v54 = (char *)v47;
        do
        {
          v56 = *v52++;
          v55 = v56;
          if (v54)
          {
            v58 = *v54++;
            LOBYTE(v57) = v58;
          }
          else
          {
            v57 = v55 >> 30;
          }
          _D30 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v55), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v49), v19), 0), v50)));
          _D30.i16[0] = *(_WORD *)(v28 + 2 * _D30.u32[0]);
          __asm { FCVT            S30, H30 }
          _H8 = *(_WORD *)(v28 + 2 * _D30.u32[1]);
          __asm { FCVT            S31, H8 }
          _H8 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf(v19 * (float)((float)(v55 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S9, H8 }
          v69 = (float)((float)((float)(v33 * _S31) + (float)(v32 * _S30)) + (float)(v34 * _S9))
              + (float)(v35 * fmaxf(_S30, fmaxf(_S31, _S9)));
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          _H8 = *(_WORD *)(v29 + 2 * llroundf(v70));
          __asm { FCVT            S10, H8 }
          v73 = _S30 * _S10;
          v74 = _S31 * _S10;
          v75 = _S9 * _S10;
          _H9 = *(_WORD *)(v30
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v21 * v74) + (float)(v73 * v20)) + (float)((float)(_S9 * _S10) * v22), 0.0), 8191.0)));
          __asm { FCVT            S10, H9 }
          v78 = 255.0;
          if (_S10 <= 255.0)
          {
            v78 = _S10;
            if (_S10 < 0.0)
              v78 = 0.0;
          }
          v79 = (float)((float)(v24 * v74) + (float)(v73 * v23)) + (float)(v75 * v25);
          v80 = (float)((float)(v27 * v74) + (float)(v73 * v26)) + (float)(v75 * v31);
          _H31 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          *(_BYTE *)(v53 + v43) = llroundf(v78);
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v53 + v42) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          result[v53] = llroundf(_S31);
          *(_BYTE *)(v53 + v40) = 85 * v57;
          v53 += 4;
          --v51;
        }
        while (v51);
      }
      v48 += v16;
      v47 += v17;
      v44 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  float32x2_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  float v65;
  float v66;
  float v67;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = *(float *)(v13 + 104);
    v29 = v13 + 164;
    v30 = v13 + 16548;
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v13 + 161);
    v35 = *(unsigned __int8 *)(v13 + 160);
    v36 = **((_QWORD **)result + 16) + v32 * v18;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 159);
    v37 = *(unsigned __int8 *)(v13 + 158);
    v38 = v36 + v31;
    v40 = *v14;
    v39 = v14[1];
    v41 = v39 + v17 * v11 + 4 * v33;
    if (!v39)
      v41 = 0;
    v42 = v40 + v16 * v11 + 4 * v33;
    v43 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v44 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v45 = v10;
        v46 = (unsigned int *)v42;
        v47 = v38;
        v48 = (char *)v41;
        do
        {
          v50 = *v46++;
          v49 = v50;
          if (v48)
          {
            v52 = *v48++;
            LOBYTE(v51) = v52;
          }
          else
          {
            v51 = v49 >> 30;
          }
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v49), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v43), v19), 0), v44)));
          _D26.i16[0] = *(_WORD *)(v29 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v29 + 2 * _D26.u32[1]);
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf(v19 * (float)((float)(v49 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * _S27) + (float)(_S26 * v20)) + (float)(_S28 * v22), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          v65 = 255.0;
          if (_S30 <= 255.0)
          {
            v65 = _S30;
            if (_S30 < 0.0)
              v65 = 0.0;
          }
          v66 = (float)((float)(v24 * _S27) + (float)(_S26 * v23)) + (float)(_S28 * v25);
          v67 = (float)((float)(v27 * _S27) + (float)(_S26 * v26)) + (float)(_S28 * v28);
          _H27 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          *(_BYTE *)(v47 + v37) = llroundf(v65);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          result[v47] = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          *(_BYTE *)(v47 + v35) = llroundf(_S27);
          *(_BYTE *)(v47 + v34) = 85 * v51;
          v47 += 4;
          --v45;
        }
        while (v45);
      }
      v42 += v16;
      v41 += v17;
      v38 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned __int8 *v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v12;
    v14 = v12[1];
    v15 = **((_QWORD **)result + 17);
    *(float *)&v16 = (float)*(unsigned int *)(v10 + 136);
    v17 = *(float *)&v16 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v16) = *(_WORD *)(v10 + 140);
    v18 = (float)v16;
    v19 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v20 = *(_QWORD *)(result + 36);
    v21 = *(unsigned __int8 *)(v10 + 161);
    v22 = *(unsigned __int8 *)(v10 + 160);
    v23 = *(unsigned __int8 *)(v10 + 159);
    v24 = *(unsigned __int8 *)(v10 + 158);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16) + v19 * v15 + *((_QWORD *)result + 14));
    v27 = v11;
    v26 = *v11;
    v25 = v27[1];
    v28 = v25 == 0;
    v29 = v25 + v14 * v8 + 4 * v20;
    if (v28)
      v29 = 0;
    v30 = v26 + v13 * v8 + 4 * v20;
    do
    {
      if (v7)
      {
        v31 = v7;
        v32 = (unsigned int *)v30;
        v33 = result;
        v34 = (char *)v29;
        do
        {
          v36 = *v32++;
          v35 = v36;
          if (v34)
          {
            v38 = *v34++;
            LOBYTE(v37) = v38;
          }
          else
          {
            v37 = v35 >> 30;
          }
          v39 = v17 * (float)((float)((v35 >> 20) & 0x3FF) - v18);
          v40 = 255.0;
          if (v39 <= 255.0)
          {
            v40 = v17 * (float)((float)((v35 >> 20) & 0x3FF) - v18);
            if (v39 < 0.0)
              v40 = 0.0;
          }
          v41 = v17 * (float)((float)((v35 >> 10) & 0x3FF) - v18);
          v33[v24] = llroundf(v40);
          v42 = 255.0;
          if (v41 <= 255.0)
          {
            v42 = v17 * (float)((float)((v35 >> 10) & 0x3FF) - v18);
            if (v41 < 0.0)
              v42 = 0.0;
          }
          v43 = v17 * (float)((float)(v35 & 0x3FF) - v18);
          v33[v23] = llroundf(v42);
          v44 = 255.0;
          if (v43 <= 255.0)
          {
            v44 = v17 * (float)((float)(v35 & 0x3FF) - v18);
            if (v43 < 0.0)
              v44 = 0.0;
          }
          v33[v22] = llroundf(v44);
          v33[v21] = 85 * v37;
          v33 += 4;
          --v31;
        }
        while (v31);
      }
      v30 += v13;
      v29 += v14;
      result += v15;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  float32x2_t v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned int *v56;
  unsigned __int8 *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  float v72;
  float v73;
  double v74;
  float v75;
  float v78;
  float v79;
  float v80;
  float v82;
  float v85;
  BOOL v86;
  float v87;
  float v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  float v95;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v17;
    v19 = v17[1];
    v20 = *v15;
    v21 = v15[1];
    v22 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 144);
    v23 = (float)LODWORD(a6);
    v24 = *(float *)(v14 + 72);
    v25 = *(float *)(v14 + 76);
    v26 = *(float *)(v14 + 80);
    v27 = *(float *)(v14 + 84);
    v28 = *(float *)(v14 + 88);
    v29 = *(float *)(v14 + 92);
    v30 = *(float *)(v14 + 96);
    v31 = *(float *)(v14 + 100);
    v32 = v14 + 164;
    v33 = v14 + 16548;
    v34 = v14 + 32932;
    v35 = *(float *)(v14 + 104);
    v36 = *(float *)(v14 + 108);
    v37 = *(float *)(v14 + 112);
    v38 = *(float *)(v14 + 116);
    v39 = *(float *)(v14 + 120);
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v42 = *(_QWORD *)(result + 36);
    v44 = **((_QWORD **)result + 16);
    v43 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v43 == 0;
    result = (unsigned __int8 *)(v43 + v41 * v21 + 4 * v40);
    if (_ZF)
      result = 0;
    v46 = v44 + v41 * v20 + 4 * v40;
    v49 = v16;
    v48 = *v16;
    v47 = v49[1];
    if (v47)
      v50 = v47 + v19 * v12 + 4 * v42;
    else
      v50 = 0;
    v51 = v48 + v18 * v12 + 4 * v42;
    v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v53 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    while (!v11)
    {
LABEL_39:
      v51 += v18;
      v50 += v19;
      v46 += v20;
      result += v21;
      if (++v10 == v13)
        return result;
    }
    v54 = v11;
    v55 = result;
    v56 = (unsigned int *)v46;
    v57 = (unsigned __int8 *)v50;
    v58 = (unsigned int *)v51;
    while (1)
    {
      v60 = *v58++;
      v59 = v60;
      if (v57)
      {
        v62 = *v57++;
        v61 = v62;
      }
      else
      {
        v61 = v59 >> 30;
      }
      _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v59), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v52), v22), 0), v53)));
      _D11.i16[0] = *(_WORD *)(v32 + 2 * _D11.u32[0]);
      __asm { FCVT            S11, H11 }
      _H12 = *(_WORD *)(v32 + 2 * _D11.u32[1]);
      __asm { FCVT            S12, H12 }
      _H31 = *(_WORD *)(v32
                      + 2 * llroundf(fminf(fmaxf(v22 * (float)((float)(v59 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
      __asm { FCVT            S13, H31 }
      v72 = (float)((float)((float)(v37 * _S12) + (float)(v36 * _S11)) + (float)(v38 * _S13))
          + (float)(v39 * fmaxf(_S11, fmaxf(_S12, _S13)));
      v73 = 8191.0;
      if (v72 <= 8191.0)
      {
        v73 = v72;
        if (v72 < 0.0)
          v73 = 0.0;
      }
      if (v55 && v57)
        goto LABEL_23;
      if (v57)
      {
        v74 = (double)v61 * 3.0 / 255.0;
      }
      else
      {
        if (!v55)
          goto LABEL_23;
        v74 = (double)v61 * 255.0 / 3.0;
      }
      v75 = v74;
      v61 = llroundf(v75);
LABEL_23:
      _H31 = *(_WORD *)(v33 + 2 * llroundf(v73));
      __asm { FCVT            S31, H31 }
      v78 = _S11 * _S31;
      v79 = _S12 * _S31;
      v80 = _S13 * _S31;
      LOWORD(_S31) = *(_WORD *)(v34
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v31 * v79) + (float)((float)(_S11 * _S31) * v30))+ (float)((float)(_S13 * _S31) * v35), 0.0), 8191.0)));
      __asm { FCVT            S31, H31 }
      v82 = 1023.0;
      if ((float)(v23 + _S31) <= 1023.0)
      {
        v82 = v23 + _S31;
        if ((float)(v23 + _S31) < 0.0)
          v82 = 0.0;
      }
      _H31 = *(_WORD *)(v34
                      + 2
                      * llroundf(fminf(fmaxf((float)((float)(v28 * v79) + (float)(v78 * v27)) + (float)(v80 * v29), 0.0), 8191.0)));
      __asm { FCVT            S31, H31 }
      v85 = v23 + _S31;
      v86 = (float)(v23 + _S31) <= 1023.0;
      v87 = 1023.0;
      if (v86)
      {
        v87 = v85;
        if (v85 < 0.0)
          v87 = 0.0;
      }
      _H12 = *(_WORD *)(v34
                      + 2
                      * llroundf(fminf(fmaxf((float)((float)(v25 * v79) + (float)(v78 * v24)) + (float)(v80 * v26), 0.0), 8191.0)));
      __asm { FCVT            S12, H12 }
      v90 = v23 + _S12;
      v86 = (float)(v23 + _S12) <= 1023.0;
      v91 = 1023.0;
      if (v86)
      {
        v91 = v90;
        if (v90 < 0.0)
          v91 = 0.0;
      }
      v92 = llroundf(v82);
      v93 = llroundf(v87);
      v94 = llroundf(v91);
      v95 = (float)v61;
      if ((float)v61 > 3.0)
        v95 = 3.0;
      *v56++ = (v93 << 10) | v92 | (llroundf(v95) << 30) | (v94 << 20);
      if (v55)
        *v55++ = v61;
      if (!--v54)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

_QWORD *vt_Copy_l10r_TRC_Mat_TRC_l10r_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  float32x2_t v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned int *v52;
  unsigned __int8 *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  float v60;
  float v72;
  BOOL v73;
  float v74;
  float v77;
  float v78;
  float v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  float v86;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = v8 + *(_QWORD *)((char *)result + 44);
    v13 = v9 - v8;
    v14 = result[19];
    v15 = (uint64_t *)result[17];
    v16 = (_QWORD *)result[7];
    v17 = (uint64_t *)result[8];
    v18 = *v17;
    v19 = v17[1];
    v20 = *v15;
    v21 = v15[1];
    v22 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 144);
    v23 = (float)LODWORD(a6);
    v24 = *(float *)(v14 + 72);
    v25 = *(float *)(v14 + 76);
    v26 = *(float *)(v14 + 80);
    v27 = *(float *)(v14 + 84);
    v28 = *(float *)(v14 + 88);
    v29 = *(float *)(v14 + 92);
    v30 = *(float *)(v14 + 96);
    v31 = *(float *)(v14 + 100);
    v32 = *(float *)(v14 + 104);
    v33 = v14 + 164;
    v34 = v14 + 16548;
    v35 = result[14];
    v36 = result[13] * a2 / v7;
    v37 = (_QWORD *)result[16];
    v38 = v36 + result[15];
    v39 = *(_QWORD *)((char *)result + 36);
    v40 = v37[1];
    _ZF = v40 == 0;
    v42 = v40 + v38 * v21 + 4 * v35;
    if (_ZF)
      v42 = 0;
    result = (_QWORD *)(*v37 + v38 * v20 + 4 * v35);
    v45 = v16;
    v44 = *v16;
    v43 = v45[1];
    if (v43)
      v46 = v43 + v19 * v12 + 4 * v39;
    else
      v46 = 0;
    v47 = v44 + v18 * v12 + 4 * v39;
    v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v49 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    while (!v11)
    {
LABEL_37:
      v47 += v18;
      v46 += v19;
      result = (_QWORD *)((char *)result + v20);
      v42 += v21;
      if (++v10 == v13)
        return result;
    }
    v50 = v11;
    v51 = (_BYTE *)v42;
    v52 = (unsigned int *)result;
    v53 = (unsigned __int8 *)v46;
    v54 = (unsigned int *)v47;
    while (1)
    {
      v56 = *v54++;
      v55 = v56;
      if (v53)
      {
        v58 = *v53++;
        v57 = v58;
        if (!v51)
          goto LABEL_15;
      }
      else
      {
        v57 = v55 >> 30;
        if (!v51)
          goto LABEL_15;
      }
      if (v53)
        goto LABEL_20;
LABEL_15:
      if (v53)
      {
        v59 = (double)v57 * 3.0 / 255.0;
      }
      else
      {
        if (!v51)
          goto LABEL_20;
        v59 = (double)v57 * 255.0 / 3.0;
      }
      v60 = v59;
      v57 = llroundf(v60);
LABEL_20:
      _D8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v55), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v48), v22), 0), v49)));
      _D8.i16[0] = *(_WORD *)(v33 + 2 * _D8.u32[0]);
      __asm { FCVT            S8, H8 }
      _H9 = *(_WORD *)(v33 + 2 * _D8.u32[1]);
      __asm { FCVT            S9, H9 }
      _H31 = *(_WORD *)(v33
                      + 2 * llroundf(fminf(fmaxf(v22 * (float)((float)(v55 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
      __asm { FCVT            S10, H31 }
      _H31 = *(_WORD *)(v34
                      + 2
                      * llroundf(fminf(fmaxf((float)((float)(v31 * _S9) + (float)(_S8 * v30)) + (float)(_S10 * v32), 0.0), 8191.0)));
      __asm { FCVT            S31, H31 }
      v72 = v23 + _S31;
      v73 = (float)(v23 + _S31) <= 1023.0;
      v74 = 1023.0;
      if (v73)
      {
        v74 = v72;
        if (v72 < 0.0)
          v74 = 0.0;
      }
      _H11 = *(_WORD *)(v34
                      + 2
                      * llroundf(fminf(fmaxf((float)((float)(v28 * _S9) + (float)(_S8 * v27)) + (float)(_S10 * v29), 0.0), 8191.0)));
      __asm { FCVT            S11, H11 }
      v77 = v23 + _S11;
      v73 = (float)(v23 + _S11) <= 1023.0;
      v78 = 1023.0;
      if (v73)
      {
        v78 = v77;
        if (v77 < 0.0)
          v78 = 0.0;
      }
      _H8 = *(_WORD *)(v34
                     + 2
                     * llroundf(fminf(fmaxf((float)((float)(v25 * _S9) + (float)(_S8 * v24)) + (float)(_S10 * v26), 0.0), 8191.0)));
      __asm { FCVT            S8, H8 }
      v81 = v23 + _S8;
      v73 = (float)(v23 + _S8) <= 1023.0;
      v82 = 1023.0;
      if (v73)
      {
        v82 = v81;
        if (v81 < 0.0)
          v82 = 0.0;
      }
      v83 = llroundf(v74);
      v84 = llroundf(v78);
      v85 = llroundf(v82);
      v86 = (float)v57;
      if ((float)v57 > 3.0)
        v86 = 3.0;
      *v52++ = (v84 << 10) | v83 | (llroundf(v86) << 30) | (v85 << 20);
      if (v51)
        *v51++ = v57;
      if (!--v50)
        goto LABEL_37;
    }
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_l10r_GCD);
  return 0;
}

_QWORD *vt_Copy_l10r_rgb_l10r_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  unsigned __int8 *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  float v58;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = v7 + *(_QWORD *)((char *)result + 44);
    v12 = v8 - v7;
    v13 = result[19];
    v14 = (uint64_t *)result[17];
    v16 = (uint64_t *)result[7];
    v15 = (uint64_t *)result[8];
    v17 = *v15;
    v18 = v15[1];
    v19 = *v14;
    v20 = v14[1];
    *(float *)&v21 = (float)*(unsigned int *)(v13 + 136);
    v22 = *(float *)&v21 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(v21) = *(_WORD *)(v13 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v13 + 144);
    v24 = (float)LODWORD(a5);
    v25 = result[14];
    v26 = (_QWORD *)result[16];
    v27 = result[13] * a2 / v6 + result[15];
    v28 = *(_QWORD *)((char *)result + 36);
    v31 = v26;
    v30 = *v26;
    v29 = v31[1];
    v32 = v29 == 0;
    v33 = v29 + v27 * v20 + 4 * v25;
    if (v32)
      v33 = 0;
    v34 = v30 + v27 * v19 + 4 * v25;
    v36 = *v16;
    v35 = v16[1];
    v37 = v35 + v18 * v11 + 4 * v28;
    if (!v35)
      v37 = 0;
    result = (_QWORD *)(v36 + v17 * v11 + 4 * v28);
    while (!v10)
    {
LABEL_29:
      result = (_QWORD *)((char *)result + v17);
      v37 += v18;
      v34 += v19;
      v33 += v20;
      if (++v9 == v12)
        return result;
    }
    v38 = v10;
    v39 = (_BYTE *)v33;
    v40 = (unsigned int *)v34;
    v41 = (unsigned __int8 *)v37;
    v42 = (unsigned int *)result;
    while (1)
    {
      v44 = *v42++;
      v43 = v44;
      if (v41)
      {
        v46 = *v41++;
        v45 = v46;
        if (v39)
          goto LABEL_15;
        v47 = (double)v45 * 3.0 / 255.0;
      }
      else
      {
        v45 = v43 >> 30;
        v41 = 0;
        if (!v39)
          goto LABEL_15;
        v47 = (double)v45 * 255.0 / 3.0;
      }
      v48 = v47;
      v45 = llroundf(v48);
LABEL_15:
      v49 = (float)(v22 * (float)((float)(v43 & 0x3FF) - v23)) + v24;
      v50 = 1023.0;
      if (v49 <= 1023.0)
      {
        v50 = (float)(v22 * (float)((float)(v43 & 0x3FF) - v23)) + v24;
        if (v49 < 0.0)
          v50 = 0.0;
      }
      v51 = (float)(v22 * (float)((float)((v43 >> 10) & 0x3FF) - v23)) + v24;
      v52 = 1023.0;
      if (v51 <= 1023.0)
      {
        v52 = (float)(v22 * (float)((float)((v43 >> 10) & 0x3FF) - v23)) + v24;
        if (v51 < 0.0)
          v52 = 0.0;
      }
      v53 = (float)(v22 * (float)((float)((v43 >> 20) & 0x3FF) - v23)) + v24;
      v54 = 1023.0;
      if (v53 <= 1023.0)
      {
        v54 = (float)(v22 * (float)((float)((v43 >> 20) & 0x3FF) - v23)) + v24;
        if (v53 < 0.0)
          v54 = 0.0;
      }
      v55 = llroundf(v50);
      v56 = llroundf(v52);
      v57 = llroundf(v54);
      v58 = (float)v45;
      if ((float)v45 > 3.0)
        v58 = 3.0;
      *v40++ = (v56 << 10) | v55 | (llroundf(v58) << 30) | (v57 << 20);
      if (v39)
        *v39++ = v45;
      if (!--v38)
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  float v60;
  float v61;
  float v64;
  float v65;
  float v66;
  float v69;
  float v71;
  float v72;
  float v76;
  float v79;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = v13 + 32932;
    v31 = *(float *)(v13 + 104);
    v32 = *(float *)(v13 + 108);
    v33 = *(float *)(v13 + 112);
    v34 = *(float *)(v13 + 116);
    v35 = *(float *)(v13 + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v18
        + 2 * *((_QWORD *)result + 14);
    v38 = v14[1];
    if (v38)
      result = (unsigned __int8 *)(v38 + v17 * v11 + 4 * v36);
    else
      result = 0;
    v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v40 = *v14 + v16 * v11 + 4 * v36;
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)v40;
        v44 = (_WORD *)v37;
        v45 = result;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            LOWORD(v48) = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D31 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v39), v19), 0), v41)));
          _D31.i16[0] = *(_WORD *)(v28 + 2 * _D31.u32[0]);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v28 + 2 * _D31.u32[1]);
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S10, H9 }
          v60 = (float)((float)((float)(v33 * _S8) + (float)(v32 * _S31)) + (float)(v34 * _S10))
              + (float)(v35 * fmaxf(_S31, fmaxf(_S8, _S10)));
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          _H9 = *(_WORD *)(v29 + 2 * llroundf(v61));
          __asm { FCVT            S11, H9 }
          v64 = _S31 * _S11;
          v65 = _S8 * _S11;
          v66 = _S10 * _S11;
          _H12 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v65) + (float)(v64 * v20)) + (float)((float)(_S10 * _S11) * v22), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          v69 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S10, H12 }
            _NF = _S10 < 0.0;
            v69 = _S11;
            if (_NF)
              v69 = 0.0;
          }
          v71 = (float)((float)(v24 * v65) + (float)(v64 * v23)) + (float)(v66 * v25);
          v72 = (float)((float)(v27 * v65) + (float)(v64 * v26)) + (float)(v66 * v31);
          _H8 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S11, H8 }
          *v44 = llroundf(v69);
          v76 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v76 = _S11;
            if (_S8 < 0.0)
              v76 = 0.0;
          }
          __asm { FCVT            S10, H31 }
          v44[1] = llroundf(v76);
          v79 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v79 = _S10;
            if (_S31 < 0.0)
              v79 = 0.0;
          }
          v44[2] = llroundf(v79);
          v44[3] = 21845 * v48;
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      v40 += v16;
      result += v17;
      v37 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  float v62;
  float v64;
  float v65;
  float v69;
  float v72;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = *(float *)(v13 + 104);
    v29 = v13 + 164;
    v30 = v13 + 16548;
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v6;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = v32 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v18 + 2 * v31;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + 4 * v35;
    if (!v37)
      v39 = 0;
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    result = (unsigned __int8 *)(v38 + v16 * v11 + 4 * v35);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)result;
        v44 = (_WORD *)v36;
        v45 = (unsigned __int8 *)v39;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            LOWORD(v48) = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D27 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D27.i16[0] = *(_WORD *)(v29 + 2 * _D27.u32[0]);
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v29 + 2 * _D27.u32[1]);
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H8 = *(_WORD *)(v30
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v21 * _S28) + (float)(_S27 * v20)) + (float)(_S29 * v22), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v62 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S30, H8 }
            _NF = _S30 < 0.0;
            v62 = _S31;
            if (_NF)
              v62 = 0.0;
          }
          v64 = (float)((float)(v24 * _S28) + (float)(_S27 * v23)) + (float)(_S29 * v25);
          v65 = (float)((float)(v27 * _S28) + (float)(_S27 * v26)) + (float)(_S29 * v28);
          _H28 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *v44 = llroundf(v62);
          v69 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v69 = _S31;
            if (_S28 < 0.0)
              v69 = 0.0;
          }
          __asm { FCVT            S30, H27 }
          v44[1] = llroundf(v69);
          v72 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S27, H27 }
            v72 = _S30;
            if (_S27 < 0.0)
              v72 = 0.0;
          }
          v44[2] = llroundf(v72);
          v44[3] = 21845 * v48;
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  _WORD *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = **((_QWORD **)result + 17);
    *(float *)&v16 = (float)*(unsigned int *)(v10 + 136);
    v17 = *(float *)&v16 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v16) = *(_WORD *)(v10 + 140);
    v18 = (float)v16;
    v19 = *((_QWORD *)result + 14);
    v20 = (_QWORD *)*((_QWORD *)result + 16);
    v21 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v22 = *(_QWORD *)(result + 36);
    v23 = *v20 + v21 * v15 + 2 * v19;
    v26 = v12;
    v25 = *v12;
    v24 = v26[1];
    if (v24)
      v27 = v24 + v14 * v8 + 4 * v22;
    else
      v27 = 0;
    v28 = v25 + v13 * v8 + 4 * v22;
    result = (unsigned __int8 *)&unk_1928DF000;
    do
    {
      if (v7)
      {
        result = v7;
        v29 = (unsigned int *)v28;
        v30 = (_WORD *)v23;
        v31 = (unsigned __int8 *)v27;
        do
        {
          v33 = *v29++;
          v32 = v33;
          if (v31)
          {
            v35 = *v31++;
            LOWORD(v34) = v35;
          }
          else
          {
            v34 = v32 >> 30;
          }
          v36 = v17 * (float)((float)((v32 >> 20) & 0x3FF) - v18);
          v37 = 65535.0;
          if (v36 <= 65535.0)
          {
            v37 = v17 * (float)((float)((v32 >> 20) & 0x3FF) - v18);
            if (v36 < 0.0)
              v37 = 0.0;
          }
          v38 = v17 * (float)((float)((v32 >> 10) & 0x3FF) - v18);
          *v30 = llroundf(v37);
          v39 = 65535.0;
          if (v38 <= 65535.0)
          {
            v39 = v17 * (float)((float)((v32 >> 10) & 0x3FF) - v18);
            if (v38 < 0.0)
              v39 = 0.0;
          }
          v40 = v17 * (float)((float)(v32 & 0x3FF) - v18);
          v30[1] = llroundf(v39);
          v41 = 65535.0;
          if (v40 <= 65535.0)
          {
            v41 = v17 * (float)((float)(v32 & 0x3FF) - v18);
            if (v40 < 0.0)
              v41 = 0.0;
          }
          v30[2] = llroundf(v41);
          v30[3] = 21845 * v34;
          v30 += 4;
          --result;
        }
        while (result);
      }
      v28 += v13;
      v27 += v14;
      v23 += v15;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v60;
  float v61;
  float v64;
  float v65;
  float v66;
  float v69;
  float v73;
  float v77;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = v13 + 32932;
    v31 = *(float *)(v13 + 104);
    v32 = *(float *)(v13 + 108);
    v33 = *(float *)(v13 + 112);
    v34 = *(float *)(v13 + 116);
    v35 = *(float *)(v13 + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v18
        + 2 * *((_QWORD *)result + 14);
    v38 = v14[1];
    if (v38)
      result = (unsigned __int8 *)(v38 + v17 * v11 + 4 * v36);
    else
      result = 0;
    v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v40 = *v14 + v16 * v11 + 4 * v36;
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)v40;
        v44 = (_WORD *)v37;
        v45 = result;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D31 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v39), v19), 0), v41)));
          _D31.i16[0] = *(_WORD *)(v28 + 2 * _D31.u32[0]);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v28 + 2 * _D31.u32[1]);
          __asm { FCVT            S9, H9 }
          _H8 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S11, H8 }
          v60 = (float)((float)((float)(v33 * _S9) + (float)(v32 * _S31)) + (float)(v34 * _S11))
              + (float)(v35 * fmaxf(_S31, fmaxf(_S9, _S11)));
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          _H8 = *(_WORD *)(v29 + 2 * llroundf(v61));
          __asm { FCVT            S12, H8 }
          v64 = _S31 * _S12;
          v65 = _S9 * _S12;
          v66 = _S11 * _S12;
          _H12 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v65) + (float)((float)(_S31 * _S12) * v20))+ (float)((float)(_S11 * _S12) * v22), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          v69 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S31, H12 }
            _NF = _S31 < 0.0;
            v69 = _S11;
            if (_NF)
              v69 = 0.0;
          }
          _H13 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v24 * v65) + (float)(v64 * v23)) + (float)(v66 * v25), 0.0), 8191.0)));
          __asm { FCVT            S12, H13 }
          v73 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S11, H13 }
            _NF = _S11 < 0.0;
            v73 = _S12;
            if (_NF)
              v73 = 0.0;
          }
          _H10 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v27 * v65) + (float)(v64 * v26)) + (float)(v66 * v31), 0.0), 8191.0)));
          __asm { FCVT            S9, H10 }
          v77 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S8, H10 }
            _NF = _S8 < 0.0;
            v77 = _S9;
            if (_NF)
              v77 = 0.0;
          }
          *v44 = bswap32(21845 * v48) >> 16;
          v44[1] = __rev16(llroundf(v69));
          v44[2] = __rev16(llroundf(v73));
          v44[3] = __rev16(llroundf(v77));
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      v40 += v16;
      result += v17;
      v37 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v62;
  float v66;
  float v70;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = *(float *)(v13 + 104);
    v29 = v13 + 164;
    v30 = v13 + 16548;
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v6;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = v32 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v18 + 2 * v31;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + 4 * v35;
    if (!v37)
      v39 = 0;
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    result = (unsigned __int8 *)(v38 + v16 * v11 + 4 * v35);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)result;
        v44 = (_WORD *)v36;
        v45 = (unsigned __int8 *)v39;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D28 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D28.i16[0] = *(_WORD *)(v29 + 2 * _D28.u32[0]);
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v29 + 2 * _D28.u32[1]);
          __asm { FCVT            S29, H29 }
          _H27 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          _H8 = *(_WORD *)(v30
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v21 * _S29) + (float)(_S28 * v20)) + (float)(_S30 * v22), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v62 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S27, H8 }
            _NF = _S27 < 0.0;
            v62 = _S31;
            if (_NF)
              v62 = 0.0;
          }
          _H9 = *(_WORD *)(v30
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v24 * _S29) + (float)(_S28 * v23)) + (float)(_S30 * v25), 0.0), 8191.0)));
          __asm { FCVT            S8, H9 }
          v66 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S31, H9 }
            _NF = _S31 < 0.0;
            v66 = _S8;
            if (_NF)
              v66 = 0.0;
          }
          _H30 = *(_WORD *)(v30
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v27 * _S29) + (float)(_S28 * v26)) + (float)(_S30 * v28), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v70 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v70 = _S29;
            if (_NF)
              v70 = 0.0;
          }
          *v44 = bswap32(21845 * v48) >> 16;
          v44[1] = __rev16(llroundf(v62));
          v44[2] = __rev16(llroundf(v66));
          v44[3] = __rev16(llroundf(v70));
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  _WORD *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = **((_QWORD **)result + 17);
    *(float *)&v16 = (float)*(unsigned int *)(v10 + 136);
    v17 = *(float *)&v16 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v16) = *(_WORD *)(v10 + 140);
    v18 = (float)v16;
    v19 = *((_QWORD *)result + 14);
    v20 = (_QWORD *)*((_QWORD *)result + 16);
    v21 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v22 = *(_QWORD *)(result + 36);
    v23 = *v20 + v21 * v15 + 2 * v19;
    v26 = v12;
    v25 = *v12;
    v24 = v26[1];
    if (v24)
      v27 = v24 + v14 * v8 + 4 * v22;
    else
      v27 = 0;
    v28 = v25 + v13 * v8 + 4 * v22;
    result = (unsigned __int8 *)&unk_1928DF000;
    do
    {
      if (v7)
      {
        result = v7;
        v29 = (unsigned int *)v28;
        v30 = (_WORD *)v23;
        v31 = (unsigned __int8 *)v27;
        do
        {
          v33 = *v29++;
          v32 = v33;
          if (v31)
          {
            v35 = *v31++;
            v34 = v35;
          }
          else
          {
            v34 = v32 >> 30;
          }
          v36 = v17 * (float)((float)((v32 >> 20) & 0x3FF) - v18);
          v37 = 65535.0;
          if (v36 <= 65535.0)
          {
            v37 = v17 * (float)((float)((v32 >> 20) & 0x3FF) - v18);
            if (v36 < 0.0)
              v37 = 0.0;
          }
          v38 = v17 * (float)((float)((v32 >> 10) & 0x3FF) - v18);
          v39 = 65535.0;
          if (v38 <= 65535.0)
          {
            v39 = v17 * (float)((float)((v32 >> 10) & 0x3FF) - v18);
            if (v38 < 0.0)
              v39 = 0.0;
          }
          v40 = v17 * (float)((float)(v32 & 0x3FF) - v18);
          v41 = 65535.0;
          if (v40 <= 65535.0)
          {
            v41 = v17 * (float)((float)(v32 & 0x3FF) - v18);
            if (v40 < 0.0)
              v41 = 0.0;
          }
          *v30 = bswap32(21845 * v34) >> 16;
          v30[1] = __rev16(llroundf(v37));
          v30[2] = __rev16(llroundf(v39));
          v30[3] = __rev16(llroundf(v41));
          v30 += 4;
          --result;
        }
        while (result);
      }
      v28 += v13;
      v27 += v14;
      v23 += v15;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v60;
  float v61;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = v13 + 32932;
    v31 = *(float *)(v13 + 104);
    v32 = *(float *)(v13 + 108);
    v33 = *(float *)(v13 + 112);
    v34 = *(float *)(v13 + 116);
    v35 = *(float *)(v13 + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v18
        + 2 * *((_QWORD *)result + 14);
    v38 = v14[1];
    if (v38)
      result = (unsigned __int8 *)(v38 + v17 * v11 + 4 * v36);
    else
      result = 0;
    v39 = *v14 + v16 * v11 + 4 * v36;
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)v39;
        v44 = (_WORD *)v37;
        v45 = result;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D31 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D31.i16[0] = *(_WORD *)(v28 + 2 * _D31.u32[0]);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v28 + 2 * _D31.u32[1]);
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v60 = (float)((float)((float)(v33 * _S8) + (float)(v32 * _S31)) + (float)(v34 * _S9))
              + (float)(v35 * fmaxf(_S31, fmaxf(_S8, _S9)));
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          _H10 = *(_WORD *)(v29 + 2 * llroundf(v61));
          __asm { FCVT            S10, H10 }
          v64 = _S31 * _S10;
          v65 = _S8 * _S10;
          v66 = _S9 * _S10;
          v67 = (float)((float)(v21 * v65) + (float)(v64 * v20)) + (float)(v66 * v22);
          v68 = (float)((float)(v24 * v65) + (float)(v64 * v23)) + (float)(v66 * v25);
          _S31 = (float)((float)(v27 * v65) + (float)(v64 * v26)) + (float)(v66 * v31);
          LOWORD(v65) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          LOWORD(v66) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          _S10 = (float)v48 * 0.33333;
          *v44 = LOWORD(v65);
          v44[1] = LOWORD(v66);
          v44[2] = LOWORD(_S31);
          __asm { FCVT            H31, S10 }
          v44[3] = LOWORD(_S31);
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      v39 += v16;
      result += v17;
      v37 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v59;
  float v60;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = *(float *)(v13 + 104);
    v29 = v13 + 164;
    v30 = v13 + 16548;
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v6;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = v32 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v18 + 2 * v31;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + 4 * v35;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v16 * v11 + 4 * v35);
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)result;
        v44 = (_WORD *)v36;
        v45 = (unsigned __int8 *)v39;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D28 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D28.i16[0] = *(_WORD *)(v29 + 2 * _D28.u32[0]);
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v29 + 2 * _D28.u32[1]);
          __asm { FCVT            S29, H29 }
          _H27 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v59 = (float)((float)(v21 * _S29) + (float)(*(float *)_D28.i32 * v20)) + (float)(_S27 * v22);
          v60 = (float)((float)(v24 * _S29) + (float)(*(float *)_D28.i32 * v23)) + (float)(_S27 * v25);
          _S27 = (float)((float)(v27 * _S29) + (float)(*(float *)_D28.i32 * v26)) + (float)(_S27 * v28);
          _D28.i16[0] = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          _S30 = (float)v48 * 0.33333;
          *v44 = _D28.i16[0];
          v44[1] = LOWORD(_S29);
          v44[2] = LOWORD(_S27);
          __asm { FCVT            H27, S30 }
          v44[3] = LOWORD(_S27);
          v44 += 4;
          --v42;
        }
        while (v42);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_RGhA_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_rgb_RGhA_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v11 = *(uint64_t **)(result + 64);
    v13 = *v11;
    v14 = v11[1];
    v15 = **(_QWORD **)(result + 136);
    v16 = 1.0;
    v17 = 1.0 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v16) = *(_WORD *)(v10 + 140);
    v18 = (float)v16;
    v19 = *(_QWORD *)(result + 112);
    v20 = *(_QWORD **)(result + 128);
    v21 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    result = *(_QWORD *)(result + 36);
    v22 = *v20 + v21 * v15 + 2 * v19;
    v25 = v12;
    v24 = *v12;
    v23 = v25[1];
    if (v23)
      v26 = v23 + v14 * v8 + 4 * result;
    else
      v26 = 0;
    v27 = v24 + v13 * v8 + 4 * result;
    do
    {
      if (v7)
      {
        v28 = v7;
        result = v27;
        v29 = (_WORD *)v22;
        v30 = (unsigned __int8 *)v26;
        do
        {
          v32 = *(_DWORD *)result;
          result += 4;
          v31 = v32;
          if (v30)
          {
            v34 = *v30++;
            v33 = v34;
          }
          else
          {
            v33 = v31 >> 30;
          }
          _S3 = v17 * (float)((float)(v31 & 0x3FF) - v18);
          _S4 = v17 * (float)((float)((v31 >> 10) & 0x3FF) - v18);
          _S5 = v17 * (float)((float)((v31 >> 20) & 0x3FF) - v18);
          _S6 = (float)v33 * 0.33333;
          __asm { FCVT            H5, S5 }
          *v29 = LOWORD(_S5);
          __asm { FCVT            H4, S4 }
          v29[1] = LOWORD(_S4);
          __asm { FCVT            H3, S3 }
          v29[2] = LOWORD(_S3);
          __asm { FCVT            H3, S6 }
          v29[3] = LOWORD(_S3);
          v29 += 4;
          --v28;
        }
        while (v28);
      }
      v27 += v13;
      v26 += v14;
      v22 += v15;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v60;
  float v61;
  float v64;
  float v67;
  float v68;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = v13 + 32932;
    v31 = *(float *)(v13 + 104);
    v32 = *(float *)(v13 + 108);
    v33 = *(float *)(v13 + 112);
    v34 = *(float *)(v13 + 116);
    v35 = *(float *)(v13 + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v18
        + 4 * *((_QWORD *)result + 14);
    v38 = v14[1];
    if (v38)
      result = (unsigned __int8 *)(v38 + v17 * v11 + 4 * v36);
    else
      result = 0;
    v39 = *v14 + v16 * v11 + 4 * v36;
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)v39;
        v44 = v37;
        v45 = result;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D31 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D31.i16[0] = *(_WORD *)(v28 + 2 * _D31.u32[0]);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v28 + 2 * _D31.u32[1]);
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v60 = (float)((float)((float)(v33 * _S8) + (float)(v32 * _S31)) + (float)(v34 * _S9))
              + (float)(v35 * fmaxf(_S31, fmaxf(_S8, _S9)));
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = v60;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          _H10 = *(_WORD *)(v29 + 2 * llroundf(v61));
          __asm { FCVT            S10, H10 }
          v64 = _S31 * _S10;
          _S8 = _S8 * _S10;
          _S9 = _S9 * _S10;
          v67 = (float)((float)(v21 * _S8) + (float)(v64 * v20)) + (float)(_S9 * v22);
          v68 = (float)((float)(v24 * _S8) + (float)(v64 * v23)) + (float)(_S9 * v25);
          _S31 = (float)((float)(v27 * _S8) + (float)(v64 * v26)) + (float)(_S9 * v31);
          LOWORD(_S8) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H8
            FCVT            S9, H9
          }
          LOWORD(_S31) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          *(_DWORD *)v44 = _S8;
          *(_DWORD *)(v44 + 4) = _S9;
          *(_DWORD *)(v44 + 8) = _S31;
          *(float *)(v44 + 12) = (float)v48 * 0.33333;
          v44 += 16;
          --v42;
        }
        while (v42);
      }
      v39 += v16;
      result += v17;
      v37 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l10r_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v59;
  float v60;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    *(float *)&a5 = (float)LODWORD(a5);
    v20 = *(float *)(v13 + 72);
    v21 = *(float *)(v13 + 76);
    v22 = *(float *)(v13 + 80);
    v23 = *(float *)(v13 + 84);
    v24 = *(float *)(v13 + 88);
    v25 = *(float *)(v13 + 92);
    v26 = *(float *)(v13 + 96);
    v27 = *(float *)(v13 + 100);
    v28 = *(float *)(v13 + 104);
    v29 = v13 + 164;
    v30 = v13 + 16548;
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v6;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = v32 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v18 + 4 * v31;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + 4 * v35;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v16 * v11 + 4 * v35);
    v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v10)
      {
        v42 = v10;
        v43 = (unsigned int *)result;
        v44 = v36;
        v45 = (unsigned __int8 *)v39;
        do
        {
          v47 = *v43++;
          v46 = v47;
          if (v45)
          {
            v49 = *v45++;
            v48 = v49;
          }
          else
          {
            v48 = v46 >> 30;
          }
          _D28 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v40), v19), 0), v41)));
          _D28.i16[0] = *(_WORD *)(v29 + 2 * _D28.u32[0]);
          _H29 = *(_WORD *)(v29 + 2 * _D28.u32[1]);
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H27 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf(v19 * (float)((float)(v46 & 0x3FF) - *(float *)&a5), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v59 = (float)((float)(v21 * _S29) + (float)(*(float *)_D28.i32 * v20)) + (float)(_S27 * v22);
          v60 = (float)((float)(v24 * _S29) + (float)(*(float *)_D28.i32 * v23)) + (float)(_S27 * v25);
          _S27 = (float)((float)(v27 * _S29) + (float)(*(float *)_D28.i32 * v26)) + (float)(_S27 * v28);
          _D28.i16[0] = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          LOWORD(_S27) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          *(_DWORD *)v44 = _D28.i32[0];
          *(_DWORD *)(v44 + 4) = _S29;
          *(_DWORD *)(v44 + 8) = _S27;
          *(float *)(v44 + 12) = (float)v48 * 0.33333;
          v44 += 16;
          --v42;
        }
        while (v42);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l10r_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l10r_rgb_RGfA_GCD);
  return 0;
}

uint64_t vt_Copy_l10r_rgb_RGfA_GCD(uint64_t result, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v4 = *(_QWORD *)(result + 28);
  v5 = *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v13 = *(uint64_t **)(result + 64);
    v15 = *v13;
    v16 = v13[1];
    v17 = **(_QWORD **)(result + 136);
    v18 = 1.0;
    v19 = 1.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(v18) = *(_WORD *)(v12 + 140);
    *(float *)&a4 = (float)v18;
    v20 = *(_QWORD *)(result + 112);
    v21 = *(_QWORD **)(result + 128);
    v22 = *(_QWORD *)(result + 104) * a2 / v5 + *(_QWORD *)(result + 120);
    result = *(_QWORD *)(result + 36);
    v23 = *v21 + v22 * v17 + 4 * v20;
    v26 = v14;
    v25 = *v14;
    v24 = v26[1];
    if (v24)
      v27 = v24 + v16 * v10 + 4 * result;
    else
      v27 = 0;
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
    v29 = v25 + v15 * v10 + 4 * result;
    do
    {
      if (v9)
      {
        v30 = v9;
        result = v29;
        v31 = (float32x2_t *)v23;
        v32 = (unsigned __int8 *)v27;
        do
        {
          v34 = *(_DWORD *)result;
          result += 4;
          v33 = v34;
          if (v32)
          {
            v36 = *v32++;
            v35 = v36;
          }
          else
          {
            v35 = v33 >> 30;
          }
          *v31 = vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), v28), v19);
          v31[1].f32[0] = v19 * (float)((float)(v33 & 0x3FF) - *(float *)&a4);
          v31[1].f32[1] = (float)v35 * 0.33333;
          v31 += 2;
          --v30;
        }
        while (v30);
      }
      v29 += v15;
      v27 += v16;
      v23 += v17;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t VTPreprocessingSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTPreprocessingSessionGetTypeID_sRegisterVTPreprocessingSessionOnce, RegisterVTPreprocessingSession);
  return sVTPreprocessingSessionID;
}

void RegisterVTPreprocessingSession()
{
  sVTPreprocessingSessionID = _CFRuntimeRegisterClass();
  sVTProcessingSessionPropertyCallbacks = 0;
  unk_1EE285380 = VTPreprocessingSessionCopySupportedPropertyDictionary;
  qword_1EE285388 = (uint64_t)VTPreprocessingSessionSetProperty;
  unk_1EE285390 = VTPreprocessingSessionCopyProperty;
  qword_1EE285398 = (uint64_t)VTPreprocessingSessionSetProperties;
  unk_1EE2853A0 = VTPreprocessingSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTProcessingSessionPropertyCallbacks, (const void *)sVTPreprocessingSessionID);
}

uint64_t VTPreprocessingSessionCopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  if (a2 && (*a2 = 0, a1) && !*(_BYTE *)(a1 + 16))
    return vtPreprocessingSessionCopyProperties(a2);
  else
    return FigSignalErrorAt();
}

uint64_t vtPreprocessingSessionCopyProperties(CFTypeRef *a1)
{
  MEMORY[0x1940281CC](&sVTCreatePropertiesHandledByPreprocessingSessionOnce, vtPreprocessingSessionCreateProperties);
  if (!a1 || !sVTPreprocessingSessionProperties)
    return FigSignalErrorAt();
  *a1 = CFRetain((CFTypeRef)sVTPreprocessingSessionProperties);
  return 0;
}

uint64_t VTPreprocessingSessionSetProperty(uint64_t a1, const void *a2)
{
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!vtPreprocessingSessionIsPropertyHandledByVideoToolbox(a2))
    return FigSignalErrorAt();
  result = CFEqual(CFSTR("SourcePixelBufferAttributes"), a2);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

BOOL vtPreprocessingSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  _BOOL8 v2;
  CFDictionaryRef theDict;

  theDict = 0;
  vtPreprocessingSessionCopyProperties((CFTypeRef *)&theDict);
  if (!theDict)
    return 0;
  v2 = CFDictionaryContainsKey(theDict, a1) != 0;
  if (theDict)
    CFRelease(theDict);
  return v2;
}

uint64_t VTPreprocessingSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v8;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 16) || !vtPreprocessingSessionIsPropertyHandledByVideoToolbox(a2))
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourcePixelBufferAttributes"), a2))
  {
    v8 = *(CFTypeRef *)(a1 + 40);
    if (v8)
      v8 = CFRetain(v8);
    *a4 = v8;
  }
  return 0;
}

uint64_t VTPreprocessingSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!theDict)
    return 0;
  v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtCompressionSessionSetOneProperty_0, &v3);
  return v4;
}

uint64_t vtCompressionSessionSetOneProperty_0(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = VTPreprocessingSessionSetProperty(*(_QWORD *)a3, a1);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTPreprocessingSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  if (a1 && !*(_BYTE *)(a1 + 16))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t VTPreprocessingSessionCreate(const __CFAllocator *a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t Instance;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, _QWORD *, uint64_t);
  uint64_t v16;
  CFArrayCallBacks callBacks;

  if (a5)
  {
    if (a4)
    {
      if (a2 > 0 && a3 > 0)
      {
        MEMORY[0x1940281CC](&VTPreprocessingSessionGetTypeID_sRegisterVTPreprocessingSessionOnce, RegisterVTPreprocessingSession);
        Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          v11 = (_QWORD *)Instance;
          *(_DWORD *)(Instance + 20) = a2;
          *(_DWORD *)(Instance + 24) = a3;
          *(_QWORD *)(Instance + 72) = Instance;
          *(_QWORD *)(Instance + 88) = 0;
          *(_QWORD *)(Instance + 96) = 0;
          VTCreateVideoEncoderInstanceFromEncoderID(a4);
          v12 = v11[8];
          v13 = *(_QWORD *)((char *)v11 + 20);
          v14 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v14 >= 2uLL && (v15 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t))v14[10]) != 0)
          {
            v16 = v15(v12, v11 + 9, v13);
            if (!(_DWORD)v16)
            {
              callBacks.version = 0;
              callBacks.retain = 0;
              callBacks.copyDescription = 0;
              callBacks.equal = 0;
              callBacks.release = (CFArrayReleaseCallBack)vtPreprocessingSessionResolutionReleaseCallBack;
              v11[10] = CFArrayCreateMutable(a1, 0, &callBacks);
              *a5 = v11;
              return v16;
            }
          }
          else
          {
            v16 = 4294954514;
          }
          CFRelease(v11);
          return v16;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

void vtPreprocessingSessionResolutionReleaseCallBack(int a1, _QWORD *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v3 = (const void *)a2[1];
  if (v3)
  {
    CFRelease(v3);
    a2[1] = 0;
  }
  v4 = (const void *)a2[4];
  if (v4)
  {
    CFRelease(v4);
    a2[4] = 0;
  }
  v5 = (const void *)a2[5];
  if (v5)
  {
    CFRelease(v5);
    a2[5] = 0;
  }
  v6 = (const void *)a2[6];
  if (v6)
  {
    CFRelease(v6);
    a2[6] = 0;
  }
  v7 = (const void *)a2[3];
  if (v7)
  {
    CFRelease(v7);
    a2[3] = 0;
  }
  v8 = (const void *)a2[2];
  if (v8)
    CFRelease(v8);
  free(a2);
}

uint64_t VTPreprocessingSessionAddResolution(uint64_t a1, int a2, int a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7)
{
  _DWORD *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, _DWORD *, uint64_t);

  if (!a1 || *(_BYTE *)(a1 + 16) || a2 <= 0 || a3 <= 0)
    return FigSignalErrorAt();
  v14 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E00409425AC4EuLL);
  *v14 = a2;
  v14[1] = a3;
  if (a4)
    v15 = CFRetain(a4);
  else
    v15 = 0;
  *((_QWORD *)v14 + 1) = v15;
  *((_QWORD *)v14 + 7) = a6;
  *((_QWORD *)v14 + 8) = a7;
  if (a5)
    v16 = CFRetain(a5);
  else
    v16 = 0;
  *((_QWORD *)v14 + 4) = v16;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), v14);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)v14;
  v19 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v19 >= 2uLL && (v20 = (uint64_t (*)(uint64_t, _DWORD *, uint64_t))v19[11]) != 0)
    return v20(v17, v14, v18);
  else
    return 4294954514;
}

uint64_t VTPreprocessingSessionPreprocessFrame(uint64_t a1, __CVBuffer *cf, __int128 *a3, __int128 *a4, const __CFDictionary *a5, uint64_t a6)
{
  __CVPixelBufferPool **v12;
  const __CFAllocator *v13;
  uint64_t v14;
  __CVPixelBufferPool *v15;
  const void *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  const __CFAllocator *v19;
  CFMutableDictionaryRef v20;
  char *v21;
  char *v22;
  const __CFAllocator *v23;
  CFIndex Count;
  __CFArray *Mutable;
  const __CFArray *v26;
  uint64_t v27;
  CVPixelBufferRef v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, char *, CVPixelBufferRef, __int128 *, __int128 *, const __CFDictionary *);
  uint64_t v31;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  CVPixelBufferRef pixelBufferOut;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  CFRange v42;

  pixelBufferOut = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16) || !cf || (*((_DWORD *)a3 + 3) & 0x1D) != 1)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 40) && !CVPixelBufferIsCompatibleWithAttributes())
  {
    v12 = (__CVPixelBufferPool **)(a1 + 48);
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(a1 + 48))
      goto LABEL_11;
    v14 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 40), (CVPixelBufferPoolRef *)(a1 + 48));
    if ((_DWORD)v14)
      goto LABEL_25;
    if (*v12)
    {
LABEL_11:
      v14 = VTPixelTransferSessionCreate(v13, (VTPixelTransferSessionRef *)(a1 + 56));
      if ((_DWORD)v14)
        goto LABEL_25;
      v15 = *v12;
    }
    else
    {
      v15 = 0;
    }
    v14 = CVPixelBufferPoolCreatePixelBuffer(v13, v15, &pixelBufferOut);
    if ((_DWORD)v14)
      goto LABEL_25;
    v14 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 56), cf, pixelBufferOut);
    if ((_DWORD)v14)
      goto LABEL_25;
  }
  else
  {
    pixelBufferOut = (CVPixelBufferRef)CFRetain(cf);
  }
  if (a5)
  {
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    v17 = v16 == CFDictionaryGetValue(a5, CFSTR("OnlyForLookBehind"));
    v18 = v16 == CFDictionaryGetValue(a5, CFSTR("OnlyForLookAhead"));
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v40 = *a3;
  v41 = *((_QWORD *)a3 + 2);
  v38 = *a4;
  v39 = *((_QWORD *)a4 + 2);
  if (*(_QWORD *)(a1 + 88)
    || (v19 = CFGetAllocator((CFTypeRef)a1),
        v20 = CFDictionaryCreateMutable(v19, 0, 0, 0),
        (*(_QWORD *)(a1 + 88) = v20) != 0))
  {
    v21 = *(char **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v21 + 1;
    if (!v18 && !v17)
    {
      v22 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10A00408211C625uLL);
      *(_OWORD *)v22 = v40;
      *((_QWORD *)v22 + 2) = v41;
      *(_OWORD *)(v22 + 24) = v38;
      *((_QWORD *)v22 + 5) = v39;
      *((_QWORD *)v22 + 7) = a6;
      v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
      Mutable = CFArrayCreateMutable(v23, Count, 0);
      *((_QWORD *)v22 + 6) = Mutable;
      v26 = *(const __CFArray **)(a1 + 80);
      v42.length = CFArrayGetCount(v26);
      v42.location = 0;
      CFArrayAppendArray(Mutable, v26, v42);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 88), v21, v22);
    }
  }
  else
  {
    v31 = FigSignalErrorAt();
    if ((_DWORD)v31)
      goto LABEL_27;
    v21 = 0;
  }
  v27 = *(_QWORD *)(a1 + 64);
  v28 = pixelBufferOut;
  v35 = *a3;
  v36 = *((_QWORD *)a3 + 2);
  v33 = *a4;
  v34 = *((_QWORD *)a4 + 2);
  v29 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v29 < 2uLL
    || (v30 = (uint64_t (*)(uint64_t, char *, CVPixelBufferRef, __int128 *, __int128 *, const __CFDictionary *))v29[12]) == 0)
  {
    v31 = 4294954514;
    goto LABEL_27;
  }
  v40 = v35;
  v41 = v36;
  v38 = v33;
  v39 = v34;
  v14 = v30(v27, v21, v28, &v40, &v38, a5);
LABEL_25:
  v31 = v14;
LABEL_27:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v31;
}

uint64_t VTPreprocessingSessionCompleteFrames(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v3 < 2uLL)
    return 4294954514;
  v4 = (uint64_t (*)(uint64_t))v3[13];
  if (!v4)
    return 4294954514;
  result = v4(v2);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 88);
    if (result)
    {
      if (CFDictionaryGetCount((CFDictionaryRef)result) >= 1)
        return FigSignalErrorAt();
      return 0;
    }
  }
  return result;
}

void VTPreprocessingSessionInvalidate(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 16) = 1;
    v2 = *(const void **)(a1 + 64);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v3 = *(const void **)(a1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 80) = 0;
    }
    v4 = *(const void **)(a1 + 88);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 88) = 0;
    }
    v5 = *(const void **)(a1 + 48);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
}

uint64_t VTEncoderPreprocessingSessionSetSourcePixelBufferAttributes(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  v2 = (_QWORD *)*a1;
  if (!*a1)
    return FigSignalErrorAt();
  v3 = (const void *)v2[5];
  v2[5] = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)v2[6];
  if (v4)
  {
    CFRelease(v4);
    v2[6] = 0;
  }
  v5 = (const void *)v2[7];
  if (v5)
  {
    CFRelease(v5);
    v2[7] = 0;
  }
  return 0;
}

uint64_t VTEncoderPreprocessingSessionSetResolutionOutputPixelBufferAttributes(uint64_t a1, _QWORD *a2, const void *a3)
{
  uint64_t IsPartOfSession;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  IsPartOfSession = vtPreprocessingSessionEnsureResolutionIsPartOfSession(a1, a2);
  if (!(_DWORD)IsPartOfSession)
  {
    v6 = (const void *)a2[2];
    a2[2] = a3;
    if (a3)
      CFRetain(a3);
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a2[3];
    if (v7)
    {
      CFRelease(v7);
      a2[3] = 0;
    }
    v8 = (const void *)a2[5];
    if (v8)
    {
      CFRelease(v8);
      a2[5] = 0;
    }
    v9 = (const void *)a2[6];
    if (v9)
    {
      CFRelease(v9);
      a2[6] = 0;
    }
  }
  return IsPartOfSession;
}

uint64_t vtPreprocessingSessionEnsureResolutionIsPartOfSession(uint64_t a1, const void *a2)
{
  const __CFArray *v3;
  CFRange v5;

  if (a1
    && *(_QWORD *)a1
    && (v3 = *(const __CFArray **)(*(_QWORD *)a1 + 80),
        v5.length = CFArrayGetCount(v3),
        v5.location = 0,
        CFArrayContainsValue(v3, v5, a2)))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const __CFDictionary *VTEncoderPreprocessingSessionGetResolutionOutputPixelBufferPool(uint64_t a1, const __CFDictionary **a2)
{
  const __CFAllocator *v3;

  if (vtPreprocessingSessionEnsureResolutionIsPartOfSession(a1, a2))
    return 0;
  if (!a2[3]
    && ((v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
         VTBuildPixelBufferPools((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2[2], a2[4], (uint64_t)*a2, a2 + 3, a2 + 5))|| a2[5] && VTPixelTransferSessionCreate(v3, a2 + 6)))
  {
    return 0;
  }
  else
  {
    return a2[3];
  }
}

uint64_t VTEncoderPreprocessingSessionEmitPreprocessedFrame(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, void *a5)
{
  uint64_t IsPartOfSession;
  uint64_t v11;
  char *Value;
  CFMutableArrayRef *v13;
  const __CFArray *v14;
  uint64_t v15;
  CFIndex FirstIndexOfValue;
  uint64_t v17;
  CFMutableArrayRef v18;
  __CVBuffer *v19;
  __CVPixelBufferPool *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *, __CVBuffer *);
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  CVPixelBufferRef pixelBufferOut;
  CFRange v34;

  pixelBufferOut = 0;
  v31 = *MEMORY[0x1E0CA2E18];
  v32 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v29 = v31;
  v30 = v32;
  IsPartOfSession = vtPreprocessingSessionEnsureResolutionIsPartOfSession(a1, (const void *)a2);
  if ((_DWORD)IsPartOfSession)
    return IsPartOfSession;
  v11 = *(_QWORD *)a1;
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 88), a3);
  if (!Value)
  {
    v17 = FigSignalErrorAt();
    v15 = 0;
    if ((_DWORD)v17)
      return v17;
LABEL_11:
    if ((_DWORD)a4)
    {
      v19 = 0;
      v17 = 0;
      goto LABEL_21;
    }
    if (a5)
    {
      v20 = *(__CVPixelBufferPool **)(a2 + 40);
      if (!v20)
      {
        v19 = (__CVBuffer *)CFRetain(a5);
        a4 = 0;
        v17 = 0;
        pixelBufferOut = v19;
LABEL_21:
        v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *, __CVBuffer *))(a2 + 56);
        v22 = *(_QWORD *)(a2 + 64);
        v27 = v31;
        v28 = v32;
        v25 = v29;
        v26 = v30;
        v23(v22, v15, a4, &v27, &v25, v19);
        if (pixelBufferOut)
          CFRelease(pixelBufferOut);
        return v17;
      }
      v21 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20, &pixelBufferOut);
      if (pixelBufferOut)
      {
        v21 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a2 + 48), (CVPixelBufferRef)a5, pixelBufferOut);
        a4 = v21;
        v19 = pixelBufferOut;
LABEL_19:
        v17 = v21;
        goto LABEL_21;
      }
    }
    else
    {
      v21 = FigSignalErrorAt();
    }
    a4 = v21;
    v19 = 0;
    goto LABEL_19;
  }
  v13 = (CFMutableArrayRef *)Value;
  v31 = *(_OWORD *)Value;
  v32 = *((_QWORD *)Value + 2);
  v29 = *(_OWORD *)(Value + 24);
  v14 = (const __CFArray *)*((_QWORD *)Value + 6);
  v30 = *((_QWORD *)Value + 5);
  v15 = *((_QWORD *)Value + 7);
  v34.length = CFArrayGetCount(v14);
  v34.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v14, v34, (const void *)a2);
  if (FirstIndexOfValue == -1)
  {
    v17 = FigSignalErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(v13[6], FirstIndexOfValue);
    v17 = 0;
  }
  if (!CFArrayGetCount(v13[6]))
  {
    v18 = v13[6];
    if (v18)
      CFRelease(v18);
    free(v13);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 88), a3);
  }
  if (!(_DWORD)v17)
    goto LABEL_11;
  return v17;
}

uint64_t VTDistributedPreprocessingGetOverlap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  if (a2)
  {
    if (!a3)
      return FigSignalErrorAt();
    v5 = VTCreateVideoEncoderInstanceFromEncoderID(a1);
    if (!(_DWORD)v5)
    {
      v6 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v6 < 2uLL)
        return 4294954514;
      v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))v6[14];
      if (!v7)
        return 4294954514;
      return v7(0, a2, a3);
    }
    return v5;
  }
  return FigSignalErrorAt();
}

double vtPreprocessingSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

CFTypeRef vtPreprocessingSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTPreprocessingSession]"));
}

__CFString *vtPreprocessingSessionCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPreprocessingSession %p [%p]>{}"), a1, v4);
  return Mutable;
}

void vtPreprocessingSessionCreateProperties()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    values = v1;
    keys[0] = CFSTR("SourcePixelBufferAttributes");
    sVTPreprocessingSessionProperties = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!sVTPreprocessingSessionProperties)
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTSelectAndCreateRAWProcessorInstance()
{
  return 0;
}

uint64_t VTCopyRAWProcessorExtensionProperties()
{
  return 4294947786;
}

CFTypeID VTMultiPassStorageGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTMultiPassStorageGetTypeID_sRegisterVTMultiPassStorageOnce, RegisterVTMultiPassStorage);
  return sVTMultiPassStorageID;
}

uint64_t RegisterVTMultiPassStorage()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTMultiPassStorageID = result;
  return result;
}

OSStatus VTMultiPassStorageCreate(CFAllocatorRef allocator, CFURLRef fileURL, CMTimeRange *timeRange, CFDictionaryRef options, VTMultiPassStorageRef *multiPassStorageOut)
{
  uint64_t Instance;
  uint64_t v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  OSStatus EmptyTable;
  OSStatus FileInfo;
  unint64_t v21;
  unint64_t v22;
  OSStatus v23;
  UInt8 *v24;
  const __CFData *v25;
  CFStringRef v26;
  __int128 v27;
  uint64_t v28;
  const void *v29;
  OSStatus v30;
  CMTimeValue v31;
  OSStatus v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  const __CFData *v39;
  CFIndex v40;
  UInt8 *v41;
  OSStatus v42;
  OSStatus v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  size_t v48;
  malloc_type_id_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  OSStatus v53;
  uint64_t v54;
  void *v55;
  int v56;
  BOOL v57;
  CFMutableArrayRef *v58;
  int32_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  const __CFData *v63;
  unint64_t v64;
  const __CFAllocator *allocatora;
  int allocatorb;
  const __CFString *v67;
  CMTimeRange range2;
  CMTimeRange range1;
  CFArrayCallBacks callBacks;
  void *value;
  CMTime time2;
  CMTime time1;
  unsigned int v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (!multiPassStorageOut)
    return -12902;
  MEMORY[0x1940281CC](&VTMultiPassStorageGetTypeID_sRegisterVTMultiPassStorageOnce, RegisterVTMultiPassStorage);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return -12904;
  v11 = Instance;
  memset(&callBacks, 0, sizeof(callBacks));
  if (!FigServer_IsServerProcess())
  {
    v27 = *(_OWORD *)&timeRange->start.epoch;
    *(_OWORD *)&range1.start.value = *(_OWORD *)&timeRange->start.value;
    *(_OWORD *)&range1.start.epoch = v27;
    *(_OWORD *)&range1.duration.timescale = *(_OWORD *)&timeRange->duration.timescale;
    EmptyTable = VTMultiPassStorageRemote_Create(v11, (uint64_t)allocator, fileURL, (uint64_t)&range1, (uint64_t)options, (_QWORD *)(v11 + 16));
    if (!EmptyTable)
      goto LABEL_76;
    goto LABEL_24;
  }
  *(_BYTE *)(v11 + 48) = 1;
  if (options && CFDictionaryGetValueIfPresent(options, CFSTR("DoNotDelete"), (const void **)&value))
    *(_BYTE *)(v11 + 48) = value != (void *)*MEMORY[0x1E0C9AE50];
  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)vtMultiPassStorageLocationRetain;
  callBacks.release = (CFArrayReleaseCallBack)vtMultiPassStorageLocationRelease;
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)vtMultiPassStorageLocationCopyDescription;
  callBacks.equal = (CFArrayEqualCallBack)vtMultiPassStorageLocationEqual;
  v12 = CFGetAllocator((CFTypeRef)v11);
  *(_QWORD *)(v11 + 152) = CFArrayCreateMutable(v12, 0, &callBacks);
  v13 = CFGetAllocator((CFTypeRef)v11);
  *(_QWORD *)(v11 + 160) = CFArrayCreateMutable(v13, 0, &callBacks);
  v14 = *(_OWORD *)&timeRange->start.epoch;
  *(_OWORD *)&range1.start.value = *(_OWORD *)&timeRange->start.value;
  *(_OWORD *)&range1.start.epoch = v14;
  *(_OWORD *)&range1.duration.timescale = *(_OWORD *)&timeRange->duration.timescale;
  v15 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&range2.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&range2.start.epoch = v15;
  *(_OWORD *)&range2.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (!CMTimeRangeEqual(&range1, &range2)
    && ((timeRange->start.flags & 1) == 0
     || (timeRange->duration.flags & 1) == 0
     || timeRange->duration.epoch
     || timeRange->duration.value < 0))
  {
    EmptyTable = FigSignalErrorAt();
    goto LABEL_24;
  }
  v16 = *(_OWORD *)&timeRange->start.value;
  v17 = *(_OWORD *)&timeRange->start.epoch;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)&timeRange->duration.timescale;
  *(_OWORD *)(v11 + 120) = v17;
  *(_OWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 32) = FigReentrantMutexCreate();
  if (!fileURL)
  {
    range1.start.value = 0;
    v28 = FigCFURLCreateFromTemporaryFileWithDirectory();
    if (v28)
    {
      v29 = (const void *)v28;
      v30 = FigFileForkOpenMainByCFURL();
      if (v30)
      {
        v23 = v30;
        if (range1.start.value)
          FigFileForkClose();
        CFRelease(v29);
        goto LABEL_25;
      }
      v31 = range1.start.value;
      *(_QWORD *)(v11 + 56) = v29;
      *(_QWORD *)(v11 + 64) = v31;
    }
    else
    {
      EmptyTable = FigSignalErrorAt();
      if (EmptyTable)
        goto LABEL_24;
    }
    goto LABEL_30;
  }
  *(_QWORD *)(v11 + 56) = CFRetain(fileURL);
  v18 = v11 + 64;
  if (!FigFileDoesFileExist())
  {
    EmptyTable = FigFileForkOpenMainByCFURL();
    if (EmptyTable)
      goto LABEL_24;
LABEL_30:
    EmptyTable = vtMultiPassStorageCreateEmptyTable(v11);
    if (!EmptyTable)
      goto LABEL_76;
    goto LABEL_24;
  }
  EmptyTable = FigFileForkOpenMainByCFURL();
  if (EmptyTable)
  {
LABEL_24:
    v23 = EmptyTable;
    goto LABEL_25;
  }
  memset(&range1, 0, 40);
  MEMORY[0x194027ED8](*(_QWORD *)(v11 + 32));
  FileInfo = FigFileGetFileInfo();
  if (FileInfo || (v21 = range1.start.value, (FileInfo = FigFileForkRead()) != 0))
  {
LABEL_15:
    v23 = FileInfo;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_71;
  }
  v22 = bswap32(v77);
  if (v22 < 0x14
    || (uint64_t)v21 < v22
    || v78 != 1887007846
    || v79 != 1936747894
    || v80 != 0x1000000)
  {
    FileInfo = FigSignalErrorAt();
    goto LABEL_15;
  }
  v25 = 0;
  v67 = 0;
  allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v32 = FigFileForkRead();
    if (v32)
      goto LABEL_69;
    if (v74 == 0x1000000)
    {
      v32 = FigFileForkRead();
      if (v32)
        goto LABEL_69;
      v33 = bswap64(v76);
      v34 = 16;
    }
    else
    {
      v33 = bswap32(v74);
      v34 = 12;
    }
    v35 = v33 + v22;
    v36 = v33 < 8 || v35 > v21;
    if (v36)
      goto LABEL_68;
    if (v75 == 1768975734)
      break;
    if (v75 == 1936747894)
    {
      *(_OWORD *)&range2.start.value = *MEMORY[0x1E0CA2E68];
      range2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      v44 = v33 - v34;
      v45 = (v33 - v34) / 0x24;
      if ((v33 - v34) % 0x24)
      {
LABEL_68:
        v32 = FigSignalErrorAt();
LABEL_69:
        v23 = v32;
        v24 = 0;
        goto LABEL_70;
      }
      v47 = 512;
      if (v45 < 0x200)
        v47 = v45;
      v64 = v47;
      v63 = v25;
      if (v47)
      {
        v48 = 36 * v47;
        v49 = 1556728742;
      }
      else
      {
        v48 = 0;
        v49 = 1270757447;
      }
      v24 = (UInt8 *)malloc_type_malloc(v48, v49);
      if (!v24)
      {
        v23 = -12904;
        goto LABEL_109;
      }
      if (v44 < 0x24)
      {
LABEL_85:
        v23 = 0;
        *(_QWORD *)(v11 + 72) = v21;
        *(_QWORD *)(v11 + 80) = 0;
LABEL_109:
        v25 = v63;
LABEL_70:
        v26 = v67;
        goto LABEL_71;
      }
      allocatorb = 0;
      v50 = 0;
      v51 = v34 + v22;
      while (1)
      {
        if (v45 - v50 >= v64)
          v52 = v64;
        else
          v52 = v45 - v50;
        v53 = FigFileForkRead();
        if (v53)
        {
LABEL_108:
          v23 = v53;
          goto LABEL_109;
        }
        if (v52)
          break;
LABEL_105:
        v51 += 36 * v52;
        if (v50 >= (uint64_t)v45)
          goto LABEL_85;
      }
      v62 = v51;
      v54 = 0;
      v61 = v52 + v50;
      while (1)
      {
        v55 = malloc_type_malloc(0x30uLL, 0x10000400B536EFBuLL);
        *(_QWORD *)v55 = *(_QWORD *)&v24[v54];
        *((_DWORD *)v55 + 2) = *(_DWORD *)&v24[v54 + 8];
        v56 = *(_DWORD *)&v24[v54 + 12];
        *((_DWORD *)v55 + 3) = v56;
        *((_QWORD *)v55 + 2) = 0;
        *((_DWORD *)v55 + 6) = *(_DWORD *)&v24[v54 + 16];
        *((_QWORD *)v55 + 4) = *(_QWORD *)&v24[v54 + 20];
        *((_QWORD *)v55 + 5) = *(_QWORD *)&v24[v54 + 28];
        v57 = (v56 & 0x1D) == 1;
        v58 = (CFMutableArrayRef *)(v11 + 152);
        if (!v57)
          v58 = (CFMutableArrayRef *)(v11 + 160);
        CFArrayAppendValue(*v58, v55);
        if (v50 <= 0)
          break;
        time1 = *(CMTime *)v55;
        time2 = range2.start;
        if (CMTimeCompare(&time1, &time2) < 0)
          goto LABEL_107;
        time1 = *(CMTime *)v55;
        time2 = range2.start;
        v59 = CMTimeCompare(&time1, &time2);
        v60 = *((_DWORD *)v55 + 6);
        if (v59)
          goto LABEL_102;
        v36 = v60 < allocatorb;
        allocatorb = *((_DWORD *)v55 + 6);
        if (v36)
        {
LABEL_107:
          v53 = FigSignalErrorAt();
          goto LABEL_108;
        }
LABEL_103:
        *(_OWORD *)&range2.start.value = *(_OWORD *)v55;
        range2.start.epoch = *((_QWORD *)v55 + 2);
        ++v50;
        v54 += 36;
        if (36 * v52 == v54)
        {
          v50 = v61;
          v51 = v62;
          goto LABEL_105;
        }
      }
      v60 = *((_DWORD *)v55 + 6);
LABEL_102:
      allocatorb = v60;
      goto LABEL_103;
    }
LABEL_63:
    v22 = v35;
    if (v35 >= v21)
      goto LABEL_68;
  }
  if ((_DWORD)v76)
    goto LABEL_68;
  v37 = v18;
  v38 = v21;
  v39 = v25;
  v40 = v33 - v34;
  if (v33 == v34)
  {
    v25 = v39;
    v21 = v38;
    v18 = v37;
    goto LABEL_63;
  }
  v41 = (UInt8 *)malloc_type_malloc(v33 - v34, 0x643782D5uLL);
  if (!v41)
  {
    v24 = 0;
    v23 = -12904;
LABEL_117:
    v26 = v67;
    v25 = v39;
    goto LABEL_71;
  }
  v24 = v41;
  v42 = FigFileForkRead();
  if (v42)
  {
    v23 = v42;
    goto LABEL_117;
  }
  if (v39)
    CFRelease(v39);
  v25 = CFDataCreate(allocatora, v24, v40);
  v21 = v38;
  if (!v25)
  {
    v18 = v37;
    goto LABEL_62;
  }
  if (v67)
    CFRelease(v67);
  v26 = CFStringCreateFromExternalRepresentation(allocatora, v25, 0x8000100u);
  v43 = VTMultiPassStorageSetIdentifier(v11, v26);
  if (!v43)
  {
    v18 = v37;
    v67 = v26;
LABEL_62:
    free(v24);
    goto LABEL_63;
  }
  v23 = v43;
LABEL_71:
  MEMORY[0x194027EE4](*(_QWORD *)(v11 + 32));
  free(v24);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (!v23)
  {
LABEL_76:
    v23 = 0;
    *multiPassStorageOut = (VTMultiPassStorageRef)v11;
    return v23;
  }
LABEL_25:
  CFRelease((CFTypeRef)v11);
  return v23;
}

uint64_t vtMultiPassStorageLocationRetain(uint64_t a1, uint64_t a2)
{
  return a2;
}

void vtMultiPassStorageLocationRelease(int a1, void *a2)
{
  free(a2);
}

__CFString *vtMultiPassStorageLocationCopyDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<vtMultiPassStorageLocation>{time:%lld/%d, index:%d, dataOffset:%lld, dataSize:%lld}"), *(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return Mutable;
}

BOOL vtMultiPassStorageLocationEqual(uint64_t a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;

  time1 = *(CMTime *)a1;
  v5 = *(CMTime *)a2;
  return !CMTimeCompare(&time1, &v5) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

uint64_t vtMultiPassStorageCreateEmptyTable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
  v2 = FigFileForkWrite();
  if (!(_DWORD)v2)
    v2 = FigSignalErrorAt();
  v4 = v2;
  MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
  return v4;
}

uint64_t VTMultiPassStorageInvalidate(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1 && !*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 1;
    v2 = *(_QWORD **)(a1 + 16);
    if (v2)
    {
      VTMultiPassStorageRemote_Invalidate(v2);
    }
    else
    {
      if (*(_QWORD *)(a1 + 32))
        MEMORY[0x194027ED8]();
      FigFileForkClose();
      if (*(_QWORD *)(a1 + 56))
        FigFileDeleteFile();
      *(_QWORD *)(a1 + 64) = 0;
      v3 = *(const void **)(a1 + 152);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1 + 152) = 0;
      }
      v4 = *(const void **)(a1 + 160);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1 + 160) = 0;
      }
      v5 = *(const void **)(a1 + 56);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a1 + 56) = 0;
      }
      v6 = *(const void **)(a1 + 40);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 40) = 0;
      }
      if (*(_QWORD *)(a1 + 32))
      {
        MEMORY[0x194027EE4]();
        FigSimpleMutexDestroy();
      }
    }
  }
  return 0;
}

uint64_t VTMultiPassStorageSetIdentifier(uint64_t a1, const void *a2)
{
  uint64_t v4;
  const void *v6;
  uint64_t v7;
  CFTypeRef v8;

  if (!a1 || *(_BYTE *)(a1 + 24))
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return VTMultiPassStorageRemote_SetIdentifier(v4);
  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
  v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    if (CFEqual(v6, a2))
      v7 = 0;
    else
      v7 = 4294955083;
  }
  else
  {
    v8 = CFRetain(a2);
    v7 = 0;
    *(_QWORD *)(a1 + 40) = v8;
  }
  MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
  return v7;
}

CFStringRef VTMultiPassStorageCopyIdentifier(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v4;
  CFStringRef Copy;

  if (!a1 || *(_BYTE *)(a1 + 24))
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      return VTMultiPassStorageRemote_CopyIdentifier(v2);
    MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
    v4 = *(const __CFString **)(a1 + 40);
    if (v4)
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    else
      Copy = 0;
    MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
  }
  return Copy;
}

uint64_t VTMultiPassStorageSetDataAtTimeStamp(uint64_t a1, __int128 *a2, int a3, CFDataRef theData)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  _QWORD *ValueAtIndex;
  __int128 v19;
  CFIndex Length;
  CFIndex v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  uint64_t v25;
  _QWORD *v26;
  CFIndex idx;
  CMTime time;
  __int128 value;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CMTimeRange range;
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_BYTE *)(a1 + 24))
    return FigSignalErrorAt();
  v8 = *((_DWORD *)a2 + 3);
  if ((v8 & 0x1D) == 1)
  {
    if ((v8 & 1) != 0 && *((_QWORD *)a2 + 2))
      return FigSignalErrorAt();
LABEL_8:
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      *(_OWORD *)&range.start.value = *a2;
      range.start.epoch = *((_QWORD *)a2 + 2);
      return VTMultiPassStorageRemote_SetDataAtTimeStamp(v9, (uint64_t)&range, a3, theData);
    }
    if ((*(_BYTE *)(a1 + 116) & 1) != 0
      && (*(_BYTE *)(a1 + 140) & 1) != 0
      && !*(_QWORD *)(a1 + 144)
      && (v8 & 1) != 0
      && (*(_QWORD *)(a1 + 128) & 0x8000000000000000) == 0)
    {
      v12 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&range.start.epoch = v12;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 136);
      time = *(CMTime *)a2;
      if (!CMTimeRangeContainsTime(&range, &time))
        return FigSignalErrorAt();
    }
    MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
    v13 = 152;
    if ((*((_DWORD *)a2 + 3) & 1) == 0)
      v13 = 160;
    v14 = *(const __CFArray **)(a1 + v13);
    value = *a2;
    v31 = *((_QWORD *)a2 + 2);
    LODWORD(v32) = a3;
    Count = CFArrayGetCount(v14);
    v37.location = 0;
    v37.length = Count;
    v16 = CFArrayBSearchValues(v14, v37, &value, (CFComparatorFunction)vtMultiPassLocationCompareTimeStampAndIndex, 0);
    if (v16 >= Count)
    {
      ValueAtIndex = 0;
      v17 = Count;
      if (theData)
      {
LABEL_24:
        Length = CFDataGetLength(theData);
        v21 = Length;
        idx = v17;
        if (ValueAtIndex && ValueAtIndex[5] >= Length)
        {
          v23 = ValueAtIndex[4];
          v24 = *(_QWORD *)(a1 + 72);
        }
        else
        {
          if (!*(_QWORD *)(a1 + 80))
          {
            MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
            *(_OWORD *)&range.start.value = xmmword_1928E2E40;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
            v22 = FigFileForkWrite();
            if ((_DWORD)v22)
            {
              v11 = v22;
              MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
              goto LABEL_40;
            }
            *(_QWORD *)(a1 + 72) += 16;
            MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
          }
          v23 = *(_QWORD *)(a1 + 72);
          v24 = v23 + v21;
        }
        CFDataGetBytePtr(theData);
        v25 = FigFileForkWrite();
        if ((_DWORD)v25)
        {
          v11 = v25;
          goto LABEL_40;
        }
        *(_QWORD *)(a1 + 72) = v24;
        if (ValueAtIndex)
        {
          v11 = 0;
          ValueAtIndex[4] = v23;
          ValueAtIndex[5] = v21;
LABEL_40:
          MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
          return v11;
        }
        v26 = malloc_type_malloc(0x30uLL, 0x10000400B536EFBuLL);
        if (!v26)
        {
          v11 = 4294954392;
          goto LABEL_40;
        }
        *v26 = *(_QWORD *)a2;
        v26[2] = 0;
        v26[1] = *((_QWORD *)a2 + 1);
        *((_DWORD *)v26 + 6) = a3;
        v26[4] = v23;
        v26[5] = v21;
        CFArrayInsertValueAtIndex(v14, idx, v26);
LABEL_39:
        v11 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      v17 = v16;
      ValueAtIndex = CFArrayGetValueAtIndex(v14, v16);
      v19 = *(_OWORD *)ValueAtIndex;
      range.start.epoch = ValueAtIndex[2];
      *(_OWORD *)&range.start.value = v19;
      time = *(CMTime *)a2;
      if (CMTimeCompare(&range.start, &time) || *((_DWORD *)ValueAtIndex + 6) != a3)
        ValueAtIndex = 0;
      if (theData)
        goto LABEL_24;
    }
    if (ValueAtIndex)
      CFArrayRemoveValueAtIndex(v14, v17);
    goto LABEL_39;
  }
  if ((v8 & 1) == 0)
    goto LABEL_8;
  return FigSignalErrorAt();
}

uint64_t vtMultiPassLocationCompareTimeStampAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 v8;
  CMTime v9;
  CMTime time1;

  time1 = *(CMTime *)a1;
  v9 = *(CMTime *)a2;
  LODWORD(result) = CMTimeCompare(&time1, &v9);
  if ((_DWORD)result)
    return (int)result;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = v5 < v6;
  v8 = v5 > v6;
  if (v7)
    return -1;
  else
    return v8;
}

uint64_t VTMultiPassStorageGetTimeStamp(uint64_t a1, __int128 *a2, const void *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  CFIndex Count;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  _QWORD *ValueAtIndex;
  uint64_t v18;
  __int128 v20;
  CFIndex v21;
  _QWORD *v22;
  __int128 v23;
  CFIndex v25;
  CFIndex v26;
  __int128 v27;
  uint64_t v28;
  CMTime v29;
  CMTimeRange range;
  __int128 value;
  __int128 v32;
  __int128 v33;
  CFRange v34;

  if (!a1 || !a3 || !a4 || *(_BYTE *)(a1 + 24))
    return FigSignalErrorAt();
  v8 = *((_DWORD *)a2 + 3);
  if ((v8 & 0x1D) == 1)
  {
    if ((v8 & 1) != 0 && *((_QWORD *)a2 + 2))
      return FigSignalErrorAt();
LABEL_10:
    v32 = 0u;
    v33 = 0u;
    value = 0u;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      *(_OWORD *)&range.start.value = *a2;
      range.start.epoch = *((_QWORD *)a2 + 2);
      return VTMultiPassStorageRemote_GetTimeStamp(v9, (__int128 *)&range.start.value, (uint64_t)a3, a4);
    }
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 152));
    if ((*(_BYTE *)(a1 + 116) & 1) != 0
      && (*(_BYTE *)(a1 + 140) & 1) != 0
      && !*(_QWORD *)(a1 + 144)
      && (*(_QWORD *)(a1 + 128) & 0x8000000000000000) == 0
      && (*((_BYTE *)a2 + 12) & 1) != 0)
    {
      v20 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&range.start.epoch = v20;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 136);
      v29 = *(CMTime *)a2;
      if (!CMTimeRangeContainsTime(&range, &v29))
        return FigSignalErrorAt();
    }
    if (!Count)
    {
      v11 = 0;
      v15 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(v15 + 16);
      return v11;
    }
    MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
    if (CFEqual(a3, CFSTR("GetCurrentTimeStamp")))
    {
      v11 = 0;
      v13 = *a2;
      v14 = *((_QWORD *)a2 + 2);
LABEL_19:
      *(_QWORD *)(a4 + 16) = v14;
      *(_OWORD *)a4 = v13;
LABEL_28:
      MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
      return v11;
    }
    if (CFEqual(a3, CFSTR("GetFirstTimeStamp")) || CFEqual(a3, CFSTR("GetLastTimeStamp")))
    {
      if (CFEqual(a3, CFSTR("GetFirstTimeStamp")))
        v16 = 0;
      else
        v16 = Count - 1;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v16);
      v11 = 0;
      v18 = ValueAtIndex[2];
      *(_OWORD *)a4 = *(_OWORD *)ValueAtIndex;
      goto LABEL_27;
    }
    if (!CFEqual(a3, CFSTR("GetPreviousTimeStamp")) && !CFEqual(a3, CFSTR("GetNextTimeStamp")))
    {
      v11 = FigSignalErrorAt();
      goto LABEL_28;
    }
    value = *a2;
    *(_QWORD *)&v32 = *((_QWORD *)a2 + 2);
    v34.location = 0;
    v34.length = Count;
    v21 = CFArrayBSearchValues(*(CFArrayRef *)(a1 + 152), v34, &value, (CFComparatorFunction)vtMultiPassLocationCompareTimeStampOnly, 0);
    if (v21 == CFArrayGetCount(*(CFArrayRef *)(a1 + 152)))
      v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 152)) - 1;
    if (CFEqual(a3, CFSTR("GetPreviousTimeStamp")))
    {
      if ((v21 & 0x8000000000000000) == 0)
      {
        while (1)
        {
          v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v21);
          v23 = *(_OWORD *)v22;
          range.start.epoch = v22[2];
          *(_OWORD *)&range.start.value = v23;
          v29 = *(CMTime *)a2;
          if (CMTimeCompare(&range.start, &v29) < 0)
            break;
          if (v21-- < 1)
            goto LABEL_50;
        }
LABEL_51:
        v11 = 0;
        v13 = *(_OWORD *)v22;
        v14 = v22[2];
        goto LABEL_19;
      }
    }
    else
    {
      v25 = CFArrayGetCount(*(CFArrayRef *)(a1 + 152));
      if (Count >= v25)
        v26 = v25;
      else
        v26 = Count;
      if (v21 < v26)
      {
        do
        {
          v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v21);
          v27 = *(_OWORD *)v22;
          range.start.epoch = v22[2];
          *(_OWORD *)&range.start.value = v27;
          v29 = *(CMTime *)a2;
          if (CMTimeCompare(&range.start, &v29) >= 1)
            goto LABEL_51;
        }
        while (v26 != ++v21);
      }
    }
LABEL_50:
    v11 = 0;
    v28 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
    v18 = *(_QWORD *)(v28 + 16);
LABEL_27:
    *(_QWORD *)(a4 + 16) = v18;
    goto LABEL_28;
  }
  if ((v8 & 1) == 0)
    goto LABEL_10;
  return FigSignalErrorAt();
}

uint64_t vtMultiPassLocationCompareTimeStampOnly(CMTime *a1, CMTime *a2)
{
  CMTime v3;
  CMTime time1;

  time1 = *a1;
  v3 = *a2;
  return CMTimeCompare(&time1, &v3);
}

uint64_t VTMultiPassStorageGetTimeStampAndDuration(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t TimeStamp;
  uint64_t v12;
  CMTimeEpoch epoch;
  CMTimeEpoch v14;
  __int128 v15;
  __int128 v16;
  CMTime *p_lhs;
  CMTime *p_rhs;
  __int128 v19;
  CMTime start;
  CMTime v21;
  CMTimeRange range;
  CMTime v23;
  CMTime rhs;
  CMTime lhs;
  CMTime v26;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    *(_OWORD *)&range.start.value = *(_OWORD *)a2;
    range.start.epoch = *(_QWORD *)(a2 + 16);
    return VTMultiPassStorageRemote_GetTimeStampAndDuration(v8, (__int128 *)&range.start.value, (uint64_t)a3, a4, a5);
  }
  *(_OWORD *)&range.start.value = *(_OWORD *)a2;
  range.start.epoch = *(_QWORD *)(a2 + 16);
  TimeStamp = VTMultiPassStorageGetTimeStamp(a1, (__int128 *)&range.start.value, a3, a4);
  v9 = TimeStamp;
  if (a5 && !(_DWORD)TimeStamp)
  {
    if ((*(_BYTE *)(a4 + 12) & 1) == 0)
    {
      v9 = 0;
      v12 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)a5 = *MEMORY[0x1E0CA2E18];
      epoch = *(_QWORD *)(v12 + 16);
      goto LABEL_18;
    }
    v19 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v26.value = *MEMORY[0x1E0CA2E18];
    v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v26.epoch = v14;
    *(_OWORD *)&range.start.value = *(_OWORD *)a4;
    range.start.epoch = *(_QWORD *)(a4 + 16);
    if (VTMultiPassStorageGetTimeStamp(a1, (__int128 *)&range.start.value, CFSTR("GetNextTimeStamp"), (uint64_t)&v26))
    {
LABEL_9:
      *(_OWORD *)&range.start.value = v19;
      range.start.epoch = v14;
      lhs = *(CMTime *)a4;
      v9 = VTMultiPassStorageGetTimeStamp(a1, (__int128 *)&lhs.value, CFSTR("GetPreviousTimeStamp"), (uint64_t)&range);
      if ((_DWORD)v9 || (range.start.flags & 1) == 0)
      {
        *(_OWORD *)a5 = v19;
        *(_QWORD *)(a5 + 16) = v14;
        return v9;
      }
      rhs = *(CMTime *)a4;
      start = range.start;
      CMTimeSubtract(&lhs, &rhs, &start);
      *(_OWORD *)a5 = *(_OWORD *)&lhs.value;
      epoch = lhs.epoch;
LABEL_18:
      *(_QWORD *)(a5 + 16) = epoch;
      return v9;
    }
    if ((v26.flags & 1) != 0)
    {
      lhs = v26;
      rhs = *(CMTime *)a4;
      p_lhs = &lhs;
      p_rhs = &rhs;
    }
    else
    {
      v15 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&range.start.epoch = v15;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 136);
      CMTimeRangeGetEnd(&v23, &range);
      if ((v23.flags & 0x1D) != 1)
        goto LABEL_9;
      v16 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&range.start.epoch = v16;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 136);
      CMTimeRangeGetEnd(&v21, &range);
      lhs = *(CMTime *)a4;
      p_lhs = &v21;
      p_rhs = &lhs;
    }
    CMTimeSubtract(&range.start, p_lhs, p_rhs);
    v9 = 0;
    *(_OWORD *)a5 = *(_OWORD *)&range.start.value;
    epoch = range.start.epoch;
    goto LABEL_18;
  }
  return v9;
}

uint64_t VTMultiPassStorageCopyDataAtTimeStamp(uint64_t a1, __int128 *a2, int a3, __CFData **a4)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  __CFData *v17;
  _QWORD *ValueAtIndex;
  __int128 v19;
  const __CFAllocator *v20;
  __CFData *Mutable;
  uint64_t v22;
  CMTime v24;
  CMTimeRange range;
  __int128 value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFRange v31;

  if (!a1 || *(_BYTE *)(a1 + 24))
    return FigSignalErrorAt();
  v8 = *((_DWORD *)a2 + 3);
  if ((v8 & 0x1D) == 1)
  {
    if ((v8 & 1) != 0 && *((_QWORD *)a2 + 2))
      return FigSignalErrorAt();
LABEL_8:
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      *(_OWORD *)&range.start.value = *a2;
      range.start.epoch = *((_QWORD *)a2 + 2);
      return VTMultiPassStorageRemote_CopyDataAtTimeStamp(v9, (__int128 *)&range.start.value, a3, a4);
    }
    if ((*(_BYTE *)(a1 + 116) & 1) != 0
      && (*(_BYTE *)(a1 + 140) & 1) != 0
      && !*(_QWORD *)(a1 + 144)
      && (v8 & 1) != 0
      && (*(_QWORD *)(a1 + 128) & 0x8000000000000000) == 0)
    {
      v12 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&range.start.epoch = v12;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 136);
      v24 = *(CMTime *)a2;
      if (!CMTimeRangeContainsTime(&range, &v24))
        return FigSignalErrorAt();
    }
    MEMORY[0x194027ED8](*(_QWORD *)(a1 + 32));
    v13 = 152;
    if ((*((_DWORD *)a2 + 3) & 1) == 0)
      v13 = 160;
    v14 = *(const __CFArray **)(a1 + v13);
    value = *a2;
    v27 = *((_QWORD *)a2 + 2);
    LODWORD(v28) = a3;
    Count = CFArrayGetCount(v14);
    v31.location = 0;
    v31.length = Count;
    v16 = CFArrayBSearchValues(v14, v31, &value, (CFComparatorFunction)vtMultiPassLocationCompareTimeStampAndIndex, 0);
    v17 = 0;
    if (v16 < Count)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v14, v16);
      v19 = *(_OWORD *)ValueAtIndex;
      range.start.epoch = ValueAtIndex[2];
      *(_OWORD *)&range.start.value = v19;
      v24 = *(CMTime *)a2;
      if (CMTimeCompare(&range.start, &v24) || *((_DWORD *)ValueAtIndex + 6) != a3)
      {
        v17 = 0;
      }
      else
      {
        v20 = CFGetAllocator((CFTypeRef)a1);
        Mutable = CFDataCreateMutable(v20, ValueAtIndex[5]);
        if (!Mutable)
        {
          v11 = 4294954392;
          goto LABEL_27;
        }
        v17 = Mutable;
        CFDataSetLength(Mutable, ValueAtIndex[5]);
        CFDataGetMutableBytePtr(v17);
        v22 = FigFileForkRead();
        if ((_DWORD)v22)
        {
          v11 = v22;
          MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
          CFRelease(v17);
          return v11;
        }
      }
    }
    v11 = 0;
    *a4 = v17;
LABEL_27:
    MEMORY[0x194027EE4](*(_QWORD *)(a1 + 32));
    return v11;
  }
  if ((v8 & 1) == 0)
    goto LABEL_8;
  return FigSignalErrorAt();
}

OSStatus VTMultiPassStorageClose(VTMultiPassStorageRef multiPassStorage)
{
  uint64_t v2;
  char *v3;
  const __CFAllocator *v4;
  const __CFData *ExternalRepresentation;
  CFIndex Length;
  uint64_t v7;
  CFIndex Count;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  malloc_type_id_t v12;
  CFIndex v13;
  const __CFArray *v14;
  unint64_t v15;
  CFIndex v16;
  unint64_t v17;
  char *v18;
  CFIndex v19;
  _DWORD *ValueAtIndex;
  const void *v21;
  uint64_t v23;
  const __CFData *v24;

  if (!multiPassStorage)
    return FigSignalErrorAt();
  if (*((_BYTE *)multiPassStorage + 24))
    return -12214;
  v2 = *((_QWORD *)multiPassStorage + 8);
  if (!*((_BYTE *)multiPassStorage + 48))
  {
    if (!v2)
    {
LABEL_45:
      FigFileForkClose();
      goto LABEL_46;
    }
    MEMORY[0x194027ED8](*((_QWORD *)multiPassStorage + 4));
    if (*((_QWORD *)multiPassStorage + 10) && FigFileForkWrite())
    {
      MEMORY[0x194027EE4](*((_QWORD *)multiPassStorage + 4));
      v3 = 0;
LABEL_44:
      free(v3);
      goto LABEL_45;
    }
    *((_QWORD *)multiPassStorage + 10) = 0;
    if (*((_QWORD *)multiPassStorage + 5))
    {
      v4 = CFGetAllocator(multiPassStorage);
      ExternalRepresentation = CFStringCreateExternalRepresentation(v4, *((CFStringRef *)multiPassStorage + 5), 0x8000100u, 0);
      Length = CFDataGetLength(ExternalRepresentation);
    }
    else
    {
      ExternalRepresentation = 0;
      Length = 0;
    }
    if (FigFileForkWrite())
      goto LABEL_52;
    v7 = *((_QWORD *)multiPassStorage + 9);
    *((_QWORD *)multiPassStorage + 12) = v7;
    *((_QWORD *)multiPassStorage + 9) = v7 + 12;
    if (ExternalRepresentation)
    {
      CFDataGetBytePtr(ExternalRepresentation);
      if (FigFileForkWrite())
        goto LABEL_52;
      *((_QWORD *)multiPassStorage + 9) += Length;
    }
    Count = CFArrayGetCount(*((CFArrayRef *)multiPassStorage + 19));
    v9 = CFArrayGetCount(*((CFArrayRef *)multiPassStorage + 20)) + Count;
    if (!FigFileForkWrite())
    {
      v23 = *((_QWORD *)multiPassStorage + 9);
      *((_QWORD *)multiPassStorage + 9) = v23 + 16;
      if ((unint64_t)v9 >= 0x200)
        v10 = 512;
      else
        v10 = v9;
      if (v10)
      {
        v11 = 36 * v10;
        v12 = 1556728742;
      }
      else
      {
        v11 = 0;
        v12 = 1270757447;
      }
      v3 = (char *)malloc_type_malloc(v11, v12);
      v24 = ExternalRepresentation;
      if (v3)
      {
        if (v9 < 1)
        {
LABEL_38:
          if (!*((_QWORD *)multiPassStorage + 11) || !FigFileForkWrite())
            *((_QWORD *)multiPassStorage + 11) = v23;
        }
        else
        {
          v13 = 0;
          v14 = (const __CFArray *)*((_QWORD *)multiPassStorage + 19);
          while (1)
          {
            if (v9 - v13 >= v10)
              v15 = v10;
            else
              v15 = v9 - v13;
            if (v15)
            {
              v16 = v15 + v13;
              v17 = v15;
              v18 = v3;
              do
              {
                if (v13 >= CFArrayGetCount(*((CFArrayRef *)multiPassStorage + 19)))
                {
                  v19 = CFArrayGetCount(*((CFArrayRef *)multiPassStorage + 19));
                  v14 = (const __CFArray *)*((_QWORD *)multiPassStorage + 20);
                }
                else
                {
                  v19 = 0;
                }
                ValueAtIndex = CFArrayGetValueAtIndex(v14, v13 - v19);
                *(_QWORD *)v18 = *(_QWORD *)ValueAtIndex;
                *((_DWORD *)v18 + 2) = ValueAtIndex[2];
                *((_DWORD *)v18 + 3) = ValueAtIndex[3];
                *((_DWORD *)v18 + 4) = ValueAtIndex[6];
                *(_QWORD *)(v18 + 20) = *((_QWORD *)ValueAtIndex + 4);
                *(_QWORD *)(v18 + 28) = *((_QWORD *)ValueAtIndex + 5);
                ++v13;
                v18 += 36;
                --v17;
              }
              while (v17);
              v13 = v16;
            }
            if (FigFileForkWrite())
              break;
            *((_QWORD *)multiPassStorage + 9) += 36 * v15;
            if (v13 >= v9)
              goto LABEL_38;
          }
        }
      }
      ExternalRepresentation = v24;
      goto LABEL_42;
    }
LABEL_52:
    v3 = 0;
LABEL_42:
    MEMORY[0x194027EE4](*((_QWORD *)multiPassStorage + 4));
    if (ExternalRepresentation)
      CFRelease(ExternalRepresentation);
    goto LABEL_44;
  }
  FigFileForkClose();
  FigFileDeleteFile();
LABEL_46:
  *((_QWORD *)multiPassStorage + 8) = 0;
  v21 = (const void *)*((_QWORD *)multiPassStorage + 7);
  if (v21)
  {
    CFRelease(v21);
    *((_QWORD *)multiPassStorage + 7) = 0;
  }
  VTMultiPassStorageInvalidate((uint64_t)multiPassStorage);
  return 0;
}

uint64_t VTMultiPassStorageWriteSegment(const __CFURL *a1, uint64_t a2, const __CFURL *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  CMTimeRange v19;
  __int128 v20;
  __int128 v21;
  CFTypeRef cf;
  VTMultiPassStorageRef multiPassStorageOut;

  multiPassStorageOut = 0;
  cf = 0;
  v20 = 0u;
  v21 = 0u;
  if (a1
    && (*(_BYTE *)(a2 + 12) & 1) != 0
    && (*(_BYTE *)(a2 + 36) & 1) != 0
    && !*(_QWORD *)(a2 + 40)
    && (*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("DoNotDelete"), (const void *)*MEMORY[0x1E0C9AE50]);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v19.start.value = *(_OWORD *)a2;
    *(_OWORD *)&v19.start.epoch = v14;
    *(_OWORD *)&v19.duration.timescale = *(_OWORD *)(a2 + 32);
    v15 = VTMultiPassStorageCreate(v12, a1, &v19, Mutable, &multiPassStorageOut);
    if (!(_DWORD)v15)
    {
      v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v19.start.value = *(_OWORD *)a2;
      *(_OWORD *)&v19.start.epoch = v16;
      *(_OWORD *)&v19.duration.timescale = *(_OWORD *)(a2 + 32);
      v15 = VTMultiPassStorageCreate(v12, a3, &v19, Mutable, (VTMultiPassStorageRef *)&cf);
      if (!(_DWORD)v15)
      {
        *(_QWORD *)&v21 = a4;
        *((_QWORD *)&v21 + 1) = a5;
        v17 = a5 ? &v20 : 0;
        v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&v19.start.value = *(_OWORD *)a2;
        *(_OWORD *)&v19.start.epoch = v18;
        *(_OWORD *)&v19.duration.timescale = *(_OWORD *)(a2 + 32);
        v20 = xmmword_1928E2E50;
        v15 = vtMultiPassStorageCopyStorageToMultiPassStorage((uint64_t)multiPassStorageOut, (uint64_t)cf, (uint64_t)&v19, (uint64_t)v17);
        if (!(_DWORD)v15)
        {
          v15 = VTMultiPassStorageClose((VTMultiPassStorageRef)cf);
          if (!(_DWORD)v15)
            v15 = VTMultiPassStorageClose(multiPassStorageOut);
        }
      }
    }
    v6 = v15;
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  if (multiPassStorageOut)
    CFRelease(multiPassStorageOut);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t vtMultiPassStorageCopyStorageToMultiPassStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v8;
  uint64_t v9;
  CMTimeScale v10;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  __int128 v13;
  CFIndex Count;
  uint64_t UpTimeNanoseconds;
  _DWORD *ValueAtIndex;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  _QWORD *v19;
  __int128 v20;
  CFIndex v21;
  __int128 *v22;
  __int128 v23;
  CFIndex v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double Seconds;
  float v30;
  __int128 v31;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  const void *v36;
  int v37;
  int v38;
  const void *value;
  int v40;
  int v41;
  uint64_t v42;
  float v43;
  CMTime v45;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CFTypeRef cf;
  CMTime v50;
  CMTimeRange range;
  CMTime v52;
  CMTimeValue v53;
  CMTimeScale v54;
  CMTimeValue v55;
  CMTimeScale v56;
  uint64_t v57;
  CFRange v58;

  v57 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || *(_BYTE *)(a1 + 24) || *(_BYTE *)(a2 + 24))
    return FigSignalErrorAt();
  v8 = VTMultiPassStorageCopyIdentifier(a1);
  v9 = VTMultiPassStorageSetIdentifier(a2, v8);
  if (v8)
    CFRelease(v8);
  if (!(_DWORD)v9)
  {
    range.start.value = *(_QWORD *)a3;
    v10 = *(_DWORD *)(a3 + 8);
    v11 = *(_DWORD *)(a3 + 12);
    v53 = *(_QWORD *)a3;
    v54 = *(_DWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 16);
    memset(&v52, 0, sizeof(v52));
    range.start.timescale = v10;
    range.start.flags = v11;
    range.start.epoch = v12;
    v13 = *(_OWORD *)(a3 + 24);
    range.duration.epoch = *(_QWORD *)(a3 + 40);
    *(_OWORD *)&range.duration.value = v13;
    CMTimeRangeGetEnd(&v52, &range);
    v50 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    memset(&range.duration, 0, sizeof(range.duration));
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 152));
    cf = 0;
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), 0);
    v55 = *(_QWORD *)ValueAtIndex;
    v17 = ValueAtIndex[3];
    v56 = ValueAtIndex[2];
    v18 = *((_QWORD *)ValueAtIndex + 2);
    v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), Count - 1);
    if ((v11 & 1) == 0)
    {
      v53 = v55;
      v54 = v56;
      v11 = v17;
      v12 = v18;
    }
    if ((v52.flags & 1) == 0)
    {
      v20 = *(_OWORD *)v19;
      v52.epoch = v19[2];
      *(_OWORD *)&v52.value = v20;
    }
    lhs = v52;
    rhs.value = v53;
    rhs.timescale = v54;
    rhs.flags = v11;
    rhs.epoch = v12;
    CMTimeSubtract(&v50, &lhs, &rhs);
    range.start.value = v53;
    range.start.timescale = v54;
    range.start.flags = v11;
    range.start.epoch = v12;
    v58.location = 0;
    v58.length = Count;
    v21 = CFArrayBSearchValues(*(CFArrayRef *)(a1 + 152), v58, &range, (CFComparatorFunction)vtMultiPassLocationCompareTimeStampOnly, 0);
    v22 = (__int128 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v21);
    v23 = *v22;
    lhs.epoch = *((_QWORD *)v22 + 2);
    *(_OWORD *)&lhs.value = v23;
    rhs = v52;
    if (CMTimeCompare(&lhs, &rhs) <= 0 && v21 < Count)
    {
      v24 = v21 + 1;
      do
      {
        memset(&lhs, 0, sizeof(lhs));
        v25 = *v22;
        lhs.epoch = *((_QWORD *)v22 + 2);
        *(_OWORD *)&lhs.value = v25;
        v26 = *((_DWORD *)v22 + 6);
        *(_OWORD *)&rhs.value = v25;
        rhs.epoch = lhs.epoch;
        if (VTMultiPassStorageCopyDataAtTimeStamp(a1, (__int128 *)&rhs.value, v26, (__CFData **)&cf))
          break;
        rhs = lhs;
        if (VTMultiPassStorageSetDataAtTimeStamp(a2, (__int128 *)&rhs.value, v26, (CFDataRef)cf))
          break;
        if (v24 < Count)
          v22 = (__int128 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v24);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (a4)
        {
          v27 = FigGetUpTimeNanoseconds();
          if ((unint64_t)(v27 - UpTimeNanoseconds) >= 0x3B9ACA01)
          {
            v28 = v27;
            rhs = lhs;
            v45.value = v53;
            v45.timescale = v54;
            v45.flags = v11;
            v45.epoch = v12;
            CMTimeSubtract(&time, &rhs, &v45);
            Seconds = CMTimeGetSeconds(&time);
            rhs = v50;
            v30 = (Seconds / CMTimeGetSeconds(&rhs) + (double)*(uint64_t *)a4) / (double)*(uint64_t *)(a4 + 8);
            UpTimeNanoseconds = v28;
            if ((*(unsigned int (**)(_QWORD, float))(a4 + 24))(*(_QWORD *)(a4 + 16), v30))
              break;
          }
        }
        v31 = *v22;
        lhs.epoch = *((_QWORD *)v22 + 2);
        *(_OWORD *)&lhs.value = v31;
        rhs = v52;
        if (CMTimeCompare(&lhs, &rhs) > 0)
          break;
      }
      while (v24++ < Count);
    }
    if (cf)
      CFRelease(cf);
    v33 = CFArrayGetCount(*(CFArrayRef *)(a1 + 160));
    v52.value = 0;
    if (v33 >= 1)
    {
      v34 = v33;
      v35 = 0;
      while (1)
      {
        v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 160), v35);
        v37 = *((_DWORD *)v36 + 6);
        *(_OWORD *)&range.start.value = *(_OWORD *)v36;
        range.start.epoch = *((_QWORD *)v36 + 2);
        v38 = VTMultiPassStorageCopyDataAtTimeStamp(a1, (__int128 *)&range.start.value, v37, (__CFData **)&v52);
        value = (const void *)v52.value;
        if (v38)
          break;
        v40 = *((_DWORD *)v36 + 6);
        *(_OWORD *)&range.start.value = *(_OWORD *)v36;
        range.start.epoch = *((_QWORD *)v36 + 2);
        v41 = VTMultiPassStorageSetDataAtTimeStamp(a2, (__int128 *)&range.start.value, v40, (CFDataRef)v52.value);
        value = (const void *)v52.value;
        if (v41)
          break;
        if (v52.value)
        {
          CFRelease((CFTypeRef)v52.value);
          v52.value = 0;
        }
        if (v34 == ++v35)
          goto LABEL_35;
      }
      if (value)
        CFRelease(value);
    }
LABEL_35:
    if (a4)
    {
      v42 = *(_QWORD *)a4 + 1;
      *(_QWORD *)a4 = v42;
      v43 = (double)v42 / (double)*(uint64_t *)(a4 + 8);
      return (*(uint64_t (**)(_QWORD, float))(a4 + 24))(*(_QWORD *)(a4 + 16), v43);
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t VTMultiPassStorageWriteMerged(const __CFArray *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  CFIndex Count;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  uint64_t v11;
  CFIndex v12;
  __int128 *v13;
  CMTimeRange *v14;
  const __CFURL *ValueAtIndex;
  uint64_t v16;
  VTMultiPassStorageRef multiPassStorage;
  __int128 v19;
  __int128 v20;
  VTMultiPassStorageRef multiPassStorageOut;

  multiPassStorageOut = 0;
  v19 = 0u;
  v20 = 0u;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("DoNotDelete"), (const void *)*MEMORY[0x1E0C9AE50]);
    v11 = VTMultiPassStorageCreate(v9, a2, MEMORY[0x1E0CA2E40], Mutable, &multiPassStorageOut);
    if (!(_DWORD)v11)
    {
      *(_QWORD *)&v19 = 0;
      *((_QWORD *)&v19 + 1) = Count;
      *(_QWORD *)&v20 = a3;
      *((_QWORD *)&v20 + 1) = a4;
      if (Count < 1)
      {
LABEL_13:
        VTMultiPassStorageClose(multiPassStorageOut);
        v16 = 0;
        goto LABEL_14;
      }
      v12 = 0;
      if (a4)
        v13 = &v19;
      else
        v13 = 0;
      v14 = (CMTimeRange *)MEMORY[0x1E0CA2E40];
      while (1)
      {
        multiPassStorage = 0;
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, v12);
        v11 = VTMultiPassStorageCreate(v9, ValueAtIndex, v14, Mutable, &multiPassStorage);
        if ((_DWORD)v11)
          break;
        v16 = vtMultiPassStorageCopyStorageToMultiPassStorage((uint64_t)multiPassStorage, (uint64_t)multiPassStorageOut, (uint64_t)v14, (uint64_t)v13);
        VTMultiPassStorageClose(multiPassStorage);
        if (multiPassStorage)
          CFRelease(multiPassStorage);
        if ((_DWORD)v16)
          goto LABEL_14;
        if (Count == ++v12)
          goto LABEL_13;
      }
    }
    v16 = v11;
  }
  else
  {
    v16 = FigSignalErrorAt();
    Mutable = 0;
  }
LABEL_14:
  if (multiPassStorageOut)
    CFRelease(multiPassStorageOut);
  if (Mutable)
    CFRelease(Mutable);
  return v16;
}

double vtMultiPassStorageInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtMultiPassStorageFinalize(OpaqueVTMultiPassStorage *a1)
{
  const void *v2;

  VTMultiPassStorageClose(a1);
  v2 = (const void *)*((_QWORD *)a1 + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)a1 + 2) = 0;
  }
}

CFTypeRef vtMultiPassStorageCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTMultiPassStorage]"));
}

__CFString *vtMultiPassStorageCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex Count;
  uint64_t v10;
  CFIndex v11;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator((CFTypeRef)a1);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 152);
  if (v8)
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 152));
  else
    Count = 0;
  v10 = *(_QWORD *)(a1 + 160);
  if (v10)
    v11 = CFArrayGetCount(*(CFArrayRef *)(a1 + 160));
  else
    v11 = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTMultiPassStorage %p [%p]>{invalid:%d, delete:%d, url:%@, locations:%p (%ld)globals:%p (%ld)remote:%p}"), a1, v4, v5, v6, v7, v8, Count, v10, v11, *(_QWORD *)(a1 + 16));
  return Mutable;
}

uint64_t VTDecompressionSessionRemoteClient_Create(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, int a9, char *src, _DWORD *a11, _QWORD *a12, _QWORD *a13, int *a14)
{
  int v15;
  mach_msg_size_t v16;
  mach_port_t special_reply_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mach_msg_header_t rcv_name;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  _OWORD v36[33];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  memset(v36, 0, 400);
  v34 = 0;
  v25 = 0x13000000000000;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v23 = 4;
  v24 = a2;
  v26 = a4;
  LODWORD(v27) = 16777472;
  HIDWORD(v27) = a5;
  v28 = a6;
  v29 = 16777472;
  v30 = a7;
  v31 = a8;
  v32 = 16777472;
  v33 = a9;
  v34 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v35 = a3;
  *((_QWORD *)&v35 + 1) = __PAIR64__(a7, a5);
  LODWORD(v36[0]) = a9;
  if (MEMORY[0x1E0C84128])
    v15 = mig_strncpy_zerofill((char *)v36 + 12, src, 512);
  else
    v15 = mig_strncpy((char *)v36 + 12, src, 512);
  DWORD1(v36[0]) = 0;
  DWORD2(v36[0]) = v15;
  v16 = ((v15 + 3) & 0xFFFFFFFC) + 124;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x471800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v18 = mach_msg(&rcv_name, 3162387, v16, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v19 = v18;
  if ((v18 - 268435458) > 0xE || ((1 << (v18 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v18)
    {
      if (rcv_name.msgh_id == 71)
      {
        v19 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18300)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v19 = 4294966996;
            if ((_DWORD)v25)
            {
              if (rcv_name.msgh_remote_port)
                v19 = 4294966996;
              else
                v19 = v25;
            }
          }
          else
          {
            v19 = 4294966996;
          }
          goto LABEL_29;
        }
        v19 = 4294966996;
        if (v23 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && HIWORD(v25) << 16 == 1114112)
        {
          v19 = 0;
          *a11 = v24;
          v20 = v28;
          *a12 = v27;
          *a13 = v20;
          *a14 = v29;
          return v19;
        }
      }
      else
      {
        v19 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v19;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v19 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v19;
}

uint64_t VTDecompressionSessionRemoteClient_Invalidate(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x471900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18301)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v4;
}

uint64_t VTDecompressionSessionRemoteClient_Destroy(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x471A00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18302)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v4;
}

uint64_t VTDecompressionSessionRemoteClient_CopySupportedPropertyDictionary(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _BYTE msg[36];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x471B00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18303)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v10 = 4294966996;
              else
                v10 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v10 = 4294966996;
          }
          goto LABEL_30;
        }
        v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v15) == 1)
        {
          v12 = DWORD1(v15);
          if (DWORD1(v15) == (_DWORD)v16)
          {
            v10 = 0;
            *a2 = *(_QWORD *)&msg[28];
            *a3 = v12;
            *a4 = DWORD1(v16);
            return v10;
          }
        }
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v10;
}

uint64_t VTDecompressionSessionRemoteClient_CopySerializableProperties(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _BYTE msg[36];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x471C00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18304)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v10 = 4294966996;
              else
                v10 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v10 = 4294966996;
          }
          goto LABEL_30;
        }
        v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v15) == 1)
        {
          v12 = DWORD1(v15);
          if (DWORD1(v15) == (_DWORD)v16)
          {
            v10 = 0;
            *a2 = *(_QWORD *)&msg[28];
            *a3 = v12;
            *a4 = DWORD1(v16);
            return v10;
          }
        }
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v10;
}

uint64_t VTDecompressionSessionRemoteClient_CopyProperty(mach_port_name_t a1, const char *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v9;
  mach_msg_size_t v10;
  mach_port_name_t special_reply_port;
  uint64_t v12;
  uint64_t v13;
  int v14;
  mach_port_name_t rcv_name[4];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  *(_OWORD *)rcv_name = 0u;
  memset(v17, 0, sizeof(v17));
  *((_QWORD *)&v17[0] + 1) = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v9 = mig_strncpy_zerofill((char *)&v17[1] + 8, a2, 512);
  else
    v9 = mig_strncpy((char *)&v17[1] + 8, a2, 512);
  LODWORD(v17[1]) = 0;
  DWORD1(v17[1]) = v9;
  v10 = ((v9 + 3) & 0xFFFFFFFC) + 40;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v17[0] = 0x471D00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v12 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v10, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (DWORD1(v17[0]) == 71)
      {
        v13 = 4294966988;
      }
      else if (DWORD1(v17[0]) == 18305)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 36)
          {
            v13 = 4294966996;
            if (LODWORD(v17[1]))
            {
              if (rcv_name[2])
                v13 = 4294966996;
              else
                v13 = LODWORD(v17[1]);
            }
          }
          else
          {
            v13 = 4294966996;
          }
          goto LABEL_30;
        }
        v13 = 4294966996;
        if (DWORD2(v17[0]) == 1 && rcv_name[1] == 60 && !rcv_name[2] && BYTE7(v17[1]) == 1)
        {
          v14 = DWORD2(v17[1]);
          if (DWORD2(v17[1]) == DWORD1(v18))
          {
            v13 = 0;
            *a3 = *(_QWORD *)((char *)v17 + 12);
            *a4 = v14;
            *a5 = DWORD2(v18);
            return v13;
          }
        }
      }
      else
      {
        v13 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_30;
  }
  return v13;
}

uint64_t VTDecompressionSessionRemoteClient_SetProperty(mach_port_t a1, const char *a2, uint64_t a3, unsigned int a4, int *a5)
{
  int v8;
  uint64_t v9;
  mach_msg_size_t v10;
  mach_port_t special_reply_port;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  mach_msg_header_t rcv_name;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE v20[24];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)&v20[8] = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v17 = 1;
  v18 = a3;
  v19 = 16777472;
  *(_QWORD *)v20 = a4;
  *(_QWORD *)&v20[4] = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v8 = mig_strncpy_zerofill(&v20[20], a2, 512);
  else
    v8 = mig_strncpy(&v20[20], a2, 512);
  *(_DWORD *)&v20[12] = 0;
  *(_DWORD *)&v20[16] = v8;
  v9 = (v8 + 3) & 0xFFFFFFFC;
  v10 = v9 + 64;
  *(_DWORD *)&v20[v9 + 20] = a4;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x471E00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v12 = mach_msg(&rcv_name, 3162387, v10, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (rcv_name.msgh_id == 71)
      {
        v13 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18306)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 40)
          {
            if (!rcv_name.msgh_remote_port)
            {
              v13 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                *a5 = v19;
                return v13;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name.msgh_size == 36)
          {
            if (rcv_name.msgh_remote_port)
              v14 = 1;
            else
              v14 = HIDWORD(v18) == 0;
            if (v14)
              v13 = 4294966996;
            else
              v13 = HIDWORD(v18);
            goto LABEL_28;
          }
        }
        v13 = 4294966996;
      }
      else
      {
        v13 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&rcv_name);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_28;
  }
  return v13;
}

uint64_t VTDecompressionSessionRemoteClient_SetProperties(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  mach_port_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  mach_msg_header_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v14 = a2;
  v15 = 16777472;
  v16 = a3;
  v17 = *MEMORY[0x1E0C804E8];
  v18 = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v12.msgh_bits = 2147489043;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = special_reply_port;
  *(_QWORD *)&v12.msgh_voucher_port = 0x471F00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v12);
    special_reply_port = v12.msgh_local_port;
  }
  v7 = mach_msg(&v12, 3162387, 0x38u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v12.msgh_id == 71)
      {
        v8 = 4294966988;
      }
      else if (v12.msgh_id == 18307)
      {
        if ((v12.msgh_bits & 0x80000000) == 0)
        {
          if (v12.msgh_size == 40)
          {
            if (!v12.msgh_remote_port)
            {
              v8 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a4 = v15;
                return v8;
              }
              goto LABEL_28;
            }
          }
          else if (v12.msgh_size == 36)
          {
            if (v12.msgh_remote_port)
              v10 = 1;
            else
              v10 = HIDWORD(v14) == 0;
            if (v10)
              v8 = 4294966996;
            else
              v8 = HIDWORD(v14);
            goto LABEL_28;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v12);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v12.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v12.msgh_local_port);
    goto LABEL_28;
  }
  return v8;
}

uint64_t VTDecompressionSessionRemoteClient_DecodeFrame(int a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9)
{
  uint64_t v9;
  _BYTE msg[36];
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;

  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[28] = a2;
  v12 = 1245184;
  v13 = a3;
  v14 = 16777472;
  v15 = a4;
  v16 = a6;
  v17 = 16777472;
  v18 = a7;
  v19 = *MEMORY[0x1E0C804E8];
  v20 = a4;
  v21 = a5;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(_QWORD *)&msg[20] = 0x300004720;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v9 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x68u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v9 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v9;
}

uint64_t VTDecompressionSessionRemoteClient_DequeueNextPendingFrame(int a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _QWORD *a10, _DWORD *a11, _QWORD *a12, _DWORD *a13, _DWORD *a14, _QWORD *a15, _DWORD *a16, _QWORD *a17, _DWORD *a18, _DWORD *a19, _QWORD *a20,_DWORD *a21,_QWORD *a22,_DWORD *a23,_DWORD *a24,_QWORD *a25,_DWORD *a26,_QWORD *a27,_DWORD *a28,_DWORD *a29,_QWORD *a30,_DWORD *a31,_QWORD *a32,_DWORD *a33,uint64_t a34,uint64_t a35,_DWORD *a36,_DWORD *a37)
{
  mach_port_name_t special_reply_port;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE msg[36];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[3];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _DWORD v78[8];
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v84 = 0;
  v82 = 0u;
  v83 = 0u;
  memset(v81, 0, sizeof(v81));
  v79 = 0u;
  v80 = 0u;
  memset(v78, 0, sizeof(v78));
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  memset(v69, 0, sizeof(v69));
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  *(_DWORD *)&msg[4] = 0;
  *(_OWORD *)&msg[20] = 0u;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x472100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v46 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x19Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v47 = v46;
  if ((v46 - 268435458) > 0xE || ((1 << (v46 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v46)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v47 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18309)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v47 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v47 = 4294966996;
              else
                v47 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v47 = 4294966996;
          }
          goto LABEL_53;
        }
        v47 = 4294966996;
        if (*(_DWORD *)&msg[24] == 17
          && *(_DWORD *)&msg[4] == 404
          && !*(_DWORD *)&msg[8]
          && WORD1(v65) << 16 == 1114112
          && HIBYTE(v65) == 1
          && HIWORD(v66) << 16 == 1114112
          && BYTE11(v67) == 1
          && BYTE11(v68) == 1
          && WORD5(v69[0]) << 16 == 1114112
          && BYTE7(v69[1]) == 1
          && BYTE7(v69[2]) == 1
          && WORD3(v70) << 16 == 1114112
          && BYTE3(v71) == 1
          && BYTE3(v72) == 1
          && WORD1(v73) << 16 == 1114112
          && HIBYTE(v73) == 1
          && HIBYTE(v74) == 1
          && HIWORD(v75) << 16 == 1114112
          && BYTE11(v76) == 1
          && BYTE11(v77) == 1)
        {
          v48 = v66;
          if ((_DWORD)v66 == v78[7])
          {
            v49 = HIDWORD(v67);
            if (HIDWORD(v67) == (_DWORD)v79)
            {
              v50 = HIDWORD(v68);
              if (HIDWORD(v68) == DWORD1(v79))
              {
                v51 = DWORD2(v69[1]);
                if (DWORD2(v69[1]) == DWORD2(v79))
                {
                  v52 = DWORD2(v69[2]);
                  if (DWORD2(v69[2]) == HIDWORD(v79))
                  {
                    v53 = DWORD1(v71);
                    if (DWORD1(v71) == (_DWORD)v80)
                    {
                      v54 = DWORD1(v72);
                      if (DWORD1(v72) == DWORD1(v80))
                      {
                        v55 = v74;
                        if ((_DWORD)v74 == DWORD2(v80))
                        {
                          v56 = v75;
                          if ((_DWORD)v75 == HIDWORD(v80))
                          {
                            v57 = HIDWORD(v76);
                            if (HIDWORD(v76) == LODWORD(v81[0]))
                            {
                              v58 = HIDWORD(v77);
                              if (HIDWORD(v77) == HIDWORD(v81[0]))
                              {
                                v47 = 0;
                                v59 = DWORD1(v75);
                                *a2 = v78[2];
                                *a3 = *(_QWORD *)&v78[3];
                                *a4 = v78[5];
                                *a5 = v78[6];
                                *a6 = *(_DWORD *)&msg[28];
                                *a7 = *(_QWORD *)((char *)&v65 + 4);
                                *a8 = v48;
                                *a9 = DWORD1(v66);
                                *a10 = v67;
                                *a11 = v49;
                                *a12 = v68;
                                *a13 = v50;
                                *a14 = v69[0];
                                v60 = *(_QWORD *)((char *)&v69[1] + 12);
                                *a15 = *(_QWORD *)((char *)v69 + 12);
                                *a16 = v51;
                                *a17 = v60;
                                *a18 = v52;
                                v61 = DWORD2(v72);
                                *a19 = HIDWORD(v69[2]);
                                *a20 = *((_QWORD *)&v70 + 1);
                                *a21 = v53;
                                *a22 = *((_QWORD *)&v71 + 1);
                                *a23 = v54;
                                *a24 = v61;
                                v62 = *(_QWORD *)((char *)&v74 + 4);
                                *a25 = *(_QWORD *)((char *)&v73 + 4);
                                *a26 = v55;
                                *a27 = v62;
                                *a28 = v56;
                                *a29 = v59;
                                *a30 = v76;
                                *a31 = v57;
                                *a32 = v77;
                                *a33 = v58;
                                *(_OWORD *)a34 = *(_OWORD *)&v81[1];
                                *(_QWORD *)(a34 + 16) = v81[3];
                                *(_OWORD *)a35 = v82;
                                *(_QWORD *)(a35 + 16) = v83;
                                *a36 = DWORD2(v83);
                                *a37 = HIDWORD(v83);
                                return v47;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v47 = 4294966995;
      }
LABEL_53:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v47;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v47 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_53;
  }
  return v47;
}

uint64_t VTDecompressionSessionRemoteClient_FinishDelayedFrames(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x472200000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t VTDecompressionSessionRemoteClient_CanAcceptFormatDescription(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  mach_port_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  mach_msg_header_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v14 = a2;
  v15 = 16777472;
  v16 = a3;
  v17 = *MEMORY[0x1E0C804E8];
  v18 = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v12.msgh_bits = 2147489043;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = special_reply_port;
  *(_QWORD *)&v12.msgh_voucher_port = 0x472300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v12);
    special_reply_port = v12.msgh_local_port;
  }
  v7 = mach_msg(&v12, 3162387, 0x38u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v12.msgh_id == 71)
      {
        v8 = 4294966988;
      }
      else if (v12.msgh_id == 18311)
      {
        if ((v12.msgh_bits & 0x80000000) == 0)
        {
          if (v12.msgh_size == 40)
          {
            if (!v12.msgh_remote_port)
            {
              v8 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a4 = v15;
                return v8;
              }
              goto LABEL_28;
            }
          }
          else if (v12.msgh_size == 36)
          {
            if (v12.msgh_remote_port)
              v10 = 1;
            else
              v10 = HIDWORD(v14) == 0;
            if (v10)
              v8 = 4294966996;
            else
              v8 = HIDWORD(v14);
            goto LABEL_28;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v12);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v12.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v12.msgh_local_port);
    goto LABEL_28;
  }
  return v8;
}

uint64_t VTDecompressionSessionRemoteClient_CopyBlackPixelBuffer(int a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_name_t special_reply_port;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v16;
  int rcv_name;
  int rcv_name_4;
  mach_port_name_t rcv_name_8;
  _BYTE rcv_name_12[20];
  __int128 v21;
  _DWORD v22[7];

  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  *(_OWORD *)&rcv_name_12[4] = 0u;
  rcv_name = 0;
  special_reply_port = mig_get_special_reply_port();
  rcv_name_4 = a1;
  rcv_name_8 = special_reply_port;
  v16 = 5395;
  *(_QWORD *)rcv_name_12 = 0x472400000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v16);
    special_reply_port = rcv_name_8;
  }
  v11 = mach_msg((mach_msg_header_t *)&v16, 3162387, 0x18u, 0x50u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        v12 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 18312)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if (rcv_name == 36)
          {
            v12 = 4294966996;
            if (*(_DWORD *)&rcv_name_12[16])
            {
              if (rcv_name_4)
                v12 = 4294966996;
              else
                v12 = *(unsigned int *)&rcv_name_12[16];
            }
          }
          else
          {
            v12 = 4294966996;
          }
          goto LABEL_31;
        }
        v12 = 4294966996;
        if (*(_DWORD *)&rcv_name_12[8] == 2
          && rcv_name == 72
          && !rcv_name_4
          && WORD1(v21) << 16 == 1114112
          && HIBYTE(v21) == 1)
        {
          v14 = v22[0];
          if (v22[0] == v22[3])
          {
            v12 = 0;
            *a2 = *(_DWORD *)&rcv_name_12[12];
            *a3 = *(_QWORD *)((char *)&v21 + 4);
            *a4 = v14;
            *a5 = v22[4];
            return v12;
          }
        }
      }
      else
      {
        v12 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)&v16);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((v16 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name_8);
    goto LABEL_31;
  }
  return v12;
}

uint64_t VTDecompressionSessionRemoteClient_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(int a1, uint64_t a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  _BYTE msg[36];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v11 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x472500000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v5 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18313)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 60)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v6 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *(_OWORD *)a2 = v11;
                *(_QWORD *)(a2 + 16) = v12;
                return v6;
              }
              goto LABEL_28;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v8 = 1;
            else
              v8 = *(_DWORD *)&msg[32] == 0;
            if (v8)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&msg[32];
            goto LABEL_28;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v6 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_28;
  }
  return v6;
}

uint64_t VTDecompressionSessionRemoteClient_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  _BYTE msg[36];
  __int128 v15;
  _BYTE v16[44];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x472600000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x60u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18314)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 88)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v10 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *(_OWORD *)a2 = v15;
                *(_QWORD *)(a2 + 16) = *(_QWORD *)v16;
                *(_OWORD *)a3 = *(_OWORD *)&v16[8];
                *(_QWORD *)(a3 + 16) = *(_QWORD *)&v16[24];
                *a4 = *(_DWORD *)&v16[32];
                return v10;
              }
              goto LABEL_28;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v12 = 1;
            else
              v12 = *(_DWORD *)&msg[32] == 0;
            if (v12)
              v10 = 4294966996;
            else
              v10 = *(unsigned int *)&msg[32];
            goto LABEL_28;
          }
        }
        v10 = 4294966996;
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_28;
  }
  return v10;
}

uint64_t VTDecompressionSessionRemoteClient_GetNextPendingNotification(int a1, _DWORD *a2, _QWORD *a3, char *a4, _QWORD *a5, _DWORD *a6)
{
  mach_port_name_t special_reply_port;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE msg[36];
  __int128 v20;
  __int128 v21;
  _OWORD v22[33];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 444);
  v21 = 0u;
  v20 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x472700000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v13 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x254u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v14 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18315)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v14 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v14 = 4294966996;
              else
                v14 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v14 = 4294966996;
          }
          goto LABEL_31;
        }
        v14 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1
          && *(_DWORD *)&msg[4] >= 0x4Cu
          && *(_DWORD *)&msg[4] <= 0x24Cu
          && !*(_DWORD *)&msg[8]
          && BYTE3(v20) == 1
          && LODWORD(v22[0]) <= 0x200
          && (*(_DWORD *)&msg[4] - 76) >= LODWORD(v22[0]))
        {
          v15 = (LODWORD(v22[0]) + 3) & 0xFFFFFFFC;
          if (*(_DWORD *)&msg[4] == v15 + 76)
          {
            v16 = &msg[v15];
            if (DWORD1(v20) == *((_DWORD *)v16 + 18))
            {
              v17 = v16 - 512;
              *a2 = v21;
              *a3 = *(_QWORD *)((char *)&v21 + 4);
              mig_strncpy(a4, (const char *)v22 + 4, 512);
              v14 = 0;
              *a5 = *(_QWORD *)&msg[28];
              *a6 = *((_DWORD *)v17 + 146);
              return v14;
            }
          }
        }
      }
      else
      {
        v14 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v14 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_31;
  }
  return v14;
}

uint64_t VTDecompressionSessionRemoteClient_TileCreate(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, char *src, _DWORD *a9, _QWORD *a10, _QWORD *a11, int *a12)
{
  int v13;
  mach_msg_size_t v14;
  mach_port_t special_reply_port;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mach_msg_header_t rcv_name;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  _OWORD v31[32];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  memset(v31, 0, 416);
  v29 = 0;
  v30 = 0u;
  v23 = 0x13000000000000;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v21 = 3;
  v22 = a2;
  v24 = a4;
  LODWORD(v25) = 16777472;
  HIDWORD(v25) = a5;
  v26 = a6;
  v27 = 16777472;
  v28 = a7;
  v29 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v30 = a3;
  *((_QWORD *)&v30 + 1) = __PAIR64__(a7, a5);
  if (MEMORY[0x1E0C84128])
    v13 = mig_strncpy_zerofill((char *)v31 + 8, src, 512);
  else
    v13 = mig_strncpy((char *)v31 + 8, src, 512);
  LODWORD(v31[0]) = 0;
  DWORD1(v31[0]) = v13;
  v14 = ((v13 + 3) & 0xFFFFFFFC) + 104;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x472800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v16 = mach_msg(&rcv_name, 3162387, v14, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v17 = v16;
  if ((v16 - 268435458) > 0xE || ((1 << (v16 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v16)
    {
      if (rcv_name.msgh_id == 71)
      {
        v17 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18316)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v17 = 4294966996;
            if ((_DWORD)v23)
            {
              if (rcv_name.msgh_remote_port)
                v17 = 4294966996;
              else
                v17 = v23;
            }
          }
          else
          {
            v17 = 4294966996;
          }
          goto LABEL_29;
        }
        v17 = 4294966996;
        if (v21 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && HIWORD(v23) << 16 == 1114112)
        {
          v17 = 0;
          *a9 = v22;
          v18 = v26;
          *a10 = v25;
          *a11 = v18;
          *a12 = v27;
          return v17;
        }
      }
      else
      {
        v17 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v17;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v17 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v17;
}

uint64_t VTDecompressionSessionRemoteClient_DecodeTile(int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, int a11, uint64_t a12)
{
  uint64_t v12;
  _BYTE msg[36];
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  *(_OWORD *)&msg[20] = 0u;
  v20 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[28] = a2;
  v15 = 1245184;
  v16 = a3;
  v17 = 16777472;
  v18 = a4;
  v19 = a7;
  v21 = 1245184;
  v22 = a8;
  v23 = 16777472;
  v24 = a9;
  v25 = *MEMORY[0x1E0C804E8];
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a9;
  v30 = a10;
  v31 = a11;
  v32 = a12;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(_QWORD *)&msg[20] = 0x400004729;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v12 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x88u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v12 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v12;
}

uint64_t VTDecompressionSessionRemoteClient_FinishDelayedTiles(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x472A00000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t VTDecompressionSessionRemoteClient_EnableMIO(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x472B00000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t (*vtdecompressionsession_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 18220) >= 0xFFFFFFEC)
    return VTDecompressionSessionRemoteServer_vtdecompressionsession_subsystem[5 * (v1 - 18200) + 5];
  else
    return 0;
}

uint64_t _XCreate(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  _OWORD v18[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 4)
    goto LABEL_21;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x7C || v5 > 0x27C)
    goto LABEL_21;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || *(_BYTE *)(result + 67) != 1
    || *(_BYTE *)(result + 83) != 1)
  {
    goto LABEL_20;
  }
  v6 = *(_DWORD *)(result + 120);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 124 < v6)
    goto LABEL_21;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 124)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 104)
    || *(_DWORD *)(result + 68) != *(_DWORD *)(result + 108)
    || *(_DWORD *)(result + 84) != *(_DWORD *)(result + 112))
  {
LABEL_20:
    v3 = -300;
    goto LABEL_21;
  }
  result = (uint64_t)memchr((void *)(result + 124), 0, v5 - 124);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_22;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_21;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 96);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(_DWORD *)(v4 + 52);
  v13 = *(_QWORD *)(v4 + 56);
  v14 = *(_DWORD *)(v4 + 68);
  v15 = *(_QWORD *)(v4 + 72);
  v16 = *(_DWORD *)(v4 + 84);
  v17 = *(_OWORD *)(v7 + 36);
  v18[0] = *(_OWORD *)(v7 + 20);
  v18[1] = v17;
  result = VTDecompressionSessionRemoteServer_Create(v8, v9, v18, v10, v11, v12, v13, v14, v15, v16, (const char *)(v4 + 124), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (int *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_22:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XInvalidate(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_Invalidate(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XDestroy(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_Destroy(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XCopySupportedPropertyDictionary(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTDecompressionSessionRemoteServer_CopySupportedPropertyDictionary(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *_XCopySerializableProperties(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTDecompressionSessionRemoteServer_CopySerializableProperties(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

const char *_XCopyProperty(const char *result, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;

  if ((*(_DWORD *)result & 0x80000000) != 0
    || (v3 = result, v4 = *((unsigned int *)result + 1), v4 < 0x28)
    || v4 > 0x228
    || ((v5 = *((_DWORD *)result + 9), v5 <= 0x200) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = (const char *)memchr((void *)(result + 40), 0, v4 - 40)) == 0))
  {
    *(_DWORD *)(a2 + 32) = -304;
LABEL_12:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (const char *)VTDecompressionSessionRemoteServer_CopyProperty(*((unsigned int *)v3 + 3), v3 + 40, (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XSetProperty(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v6 = *(_DWORD *)(result + 4);
  if (v6 < 0x40 || v6 > 0x240)
    goto LABEL_3;
  if (*(_BYTE *)(result + 39) != 1)
    goto LABEL_18;
  v7 = *(_DWORD *)(result + 56);
  if (v7 > 0x200)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
LABEL_4:
    *(_QWORD *)(a2 + 24) = v4;
    return result;
  }
  v3 = -304;
  if (v6 - 64 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 64)
    goto LABEL_3;
  v9 = *(_DWORD *)(result + 40);
  if (v9 != *(_DWORD *)(result + v8 + 60))
  {
LABEL_18:
    v3 = -300;
    goto LABEL_3;
  }
  v10 = 572;
  if (*(unsigned int *)(result + 4) < 0x23CuLL)
    v10 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 60), 0, v10 - 60);
  if (!result)
    goto LABEL_2;
  result = VTDecompressionSessionRemoteServer_SetProperty(*(unsigned int *)(v5 + 12), (const char *)(v5 + 60), *(_QWORD *)(v5 + 28), v9, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if ((_DWORD)result)
    goto LABEL_4;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetProperties(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = VTDecompressionSessionRemoteServer_SetProperties(*(unsigned int *)(result + 12), *(_QWORD *)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XDecodeFrame(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 3 && *(_DWORD *)(result + 4) == 104)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112
      && *(_BYTE *)(result + 51) == 1
      && *(_BYTE *)(result + 67) == 1)
    {
      v3 = *(_DWORD *)(result + 52);
      if (v3 == *(_DWORD *)(result + 80))
      {
        v4 = *(_DWORD *)(result + 68);
        if (v4 == *(_DWORD *)(result + 88))
        {
          result = VTDecompressionSessionRemoteServer_DecodeFrame(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_QWORD *)(result + 40), v3, *(_DWORD *)(result + 84), *(_QWORD *)(result + 56), v4, *(_QWORD *)(result + 92), *(_DWORD *)(result + 100));
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XDequeueNextPendingFrame(_DWORD *result, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  *(_DWORD *)(a2 + 48) = 16777473;
  *(_QWORD *)(a2 + 60) = 0x11000000000000;
  *(_DWORD *)(a2 + 76) = 16777473;
  *(_DWORD *)(a2 + 92) = 16777473;
  *(_QWORD *)(a2 + 104) = 0x11000000000000;
  *(_DWORD *)(a2 + 120) = 16777473;
  *(_DWORD *)(a2 + 136) = 16777473;
  *(_QWORD *)(a2 + 148) = 0x11000000000000;
  *(_DWORD *)(a2 + 164) = 16777473;
  *(_DWORD *)(a2 + 180) = 16777473;
  *(_DWORD *)(a2 + 208) = 16777473;
  *(_DWORD *)(a2 + 224) = 16777473;
  *(_DWORD *)(a2 + 252) = 16777473;
  *(_DWORD *)(a2 + 268) = 16777473;
  *(_QWORD *)(a2 + 192) = 0x11000000000000;
  *(_QWORD *)(a2 + 236) = 0x11000000000000;
  *((_QWORD *)&v14 + 1) = a2 + 260;
  *((_QWORD *)&v13 + 1) = a2 + 244;
  *(_QWORD *)&v14 = a2 + 340;
  *((_QWORD *)&v12 + 1) = a2 + 336;
  *(_QWORD *)&v13 = a2 + 232;
  *((_QWORD *)&v11 + 1) = a2 + 332;
  *(_QWORD *)&v12 = a2 + 216;
  *((_QWORD *)&v10 + 1) = a2 + 188;
  *(_QWORD *)&v11 = a2 + 200;
  *((_QWORD *)&v9 + 1) = a2 + 172;
  *(_QWORD *)&v10 = a2 + 328;
  *((_QWORD *)&v8 + 1) = a2 + 156;
  *(_QWORD *)&v9 = a2 + 324;
  *((_QWORD *)&v7 + 1) = a2 + 320;
  *(_QWORD *)&v8 = a2 + 144;
  *((_QWORD *)&v6 + 1) = a2 + 316;
  *(_QWORD *)&v7 = a2 + 128;
  *(_QWORD *)&v6 = a2 + 112;
  *(_QWORD *)&v5 = a2 + 312;
  *((_QWORD *)&v5 + 1) = a2 + 100;
  *(_QWORD *)&v4 = a2 + 308;
  *((_QWORD *)&v4 + 1) = a2 + 84;
  *((_QWORD *)&v3 + 1) = a2 + 68;
  *(_QWORD *)&v3 = a2 + 56;
  result = (_DWORD *)VTDecompressionSessionRemoteServer_DequeueNextPendingFrame(result[3], (_DWORD *)(a2 + 284), (_QWORD *)(a2 + 288), (_DWORD *)(a2 + 296), (_DWORD *)(a2 + 300), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 40), (_DWORD *)(a2 + 304), v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,
                       v14,
                       a2 + 344,
                       (_QWORD *)(a2 + 348),
                       (_QWORD *)(a2 + 372),
                       (_DWORD *)(a2 + 396),
                       (_DWORD *)(a2 + 400));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a2 + 124) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a2 + 140) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a2 + 184) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a2 + 212) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a2 + 256) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 272) = *(_DWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 276) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 404;
  *(_DWORD *)(a2 + 24) = 17;
  return result;
}

_DWORD *_XFinishDelayedFrames(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_FinishDelayedFrames(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XCanAcceptFormatDescription(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = VTDecompressionSessionRemoteServer_CanAcceptFormatDescription(*(unsigned int *)(result + 12), *(_QWORD *)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

_DWORD *_XCopyBlackPixelBuffer(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  *(_DWORD *)(a2 + 48) = 16777473;
  result = (_DWORD *)VTDecompressionSessionRemoteServer_CopyBlackPixelBuffer(result[3], (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 40), (_DWORD *)(a2 + 64), (_DWORD *)(a2 + 68));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 72;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

_DWORD *_XGetMinOutputPresentationTimeStampOfFramesBeingDecoded(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(result[3], (_QWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 60;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(result[3], (_QWORD *)(a2 + 36), (_QWORD *)(a2 + 60), (_DWORD *)(a2 + 84));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 88;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XGetNextPendingNotification(_DWORD *result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  v6 = 0;
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTDecompressionSessionRemoteServer_GetNextPendingNotification(result[3], (_DWORD *)(a2 + 52), (_QWORD *)(a2 + 56), (char *)(a2 + 72), (vm_address_t *)(a2 + 28), &v6);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v3 = v6;
  *(_DWORD *)(a2 + 40) = v6;
  v4 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  result = (_DWORD *)strlen((const char *)(a2 + 72));
  if (((unint64_t)result + 1) >> 32)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = v4;
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 68) = (_DWORD)result + 1;
    v5 = ((_DWORD)result + 4) & 0xFFFFFFFC;
    *(_DWORD *)(a2 + v5 + 72) = v3;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = v5 + 76;
    *(_DWORD *)(a2 + 24) = 1;
  }
  return result;
}

uint64_t _XTileCreate(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  _OWORD v16[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 3)
    goto LABEL_19;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x68 || v5 > 0x268)
    goto LABEL_19;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || *(_BYTE *)(result + 67) != 1)
  {
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(result + 100);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 104 < v6)
    goto LABEL_19;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 104)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 88) || *(_DWORD *)(result + 68) != *(_DWORD *)(result + 92))
  {
LABEL_18:
    v3 = -300;
    goto LABEL_19;
  }
  result = (uint64_t)memchr((void *)(result + 104), 0, v5 - 104);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_19:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_20;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_19;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 80);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(_DWORD *)(v4 + 52);
  v13 = *(_QWORD *)(v4 + 56);
  v14 = *(_DWORD *)(v4 + 68);
  v15 = *(_OWORD *)(v7 + 36);
  v16[0] = *(_OWORD *)(v7 + 20);
  v16[1] = v15;
  result = VTDecompressionSessionRemoteServer_TileCreate(v8, v9, v16, v10, v11, v12, v13, v14, (const char *)(v4 + 104), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (int *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_20:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XDecodeTile(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 4 && *(_DWORD *)(result + 4) == 136)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112
      && *(_BYTE *)(result + 51) == 1
      && *(unsigned __int16 *)(result + 66) << 16 == 1114112
      && *(_BYTE *)(result + 79) == 1)
    {
      v3 = *(_DWORD *)(result + 52);
      if (v3 == *(_DWORD *)(result + 92))
      {
        v4 = *(_DWORD *)(result + 80);
        if (v4 == *(_DWORD *)(result + 112))
        {
          result = VTDecompressionSessionRemoteServer_DecodeTile(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_QWORD *)(result + 40), v3, *(_QWORD *)(result + 96), *(_QWORD *)(result + 104), *(_DWORD *)(result + 56), *(_QWORD *)(result + 68), v4, *(_QWORD *)(result + 116), *(_DWORD *)(result + 124), *(_QWORD *)(result + 128));
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XFinishDelayedTiles(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_FinishDelayedTiles(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_XEnableMIO(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteServer_EnableMIO(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t VTCompressionSessionRemoteClient_Create(mach_port_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, char *src, _DWORD *a14, _QWORD *a15, uint64_t *a16, int *a17)
{
  int v18;
  mach_msg_size_t v19;
  mach_port_t special_reply_port;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  mach_msg_header_t rcv_name;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[32];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  memset(v40, 0, 384);
  v38 = 0u;
  v39 = 0u;
  v37 = 0;
  v28 = 0x13000000000000;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v26 = 4;
  v27 = a2;
  v29 = a7;
  LODWORD(v30) = 16777472;
  HIDWORD(v30) = a8;
  v31 = a9;
  v32 = 16777472;
  v33 = a10;
  v34 = a11;
  v35 = 16777472;
  v36 = a12;
  v37 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v38 = a3;
  *((_QWORD *)&v38 + 1) = __PAIR64__(a5, a4);
  *(_QWORD *)&v39 = __PAIR64__(a8, a6);
  *((_QWORD *)&v39 + 1) = __PAIR64__(a12, a10);
  if (MEMORY[0x1E0C84128])
    v18 = mig_strncpy_zerofill((char *)v40 + 8, src, 512);
  else
    v18 = mig_strncpy((char *)v40 + 8, src, 512);
  LODWORD(v40[0]) = 0;
  DWORD1(v40[0]) = v18;
  v19 = ((v18 + 3) & 0xFFFFFFFC) + 136;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x477C00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v21 = mach_msg(&rcv_name, 3162387, v19, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v22 = v21;
  if ((v21 - 268435458) > 0xE || ((1 << (v21 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v21)
    {
      if (rcv_name.msgh_id == 71)
      {
        v22 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18400)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v22 = 4294966996;
            if ((_DWORD)v28)
            {
              if (rcv_name.msgh_remote_port)
                v22 = 4294966996;
              else
                v22 = v28;
            }
          }
          else
          {
            v22 = 4294966996;
          }
          goto LABEL_29;
        }
        v22 = 4294966996;
        if (v26 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && HIWORD(v28) << 16 == 1114112)
        {
          v22 = 0;
          *a14 = v27;
          v23 = v31;
          *a15 = v30;
          *a16 = v23;
          *a17 = v32;
          return v22;
        }
      }
      else
      {
        v22 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v22;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v22 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v22;
}

uint64_t VTCompressionSessionRemoteClient_Destroy(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x477D00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18401)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v4;
}

uint64_t VTCompressionSessionRemoteClient_CopySupportedPropertyDictionary(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _BYTE msg[36];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x477E00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18402)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v10 = 4294966996;
              else
                v10 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v10 = 4294966996;
          }
          goto LABEL_30;
        }
        v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v15) == 1)
        {
          v12 = DWORD1(v15);
          if (DWORD1(v15) == (_DWORD)v16)
          {
            v10 = 0;
            *a2 = *(_QWORD *)&msg[28];
            *a3 = v12;
            *a4 = DWORD1(v16);
            return v10;
          }
        }
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v10;
}

uint64_t VTCompressionSessionRemoteClient_CopySerializableProperties(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _BYTE msg[36];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x477F00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18403)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v10 = 4294966996;
              else
                v10 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v10 = 4294966996;
          }
          goto LABEL_30;
        }
        v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v15) == 1)
        {
          v12 = DWORD1(v15);
          if (DWORD1(v15) == (_DWORD)v16)
          {
            v10 = 0;
            *a2 = *(_QWORD *)&msg[28];
            *a3 = v12;
            *a4 = DWORD1(v16);
            return v10;
          }
        }
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v10;
}

uint64_t VTCompressionSessionRemoteClient_CopyProperty(mach_port_name_t a1, const char *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v9;
  mach_msg_size_t v10;
  mach_port_name_t special_reply_port;
  uint64_t v12;
  uint64_t v13;
  int v14;
  mach_port_name_t rcv_name[4];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  *(_OWORD *)rcv_name = 0u;
  memset(v17, 0, sizeof(v17));
  *((_QWORD *)&v17[0] + 1) = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v9 = mig_strncpy_zerofill((char *)&v17[1] + 8, a2, 512);
  else
    v9 = mig_strncpy((char *)&v17[1] + 8, a2, 512);
  LODWORD(v17[1]) = 0;
  DWORD1(v17[1]) = v9;
  v10 = ((v9 + 3) & 0xFFFFFFFC) + 40;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v17[0] = 0x478000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v12 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v10, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (DWORD1(v17[0]) == 71)
      {
        v13 = 4294966988;
      }
      else if (DWORD1(v17[0]) == 18404)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 36)
          {
            v13 = 4294966996;
            if (LODWORD(v17[1]))
            {
              if (rcv_name[2])
                v13 = 4294966996;
              else
                v13 = LODWORD(v17[1]);
            }
          }
          else
          {
            v13 = 4294966996;
          }
          goto LABEL_30;
        }
        v13 = 4294966996;
        if (DWORD2(v17[0]) == 1 && rcv_name[1] == 60 && !rcv_name[2] && BYTE7(v17[1]) == 1)
        {
          v14 = DWORD2(v17[1]);
          if (DWORD2(v17[1]) == DWORD1(v18))
          {
            v13 = 0;
            *a3 = *(_QWORD *)((char *)v17 + 12);
            *a4 = v14;
            *a5 = DWORD2(v18);
            return v13;
          }
        }
      }
      else
      {
        v13 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_30;
  }
  return v13;
}

uint64_t VTCompressionSessionRemoteClient_SetProperty(mach_port_t a1, const char *a2, uint64_t a3, unsigned int a4, int *a5)
{
  int v8;
  uint64_t v9;
  mach_msg_size_t v10;
  mach_port_t special_reply_port;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  mach_msg_header_t rcv_name;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE v20[24];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)&v20[8] = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v17 = 1;
  v18 = a3;
  v19 = 16777472;
  *(_QWORD *)v20 = a4;
  *(_QWORD *)&v20[4] = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v8 = mig_strncpy_zerofill(&v20[20], a2, 512);
  else
    v8 = mig_strncpy(&v20[20], a2, 512);
  *(_DWORD *)&v20[12] = 0;
  *(_DWORD *)&v20[16] = v8;
  v9 = (v8 + 3) & 0xFFFFFFFC;
  v10 = v9 + 64;
  *(_DWORD *)&v20[v9 + 20] = a4;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x478100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v12 = mach_msg(&rcv_name, 3162387, v10, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (rcv_name.msgh_id == 71)
      {
        v13 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18405)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 40)
          {
            if (!rcv_name.msgh_remote_port)
            {
              v13 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                *a5 = v19;
                return v13;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name.msgh_size == 36)
          {
            if (rcv_name.msgh_remote_port)
              v14 = 1;
            else
              v14 = HIDWORD(v18) == 0;
            if (v14)
              v13 = 4294966996;
            else
              v13 = HIDWORD(v18);
            goto LABEL_28;
          }
        }
        v13 = 4294966996;
      }
      else
      {
        v13 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&rcv_name);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v13 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_28;
  }
  return v13;
}

uint64_t VTCompressionSessionRemoteClient_SetMultiPassStorage(mach_port_t a1, int a2, _DWORD *a3)
{
  mach_port_t special_reply_port;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  mach_msg_header_t v11;
  int v12;
  int v13;
  __int128 v14;

  v12 = 1;
  v14 = 0u;
  v11.msgh_size = 0;
  v13 = a2;
  DWORD1(v14) = 1245184;
  special_reply_port = mig_get_special_reply_port();
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  v11.msgh_bits = -2147478253;
  *(_QWORD *)&v11.msgh_voucher_port = 0x478200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v11);
    special_reply_port = v11.msgh_local_port;
  }
  v6 = mach_msg(&v11, 3162387, 0x28u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v6)
    {
      if (v11.msgh_id == 71)
      {
        v7 = 4294966988;
      }
      else if (v11.msgh_id == 18406)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              v7 = v14;
              if (!(_DWORD)v14)
              {
                *a3 = DWORD1(v14);
                return v7;
              }
              goto LABEL_28;
            }
          }
          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port)
              v9 = 1;
            else
              v9 = (_DWORD)v14 == 0;
            if (v9)
              v7 = 4294966996;
            else
              v7 = v14;
            goto LABEL_28;
          }
        }
        v7 = 4294966996;
      }
      else
      {
        v7 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v11);
      return v7;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v7 - 268435459) <= 1)
  {
    if ((v11.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v11.msgh_local_port);
    goto LABEL_28;
  }
  return v7;
}

uint64_t VTCompressionSessionRemoteClient_SetProperties(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  mach_port_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  mach_msg_header_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v14 = a2;
  v15 = 16777472;
  v16 = a3;
  v17 = *MEMORY[0x1E0C804E8];
  v18 = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v12.msgh_bits = 2147489043;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = special_reply_port;
  *(_QWORD *)&v12.msgh_voucher_port = 0x478300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v12);
    special_reply_port = v12.msgh_local_port;
  }
  v7 = mach_msg(&v12, 3162387, 0x38u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v12.msgh_id == 71)
      {
        v8 = 4294966988;
      }
      else if (v12.msgh_id == 18407)
      {
        if ((v12.msgh_bits & 0x80000000) == 0)
        {
          if (v12.msgh_size == 40)
          {
            if (!v12.msgh_remote_port)
            {
              v8 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a4 = v15;
                return v8;
              }
              goto LABEL_28;
            }
          }
          else if (v12.msgh_size == 36)
          {
            if (v12.msgh_remote_port)
              v10 = 1;
            else
              v10 = HIDWORD(v14) == 0;
            if (v10)
              v8 = 4294966996;
            else
              v8 = HIDWORD(v14);
            goto LABEL_28;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v12);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v12.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v12.msgh_local_port);
    goto LABEL_28;
  }
  return v8;
}

uint64_t VTCompressionSessionRemoteClient_PrepareToEncodeFrames(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x478400000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t VTCompressionSessionRemoteClient_EncodeFrame(mach_port_name_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, unint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int a23,uint64_t a24,unsigned int a25,uint64_t a26,__int128 *a27,uint64_t a28,int a29,uint64_t a30)
{
  __int128 v30;
  uint64_t v31;
  mach_port_name_t name[4];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  __int128 v55;
  _BYTE v56[20];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)&v56[16] = 0;
  v30 = *a27;
  v55 = 0u;
  *(_OWORD *)v56 = 0u;
  memset(v54, 0, sizeof(v54));
  *(_OWORD *)((char *)v54 + 8) = *(_OWORD *)a26;
  v34 = 0u;
  HIDWORD(v34) = a2;
  v35 = 0;
  v37 = 0u;
  v36 = a3;
  v38 = 0u;
  v39 = 0u;
  *(_QWORD *)((char *)&v38 + 4) = a6;
  *(_QWORD *)((char *)&v39 + 4) = a8;
  v40 = 0u;
  v41 = 0u;
  *(_QWORD *)&v41 = a10;
  memset(&v42[16], 0, 48);
  *(_OWORD *)v42 = a12;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v45 = 0;
  v47 = 0u;
  v43 = 0;
  *(_QWORD *)&v42[28] = a14;
  *(_QWORD *)&v42[44] = a16;
  v44 = a18;
  v46 = a20;
  *(_QWORD *)((char *)&v48 + 4) = a22;
  *(_QWORD *)((char *)&v49 + 4) = a24;
  *(_QWORD *)((char *)&v50 + 4) = a28;
  *(_QWORD *)((char *)&v51 + 4) = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v56[12] = a30;
  HIDWORD(v35) = 1245184;
  LODWORD(v37) = 16777472;
  LODWORD(v38) = 1245184;
  HIDWORD(v38) = 16777472;
  HIDWORD(v39) = 16777472;
  HIDWORD(v40) = 1245184;
  DWORD2(v41) = 16777472;
  *(_DWORD *)&v42[8] = 16777472;
  *(_DWORD *)&v42[24] = 1245184;
  *(_DWORD *)&v42[36] = 16777472;
  *(_DWORD *)&v42[52] = 16777472;
  HIDWORD(v43) = 1245184;
  LODWORD(v45) = 16777472;
  LODWORD(v47) = 16777472;
  LODWORD(v48) = 1245184;
  HIDWORD(v48) = 16777472;
  HIDWORD(v49) = 16777472;
  HIDWORD(v50) = 16777472;
  *(_QWORD *)((char *)&v37 + 4) = __PAIR64__(a5, a4);
  HIDWORD(v51) = a4;
  LODWORD(v39) = a7;
  *(_QWORD *)&v52 = __PAIR64__(a9, a7);
  *(_QWORD *)&v40 = a9;
  HIDWORD(v41) = a11;
  *((_QWORD *)&v52 + 1) = __PAIR64__(a13, a11);
  *(_QWORD *)&v42[12] = a13;
  *(_DWORD *)&v42[40] = a15;
  *(_QWORD *)&v53 = __PAIR64__(a17, a15);
  *(_QWORD *)&v42[56] = a17;
  HIDWORD(v45) = a19;
  *((_QWORD *)&v53 + 1) = __PAIR64__(a21, a19);
  *(_QWORD *)((char *)&v47 + 4) = a21;
  LODWORD(v49) = a23;
  *(_QWORD *)&v54[0] = __PAIR64__(a25, a23);
  LODWORD(v50) = a25;
  *((_QWORD *)&v54[1] + 1) = *(_QWORD *)(a26 + 16);
  *(_OWORD *)name = 0u;
  *(_QWORD *)v56 = *((_QWORD *)a27 + 2);
  LODWORD(v51) = a29;
  *(_DWORD *)&v56[8] = a29;
  name[0] = -2147483629;
  v55 = v30;
  name[2] = a1;
  *(_QWORD *)((char *)&v34 + 4) = 0x1200004785;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)name);
  v31 = mach_msg((mach_msg_header_t *)name, 2097169, 0x194u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v31 - 268435459) <= 1)
  {
    if ((name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], name[3]);
    mach_msg_destroy((mach_msg_header_t *)name);
  }
  return v31;
}

uint64_t VTCompressionSessionRemoteClient_DequeueNextPendingEncodedFrame(int a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _QWORD *a11, _DWORD *a12, _DWORD *a13)
{
  mach_port_name_t special_reply_port;
  uint64_t v22;
  uint64_t v23;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  _BYTE msg[36];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _DWORD v36[7];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x478600000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v22 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x80u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v23 = v22;
  if ((v22 - 268435458) > 0xE || ((1 << (v22 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v22)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v23 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18410)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v23 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v23 = 4294966996;
              else
                v23 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v23 = 4294966996;
          }
          goto LABEL_33;
        }
        v23 = 4294966996;
        if (*(_DWORD *)&msg[24] == 3
          && *(_DWORD *)&msg[4] == 120
          && !*(_DWORD *)&msg[8]
          && WORD1(v32) << 16 == 1114112
          && HIBYTE(v32) == 1
          && HIBYTE(v33) == 1)
        {
          v25 = v33;
          if ((_DWORD)v33 == v36[0])
          {
            v26 = v34;
            if ((_DWORD)v34 == v36[3])
            {
              v23 = 0;
              *a2 = HIDWORD(v34);
              *a3 = v35;
              v27 = HIDWORD(v35);
              *a4 = DWORD2(v35);
              *a5 = v27;
              *a6 = *(_DWORD *)&msg[28];
              v28 = *(_QWORD *)((char *)&v33 + 4);
              *a7 = *(_QWORD *)((char *)&v32 + 4);
              *a8 = v25;
              v29 = v36[2];
              *a9 = v36[1];
              *a10 = v29;
              *a11 = v28;
              *a12 = v26;
              *a13 = v36[4];
              return v23;
            }
          }
        }
      }
      else
      {
        v23 = 4294966995;
      }
LABEL_33:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v23;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v23 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_33;
  }
  return v23;
}

uint64_t VTCompressionSessionRemoteClient_CompleteFrames(mach_port_t a1, __int128 *a2)
{
  uint64_t v2;
  mach_msg_header_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0C804E8];
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v4.msgh_bits = 19;
  v4.msgh_voucher_port = 0;
  v4.msgh_id = 18311;
  v4.msgh_remote_port = a1;
  v4.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&v4);
  v2 = mach_msg(&v4, 2097169, 0x38u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v2 - 268435459) <= 1)
  {
    if ((v4.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v4.msgh_local_port);
    mach_msg_destroy(&v4);
  }
  return v2;
}

uint64_t VTCompressionSessionRemoteClient_BeginPass(int a1, int a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  int v13;
  _BYTE msg[36];
  __int128 v15;

  *(_OWORD *)&msg[20] = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x478800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v8 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x24u, 0x34u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v8)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v9 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18412)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v9 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                v13 = DWORD1(v15);
                *a3 = v15;
                *a4 = v13;
                return v9;
              }
              goto LABEL_28;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v11 = 1;
            else
              v11 = *(_DWORD *)&msg[32] == 0;
            if (v11)
              v9 = 4294966996;
            else
              v9 = *(unsigned int *)&msg[32];
            goto LABEL_28;
          }
        }
        v9 = 4294966996;
      }
      else
      {
        v9 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v9;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v9 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_28;
  }
  return v9;
}

uint64_t VTCompressionSessionRemoteClient_EndPass(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  int v14;
  _BYTE msg[36];
  __int128 v16;
  int v17;

  v17 = 0;
  v16 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x478900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x38u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18413)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 48)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v10 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                v14 = DWORD1(v16);
                *a2 = v16;
                *a3 = v14;
                *a4 = DWORD2(v16);
                return v10;
              }
              goto LABEL_28;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v12 = 1;
            else
              v12 = *(_DWORD *)&msg[32] == 0;
            if (v12)
              v10 = 4294966996;
            else
              v10 = *(unsigned int *)&msg[32];
            goto LABEL_28;
          }
        }
        v10 = 4294966996;
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_28;
  }
  return v10;
}

uint64_t VTCompressionSessionRemoteClient_GetTimeRangesForNextPass(int a1, _QWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_name_t special_reply_port;
  uint64_t v11;
  uint64_t v12;
  int v14;
  _BYTE msg[36];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  *(_DWORD *)&msg[4] = 0;
  *(_OWORD *)&msg[20] = 0u;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x478A00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v11 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v12 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18414)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v12 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v12 = 4294966996;
              else
                v12 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v12 = 4294966996;
          }
          goto LABEL_30;
        }
        v12 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 68 && !*(_DWORD *)&msg[8] && BYTE3(v17) == 1)
        {
          v14 = DWORD1(v17);
          if (DWORD1(v17) == DWORD2(v18))
          {
            v12 = 0;
            *a2 = v18;
            *a3 = *(_QWORD *)&msg[28];
            *a4 = v14;
            *a5 = HIDWORD(v18);
            return v12;
          }
        }
      }
      else
      {
        v12 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v12;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageCreate(mach_port_name_t a1, int a2, uint64_t a3, uint64_t a4, int a5, _OWORD *a6, uint64_t a7, int a8, char *src, _DWORD *a10, _QWORD *a11, _QWORD *a12, _DWORD *a13)
{
  __int128 v14;
  int v15;
  mach_msg_size_t v16;
  mach_port_name_t special_reply_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mach_port_name_t rcv_name[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[36];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(&v27[1], 0, 416);
  v26 = 0u;
  v27[0] = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)rcv_name = 0u;
  v23 = 0u;
  v14 = a6[1];
  *(_OWORD *)((char *)v27 + 12) = *a6;
  DWORD2(v23) = 3;
  HIDWORD(v23) = a2;
  DWORD1(v24) = 1245184;
  *((_QWORD *)&v24 + 1) = a4;
  LODWORD(v25) = 16777472;
  DWORD1(v25) = a5;
  *((_QWORD *)&v25 + 1) = a7;
  LODWORD(v26) = 16777472;
  DWORD1(v26) = a8;
  *((_QWORD *)&v26 + 1) = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v27[0] = a3;
  DWORD2(v27[0]) = a5;
  *(_OWORD *)((char *)&v27[1] + 12) = v14;
  *(_OWORD *)((char *)&v27[2] + 12) = a6[2];
  HIDWORD(v27[3]) = a8;
  if (MEMORY[0x1E0C84128])
    v15 = mig_strncpy_zerofill((char *)&v27[4] + 8, src, 512);
  else
    v15 = mig_strncpy((char *)&v27[4] + 8, src, 512);
  LODWORD(v27[4]) = 0;
  DWORD1(v27[4]) = v15;
  v16 = ((v15 + 3) & 0xFFFFFFFC) + 152;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = -2147478253;
  *(_QWORD *)&v23 = 0x478B00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v18 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v16, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v19 = v18;
  if ((v18 - 268435458) > 0xE || ((1 << (v18 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v18)
    {
      if (DWORD1(v23) == 71)
      {
        v19 = 4294966988;
      }
      else if (DWORD1(v23) == 18415)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 36)
          {
            v19 = 4294966996;
            if ((_DWORD)v24)
            {
              if (rcv_name[2])
                v19 = 4294966996;
              else
                v19 = v24;
            }
          }
          else
          {
            v19 = 4294966996;
          }
          goto LABEL_29;
        }
        v19 = 4294966996;
        if (DWORD2(v23) == 1 && rcv_name[1] == 68 && !rcv_name[2] && WORD3(v24) << 16 == 1114112)
        {
          v19 = 0;
          *a10 = HIDWORD(v23);
          v20 = *((_QWORD *)&v25 + 1);
          *a11 = v25;
          *a12 = v20;
          *a13 = v26;
          return v19;
        }
      }
      else
      {
        v19 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v19;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v19 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_29;
  }
  return v19;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageDestroy(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x478C00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18416)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v4;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageSetIdentifier(mach_port_name_t a1, const char *a2, _DWORD *a3)
{
  int v5;
  mach_msg_size_t v6;
  mach_port_name_t special_reply_port;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  mach_port_name_t rcv_name[4];
  __int128 v13;
  _OWORD v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, 480);
  *(_OWORD *)rcv_name = 0u;
  v13 = 0u;
  *((_QWORD *)&v13 + 1) = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v5 = mig_strncpy_zerofill((char *)v14 + 8, a2, 512);
  else
    v5 = mig_strncpy((char *)v14 + 8, a2, 512);
  LODWORD(v14[0]) = 0;
  DWORD1(v14[0]) = v5;
  v6 = ((v5 + 3) & 0xFFFFFFFC) + 40;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v13 = 0x478D00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v8 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v6, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v8)
    {
      if (DWORD1(v13) == 71)
      {
        v9 = 4294966988;
      }
      else if (DWORD1(v13) == 18417)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 40)
          {
            if (!rcv_name[2])
            {
              v9 = LODWORD(v14[0]);
              if (!LODWORD(v14[0]))
              {
                *a3 = DWORD1(v14[0]);
                return v9;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name[1] == 36)
          {
            if (rcv_name[2])
              v10 = 1;
            else
              v10 = LODWORD(v14[0]) == 0;
            if (v10)
              v9 = 4294966996;
            else
              v9 = LODWORD(v14[0]);
            goto LABEL_28;
          }
        }
        v9 = 4294966996;
      }
      else
      {
        v9 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v9;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v9 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_28;
  }
  return v9;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageCopyIdentifier(mach_port_t a1, char *a2)
{
  mach_port_t special_reply_port;
  uint64_t v5;
  uint64_t msgh_remote_port;
  BOOL v7;
  mach_msg_header_t msg[23];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(&msg[20].msgh_size, 0, 28);
  memset(&msg[1].msgh_local_port, 0, 448);
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  special_reply_port = mig_get_special_reply_port();
  msg[0].msgh_remote_port = a1;
  msg[0].msgh_local_port = special_reply_port;
  msg[0].msgh_bits = 5395;
  *(_QWORD *)&msg[0].msgh_voucher_port = 0x478E00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(msg);
    special_reply_port = msg[0].msgh_local_port;
  }
  v5 = mach_msg(msg, 3162387, 0x18u, 0x234u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  msgh_remote_port = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg[0].msgh_id == 71)
      {
        msgh_remote_port = 4294966988;
      }
      else if (msg[0].msgh_id == 18418)
      {
        if ((msg[0].msgh_bits & 0x80000000) == 0)
        {
          if (msg[0].msgh_size - 557 <= 0xFFFFFDFE)
          {
            if (msg[0].msgh_remote_port)
              v7 = 1;
            else
              v7 = msg[1].msgh_remote_port == 0;
            if (!v7 && msg[0].msgh_size == 36)
              msgh_remote_port = msg[1].msgh_remote_port;
            else
              msgh_remote_port = 4294966996;
            goto LABEL_27;
          }
          if (!msg[0].msgh_remote_port)
          {
            msgh_remote_port = msg[1].msgh_remote_port;
            if (!msg[1].msgh_remote_port)
            {
              msgh_remote_port = 4294966996;
              if (msg[1].msgh_voucher_port <= 0x200
                && msg[0].msgh_size - 44 >= msg[1].msgh_voucher_port
                && msg[0].msgh_size == ((msg[1].msgh_voucher_port + 3) & 0xFFFFFFFC) + 44)
              {
                mig_strncpy(a2, (const char *)&msg[1].msgh_id, 512);
                return 0;
              }
            }
            goto LABEL_27;
          }
        }
        msgh_remote_port = 4294966996;
      }
      else
      {
        msgh_remote_port = 4294966995;
      }
LABEL_27:
      mach_msg_destroy(msg);
      return msgh_remote_port;
    }
    mig_dealloc_special_reply_port();
  }
  if ((msgh_remote_port - 268435459) <= 1)
  {
    if ((msg[0].msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg[0].msgh_local_port);
    goto LABEL_27;
  }
  return msgh_remote_port;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageSetDataAtTimeStamp(mach_port_t a1, __int128 *a2, int a3, uint64_t a4, int a5, int *a6)
{
  mach_port_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  mach_msg_header_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = 1;
  v16 = a4;
  v17 = 16777472;
  v18 = a5;
  v19 = *MEMORY[0x1E0C804E8];
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v22 = a3;
  v23 = a5;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v14.msgh_bits = 2147489043;
  v14.msgh_remote_port = a1;
  v14.msgh_local_port = special_reply_port;
  *(_QWORD *)&v14.msgh_voucher_port = 0x478F00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v14);
    special_reply_port = v14.msgh_local_port;
  }
  v9 = mach_msg(&v14, 3162387, 0x54u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (v14.msgh_id == 71)
      {
        v10 = 4294966988;
      }
      else if (v14.msgh_id == 18419)
      {
        if ((v14.msgh_bits & 0x80000000) == 0)
        {
          if (v14.msgh_size == 40)
          {
            if (!v14.msgh_remote_port)
            {
              v10 = HIDWORD(v16);
              if (!HIDWORD(v16))
              {
                *a6 = v17;
                return v10;
              }
              goto LABEL_28;
            }
          }
          else if (v14.msgh_size == 36)
          {
            if (v14.msgh_remote_port)
              v12 = 1;
            else
              v12 = HIDWORD(v16) == 0;
            if (v12)
              v10 = 4294966996;
            else
              v10 = HIDWORD(v16);
            goto LABEL_28;
          }
        }
        v10 = 4294966996;
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v14);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((v14.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v14.msgh_local_port);
    goto LABEL_28;
  }
  return v10;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStamp(mach_port_name_t a1, uint64_t a2, char *src, uint64_t a4, _DWORD *a5)
{
  int v8;
  mach_msg_size_t v9;
  mach_port_name_t special_reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  mach_port_name_t rcv_name[4];
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, 448);
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)rcv_name = 0u;
  v16 = 0u;
  *((_QWORD *)&v16 + 1) = *MEMORY[0x1E0C804E8];
  v17[0] = *(_OWORD *)a2;
  *(_QWORD *)&v17[1] = *(_QWORD *)(a2 + 16);
  if (MEMORY[0x1E0C84128])
    v8 = mig_strncpy_zerofill((char *)v18, src, 512);
  else
    v8 = mig_strncpy((char *)v18, src, 512);
  DWORD2(v17[1]) = 0;
  HIDWORD(v17[1]) = v8;
  v9 = ((v8 + 3) & 0xFFFFFFFC) + 64;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v16 = 0x479000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v11 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v9, 0x48u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (DWORD1(v16) == 71)
      {
        v12 = 4294966988;
      }
      else if (DWORD1(v16) == 18420)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 64)
          {
            if (!rcv_name[2])
            {
              v12 = LODWORD(v17[0]);
              if (!LODWORD(v17[0]))
              {
                *(_OWORD *)a4 = *(_OWORD *)((char *)v17 + 4);
                *(_QWORD *)(a4 + 16) = *(_QWORD *)((char *)&v17[1] + 4);
                *a5 = HIDWORD(v17[1]);
                return v12;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name[1] == 36)
          {
            if (rcv_name[2])
              v13 = 1;
            else
              v13 = LODWORD(v17[0]) == 0;
            if (v13)
              v12 = 4294966996;
            else
              v12 = LODWORD(v17[0]);
            goto LABEL_28;
          }
        }
        v12 = 4294966996;
      }
      else
      {
        v12 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_28;
  }
  return v12;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStampAndDuration(mach_port_name_t a1, uint64_t a2, char *src, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int v10;
  mach_msg_size_t v11;
  mach_port_name_t special_reply_port;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  mach_port_name_t rcv_name[4];
  __int128 v18;
  _OWORD v19[34];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, 480);
  *(_OWORD *)rcv_name = 0u;
  v18 = 0u;
  *((_QWORD *)&v18 + 1) = *MEMORY[0x1E0C804E8];
  v19[0] = *(_OWORD *)a2;
  *(_QWORD *)&v19[1] = *(_QWORD *)(a2 + 16);
  if (MEMORY[0x1E0C84128])
    v10 = mig_strncpy_zerofill((char *)&v19[2], src, 512);
  else
    v10 = mig_strncpy((char *)&v19[2], src, 512);
  DWORD2(v19[1]) = 0;
  HIDWORD(v19[1]) = v10;
  v11 = ((v10 + 3) & 0xFFFFFFFC) + 64;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v18 = 0x479100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v13 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v11, 0x60u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (DWORD1(v18) == 71)
      {
        v14 = 4294966988;
      }
      else if (DWORD1(v18) == 18421)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 88)
          {
            if (!rcv_name[2])
            {
              v14 = LODWORD(v19[0]);
              if (!LODWORD(v19[0]))
              {
                *(_OWORD *)a4 = *(_OWORD *)((char *)v19 + 4);
                *(_QWORD *)(a4 + 16) = *(_QWORD *)((char *)&v19[1] + 4);
                *(_OWORD *)a5 = *(_OWORD *)((char *)&v19[1] + 12);
                *(_QWORD *)(a5 + 16) = *(_QWORD *)((char *)&v19[2] + 12);
                *a6 = DWORD1(v19[3]);
                return v14;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name[1] == 36)
          {
            if (rcv_name[2])
              v15 = 1;
            else
              v15 = LODWORD(v19[0]) == 0;
            if (v15)
              v14 = 4294966996;
            else
              v14 = LODWORD(v19[0]);
            goto LABEL_28;
          }
        }
        v14 = 4294966996;
      }
      else
      {
        v14 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v14 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_28;
  }
  return v14;
}

uint64_t VTCompressionSessionRemoteClient_MultiPassStorageCopyDataAtTimeStamp(int a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5, _DWORD *a6)
{
  mach_port_name_t special_reply_port;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int msg;
  _BYTE msg_4[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(&msg_4[16], 0, 48);
  *(_OWORD *)msg_4 = 0u;
  *(_QWORD *)&msg_4[20] = *MEMORY[0x1E0C804E8];
  *(_OWORD *)&msg_4[28] = *(_OWORD *)a2;
  *(_QWORD *)&msg_4[44] = *(_QWORD *)(a2 + 16);
  *(_DWORD *)&msg_4[52] = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = special_reply_port;
  msg = 5395;
  *(_QWORD *)&msg_4[12] = 0x479200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    special_reply_port = *(_DWORD *)&msg_4[8];
  }
  v11 = mach_msg((mach_msg_header_t *)&msg, 3162387, 0x3Cu, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (*(_DWORD *)&msg_4[16] == 71)
      {
        v12 = 4294966988;
      }
      else if (*(_DWORD *)&msg_4[16] == 18422)
      {
        if ((msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)msg_4 == 36)
          {
            v12 = 4294966996;
            if (*(_DWORD *)&msg_4[28])
            {
              if (*(_DWORD *)&msg_4[4])
                v12 = 4294966996;
              else
                v12 = *(unsigned int *)&msg_4[28];
            }
          }
          else
          {
            v12 = 4294966996;
          }
          goto LABEL_30;
        }
        v12 = 4294966996;
        if (*(_DWORD *)&msg_4[20] == 1 && *(_DWORD *)msg_4 == 60 && !*(_DWORD *)&msg_4[4] && msg_4[35] == 1)
        {
          v14 = *(_DWORD *)&msg_4[36];
          if (*(_DWORD *)&msg_4[36] == *(_DWORD *)&msg_4[48])
          {
            v12 = 0;
            *a4 = *(_QWORD *)&msg_4[24];
            *a5 = v14;
            *a6 = *(_DWORD *)&msg_4[52];
            return v12;
          }
        }
      }
      else
      {
        v12 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg_4[8]);
    goto LABEL_30;
  }
  return v12;
}

uint64_t VTCompressionSessionRemoteClient_GetNextPendingNotification(int a1, _DWORD *a2, _QWORD *a3, char *a4, _QWORD *a5, _DWORD *a6)
{
  mach_port_name_t special_reply_port;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE msg[36];
  __int128 v20;
  __int128 v21;
  _OWORD v22[33];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 444);
  v21 = 0u;
  v20 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x479300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v13 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x254u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v14 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18423)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v14 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v14 = 4294966996;
              else
                v14 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v14 = 4294966996;
          }
          goto LABEL_31;
        }
        v14 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1
          && *(_DWORD *)&msg[4] >= 0x4Cu
          && *(_DWORD *)&msg[4] <= 0x24Cu
          && !*(_DWORD *)&msg[8]
          && BYTE3(v20) == 1
          && LODWORD(v22[0]) <= 0x200
          && (*(_DWORD *)&msg[4] - 76) >= LODWORD(v22[0]))
        {
          v15 = (LODWORD(v22[0]) + 3) & 0xFFFFFFFC;
          if (*(_DWORD *)&msg[4] == v15 + 76)
          {
            v16 = &msg[v15];
            if (DWORD1(v20) == *((_DWORD *)v16 + 18))
            {
              v17 = v16 - 512;
              *a2 = v21;
              *a3 = *(_QWORD *)((char *)&v21 + 4);
              mig_strncpy(a4, (const char *)v22 + 4, 512);
              v14 = 0;
              *a5 = *(_QWORD *)&msg[28];
              *a6 = *((_DWORD *)v17 + 146);
              return v14;
            }
          }
        }
      }
      else
      {
        v14 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v14 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_31;
  }
  return v14;
}

uint64_t VTCompressionSessionRemoteClient_TileCreate(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, int a9, char *src, _DWORD *a11, _QWORD *a12, _QWORD *a13, int *a14)
{
  int v15;
  mach_msg_size_t v16;
  mach_port_t special_reply_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mach_msg_header_t rcv_name;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[32];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  memset(v34, 0, 400);
  v31 = 0;
  v32 = 0u;
  v25 = 0x13000000000000;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v23 = 3;
  v24 = a2;
  v26 = a6;
  LODWORD(v27) = 16777472;
  HIDWORD(v27) = a7;
  v28 = a8;
  v29 = 16777472;
  v30 = a9;
  v31 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  *(_QWORD *)&v33 = __PAIR64__(a7, a5);
  DWORD2(v33) = a9;
  if (MEMORY[0x1E0C84128])
    v15 = mig_strncpy_zerofill((char *)v34 + 4, src, 512);
  else
    v15 = mig_strncpy((char *)v34 + 4, src, 512);
  HIDWORD(v33) = 0;
  LODWORD(v34[0]) = v15;
  v16 = ((v15 + 3) & 0xFFFFFFFC) + 116;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x479400000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v18 = mach_msg(&rcv_name, 3162387, v16, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v19 = v18;
  if ((v18 - 268435458) > 0xE || ((1 << (v18 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v18)
    {
      if (rcv_name.msgh_id == 71)
      {
        v19 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18424)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v19 = 4294966996;
            if ((_DWORD)v25)
            {
              if (rcv_name.msgh_remote_port)
                v19 = 4294966996;
              else
                v19 = v25;
            }
          }
          else
          {
            v19 = 4294966996;
          }
          goto LABEL_29;
        }
        v19 = 4294966996;
        if (v23 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && HIWORD(v25) << 16 == 1114112)
        {
          v19 = 0;
          *a11 = v24;
          v20 = v28;
          *a12 = v27;
          *a13 = v20;
          *a14 = v29;
          return v19;
        }
      }
      else
      {
        v19 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v19;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v19 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v19;
}

uint64_t VTCompressionSessionRemoteClient_PrepareToEncodeTiles(mach_port_t a1, int a2)
{
  uint64_t v2;
  mach_msg_header_t msg;
  uint64_t v5;
  int v6;

  v5 = *MEMORY[0x1E0C804E8];
  v6 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18325;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v2 = mach_msg(&msg, 2097169, 0x24u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v2 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v2;
}

uint64_t VTCompressionSessionRemoteClient_EncodeTile(mach_port_name_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v9;
  int v11;
  mach_port_name_t name[4];
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v13 = 0u;
  *(_OWORD *)name = 0u;
  DWORD2(v13) = a2;
  v14 = 1245184;
  v15 = a3;
  v16 = 16777472;
  v17 = a4;
  v18 = a7;
  v19 = 16777472;
  v20 = a8;
  v21 = *MEMORY[0x1E0C804E8];
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a8;
  v26 = a9;
  v11 = -2147483629;
  name[1] = a1;
  *(_QWORD *)&v13 = 0x300004796;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)&v11);
  v9 = mach_msg((mach_msg_header_t *)&v11, 2097169, 0x70u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v9 - 268435459) <= 1)
  {
    if ((v11 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], name[2]);
    mach_msg_destroy((mach_msg_header_t *)&v11);
  }
  return v9;
}

uint64_t VTCompressionSessionRemoteClient_CompleteTiles(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x479700000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t VTCompressionSessionRemoteClient_MotionEstimationCreate(mach_port_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, char *src, _DWORD *a9, _QWORD *a10, _QWORD *a11, _DWORD *a12)
{
  int v13;
  mach_msg_size_t v14;
  mach_port_t special_reply_port;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mach_msg_header_t rcv_name;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[33];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  memset(v28, 0, 432);
  v23 = 0x13000000000000;
  v26 = 0;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v21 = 2;
  v22 = a2;
  v24 = a6;
  LODWORD(v25) = 16777472;
  HIDWORD(v25) = a7;
  v26 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = __PAIR64__(a5, a4);
  LODWORD(v28[0]) = a7;
  if (MEMORY[0x1E0C84128])
    v13 = mig_strncpy_zerofill((char *)v28 + 12, src, 512);
  else
    v13 = mig_strncpy((char *)v28 + 12, src, 512);
  DWORD1(v28[0]) = 0;
  DWORD2(v28[0]) = v13;
  v14 = ((v13 + 3) & 0xFFFFFFFC) + 92;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x479800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v16 = mach_msg(&rcv_name, 3162387, v14, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v17 = v16;
  if ((v16 - 268435458) > 0xE || ((1 << (v16 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v16)
    {
      if (rcv_name.msgh_id == 71)
      {
        v17 = 4294966988;
      }
      else if (rcv_name.msgh_id == 18428)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v17 = 4294966996;
            if ((_DWORD)v23)
            {
              if (rcv_name.msgh_remote_port)
                v17 = 4294966996;
              else
                v17 = v23;
            }
          }
          else
          {
            v17 = 4294966996;
          }
          goto LABEL_29;
        }
        v17 = 4294966996;
        if (v21 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && HIWORD(v23) << 16 == 1114112)
        {
          v17 = 0;
          *a9 = v22;
          v18 = v26;
          *a10 = v25;
          *a11 = v18;
          *a12 = v27;
          return v17;
        }
      }
      else
      {
        v17 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v17;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v17 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v17;
}

uint64_t VTCompressionSessionRemoteClient_MotionEstimationCopySourcePixelBufferAttributes(int a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _BYTE msg[36];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x479900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x44u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18429)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v10 = 4294966996;
              else
                v10 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v10 = 4294966996;
          }
          goto LABEL_30;
        }
        v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v15) == 1)
        {
          v12 = DWORD1(v15);
          if (DWORD1(v15) == (_DWORD)v16)
          {
            v10 = 0;
            *a2 = *(_QWORD *)&msg[28];
            *a3 = v12;
            *a4 = DWORD1(v16);
            return v10;
          }
        }
      }
      else
      {
        v10 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v10 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_30;
  }
  return v10;
}

uint64_t VTCompressionSessionRemoteClient_EstimateMotion(int a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE msg[36];
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  *(_OWORD *)&msg[20] = 0u;
  v16 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[28] = a2;
  v11 = 1245184;
  v12 = a3;
  v13 = 16777472;
  v14 = a4;
  v15 = a5;
  v17 = 1245184;
  v18 = a6;
  v19 = 16777472;
  v20 = a7;
  v21 = *MEMORY[0x1E0C804E8];
  v22 = a4;
  v23 = a7;
  v24 = a8;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(_QWORD *)&msg[20] = 0x40000479ALL;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v8 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x6Cu, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v8 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v8;
}

uint64_t VTCompressionSessionRemoteClient_CompleteMotionEstimation(mach_port_t a1)
{
  uint64_t v1;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x479B00000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v1 = mach_msg(&msg, 2097169, 0x18u, 0, 0, *MEMORY[0x1E0CA1FB0], 0);
  if ((v1 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v1;
}

uint64_t (*vtcompressionsession_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 18332) >= 0xFFFFFFE0)
    return VTCompressionSessionRemoteServer_vtcompressionsession_subsystem[5 * (v1 - 18300) + 5];
  else
    return 0;
}

uint64_t _XCreate_0(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  const __CFDictionary *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 4)
    goto LABEL_21;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x88 || v5 > 0x288)
    goto LABEL_21;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || *(_BYTE *)(result + 67) != 1
    || *(_BYTE *)(result + 83) != 1)
  {
    goto LABEL_20;
  }
  v6 = *(_DWORD *)(result + 132);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 136 < v6)
    goto LABEL_21;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 136)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 116)
    || *(_DWORD *)(result + 68) != *(_DWORD *)(result + 120)
    || *(_DWORD *)(result + 84) != *(_DWORD *)(result + 124))
  {
LABEL_20:
    v3 = -300;
    goto LABEL_21;
  }
  result = (uint64_t)memchr((void *)(result + 136), 0, v5 - 136);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_22;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_21;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 96);
  v11 = *(_DWORD *)(v4 + 104);
  v12 = *(_DWORD *)(v4 + 108);
  v13 = *(_DWORD *)(v4 + 112);
  v14 = *(_QWORD *)(v4 + 40);
  v15 = *(_DWORD *)(v4 + 52);
  v16 = *(_QWORD *)(v4 + 56);
  v17 = *(_DWORD *)(v4 + 68);
  v18 = *(const __CFDictionary **)(v4 + 72);
  v19 = *(_DWORD *)(v4 + 84);
  v20 = *(_OWORD *)(v7 + 36);
  v21[0] = *(_OWORD *)(v7 + 20);
  v21[1] = v20;
  result = VTCompressionSessionRemoteServer_Create(v8, v9, v21, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, (const char *)(v4 + 136), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_22:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XDestroy_0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_Destroy(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XCopySupportedPropertyDictionary_0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTCompressionSessionRemoteServer_CopySupportedPropertyDictionary(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *_XCopySerializableProperties_0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTCompressionSessionRemoteServer_CopySerializableProperties(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

const char *_XCopyProperty_0(const char *result, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;

  if ((*(_DWORD *)result & 0x80000000) != 0
    || (v3 = result, v4 = *((unsigned int *)result + 1), v4 < 0x28)
    || v4 > 0x228
    || ((v5 = *((_DWORD *)result + 9), v5 <= 0x200) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = (const char *)memchr((void *)(result + 40), 0, v4 - 40)) == 0))
  {
    *(_DWORD *)(a2 + 32) = -304;
LABEL_12:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (const char *)VTCompressionSessionRemoteServer_CopyProperty(*((unsigned int *)v3 + 3), v3 + 40, (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XSetProperty_0(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v6 = *(_DWORD *)(result + 4);
  if (v6 < 0x40 || v6 > 0x240)
    goto LABEL_3;
  if (*(_BYTE *)(result + 39) != 1)
    goto LABEL_18;
  v7 = *(_DWORD *)(result + 56);
  if (v7 > 0x200)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
LABEL_4:
    *(_QWORD *)(a2 + 24) = v4;
    return result;
  }
  v3 = -304;
  if (v6 - 64 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 64)
    goto LABEL_3;
  v9 = *(_DWORD *)(result + 40);
  if (v9 != *(_DWORD *)(result + v8 + 60))
  {
LABEL_18:
    v3 = -300;
    goto LABEL_3;
  }
  v10 = 572;
  if (*(unsigned int *)(result + 4) < 0x23CuLL)
    v10 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 60), 0, v10 - 60);
  if (!result)
    goto LABEL_2;
  result = VTCompressionSessionRemoteServer_SetProperty(*(unsigned int *)(v5 + 12), (const char *)(v5 + 60), *(_QWORD *)(v5 + 28), v9, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if ((_DWORD)result)
    goto LABEL_4;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetMultiPassStorage(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    v3 = *MEMORY[0x1E0C804E8];
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v4 = -300;
    goto LABEL_8;
  }
  result = VTCompressionSessionRemoteServer_SetMultiPassStorage(*(unsigned int *)(result + 12), *(unsigned int *)(result + 28), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v3 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v3;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_9:
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t _XSetProperties_0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = VTCompressionSessionRemoteServer_SetProperties(*(unsigned int *)(result + 12), *(_QWORD *)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

_DWORD *_XPrepareToEncodeFrames(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_PrepareToEncodeFrames(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XEncodeFrame(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 18 && *(_DWORD *)(result + 4) == 404)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112
      && *(_BYTE *)(result + 51) == 1
      && *(unsigned __int16 *)(result + 66) << 16 == 1114112
      && *(_BYTE *)(result + 79) == 1
      && *(_BYTE *)(result + 95) == 1
      && *(unsigned __int16 *)(result + 110) << 16 == 1114112
      && *(_BYTE *)(result + 123) == 1
      && *(_BYTE *)(result + 139) == 1
      && *(unsigned __int16 *)(result + 154) << 16 == 1114112
      && *(_BYTE *)(result + 167) == 1
      && *(_BYTE *)(result + 183) == 1)
    {
      if (*(unsigned __int16 *)(result + 198) << 16 == 1114112
        && *(_BYTE *)(result + 211) == 1
        && *(_BYTE *)(result + 227) == 1
        && *(unsigned __int16 *)(result + 242) << 16 == 1114112
        && *(_BYTE *)(result + 255) == 1
        && *(_BYTE *)(result + 271) == 1
        && *(_BYTE *)(result + 287) == 1)
      {
        v2 = *(_DWORD *)(result + 52);
        if (v2 == *(_DWORD *)(result + 300))
        {
          v3 = *(_DWORD *)(result + 80);
          if (v3 == *(_DWORD *)(result + 304))
          {
            v4 = *(_DWORD *)(result + 96);
            if (v4 == *(_DWORD *)(result + 308))
            {
              v5 = *(_DWORD *)(result + 124);
              if (v5 == *(_DWORD *)(result + 312))
              {
                v6 = *(_DWORD *)(result + 140);
                if (v6 == *(_DWORD *)(result + 316))
                {
                  v7 = *(_DWORD *)(result + 168);
                  if (v7 == *(_DWORD *)(result + 320))
                  {
                    v8 = *(_DWORD *)(result + 184);
                    if (v8 == *(_DWORD *)(result + 324))
                    {
                      v9 = *(_DWORD *)(result + 212);
                      if (v9 == *(_DWORD *)(result + 328))
                      {
                        v10 = *(_DWORD *)(result + 228);
                        if (v10 == *(_DWORD *)(result + 332))
                        {
                          v11 = *(_DWORD *)(result + 256);
                          if (v11 == *(_DWORD *)(result + 336))
                          {
                            v12 = *(_DWORD *)(result + 272);
                            if (v12 == *(_DWORD *)(result + 340))
                            {
                              v13 = *(_DWORD *)(result + 288);
                              if (v13 == *(_DWORD *)(result + 392))
                              {
                                v31 = *(_DWORD *)(result + 12);
                                v30 = *(_DWORD *)(result + 28);
                                v14 = *(_QWORD *)(result + 40);
                                v33 = *(_DWORD *)(result + 56);
                                v32 = *(_QWORD *)(result + 68);
                                v34 = *(_QWORD *)(result + 84);
                                v15 = *(_DWORD *)(result + 100);
                                v16 = *(_QWORD *)(result + 112);
                                v17 = *(_QWORD *)(result + 128);
                                v18 = *(_DWORD *)(result + 144);
                                v19 = *(_QWORD *)(result + 156);
                                v20 = *(_QWORD *)(result + 172);
                                v21 = *(_DWORD *)(result + 188);
                                v22 = *(_QWORD *)(result + 200);
                                v23 = *(_QWORD *)(result + 216);
                                v24 = *(_DWORD *)(result + 232);
                                v25 = *(_QWORD *)(result + 244);
                                v26 = *(_QWORD *)(result + 260);
                                v27 = *(_QWORD *)(result + 276);
                                v28 = *(_QWORD *)(result + 396);
                                v38 = *(_OWORD *)(result + 344);
                                v39 = *(_QWORD *)(result + 360);
                                v36 = *(_OWORD *)(result + 368);
                                v37 = *(_QWORD *)(result + 384);
                                result = VTCompressionSessionRemoteServer_EncodeFrame(v31, v30, v14, v2, v33, v32, v3, v34, v4, v15, v16, v5, v17, v6, v18, v19, v7, v20, v8,
                                           v21,
                                           v22,
                                           v9,
                                           v23,
                                           v10,
                                           v24,
                                           v25,
                                           v11,
                                           v26,
                                           v12,
                                           &v38,
                                           &v36,
                                           v27,
                                           v13,
                                           v28);
                                *(_DWORD *)(a2 + 32) = result;
                                return result;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v29 = -300;
    }
    else
    {
      v29 = -300;
    }
  }
  else
  {
    v29 = -304;
  }
  *(_DWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XDequeueNextPendingEncodedFrame(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  *(_DWORD *)(a2 + 48) = 16777473;
  *(_DWORD *)(a2 + 64) = 16777472;
  result = (_DWORD *)VTCompressionSessionRemoteServer_DequeueNextPendingEncodedFrame(result[3], (_DWORD *)(a2 + 80), (_QWORD *)(a2 + 84), (_DWORD *)(a2 + 92), (_DWORD *)(a2 + 96), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 40), (_DWORD *)(a2 + 100), (_DWORD *)(a2 + 104), (int *)(a2 + 108), (vm_address_t *)(a2 + 56), (_DWORD *)(a2 + 112), (_DWORD *)(a2 + 116));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 72) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 120;
  *(_DWORD *)(a2 + 24) = 3;
  return result;
}

uint64_t _XCompleteFrames(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 56)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v3 = *(unsigned int *)(result + 12);
    v4 = *(_OWORD *)(result + 32);
    v5 = *(_QWORD *)(result + 48);
    result = VTCompressionSessionRemoteServer_CompleteFrames(v3, &v4);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *_XBeginPass(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_BeginPass(result[3], result[8], (uint32_t *)(a2 + 36), (_DWORD *)(a2 + 40));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 44;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XEndPass(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_EndPass(result[3], (_DWORD *)(a2 + 36), (uint32_t *)(a2 + 40), (_DWORD *)(a2 + 44));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 48;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XGetTimeRangesForNextPass(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTCompressionSessionRemoteServer_GetTimeRangesForNextPass(result[3], (CMItemCount *)(a2 + 52), (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 60), (_DWORD *)(a2 + 64));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 68;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XMultiPassStorageCreate(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 3)
    goto LABEL_19;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x98 || v5 > 0x298)
    goto LABEL_19;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || *(_BYTE *)(result + 67) != 1)
  {
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(result + 148);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 152 < v6)
    goto LABEL_19;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 152)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 88) || *(_DWORD *)(result + 68) != *(_DWORD *)(result + 140))
  {
LABEL_18:
    v3 = -300;
    goto LABEL_19;
  }
  result = (uint64_t)memchr((void *)(result + 152), 0, v5 - 152);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_19:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_20;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_19;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 80);
  v11 = *(const char **)(v4 + 40);
  v12 = *(_DWORD *)(v4 + 52);
  v13 = *(_QWORD *)(v4 + 56);
  v14 = *(_DWORD *)(v4 + 68);
  v15 = *(_OWORD *)(v7 + 36);
  v17[0] = *(_OWORD *)(v7 + 20);
  v17[1] = v15;
  v16 = *(_OWORD *)(v4 + 108);
  v18[0] = *(_OWORD *)(v4 + 92);
  v18[1] = v16;
  v18[2] = *(_OWORD *)(v4 + 124);
  result = VTCompressionSessionRemoteServer_MultiPassStorageCreate(v8, v9, v17, v10, v11, v12, v18, v13, v14, (const char *)(v4 + 152), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_20:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XMultiPassStorageDestroy(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_MultiPassStorageDestroy(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

const char *_XMultiPassStorageSetIdentifier(const char *result, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if ((*(_DWORD *)result & 0x80000000) != 0
    || (v3 = result, v4 = *((unsigned int *)result + 1), v4 < 0x28)
    || v4 > 0x228
    || ((v5 = *((_DWORD *)result + 9), v5 <= 0x200) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = (const char *)memchr((void *)(result + 40), 0, v4 - 40)) == 0))
  {
    *(_DWORD *)(a2 + 32) = -304;
    v9 = *MEMORY[0x1E0C804E8];
LABEL_12:
    *(_QWORD *)(a2 + 24) = v9;
    return result;
  }
  result = (const char *)VTCompressionSessionRemoteServer_MultiPassStorageSetIdentifier(*((unsigned int *)v3 + 3), v3 + 40, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v9 = *MEMORY[0x1E0C804E8];
  if ((_DWORD)result)
    goto LABEL_12;
  *(_QWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

_DWORD *_XMultiPassStorageCopyIdentifier(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_MultiPassStorageCopyIdentifier(result[3], (char *)(a2 + 44));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      result = (_DWORD *)strlen((const char *)(a2 + 44));
      if (!(((unint64_t)result + 1) >> 32))
      {
        *(_DWORD *)(a2 + 36) = 0;
        *(_DWORD *)(a2 + 40) = (_DWORD)result + 1;
        *(_DWORD *)(a2 + 4) = (((_DWORD)result + 4) & 0xFFFFFFFC) + 44;
        return result;
      }
      *(_DWORD *)(a2 + 32) = -304;
    }
    *(_QWORD *)(a2 + 24) = v3;
  }
  return result;
}

uint64_t _XMultiPassStorageSetDataAtTimeStamp(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  const UInt8 *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 84)
  {
    v8 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v8;
    v7 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 80)))
  {
    v8 = -300;
    goto LABEL_9;
  }
  v4 = *(unsigned int *)(result + 12);
  v5 = *(_DWORD *)(result + 76);
  v6 = *(const UInt8 **)(result + 28);
  v9 = *(_OWORD *)(result + 52);
  v10 = *(_QWORD *)(result + 68);
  result = VTCompressionSessionRemoteServer_MultiPassStorageSetDataAtTimeStamp(v4, (uint64_t)&v9, v5, v6, v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v7 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v7;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

_DWORD *_XMultiPassStorageGetTimeStamp(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x40)
    && v4 <= 0x240
    && ((v5 = result[15], v5 <= 0x200) ? (v6 = (int)v4 - 64 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 64, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 16, 0, v4 - 64)) != 0))
  {
    v10 = v3[3];
    v11 = *((_OWORD *)v3 + 2);
    v12 = *((_QWORD *)v3 + 6);
    result = (_DWORD *)VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStamp(v10, (uint64_t)&v11, (const char *)v3 + 64, (_QWORD *)(a2 + 36), (_DWORD *)(a2 + 60));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v9 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 4) = 64;
      return result;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    v9 = *MEMORY[0x1E0C804E8];
  }
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

_DWORD *_XMultiPassStorageGetTimeStampAndDuration(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*result & 0x80000000) == 0
    && (v3 = result, v4 = result[1], v4 >= 0x40)
    && v4 <= 0x240
    && ((v5 = result[15], v5 <= 0x200) ? (v6 = (int)v4 - 64 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 64, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        v8 && (result = memchr(result + 16, 0, v4 - 64)) != 0))
  {
    v10 = v3[3];
    v11 = *((_OWORD *)v3 + 2);
    v12 = *((_QWORD *)v3 + 6);
    result = (_DWORD *)VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStampAndDuration(v10, &v11, (const char *)v3 + 64, (_QWORD *)(a2 + 36), (_QWORD *)(a2 + 60), (_DWORD *)(a2 + 84));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v9 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 4) = 88;
      return result;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 32) = -304;
    v9 = *MEMORY[0x1E0C804E8];
  }
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t _XMultiPassStorageCopyDataAtTimeStamp(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 60)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    v3 = *(unsigned int *)(result + 12);
    v4 = *(_DWORD *)(result + 56);
    v5 = *(_OWORD *)(result + 32);
    v6 = *(_QWORD *)(result + 48);
    result = VTCompressionSessionRemoteServer_MultiPassStorageCopyDataAtTimeStamp(v3, (uint64_t)&v5, v4, (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
      *(_DWORD *)a2 |= 0x80000000;
      *(_DWORD *)(a2 + 4) = 60;
      *(_DWORD *)(a2 + 24) = 1;
      return result;
    }
    *(_DWORD *)(a2 + 32) = result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XGetNextPendingNotification_0(_DWORD *result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  v6 = 0;
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTCompressionSessionRemoteServer_GetNextPendingNotification(result[3], (_DWORD *)(a2 + 52), (_QWORD *)(a2 + 56), (char *)(a2 + 72), (vm_address_t *)(a2 + 28), &v6);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v3 = v6;
  *(_DWORD *)(a2 + 40) = v6;
  v4 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  result = (_DWORD *)strlen((const char *)(a2 + 72));
  if (((unint64_t)result + 1) >> 32)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = v4;
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 68) = (_DWORD)result + 1;
    v5 = ((_DWORD)result + 4) & 0xFFFFFFFC;
    *(_DWORD *)(a2 + v5 + 72) = v3;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = v5 + 76;
    *(_DWORD *)(a2 + 24) = 1;
  }
  return result;
}

uint64_t _XTileCreate_0(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 3)
    goto LABEL_19;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x74 || v5 > 0x274)
    goto LABEL_19;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || *(_BYTE *)(result + 67) != 1)
  {
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(result + 112);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 116 < v6)
    goto LABEL_19;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 116)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 100) || *(_DWORD *)(result + 68) != *(_DWORD *)(result + 104))
  {
LABEL_18:
    v3 = -300;
    goto LABEL_19;
  }
  result = (uint64_t)memchr((void *)(result + 116), 0, v5 - 116);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_19:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_20;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_19;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(unsigned int *)(v4 + 96);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(_DWORD *)(v4 + 52);
  v13 = *(_QWORD *)(v4 + 56);
  v14 = *(_DWORD *)(v4 + 68);
  v15 = *(_OWORD *)(v7 + 36);
  v16[0] = *(_OWORD *)(v7 + 20);
  v16[1] = v15;
  result = VTCompressionSessionRemoteServer_TileCreate(v8, v9, v16, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v10, v11, v12, v13, v14, (const char *)(v4 + 116), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_20:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XPrepareToEncodeTiles(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_PrepareToEncodeTiles(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XEncodeTile(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 3 && *(_DWORD *)(result + 4) == 112)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112
      && *(_BYTE *)(result + 51) == 1
      && *(_BYTE *)(result + 67) == 1)
    {
      v3 = *(_DWORD *)(result + 52);
      if (v3 == *(_DWORD *)(result + 80))
      {
        v4 = *(_DWORD *)(result + 68);
        if (v4 == *(_DWORD *)(result + 100))
        {
          result = VTCompressionSessionRemoteServer_EncodeTile(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_QWORD *)(result + 40), v3, *(_QWORD *)(result + 84), *(_QWORD *)(result + 92), *(_QWORD *)(result + 56), v4, *(_QWORD *)(result + 104));
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XCompleteTiles(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_CompleteTiles(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XMotionEstimationCreate(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  _OWORD v16[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 2)
    goto LABEL_3;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x5C || v5 > 0x25C)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(_BYTE *)(result + 51) != 1)
    goto LABEL_19;
  v6 = *(_DWORD *)(result + 88);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 92 < v6)
    goto LABEL_3;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 92)
    goto LABEL_2;
  if (*(_DWORD *)(result + 52) != *(_DWORD *)(result + 80))
  {
LABEL_19:
    v3 = -300;
    goto LABEL_3;
  }
  result = (uint64_t)memchr((void *)(result + 92), 0, v5 - 92);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_4;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 64);
  v11 = *(unsigned int *)(v4 + 72);
  v12 = *(unsigned int *)(v4 + 76);
  v13 = *(_QWORD *)(v4 + 40);
  v14 = *(_DWORD *)(v4 + 52);
  v15 = *(_OWORD *)(v7 + 36);
  v16[0] = *(_OWORD *)(v7 + 20);
  v16[1] = v15;
  result = VTCompressionSessionRemoteServer_MotionEstimationCreate(v8, v9, v16, v10, v11, v12, v13, v14, (const char *)(v4 + 92), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64));
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_4:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XMotionEstimationCopySourcePixelBufferAttributes(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)VTCompressionSessionRemoteServer_MotionEstimationCopySourcePixelBufferAttributes(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (kern_return_t *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XEstimateMotion(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 4 && *(_DWORD *)(result + 4) == 108)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112
      && *(_BYTE *)(result + 51) == 1
      && *(unsigned __int16 *)(result + 66) << 16 == 1114112
      && *(_BYTE *)(result + 79) == 1)
    {
      v3 = *(_DWORD *)(result + 52);
      if (v3 == *(_DWORD *)(result + 92))
      {
        v4 = *(_DWORD *)(result + 80);
        if (v4 == *(_DWORD *)(result + 96))
        {
          result = VTCompressionSessionRemoteServer_EstimateMotion(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_QWORD *)(result + 40), v3, *(_DWORD *)(result + 56), *(_QWORD *)(result + 68), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XCompleteMotionEstimation(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteServer_CompleteMotionEstimation(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t VTCompressionSessionRemoteCallbackClient_FrameIsPending(mach_port_t a1, uint64_t a2)
{
  mach_msg_header_t msg;
  uint64_t v4;
  uint64_t v5;

  v4 = *MEMORY[0x1E0C804E8];
  v5 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18351;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 1, 0x28u, 0, 0, 0, 0);
}

uint64_t VTCompressionSessionRemoteCallbackClient_EncodeReturn(mach_port_t a1, uint64_t a2, int a3, int a4, int a5)
{
  mach_msg_header_t msg;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v8 = a2;
  v7 = *MEMORY[0x1E0C804E8];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18352;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 1, 0x34u, 0, 0, 0, 0);
}

uint64_t VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(mach_port_t a1, uint64_t a2, int a3)
{
  mach_msg_header_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *MEMORY[0x1E0C804E8];
  v6 = a2;
  v7 = a3;
  *(_QWORD *)&v4.msgh_bits = 19;
  v4.msgh_voucher_port = 0;
  v4.msgh_id = 18353;
  v4.msgh_remote_port = a1;
  v4.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&v4);
  return mach_msg(&v4, 1, 0x2Cu, 0, 0, 0, 0);
}

uint64_t VTCompressionSessionRemoteCallbackClient_PrepareToEncodeFramesReturn(mach_port_t a1, uint64_t a2, int a3)
{
  mach_msg_header_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *MEMORY[0x1E0C804E8];
  v6 = a2;
  v7 = a3;
  *(_QWORD *)&v4.msgh_bits = 19;
  v4.msgh_voucher_port = 0;
  v4.msgh_id = 18354;
  v4.msgh_remote_port = a1;
  v4.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&v4);
  return mach_msg(&v4, 1, 0x2Cu, 0, 0, 0, 0);
}

uint64_t VTCompressionSessionRemoteCallbackClient_PrepareToEncodeTilesReturn(mach_port_t a1, uint64_t a2, uint64_t a3, int a4)
{
  mach_msg_header_t msg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v6 = *MEMORY[0x1E0C804E8];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18355;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 1, 0x34u, 0, 0, 0, 0);
}

uint64_t (*vtcompressionsessioncallback_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 18356) >= 0xFFFFFFFA)
    return VTCompressionSessionRemoteCallbackServer_vtcompressionsessioncallback_subsystem[5
                                                                                         * (v1 - 18350)
                                                                                         + 5];
  else
    return 0;
}

_DWORD *_XNotificationIsPending(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteCallbackServer_NotificationIsPending();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_XFrameIsPending(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTCompressionSessionRemoteCallbackServer_FrameIsPending();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XEncodeReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTCompressionSessionRemoteCallbackServer_EncodeReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_DWORD *)(result + 40), *(_DWORD *)(result + 44), *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _XCompleteFramesReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTCompressionSessionRemoteCallbackServer_CompleteFramesReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_DWORD *)(result + 40));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _XPrepareToEncodeFramesReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTCompressionSessionRemoteCallbackServer_PrepareToEncodeFramesReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_DWORD *)(result + 40));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _XPrepareToEncodeTilesReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTCompressionSessionRemoteCallbackServer_PrepareToEncodeTilesReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t vtcompressionsessioncallback_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 18356) >= 0xFFFFFFFA
    && (v5 = (void (*)(void))VTCompressionSessionRemoteCallbackServer_vtcompressionsessioncallback_subsystem[5 * (v4 - 18350) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t VTDecompressionSessionRemoteCallbackClient_FrameIsPending(mach_port_t a1, uint64_t a2)
{
  mach_msg_header_t msg;
  uint64_t v4;
  uint64_t v5;

  v4 = *MEMORY[0x1E0C804E8];
  v5 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18251;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 2097153, 0x28u, 0, 0, 0, 0);
}

uint64_t VTDecompressionSessionRemoteCallbackClient_DecodeFrameReturn(mach_port_t a1, uint64_t a2, int a3, int a4, int a5)
{
  mach_msg_header_t msg;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v8 = a2;
  v7 = *MEMORY[0x1E0C804E8];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18252;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 2097153, 0x34u, 0, 0, 0, 0);
}

uint64_t VTDecompressionSessionRemoteCallbackClient_FinishDelayedFramesReturn(mach_port_t a1, uint64_t a2, int a3)
{
  mach_msg_header_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = *MEMORY[0x1E0C804E8];
  v6 = a2;
  v7 = a3;
  *(_QWORD *)&v4.msgh_bits = 19;
  v4.msgh_voucher_port = 0;
  v4.msgh_id = 18253;
  v4.msgh_remote_port = a1;
  v4.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&v4);
  return mach_msg(&v4, 2097153, 0x2Cu, 0, 0, 0, 0);
}

uint64_t (*vtdecompressionsessioncallback_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 18254) >= 0xFFFFFFFC)
    return VTDecompressionSessionRemoteCallbackServer_vtdecompressionsessioncallback_subsystem[5
                                                                                             * (v1 - 18250)
                                                                                             + 5];
  else
    return 0;
}

_DWORD *_XNotificationIsPending_0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteCallbackServer_NotificationIsPending();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_XFrameIsPending_0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)VTDecompressionSessionRemoteCallbackServer_FrameIsPending();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _XDecodeFrameReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTDecompressionSessionRemoteCallbackServer_DecodeFrameReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_DWORD *)(result + 40), *(_DWORD *)(result + 44), *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _XFinishDelayedFramesReturn(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = VTDecompressionSessionRemoteCallbackServer_FinishDelayedFramesReturn(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_DWORD *)(result + 40));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t vtdecompressionsessioncallback_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 18254) >= 0xFFFFFFFC
    && (v5 = (void (*)(void))VTDecompressionSessionRemoteCallbackServer_vtdecompressionsessioncallback_subsystem[5 * (v4 - 18250) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void VTParavirtualizationCreateSampleBufferFromSerializedAtomDataBlockBuffer_cold_1()
{
  unsigned __int8 *v0;
  CC_SHA256_CTX *v1;

  dlerror();
  v0 = (unsigned __int8 *)abort_report_np();
  CC_SHA256_Final(v0, v1);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1E0C97D08](theArray, range.location, range.length, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1E0C984E8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98578](theDict, key);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyFailureReason(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98638](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F88](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1E0C99008](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1E0C99560]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGColorConversionInfoRef CGColorConversionInfoCreateFromList(CFDictionaryRef options, CGColorSpaceRef a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, ...)
{
  return (CGColorConversionInfoRef)MEMORY[0x1E0C9BC50](options, a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

uint64_t CGColorConversionInfoIterateFunctionsWithCallbacks()
{
  return MEMORY[0x1E0C9BC70]();
}

uint64_t CGColorFunctionGetInputRange()
{
  return MEMORY[0x1E0C9BCE0]();
}

uint64_t CGColorFunctionGetOutputRange()
{
  return MEMORY[0x1E0C9BCE8]();
}

uint64_t CGColorMatrixGetMatrix()
{
  return MEMORY[0x1E0C9BD40]();
}

uint64_t CGColorNxMTransformGetTransform()
{
  return MEMORY[0x1E0C9BD50]();
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9BDC0](space);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE58](ref);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE60](plist);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1E0C9BEF8]();
}

BOOL CGColorSpaceIsHDR(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF00](a1);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF50](a1);
}

uint64_t CGColorTRCGetFunction()
{
  return MEMORY[0x1E0C9BF58]();
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5E0](info, size, callbacks);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1E0C9CDC0]();
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D808]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1E0C9D818](dict, size);
}

uint64_t CMBaseClassGetCFTypeID()
{
  return MEMORY[0x1E0C9EAF8]();
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1E0C9EB00]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1E0C9EB28]();
}

OSStatus CMBlockBufferAppendBufferReference(CMBlockBufferRef theBuffer, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1E0C9EB50](theBuffer, targetBBuf, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferAppendMemoryBlock(CMBlockBufferRef theBuffer, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1E0C9EB58](theBuffer, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x1E0C9EB68](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateContiguous(CFAllocatorRef structureAllocator, CMBlockBufferRef sourceBuffer, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB70](structureAllocator, sourceBuffer, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateEmpty(CFAllocatorRef structureAllocator, uint32_t subBlockCapacity, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB78](structureAllocator, *(_QWORD *)&subBlockCapacity, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithBufferReference(CFAllocatorRef structureAllocator, CMBlockBufferRef bufferReference, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB80](structureAllocator, bufferReference, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EB98](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

Boolean CMBlockBufferIsRangeContiguous(CMBlockBufferRef theBuffer, size_t offset, size_t length)
{
  return MEMORY[0x1E0C9EBC0](theBuffer, offset, length);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x1E0C9EBC8](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

uint64_t CMByteStreamCreateWritableForBlockBuffer()
{
  return MEMORY[0x1E0C9ED10]();
}

CFDictionaryRef CMCopyDictionaryOfAttachments(CFAllocatorRef allocator, CMAttachmentBearerRef target, CMAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9ED80](allocator, target, *(_QWORD *)&attachmentMode);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9EDC8](desc, extensionKey);
}

CFDictionaryRef CMFormatDescriptionGetExtensions(CMFormatDescriptionRef desc)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9EDD0](desc);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDD8](desc);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDE0](desc);
}

CFTypeID CMFormatDescriptionGetTypeID(void)
{
  return MEMORY[0x1E0C9EDE8]();
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x1E0C9EE00](target, key, attachmentModeOut);
}

CMMemoryPoolRef CMMemoryPoolCreate(CFDictionaryRef options)
{
  return (CMMemoryPoolRef)MEMORY[0x1E0C9EE18](options);
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1E0C9EEB8]();
}

uint64_t CMNotificationCenterBarrier()
{
  return MEMORY[0x1E0C9EEC0]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1E0C9EED0]();
}

uint64_t CMNotificationCenterRegisterForBarrierSupport()
{
  return MEMORY[0x1E0C9EED8]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1E0C9EEE8]();
}

uint64_t CMNotificationCenterUnregisterForBarrierSupport()
{
  return MEMORY[0x1E0C9EEF0]();
}

void CMPropagateAttachments(CMAttachmentBearerRef source, CMAttachmentBearerRef destination)
{
  MEMORY[0x1E0C9EF08](source, destination);
}

OSStatus CMSampleBufferCallForEachSample(CMSampleBufferRef sbuf, OSStatus (__cdecl *callback)(CMSampleBufferRef, CMItemCount, void *), void *refcon)
{
  return MEMORY[0x1E0C9EF28](sbuf, callback, refcon);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF40](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

OSStatus CMSampleBufferCreateReady(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF70](allocator, dataBuffer, formatDescription, numSamples, numSampleTimingEntries, sampleTimingArray, numSampleSizeEntries, sampleSizeArray);
}

Boolean CMSampleBufferDataIsReady(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9EF90](sbuf);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x1E0C9EFB0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetDecodeTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC0](retstr, sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x1E0C9EFD0](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9EFE0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF0](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF8](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9F008](retstr, sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x1E0C9F010](sbuf, createIfNecessary);
}

size_t CMSampleBufferGetSampleSize(CMSampleBufferRef sbuf, CMItemIndex sampleIndex)
{
  return MEMORY[0x1E0C9F018](sbuf, sampleIndex);
}

OSStatus CMSampleBufferGetSampleSizeArray(CMSampleBufferRef sbuf, CMItemCount sizeArrayEntries, size_t *sizeArrayOut, CMItemCount *sizeArrayEntriesNeededOut)
{
  return MEMORY[0x1E0C9F020](sbuf, sizeArrayEntries, sizeArrayOut, sizeArrayEntriesNeededOut);
}

OSStatus CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef sbuf, CMItemIndex sampleIndex, CMSampleTimingInfo *timingInfoOut)
{
  return MEMORY[0x1E0C9F028](sbuf, sampleIndex, timingInfoOut);
}

OSStatus CMSampleBufferGetSampleTimingInfoArray(CMSampleBufferRef sbuf, CMItemCount numSampleTimingEntries, CMSampleTimingInfo *timingArrayOut, CMItemCount *timingArrayEntriesNeededOut)
{
  return MEMORY[0x1E0C9F030](sbuf, numSampleTimingEntries, timingArrayOut, timingArrayEntriesNeededOut);
}

Boolean CMSampleBufferIsValid(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9F060](sbuf);
}

OSStatus CMSampleBufferSetDataBuffer(CMSampleBufferRef sbuf, CMBlockBufferRef dataBuffer)
{
  return MEMORY[0x1E0C9F070](sbuf, dataBuffer);
}

OSStatus CMSampleBufferSetDataReady(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9F088](sbuf);
}

OSStatus CMSampleBufferSetOutputPresentationTimeStamp(CMSampleBufferRef sbuf, CMTime *outputPresentationTimeStamp)
{
  return MEMORY[0x1E0C9F0A8](sbuf, outputPresentationTimeStamp);
}

uint64_t CMSessionCreate()
{
  return MEMORY[0x1E0D48330]();
}

void CMSetAttachments(CMAttachmentBearerRef target, CFDictionaryRef theAttachments, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0D0](target, theAttachments, *(_QWORD *)&attachmentMode);
}

OSStatus CMTagCollectionCreate(CFAllocatorRef allocator, const CMTag *tags, CMItemCount tagCount, CMTagCollectionRef *newCollectionOut)
{
  return MEMORY[0x1E0C9F178](allocator, tags, tagCount, newCollectionOut);
}

OSStatus CMTagCollectionGetTagsWithCategory(CMTagCollectionRef tagCollection, CMTagCategory category, CMTag *tagBuffer, CMItemCount tagBufferCount, CMItemCount *numberOfTagsCopied)
{
  return MEMORY[0x1E0C9F1A0](tagCollection, *(_QWORD *)&category, tagBuffer, tagBufferCount, numberOfTagsCopied);
}

int64_t CMTagGetSInt64Value(CMTag tag)
{
  return MEMORY[0x1E0C9F1E8](*(_QWORD *)&tag.category, tag.value);
}

CMTag CMTagMakeWithSInt64Value(CMTagCategory category, int64_t value)
{
  uint64_t v2;
  CMTagValue v3;
  CMTag result;

  v2 = MEMORY[0x1E0C9F210](*(_QWORD *)&category, value);
  result.value = v3;
  result.category = v2;
  result.dataType = HIDWORD(v2);
  return result;
}

OSStatus CMTaggedBufferGroupCreate(CFAllocatorRef allocator, CFArrayRef tagCollections, CFArrayRef buffers, CMTaggedBufferGroupRef *groupOut)
{
  return MEMORY[0x1E0C9F218](allocator, tagCollections, buffers, groupOut);
}

CVPixelBufferRef CMTaggedBufferGroupGetCVPixelBufferAtIndex(CMTaggedBufferGroupRef group, CFIndex index)
{
  return (CVPixelBufferRef)MEMORY[0x1E0C9F238](group, index);
}

CMItemCount CMTaggedBufferGroupGetCount(CMTaggedBufferGroupRef group)
{
  return MEMORY[0x1E0C9F248](group);
}

CMTagCollectionRef CMTaggedBufferGroupGetTagCollectionAtIndex(CMTaggedBufferGroupRef group, CFIndex index)
{
  return (CMTagCollectionRef)MEMORY[0x1E0C9F250](group, index);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

CFStringRef CMTimeCopyDescription(CFAllocatorRef allocator, CMTime *time)
{
  return (CFStringRef)MEMORY[0x1E0C9F2F8](allocator, time);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMaximum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x1E0C9F370](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMinimum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x1E0C9F378](retstr, time1, time2);
}

Boolean CMTimeRangeContainsTime(CMTimeRange *range, CMTime *time)
{
  return MEMORY[0x1E0C9F3A0](range, time);
}

Boolean CMTimeRangeEqual(CMTimeRange *range1, CMTimeRange *range2)
{
  return MEMORY[0x1E0C9F3C0](range1, range2);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3C8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F3D0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeGetIntersection(CMTimeRange *__return_ptr retstr, CMTimeRange *range, CMTimeRange *otherRange)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3D8](retstr, range, otherRange);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

OSStatus CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9F510](allocator, videoFormatDescription, *(_QWORD *)&stringEncoding, flavor, blockBufferOut);
}

OSStatus CMVideoFormatDescriptionCreate(CFAllocatorRef allocator, CMVideoCodecType codecType, int32_t width, int32_t height, CFDictionaryRef extensions, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F520](allocator, *(_QWORD *)&codecType, *(_QWORD *)&width, *(_QWORD *)&height, extensions, formatDescriptionOut);
}

OSStatus CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(CFAllocatorRef allocator, CMBlockBufferRef imageDescriptionBlockBuffer, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F530](allocator, imageDescriptionBlockBuffer, *(_QWORD *)&stringEncoding, flavor, formatDescriptionOut);
}

OSStatus CMVideoFormatDescriptionCreateFromHEVCParameterSets(CFAllocatorRef allocator, size_t parameterSetCount, const uint8_t *const *parameterSetPointers, const size_t *parameterSetSizes, int NALUnitHeaderLength, CFDictionaryRef extensions, CMFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F548](allocator, parameterSetCount, parameterSetPointers, parameterSetSizes, *(_QWORD *)&NALUnitHeaderLength, extensions, formatDescriptionOut);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x1E0C9F558](videoDesc);
}

uint64_t CMVideoFormatDescriptionGetVideoDynamicRange()
{
  return MEMORY[0x1E0C9F588]();
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8908](buffer, *(_QWORD *)&attachmentMode);
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x1E0CA8928](sourceBuffer, destinationBuffer);
}

void CVBufferRemoveAllAttachments(CVBufferRef buffer)
{
  MEMORY[0x1E0CA8938](buffer);
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  MEMORY[0x1E0CA8940](buffer, key);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8958](buffer, theAttachments, *(_QWORD *)&attachmentMode);
}

int CVColorPrimariesGetIntegerCodePointForString(CFStringRef colorPrimariesString)
{
  return MEMORY[0x1E0CA8960](colorPrimariesString);
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  return (CGColorSpaceRef)MEMORY[0x1E0CA89D0](attachments);
}

CGColorSpaceRef CVImageBufferGetColorSpace(CVImageBufferRef imageBuffer)
{
  return (CGColorSpaceRef)MEMORY[0x1E0CA89E0](imageBuffer);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  MEMORY[0x1E0CA8A40](textureCache, options);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

CFDictionaryRef CVPixelBufferCopyCreationAttributes(CVPixelBufferRef pixelBuffer)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8A90](pixelBuffer);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef allocator, CFArrayRef attributes, CFDictionaryRef *resolvedDictionaryOut)
{
  return MEMORY[0x1E0CA8AA8](allocator, attributes, resolvedDictionaryOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AC0](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

uint64_t CVPixelBufferGetAttributes()
{
  return MEMORY[0x1E0CA8AD8]();
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B08](pixelBuffer);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x1E0CA8B10](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1E0CA8B48]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

uint64_t CVPixelBufferIsCompatibleWithAttributes()
{
  return MEMORY[0x1E0CA8B60]();
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B68](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x1E0CA8B78](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolFlush(CVPixelBufferPoolRef pool, CVPixelBufferPoolFlushFlags options)
{
  MEMORY[0x1E0CA8B90](pool, options);
}

uint64_t CVPixelBufferPoolGetMaxBufferAge()
{
  return MEMORY[0x1E0CA8BA0]();
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8BA8](pool);
}

CFTypeID CVPixelBufferPoolGetTypeID(void)
{
  return MEMORY[0x1E0CA8BB0]();
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  MEMORY[0x1E0CA8BC8](pixelBufferPool);
}

CVPixelBufferPoolRef CVPixelBufferPoolRetain(CVPixelBufferPoolRef pixelBufferPool)
{
  return (CVPixelBufferPoolRef)MEMORY[0x1E0CA8BD0](pixelBufferPool);
}

uint64_t CVPixelBufferPoolSetMaxBufferAge()
{
  return MEMORY[0x1E0CA8BE0]();
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8C08](allocator, *(_QWORD *)&pixelFormat);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x1E0CA8C10]();
}

void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef description, OSType pixelFormat)
{
  MEMORY[0x1E0CA8C20](description, *(_QWORD *)&pixelFormat);
}

int CVTransferFunctionGetIntegerCodePointForString(CFStringRef transferFunctionString)
{
  return MEMORY[0x1E0CA8C30](transferFunctionString);
}

int CVYCbCrMatrixGetIntegerCodePointForString(CFStringRef yCbCrMatrixString)
{
  return MEMORY[0x1E0CA8C40](yCbCrMatrixString);
}

CFStringRef CVYCbCrMatrixGetStringForIntegerCodePoint(int yCbCrMatrixCodePoint)
{
  return (CFStringRef)MEMORY[0x1E0CA8C48](*(_QWORD *)&yCbCrMatrixCodePoint);
}

uint64_t CelestialShouldAllowHTPCIOSurfacesForHDRPlaybackToCA()
{
  return MEMORY[0x1E0C9F608]();
}

uint64_t CelestialShouldSupportHDR10Plus()
{
  return MEMORY[0x1E0C9F640]();
}

uint64_t CelestialShouldSupportHDRCodecs()
{
  return MEMORY[0x1E0C9F648]();
}

uint64_t ColorSyncMakeProfile()
{
  return MEMORY[0x1E0C95448]();
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  return (CFDataRef)MEMORY[0x1E0C95468](prof);
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  return (ColorSyncMutableProfileRef)MEMORY[0x1E0C95488](prof);
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
  MEMORY[0x1E0C954A8](prof, header);
}

uint64_t FigAV1Bridge_CopyITU_T_T35MetadataDolbyVisionRPURawByteSequence()
{
  return MEMORY[0x1E0C9F658]();
}

uint64_t FigAV1Bridge_CopyITU_T_T35MetadataHDR10PlusMetadata()
{
  return MEMORY[0x1E0C9F660]();
}

uint64_t FigAtomStreamAdvanceToNextAtom()
{
  return MEMORY[0x1E0C9F698]();
}

uint64_t FigAtomStreamGetCurrentAtomDataGlobalOffset()
{
  return MEMORY[0x1E0C9F6A8]();
}

uint64_t FigAtomStreamGetCurrentAtomTypeAndDataLength()
{
  return MEMORY[0x1E0C9F6C8]();
}

uint64_t FigAtomStreamInitWithBBuf()
{
  return MEMORY[0x1E0C9F6E0]();
}

uint64_t FigAtomStreamInitWithParent()
{
  return MEMORY[0x1E0C9F700]();
}

uint64_t FigAtomStreamReadCurrentAtomData()
{
  return MEMORY[0x1E0C9F720]();
}

uint64_t FigAtomStreamReadCurrentAtomDataAndCreateBBuf()
{
  return MEMORY[0x1E0C9F728]();
}

uint64_t FigAtomWriterAppendBlockBufferData()
{
  return MEMORY[0x1E0C9F738]();
}

uint64_t FigAtomWriterAppendData()
{
  return MEMORY[0x1E0C9F740]();
}

uint64_t FigAtomWriterBeginAtom()
{
  return MEMORY[0x1E0C9F750]();
}

uint64_t FigAtomWriterEndAtom()
{
  return MEMORY[0x1E0C9F760]();
}

uint64_t FigAtomWriterInitWithBlockBuffer()
{
  return MEMORY[0x1E0C9F780]();
}

uint64_t FigAtomWriterInitWithByteStream()
{
  return MEMORY[0x1E0C9F788]();
}

uint64_t FigAtomWriterInitWithParent()
{
  return MEMORY[0x1E0C9F790]();
}

uint64_t FigAtomicCompareAndSwap32()
{
  return MEMORY[0x1E0C9F7B0]();
}

uint64_t FigAtomicDecrement32()
{
  return MEMORY[0x1E0C9F7C0]();
}

uint64_t FigAtomicIncrement32()
{
  return MEMORY[0x1E0C9F7C8]();
}

uint64_t FigBaseClassRegisterClass()
{
  return MEMORY[0x1E0C9F868]();
}

uint64_t FigCFArrayAppendDouble()
{
  return MEMORY[0x1E0C9FA08]();
}

uint64_t FigCFArrayAppendInt()
{
  return MEMORY[0x1E0C9FA18]();
}

uint64_t FigCFArrayAppendInt32()
{
  return MEMORY[0x1E0C9FA20]();
}

uint64_t FigCFArrayAppendInt64()
{
  return MEMORY[0x1E0C9FA28]();
}

uint64_t FigCFArrayContainsInt()
{
  return MEMORY[0x1E0C9FA40]();
}

uint64_t FigCFArrayContainsValue()
{
  return MEMORY[0x1E0C9FA58]();
}

uint64_t FigCFArrayCreateMutableCopy()
{
  return MEMORY[0x1E0C9FA80]();
}

uint64_t FigCFArrayGetFirstValue()
{
  return MEMORY[0x1E0C9FAC0]();
}

uint64_t FigCFArrayGetInt16AtIndex()
{
  return MEMORY[0x1E0C9FAD8]();
}

uint64_t FigCFArrayGetInt32AtIndex()
{
  return MEMORY[0x1E0C9FAE0]();
}

uint64_t FigCFArrayGetInt64AtIndex()
{
  return MEMORY[0x1E0C9FAE8]();
}

uint64_t FigCFArrayGetIntAtIndex()
{
  return MEMORY[0x1E0C9FAF0]();
}

uint64_t FigCFArrayGetValueAtIndex()
{
  return MEMORY[0x1E0C9FB00]();
}

uint64_t FigCFCopyCompactDescription()
{
  return MEMORY[0x1E0C9FB28]();
}

uint64_t FigCFCreateCombinedDictionary()
{
  return MEMORY[0x1E0C9FB38]();
}

uint64_t FigCFDictionaryCopyArrayOfKeys()
{
  return MEMORY[0x1E0C9FB60]();
}

uint64_t FigCFDictionaryCreateCopyRemovingKeys()
{
  return MEMORY[0x1E0C9FB70]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1E0C9FB80]();
}

uint64_t FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks()
{
  return MEMORY[0x1E0C9FB88]();
}

uint64_t FigCFDictionaryGetArrayValue()
{
  return MEMORY[0x1E0C9FB90]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1E0C9FB98]();
}

uint64_t FigCFDictionaryGetBooleanValue()
{
  return MEMORY[0x1E0C9FBA0]();
}

uint64_t FigCFDictionaryGetCGFloatIfPresent()
{
  return MEMORY[0x1E0C9FBB0]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1E0C9FBD8]();
}

uint64_t FigCFDictionaryGetFloat32IfPresent()
{
  return MEMORY[0x1E0C9FBF8]();
}

uint64_t FigCFDictionaryGetFloatIfPresent()
{
  return MEMORY[0x1E0C9FC00]();
}

uint64_t FigCFDictionaryGetInt16IfPresent()
{
  return MEMORY[0x1E0C9FC08]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCFDictionaryGetInt64IfPresent()
{
  return MEMORY[0x1E0C9FC18]();
}

uint64_t FigCFDictionaryGetIntIfPresent()
{
  return MEMORY[0x1E0C9FC20]();
}

uint64_t FigCFDictionaryGetStringValue()
{
  return MEMORY[0x1E0C9FC38]();
}

uint64_t FigCFDictionaryGetValue()
{
  return MEMORY[0x1E0C9FC48]();
}

uint64_t FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()
{
  return MEMORY[0x1E0C9FC50]();
}

uint64_t FigCFDictionaryGetValueIfPresent()
{
  return MEMORY[0x1E0C9FC58]();
}

uint64_t FigCFDictionarySetBoolean()
{
  return MEMORY[0x1E0C9FC78]();
}

uint64_t FigCFDictionarySetCFIndex()
{
  return MEMORY[0x1E0C9FC80]();
}

uint64_t FigCFDictionarySetCGFloat()
{
  return MEMORY[0x1E0C9FC88]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1E0C9FCB0]();
}

uint64_t FigCFDictionarySetFloat()
{
  return MEMORY[0x1E0C9FCB8]();
}

uint64_t FigCFDictionarySetFloat32()
{
  return MEMORY[0x1E0C9FCC0]();
}

uint64_t FigCFDictionarySetInt()
{
  return MEMORY[0x1E0C9FCC8]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1E0C9FCD8]();
}

uint64_t FigCFDictionarySetInt64()
{
  return MEMORY[0x1E0C9FCE0]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1E0C9FD00]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1E0C9FD08]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1E0C9FD10]();
}

uint64_t FigCFNumberCreateFloat32()
{
  return MEMORY[0x1E0C9FD30]();
}

uint64_t FigCFNumberCreateFloat64()
{
  return MEMORY[0x1E0C9FD38]();
}

uint64_t FigCFNumberCreateSInt32()
{
  return MEMORY[0x1E0C9FD48]();
}

uint64_t FigCFNumberCreateSInt64()
{
  return MEMORY[0x1E0C9FD50]();
}

uint64_t FigCFNumberCreateUInt32()
{
  return MEMORY[0x1E0C9FD68]();
}

uint64_t FigCFNumberCreateUInt64()
{
  return MEMORY[0x1E0C9FD70]();
}

uint64_t FigCFNumberGetFloat32()
{
  return MEMORY[0x1E0C9FD80]();
}

uint64_t FigCFNumberGetSInt32()
{
  return MEMORY[0x1E0C9FD90]();
}

uint64_t FigCFNumberGetUInt32()
{
  return MEMORY[0x1E0C9FDA8]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1E0C9FDB0]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1E0C9FE38]();
}

uint64_t FigCFURLCreateFromTemporaryFileWithDirectory()
{
  return MEMORY[0x1E0C9FE78]();
}

uint64_t FigCFWeakReferenceDestroy()
{
  return MEMORY[0x1E0C9FEB0]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1E0C9FEB8]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1E0C9FEC0]();
}

uint64_t FigCFWeakReferenceInit()
{
  return MEMORY[0x1E0C9FED0]();
}

uint64_t FigCFWeakReferenceLoadAndRetain()
{
  return MEMORY[0x1E0C9FED8]();
}

uint64_t FigCFWeakReferenceStore()
{
  return MEMORY[0x1E0C9FEE0]();
}

uint64_t FigCFWeakReferenceTableAddValueAndGetKey()
{
  return MEMORY[0x1E0C9FEE8]();
}

uint64_t FigCFWeakReferenceTableCopyValue()
{
  return MEMORY[0x1E0C9FF00]();
}

uint64_t FigCFWeakReferenceTableCreate()
{
  return MEMORY[0x1E0C9FF10]();
}

uint64_t FigCFWeakReferenceTableRemoveValue()
{
  return MEMORY[0x1E0C9FF18]();
}

uint64_t FigCommonMemoryPoolReleaseAndClear()
{
  return MEMORY[0x1E0CA0150]();
}

uint64_t FigCopyCommonMemoryPool()
{
  return MEMORY[0x1E0CA01C8]();
}

uint64_t FigCreateBytesFromCFString()
{
  return MEMORY[0x1E0CA0230]();
}

uint64_t FigCreateCFDataFromCFPropertyList()
{
  return MEMORY[0x1E0CA0250]();
}

uint64_t FigCreateCFPropertyListFromData()
{
  return MEMORY[0x1E0CA0260]();
}

uint64_t FigCreateModelSpecificPropertyList()
{
  return MEMORY[0x1E0CA0280]();
}

uint64_t FigDebugIsInternalBuild()
{
  return MEMORY[0x1E0CA04F0]();
}

uint64_t FigDispatchAsyncPostNotification()
{
  return MEMORY[0x1E0CA0588]();
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1E0CA05C0]();
}

uint64_t FigDispatchQueueCreateWithPriorityAndClientPID()
{
  return MEMORY[0x1E0CA05C8]();
}

uint64_t FigDispatchQueueSetPriorityAndClientPID()
{
  return MEMORY[0x1E0CA05E8]();
}

uint64_t FigFileDeleteFile()
{
  return MEMORY[0x1E0CA0860]();
}

uint64_t FigFileDoesFileExist()
{
  return MEMORY[0x1E0CA0870]();
}

uint64_t FigFileForkClose()
{
  return MEMORY[0x1E0CA0878]();
}

uint64_t FigFileForkOpenMainByCFURL()
{
  return MEMORY[0x1E0CA0888]();
}

uint64_t FigFileForkRead()
{
  return MEMORY[0x1E0CA0890]();
}

uint64_t FigFileForkWrite()
{
  return MEMORY[0x1E0CA08A0]();
}

uint64_t FigFileGetFileInfo()
{
  return MEMORY[0x1E0CA08B8]();
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x1E0CA0918]();
}

uint64_t FigFormatDescriptionRetain()
{
  return MEMORY[0x1E0CA0920]();
}

uint64_t FigGetAllocatorForPermanentAllocations()
{
  return MEMORY[0x1E0CA0A40]();
}

uint64_t FigGetCFPreferenceBooleanWithDefault()
{
  return MEMORY[0x1E0CA0A58]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigGetUpTimeNanoseconds()
{
  return MEMORY[0x1E0CA0AE8]();
}

uint64_t FigH264Bridge_CopyDataWithEmulationPreventionBytesRemoved()
{
  return MEMORY[0x1E0CA0B20]();
}

uint64_t FigHEVCBridge_AllocThreeDimensionalReferenceDisplaysInfo()
{
  return MEMORY[0x1E0CA0C28]();
}

uint64_t FigHEVCBridge_CreateAlphaInfoSEI()
{
  return MEMORY[0x1E0CA0C30]();
}

uint64_t FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL()
{
  return MEMORY[0x1E0CA0C38]();
}

uint64_t FigHEVCBridge_CreateDolbyRPUNAL()
{
  return MEMORY[0x1E0CA0C40]();
}

uint64_t FigHEVCBridge_CreateFormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription()
{
  return MEMORY[0x1E0CA0C48]();
}

uint64_t FigHEVCBridge_CreateMultiviewMuxedAlphaDataBuffer()
{
  return MEMORY[0x1E0CA0C58]();
}

uint64_t FigHEVCBridge_CreateMultiviewMuxedAlphaFormatDescription()
{
  return MEMORY[0x1E0CA0C60]();
}

uint64_t FigHEVCBridge_CreateMuxedAlphaDataBuffer()
{
  return MEMORY[0x1E0CA0C68]();
}

uint64_t FigHEVCBridge_CreateMuxedAlphaFormatDescription()
{
  return MEMORY[0x1E0CA0C70]();
}

uint64_t FigHEVCBridge_CreateSelectedLayerFormatDescriptionFromMuxedAlphaFormatDescription()
{
  return MEMORY[0x1E0CA0C78]();
}

uint64_t FigHEVCBridge_CreateThreeDimensionalReferenceDisplaysInfoSEI()
{
  return MEMORY[0x1E0CA0C80]();
}

uint64_t FigHEVCBridge_GetHEVCParameterSetAtIndex()
{
  return MEMORY[0x1E0CA0C88]();
}

uint64_t FigHEVCBridge_GetSPSChromaFormatAndBitDepths()
{
  return MEMORY[0x1E0CA0C98]();
}

uint64_t FigHEVCBridge_GetSPSProfileTierLevel()
{
  return MEMORY[0x1E0CA0CA0]();
}

uint64_t FigHEVCBridge_GetVPSAlphaChannelNuhLayerId()
{
  return MEMORY[0x1E0CA0CB8]();
}

uint64_t FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer()
{
  return MEMORY[0x1E0CA0CC8]();
}

uint64_t FigHEVCBridge_WritePaddingNALU()
{
  return MEMORY[0x1E0CA0CD0]();
}

uint64_t FigInMemoryDeserializerCopyCFDictionary()
{
  return MEMORY[0x1E0CA0CE0]();
}

uint64_t FigInMemoryDeserializerCopyCMSampleBuffer()
{
  return MEMORY[0x1E0CA0D08]();
}

uint64_t FigInMemorySerializerAppendCFDictionary()
{
  return MEMORY[0x1E0CA0D10]();
}

uint64_t FigInMemorySerializerAppendCMSampleBuffer()
{
  return MEMORY[0x1E0CA0D38]();
}

uint64_t FigIsHDRAllowedOnDevice()
{
  return MEMORY[0x1E0CA0D58]();
}

uint64_t FigIsSecTaskGPUExtensionOfBrowserEngine()
{
  return MEMORY[0x1E0CA0D80]();
}

uint64_t FigKTraceInit()
{
  return MEMORY[0x1E0CA0D90]();
}

uint64_t FigMachPortReleaseSendRight_()
{
  return MEMORY[0x1E0CA0DA8]();
}

uint64_t FigMemoryBarrier()
{
  return MEMORY[0x1E0CA0DD0]();
}

uint64_t FigMemoryOriginUpdateRecipientStateFromIPCMessageData()
{
  return MEMORY[0x1E0CA0E00]();
}

uint64_t FigMemoryOriginUpdateRecipientStateFromXPCMessage()
{
  return MEMORY[0x1E0CA0E08]();
}

uint64_t FigMemoryPoolCreateBlockBufferWithOptions()
{
  return MEMORY[0x1E0CA0E28]();
}

uint64_t FigMemoryRecipientAppendRecipientStateUpdateToIPCMessageData()
{
  return MEMORY[0x1E0CA0E40]();
}

uint64_t FigMemoryRecipientAppendRecipientStateUpdateToXPCMessage()
{
  return MEMORY[0x1E0CA0E48]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1E0CA0FC0]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1E0CA0FD8]();
}

uint64_t FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply()
{
  return MEMORY[0x1E0CA0FF0]();
}

uint64_t FigOSEventLinkRemoteInvalidate()
{
  return MEMORY[0x1E0CA0FF8]();
}

uint64_t FigOSEventLinkRemoteSetMessageHandlingThreadFigThreadPriority()
{
  return MEMORY[0x1E0CA1000]();
}

uint64_t FigOSEventLinkRemoteSetMessageHandlingThreadMachThreadPriority()
{
  return MEMORY[0x1E0CA1008]();
}

uint64_t FigOSEventLinkServerGetAssociatedFigXPCServerXPCConnection()
{
  return MEMORY[0x1E0CA1010]();
}

uint64_t FigOSEventLinkServerSetCallbacks()
{
  return MEMORY[0x1E0CA1018]();
}

uint64_t FigOSTransactionCreate()
{
  return MEMORY[0x1E0CA1028]();
}

uint64_t FigOSTransactionCreateWithProcessName()
{
  return MEMORY[0x1E0CA1030]();
}

uint64_t FigPixelBufferOriginAppendPixelBufferToIPCMessageData()
{
  return MEMORY[0x1E0CA1040]();
}

uint64_t FigPixelBufferOriginBeginEstablishingPixelBufferRecipientByFillingInXPCMessage1()
{
  return MEMORY[0x1E0CA1048]();
}

uint64_t FigPixelBufferOriginCompleteEstablishingPixelBufferRecipientUsingXPCMessage2()
{
  return MEMORY[0x1E0CA1050]();
}

uint64_t FigPixelBufferOriginGetObjectID()
{
  return MEMORY[0x1E0CA1058]();
}

uint64_t FigPixelBufferOriginServerCopyPixelBufferOriginForObjectID()
{
  return MEMORY[0x1E0CA1060]();
}

uint64_t FigPixelBufferOriginSetPixelBufferInXPCMessage()
{
  return MEMORY[0x1E0CA1068]();
}

uint64_t FigPixelBufferRecipientCopyPixelBufferFromIPCMessageData()
{
  return MEMORY[0x1E0CA1078]();
}

uint64_t FigPixelBufferRecipientCopyPixelBufferFromXPCMessage()
{
  return MEMORY[0x1E0CA1080]();
}

uint64_t FigPixelBufferRecipientCreateWithXPCMessage1AndUpdateXPCMessage2()
{
  return MEMORY[0x1E0CA1090]();
}

uint64_t FigPlaybackLogPowerEvent()
{
  return MEMORY[0x1E0CA10A0]();
}

uint64_t FigPowerReduceUtilitySFI()
{
  return MEMORY[0x1E0CA10B0]();
}

uint64_t FigPriorityQueueCreate()
{
  return MEMORY[0x1E0CA10C8]();
}

uint64_t FigPriorityQueueGetItem()
{
  return MEMORY[0x1E0CA10D0]();
}

uint64_t FigPriorityQueueInsertItemAndCreateUpdateToken()
{
  return MEMORY[0x1E0CA10D8]();
}

uint64_t FigPriorityQueueRemoveItem()
{
  return MEMORY[0x1E0CA10E0]();
}

uint64_t FigPriorityQueueTokenUpdatePriority()
{
  return MEMORY[0x1E0CA10E8]();
}

uint64_t FigProcessInfoCreateWithDetails()
{
  return MEMORY[0x1E0CA10F0]();
}

uint64_t FigRPCCreateClientConnection()
{
  return MEMORY[0x1E0CA1120]();
}

uint64_t FigRPCCreateRemoteClient()
{
  return MEMORY[0x1E0CA1130]();
}

uint64_t FigRPCCreateServerConnectionForObject()
{
  return MEMORY[0x1E0CA1138]();
}

uint64_t FigRPCCreateServerConnectionForObjectUsingMachChannel()
{
  return MEMORY[0x1E0CA1140]();
}

uint64_t FigRPCDisposeClientConnection()
{
  return MEMORY[0x1E0CA1148]();
}

uint64_t FigRPCDisposeServerConnection()
{
  return MEMORY[0x1E0CA1150]();
}

uint64_t FigRPCExecuteByServerAsync()
{
  return MEMORY[0x1E0CA1158]();
}

uint64_t FigRPCFetchNextPendingNotification()
{
  return MEMORY[0x1E0CA1160]();
}

uint64_t FigRPCGetConnectionInfo()
{
  return MEMORY[0x1E0CA1168]();
}

uint64_t FigRPCGetServerConnectionInfo()
{
  return MEMORY[0x1E0CA1170]();
}

uint64_t FigRPCKillServerOnTimeout()
{
  return MEMORY[0x1E0CA1178]();
}

uint64_t FigRPCLookupClientConnection()
{
  return MEMORY[0x1E0CA1180]();
}

uint64_t FigRPCStartServerUsingMachChannel()
{
  return MEMORY[0x1E0CA1190]();
}

uint64_t FigReadWriteLockCreate()
{
  return MEMORY[0x1E0CA11A0]();
}

uint64_t FigReadWriteLockDestroy()
{
  return MEMORY[0x1E0CA11A8]();
}

uint64_t FigReadWriteLockLockForRead()
{
  return MEMORY[0x1E0CA11B0]();
}

uint64_t FigReadWriteLockLockForWrite()
{
  return MEMORY[0x1E0CA11B8]();
}

uint64_t FigReadWriteLockUnlockForRead()
{
  return MEMORY[0x1E0CA11C0]();
}

uint64_t FigReadWriteLockUnlockForWrite()
{
  return MEMORY[0x1E0CA11C8]();
}

uint64_t FigReentrantMutexCreate()
{
  return MEMORY[0x1E0CA11D0]();
}

uint64_t FigReentrantMutexDestroy()
{
  return MEMORY[0x1E0CA11D8]();
}

uint64_t FigReentrantMutexLock()
{
  return MEMORY[0x1E0CA11E0]();
}

uint64_t FigReentrantMutexUnlock()
{
  return MEMORY[0x1E0CA11F0]();
}

uint64_t FigRegistryAddItem()
{
  return MEMORY[0x1E0CA11F8]();
}

uint64_t FigRegistryAddSearchPathWithOptions()
{
  return MEMORY[0x1E0CA1200]();
}

uint64_t FigRegistryCopyFilteredItemList()
{
  return MEMORY[0x1E0CA1208]();
}

uint64_t FigRegistryCopyItemList()
{
  return MEMORY[0x1E0CA1210]();
}

uint64_t FigRegistryCreate()
{
  return MEMORY[0x1E0CA1218]();
}

uint64_t FigRegistryItemCopyBundle()
{
  return MEMORY[0x1E0CA1220]();
}

uint64_t FigRegistryItemCopyDescription()
{
  return MEMORY[0x1E0CA1228]();
}

uint64_t FigRegistryItemCopyMatchingInfo()
{
  return MEMORY[0x1E0CA1230]();
}

uint64_t FigRegistryItemCreateCopy2()
{
  return MEMORY[0x1E0CA1238]();
}

uint64_t FigRegistryItemGetFactory()
{
  return MEMORY[0x1E0CA1240]();
}

uint64_t FigRegistryRemoveItem()
{
  return MEMORY[0x1E0CA1248]();
}

uint64_t FigRegistryRescan()
{
  return MEMORY[0x1E0CA1250]();
}

uint64_t FigRemote_CreateBinaryPListData()
{
  return MEMORY[0x1E0CA1258]();
}

uint64_t FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData()
{
  return MEMORY[0x1E0CA1268]();
}

uint64_t FigRemote_CreatePixelBufferFromSerializedAtomData()
{
  return MEMORY[0x1E0CA1298]();
}

uint64_t FigRemote_CreatePropertyListFromBinaryPListData()
{
  return MEMORY[0x1E0CA12A8]();
}

uint64_t FigRemote_CreateSampleBufferFromSerializedAtomData()
{
  return MEMORY[0x1E0CA12C0]();
}

uint64_t FigRemote_CreateSerializedAtomDataForFormatDescriptions()
{
  return MEMORY[0x1E0CA1320]();
}

uint64_t FigRemote_CreateSerializedAtomDataForPixelBuffer()
{
  return MEMORY[0x1E0CA1328]();
}

uint64_t FigRemote_CreateSerializedAtomDataForSampleBuffer()
{
  return MEMORY[0x1E0CA1330]();
}

uint64_t FigRemote_CreateSerializedAtomDataForSampleBufferWithOptions()
{
  return MEMORY[0x1E0CA1338]();
}

uint64_t FigRemote_GetServerTimeoutToken()
{
  return MEMORY[0x1E0CA1350]();
}

uint64_t FigSampleBufferCreateCopyWithNewFormatDescription()
{
  return MEMORY[0x1E0CA1410]();
}

uint64_t FigSampleBufferCreateCopyWithNewSizesAndDataBuffer()
{
  return MEMORY[0x1E0CA1418]();
}

uint64_t FigSampleBufferGetDecryptor()
{
  return MEMORY[0x1E0CA1440]();
}

uint64_t FigSampleBufferSetDecryptor()
{
  return MEMORY[0x1E0CA1460]();
}

uint64_t FigSemaphoreCreate()
{
  return MEMORY[0x1E0CA14C8]();
}

uint64_t FigSemaphoreDestroy()
{
  return MEMORY[0x1E0CA14D0]();
}

uint64_t FigSemaphoreSignal()
{
  return MEMORY[0x1E0CA14D8]();
}

uint64_t FigSemaphoreWaitRelative()
{
  return MEMORY[0x1E0CA14E0]();
}

uint64_t FigServer_GetClientPIDFromAuditToken()
{
  return MEMORY[0x1E0CA14F0]();
}

uint64_t FigServer_IsMediaplaybackd()
{
  return MEMORY[0x1E0CA1518]();
}

uint64_t FigServer_IsServerProcess()
{
  return MEMORY[0x1E0CA1528]();
}

uint64_t FigServer_IsVideoDecodeService()
{
  return MEMORY[0x1E0CA1530]();
}

uint64_t FigServer_IsVideocodecd()
{
  return MEMORY[0x1E0CA1538]();
}

uint64_t FigServer_RememberProcessInfoForAFewSeconds()
{
  return MEMORY[0x1E0CA1548]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1E0CA1550]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1E0CA1570]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1E0CA1578]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1E0CA1580]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1E0CA1590]();
}

uint64_t FigStartForwardingMediaServicesProcessDeathNotification()
{
  return MEMORY[0x1E0CA15B8]();
}

uint64_t FigStartMonitoringMediaServicesProcessDeath()
{
  return MEMORY[0x1E0CA15C0]();
}

uint64_t FigStopForwardingMediaServicesProcessDeathNotification()
{
  return MEMORY[0x1E0CA15C8]();
}

uint64_t FigStopMonitoringMediaServicesProcessDeath()
{
  return MEMORY[0x1E0CA15D0]();
}

uint64_t FigTagCollectionCopyAsData()
{
  return MEMORY[0x1E0CA1610]();
}

uint64_t FigTagCollectionCreate()
{
  return MEMORY[0x1E0CA1630]();
}

uint64_t FigTagCollectionCreateFromData()
{
  return MEMORY[0x1E0CA1640]();
}

uint64_t FigTagCollectionGetTagsWithCategory()
{
  return MEMORY[0x1E0CA1678]();
}

uint64_t FigTagCollectionGetTypeID()
{
  return MEMORY[0x1E0CA1680]();
}

uint64_t FigTagGetSInt64Value()
{
  return MEMORY[0x1E0CA16B8]();
}

uint64_t FigTagMakeWithSInt64Value()
{
  return MEMORY[0x1E0CA16D0]();
}

uint64_t FigTaggedBufferGroupCreate()
{
  return MEMORY[0x1E0CA16D8]();
}

uint64_t FigTaggedBufferGroupGetCMSampleBufferAtIndex()
{
  return MEMORY[0x1E0CA16E0]();
}

uint64_t FigTaggedBufferGroupGetCVPixelBufferAtIndex()
{
  return MEMORY[0x1E0CA16E8]();
}

uint64_t FigTaggedBufferGroupGetCount()
{
  return MEMORY[0x1E0CA16F8]();
}

uint64_t FigTaggedBufferGroupGetTagCollectionAtIndex()
{
  return MEMORY[0x1E0CA1700]();
}

uint64_t FigThreadCreate()
{
  return MEMORY[0x1E0CA17B8]();
}

uint64_t FigThreadGetCurrent()
{
  return MEMORY[0x1E0CA17C0]();
}

uint64_t FigThreadGetMaxLogicalCoreCount()
{
  return MEMORY[0x1E0CA17E8]();
}

uint64_t FigThreadJoin()
{
  return MEMORY[0x1E0CA17F8]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x1E0CA1810]();
}

uint64_t FigThreadSetProperty()
{
  return MEMORY[0x1E0CA1818]();
}

uint64_t FigUSleep()
{
  return MEMORY[0x1E0CA19E0]();
}

uint64_t FigVideoFormatDescriptionConformsToDolbyVisionProfile10p0()
{
  return MEMORY[0x1E0CA1A00]();
}

uint64_t FigVideoFormatDescriptionConformsToDolbyVisionProfile10p4()
{
  return MEMORY[0x1E0CA1A08]();
}

uint64_t FigVideoFormatDescriptionConformsToDolbyVisionProfile81()
{
  return MEMORY[0x1E0CA1A10]();
}

uint64_t FigVideoFormatDescriptionConformsToDolbyVisionProfile84()
{
  return MEMORY[0x1E0CA1A18]();
}

uint64_t FigVideoFormatDescriptionContainsAlphaChannel()
{
  return MEMORY[0x1E0CA1A20]();
}

uint64_t FigVideoFormatDescriptionContainsHDR()
{
  return MEMORY[0x1E0CA1A28]();
}

uint64_t FigVideoFormatDescriptionContainsStereoMultiviewVideo()
{
  return MEMORY[0x1E0CA1A30]();
}

uint64_t FigVideoFormatDescriptionCopyFigTagCollectionArrayWithExtraChannels()
{
  return MEMORY[0x1E0CA1A40]();
}

uint64_t FigVideoFormatDescriptionCreateUpdatedHVCCWithAdditionalHEVCParameterSets()
{
  return MEMORY[0x1E0CA1A50]();
}

uint64_t FigVideoFormatDescriptionDetermineCompatibilityWithCoreMediaRequirementsForHEVCWithAlpha()
{
  return MEMORY[0x1E0CA1A60]();
}

uint64_t FigXPCConnectionCreateAssociatedEventLink()
{
  return MEMORY[0x1E0CA1B00]();
}

uint64_t FigXPCCreateBasicMessage()
{
  return MEMORY[0x1E0CA1B58]();
}

uint64_t FigXPCMessageAddCMSampleBuffer()
{
  return MEMORY[0x1E0CA1B90]();
}

uint64_t FigXPCMessageAddCMSampleBufferForPID()
{
  return MEMORY[0x1E0CA1B98]();
}

uint64_t FigXPCMessageCopyCFData()
{
  return MEMORY[0x1E0CA1BC0]();
}

uint64_t FigXPCMessageCopyCFDictionary()
{
  return MEMORY[0x1E0CA1BD0]();
}

uint64_t FigXPCMessageCopyCFObject()
{
  return MEMORY[0x1E0CA1BE8]();
}

uint64_t FigXPCMessageCopyCFString()
{
  return MEMORY[0x1E0CA1BF0]();
}

uint64_t FigXPCMessageCopyCMSampleBuffer()
{
  return MEMORY[0x1E0CA1C00]();
}

uint64_t FigXPCMessageCopyCMSampleBufferWithLastCryptor()
{
  return MEMORY[0x1E0CA1C08]();
}

uint64_t FigXPCMessageCopyFormatDescription()
{
  return MEMORY[0x1E0CA1C28]();
}

uint64_t FigXPCMessageGetCMTime()
{
  return MEMORY[0x1E0CA1C70]();
}

uint64_t FigXPCMessageGetOpCode()
{
  return MEMORY[0x1E0CA1C98]();
}

uint64_t FigXPCMessageSetCFData()
{
  return MEMORY[0x1E0CA1CD0]();
}

uint64_t FigXPCMessageSetCFDictionary()
{
  return MEMORY[0x1E0CA1CE0]();
}

uint64_t FigXPCMessageSetCFObject()
{
  return MEMORY[0x1E0CA1CF8]();
}

uint64_t FigXPCMessageSetCFString()
{
  return MEMORY[0x1E0CA1D00]();
}

uint64_t FigXPCMessageSetCMTime()
{
  return MEMORY[0x1E0CA1D10]();
}

uint64_t FigXPCMessageSetFormatDescription()
{
  return MEMORY[0x1E0CA1D38]();
}

uint64_t FigXPCMessageSetInt32()
{
  return MEMORY[0x1E0CA1D48]();
}

uint64_t FigXPCRelease()
{
  return MEMORY[0x1E0CA1D80]();
}

uint64_t FigXPCRemoteClientAssociateObject()
{
  return MEMORY[0x1E0CA1D88]();
}

uint64_t FigXPCRemoteClientCopyMemoryOrigin()
{
  return MEMORY[0x1E0CA1D90]();
}

uint64_t FigXPCRemoteClientCopyMemoryRecipient()
{
  return MEMORY[0x1E0CA1D98]();
}

uint64_t FigXPCRemoteClientCopyPrimaryConnection()
{
  return MEMORY[0x1E0CA1DA0]();
}

uint64_t FigXPCRemoteClientCreate()
{
  return MEMORY[0x1E0CA1DA8]();
}

uint64_t FigXPCRemoteClientDisassociateObject()
{
  return MEMORY[0x1E0CA1DC0]();
}

uint64_t FigXPCRemoteClientGetServerPID()
{
  return MEMORY[0x1E0CA1DD0]();
}

uint64_t FigXPCRemoteClientLookupAndRetainAssociatedObject()
{
  return MEMORY[0x1E0CA1DE0]();
}

uint64_t FigXPCRemoteClientSendAsyncMessage()
{
  return MEMORY[0x1E0CA1DF0]();
}

uint64_t FigXPCRemoteClientSendSyncMessage()
{
  return MEMORY[0x1E0CA1DF8]();
}

uint64_t FigXPCRemoteClientSendSyncMessageCreatingReply()
{
  return MEMORY[0x1E0CA1E00]();
}

uint64_t FigXPCRetain()
{
  return MEMORY[0x1E0CA1E10]();
}

uint64_t FigXPCSendStdCopyPropertyMessage()
{
  return MEMORY[0x1E0CA1E18]();
}

uint64_t FigXPCSendStdSetPropertyMessage()
{
  return MEMORY[0x1E0CA1E20]();
}

uint64_t FigXPCServerAssociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E48]();
}

uint64_t FigXPCServerCopyMemoryOrigin()
{
  return MEMORY[0x1E0CA1E68]();
}

uint64_t FigXPCServerCopyMemoryRecipient()
{
  return MEMORY[0x1E0CA1E70]();
}

uint64_t FigXPCServerCreateAssociatedEventLinkForConnection()
{
  return MEMORY[0x1E0CA1E80]();
}

uint64_t FigXPCServerDisassociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E88]();
}

uint64_t FigXPCServerGetConnectionRefcon()
{
  return MEMORY[0x1E0CA1EA0]();
}

uint64_t FigXPCServerLookupAndRetainAssociatedObject()
{
  return MEMORY[0x1E0CA1EA8]();
}

uint64_t FigXPCServerLookupAndRetainAssociatedObjectAndCFTypeRefcon()
{
  return MEMORY[0x1E0CA1EB0]();
}

uint64_t FigXPCServerSetConnectionRefcon()
{
  return MEMORY[0x1E0CA1EC8]();
}

uint64_t FigXPCServerStart()
{
  return MEMORY[0x1E0CA1ED0]();
}

uint64_t FigXPCServerStartWithClientXPCConnection()
{
  return MEMORY[0x1E0CA1ED8]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1E0CBB918](*(_QWORD *)&mainPort, path);
}

kern_return_t IORegistryEntryGetProperty(io_registry_entry_t entry, const io_name_t propertyName, io_struct_inband_t buffer, uint32_t *size)
{
  return MEMORY[0x1E0CBB978](*(_QWORD *)&entry, propertyName, buffer, size);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA08](name);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1E0D3A1D0]();
}

uint64_t IOSurfaceAcceleratorGetHistogram()
{
  return MEMORY[0x1E0D3A1D8]();
}

uint64_t IOSurfaceAcceleratorSetCustomFilter()
{
  return MEMORY[0x1E0D3A1F0]();
}

uint64_t IOSurfaceAcceleratorTransferSurface()
{
  return MEMORY[0x1E0D3A1F8]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1E0D3A200]();
}

uint64_t IOSurfaceBindAccel()
{
  return MEMORY[0x1E0CBBAD0]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBBAE8](buffer, key);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x1E0CBBB10](aSurface);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBB18](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane()
{
  return MEMORY[0x1E0CBBB48]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x1E0CBBB58]();
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1E0CBBB70]();
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBB88](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

uint64_t IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane()
{
  return MEMORY[0x1E0CBBB98]();
}

uint64_t IOSurfaceGetBytesPerRowOfTileDataOfPlane()
{
  return MEMORY[0x1E0CBBBA8]();
}

uint64_t IOSurfaceGetCompressedTileHeightOfPlane()
{
  return MEMORY[0x1E0CBBBC8]();
}

uint64_t IOSurfaceGetCompressedTileWidthOfPlane()
{
  return MEMORY[0x1E0CBBBD0]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1E0CBBBD8]();
}

uint64_t IOSurfaceGetDataProperty()
{
  return MEMORY[0x1E0CBBBE0]();
}

uint64_t IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane()
{
  return MEMORY[0x1E0CBBC20]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBC30]();
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC70](buffer);
}

uint64_t IOSurfaceGetProhibitUseCount()
{
  return MEMORY[0x1E0CBBC78]();
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x1E0CBBC90]();
}

uint64_t IOSurfaceGetSizeOfPlane()
{
  return MEMORY[0x1E0CBBCB0]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBCE8]();
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBD00](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD48](xobj);
}

uint64_t IOSurfaceNeedsBindAccel()
{
  return MEMORY[0x1E0CBBD50]();
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1E0CBBDF8]();
}

uint64_t IOSurfaceSetDataProperty()
{
  return MEMORY[0x1E0CBBE08]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

uint64_t IOSurfaceSupportsProtectionOptions()
{
  return MEMORY[0x1E0CBBE80]();
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1E0CC69C8]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t VTParavirtualizationGuestSupportDeregisterGuestUUID()
{
  return MEMORY[0x1E0DC6920]();
}

uint64_t VTParavirtualizationGuestSupportRegisterGuestUUID()
{
  return MEMORY[0x1E0DC6928]();
}

uint64_t VTParavirtualizationGuestSupportSendRawMessageToHost()
{
  return MEMORY[0x1E0DC6930]();
}

uint64_t VTParavirtualizationGuestSupportSetUpWithHandlers()
{
  return MEMORY[0x1E0DC6938]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1E0C81068]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1E0D15470]();
}

uint64_t applejpeg_decode_create()
{
  return MEMORY[0x1E0CFCF90]();
}

uint64_t applejpeg_decode_destroy()
{
  return MEMORY[0x1E0CFCF98]();
}

uint64_t applejpeg_decode_get_image_info()
{
  return MEMORY[0x1E0CFCFB0]();
}

uint64_t applejpeg_decode_image_all()
{
  return MEMORY[0x1E0CFCFF0]();
}

uint64_t applejpeg_decode_open_jpeg_dib()
{
  return MEMORY[0x1E0CFD000]();
}

uint64_t applejpeg_decode_options_init()
{
  return MEMORY[0x1E0CFD010]();
}

uint64_t applejpeg_decode_set_options()
{
  return MEMORY[0x1E0CFD070]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  MEMORY[0x1E0C82BE0](iterations, queue, context, work);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D18](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82FA0](queue, context, work);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

uint64_t fig_log_call_emit_and_clean_up_after_send_and_compose()
{
  return MEMORY[0x1E0CA1F60]();
}

uint64_t fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type()
{
  return MEMORY[0x1E0CA1F68]();
}

uint64_t fig_note_initialize_category_with_default_work_cf()
{
  return MEMORY[0x1E0CA1F88]();
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
  MEMORY[0x1E0C840C8](__b, __pattern8, __len);
}

uint64_t mig_dealloc_special_reply_port()
{
  return MEMORY[0x1E0C840F0]();
}

uint64_t mig_get_special_reply_port()
{
  return MEMORY[0x1E0C84108]();
}

int mig_strncpy(char *dest, const char *src, int len)
{
  return MEMORY[0x1E0C84120](dest, src, *(_QWORD *)&len);
}

int mig_strncpy_zerofill(char *dest, const char *src, int len)
{
  return MEMORY[0x1E0C84128](dest, src, *(_QWORD *)&len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x1E0C84A08]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

uint64_t proc_can_use_foreground_hw()
{
  return MEMORY[0x1E0C84BD8]();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

vImage_Error vImageConvert_16Fto16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Q12to16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD30](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16UToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD40](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Uto16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD48](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Uto16Q12(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD50](src, dest, *(_QWORD *)&flags);
}

uint64_t vImageConvert_420Yp10_CbCr10ToXRGB2101010W()
{
  return MEMORY[0x1E0C8CD58]();
}

vImage_Error vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCb, const vImage_Buffer *srcCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD60](srcYp, srcCb, srcCr, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD70](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CbYpCrYp16ToARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint16_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD78](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CbYpCrYp16ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD80](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CbYpCrYp8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD88](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const Pixel_16Q12 alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD90](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD98](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

uint64_t vImageConvert_422Yp10_CbCr10ToXRGB2101010W()
{
  return MEMORY[0x1E0C8CDA0]();
}

vImage_Error vImageConvert_422YpCbYpCr8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDA8](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444AYpCbCr16ToARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDB0](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444AYpCbCr16ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDB8](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444AYpCbCr8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDC0](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444CrYpCb10ToARGB16Q12(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const Pixel_16Q12 alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDC8](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444CrYpCb10ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDD0](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

uint64_t vImageConvert_444Yp10_CbCr10ToXRGB2101010W()
{
  return MEMORY[0x1E0C8CDE0]();
}

vImage_Error vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDE8](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB16Q12To444CrYpCb10(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDF0](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB16UTo422CbYpCrYp16(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDF8](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB16UTo444AYpCbCr16(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE00](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB16UToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], uint8_t copyMask, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE08](src, dest, permuteMap, copyMask, backgroundColor, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB16UToRGBA1010102(const vImage_Buffer *src, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE10](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCb, const vImage_Buffer *destCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE38](src, destYp, destCb, destCr, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE40](src, destYp, destCbCr, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To422CbYpCrYp16(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE48](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To422CbYpCrYp8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE50](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE58](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To422YpCbYpCr8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE60](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444AYpCbCr16(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE68](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444AYpCbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE70](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444CrYpCb10(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE78](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888ToARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], uint8_t copyMask, const Pixel_ARGB_16U backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE88](src, dest, permuteMap, copyMask, backgroundColor, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888ToARGB2101010(const vImage_Buffer *src, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE90](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888ToRGBA1010102(const vImage_Buffer *src, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE98](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoARGB8888_dithered(const vImage_Buffer *src, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, int dither, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEC0](src, dest, maxFloat, minFloat, *(_QWORD *)&dither, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEE8](matrix, pixelRange, outInfo, *(_QWORD *)&inARGBType, *(_QWORD *)&outYpCbCrType, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEF0](converter, srcs, dests, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8To16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF60](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toARGB8888(const vImage_Buffer *srcA, const vImage_Buffer *srcR, const vImage_Buffer *srcG, const vImage_Buffer *srcB, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF80](srcA, srcR, srcG, srcB, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB565toARGB1555(const vImage_Buffer *src, const vImage_Buffer *dest, int dither, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFF8](src, dest, *(_QWORD *)&dither, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB565toARGB8888(Pixel_8 alpha, const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D000](alpha, src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB565toBGRA8888(Pixel_8 alpha, const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D008](alpha, src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB565toRGBA5551(const vImage_Buffer *src, const vImage_Buffer *dest, int dither, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D018](src, dest, *(_QWORD *)&dither, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGBA1010102ToARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D050](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGBA1010102ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D058](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_XRGB2101010ToARGB8888(const vImage_Buffer *src, Pixel_8 alpha, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D0B0](src, alpha, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags);
}

uint64_t vImageConvert_XRGB2101010WTo420Yp10_CbCr10()
{
  return MEMORY[0x1E0C8D0C0]();
}

uint64_t vImageConvert_XRGB2101010WTo422Yp10_CbCr10()
{
  return MEMORY[0x1E0C8D0C8]();
}

uint64_t vImageConvert_XRGB2101010WTo444Yp10_CbCr10()
{
  return MEMORY[0x1E0C8D0D0]();
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D0F8](matrix, pixelRange, outInfo, *(_QWORD *)&inYpCbCrType, *(_QWORD *)&outARGBType, *(_QWORD *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGColorConversionInfo(CGColorConversionInfoRef colorConversionInfoRef, const vImage_CGImageFormat *sFormat, const vImage_CGImageFormat *dFormat, const CGFloat *bg, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x1E0C8D118](colorConversionInfoRef, sFormat, dFormat, bg, *(_QWORD *)&flags, error);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x1E0C8D120](srcFormat, destFormat, backgroundColor, *(_QWORD *)&flags, error);
}

vImage_Error vImageExtractChannel_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D288](src, dest, channelIndex, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8 scalar, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4B0](scalar, src, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D520](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D650](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D658](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D680](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D688](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6D8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6E0](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6E8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6F8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_CbCr16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D700](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D718](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D720](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D728](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D738](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_XRGB2101010W(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D748](src, dest, tempBuffer, *(_QWORD *)&flags);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86218]();
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

