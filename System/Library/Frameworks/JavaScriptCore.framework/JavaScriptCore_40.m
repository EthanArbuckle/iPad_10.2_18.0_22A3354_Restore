WTF::StringImpl *JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<unsigned char const,18446744073709551615ul>>(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v10 = *(_BYTE *)(a1 + 8);
  if ((v10 & 2) == 0)
  {
    WTF::AtomStringImpl::add((uint64_t)a3, a4, a4, a5, a6, a7, a8, &v45);
    return v45;
  }
  v12 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
  {
    if (a3)
    {
      if (a4)
      {
        if (a4 >> 31)
        {
          __break(0xC471u);
LABEL_31:
          JUMPOUT(0x1988D13A4);
        }
        v23 = (int *)WTF::fastCompactMalloc((WTF *)(a4 + 20));
        v24 = v23 + 5;
        *v23 = 2;
        v23[1] = a4;
        *((_QWORD *)v23 + 1) = v23 + 5;
        v23[4] = 4;
        if (a4 == 1)
          *v24 = *a3;
        else
          memcpy(v24, a3, a4);
      }
      else
      {
        v23 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v23 = 0;
    }
    v45 = (WTF::StringImpl *)v23;
    if ((*(_BYTE *)(a1 + 8) & 0x20) != 0)
      v25 = 41936;
    else
      v25 = 41920;
    WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(v12 + v25), &v45, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v44);
    v11 = v44;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        if (v11)
          goto LABEL_24;
LABEL_29:
        __break(0xC471u);
        goto LABEL_31;
      }
      *v23 -= 2;
    }
    if (v11)
      goto LABEL_24;
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48);
  if ((v10 & 4) != 0)
    v14 = JSC::BuiltinNames::lookUpWellKnownSymbol(v13, (unint64_t)a3, a4);
  else
    v14 = JSC::BuiltinNames::lookUpPrivateName(v13, (unint64_t)a3, a4);
  v11 = (WTF::StringImpl *)v14;
  if (!v14)
    goto LABEL_29;
LABEL_24:
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v11, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return v11;
}

WTF::StringImpl *JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<char16_t const,18446744073709551615ul>>(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v10 = *(_BYTE *)(a1 + 8);
  if ((v10 & 2) == 0)
  {
    WTF::AtomStringImpl::add((uint64_t)a3, a4, a4, a5, a6, a7, a8, &v45);
    return v45;
  }
  v12 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
  {
    if (a3)
    {
      if (a4)
      {
        if (a4 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
LABEL_31:
          JUMPOUT(0x1988D1554);
        }
        v23 = (int *)WTF::fastCompactMalloc((WTF *)(2 * a4 + 20));
        v24 = v23 + 5;
        *v23 = 2;
        v23[1] = a4;
        *((_QWORD *)v23 + 1) = v23 + 5;
        v23[4] = 0;
        if (a4 == 1)
          *v24 = *a3;
        else
          memcpy(v24, a3, 2 * a4);
      }
      else
      {
        v23 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v23 = 0;
    }
    v45 = (WTF::StringImpl *)v23;
    if ((*(_BYTE *)(a1 + 8) & 0x20) != 0)
      v25 = 41936;
    else
      v25 = 41920;
    WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(v12 + v25), &v45, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v44);
    v11 = v44;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        if (v11)
          goto LABEL_24;
LABEL_29:
        __break(0xC471u);
        goto LABEL_31;
      }
      *v23 -= 2;
    }
    if (v11)
      goto LABEL_24;
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48);
  if ((v10 & 4) != 0)
    v14 = JSC::BuiltinNames::lookUpWellKnownSymbol(v13, (unint64_t)a3, a4);
  else
    v14 = JSC::BuiltinNames::lookUpPrivateName(v13, (unint64_t)a3, a4);
  v11 = (WTF::StringImpl *)v14;
  if (!v14)
    goto LABEL_29;
LABEL_24:
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v11, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return v11;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E35986B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E35986B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)(a1 + 8);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 32 * v5;
        v16 = (_QWORD *)v4;
        do
        {
          v17 = (_QWORD *)v16[3];
          if (v17)
          {
            if (v16 != v17)
            {
              *(_QWORD *)(v14 + 24) = v17;
              v16[3] = 0;
              goto LABEL_15;
            }
            *(_QWORD *)(v14 + 24) = v14;
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v16[3] + 24))(v16[3], v14);
          }
          else
          {
            *(_QWORD *)(v14 + 24) = 0;
          }
          v18 = (_QWORD *)v16[3];
          if (v16 == v18)
          {
            v18 = v16;
            v19 = 4;
            goto LABEL_14;
          }
          if (v18)
          {
            v19 = 5;
LABEL_14:
            (*(void (**)(void))(*v18 + 8 * v19))();
          }
LABEL_15:
          v14 += 32;
          v16 += 4;
          v15 -= 32;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::Encoder::allocateNewPage(JSC::Encoder *this, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;

  if ((byte_1ECF58DA8 & 1) == 0)
  {
    v23 = a2;
    v24 = WTF::s_pageSize;
    if (!WTF::s_pageSize)
    {
      v24 = sysconf(29);
      WTF::s_pageSize = v24;
      if ((v24 & (v24 - 1)) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1988D1904);
      }
      if (v24 > 0x4000)
      {
        __break(0xC471u);
        JUMPOUT(0x1988D1924);
      }
      if (((v24 + 0x3FFF) & -(uint64_t)v24) != 0x4000)
        goto LABEL_24;
    }
    _MergedGlobals_41 = v24;
    byte_1ECF58DA8 = 1;
    a2 = v23;
  }
  v3 = *((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_7;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != v4)
  {
    if (v5 <= *(_QWORD *)(v3 + 16))
    {
      *(_QWORD *)(v3 + 8) = v5;
      v4 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_6;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1988D1878);
  }
LABEL_6:
  *((_QWORD *)this + 2) += v4;
LABEL_7:
  if (_MergedGlobals_41 <= a2)
    v6 = (WTF *)((a2 + _MergedGlobals_41 - 1) & -_MergedGlobals_41);
  else
    v6 = (WTF *)_MergedGlobals_41;
  v7 = WTF::fastMalloc(v6);
  v25 = v7;
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = v6;
  v15 = *((unsigned int *)this + 11);
  if ((_DWORD)v15 == *((_DWORD *)this + 10))
  {
    v16 = WTF::Vector<JSC::Encoder::Page,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v15 + 1, (unint64_t)&v25);
    v17 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)v17 = v18;
    *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
    v19 = v25;
  }
  else
  {
    v20 = v7;
    v19 = 0;
    v21 = *((_QWORD *)this + 4) + 24 * v15;
    v25 = 0;
    *(_QWORD *)v21 = v20;
    *(_OWORD *)(v21 + 8) = v26;
  }
  ++*((_DWORD *)this + 11);
  WTF::fastFree(v19, v8, v9, v10, v11, v12, v13, v14);
  v22 = *((_DWORD *)this + 11);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1988D18E4);
  }
  *((_QWORD *)this + 3) = *((_QWORD *)this + 4) + 24 * v22 - 24;
}

unint64_t WTF::Vector<JSC::Encoder::Page,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = v5 + 24 * *(unsigned int *)(a1 + 12);
    if (v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v23 = *(_QWORD *)a1;
        return v23 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v18 = WTF::fastMalloc((WTF *)(24 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v18;
        do
        {
          v20 = v18 + v19;
          v21 = v5 + v19;
          v22 = *(_QWORD *)(v5 + v19);
          *(_QWORD *)(v5 + v19) = 0;
          *(_QWORD *)v20 = v22;
          *(_OWORD *)(v20 + 8) = *(_OWORD *)(v5 + v19 + 8);
          WTF::fastFree(*(_QWORD *)(v5 + v19), v11, v12, v13, v14, v15, v16, v17);
          v19 += 24;
        }
        while (v21 + 24 != v6);
        v23 = *(_QWORD *)a1;
        if (v5)
        {
          if (v23 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
          v23 = *(_QWORD *)a1;
        }
        return v23 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1988D1B50);
    }
  }
  v24 = *(unsigned int *)(a1 + 8);
  v25 = v24 + (v24 >> 2);
  if (v25 >= 0x10)
    v26 = v25 + 1;
  else
    v26 = 16;
  if (v26 <= a2)
    v26 = a2;
  if (v26 > v24)
  {
    if (v26 >= 0xAAAAAAB)
      goto LABEL_33;
    v27 = *(_DWORD *)(a1 + 12);
    v28 = 24 * v26;
    v29 = WTF::fastMalloc((WTF *)(24 * v26));
    *(_DWORD *)(a1 + 8) = (v28 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v29;
    if (v27)
    {
      v37 = v29;
      v38 = v5 + 24 * v27;
      v39 = v5;
      do
      {
        v40 = *(_QWORD *)v39;
        *(_QWORD *)v39 = 0;
        *(_QWORD *)v37 = v40;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)(v39 + 8);
        v41 = *(_QWORD *)v39;
        v39 += 24;
        WTF::fastFree(v41, v30, v31, v32, v33, v34, v35, v36);
        v37 += 24;
      }
      while (v39 != v38);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v30, v31, v32, v33, v34, v35, v36);
    }
  }
  return v3;
}

uint64_t JSC::CachedCodeBlock<JSC::UnlinkedFunctionCodeBlock>::encode(uint64_t a1, JSC::Encoder *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;

  *(_DWORD *)a1 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 12);
  v6 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | (*(_DWORD *)(a3 + 20) >> 31);
  *(_DWORD *)(a1 + 8) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * (((*(_QWORD *)(a3 + 20) >> 62) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * (*(_WORD *)(a3 + 28) & 1));
  *(_DWORD *)(a1 + 8) = v8;
  v9 = v8 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a3 + 28) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v9;
  v10 = v9 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a3 + 28) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v10;
  v11 = v10 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a3 + 28) >> 3) & 1));
  *(_DWORD *)(a1 + 8) = v11;
  v12 = v11 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a3 + 28) >> 4) & 1) << 6);
  *(_DWORD *)(a1 + 8) = v12;
  v13 = v12 & 0xFFFFDFFF | (((*(_DWORD *)(a3 + 27) >> 13) & 1) << 13);
  *(_DWORD *)(a1 + 8) = v13;
  v14 = v13 & 0xFFFFFE7F | (((*(unsigned __int16 *)(a3 + 28) >> 6) & 3) << 7);
  *(_DWORD *)(a1 + 8) = v14;
  v15 = v14 & 0xFFFFF9FF | ((HIBYTE(*(unsigned __int16 *)(a3 + 28)) & 3) << 9);
  *(_DWORD *)(a1 + 8) = v15;
  v16 = v15 & 0xFFFFE7FF | (((*(unsigned __int16 *)(a3 + 28) >> 10) & 3) << 11);
  *(_DWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 16) & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 20) & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 24) & 0x7FFFFFFF;
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 40);
  v17 = v16 & 0xFFF9FFFF | (((*(unsigned __int8 *)(a3 + 30) >> 2) & 3) << 17);
  *(_DWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a3 + 42);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a3 + 43);
  v18 = v17 & 0xFFFF3FFF | (((*(unsigned __int16 *)(a3 + 28) >> 12) & 3) << 14);
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 8) = v18 & 0xFFFEFFFF | (((*(unsigned __int8 *)(a3 + 30) >> 1) & 1) << 16);
  v19 = *(_DWORD **)(a3 + 184);
  if (v19)
    LODWORD(v19) = *v19;
  *(_DWORD *)(a1 + 36) = (_DWORD)v19;
  v20 = *(_DWORD **)(a3 + 192);
  if (v20)
    LODWORD(v20) = *v20;
  *(_DWORD *)(a1 + 40) = (_DWORD)v20;
  v21 = *(_DWORD **)(a3 + 200);
  if (v21)
    LODWORD(v21) = *v21;
  *(_DWORD *)(a1 + 44) = (_DWORD)v21;
  v22 = *(_DWORD **)(a3 + 208);
  if (v22)
    LODWORD(v22) = *v22;
  *(_DWORD *)(a1 + 48) = (_DWORD)v22;
  JSC::CachedMetadataTable::encode(a1 + 52, *(_QWORD *)(a3 + 72));
  JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::encode((_OWORD *)(a1 + 256), (uint64_t)a2, *(unsigned int ***)(a3 + 152));
  v24 = *(_DWORD *)(a3 + 52);
  v23 = (unsigned int *)(a3 + 52);
  JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode((_OWORD *)(a1 + 264), a2, v24 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32));
  JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode((_OWORD *)(a1 + 272), a2, *v23 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32));
  JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::encode((_OWORD *)(a1 + 280), (uint64_t)a2, *(_QWORD *)(v23 + 7));
  JSC::CachedVector<JSC::CachedJSValue,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>(a1 + 304, (uint64_t)a2, v23 + 15);
  JSC::CachedVector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::SourceCodeRepresentation>>((_BYTE *)(a1 + 320), (uint64_t)a2, (unsigned int **)(v23 + 17));
  JSC::CachedPtr<JSC::CachedExpressionInfo,JSC::ExpressionInfo>::encode((_OWORD *)(a1 + 336), (uint64_t)a2, *(_QWORD *)(v23 + 27));
  JSC::CachedVector<unsigned int,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<unsigned int>>(a1 + 288, (uint64_t)a2, (unsigned int **)(v23 + 3));
  JSC::CachedHashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::encode(a1 + 344, (uint64_t)a2, v23 + 23);
  JSC::CachedVector<JSC::CachedIdentifier,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::Identifier>>(a1 + 368, (uint64_t)a2, (unsigned int **)(v23 + 13));
  JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(a1 + 384, a2, v23 + 19);
  return JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(a1 + 400, a2, v23 + 21);
}

uint64_t JSC::CachedMetadataTable::encode(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *(_BYTE *)(a2 + 4);
  *(_BYTE *)result = v2 & 1;
  if ((v2 & 1) != 0)
  {
    v3 = *(_BYTE *)(a2 + 4);
    *(_BYTE *)(result + 1) = (v3 & 8) != 0;
    v4 = *(unsigned int *)(a2 + 8);
    *(_DWORD *)(result + 4) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = 16 * v4;
    if ((v3 & 8) != 0)
    {
      v9 = v5 + 112;
      *(_DWORD *)(result + 196) = *(_DWORD *)(v9 + v6 + 188);
      *(_DWORD *)(result + 192) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 184);
      *(_DWORD *)(result + 188) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 180);
      *(_DWORD *)(result + 184) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 176);
      *(_DWORD *)(result + 180) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 172);
      *(_DWORD *)(result + 176) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 168);
      *(_DWORD *)(result + 172) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 164);
      *(_DWORD *)(result + 168) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 160);
      *(_DWORD *)(result + 164) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 156);
      *(_DWORD *)(result + 160) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 152);
      *(_DWORD *)(result + 156) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 148);
      *(_DWORD *)(result + 152) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 144);
      *(_DWORD *)(result + 148) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 140);
      *(_DWORD *)(result + 144) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 136);
      *(_DWORD *)(result + 140) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 132);
      *(_DWORD *)(result + 136) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 128);
      *(_DWORD *)(result + 132) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 124);
      *(_DWORD *)(result + 128) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 120);
      *(_DWORD *)(result + 124) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 116);
      *(_DWORD *)(result + 120) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 112);
      *(_DWORD *)(result + 116) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 108);
      *(_DWORD *)(result + 112) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 104);
      *(_DWORD *)(result + 108) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 100);
      *(_DWORD *)(result + 104) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 96);
      *(_DWORD *)(result + 100) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 92);
      *(_DWORD *)(result + 96) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 88);
      *(_DWORD *)(result + 92) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 84);
      *(_DWORD *)(result + 88) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 80);
      *(_DWORD *)(result + 84) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 76);
      *(_DWORD *)(result + 80) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 72);
      *(_DWORD *)(result + 76) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 68);
      *(_DWORD *)(result + 72) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 64);
      *(_DWORD *)(result + 68) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 60);
      *(_DWORD *)(result + 64) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 56);
      *(_DWORD *)(result + 60) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 52);
      *(_DWORD *)(result + 56) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 48);
      *(_DWORD *)(result + 52) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 44);
      *(_DWORD *)(result + 48) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 40);
      *(_DWORD *)(result + 44) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 36);
      *(_DWORD *)(result + 40) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 32);
      *(_DWORD *)(result + 36) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 28);
      *(_DWORD *)(result + 32) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 24);
      *(_DWORD *)(result + 28) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 20);
      *(_DWORD *)(result + 24) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 16);
      *(_DWORD *)(result + 20) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 12);
      *(_DWORD *)(result + 16) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 8);
      *(_DWORD *)(result + 12) = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8) + 4);
      v8 = *(_DWORD *)(v9 + 16 * *(unsigned int *)(a2 + 8));
    }
    else
    {
      v7 = v5 + 16;
      *(_DWORD *)(result + 196) = *(unsigned __int16 *)(v7 + v6 + 94);
      *(_DWORD *)(result + 192) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 92);
      *(_DWORD *)(result + 188) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 90);
      *(_DWORD *)(result + 184) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 88);
      *(_DWORD *)(result + 180) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 86);
      *(_DWORD *)(result + 176) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 84);
      *(_DWORD *)(result + 172) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 82);
      *(_DWORD *)(result + 168) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 80);
      *(_DWORD *)(result + 164) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 78);
      *(_DWORD *)(result + 160) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 76);
      *(_DWORD *)(result + 156) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 74);
      *(_DWORD *)(result + 152) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 72);
      *(_DWORD *)(result + 148) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 70);
      *(_DWORD *)(result + 144) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 68);
      *(_DWORD *)(result + 140) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 66);
      *(_DWORD *)(result + 136) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 64);
      *(_DWORD *)(result + 132) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 62);
      *(_DWORD *)(result + 128) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 60);
      *(_DWORD *)(result + 124) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 58);
      *(_DWORD *)(result + 120) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 56);
      *(_DWORD *)(result + 116) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 54);
      *(_DWORD *)(result + 112) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 52);
      *(_DWORD *)(result + 108) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 50);
      *(_DWORD *)(result + 104) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 48);
      *(_DWORD *)(result + 100) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 46);
      *(_DWORD *)(result + 96) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 44);
      *(_DWORD *)(result + 92) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 42);
      *(_DWORD *)(result + 88) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 40);
      *(_DWORD *)(result + 84) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 38);
      *(_DWORD *)(result + 80) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 36);
      *(_DWORD *)(result + 76) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 34);
      *(_DWORD *)(result + 72) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 32);
      *(_DWORD *)(result + 68) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 30);
      *(_DWORD *)(result + 64) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 28);
      *(_DWORD *)(result + 60) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 26);
      *(_DWORD *)(result + 56) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 24);
      *(_DWORD *)(result + 52) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 22);
      *(_DWORD *)(result + 48) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 20);
      *(_DWORD *)(result + 44) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 18);
      *(_DWORD *)(result + 40) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 16);
      *(_DWORD *)(result + 36) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 14);
      *(_DWORD *)(result + 32) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 12);
      *(_DWORD *)(result + 28) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 10);
      *(_DWORD *)(result + 24) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 8);
      *(_DWORD *)(result + 20) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 6);
      *(_DWORD *)(result + 16) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 4);
      *(_DWORD *)(result + 12) = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8) + 2);
      v8 = *(unsigned __int16 *)(v7 + 16 * *(unsigned int *)(a2 + 8));
    }
    *(_DWORD *)(result + 8) = v8;
  }
  return result;
}

_OWORD *JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::encode(_OWORD *result, uint64_t a2, unsigned int **a3)
{
  unsigned int **v3;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  int64x2_t *v21;
  int64x2_t *v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t *v25;
  __int8 *v26;
  __int32 v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t j;
  unsigned int *v109;
  unsigned int *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int8 v176;
  unsigned int v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int64x2_t v195;
  _OWORD *v196;
  unint64_t v197;
  unint64_t i;
  unsigned int *v199;
  unint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  unsigned int *v203;
  uint64_t *v204;
  WTF::AtomStringImpl *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  unint64_t v246;
  uint64_t *v247;
  WTF::StringImpl *v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  unint64_t v273;
  unsigned int *v274;
  _DWORD *v275;
  unsigned int *v276;
  int *v277;
  unsigned int **v278;
  int *v279;
  _QWORD *v280;
  int v281;
  unint64_t v282;
  _DWORD *v283;
  unsigned int v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unsigned int *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int *v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t *v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unsigned int **v335;
  int64x2_t *v336;
  __int128 v337;
  uint64_t v338;
  unsigned int **v339;

  if (!a3)
    return result;
  v3 = a3;
  v5 = result;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(unsigned int ***)(v6 + 16 * v11);
    if (v12 != a3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(unsigned int ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == a3)
          goto LABEL_9;
      }
      v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v11 != *(_DWORD *)(v6 - 4))
    {
      v39 = *(_DWORD *)(a2 + 44);
      if (!v39)
      {
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x1988D26BCLL);
      }
      v40 = 0;
      v41 = *(_QWORD *)(v6 + 16 * v11 + 8);
      v42 = *(_QWORD **)(a2 + 32);
      v43 = &v42[3 * v39];
      while (1)
      {
        v44 = v42[1];
        if (*v42 <= (unint64_t)result && *v42 + v44 > (unint64_t)result)
          break;
        v40 += v44;
        v42 += 3;
        if (v42 == v43)
          goto LABEL_40;
      }
      *(_QWORD *)result = v41 - ((_QWORD)result + v40) + *v42;
      return result;
    }
  }
  v14 = *(_DWORD *)(a2 + 44);
  if (!v14)
    goto LABEL_302;
  v15 = 0;
  v16 = *(_QWORD **)(a2 + 32);
  v17 = &v16[3 * v14];
  while (1)
  {
    v18 = v16[1];
    if (*v16 <= (unint64_t)result && *v16 + v18 > (unint64_t)result)
      break;
    v15 += v18;
    v16 += 3;
    if (v16 == v17)
      goto LABEL_302;
  }
  v331 = (uint64_t *)(a2 + 48);
  v20 = *v16 - ((_QWORD)result + v15);
  v21 = (int64x2_t *)JSC::Encoder::malloc((JSC::Encoder *)a2, 0x80u);
  v22 = v21;
  *v5 = v20 + v23;
  v21[1].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  v24 = v21 + 1;
  v21[2].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  v25 = v21 + 2;
  v21->i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  v21[3] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v21[4].i64[1] = 0x7FFFFFFFFFFFFFFFLL;
  v26 = &v21[4].i8[8];
  v21[5].i64[1] = 0x7FFFFFFFFFFFFFFFLL;
  v330 = &v21[5].i64[1];
  v21[6].i64[1] = 0x7FFFFFFFFFFFFFFFLL;
  v329 = &v21[6].i64[1];
  if (*v3)
  {
    v27 = **v3;
    v21->i32[2] = v27;
    if (v27)
    {
      v28 = *(_DWORD *)(a2 + 44);
      if (!v28)
      {
LABEL_27:
        __break(0xC471u);
        JUMPOUT(0x1988D25F8);
      }
      v29 = 0;
      v30 = *(_QWORD **)(a2 + 32);
      v31 = &v30[3 * v28];
      while (1)
      {
        v32 = v30[1];
        if (*v30 <= (unint64_t)v21 && *v30 + v32 > (unint64_t)v21)
          break;
        v29 += v32;
        v30 += 3;
        if (v30 == v31)
          goto LABEL_27;
      }
      v34 = *v30 - ((_QWORD)v21 + v29);
      v35 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * v27);
      v22->i64[0] = v34 + v36;
      if (v22->i32[2])
      {
        v37 = 0;
        v38 = 0;
        do
        {
          if (v38 >= **v3)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D319CLL);
          }
          *(_OWORD *)(v35 + v37 * 4) = *(_OWORD *)&(*v3)[v37 + 1];
          ++v38;
          v37 += 4;
        }
        while (v38 < v22->u32[2]);
      }
    }
  }
  else
  {
    v21->i32[2] = 0;
  }
  v332 = (unint64_t)v26;
  v46 = v3[1];
  v336 = v22;
  if (v46)
  {
    v184 = *v46;
    v22[1].i32[2] = v184;
    if ((_DWORD)v184)
    {
      v185 = *(_DWORD *)(a2 + 44);
      if (!v185)
      {
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1988D2D68);
      }
      v186 = 0;
      v187 = *(_QWORD **)(a2 + 32);
      v188 = &v187[3 * v185];
      while (1)
      {
        v189 = v187[1];
        if (*v187 <= (unint64_t)v24 && *v187 + v189 > (unint64_t)v24)
          break;
        v186 += v189;
        v187 += 3;
        if (v187 == v188)
          goto LABEL_175;
      }
      v268 = *v187 - ((_QWORD)v24 + v186);
      v269 = JSC::Encoder::malloc((JSC::Encoder *)a2, 24 * (int)v184);
      v24->i64[0] = v268 + v270;
      v271 = 24 * v184;
      v272 = (_QWORD *)(v269 + 8);
      do
      {
        *v272 = 0x7FFFFFFFFFFFFFFFLL;
        v272 += 3;
        v271 -= 24;
      }
      while (v271);
      if (v22[1].i32[2])
      {
        v273 = 0;
        do
        {
          v274 = v3[1];
          if (v273 >= *v274)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D321CLL);
          }
          v275 = (_DWORD *)(v269 + 24 * v273);
          v276 = &v274[4 * v273];
          v279 = (int *)*((_QWORD *)v276 + 1);
          v278 = (unsigned int **)(v276 + 2);
          v277 = v279;
          *v275 = *((_DWORD *)v278 + 2);
          v280 = v275 + 2;
          if (v279)
          {
            v281 = *v277;
            v282 = v269 + 24 * v273;
            *(_DWORD *)(v282 + 16) = v281;
            v283 = (_DWORD *)(v282 + 16);
            if (v281)
            {
              v284 = *(_DWORD *)(a2 + 44);
              if (!v284)
              {
LABEL_264:
                __break(0xC471u);
                JUMPOUT(0x1988D329CLL);
              }
              v285 = 0;
              v286 = *(_QWORD **)(a2 + 32);
              v287 = &v286[3 * v284];
              while (1)
              {
                v288 = v286[1];
                if (*v286 <= (unint64_t)v280 && *v286 + v288 > (unint64_t)v280)
                  break;
                v285 += v288;
                v286 += 3;
                if (v286 == v287)
                  goto LABEL_264;
              }
              v290 = *v286 - ((_QWORD)v280 + v285);
              v291 = JSC::Encoder::malloc((JSC::Encoder *)a2, 4 * v281);
              v293 = v290 + v292;
              v22 = v336;
              *v280 = v293;
              if (*v283)
              {
                v294 = 0;
                v295 = *v278;
                do
                {
                  if (v294 >= *v295)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1988D317CLL);
                  }
                  *(_DWORD *)(v291 + 4 * v294) = v295[v294 + 1];
                  ++v294;
                }
                while (v294 < *v283);
              }
            }
          }
          else
          {
            *(_DWORD *)(v269 + 24 * v273 + 16) = 0;
          }
          ++v273;
        }
        while (v273 < v22[1].u32[2]);
      }
    }
  }
  else
  {
    v22[1].i32[2] = 0;
  }
  v47 = v3[2];
  v335 = v3;
  if (v47)
  {
    v87 = *v47;
    v22[2].i32[2] = v87;
    if ((_DWORD)v87)
    {
      v88 = *(_DWORD *)(a2 + 44);
      if (!v88)
      {
LABEL_90:
        __break(0xC471u);
        JUMPOUT(0x1988D2920);
      }
      v89 = 0;
      v90 = *(_QWORD **)(a2 + 32);
      v91 = &v90[3 * v88];
      while (1)
      {
        v92 = v90[1];
        if (*v90 <= (unint64_t)v25 && *v90 + v92 > (unint64_t)v25)
          break;
        v89 += v92;
        v90 += 3;
        if (v90 == v91)
          goto LABEL_90;
      }
      v191 = *v90 - ((_QWORD)v25 + v89);
      v192 = JSC::Encoder::malloc((JSC::Encoder *)a2, 24 * (int)v87);
      v25->i64[0] = v191 + v193;
      v194 = 24 * v87;
      v195 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v333 = v192;
      v196 = (_OWORD *)v192;
      do
      {
        *v196 = v195;
        v196 = (_OWORD *)((char *)v196 + 24);
        v194 -= 24;
      }
      while (v194);
      v197 = v22[2].u32[2];
      if ((_DWORD)v197)
      {
        for (i = 0; i < v197; ++i)
        {
          v199 = v3[2];
          if (i >= *v199)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D31FCLL);
          }
          v200 = v333 + 24 * i;
          v201 = &v199[6 * i];
          v202 = v201[5];
          if ((_DWORD)v202)
          {
            v334 = i;
            if (v202 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1988D3484);
            }
            v203 = v201 + 2;
            v204 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v202));
            bzero(v204, 16 * v202);
            if (v203[3])
            {
              v212 = v203[2];
              if ((_DWORD)v212)
              {
                v213 = 16 * v212;
                v214 = *(_QWORD **)v203;
                while (!*v214)
                {
                  v214 += 2;
                  v213 -= 16;
                  if (!v213)
                    goto LABEL_204;
                }
              }
              else
              {
                v214 = *(_QWORD **)v203;
              }
              v215 = *(_QWORD *)v203 + 16 * v212;
              if (v214 != (_QWORD *)v215)
              {
                v216 = 0;
                v217 = (_DWORD *)*v214;
                while (1)
                {
                  if (v217)
                    *v217 += 2;
                  if (v216 == v202)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1988D3474);
                  }
                  v218 = v214[1];
                  v219 = (WTF::StringImpl *)v204[2 * v216];
                  v204[2 * v216] = (uint64_t)v217;
                  if (v219)
                  {
                    if (*(_DWORD *)v219 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v219, v205, v206, v207, v208, v209, v210, v211);
                      WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
                    }
                    else
                    {
                      *(_DWORD *)v219 -= 2;
                    }
                  }
                  v204[2 * v216 + 1] = v218;
                  v214 += 2;
                  if (v214 == (_QWORD *)v215)
                    break;
                  ++v216;
                  while (1)
                  {
                    v217 = (_DWORD *)*v214;
                    if (*v214)
                      break;
                    v214 += 2;
                    if (v214 == (_QWORD *)v215)
                      goto LABEL_204;
                  }
                }
              }
            }
LABEL_204:
            *(_DWORD *)(v200 + 16) = v202;
            v228 = *(_DWORD *)(a2 + 44);
            if (!v228)
            {
LABEL_263:
              __break(0xC471u);
              JUMPOUT(0x1988D327CLL);
            }
            v229 = 0;
            v230 = (_QWORD *)(v200 + 8);
            v231 = *(_QWORD **)(a2 + 32);
            v232 = &v231[3 * v228];
            while (1)
            {
              v233 = v231[1];
              if (*v231 <= (unint64_t)v230 && *v231 + v233 > (unint64_t)v230)
                break;
              v229 += v233;
              v231 += 3;
              if (v231 == v232)
                goto LABEL_263;
            }
            v235 = *v231 - ((_QWORD)v230 + v229);
            v243 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v202);
            *v230 = (char *)v236 + v235;
            v244 = 16 * v202;
            v245 = (_QWORD *)v243;
            do
            {
              *v245 = 0x7FFFFFFFFFFFFFFFLL;
              v245 += 2;
              v244 -= 16;
            }
            while (v244);
            if (*(_DWORD *)(v200 + 16))
            {
              v246 = 0;
              v247 = v204 + 1;
              do
              {
                if (v202 == v246)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988D346CLL);
                }
                v248 = (WTF::StringImpl *)*(v247 - 1);
                if (v248)
                {
                  *(_DWORD *)v248 += 2;
                  JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode((_OWORD *)v243, (JSC::Encoder *)a2, (uint64_t)v248);
                  if (*(_DWORD *)v248 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v248, v236, v237, v238, v239, v240, v241, v242);
                    WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                  }
                  else
                  {
                    *(_DWORD *)v248 -= 2;
                  }
                }
                v249 = *v247;
                v247 += 2;
                *(_QWORD *)(v243 + 8) = v249;
                ++v246;
                v243 += 16;
              }
              while (v246 < *(unsigned int *)(v200 + 16));
            }
            v258 = 0;
            v3 = v335;
            v22 = v336;
            do
            {
              v259 = (WTF::StringImpl *)v204[v258];
              v204[v258] = 0;
              if (v259)
              {
                if (*(_DWORD *)v259 == 2)
                {
                  WTF::StringImpl::~StringImpl(v259, v236, v237, v238, v239, v240, v241, v242);
                  WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
                }
                else
                {
                  *(_DWORD *)v259 -= 2;
                }
              }
              v258 += 2;
            }
            while (2 * v202 != v258);
            WTF::fastFree((unint64_t)v204, v236, v237, v238, v239, v240, v241, v242);
            v197 = v336[2].u32[2];
            i = v334;
          }
          else
          {
            *(_DWORD *)(v200 + 16) = 0;
          }
        }
      }
    }
  }
  else
  {
    v22[2].i32[2] = 0;
  }
  v48 = v3[3];
  if (!v48)
    goto LABEL_48;
  v296 = *(v48 - 3);
  if ((_DWORD)v296)
  {
    if (v296 < 0x15555556)
    {
      v297 = WTF::fastMalloc((WTF *)(12 * v296));
      v298 = v297;
      v299 = v335[3];
      if (v299 && *(v299 - 3))
      {
        v300 = *(v299 - 1);
        if ((_DWORD)v300)
        {
          v301 = 12 * v300;
          v302 = v335[3];
          while (*v302 + 1 <= 1)
          {
            v302 += 3;
            v301 -= 12;
            if (!v301)
              goto LABEL_283;
          }
        }
        else
        {
          v302 = v335[3];
        }
        v303 = &v299[3 * v300];
        if (v302 != v303)
        {
          v304 = 0;
          v305 = *v302;
          v306 = 1;
LABEL_278:
          v307 = v297 + 12 * v304;
          v304 = v306;
          v308 = *(_QWORD *)(v302 + 1);
          *(_DWORD *)v307 = v305;
          *(_QWORD *)(v307 + 4) = v308;
          while (1)
          {
            v302 += 3;
            if (v302 == v303)
              break;
            v305 = *v302;
            if (*v302 + 1 > 1)
            {
              v306 = v304 + 1;
              if (v304 == v296)
              {
                __break(0xC471u);
                JUMPOUT(0x1988D337CLL);
              }
              goto LABEL_278;
            }
          }
        }
      }
LABEL_283:
      v336[4].i32[0] = v296;
      v309 = *(_DWORD *)(a2 + 44);
      if (!v309)
      {
LABEL_290:
        __break(0xC471u);
        JUMPOUT(0x1988D33E8);
      }
      v310 = 0;
      v311 = &v336[3].i64[1];
      v312 = *(_QWORD **)(a2 + 32);
      v313 = &v312[3 * v309];
      while (1)
      {
        v314 = v312[1];
        if (*v312 <= (unint64_t)v311 && *v312 + v314 > (unint64_t)v311)
          break;
        v310 += v314;
        v312 += 3;
        if (v312 == v313)
          goto LABEL_290;
      }
      v316 = *v312 - ((_QWORD)v311 + v310);
      v317 = JSC::Encoder::malloc((JSC::Encoder *)a2, 12 * (int)v296);
      v336[3].i64[1] = (uint64_t)&v318[v316];
      if (v336[4].i32[0])
      {
        v325 = 0;
        v326 = (_QWORD *)(v298 + 4);
        v327 = (_QWORD *)(v317 + 4);
        do
        {
          if (v296 == v325)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D3494);
          }
          *((_DWORD *)v327 - 1) = *((_DWORD *)v326 - 1);
          v328 = *v326;
          v326 = (_QWORD *)((char *)v326 + 12);
          *v327 = v328;
          v327 = (_QWORD *)((char *)v327 + 12);
          ++v325;
        }
        while (v325 < v336[4].u32[0]);
      }
      WTF::fastFree(v298, v318, v319, v320, v321, v322, v323, v324);
      v3 = v335;
      v22 = v336;
      goto LABEL_49;
    }
LABEL_302:
    __break(0xC471u);
    JUMPOUT(0x1988D2524);
  }
  v3 = v335;
  v22 = v336;
LABEL_48:
  v22[4].i32[0] = 0;
LABEL_49:
  JSC::CachedVector<unsigned int,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<unsigned int>>(v332, a2, v3 + 4);
  v53 = v3[5];
  if (v53)
  {
    v54 = *v53;
    v22[6].i32[0] = v54;
    if ((_DWORD)v54)
    {
      v55 = *(_DWORD *)(a2 + 44);
      if (!v55)
      {
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x1988D278CLL);
      }
      v56 = 0;
      v57 = *(_QWORD **)(a2 + 32);
      v58 = &v57[3 * v55];
      while (1)
      {
        v59 = v57[1];
        if (*v57 <= (unint64_t)v330 && *v57 + v59 > (unint64_t)v330)
          break;
        v56 += v59;
        v57 += 3;
        if (v57 == v58)
          goto LABEL_58;
      }
      v61 = *v57 - ((_QWORD)v330 + v56);
      v62 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v54);
      *v330 = v61 + v63;
      v64 = 16 * v54;
      v65 = (_QWORD *)v62;
      do
      {
        *v65 = 0x7FFFFFFFFFFFFFFFLL;
        v65 += 2;
        v64 -= 16;
      }
      while (v64);
      v66 = v22[6].u32[0];
      if ((_DWORD)v66)
      {
        v67 = 0;
        while (1)
        {
          v68 = v3[5];
          if (v67 >= *v68)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D31BCLL);
          }
          v69 = &v68[2 * v67];
          v72 = *((_QWORD *)v69 + 1);
          v71 = (uint64_t *)(v69 + 2);
          v70 = v72;
          if (v72 < 0)
            break;
          v73 = *(_QWORD *)(2 * v70);
          *(_QWORD *)(v62 + 16 * v67 + 8) = v73;
          if (v73)
            goto LABEL_68;
LABEL_80:
          if (++v67 >= v66)
            goto LABEL_92;
        }
        *(_QWORD *)(v62 + 16 * v67 + 8) = 63;
        v73 = 63;
LABEL_68:
        v74 = *(_DWORD *)(a2 + 44);
        if (!v74)
        {
LABEL_262:
          __break(0xC471u);
          JUMPOUT(0x1988D325CLL);
        }
        v75 = 0;
        v76 = (_QWORD *)(v62 + 16 * v67);
        v77 = (unint64_t)(v73 + 7) >> 3;
        v78 = *(_QWORD **)(a2 + 32);
        v79 = &v78[3 * v74];
        while (1)
        {
          v80 = v78[1];
          if (*v78 <= (unint64_t)v76 && *v78 + v80 > (unint64_t)v76)
            break;
          v75 += v80;
          v78 += 3;
          if (v78 == v79)
            goto LABEL_262;
        }
        v82 = *v78 - ((_QWORD)v76 + v75);
        v83 = (void *)JSC::Encoder::malloc((JSC::Encoder *)a2, v77);
        v85 = v82 + v84;
        v22 = v336;
        *v76 = v85;
        if (*v71 >= 0)
          v86 = (uint64_t *)(2 * *v71 + 8);
        else
          v86 = v71;
        memcpy(v83, v86, v77);
        v66 = v336[6].u32[0];
        goto LABEL_80;
      }
    }
  }
  else
  {
    v22[6].i32[0] = 0;
  }
LABEL_92:
  v94 = v3[6];
  if (v94)
  {
    v95 = *v94;
    v22[7].i32[0] = v95;
    if ((_DWORD)v95)
    {
      v96 = *(_DWORD *)(a2 + 44);
      if (!v96)
      {
LABEL_101:
        __break(0xC471u);
        JUMPOUT(0x1988D299CLL);
      }
      v97 = 0;
      v98 = *(_QWORD **)(a2 + 32);
      v99 = &v98[3 * v96];
      while (1)
      {
        v100 = v98[1];
        if (*v98 <= (unint64_t)v329 && *v98 + v100 > (unint64_t)v329)
          break;
        v97 += v100;
        v98 += 3;
        if (v98 == v99)
          goto LABEL_101;
      }
      v102 = *v98 - ((_QWORD)v329 + v97);
      v103 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v95);
      *v329 = v102 + v104;
      v105 = 16 * v95;
      v106 = (_QWORD *)v103;
      do
      {
        *v106 = 0x7FFFFFFFFFFFFFFFLL;
        v106 += 2;
        v105 -= 16;
      }
      while (v105);
      v107 = v22[7].u32[0];
      if ((_DWORD)v107)
      {
        for (j = 0; j < v107; ++j)
        {
          v109 = v3[6];
          if (j >= *v109)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D31DCLL);
          }
          v110 = v109 + 2;
          v111 = *(_QWORD *)&v109[2 * j + 2];
          v112 = v103 + 16 * j;
          if (v111 && (v113 = *(unsigned int *)(v111 - 12), (_DWORD)v113))
          {
            if (v113 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1988D347CLL);
            }
            v114 = (char *)WTF::fastMalloc((WTF *)(8 * v113));
            bzero(v114, 8 * v113);
            v122 = *(_QWORD *)&v110[2 * j];
            if (v122 && *(_DWORD *)(v122 - 12))
            {
              v123 = *(unsigned int *)(v122 - 4);
              if ((_DWORD)v123)
              {
                v124 = 8 * v123;
                v125 = *(_QWORD **)&v110[2 * j];
                while ((unint64_t)(*v125 + 1) <= 1)
                {
                  ++v125;
                  v124 -= 8;
                  if (!v124)
                    goto LABEL_116;
                }
              }
              else
              {
                v125 = *(_QWORD **)&v110[2 * j];
              }
              v162 = (_QWORD *)(v122 + 8 * v123);
              if (v162 != v125)
              {
                v163 = 0;
                v164 = (_DWORD *)*v125;
                v165 = 1;
LABEL_146:
                v166 = v165;
                if (v164)
                  *v164 += 2;
                v167 = *(WTF::StringImpl **)&v114[8 * v163];
                *(_QWORD *)&v114[8 * v163] = v164;
                if (v167)
                {
                  if (*(_DWORD *)v167 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v167, v115, v116, v117, v118, v119, v120, v121);
                    WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
                  }
                  else
                  {
                    *(_DWORD *)v167 -= 2;
                  }
                }
                while (++v125 != v162)
                {
                  v164 = (_DWORD *)*v125;
                  if ((unint64_t)(*v125 + 1) > 1)
                  {
                    v165 = v166 + 1;
                    v163 = v166;
                    if (v166 == v113)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988D348CLL);
                    }
                    goto LABEL_146;
                  }
                }
              }
            }
LABEL_116:
            *(_DWORD *)(v112 + 8) = v113;
            v126 = *(_DWORD *)(a2 + 44);
            if (!v126)
            {
LABEL_261:
              __break(0xC471u);
              JUMPOUT(0x1988D323CLL);
            }
            v127 = 0;
            v128 = *(unint64_t **)(a2 + 32);
            v129 = &v128[3 * v126];
            while (1)
            {
              v130 = v128[1];
              if (*v128 <= v112 && *v128 + v130 > v112)
                break;
              v127 += v130;
              v128 += 3;
              if (v128 == v129)
                goto LABEL_261;
            }
            v132 = *v128 - (v127 + v112);
            v133 = (char *)JSC::Encoder::malloc((JSC::Encoder *)a2, 8 * (int)v113);
            *(_QWORD *)v112 = v132 + v134;
            memset_pattern16(v133, &unk_1991575D0, 8 * v113);
            if (*(_DWORD *)(v112 + 8))
            {
              v142 = 0;
              do
              {
                if (v113 == v142)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988D3464);
                }
                v143 = *(WTF::StringImpl **)&v114[8 * v142];
                if (v143)
                {
                  *(_DWORD *)v143 += 2;
                  JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v133, (JSC::Encoder *)a2, v143);
                  if (*(_DWORD *)v143 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v143, v135, v136, v137, v138, v139, v140, v141);
                    WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
                  }
                  else
                  {
                    *(_DWORD *)v143 -= 2;
                  }
                }
                ++v142;
                v133 += 8;
              }
              while (v142 < *(unsigned int *)(v112 + 8));
            }
            v152 = 0;
            v3 = v335;
            v22 = v336;
            do
            {
              v153 = *(WTF::StringImpl **)&v114[v152];
              *(_QWORD *)&v114[v152] = 0;
              if (v153)
              {
                if (*(_DWORD *)v153 == 2)
                {
                  WTF::StringImpl::~StringImpl(v153, v135, v136, v137, v138, v139, v140, v141);
                  WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
                }
                else
                {
                  *(_DWORD *)v153 -= 2;
                }
              }
              v152 += 8;
            }
            while (8 * v113 != v152);
            WTF::fastFree((unint64_t)v114, v135, v136, v137, v138, v139, v140, v141);
            v107 = v336[7].u32[0];
          }
          else
          {
            *(_DWORD *)(v112 + 8) = 0;
          }
        }
      }
    }
  }
  else
  {
    v22[7].i32[0] = 0;
  }
  v176 = v22[7].i8[8] & 0xFE | (_BYTE)v3[7] & 1;
  v22[7].i8[8] = v176;
  v22[7].i8[8] = v176 & 0xFD | (_BYTE)v3[7] & 2;
  v177 = *(_DWORD *)(a2 + 44);
  if (!v177)
  {
LABEL_164:
    __break(0xC471u);
    JUMPOUT(0x1988D2CB4);
  }
  v178 = 0;
  v179 = *(_QWORD **)(a2 + 32);
  v180 = &v179[3 * v177];
  while (1)
  {
    v181 = v179[1];
    if (*v179 <= (unint64_t)v22 && *v179 + v181 > (unint64_t)v22)
      break;
    v178 += v181;
    v179 += 3;
    if (v179 == v180)
      goto LABEL_164;
  }
  v183 = (uint64_t)v22->i64 + v178 - *v179;
  v339 = v3;
  v338 = v183;
  return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v337, v331, (uint64_t *)&v339, &v338, v49, v50, v51, v52);
}

_OWORD *JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::encode(_OWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 48);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v46 = *(_DWORD *)(a2 + 44);
      if (!v46)
      {
LABEL_46:
        __break(0xC471u);
        JUMPOUT(0x1988D3764);
      }
      v47 = 0;
      v48 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v49 = *(_QWORD **)(a2 + 32);
      v50 = &v49[3 * v46];
      while (1)
      {
        v51 = v49[1];
        if (*v49 <= (unint64_t)result && *v49 + v51 > (unint64_t)result)
          break;
        v47 += v51;
        v49 += 3;
        if (v49 == v50)
          goto LABEL_46;
      }
      *(_QWORD *)result = v48 - ((_QWORD)result + v47) + *v49;
    }
    else
    {
LABEL_10:
      v15 = *(_DWORD *)(a2 + 44);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D35B0);
      }
      v16 = 0;
      v17 = *(_QWORD **)(a2 + 32);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
      v27 = v22;
      *v5 = v21 + v28;
      *(_QWORD *)v22 = 0x7FFFFFFFFFFFFFFFLL;
      v29 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(v22 + 8) = v29;
      if (v29)
      {
        v30 = *(_DWORD *)(a2 + 44);
        if (!v30)
        {
LABEL_26:
          __break(0xC471u);
          JUMPOUT(0x1988D3640);
        }
        v31 = 0;
        v32 = *(unint64_t **)(a2 + 32);
        v33 = &v32[3 * v30];
        while (1)
        {
          v34 = v32[1];
          if (*v32 <= v22 && *v32 + v34 > v22)
            break;
          v31 += v34;
          v32 += 3;
          if (v32 == v33)
            goto LABEL_26;
        }
        v36 = *v32 - (v31 + v22);
        v37 = JSC::Encoder::malloc((JSC::Encoder *)a2, v29);
        *(_QWORD *)v27 = v36 + v38;
        if (*(_DWORD *)(v27 + 8))
        {
          v39 = 0;
          do
          {
            *(_BYTE *)(v37 + v39) = *(_BYTE *)(*(_QWORD *)a3 + v39);
            ++v39;
          }
          while (v39 < *(unsigned int *)(v27 + 8));
        }
      }
      v40 = *(_DWORD *)(a2 + 44);
      if (!v40)
      {
LABEL_37:
        __break(0xC471u);
        JUMPOUT(0x1988D36DCLL);
      }
      v41 = 0;
      v42 = *(unint64_t **)(a2 + 32);
      v43 = &v42[3 * v40];
      while (1)
      {
        v44 = v42[1];
        if (*v42 <= v27 && *v42 + v44 > v27)
          break;
        v41 += v44;
        v42 += 3;
        if (v42 == v43)
          goto LABEL_37;
      }
      v54 = v41 + v27 - *v42;
      v55 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v53, v7, &v55, (uint64_t *)&v54, v23, v24, v25, v26);
    }
  }
  return result;
}

void JSC::CachedVector<JSC::CachedJSValue,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>>>(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  if (*a3)
  {
    v4 = *(unsigned int *)*a3;
    *(_DWORD *)(a1 + 8) = v4;
    if ((_DWORD)v4)
    {
      v6 = *(_DWORD *)(a2 + 44);
      if (!v6)
        goto LABEL_20;
      v8 = 0;
      v9 = *(unint64_t **)(a2 + 32);
      v10 = &v9[3 * v6];
      while (1)
      {
        v11 = v9[1];
        if (*v9 <= a1 && *v9 + v11 > a1)
          break;
        v8 += v11;
        v9 += 3;
        if (v9 == v10)
          goto LABEL_20;
      }
      v13 = *v9 - (v8 + a1);
      v19 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v4);
      *(_QWORD *)a1 = v13 + v21;
      v22 = 16 * v4;
      v23 = (_QWORD *)v19;
      do
      {
        *v23 = 0x7FFFFFFFFFFFFFFFLL;
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
      if (*(_DWORD *)(a1 + 8))
      {
        v24 = 0;
        while (v24 < *(unsigned int *)*a3)
        {
          JSC::CachedJSValue::encode(v19, a2, *(_QWORD *)(*a3 + 8 * v24++ + 8), v14, v15, v16, v17, v18, v20);
          v19 += 16;
          if (v24 >= *(unsigned int *)(a1 + 8))
            return;
        }
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x1988D3820);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
}

_BYTE *JSC::CachedVector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::SourceCodeRepresentation>>(_BYTE *result, uint64_t a2, unsigned int **a3)
{
  _BYTE *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;

  v3 = result;
  if (*a3)
  {
    v4 = **a3;
    *((_DWORD *)result + 2) = v4;
    if (v4)
    {
      v5 = *(_DWORD *)(a2 + 44);
      if (!v5)
      {
LABEL_10:
        __break(0xC471u);
        JUMPOUT(0x1988D395CLL);
      }
      v7 = 0;
      v8 = *(_QWORD **)(a2 + 32);
      v9 = &v8[3 * v5];
      while (1)
      {
        v10 = v8[1];
        if (*v8 <= (unint64_t)result && *v8 + v10 > (unint64_t)result)
          break;
        v7 += v10;
        v8 += 3;
        if (v8 == v9)
          goto LABEL_10;
      }
      v12 = *v8 - (_QWORD)&result[v7];
      result = (_BYTE *)JSC::Encoder::malloc((JSC::Encoder *)a2, v4);
      *(_QWORD *)v3 = v12 + v13;
      v14 = *((unsigned int *)v3 + 2);
      if ((_DWORD)v14)
      {
        v15 = (char *)(*a3 + 1);
        v16 = **a3;
        do
        {
          if (!v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D39D0);
          }
          v17 = *v15++;
          *result++ = v17;
          --v16;
          --v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
  }
  return result;
}

_OWORD *JSC::CachedPtr<JSC::CachedExpressionInfo,JSC::ExpressionInfo>::encode(_OWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 48);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v51 = *(_DWORD *)(a2 + 44);
      if (!v51)
      {
LABEL_45:
        __break(0xC471u);
        JUMPOUT(0x1988D3CB0);
      }
      v52 = 0;
      v53 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v54 = *(_QWORD **)(a2 + 32);
      v55 = &v54[3 * v51];
      while (1)
      {
        v56 = v54[1];
        if (*v54 <= (unint64_t)result && *v54 + v56 > (unint64_t)result)
          break;
        v52 += v56;
        v54 += 3;
        if (v54 == v55)
          goto LABEL_45;
      }
      *(_QWORD *)result = v53 - ((_QWORD)result + v52) + *v54;
    }
    else
    {
LABEL_10:
      v15 = *(_DWORD *)(a2 + 44);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D3AF0);
      }
      v16 = 0;
      v17 = *(_QWORD **)(a2 + 32);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v26 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x18u);
      *v5 = v21 + v27;
      *(_QWORD *)(v26 + 16) = 0x7FFFFFFFFFFFFFFFLL;
      v28 = (_QWORD *)(v26 + 16);
      v29 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)v26 = v29;
      v30 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(v26 + 4) = v30;
      v31 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v26 + 8) = v31;
      v32 = v30 + 2 * v29;
      v33 = (v32 + v31);
      if (v32 + v31)
      {
        v34 = *(_DWORD *)(a2 + 44);
        if (!v34)
        {
LABEL_26:
          __break(0xC471u);
          JUMPOUT(0x1988D3BA0);
        }
        v35 = 0;
        v36 = (int *)(a3 + 24);
        v37 = *(_QWORD **)(a2 + 32);
        v38 = &v37[3 * v34];
        while (1)
        {
          v39 = v37[1];
          if (*v37 <= (unint64_t)v28 && *v37 + v39 > (unint64_t)v28)
            break;
          v35 += v39;
          v37 += 3;
          if (v37 == v38)
            goto LABEL_26;
        }
        v41 = *v37 - ((_QWORD)v28 + v35);
        v42 = (_DWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 4 * (int)v33);
        *v28 = v41 + v43;
        do
        {
          v44 = *v36++;
          *v42++ = v44;
          --v33;
        }
        while (v33);
      }
      v45 = *(_DWORD *)(a2 + 44);
      if (!v45)
      {
LABEL_36:
        __break(0xC471u);
        JUMPOUT(0x1988D3C28);
      }
      v46 = 0;
      v47 = *(unint64_t **)(a2 + 32);
      v48 = &v47[3 * v45];
      while (1)
      {
        v49 = v47[1];
        if (*v47 <= v26 && *v47 + v49 > v26)
          break;
        v46 += v49;
        v47 += 3;
        if (v47 == v48)
          goto LABEL_36;
      }
      v59 = v46 + v26 - *v47;
      v60 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v58, v7, &v60, (uint64_t *)&v59, v22, v23, v24, v25);
    }
  }
  return result;
}

unint64_t JSC::CachedVector<unsigned int,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<unsigned int>>(unint64_t result, uint64_t a2, unsigned int **a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;

  v3 = result;
  if (*a3)
  {
    v4 = **a3;
    *(_DWORD *)(result + 8) = v4;
    if (v4)
    {
      v5 = *(_DWORD *)(a2 + 44);
      if (!v5)
      {
LABEL_10:
        __break(0xC471u);
        JUMPOUT(0x1988D3D64);
      }
      v7 = 0;
      v8 = *(unint64_t **)(a2 + 32);
      v9 = &v8[3 * v5];
      while (1)
      {
        v10 = v8[1];
        if (*v8 <= result && *v8 + v10 > result)
          break;
        v7 += v10;
        v8 += 3;
        if (v8 == v9)
          goto LABEL_10;
      }
      v12 = *v8 - (v7 + result);
      result = JSC::Encoder::malloc((JSC::Encoder *)a2, 4 * v4);
      *(_QWORD *)v3 = v12 + v13;
      if (*(_DWORD *)(v3 + 8))
      {
        v14 = 0;
        v15 = *a3;
        do
        {
          if (v14 >= *v15)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D3DECLL);
          }
          *(_DWORD *)(result + 4 * v14) = v15[v14 + 1];
          ++v14;
        }
        while (v14 < *(unsigned int *)(v3 + 8));
      }
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void JSC::CachedHashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::encode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int *v35;
  int v36;

  if (*a3)
  {
    v4 = *(unsigned int *)(*a3 - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
LABEL_37:
        __break(0xC471u);
        JUMPOUT(0x1988D3EF8);
      }
      v7 = WTF::fastMalloc((WTF *)(8 * v4));
      v8 = v7;
      v9 = (_DWORD *)*a3;
      if (*a3 && *(v9 - 3))
      {
        v10 = *(v9 - 1);
        if ((_DWORD)v10)
        {
          v11 = 8 * v10;
          v12 = (_DWORD *)*a3;
          while ((*v12 + 1) <= 1)
          {
            v12 += 2;
            v11 -= 8;
            if (!v11)
              goto LABEL_23;
          }
        }
        else
        {
          v12 = (_DWORD *)*a3;
        }
        v13 = &v9[2 * v10];
        if (v12 != v13)
        {
          v14 = 0;
          v15 = 1;
          while (1)
          {
            v16 = *(_QWORD *)v12;
            v12 += 2;
            *(_QWORD *)(v7 + 8 * v14) = v16;
            if (v12 == v13)
              break;
            v14 = v15;
            while ((*v12 + 1) <= 1)
            {
              v12 += 2;
              if (v12 == v13)
                goto LABEL_23;
            }
            ++v15;
            if (v14 == v4)
              goto LABEL_37;
          }
        }
      }
LABEL_23:
      *(_DWORD *)(a1 + 16) = v4;
      v17 = *(_DWORD *)(a2 + 44);
      if (!v17)
      {
LABEL_30:
        __break(0xC471u);
        JUMPOUT(0x1988D3F5CLL);
      }
      v18 = 0;
      v19 = a1 + 8;
      v20 = *(unint64_t **)(a2 + 32);
      v21 = &v20[3 * v17];
      while (1)
      {
        v22 = v20[1];
        if (*v20 <= v19 && *v20 + v22 > v19)
          break;
        v18 += v22;
        v20 += 3;
        if (v20 == v21)
          goto LABEL_30;
      }
      v24 = *v20 - (v18 + v19);
      v25 = JSC::Encoder::malloc((JSC::Encoder *)a2, 8 * (int)v4);
      *(_QWORD *)(a1 + 8) = &v26[v24];
      if (*(_DWORD *)(a1 + 16))
      {
        v33 = 0;
        v34 = (_DWORD *)(v25 + 4);
        v35 = (int *)(v8 + 4);
        do
        {
          if (v4 == v33)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D3FD4);
          }
          *(v34 - 1) = *(v35 - 1);
          v36 = *v35;
          v35 += 2;
          *v34 = v36;
          v34 += 2;
          ++v33;
        }
        while (v33 < *(unsigned int *)(a1 + 16));
      }
      WTF::fastFree(v8, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void JSC::CachedVector<JSC::CachedIdentifier,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::Identifier>>(unint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;

  if (*a3)
  {
    v4 = **a3;
    *(_DWORD *)(a1 + 8) = v4;
    if (v4)
    {
      v6 = *(_DWORD *)(a2 + 44);
      if (!v6)
        goto LABEL_17;
      v8 = 0;
      v9 = *(unint64_t **)(a2 + 32);
      v10 = &v9[3 * v6];
      while (1)
      {
        v11 = v9[1];
        if (*v9 <= a1 && *v9 + v11 > a1)
          break;
        v8 += v11;
        v9 += 3;
        if (v9 == v10)
          goto LABEL_17;
      }
      v13 = *v9 - (v8 + a1);
      v14 = (_OWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 24 * v4);
      *(_QWORD *)a1 = v13 + v15;
      memset_pattern16(v14, &unk_1991575D0, 24 * ((24 * (unint64_t)v4 - 24) / 0x18) + 24);
      if (*(_DWORD *)(a1 + 8))
      {
        v16 = 0;
        v17 = v14 + 1;
        while (v16 < **a3)
        {
          JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v17, (JSC::Encoder *)a2, *(WTF::StringImpl **)&(*a3)[2 * v16++ + 2]);
          v17 = (_OWORD *)((char *)v17 + 24);
          if (v16 >= *(unsigned int *)(a1 + 8))
            return;
        }
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D4074);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  JSC::TDZEnvironmentLink *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64x2_t *v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned int v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  _OWORD *v162;
  int64x2_t v163;
  _OWORD *v164;
  uint64_t v165;
  __int128 v167;
  unint64_t v168;
  uint64_t v169;

  v3 = a1;
  if (!*a3)
  {
    *(_DWORD *)(a1 + 8) = 0;
    return;
  }
  v4 = *(unsigned int *)*a3;
  *(_DWORD *)(a1 + 8) = v4;
  if ((_DWORD)v4)
  {
    v5 = *(_DWORD *)(a2 + 44);
    if (!v5)
    {
LABEL_12:
      __break(0xC471u);
      goto LABEL_145;
    }
    v6 = a3;
    v7 = 0;
    v8 = *(unint64_t **)(a2 + 32);
    v9 = &v8[3 * v5];
    while (1)
    {
      v10 = v8[1];
      if (*v8 <= a1 && *v8 + v10 > a1)
        break;
      v7 += v10;
      v8 += 3;
      if (v8 == v9)
        goto LABEL_12;
    }
    v12 = *v8 - (v7 + a1);
    v13 = (char *)JSC::Encoder::malloc((JSC::Encoder *)a2, 8 * (int)v4);
    *(_QWORD *)v3 = v12 + v14;
    memset_pattern16(v13, &unk_1991575D0, 8 * v4);
    v15 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = (uint64_t *)(a2 + 48);
      v160 = v3;
      v158 = v13;
      v159 = v6;
      v163 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      do
      {
        if (v16 >= *(unsigned int *)*v6)
          goto LABEL_135;
        v18 = *(_QWORD *)(*v6 + 8 * v16 + 8);
        if (v18)
        {
          v19 = &v13[8 * v16];
          v20 = *v17;
          if (*v17)
          {
            v21 = *(_DWORD *)(v20 - 8);
            v22 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
            v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
            v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
            v25 = v21 & ((v24 >> 31) ^ v24);
            v26 = *(_QWORD *)(v20 + 16 * v25);
            if (v26 != v18)
            {
              v27 = 1;
              while (v26)
              {
                v25 = ((_DWORD)v25 + v27) & v21;
                v26 = *(_QWORD *)(v20 + 16 * v25);
                ++v27;
                if (v26 == v18)
                  goto LABEL_25;
              }
              v25 = *(unsigned int *)(v20 - 4);
            }
LABEL_25:
            v28 = *(_QWORD **)(a2 + 32);
            v29 = *(unsigned int *)(a2 + 44);
            if (v25 != *(_DWORD *)(v20 - 4))
            {
              if (!*(_DWORD *)(a2 + 44))
              {
LABEL_140:
                __break(0xC471u);
                JUMPOUT(0x1988D4C10);
              }
              v64 = 0;
              v65 = *(_QWORD *)(v20 + 16 * v25 + 8);
              v66 = &v28[3 * v29];
              while (1)
              {
                v67 = v28[1];
                if (*v28 <= (unint64_t)v19 && *v28 + v67 > (unint64_t)v19)
                  break;
                v64 += v67;
                v28 += 3;
                if (v28 == v66)
                  goto LABEL_140;
              }
              *(_QWORD *)v19 = v65 - (_QWORD)&v19[v64] + *v28;
              goto LABEL_130;
            }
          }
          else
          {
            v28 = *(_QWORD **)(a2 + 32);
            v29 = *(unsigned int *)(a2 + 44);
          }
          if (!v29)
          {
LABEL_137:
            __break(0xC471u);
            JUMPOUT(0x1988D4BB0);
          }
          v30 = 0;
          v31 = &v28[3 * v29];
          while (1)
          {
            v32 = v28[1];
            if (*v28 <= (unint64_t)v19 && *v28 + v32 > (unint64_t)v19)
              break;
            v30 += v32;
            v28 += 3;
            if (v28 == v31)
              goto LABEL_137;
          }
          v34 = *v28 - (_QWORD)&v19[v30];
          v35 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x78u);
          v36 = v35;
          *(_QWORD *)v19 = v34 + v37;
          *(int64x2_t *)(v35 + 48) = v163;
          v38 = (_QWORD *)(v35 + 48);
          *(int64x2_t *)(v35 + 64) = v163;
          *(int64x2_t *)(v35 + 80) = v163;
          *(int64x2_t *)(v35 + 96) = v163;
          v164 = (_OWORD *)(v35 + 96);
          *(_QWORD *)(v35 + 112) = 0x7FFFFFFFFFFFFFFFLL;
          v39 = (_OWORD *)(v35 + 112);
          *(_WORD *)v35 = *(_WORD *)(v18 + 48) & 0x3FFF;
          *(_BYTE *)(v35 + 2) = (*(_BYTE *)(v18 + 51) >> 2) & 3;
          *(_BYTE *)(v35 + 3) = *(uint64_t *)(v18 + 8) < 0;
          *(_DWORD *)(v35 + 4) = *(_DWORD *)(v35 + 4) & 0x80000000 | *(_DWORD *)(v18 + 8) & 0x7FFFFFFF;
          v40 = *(_QWORD *)(v35 + 16);
          v41 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFF80000000 | *(_DWORD *)(v18 + 12) & 0x7FFFFFFF;
          *(_QWORD *)(v35 + 8) = v41;
          v42 = v41 & 0x80000000FFFFFFFFLL | ((*(_QWORD *)(v18 + 16) & 0x7FFFFFFFLL) << 32);
          *(_QWORD *)(v35 + 8) = v42;
          v43 = v40 & 0xFFFFFFFF80000000 | *(_DWORD *)(v18 + 20) & 0x7FFFFFFF;
          *(_QWORD *)(v35 + 8) = v42;
          *(_QWORD *)(v35 + 16) = v43;
          v44 = v43 & 0x80000000FFFFFFFFLL | ((HIDWORD(*(_QWORD *)(v18 + 20)) & 0x7FFFFFFFLL) << 32);
          *(_QWORD *)(v35 + 8) = v42;
          *(_QWORD *)(v35 + 16) = v44;
          v45 = *(_DWORD *)(v35 + 32);
          v46 = *(_QWORD *)(v35 + 24) & 0xFFFFFFFF80000000 | *(_DWORD *)(v18 + 28) & 0x7FFFFFFF;
          *(_QWORD *)(v35 + 24) = v46;
          v47 = v46 & 0x80000000FFFFFFFFLL | ((*(_QWORD *)(v18 + 32) & 0x7FFFFFFFLL) << 32);
          *(_QWORD *)(v35 + 24) = v47;
          v48 = v45 & 0x80000000 | *(_DWORD *)(v18 + 36) & 0x7FFFFFFF;
          *(_QWORD *)(v35 + 24) = v47;
          *(_DWORD *)(v35 + 32) = v48;
          *(_DWORD *)(v35 + 36) = *(_DWORD *)(v18 + 40) & 0x7FFFFFFF;
          v49 = *(_DWORD *)(v18 + 44);
          *(_DWORD *)(v35 + 40) = *(_DWORD *)(v35 + 40) & 0x80000000 | v49 & 0x7FFFFFFF;
          *(_BYTE *)(v35 + 44) = *(_BYTE *)(v18 + 50);
          v50 = v42 & 0xFFFFFFFF7FFFFFFFLL | (((*(_QWORD *)(v18 + 16) >> 31) & 1) << 31);
          *(_QWORD *)(v35 + 8) = v50;
          *(_QWORD *)(v35 + 16) = v44;
          v51 = *(_QWORD *)(v18 + 16) & 0x8000000000000000 | v50 & 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)(v35 + 8) = v51;
          *(_QWORD *)(v35 + 16) = v44;
          v52 = v44 & 0xFFFFFFFF7FFFFFFFLL | (((*(_QWORD *)(v18 + 24) >> 31) & 1) << 31);
          *(_QWORD *)(v35 + 8) = v51;
          *(_QWORD *)(v35 + 16) = v52;
          LODWORD(v52) = *(_WORD *)(v35 + 45) & 0xFFFC | ((unint64_t)*(unsigned __int16 *)(v18 + 48) >> 14);
          *(_WORD *)(v35 + 45) = *(_WORD *)(v35 + 45) & 0xFFFC | (*(_WORD *)(v18 + 48) >> 14);
          LODWORD(v52) = v52 & 0xFFFFFFF3 | (4 * ((*(unsigned __int8 *)(v18 + 51) >> 4) & 3));
          *(_WORD *)(v35 + 45) = v52;
          v53 = v47 & 0xFFFFFFFF7FFFFFFFLL | ((((unint64_t)*(unsigned int *)(v18 + 28) >> 31) & 1) << 31);
          *(_DWORD *)(v35 + 32) = v48;
          *(_QWORD *)(v35 + 24) = v53;
          v54 = *(_OWORD *)(v18 + 24);
          *(_DWORD *)(v35 + 32) = v48;
          *(_QWORD *)(v35 + 24) = (v54 >> 32) & 0x8000000000000000 | v53 & 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(v52) = v52 & 0xFFFFFFCF | (16 * ((*(unsigned __int8 *)(v18 + 51) >> 6) & 3));
          *(_WORD *)(v35 + 45) = v52;
          LODWORD(v52) = v52 & 0xFFFFFFBF | ((HIBYTE(*(unsigned __int16 *)(v18 + 51)) & 1) << 6);
          *(_WORD *)(v35 + 45) = v52;
          LODWORD(v52) = v52 & 0xFFFFFF7F | (((*(unsigned __int16 *)(v18 + 43) >> 7) & 1) << 7);
          *(_WORD *)(v35 + 45) = v52;
          *(_WORD *)(v35 + 45) = v52 & 0xFCFF | ((*(_WORD *)(v18 + 51) & 3) << 8);
          *(_DWORD *)(v35 + 40) = *(_DWORD *)(v18 + 44) & 0x80000000 | v49 & 0x7FFFFFFF;
          v55 = *(_QWORD *)(v18 + 88);
          if (v55)
          {
            v56 = *v17;
            if (!*v17)
              goto LABEL_52;
            v57 = *(_DWORD *)(v56 - 8);
            v58 = (~(v55 << 32) + v55) ^ ((unint64_t)(~(v55 << 32) + v55) >> 22);
            v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
            v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
            v61 = v57 & ((v60 >> 31) ^ v60);
            v62 = *(_QWORD *)(v56 + 16 * v61);
            if (v62 != v55)
            {
              v63 = 1;
              while (v62)
              {
                v61 = ((_DWORD)v61 + v63) & v57;
                v62 = *(_QWORD *)(v56 + 16 * v61);
                ++v63;
                if (v62 == v55)
                  goto LABEL_51;
              }
              v61 = *(unsigned int *)(v56 - 4);
            }
LABEL_51:
            if (v61 != *(_DWORD *)(v56 - 4))
            {
              v95 = *(_DWORD *)(a2 + 44);
              if (!v95)
              {
LABEL_143:
                __break(0xC471u);
                JUMPOUT(0x1988D4C70);
              }
              v96 = 0;
              v97 = *(_QWORD *)(v56 + 16 * v61 + 8);
              v98 = *(_QWORD **)(a2 + 32);
              v99 = &v98[3 * v95];
              while (1)
              {
                v100 = v98[1];
                if (*v98 <= (unint64_t)v38 && *v98 + v100 > (unint64_t)v38)
                  break;
                v96 += v100;
                v98 += 3;
                if (v98 == v99)
                  goto LABEL_143;
              }
              *v38 = v97 - ((_QWORD)v38 + v96) + *v98;
            }
            else
            {
LABEL_52:
              v69 = *(_DWORD *)(a2 + 44);
              if (!v69)
              {
LABEL_141:
                __break(0xC471u);
                JUMPOUT(0x1988D4C30);
              }
              v70 = 0;
              v71 = *(_QWORD **)(a2 + 32);
              v72 = &v71[3 * v69];
              while (1)
              {
                v73 = v71[1];
                if (*v71 <= (unint64_t)v38 && *v71 + v73 > (unint64_t)v38)
                  break;
                v70 += v73;
                v71 += 3;
                if (v71 == v72)
                  goto LABEL_141;
              }
              v162 = (_OWORD *)(v35 + 112);
              v161 = v16;
              v75 = *v71 - ((_QWORD)v38 + v70);
              v76 = *(_QWORD *)(v18 + 88);
              v77 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x58u);
              *v38 = v75 + v78;
              *(int64x2_t *)(v77 + 24) = v163;
              *(_QWORD *)(v77 + 48) = 0x7FFFFFFFFFFFFFFFLL;
              v79 = (_QWORD *)(v77 + 48);
              *(int64x2_t *)(v77 + 64) = v163;
              *(_BYTE *)v77 = *(_QWORD *)v76 != 0;
              *(_QWORD *)(v77 + 4) = *(_QWORD *)(v76 + 8);
              *(_DWORD *)(v77 + 12) = *(_DWORD *)(v76 + 16);
              *(_DWORD *)(v77 + 16) = *(_DWORD *)(v76 + 20);
              v165 = v76;
              v80 = *(JSC::TDZEnvironmentLink **)(v76 + 40);
              if (v80)
              {
                ++*(_DWORD *)v80;
                JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::encode((_OWORD *)(v77 + 24), a2, (uint64_t)v80);
                if (*(_DWORD *)v80 == 1)
                {
                  JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v80);
                  WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
                }
                else
                {
                  --*(_DWORD *)v80;
                }
              }
              JSC::CachedVector<JSC::CachedIdentifier,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::FixedVector<JSC::Identifier>>(v77 + 32, a2, (unsigned int **)(v76 + 48));
              v86 = v76;
              v87 = *(unsigned int **)(v76 + 56);
              if (v87)
              {
                v88 = *v87;
                *(_DWORD *)(v77 + 56) = *v87;
                if (v88)
                {
                  v89 = *(_DWORD *)(a2 + 44);
                  if (!v89)
                  {
LABEL_144:
                    __break(0xC471u);
LABEL_145:
                    JUMPOUT(0x1988D4210);
                  }
                  v90 = 0;
                  v91 = *(_QWORD **)(a2 + 32);
                  v92 = &v91[3 * v89];
                  while (1)
                  {
                    v93 = v91[1];
                    if (*v91 <= (unint64_t)v79 && *v91 + v93 > (unint64_t)v79)
                      break;
                    v90 += v93;
                    v91 += 3;
                    if (v91 == v92)
                      goto LABEL_144;
                  }
                  v102 = *v91 - ((_QWORD)v79 + v90);
                  v103 = JSC::Encoder::malloc((JSC::Encoder *)a2, 56 * v88);
                  *v79 = v102 + v104;
                  v105 = (int64x2_t *)v103;
                  do
                  {
                    *v105 = v163;
                    v105[1].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
                    v105[2].i64[1] = 0x7FFFFFFFFFFFFFFFLL;
                    v105 = (int64x2_t *)((char *)v105 + 56);
                  }
                  while (v105 != (int64x2_t *)(v103 + 56 * v88));
                  v86 = v165;
                  if (*(_DWORD *)(v77 + 56))
                  {
                    v106 = 0;
                    while (1)
                    {
                      v107 = *(unsigned int **)(v86 + 56);
                      if (v106 >= *v107)
                        break;
                      v108 = v107 + 2;
                      v109 = (uint64_t)&v107[10 * v106 + 2];
                      v110 = v103;
                      v111 = v103 + 56 * v106;
                      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v111 + 16), (JSC::Encoder *)a2, *(WTF::StringImpl **)v109);
                      v113 = *(unsigned __int8 *)(v109 + 32);
                      v112 = (_BYTE *)(v109 + 32);
                      *(_QWORD *)(v111 + 24) = *((_QWORD *)v112 - 3);
                      *(_DWORD *)(v111 + 32) = *((_DWORD *)v112 - 4);
                      if (v113)
                      {
                        v114 = *(_DWORD *)(a2 + 44);
                        if (!v114)
                        {
LABEL_136:
                          __break(0xC471u);
                          JUMPOUT(0x1988D4B90);
                        }
                        v115 = 0;
                        v116 = (_QWORD *)(v111 + 40);
                        v117 = *(_QWORD **)(a2 + 32);
                        v118 = &v117[3 * v114];
                        while (1)
                        {
                          v119 = v117[1];
                          if (*v117 <= (unint64_t)v116 && *v117 + v119 > (unint64_t)v116)
                            break;
                          v115 += v119;
                          v117 += 3;
                          if (v117 == v118)
                            goto LABEL_136;
                        }
                        v121 = *v117 - ((_QWORD)v116 + v115);
                        v122 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0xCu);
                        *v116 = v121 + v123;
                        if (!*v112)
                          goto LABEL_134;
                        *(_QWORD *)v122 = *(_QWORD *)(v112 - 12);
                        *(_DWORD *)(v122 + 8) = v108[10 * v106 + 7];
                      }
                      v103 = v110;
                      *(_BYTE *)(v110 + 56 * v106 + 48) = v108[10 * v106 + 9];
                      ++v106;
                      v86 = v165;
                      if (v106 >= *(unsigned int *)(v77 + 56))
                        goto LABEL_101;
                    }
                    __break(0xC471u);
LABEL_134:
                    __break(1u);
LABEL_135:
                    __break(0xC471u);
                    JUMPOUT(0x1988D4B70);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v77 + 56) = 0;
              }
LABEL_101:
              JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::encode(v77 + 64, a2, (uint64_t **)(v86 + 64), v81, v82, v83, v84, v85);
              v128 = *(_DWORD *)(a2 + 44);
              v39 = v162;
              if (!v128)
              {
LABEL_142:
                __break(0xC471u);
                JUMPOUT(0x1988D4C50);
              }
              v129 = 0;
              v130 = *(unint64_t **)(a2 + 32);
              v131 = &v130[3 * v128];
              while (1)
              {
                v132 = v130[1];
                if (*v130 <= v77 && *v130 + v132 > v77)
                  break;
                v129 += v132;
                v130 += 3;
                if (v130 == v131)
                  goto LABEL_142;
              }
              v168 = v129 + v77 - *v130;
              v169 = v165;
              v17 = (uint64_t *)(a2 + 48);
              WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v167, (uint64_t *)(a2 + 48), &v169, (uint64_t *)&v168, v124, v125, v126, v127);
              v6 = v159;
              v3 = v160;
              v13 = v158;
              v16 = v161;
            }
          }
          JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v36 + 72), (JSC::Encoder *)a2, *(WTF::StringImpl **)(v18 + 72));
          JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v164, (JSC::Encoder *)a2, *(WTF::StringImpl **)(v18 + 80));
          JSC::CachedPtr<JSC::CachedFunctionCodeBlock,JSC::UnlinkedFunctionCodeBlock>::encode((_OWORD *)(v36 + 104), (JSC::Encoder *)a2, *(_QWORD *)(v18 + 56));
          JSC::CachedPtr<JSC::CachedFunctionCodeBlock,JSC::UnlinkedFunctionCodeBlock>::encode(v39, (JSC::Encoder *)a2, *(_QWORD *)(v18 + 64));
          if (!*(_QWORD *)(v18 + 56) || !*(_QWORD *)(v18 + 64))
          {
            v138 = *(_DWORD *)(a2 + 44);
            if (!v138)
            {
LABEL_139:
              __break(0xC471u);
              JUMPOUT(0x1988D4BF0);
            }
            v139 = 0;
            v140 = *(unint64_t **)(a2 + 32);
            v141 = &v140[3 * v138];
            while (1)
            {
              v142 = v140[1];
              if (*v140 <= v36 && *v140 + v142 > v36)
                break;
              v139 += v142;
              v140 += 3;
              if (v140 == v141)
                goto LABEL_139;
            }
            v168 = v139 + v36 - *v140;
            v169 = v18;
            WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::add<long &>(&v167, (uint64_t *)(a2 + 56), &v169, (uint64_t *)&v168);
          }
          v144 = *(_DWORD *)(a2 + 44);
          if (!v144)
          {
LABEL_138:
            __break(0xC471u);
            JUMPOUT(0x1988D4BD0);
          }
          v145 = 0;
          v146 = *(unint64_t **)(a2 + 32);
          v147 = &v146[3 * v144];
          while (1)
          {
            v148 = v146[1];
            if (*v146 <= v36 && *v146 + v148 > v36)
              break;
            v145 += v148;
            v146 += 3;
            if (v146 == v147)
              goto LABEL_138;
          }
          v168 = v145 + v36 - *v146;
          v169 = v18;
          WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v167, v17, &v169, (uint64_t *)&v168, v134, v135, v136, v137);
          v15 = *(unsigned int *)(v3 + 8);
        }
LABEL_130:
        ++v16;
      }
      while (v16 < v15);
    }
  }
}

uint64_t JSC::Encoder::malloc(JSC::Encoder *this, unsigned int a2)
{
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  if (a2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 3);
    v5 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
    v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    v7 = v6 | HIWORD(v6);
    if ((v7 + 1) < 8)
      v8 = (v7 + 1);
    else
      v8 = 8;
    v9 = v8 - 1;
    v10 = -v8;
    v11 = (v4[1] + v8 - 1) & -v8;
    v12 = v11 + ((v9 + a2) & v10);
    if (v12 <= v4[2])
    {
      v4[1] = v12;
      return *v4 + v11;
    }
    else
    {
      JSC::Encoder::allocateNewPage(this, a2);
      return JSC::Encoder::malloc(this, a2);
    }
  }
  else
  {
    result = 107;
    __break(0xC471u);
  }
  return result;
}

_OWORD *JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(_OWORD *result, JSC::Encoder *this, WTF::StringImpl *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;
  WTF::StringImpl *v48;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)((char *)this + 48);
    v6 = *((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(WTF::StringImpl **)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(WTF::StringImpl **)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v39 = *((_DWORD *)this + 11);
      if (!v39)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1988D4F84);
      }
      v40 = 0;
      v41 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v42 = (_QWORD *)*((_QWORD *)this + 4);
      v43 = &v42[3 * v39];
      while (1)
      {
        v44 = v42[1];
        if (*v42 <= (unint64_t)result && *v42 + v44 > (unint64_t)result)
          break;
        v40 += v44;
        v42 += 3;
        if (v42 == v43)
          goto LABEL_34;
      }
      *(_QWORD *)result = v41 - ((_QWORD)result + v40) + *v42;
    }
    else
    {
LABEL_10:
      v15 = *((_DWORD *)this + 11);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D4E6CLL);
      }
      v16 = 0;
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = (_QWORD *)JSC::Encoder::malloc(this, 0x10u);
      *v5 = v21 + v23;
      *v22 = 0x7FFFFFFFFFFFFFFFLL;
      JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::encode((unint64_t)v22, this, a3, v24, v25, v26, v27, v28);
      v33 = *((_DWORD *)this + 11);
      if (!v33)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1988D4EFCLL);
      }
      v34 = 0;
      v35 = (_QWORD *)*((_QWORD *)this + 4);
      v36 = &v35[3 * v33];
      while (1)
      {
        v37 = v35[1];
        if (*v35 <= (unint64_t)v22 && *v35 + v37 > (unint64_t)v22)
          break;
        v34 += v37;
        v35 += 3;
        if (v35 == v36)
          goto LABEL_25;
      }
      v47 = (uint64_t)v22 + v34 - *v35;
      v48 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v46, v7, (uint64_t *)&v48, &v47, v29, v30, v31, v32);
    }
  }
  return result;
}

void JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::encode(unint64_t a1, JSC::Encoder *this, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  int v11;
  char v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  size_t v21;
  const void *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;

  v8 = a3;
  v11 = *(_BYTE *)(a1 + 8) & 0xF7 | (8 * ((*((unsigned __int8 *)a3 + 16) >> 4) & 1));
  *(_BYTE *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 8) = (*((_BYTE *)a3 + 16) >> 4) & 2 | v11 & 0xC9;
  *(_DWORD *)a3 += 2;
  v12 = *(_BYTE *)(a1 + 8);
  if ((v12 & 2) != 0)
  {
    v13 = (8 * *((_BYTE *)a3 + 36)) & 0x10 | v12 & 0xEF;
    *(_BYTE *)(a1 + 8) = v13;
    v14 = (8 * *((unsigned __int8 *)a3 + 36)) & 0x20;
    v12 = v13 & 0xDF | v14;
    *(_BYTE *)(a1 + 8) = v12;
    if ((*((_BYTE *)a3 + 36) & 1) == 0 && !v14)
    {
      *(_BYTE *)(a1 + 8) = v12 | 4;
      WTF::StringImpl::substring(a3, 7u, 0x7FFFFFFFu, (uint64_t *)&v55);
      v15 = v55;
      v55 = 0;
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::~StringImpl(v8, this, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        v46 = v55;
        v55 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            WTF::StringImpl::~StringImpl(v46, this, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          else
          {
            *(_DWORD *)v46 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
      v12 = *(_BYTE *)(a1 + 8);
      v8 = v15;
    }
  }
  v16 = *((unsigned __int8 *)v8 + 16);
  *(_BYTE *)(a1 + 8) = v12 & 0xFE | ((v16 & 4) != 0);
  v17 = *((_DWORD *)v8 + 1);
  *(_DWORD *)(a1 + 12) = v17;
  if (!v17)
    goto LABEL_17;
  v18 = ((v16 >> 2) & 1) == 0;
  v19 = *((_DWORD *)this + 11);
  if (!v19)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1988D5114);
  }
  v20 = 0;
  v21 = (v17 << v18);
  v22 = (const void *)*((_QWORD *)v8 + 1);
  v23 = (unint64_t *)*((_QWORD *)this + 4);
  v24 = &v23[3 * v19];
  while (1)
  {
    v25 = v23[1];
    if (*v23 <= a1 && *v23 + v25 > a1)
      break;
    v20 += v25;
    v23 += 3;
    if (v23 == v24)
      goto LABEL_15;
  }
  v27 = *v23 - (v20 + a1);
  v28 = (void *)JSC::Encoder::malloc(this, v21);
  *(_QWORD *)a1 = v27 + v29;
  memcpy(v28, v22, v21);
  if (v8)
  {
LABEL_17:
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, this, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

_OWORD *JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::encode(_OWORD *result, JSC::Encoder *this, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v43;
  int v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  size_t v48;
  const void *v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88[3];
  unint64_t v89;
  uint64_t v90;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)((char *)this + 48);
    v6 = *((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v36 = *((_DWORD *)this + 11);
      if (!v36)
      {
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1988D541CLL);
      }
      v37 = 0;
      v38 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v39 = (_QWORD *)*((_QWORD *)this + 4);
      v40 = &v39[3 * v36];
      while (1)
      {
        v41 = v39[1];
        if (*v39 <= (unint64_t)result && *v39 + v41 > (unint64_t)result)
          break;
        v37 += v41;
        v39 += 3;
        if (v39 == v40)
          goto LABEL_31;
      }
      *(_QWORD *)result = v38 - ((_QWORD)result + v37) + *v39;
    }
    else
    {
LABEL_10:
      v15 = *((_DWORD *)this + 11);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D52CCLL);
      }
      v16 = 0;
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = JSC::Encoder::malloc(this, 0x10u);
      v30 = v22;
      *v5 = (char *)v23 + v21;
      *(_QWORD *)v22 = 0x7FFFFFFFFFFFFFFFLL;
      v31 = *(_BYTE *)(v22 + 8) & 0xF7 | (8 * ((*(unsigned __int8 *)(a3 + 16) >> 4) & 1));
      *(_BYTE *)(v22 + 8) = v31;
      *(_BYTE *)(v22 + 8) = (*(_BYTE *)(a3 + 16) >> 4) & 2 | v31 & 0xC9;
      *(_DWORD *)a3 += 2;
      v32 = *(_BYTE *)(v22 + 8);
      v33 = (WTF::StringImpl *)a3;
      if ((v32 & 2) != 0)
      {
        v34 = (8 * *(_BYTE *)(a3 + 36)) & 0x10 | v32 & 0xEF;
        *(_BYTE *)(v22 + 8) = v34;
        v35 = (8 * *(unsigned __int8 *)(a3 + 36)) & 0x20;
        v32 = v34 & 0xDF | v35;
        *(_BYTE *)(v22 + 8) = v32;
        if ((*(_BYTE *)(a3 + 36) & 1) != 0)
        {
          v33 = (WTF::StringImpl *)a3;
        }
        else
        {
          v33 = (WTF::StringImpl *)a3;
          if (!v35)
          {
            *(_BYTE *)(v22 + 8) = v32 | 4;
            WTF::StringImpl::substring((_QWORD *)a3, 7u, 0x7FFFFFFFu, (uint64_t *)v88);
            v33 = v88[0];
            v88[0] = 0;
            if (*(_DWORD *)a3 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)a3, v23, v24, v25, v26, v27, v28, v29);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
              v79 = v88[0];
              v88[0] = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                {
                  WTF::StringImpl::~StringImpl(v79, v23, v24, v25, v26, v27, v28, v29);
                  WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                }
                else
                {
                  *(_DWORD *)v79 -= 2;
                }
              }
            }
            else
            {
              *(_DWORD *)a3 -= 2;
            }
            v32 = *(_BYTE *)(v30 + 8);
          }
        }
      }
      v43 = *((unsigned __int8 *)v33 + 16);
      *(_BYTE *)(v30 + 8) = v32 & 0xFE | ((v43 & 4) != 0);
      v44 = *((_DWORD *)v33 + 1);
      *(_DWORD *)(v30 + 12) = v44;
      if (!v44)
        goto LABEL_44;
      v45 = ((v43 >> 2) & 1) == 0;
      v46 = *((_DWORD *)this + 11);
      if (!v46)
      {
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x1988D54BCLL);
      }
      v47 = 0;
      v48 = (v44 << v45);
      v49 = (const void *)*((_QWORD *)v33 + 1);
      v50 = (unint64_t *)*((_QWORD *)this + 4);
      v51 = &v50[3 * v46];
      while (1)
      {
        v52 = v50[1];
        if (*v50 <= v30 && *v50 + v52 > v30)
          break;
        v47 += v52;
        v50 += 3;
        if (v50 == v51)
          goto LABEL_42;
      }
      v54 = *v50 - (v47 + v30);
      v55 = (void *)JSC::Encoder::malloc(this, v48);
      *(_QWORD *)v30 = v54 + v56;
      memcpy(v55, v49, v48);
      if (v33)
      {
LABEL_44:
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v23, v24, v25, v26, v27, v28, v29);
          WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      v57 = *((_DWORD *)this + 11);
      if (!v57)
      {
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x1988D5554);
      }
      v58 = 0;
      v59 = (unint64_t *)*((_QWORD *)this + 4);
      v60 = &v59[3 * v57];
      while (1)
      {
        v61 = v59[1];
        if (*v59 <= v30 && *v59 + v61 > v30)
          break;
        v58 += v61;
        v59 += 3;
        if (v59 == v60)
          goto LABEL_53;
      }
      v89 = v58 + v30 - *v59;
      v90 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(v88, v7, &v90, (uint64_t *)&v89, v26, v27, v28, v29);
    }
  }
  return result;
}

void JSC::CachedJSValue::encode(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  char **v12;
  int v13;
  int **v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char v123;
  uint64_t *v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  _QWORD *v153;
  uint64_t v154;
  size_t v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unsigned int v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t *v199;
  unint64_t v200;
  unsigned int v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v224;
  _DWORD *v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t *v231;
  unint64_t v232;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  _QWORD *v251;
  unsigned int v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v257;
  int64x2_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _OWORD *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  char *v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  JSC::SymbolTableEntry *v313;
  _DWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unsigned int *v330;
  unsigned int v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t **v336;
  uint64_t *i;
  uint64_t *v338;
  uint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  JSC::SymbolTableEntry *v343;
  JSC::SymbolTableEntry *v344;
  JSC::SymbolTableEntry *v345;
  unint64_t v346;
  unint64_t v347;
  __int128 v348;
  unint64_t v349;
  uint64_t v350;

  v9 = a3;
  if (!a3 || (a3 & 0xFFFE000000000002) != 0)
  {
    *(_BYTE *)(a1 + 8) = 0;
    v21 = *(_DWORD *)(a2 + 44);
    if (!v21)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x1988D571CLL);
    }
    v22 = 0;
    v23 = *(unint64_t **)(a2 + 32);
    v24 = &v23[3 * v21];
    while (1)
    {
      v25 = v23[1];
      if (*v23 <= a1 && *v23 + v25 > a1)
        break;
      v22 += v25;
      v23 += 3;
      if (v23 == v24)
        goto LABEL_23;
    }
    v27 = *v23 - (v22 + a1);
    v28 = (unint64_t *)JSC::Encoder::malloc((JSC::Encoder *)a2, 8u);
    *(_QWORD *)a1 = v27 + v29;
    *v28 = v9;
  }
  else
  {
    v12 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C));
    if (v12 == &JSC::SymbolTable::s_info)
    {
      *(_BYTE *)(a1 + 8) = 1;
      v30 = *(_DWORD *)(a2 + 44);
      if (!v30)
      {
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x1988D57C0);
      }
      v31 = 0;
      v32 = *(unint64_t **)(a2 + 32);
      v33 = &v32[3 * v30];
      while (1)
      {
        v34 = v32[1];
        if (*v32 <= a1 && *v32 + v34 > a1)
          break;
        v31 += v34;
        v32 += 3;
        if (v32 == v33)
          goto LABEL_33;
      }
      v36 = *v32 - (v31 + a1);
      v37 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x30u);
      v38 = v37;
      *(_QWORD *)a1 = v36 + v39;
      v40 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      *(int64x2_t *)v37 = v40;
      *(_DWORD *)(v37 + 24) = -1;
      *(int64x2_t *)(v37 + 32) = v40;
      v41 = (_QWORD *)(v37 + 32);
      v42 = *(_QWORD *)(v9 + 8);
      v346 = v9;
      if (v42)
      {
        v43 = *(unsigned int *)(v42 - 12);
        if ((_DWORD)v43)
        {
          if (v43 >> 28)
            goto LABEL_316;
          v44 = (_QWORD *)(v37 + 8);
          v52 = WTF::fastMalloc((WTF *)(16 * v43));
          v53 = (_QWORD *)v52;
          do
          {
            *v53 = 0;
            v53[1] = 1;
            v53 += 2;
          }
          while (v53 != (_QWORD *)(v52 + 16 * v43));
          v54 = *(_QWORD *)(v9 + 8);
          if (v54 && *(_DWORD *)(v54 - 12))
          {
            v55 = *(unsigned int *)(v54 - 4);
            if ((_DWORD)v55)
            {
              v56 = 16 * v55;
              v57 = *(_QWORD **)(v9 + 8);
              while ((unint64_t)(*v57 + 1) <= 1)
              {
                v57 += 2;
                v56 -= 16;
                if (!v56)
                  goto LABEL_45;
              }
            }
            else
            {
              v57 = *(_QWORD **)(v9 + 8);
            }
            v311 = (_QWORD *)(v54 + 16 * v55);
            if (v311 != v57)
            {
              v312 = 0;
              v313 = (JSC::SymbolTableEntry *)((char *)&v348 + 8);
              v314 = (_DWORD *)*v57;
              while (1)
              {
                if (v314)
                  *v314 += 2;
                *(_QWORD *)&v348 = v314;
                *((_QWORD *)&v348 + 1) = 1;
                v315 = (_QWORD *)v57[1];
                if ((v315 & 1) == 0)
                {
                  v344 = v313;
                  v340 = v41;
                  v328 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  v329 = (_QWORD *)v57[1];
                  v342 = v328;
                  *v328 = *v329;
                  v330 = (unsigned int *)v329[1];
                  if (v330)
                  {
                    do
                      v331 = __ldaxr(v330);
                    while (__stlxr(v331 + 1, v330));
                    v332 = *((_QWORD *)&v348 + 1);
                    v328[1] = v330;
                    if ((v332 & 1) == 0 && v332)
                    {
                      v333 = *(_QWORD *)(v332 + 8);
                      *(_QWORD *)(v332 + 8) = 0;
                      if (v333)
                      {
                        do
                        {
                          v334 = __ldaxr((unsigned int *)v333);
                          v335 = v334 - 1;
                        }
                        while (__stlxr(v335, (unsigned int *)v333));
                        if (!v335)
                        {
                          atomic_store(1u, (unsigned int *)v333);
                          v336 = (uint64_t **)(v333 + 8);
                          for (i = *(uint64_t **)(v333 + 8); i != (uint64_t *)v336; i = *v336)
                          {
                            v339 = *i;
                            v338 = (uint64_t *)i[1];
                            *v338 = *i;
                            *(_QWORD *)(v339 + 8) = v338;
                            *i = 0;
                            i[1] = 0;
                          }
                          WTF::fastFree(v333, v45, v46, v47, v48, v49, v50, v51);
                        }
                      }
                      WTF::fastFree(v332, v45, v46, v47, v48, v49, v50, v51);
                    }
                  }
                  else
                  {
                    v328[1] = 0;
                  }
                  v41 = v340;
                  v315 = v342;
                  v313 = v344;
                }
                if (v312 == v43)
                  break;
                v316 = v348;
                *(_QWORD *)&v348 = 0;
                v317 = *(WTF::StringImpl **)(v52 + 16 * v312);
                *(_QWORD *)(v52 + 16 * v312) = v316;
                if (v317)
                {
                  if (*(_DWORD *)v317 == 2)
                  {
                    v341 = v315;
                    v343 = v313;
                    WTF::StringImpl::~StringImpl(v317, (WTF::AtomStringImpl *)v45, v46, v47, v48, v49, v50, v51);
                    WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
                    v315 = v341;
                    v313 = v343;
                  }
                  else
                  {
                    *(_DWORD *)v317 -= 2;
                  }
                }
                v318 = v52 + 16 * v312;
                v319 = *(_QWORD *)(v318 + 8);
                *(_QWORD *)(v318 + 8) = v315;
                *((_QWORD *)&v348 + 1) = v319;
                if ((v319 & 1) == 0)
                {
                  v345 = v313;
                  JSC::SymbolTableEntry::freeFatEntrySlow(v313, v45, v46, v47, v48, v49, v50, v51);
                  v313 = v345;
                }
                v57 += 2;
                if (v57 == v311)
                  goto LABEL_45;
                ++v312;
                while (1)
                {
                  v314 = (_DWORD *)*v57;
                  if ((unint64_t)(*v57 + 1) > 1)
                    break;
                  v57 += 2;
                  if (v57 == v311)
                    goto LABEL_45;
                }
              }
              __break(0xC471u);
              goto LABEL_318;
            }
          }
LABEL_45:
          *(_DWORD *)(v38 + 16) = v43;
          v58 = *(_DWORD *)(a2 + 44);
          if (!v58)
          {
LABEL_52:
            __break(0xC471u);
            JUMPOUT(0x1988D58E4);
          }
          v59 = 0;
          v60 = *(_QWORD **)(a2 + 32);
          v61 = &v60[3 * v58];
          while (1)
          {
            v62 = v60[1];
            if (*v60 <= (unint64_t)v44 && *v60 + v62 > (unint64_t)v44)
              break;
            v59 += v62;
            v60 += 3;
            if (v60 == v61)
              goto LABEL_52;
          }
          v64 = *v60 - ((_QWORD)v44 + v59);
          v72 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v43);
          *v44 = (char *)v65 + v64;
          v73 = 16 * v43;
          v74 = (_QWORD *)v72;
          do
          {
            *v74 = 0x7FFFFFFFFFFFFFFFLL;
            v74 += 2;
            v73 -= 16;
          }
          while (v73);
          if (*(_DWORD *)(v38 + 16))
          {
            v75 = 0;
            v76 = (uint64_t *)(v52 + 8);
            do
            {
              if (v43 == v75)
              {
                __break(0xC471u);
                JUMPOUT(0x1988D68ECLL);
              }
              v77 = (WTF::StringImpl *)*(v76 - 1);
              if (v77)
              {
                *(_DWORD *)v77 += 2;
                JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)v72, (JSC::Encoder *)a2, v77);
                if (*(_DWORD *)v77 == 2)
                {
                  WTF::StringImpl::~StringImpl(v77, v65, v66, v67, v68, v69, v70, v71);
                  WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
                }
                else
                {
                  *(_DWORD *)v77 -= 2;
                }
              }
              v78 = *v76;
              v76 += 2;
              *(_QWORD *)(v72 + 8) = v78 | 1;
              ++v75;
              v72 += 16;
            }
            while (v75 < *(unsigned int *)(v38 + 16));
          }
          v87 = 0;
          v9 = v346;
          do
          {
            v88 = (WTF::StringImpl **)(v52 + v87);
            if ((*(_BYTE *)(v52 + v87 + 8) & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v52 + v87 + 8), v65, v66, v67, v68, v69, v70, v71);
            v89 = *v88;
            *v88 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
              {
                WTF::StringImpl::~StringImpl(v89, v65, v66, v67, v68, v69, v70, v71);
                WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
              }
              else
              {
                *(_DWORD *)v89 -= 2;
              }
            }
            v87 += 16;
          }
          while (16 * v43 != v87);
          WTF::fastFree(v52, v65, v66, v67, v68, v69, v70, v71);
        }
        else
        {
          *(_DWORD *)(v37 + 16) = 0;
        }
      }
      else
      {
        *(_DWORD *)(v37 + 16) = 0;
      }
      *(_DWORD *)(v38 + 24) = *(_DWORD *)(v9 + 16);
      v131 = *(_BYTE *)(v38 + 28) & 0xFE | *(_BYTE *)(v9 + 21) & 1;
      *(_BYTE *)(v38 + 28) = v131;
      v132 = v131 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v9 + 21) >> 1) & 1));
      *(_BYTE *)(v38 + 28) = v132;
      *(_BYTE *)(v38 + 28) = v132 & 0xE3 | *(_BYTE *)(v9 + 21) & 0x1C;
      v133 = *(_QWORD *)(v9 + 32);
      if (v133)
      {
        v134 = *(_QWORD *)(a2 + 48);
        if (!v134)
          goto LABEL_168;
        v135 = *(_DWORD *)(v134 - 8);
        v136 = (~(v133 << 32) + v133) ^ ((unint64_t)(~(v133 << 32) + v133) >> 22);
        v137 = 9 * ((v136 + ~(v136 << 13)) ^ ((v136 + ~(v136 << 13)) >> 8));
        v138 = (v137 ^ (v137 >> 15)) + ~((v137 ^ (v137 >> 15)) << 27);
        v139 = v135 & ((v138 >> 31) ^ v138);
        v140 = *(_QWORD *)(v134 + 16 * v139);
        if (v140 != v133)
        {
          v141 = 1;
          while (v140)
          {
            v139 = ((_DWORD)v139 + v141) & v135;
            v140 = *(_QWORD *)(v134 + 16 * v139);
            ++v141;
            if (v140 == v133)
              goto LABEL_167;
          }
          v139 = *(unsigned int *)(v134 - 4);
        }
LABEL_167:
        if (v139 != *(_DWORD *)(v134 - 4))
        {
          v234 = *(_DWORD *)(a2 + 44);
          if (!v234)
          {
LABEL_206:
            __break(0xC471u);
            JUMPOUT(0x1988D6280);
          }
          v235 = 0;
          v236 = *(_QWORD *)(v134 + 16 * v139 + 8);
          v237 = *(_QWORD **)(a2 + 32);
          v238 = &v237[3 * v234];
          while (1)
          {
            v239 = v237[1];
            if (*v237 <= (unint64_t)v41 && *v237 + v239 > (unint64_t)v41)
              break;
            v235 += v239;
            v237 += 3;
            if (v237 == v238)
              goto LABEL_206;
          }
          *v41 = v236 - ((_QWORD)v41 + v235) + *v237;
        }
        else
        {
LABEL_168:
          v202 = *(_DWORD *)(a2 + 44);
          if (!v202)
          {
LABEL_175:
            __break(0xC471u);
            JUMPOUT(0x1988D60A8);
          }
          v203 = 0;
          v204 = *(_QWORD **)(a2 + 32);
          v205 = &v204[3 * v202];
          while (1)
          {
            v206 = v204[1];
            if (*v204 <= (unint64_t)v41 && *v204 + v206 > (unint64_t)v41)
              break;
            v203 += v206;
            v204 += 3;
            if (v204 == v205)
              goto LABEL_175;
          }
          v208 = *v204 - ((_QWORD)v41 + v203);
          v213 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
          *v41 = v208 + v214;
          *(_QWORD *)(v213 + 8) = 0x7FFFFFFFFFFFFFFFLL;
          v215 = (_QWORD *)(v213 + 8);
          v216 = *(unsigned int *)(v133 + 8);
          *(_DWORD *)v213 = v216;
          v217 = *(_QWORD *)(v133 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v217 = (v217 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if ((_DWORD)v216)
          {
            v218 = *(_DWORD *)(a2 + 44);
            if (!v218)
            {
LABEL_187:
              __break(0xC471u);
              JUMPOUT(0x1988D6164);
            }
            v219 = 0;
            v220 = *(_QWORD **)(a2 + 32);
            v221 = &v220[3 * v218];
            while (1)
            {
              v222 = v220[1];
              if (*v220 <= (unint64_t)v215 && *v220 + v222 > (unint64_t)v215)
                break;
              v219 += v222;
              v220 += 3;
              if (v220 == v221)
                goto LABEL_187;
            }
            v224 = *v220 - ((_QWORD)v215 + v219);
            v225 = (_DWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 4 * (int)v216);
            *v215 = v224 + v226;
            memset(v225, 255, 4 * v216);
            do
            {
              v227 = *(_DWORD *)v217;
              v217 += 4;
              *v225++ = v227;
              --v216;
            }
            while (v216);
          }
          v228 = *(_DWORD *)(a2 + 44);
          if (!v228)
          {
LABEL_197:
            __break(0xC471u);
            JUMPOUT(0x1988D61F8);
          }
          v229 = 0;
          v230 = *(unint64_t **)(a2 + 32);
          v231 = &v230[3 * v228];
          while (1)
          {
            v232 = v230[1];
            if (*v230 <= v213 && *v230 + v232 > v213)
              break;
            v229 += v232;
            v230 += 3;
            if (v230 == v231)
              goto LABEL_197;
          }
          v349 = v229 + v213 - *v230;
          v350 = v133;
          WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v348, (uint64_t *)(a2 + 48), &v350, (uint64_t *)&v349, v209, v210, v211, v212);
        }
      }
      v241 = *(_QWORD *)(v346 + 24);
      if (v241)
      {
        v242 = (_QWORD *)(v38 + 40);
        v243 = *(_QWORD *)(a2 + 48);
        if (v243)
        {
          v244 = *(_DWORD *)(v243 - 8);
          v245 = (~(v241 << 32) + v241) ^ ((unint64_t)(~(v241 << 32) + v241) >> 22);
          v246 = 9 * ((v245 + ~(v245 << 13)) ^ ((v245 + ~(v245 << 13)) >> 8));
          v247 = (v246 ^ (v246 >> 15)) + ~((v246 ^ (v246 >> 15)) << 27);
          v248 = v244 & ((v247 >> 31) ^ v247);
          v249 = *(_QWORD *)(v243 + 16 * v248);
          if (v249 != v241)
          {
            v250 = 1;
            while (v249)
            {
              v248 = ((_DWORD)v248 + v250) & v244;
              v249 = *(_QWORD *)(v243 + 16 * v248);
              ++v250;
              if (v249 == v241)
                goto LABEL_217;
            }
            v248 = *(unsigned int *)(v243 - 4);
          }
LABEL_217:
          v251 = *(_QWORD **)(a2 + 32);
          v252 = *(_DWORD *)(a2 + 44);
          if (v248 != *(_DWORD *)(v243 - 4))
          {
            if (!v252)
            {
LABEL_242:
              __break(0xC471u);
              JUMPOUT(0x1988D64ACLL);
            }
            v275 = 0;
            v276 = *(_QWORD *)(v243 + 16 * v248 + 8);
            v277 = &v251[3 * v252];
            while (1)
            {
              v278 = v251[1];
              if (*v251 <= (unint64_t)v242 && *v251 + v278 > (unint64_t)v242)
                break;
              v275 += v278;
              v251 += 3;
              if (v251 == v277)
                goto LABEL_242;
            }
            *v242 = v276 - ((_QWORD)v242 + v275) + *v251;
            return;
          }
        }
        else
        {
          v251 = *(_QWORD **)(a2 + 32);
          v252 = *(_DWORD *)(a2 + 44);
        }
        if (!v252)
        {
LABEL_225:
          __break(0xC471u);
          JUMPOUT(0x1988D6398);
        }
        v253 = 0;
        v254 = &v251[3 * v252];
        while (1)
        {
          v255 = v251[1];
          if (*v251 <= (unint64_t)v242 && *v251 + v255 > (unint64_t)v242)
            break;
          v253 += v255;
          v251 += 3;
          if (v251 == v254)
            goto LABEL_225;
        }
        v257 = *v251 - ((_QWORD)v242 + v253);
        v258 = (int64x2_t *)JSC::Encoder::malloc((JSC::Encoder *)a2, 0x18u);
        *v242 = v257 + v259;
        *v258 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::encode((uint64_t)v258, a2, (uint64_t **)(v241 + 32), v260, v261, v262, v263, v264);
        v269 = *(_DWORD *)(a2 + 44);
        if (!v269)
        {
LABEL_233:
          __break(0xC471u);
          JUMPOUT(0x1988D642CLL);
        }
        v270 = 0;
        v271 = *(_QWORD **)(a2 + 32);
        v272 = &v271[3 * v269];
        while (1)
        {
          v273 = v271[1];
          if (*v271 <= (unint64_t)v258 && *v271 + v273 > (unint64_t)v258)
            break;
          v270 += v273;
          v271 += 3;
          if (v271 == v272)
            goto LABEL_233;
        }
        v349 = (unint64_t)v258->u64 + v270 - *v271;
        v350 = v241;
        WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v348, (uint64_t *)(a2 + 48), &v350, (uint64_t *)&v349, v265, v266, v267, v268);
      }
    }
    else
    {
      v13 = *(unsigned __int8 *)(a3 + 5);
      if (v13 == 19)
      {
        *(_BYTE *)(a1 + 8) = 3;
        v98 = *(_DWORD *)(a2 + 44);
        if (!v98)
        {
LABEL_80:
          __break(0xC471u);
          JUMPOUT(0x1988D5A60);
        }
        v99 = 0;
        v100 = *(unint64_t **)(a2 + 32);
        v101 = &v100[3 * v98];
        while (1)
        {
          v102 = v100[1];
          if (*v100 <= a1 && *v100 + v102 > a1)
            break;
          v99 += v102;
          v100 += 3;
          if (v100 == v101)
            goto LABEL_80;
        }
        v118 = *v100 - (v99 + a1);
        v119 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
        *(_QWORD *)a1 = v118 + v120;
        *(_QWORD *)(v119 + 8) = 0x7FFFFFFFFFFFFFFFLL;
        v121 = (_QWORD *)(v119 + 8);
        v122 = *(unsigned int *)(v9 + 8);
        *(_DWORD *)(v119 + 4) = v122;
        v123 = *(_BYTE *)(v9 + 4);
        *(_BYTE *)v119 = v123;
        v124 = (uint64_t *)(v9 + 16);
        if ((v123 & 0xE) == 6)
        {
          if ((_DWORD)v122)
          {
            v125 = *(_DWORD *)(a2 + 44);
            if (!v125)
            {
LABEL_102:
              __break(0xC471u);
              JUMPOUT(0x1988D5BD0);
            }
            v126 = 0;
            v127 = *(_QWORD **)(a2 + 32);
            v128 = &v127[3 * v125];
            while (1)
            {
              v129 = v127[1];
              if (*v127 <= (unint64_t)v121 && *v127 + v129 > (unint64_t)v121)
                break;
              v126 += v129;
              v127 += 3;
              if (v127 == v128)
                goto LABEL_102;
            }
            v169 = *v127 - ((_QWORD)v121 + v126);
            v170 = (_QWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 8 * (int)v122);
            *v121 = v169 + v171;
            do
            {
              v172 = *v124++;
              *v170++ = v172;
              --v122;
            }
            while (v122);
          }
        }
        else if ((_DWORD)v122)
        {
          v142 = *(_DWORD *)(a2 + 44);
          if (!v142)
          {
LABEL_119:
            __break(0xC471u);
            JUMPOUT(0x1988D5CFCLL);
          }
          v143 = 0;
          v144 = *(_QWORD **)(a2 + 32);
          v145 = &v144[3 * v142];
          while (1)
          {
            v146 = v144[1];
            if (*v144 <= (unint64_t)v121 && *v144 + v146 > (unint64_t)v121)
              break;
            v143 += v146;
            v144 += 3;
            if (v144 == v145)
              goto LABEL_119;
          }
          v173 = *v144 - ((_QWORD)v121 + v143);
          v174 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v122);
          *v121 = v173 + v175;
          v176 = 16 * v122;
          v177 = (_QWORD *)v174;
          do
          {
            *v177 = 0x7FFFFFFFFFFFFFFFLL;
            v177 += 2;
            v176 -= 16;
          }
          while (v176);
          do
          {
            v178 = *v124++;
            JSC::CachedJSValue::encode(v174, a2, v178);
            v174 += 16;
            --v122;
          }
          while (v122);
        }
      }
      else
      {
        if (v13 == 2)
        {
          *(_BYTE *)(a1 + 8) = 2;
          v14 = (int **)(a3 + 8);
          if ((*(_BYTE *)(a3 + 8) & 1) != 0)
            v14 = JSC::JSRopeString::resolveRope(a3, 0, a3, a4, a9, a5, a6, a7, a8);
          v15 = *(_DWORD *)(a2 + 44);
          if (v15)
          {
            v16 = 0;
            v17 = *(unint64_t **)(a2 + 32);
            v18 = &v17[3 * v15];
            while (1)
            {
              v19 = v17[1];
              if (*v17 <= a1 && *v17 + v19 > a1)
                break;
              v16 += v19;
              v17 += 3;
              if (v17 == v18)
                goto LABEL_15;
            }
            v110 = *v17 - (v16 + a1);
            v111 = (_QWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
            *(_QWORD *)a1 = v110 + v112;
            *v111 = 0x7FFFFFFFFFFFFFFFLL;
            JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::encode((unint64_t)v111, (JSC::Encoder *)a2, (WTF::StringImpl *)*v14, v113, v114, v115, v116, v117);
            return;
          }
LABEL_15:
          __break(0xC471u);
LABEL_318:
          JUMPOUT(0x1988D56BCLL);
        }
        if (v12 != &JSC::RegExp::s_info)
        {
          if (v12 != &JSC::JSTemplateObjectDescriptor::s_info)
          {
            if (v13 != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1988D68BCLL);
            }
            *(_BYTE *)(a1 + 8) = 6;
            v104 = *(_DWORD *)(a2 + 44);
            if (!v104)
            {
LABEL_91:
              __break(0xC471u);
              JUMPOUT(0x1988D5AECLL);
            }
            v105 = 0;
            v106 = *(unint64_t **)(a2 + 32);
            v107 = &v106[3 * v104];
            while (1)
            {
              v108 = v106[1];
              if (*v106 <= a1 && *v106 + v108 > a1)
                break;
              v105 += v108;
              v106 += 3;
              if (v106 == v107)
                goto LABEL_91;
            }
            v148 = *v106 - (v105 + a1);
            v149 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
            *(_QWORD *)a1 = v148 + v150;
            *(_QWORD *)v149 = 0x7FFFFFFFFFFFFFFFLL;
            v151 = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v149 + 8) = v151;
            *(_BYTE *)(v149 + 12) = *(_BYTE *)(v9 + 16) != 0;
            if (v151)
            {
              v152 = *(_DWORD *)(a2 + 44);
              if (!v152)
              {
LABEL_128:
                __break(0xC471u);
                JUMPOUT(0x1988D5DA0);
              }
              v153 = (_QWORD *)v149;
              v154 = 0;
              v155 = (8 * v151);
              v156 = *(unint64_t **)(a2 + 32);
              v157 = &v156[3 * v152];
              while (1)
              {
                v158 = v156[1];
                if (*v156 <= v149 && *v156 + v158 > v149)
                  break;
                v154 += v158;
                v156 += 3;
                if (v156 == v157)
                  goto LABEL_128;
              }
              v179 = *v156 - (v154 + v149);
              v180 = (void *)JSC::Encoder::malloc((JSC::Encoder *)a2, v155);
              *v153 = v179 + v181;
              v182 = *(_QWORD *)(v9 + 24);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v182 = (v182 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              memcpy(v180, (const void *)v182, v155);
            }
            return;
          }
          *(_BYTE *)(a1 + 8) = 5;
          v183 = *(_DWORD *)(a2 + 44);
          if (!v183)
          {
LABEL_156:
            __break(0xC471u);
            JUMPOUT(0x1988D5F9CLL);
          }
          v184 = 0;
          v185 = *(unint64_t **)(a2 + 32);
          v186 = &v185[3 * v183];
          while (1)
          {
            v187 = v185[1];
            if (*v185 <= a1 && *v185 + v187 > a1)
              break;
            v184 += v187;
            v185 += 3;
            if (v185 == v186)
              goto LABEL_156;
          }
          v189 = *v185 - (v184 + a1);
          v190 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x28u);
          v191 = v190;
          *(_QWORD *)a1 = v189 + v192;
          *(_QWORD *)v190 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)(v190 + 16) = 0x7FFFFFFFFFFFFFFFLL;
          v193 = v190 + 16;
          v194 = *(_QWORD *)(v9 + 8);
          v195 = *(unsigned int *)(v194 + 20);
          *(_DWORD *)(v190 + 8) = v195;
          if ((_DWORD)v195)
          {
            v196 = *(_DWORD *)(a2 + 44);
            if (!v196)
            {
LABEL_165:
              __break(0xC471u);
              JUMPOUT(0x1988D603CLL);
            }
            v197 = 0;
            v198 = *(unint64_t **)(a2 + 32);
            v199 = &v198[3 * v196];
            while (1)
            {
              v200 = v198[1];
              if (*v198 <= v190 && *v198 + v200 > v190)
                break;
              v197 += v200;
              v198 += 3;
              if (v198 == v199)
                goto LABEL_165;
            }
            v280 = v9;
            v281 = *v198 - (v197 + v190);
            v282 = (char *)JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v195);
            v284 = v281 + v283;
            v9 = v280;
            *(_QWORD *)v191 = v284;
            memset_pattern16(v282, &unk_1991575D0, 16 * v195);
            if (*(_DWORD *)(v191 + 8))
            {
              v285 = 0;
              v286 = v282 + 8;
              do
              {
                if (v285 >= *(unsigned int *)(v194 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988D68F4);
                }
                JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v286++, (JSC::Encoder *)a2, *(WTF::StringImpl **)(*(_QWORD *)(v194 + 8) + 8 * v285++));
              }
              while (v285 < *(unsigned int *)(v191 + 8));
            }
          }
          v347 = v9;
          v287 = *(_QWORD *)(v9 + 8);
          v288 = *(unsigned int *)(v287 + 68);
          *(_DWORD *)(v191 + 24) = v288;
          if (!(_DWORD)v288)
            goto LABEL_272;
          v289 = *(_DWORD *)(a2 + 44);
          if (!v289)
          {
LABEL_256:
            __break(0xC471u);
            JUMPOUT(0x1988D65ACLL);
          }
          v290 = 0;
          v291 = *(unint64_t **)(a2 + 32);
          v292 = &v291[3 * v289];
          while (1)
          {
            v293 = v291[1];
            if (*v291 <= v193 && *v291 + v293 > v193)
              break;
            v290 += v293;
            v291 += 3;
            if (v291 == v292)
              goto LABEL_256;
          }
          v295 = *v291 - (v290 + v193);
          v296 = (char *)JSC::Encoder::malloc((JSC::Encoder *)a2, 8 * (int)v288);
          *(_QWORD *)(v191 + 16) = v295 + v297;
          memset_pattern16(v296, &unk_1991575D0, 8 * v288);
          v298 = *(unsigned int *)(v191 + 24);
          if (!(_DWORD)v298)
          {
LABEL_272:
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v347 + 16);
            return;
          }
          v299 = 0;
          while (v299 < *(unsigned int *)(v287 + 68))
          {
            v300 = *(_QWORD *)(v287 + 56) + 16 * v299;
            if (*(_BYTE *)(v300 + 8))
            {
              v301 = *(_DWORD *)(a2 + 44);
              if (!v301)
              {
LABEL_306:
                __break(0xC471u);
                JUMPOUT(0x1988D689CLL);
              }
              v302 = 0;
              v303 = &v296[8 * v299];
              v304 = *(_QWORD **)(a2 + 32);
              v305 = &v304[3 * v301];
              while (1)
              {
                v306 = v304[1];
                if (*v304 <= (unint64_t)v303 && *v304 + v306 > (unint64_t)v303)
                  break;
                v302 += v306;
                v304 += 3;
                if (v304 == v305)
                  goto LABEL_306;
              }
              v308 = *v304 - (_QWORD)&v303[v302];
              v309 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
              *(_QWORD *)v303 = v308 + v310;
              memset_pattern16((void *)v309, &unk_1991575D0, 0x10uLL);
              if (!*(_BYTE *)(v300 + 8))
                goto LABEL_315;
              JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v309 + 8), (JSC::Encoder *)a2, *(WTF::StringImpl **)v300);
              v298 = *(unsigned int *)(v191 + 24);
            }
            if (++v299 >= v298)
              goto LABEL_272;
          }
          __break(0xC471u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(0xC471u);
          JUMPOUT(0x1988D6904);
        }
        *(_BYTE *)(a1 + 8) = 4;
        v160 = *(_DWORD *)(a2 + 44);
        if (!v160)
        {
LABEL_136:
          __break(0xC471u);
          JUMPOUT(0x1988D5E04);
        }
        v161 = 0;
        v162 = *(unint64_t **)(a2 + 32);
        v163 = &v162[3 * v160];
        while (1)
        {
          v164 = v162[1];
          if (*v162 <= a1 && *v162 + v164 > a1)
            break;
          v161 += v164;
          v162 += 3;
          if (v162 == v163)
            goto LABEL_136;
        }
        v166 = *v162 - (v161 + a1);
        v167 = JSC::Encoder::malloc((JSC::Encoder *)a2, 0x18u);
        *(_QWORD *)a1 = v166 + v168;
        *(int64x2_t *)v167 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        *(_WORD *)(v167 + 16) = 0;
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v167 + 8), (JSC::Encoder *)a2, *(WTF::StringImpl **)(v9 + 8));
        *(_WORD *)(v167 + 16) = *(_WORD *)(v9 + 18);
      }
    }
  }
}

void JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::encode(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  unsigned int *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v9 = *a3;
  if (!*a3)
  {
    *(_DWORD *)(a1 + 16) = 0;
    return;
  }
  v11 = *((unsigned int *)v9 - 3);
  v12 = 8 * v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1988D6C54);
    }
    v14 = WTF::fastMalloc((WTF *)(8 * v11));
    v15 = v14;
    do
    {
      *(_BYTE *)(v15 + 4) = 0;
      *(_DWORD *)v15 = 0;
      *(_WORD *)(v15 + 6) = 0;
      v15 += 8;
    }
    while (v15 != v14 + 8 * v11);
    v9 = *a3;
    if (!*a3)
      goto LABEL_16;
  }
  else
  {
    v14 = 0;
  }
  if (*((_DWORD *)v9 - 3))
  {
    v16 = *((unsigned int *)v9 - 1);
    v17 = v9;
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v17 = v9;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        v18 -= 16;
        if (!v18)
          goto LABEL_16;
      }
    }
    v50 = &v9[2 * v16];
    if (v50 != v17)
    {
      v51 = 0;
      while (1)
      {
        v52 = *v17;
        if ((*v17 & 0xFFFFFFFFFFLL) != 0)
          *(_DWORD *)(*v17 & 0xFFFFFFFFFFLL) += 2;
        if (v51 == v11)
          goto LABEL_64;
        v53 = *((_WORD *)v17 + 4);
        v54 = (unsigned int *)(v14 + 8 * v51);
        v55 = (WTF::StringImpl *)(*v54 | ((unint64_t)*((unsigned __int8 *)v54 + 4) << 32));
        *v54 = v52;
        *((_BYTE *)v54 + 4) = BYTE4(v52);
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
        *((_WORD *)v54 + 3) = v53;
        v17 += 2;
        if (v17 != v50)
        {
          ++v51;
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            v17 += 2;
            if (v17 == v50)
              goto LABEL_16;
          }
          if (v17 != v50)
            continue;
        }
        break;
      }
    }
  }
LABEL_16:
  *(_DWORD *)(a1 + 16) = v11;
  if ((_DWORD)v11)
  {
    v19 = *(_DWORD *)(a2 + 44);
    if (v19)
    {
      v20 = 0;
      v21 = (_QWORD *)(a1 + 8);
      v22 = *(_QWORD **)(a2 + 32);
      v23 = &v22[3 * v19];
      while (1)
      {
        v24 = v22[1];
        if (*v22 <= (unint64_t)v21 && *v22 + v24 > (unint64_t)v21)
          break;
        v20 += v24;
        v22 += 3;
        if (v22 == v23)
          goto LABEL_64;
      }
      v26 = *v22 - ((_QWORD)v21 + v20);
      v27 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v11);
      *v21 = v26 + a2;
      v28 = v27;
      do
      {
        *(_QWORD *)v28 = 0x7FFFFFFFFFFFFFFFLL;
        *(_WORD *)(v28 + 8) = 0;
        v28 += 16;
      }
      while (v28 != v27 + 16 * v11);
      if (*(_DWORD *)(a1 + 16))
      {
        v29 = 0;
        v30 = (unsigned int *)v14;
        do
        {
          if (v11 == v29)
          {
            __break(0xC471u);
            JUMPOUT(0x1988D6C4CLL);
          }
          v31 = (WTF::StringImpl *)(*v30 | ((unint64_t)*((unsigned __int8 *)v30 + 4) << 32));
          if (v31)
          {
            *(_DWORD *)v31 += 2;
            JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)v27, (JSC::Encoder *)a2, v31);
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          else
          {
            JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)v27, (JSC::Encoder *)a2, 0);
          }
          *(_WORD *)(v27 + 8) = *((_WORD *)v30 + 3);
          ++v29;
          v30 += 2;
          v27 += 16;
        }
        while (v29 < *(unsigned int *)(a1 + 16));
      }
      v40 = (unsigned int *)v14;
      do
      {
        v41 = (WTF::StringImpl *)(*v40 | ((unint64_t)*((unsigned __int8 *)v40 + 4) << 32));
        *v40 = 0;
        *((_BYTE *)v40 + 4) = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        v40 += 2;
        v12 -= 8;
      }
      while (v12);
      goto LABEL_44;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1988D6A50);
  }
LABEL_44:
  if (v14)
    WTF::fastFree(v14, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

_OWORD *JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::encode(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  JSC::Encoder *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  int v92;
  char v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  JSC::TDZEnvironmentLink *v117;
  unsigned int v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  JSC::Encoder *v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;

  if (!a3)
    return result;
  v3 = a3;
  v4 = (JSC::Encoder *)a2;
  v5 = result;
  v7 = (uint64_t *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
    goto LABEL_10;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != a3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == a3)
        goto LABEL_9;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
LABEL_9:
  if (v12 == *(_DWORD *)(v6 - 4))
  {
LABEL_10:
    v15 = *(_DWORD *)(a2 + 44);
    if (!v15)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1988D6D78);
    }
    v16 = 0;
    v17 = *(_QWORD **)(a2 + 32);
    v18 = &v17[3 * v15];
    while (1)
    {
      v19 = v17[1];
      if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
        break;
      v16 += v19;
      v17 += 3;
      if (v17 == v18)
        goto LABEL_17;
    }
    v21 = *v17 - ((_QWORD)result + v16);
    v22 = (_QWORD *)JSC::Encoder::malloc((JSC::Encoder *)a2, 0x10u);
    *v5 = v21 + v23;
    memset_pattern16(v22, &unk_1991575D0, 0x10uLL);
    v28 = *(_QWORD *)(v3 + 8);
    if (!v28)
      goto LABEL_115;
    v29 = *v7;
    if (*v7)
    {
      v30 = *(_DWORD *)(v29 - 8);
      v31 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
      v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      v34 = v30 & ((v33 >> 31) ^ v33);
      v35 = *(_QWORD *)(v29 + 16 * v34);
      if (v35 != v28)
      {
        v36 = 1;
        while (v35)
        {
          v34 = ((_DWORD)v34 + v36) & v30;
          v35 = *(_QWORD *)(v29 + 16 * v34);
          ++v36;
          if (v35 == v28)
            goto LABEL_35;
        }
        v34 = *(unsigned int *)(v29 - 4);
      }
LABEL_35:
      if (v34 != *(_DWORD *)(v29 - 4))
      {
        v60 = *((_DWORD *)v4 + 11);
        if (!v60)
        {
LABEL_60:
          __break(0xC471u);
          JUMPOUT(0x1988D7000);
        }
        v61 = 0;
        v62 = *(_QWORD *)(v29 + 16 * v34 + 8);
        v63 = (_QWORD *)*((_QWORD *)v4 + 4);
        v64 = &v63[3 * v60];
        while (1)
        {
          v65 = v63[1];
          if (*v63 <= (unint64_t)v22 && *v63 + v65 > (unint64_t)v22)
            break;
          v61 += v65;
          v63 += 3;
          if (v63 == v64)
            goto LABEL_60;
        }
        *v22 = v62 - ((_QWORD)v22 + v61) + *v63;
        goto LABEL_115;
      }
    }
    v44 = *((_DWORD *)v4 + 11);
    if (!v44)
    {
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x1988D6F10);
    }
    v45 = 0;
    v46 = (_QWORD *)*((_QWORD *)v4 + 4);
    v47 = &v46[3 * v44];
    while (1)
    {
      v48 = v46[1];
      if (*v46 <= (unint64_t)v22 && *v46 + v48 > (unint64_t)v22)
        break;
      v45 += v48;
      v46 += 3;
      if (v46 == v47)
        goto LABEL_43;
    }
    v50 = *v46 - ((_QWORD)v22 + v45);
    v51 = (_QWORD *)JSC::Encoder::malloc(v4, 0x18u);
    v52 = (unint64_t)v51;
    *v22 = v50 + v53;
    *v51 = 0x7FFFFFFFFFFFFFFFLL;
    v54 = *(_DWORD *)(v28 + 16);
    if (!v54)
    {
      JSC::CachedVector<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)v51, v4, v28);
LABEL_106:
      *(_DWORD *)(v52 + 16) = *(_DWORD *)(v28 + 24);
      v111 = *((_DWORD *)v4 + 11);
      if (!v111)
      {
LABEL_113:
        __break(0xC471u);
        JUMPOUT(0x1988D72BCLL);
      }
      v112 = 0;
      v113 = (unint64_t *)*((_QWORD *)v4 + 4);
      v114 = &v113[3 * v111];
      while (1)
      {
        v115 = v113[1];
        if (*v113 <= v52 && *v113 + v115 > v52)
          break;
        v112 += v115;
        v113 += 3;
        if (v113 == v114)
          goto LABEL_113;
      }
      v148 = v112 + v52 - *v113;
      v149 = v28;
      WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v147, v7, &v149, (uint64_t *)&v148, v67, v68, v69, v70);
LABEL_115:
      v117 = *(JSC::TDZEnvironmentLink **)(v3 + 24);
      if (v117)
      {
        ++*(_DWORD *)v117;
        JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::encode(v22 + 1, v4, v117);
        if (*(_DWORD *)v117 == 1)
        {
          JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v117);
          WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        }
        else
        {
          --*(_DWORD *)v117;
        }
      }
      v118 = *((_DWORD *)v4 + 11);
      if (!v118)
      {
LABEL_125:
        __break(0xC471u);
        JUMPOUT(0x1988D736CLL);
      }
      v119 = 0;
      v120 = (_QWORD *)*((_QWORD *)v4 + 4);
      v121 = &v120[3 * v118];
      while (1)
      {
        v122 = v120[1];
        if (*v120 <= (unint64_t)v22 && *v120 + v122 > (unint64_t)v22)
          break;
        v119 += v122;
        v120 += 3;
        if (v120 == v121)
          goto LABEL_125;
      }
      v148 = (unint64_t)v22 + v119 - *v120;
      v149 = v3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v147, v7, &v149, (uint64_t *)&v148, v24, v25, v26, v27);
    }
    v147 = 0uLL;
    if (v54 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_137:
      __break(0xC471u);
      JUMPOUT(0x1988D7418);
    }
    v55 = *(uint64_t **)v28;
    v146 = v4;
    if (*(_QWORD *)v28)
    {
      v56 = *((unsigned int *)v55 - 1);
      v57 = &v55[v56];
      if (*((_DWORD *)v55 - 3))
      {
        v58 = *(uint64_t **)v28;
        if ((_DWORD)v56)
        {
          v59 = 8 * v56;
          v58 = *(uint64_t **)v28;
          while ((unint64_t)(*v58 + 1) <= 1)
          {
            ++v58;
            v59 -= 8;
            if (!v59)
            {
              v58 = v57;
              goto LABEL_65;
            }
          }
        }
        goto LABEL_65;
      }
      v58 = &v55[v56];
    }
    else
    {
      v58 = 0;
      v56 = 0;
    }
    v57 = &v55[v56];
LABEL_65:
    v145 = v28;
    if (v55)
      v71 = &v55[*((unsigned int *)v55 - 1)];
    else
      v71 = 0;
    if (v71 == v58)
    {
      JSC::CachedVector<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t)v51, v4, (uint64_t)&v147);
    }
    else
    {
      v143 = v3;
      v144 = v7;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      do
      {
        v75 = v74;
        if (v74 == v73)
        {
          v76 = v74 + ((unint64_t)v74 >> 2);
          if (v76 >= 0x10)
            v77 = v76 + 1;
          else
            v77 = 16;
          if (v77 <= (unint64_t)v74 + 1)
            v78 = v74 + 1;
          else
            v78 = v77;
          if (v78 >= 0x33333334)
            goto LABEL_137;
          v79 = v71;
          v80 = 5 * v78;
          v88 = WTF::fastMalloc((WTF *)(5 * v78));
          v89 = v80 / 5;
          DWORD2(v147) = v89;
          *(_QWORD *)&v147 = v88;
          if (v73)
          {
            v90 = 5 * v75;
            v91 = (unsigned int *)v72;
            do
            {
              v92 = *v91;
              v93 = *((_BYTE *)v91 + 4);
              *v91 = 0;
              *((_BYTE *)v91 + 4) = 0;
              *(_BYTE *)(v88 + 4) = v93;
              *(_DWORD *)v88 = v92;
              v94 = (WTF::StringImpl *)(*v91 | ((unint64_t)*((unsigned __int8 *)v91 + 4) << 32));
              *v91 = 0;
              *((_BYTE *)v91 + 4) = 0;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                {
                  WTF::StringImpl::~StringImpl(v94, v81, v82, v83, v84, v85, v86, v87);
                  WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
                }
                else
                {
                  *(_DWORD *)v94 -= 2;
                }
              }
              v88 += 5;
              v91 = (unsigned int *)((char *)v91 + 5);
              v90 -= 5;
            }
            while (v90);
            v88 = v147;
          }
          if (v72)
          {
            if (v88 == v72)
            {
              v88 = 0;
              v89 = 0;
              *(_QWORD *)&v147 = 0;
              DWORD2(v147) = 0;
            }
            WTF::fastFree(v72, v81, v82, v83, v84, v85, v86, v87);
          }
          v72 = v88;
          v73 = v89;
          v105 = HIDWORD(v147);
          v104 = *v58;
          v71 = v79;
          if ((*v58 & 0xFFFFFFFFFFLL) != 0)
            *(_DWORD *)(*v58 & 0xFFFFFFFFFFLL) += 2;
          v103 = v88 + 5 * v105;
        }
        else
        {
          v103 = v72 + 5 * v74;
          v104 = *v58;
          if ((*v58 & 0xFFFFFFFFFFLL) != 0)
            *(_DWORD *)(*v58 & 0xFFFFFFFFFFLL) += 2;
        }
        *(_DWORD *)v103 = v104;
        *(_BYTE *)(v103 + 4) = BYTE4(v104);
        v74 = ++HIDWORD(v147);
        v106 = v58 + 1;
        v58 = v57;
        if (v106 != v57)
        {
          v58 = v106;
          while ((unint64_t)(*v58 + 1) <= 1)
          {
            if (++v58 == v57)
            {
              v58 = v57;
              break;
            }
          }
        }
      }
      while (v58 != v71);
      v4 = v146;
      v107 = v147;
      JSC::CachedVector<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v52, v146, (uint64_t)&v147);
      v28 = v145;
      if (v74)
      {
        v132 = 5 * v74;
        v133 = (unsigned int *)v107;
        do
        {
          v134 = (WTF::StringImpl *)(*v133 | ((unint64_t)*((unsigned __int8 *)v133 + 4) << 32));
          *v133 = 0;
          *((_BYTE *)v133 + 4) = 0;
          if (v134)
          {
            if (*(_DWORD *)v134 == 2)
            {
              WTF::StringImpl::~StringImpl(v134, v108, v109, v110, v67, v68, v69, v70);
              WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
            }
            else
            {
              *(_DWORD *)v134 -= 2;
            }
          }
          v133 = (unsigned int *)((char *)v133 + 5);
          v132 -= 5;
        }
        while (v132);
      }
      v3 = v143;
      v7 = v144;
      if (v107)
        WTF::fastFree(v107, v108, v109, v110, v67, v68, v69, v70);
    }
    goto LABEL_106;
  }
  v37 = *(_DWORD *)(a2 + 44);
  if (!v37)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x1988D6E90);
  }
  v38 = 0;
  v39 = *(_QWORD *)(v6 + 16 * v12 + 8);
  v40 = *(_QWORD **)(a2 + 32);
  v41 = &v40[3 * v37];
  while (1)
  {
    v42 = v40[1];
    if (*v40 <= (unint64_t)result && *v40 + v42 > (unint64_t)result)
      break;
    v38 += v42;
    v40 += 3;
    if (v40 == v41)
      goto LABEL_32;
  }
  *(_QWORD *)result = v39 - ((_QWORD)result + v38) + *v40;
  return result;
}

void JSC::CachedVector<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::encode<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unint64_t a1, JSC::Encoder *this, uint64_t a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(unsigned int *)(a3 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  if ((_DWORD)v3)
  {
    v5 = *((_DWORD *)this + 11);
    if (!v5)
      goto LABEL_21;
    v8 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 4);
    v10 = &v9[3 * v5];
    while (1)
    {
      v11 = v9[1];
      if (*v9 <= a1 && *v9 + v11 > a1)
        break;
      v8 += v11;
      v9 += 3;
      if (v9 == v10)
        goto LABEL_21;
    }
    v13 = *v9 - (v8 + a1);
    v14 = (_OWORD *)JSC::Encoder::malloc(this, 8 * (int)v3);
    *(_QWORD *)a1 = v13 + v15;
    memset_pattern16(v14, &unk_1991575D0, 8 * v3);
    if (*(_DWORD *)(a1 + 8))
    {
      v16 = 0;
      v17 = 0;
      while (v17 < *(unsigned int *)(a3 + 12))
      {
        v18 = (WTF::StringImpl *)(*(unsigned int *)(*(_QWORD *)a3 + v16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a3 + v16 + 4) << 32));
        if (v18)
        {
          *(_DWORD *)v18 += 2;
          JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v14, this, v18);
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::~StringImpl(v18, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode(v14, this, 0);
        }
        ++v17;
        v16 += 5;
        v14 = (_OWORD *)((char *)v14 + 8);
        if (v17 >= *(unsigned int *)(a1 + 8))
          return;
      }
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x1988D74B0);
    }
  }
}

_OWORD *JSC::CachedPtr<JSC::CachedFunctionCodeBlock,JSC::UnlinkedFunctionCodeBlock>::encode(_OWORD *result, JSC::Encoder *this, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)((char *)this + 48);
    v6 = *((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v35 = *((_DWORD *)this + 11);
      if (!v35)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1988D77F8);
      }
      v36 = 0;
      v37 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v38 = (_QWORD *)*((_QWORD *)this + 4);
      v39 = &v38[3 * v35];
      while (1)
      {
        v40 = v38[1];
        if (*v38 <= (unint64_t)result && *v38 + v40 > (unint64_t)result)
          break;
        v36 += v40;
        v38 += 3;
        if (v38 == v39)
          goto LABEL_34;
      }
      *(_QWORD *)result = v37 - ((_QWORD)result + v36) + *v38;
    }
    else
    {
LABEL_10:
      v15 = *((_DWORD *)this + 11);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988D76B0);
      }
      v16 = 0;
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = JSC::Encoder::malloc(this, 0x1A0u);
      *v5 = v21 + v23;
      *(_QWORD *)v22 = 0xC0000000C0000000;
      *(_BYTE *)(v22 + 15) = 0;
      v24 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      *(int64x2_t *)(v22 + 256) = v24;
      *(int64x2_t *)(v22 + 272) = v24;
      *(_QWORD *)(v22 + 288) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v22 + 304) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v22 + 320) = 0x7FFFFFFFFFFFFFFFLL;
      *(int64x2_t *)(v22 + 336) = v24;
      *(_QWORD *)(v22 + 352) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v22 + 368) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v22 + 384) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v22 + 400) = 0x7FFFFFFFFFFFFFFFLL;
      JSC::CachedCodeBlock<JSC::UnlinkedFunctionCodeBlock>::encode(v22, this, a3);
      v29 = *((_DWORD *)this + 11);
      if (!v29)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1988D7770);
      }
      v30 = 0;
      v31 = (unint64_t *)*((_QWORD *)this + 4);
      v32 = &v31[3 * v29];
      while (1)
      {
        v33 = v31[1];
        if (*v31 <= v22 && *v31 + v33 > v22)
          break;
        v30 += v33;
        v31 += 3;
        if (v31 == v32)
          goto LABEL_25;
      }
      v43 = v30 + v22 - *v31;
      v44 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v42, v7, &v44, (uint64_t *)&v43, v25, v26, v27, v28);
    }
  }
  return result;
}

void WTF::Vector<JSC::CacheUpdate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *(_DWORD *)(a1 + 8) = v8 / 0x38;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = (_DWORD *)(v9 + 48);
        v18 = (_DWORD *)(v6 + 48);
        v19 = 56 * v7;
        do
        {
          *((_BYTE *)v17 - 40) = 0;
          v10 = v17 - 10;
          *v17 = -1;
          v20 = *v18;
          if ((_DWORD)v20 != -1)
          {
            ((void (*)(char *, _DWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3JSC11CacheUpdate12GlobalUpdateENS7_14FunctionUpdateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v20])(&v23, v10, v18 - 10);
            *v17 = v20;
            v21 = *v18;
            if ((_DWORD)v21 != -1)
              ((void (*)(char *, _DWORD *))off_1E3598700[v21])(&v22, v18 - 10);
          }
          *v18 = -1;
          v18 += 14;
          v17 += 14;
          v19 -= 56;
        }
        while (v19);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_OWORD *WTF::HashTable<JSC::UnlinkedFunctionExecutable const*,WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable>>,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_QWORD *)(v6 + 16 * v19);
      if ((unint64_t)(*v21 + 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (~(*v21 << 32) + *v21) ^ ((~(*v21 << 32) + *v21) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = v27;
          v30 = *(_QWORD *)(v22 + 16 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (v30);
        v31 = (_OWORD *)(v22 + 16 * v29);
        *v31 = *(_OWORD *)v21;
        if (v21 == a3)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

_OWORD *WTF::HashTable<long,WTF::KeyValuePair<long,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long,void *>>,WTF::DefaultHash<long>,WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (*v24 + ~(*v24 << 32)) ^ ((*v24 + ~(*v24 << 32)) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<JSC::CompactTDZEnvironment *,WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>>,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashMap<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironmentMap::Handle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironment *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  JSC::CompactTDZEnvironmentMap::Handle *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v50;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v19 = v5;
    do
    {
      v20 = (uint64_t *)(v4 + 24 * v17);
      v21 = *v20;
      if (*v20 != -1)
      {
        if (v21)
        {
          v22 = *a1;
          v50 = v18;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v23 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v18 = (uint64_t *)(v22 + 24 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (*v18);
          v30 = v22 + 24 * v29;
          JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)(v30 + 8));
          *v18 = *v20;
          v38 = v4 + 24 * v17;
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v30 + 16) = 0;
          v39 = (unint64_t *)(v30 + 16);
          v41 = *(_QWORD *)(v38 + 8);
          v40 = (JSC::CompactTDZEnvironmentMap::Handle *)(v38 + 8);
          *(_QWORD *)v40 = 0;
          *(_QWORD *)(v30 + 8) = v41;
          v42 = *((_QWORD *)v40 + 1);
          *((_QWORD *)v40 + 1) = 0;
          v43 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          v44 = *((_QWORD *)v40 + 1);
          *((_QWORD *)v40 + 1) = v43;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1)
            {
              v46 = *(_QWORD *)(v44 + 8);
              if (v46)
                WTF::fastFree(v46 - 16, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v44, v31, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              --*(_DWORD *)v44;
            }
          }
          v45 = *v39;
          *v39 = v42;
          if (v45)
          {
            if (*(_DWORD *)v45 == 1)
            {
              v47 = *(_QWORD *)(v45 + 8);
              if (v47)
                WTF::fastFree(v47 - 16, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v45, v31, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              --*(_DWORD *)v45;
            }
          }
          JSC::CompactTDZEnvironmentMap::Handle::~Handle(v40);
          if (v20 != a3)
            v18 = v50;
        }
        else
        {
          JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)(v4 + 24 * v17 + 8));
        }
      }
      ++v17;
    }
    while (v17 != v19);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

double JSC::CachedUnlinkedSourceCodeShape<JSC::UnlinkedSourceCode>::decode(double *a1, uint64_t a2, uint64_t a3)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  int *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  WTF::StringImpl *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  _DWORD *v149;
  uint64_t v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  WTF::StringImpl *v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  WTF::StringImpl *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  _DWORD *v183;
  double result;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  double *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  __int128 v239;
  __int128 v240;
  _DWORD *v241;

  v4 = a1;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0;
    goto LABEL_198;
  }
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned int *)(v8 + 32);
  if ((_DWORD)v9 == -1
    || (v238 = &v237,
        v10 = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v238, v8 + 16), v11 = *(unsigned int *)(v8 + 32), (_DWORD)v11 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_216;
  }
  v12 = v10;
  v238 = &v237;
  ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v238, v8 + 16);
  v13 = (char *)v4 + v5 - v12;
  v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
    goto LABEL_13;
  v15 = *(_DWORD *)(v14 - 8);
  v16 = (unint64_t)&v13[~((_QWORD)v13 << 32)] ^ ((unint64_t)&v13[~((_QWORD)v13 << 32)] >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = *(char **)(v14 + 16 * v19);
  if (v20 != v13)
  {
    v21 = 1;
    while (v20)
    {
      v19 = ((_DWORD)v19 + v21) & v15;
      v20 = *(char **)(v14 + 16 * v19);
      ++v21;
      if (v20 == v13)
        goto LABEL_12;
    }
    v19 = *(unsigned int *)(v14 - 4);
  }
LABEL_12:
  if (v19 == *(_DWORD *)(v14 - 4))
  {
LABEL_13:
    if (*(_QWORD *)v4 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_217;
    v22 = (char *)v4 + *(_QWORD *)v4;
    v23 = v22[8];
    v234 = v4;
    v235 = (uint64_t)v4 + v5 - v12;
    if (v23 < 2)
    {
      v24 = (uint64_t)&v22[*(_QWORD *)v22];
      LOBYTE(v238) = 0;
      v25 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v24 + 104), a2, &v238);
      if (v25)
      {
        if ((_BYTE)v238)
        {
          v26 = (_QWORD *)(a2 + 32);
          v27 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v27 == *(_DWORD *)(a2 + 40))
          {
            v28 = v27 + (v27 >> 2);
            if (v28 >= 0x10)
              v29 = v28 + 1;
            else
              v29 = 16;
            if (v29 <= v27 + 1)
              v30 = v27 + 1;
            else
              v30 = v29;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v26, v30);
            v27 = *(unsigned int *)(a2 + 44);
            v31 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v27);
          }
          else
          {
            v31 = (_QWORD *)(*v26 + 32 * v27);
          }
          *v31 = &off_1E35986B0;
          v31[1] = v25;
          v31[3] = v31;
          *(_DWORD *)(a2 + 44) = v27 + 1;
        }
        *(_DWORD *)v25 += 2;
      }
      JSC::CachedSourceOrigin::decode((uint64_t)&v238, v24, a2);
      LOBYTE(v237) = 0;
      v40 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v24 + 24), a2, &v237);
      v233 = a3;
      if (v40)
      {
        if ((_BYTE)v237)
        {
          v41 = (_QWORD *)(a2 + 32);
          v42 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v42 == *(_DWORD *)(a2 + 40))
          {
            v43 = v42 + (v42 >> 2);
            if (v43 >= 0x10)
              v44 = v43 + 1;
            else
              v44 = 16;
            if (v44 <= v42 + 1)
              v45 = v42 + 1;
            else
              v45 = v44;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v41, v45);
            v42 = *(unsigned int *)(a2 + 44);
            v46 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v42);
          }
          else
          {
            v46 = (_QWORD *)(*v41 + 32 * v42);
          }
          *v46 = &off_1E35986B0;
          v46[1] = v40;
          v46[3] = v46;
          *(_DWORD *)(a2 + 44) = v42 + 1;
        }
        v48 = *(_DWORD *)v40;
        *(_DWORD *)v40 += 2;
        v47 = *(_QWORD *)(v24 + 80);
        *(_DWORD *)v40 = v48 + 4;
      }
      else
      {
        v47 = *(_QWORD *)(v24 + 80);
      }
      v49 = *(_BYTE *)(v24 + 88);
      v50 = WTF::fastMalloc((WTF *)0x80);
      v6 = v50;
      *(_DWORD *)(v50 + 8) = 1;
      *(_BYTE *)(v50 + 12) = v23;
      v51 = (WTF::StringImpl *)v238;
      if (v238)
        *(_DWORD *)v238 += 2;
      *(_QWORD *)(v50 + 16) = v51;
      *(_OWORD *)(v50 + 24) = v239;
      *(_OWORD *)(v50 + 40) = v240;
      v52 = v241;
      if (v241)
        ++v241[2];
      *(_QWORD *)(v50 + 56) = v52;
      *(_QWORD *)(v50 + 64) = v40;
      *(_OWORD *)(v50 + 72) = 0u;
      *(_OWORD *)(v50 + 88) = 0u;
      *(_QWORD *)(v50 + 104) = v47;
      *(_DWORD *)(v50 + 112) = 0;
      *(_BYTE *)(v50 + 116) = v49;
      *(_QWORD *)v50 = off_1E357C4B0;
      v53 = &WTF::StringImpl::s_emptyAtomString;
      if (v25)
        v53 = (int *)v25;
      *v53 += 2;
      *(_QWORD *)(v50 + 120) = v53;
      LOBYTE(v237) = 0;
      v61 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v24 + 56), a2, &v237);
      if (v61)
      {
        v62 = (uint64_t *)(a2 + 24);
        if ((_BYTE)v237)
        {
          v63 = (_QWORD *)(a2 + 32);
          v64 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v64 == *(_DWORD *)(a2 + 40))
          {
            v65 = v64 + (v64 >> 2);
            if (v65 >= 0x10)
              v66 = v65 + 1;
            else
              v66 = 16;
            if (v66 <= v64 + 1)
              v67 = v64 + 1;
            else
              v67 = v66;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v63, v67);
            v64 = *(unsigned int *)(a2 + 44);
            v68 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v64);
          }
          else
          {
            v68 = (_QWORD *)(*v63 + 32 * v64);
          }
          *v68 = &off_1E35986B0;
          v68[1] = v61;
          v68[3] = v68;
          *(_DWORD *)(a2 + 44) = v64 + 1;
        }
        *(_DWORD *)v61 += 4;
      }
      else
      {
        v62 = (uint64_t *)(a2 + 24);
      }
      v69 = *(WTF::StringImpl **)(v6 + 88);
      *(_QWORD *)(v6 + 88) = v61;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
        {
          WTF::StringImpl::~StringImpl(v69, v54, v55, v56, v57, v58, v59, v60);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
          if (!v61)
            goto LABEL_81;
          goto LABEL_79;
        }
        *(_DWORD *)v69 -= 2;
      }
      if (!v61)
        goto LABEL_81;
LABEL_79:
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
      }
      else
      {
        *(_DWORD *)v61 -= 2;
      }
LABEL_81:
      LOBYTE(v237) = 0;
      v77 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v24 + 72), a2, &v237);
      if (v77)
      {
        if ((_BYTE)v237)
        {
          v78 = (_QWORD *)(a2 + 32);
          v79 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v79 == *(_DWORD *)(a2 + 40))
          {
            v80 = v79 + (v79 >> 2);
            if (v80 >= 0x10)
              v81 = v80 + 1;
            else
              v81 = 16;
            if (v81 <= v79 + 1)
              v82 = v79 + 1;
            else
              v82 = v81;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v78, v82);
            v79 = *(unsigned int *)(a2 + 44);
            v83 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v79);
          }
          else
          {
            v83 = (_QWORD *)(*v78 + 32 * v79);
          }
          *v83 = &off_1E35986B0;
          v83[1] = v77;
          v83[3] = v83;
          *(_DWORD *)(a2 + 44) = v79 + 1;
        }
        *(_DWORD *)v77 += 4;
      }
      v84 = *(WTF::StringImpl **)(v6 + 96);
      *(_QWORD *)(v6 + 96) = v77;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
          if (!v77)
            goto LABEL_100;
          goto LABEL_98;
        }
        *(_DWORD *)v84 -= 2;
      }
      if (!v77)
        goto LABEL_100;
LABEL_98:
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v77 -= 2;
      }
LABEL_100:
      *(_BYTE *)(v6 + 116) = *(_BYTE *)(v24 + 88);
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      v4 = v234;
      if (v52)
      {
        if (v52[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
          if (v51)
          {
LABEL_107:
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v70, v71, v72, v73, v74, v75, v76);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v51 -= 2;
            }
          }
LABEL_109:
          if (v25)
          {
            a3 = v233;
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, v70, v71, v72, v73, v74, v75, v76);
              WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            a3 = v233;
          }
LABEL_187:
          v236 = v6;
          v237 = v235;
          WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v238, v62, &v237, &v236, v73, v74, v75, v76);
          v177 = (_QWORD *)(a2 + 32);
          v178 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v178 == *(_DWORD *)(a2 + 40))
          {
            v179 = v178 + (v178 >> 2);
            if (v179 >= 0x10)
              v180 = v179 + 1;
            else
              v180 = 16;
            if (v180 <= v178 + 1)
              v181 = v178 + 1;
            else
              v181 = v180;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v177, v181);
            v178 = *(unsigned int *)(a2 + 44);
            v182 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v178);
          }
          else
          {
            v182 = (_QWORD *)(*v177 + 32 * v178);
          }
          *v182 = &off_1E3598790;
          v182[1] = v6;
          v182[3] = v182;
          *(_DWORD *)(a2 + 44) = v178 + 1;
          goto LABEL_197;
        }
        --v52[2];
      }
      if (v51)
        goto LABEL_107;
      goto LABEL_109;
    }
    if (v23 == 2)
    {
      v32 = (uint64_t)&v22[*(_QWORD *)v22];
      JSC::CachedSourceOrigin::decode((uint64_t)&v238, v32, a2);
      LOBYTE(v237) = 0;
      v33 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v32 + 24), a2, &v237);
      if (v33)
      {
        if ((_BYTE)v237)
        {
          v34 = (_QWORD *)(a2 + 32);
          v35 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v35 == *(_DWORD *)(a2 + 40))
          {
            v36 = v35 + (v35 >> 2);
            if (v36 >= 0x10)
              v37 = v36 + 1;
            else
              v37 = 16;
            if (v37 <= v35 + 1)
              v38 = v35 + 1;
            else
              v38 = v37;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v34, v38);
            v35 = *(unsigned int *)(a2 + 44);
            v39 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v35);
          }
          else
          {
            v39 = (_QWORD *)(*v34 + 32 * v35);
          }
          *v39 = &off_1E35986B0;
          v39[1] = v33;
          v39[3] = v39;
          *(_DWORD *)(a2 + 44) = v35 + 1;
        }
        *(_DWORD *)v33 += 2;
      }
      v141 = *(unsigned int *)(v32 + 104);
      if ((_DWORD)v141)
      {
        v142 = WTF::fastMalloc((WTF *)*(unsigned int *)(v32 + 104));
        v143 = v142;
        if (*(_DWORD *)(v32 + 104))
        {
          v144 = 0;
          v145 = v32 + 96 + *(_QWORD *)(v32 + 96);
          while (v141 != v144)
          {
            *(_BYTE *)(v142 + v144) = *(_BYTE *)(v145 + v144);
            if (++v144 >= (unint64_t)*(unsigned int *)(v32 + 104))
              goto LABEL_133;
          }
LABEL_217:
          __break(0xC471u);
          JUMPOUT(0x1988D8990);
        }
      }
      else
      {
        v143 = 0;
      }
LABEL_133:
      if (v33)
        *(_DWORD *)v33 += 2;
      v146 = a3;
      v147 = WTF::fastMalloc((WTF *)0x90);
      v6 = v147;
      *(_DWORD *)(v147 + 8) = 1;
      *(_BYTE *)(v147 + 12) = 2;
      v148 = (WTF::StringImpl *)v238;
      if (v238)
        *(_DWORD *)v238 += 2;
      *(_QWORD *)(v147 + 16) = v148;
      *(_OWORD *)(v147 + 24) = v239;
      *(_OWORD *)(v147 + 40) = v240;
      v149 = v241;
      if (v241)
        ++v241[2];
      *(_QWORD *)(v147 + 56) = v149;
      *(_QWORD *)(v147 + 64) = v33;
      *(_OWORD *)(v147 + 72) = 0u;
      *(_OWORD *)(v147 + 88) = 0u;
      *(_OWORD *)(v147 + 101) = 0u;
      *(_QWORD *)v147 = off_1E3598720;
      v150 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v150 = 0x1400000002;
      *(_QWORD *)(v150 + 8) = "[WebAssembly source]";
      *(_DWORD *)(v150 + 16) = 4;
      *(_QWORD *)(v6 + 120) = v150;
      *(_QWORD *)(v6 + 128) = v143;
      *(_DWORD *)(v6 + 136) = v141;
      *(_DWORD *)(v6 + 140) = v141;
      LOBYTE(v237) = 0;
      v158 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v32 + 56), a2, &v237);
      if (v158)
      {
        if ((_BYTE)v237)
        {
          v159 = (_QWORD *)(a2 + 32);
          v160 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v160 == *(_DWORD *)(a2 + 40))
          {
            v161 = v160 + (v160 >> 2);
            if (v161 >= 0x10)
              v162 = v161 + 1;
            else
              v162 = 16;
            if (v162 <= v160 + 1)
              v163 = v160 + 1;
            else
              v163 = v162;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v159, v163);
            v160 = *(unsigned int *)(a2 + 44);
            v164 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v160);
          }
          else
          {
            v164 = (_QWORD *)(*v159 + 32 * v160);
          }
          *v164 = &off_1E35986B0;
          v164[1] = v158;
          v164[3] = v164;
          *(_DWORD *)(a2 + 44) = v160 + 1;
        }
        *(_DWORD *)v158 += 4;
      }
      v165 = *(WTF::StringImpl **)(v6 + 88);
      *(_QWORD *)(v6 + 88) = v158;
      if (v165)
      {
        if (*(_DWORD *)v165 == 2)
        {
          WTF::StringImpl::~StringImpl(v165, v151, v152, v153, v154, v155, v156, v157);
          WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
          if (!v158)
            goto LABEL_158;
          goto LABEL_156;
        }
        *(_DWORD *)v165 -= 2;
      }
      if (!v158)
        goto LABEL_158;
LABEL_156:
      if (*(_DWORD *)v158 == 2)
      {
        WTF::StringImpl::~StringImpl(v158, v151, v152, v153, v154, v155, v156, v157);
        WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
      }
      else
      {
        *(_DWORD *)v158 -= 2;
      }
LABEL_158:
      LOBYTE(v237) = 0;
      v169 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v32 + 72), a2, &v237);
      if (v169)
      {
        if ((_BYTE)v237)
        {
          v170 = (_QWORD *)(a2 + 32);
          v171 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v171 == *(_DWORD *)(a2 + 40))
          {
            v172 = v171 + (v171 >> 2);
            if (v172 >= 0x10)
              v173 = v172 + 1;
            else
              v173 = 16;
            if (v173 <= v171 + 1)
              v174 = v171 + 1;
            else
              v174 = v173;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v170, v174);
            v171 = *(unsigned int *)(a2 + 44);
            v175 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v171);
          }
          else
          {
            v175 = (_QWORD *)(*v170 + 32 * v171);
          }
          *v175 = &off_1E35986B0;
          v175[1] = v169;
          v175[3] = v175;
          *(_DWORD *)(a2 + 44) = v171 + 1;
        }
        *(_DWORD *)v169 += 4;
      }
      v176 = *(WTF::StringImpl **)(v6 + 96);
      *(_QWORD *)(v6 + 96) = v169;
      if (v176)
      {
        if (*(_DWORD *)v176 == 2)
        {
          WTF::StringImpl::~StringImpl(v176, v166, v167, v168, v73, v74, v75, v76);
          WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
          if (!v169)
            goto LABEL_177;
          goto LABEL_175;
        }
        *(_DWORD *)v176 -= 2;
      }
      if (!v169)
        goto LABEL_177;
LABEL_175:
      if (*(_DWORD *)v169 == 2)
      {
        WTF::StringImpl::~StringImpl(v169, v166, v167, v168, v73, v74, v75, v76);
        WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
      }
      else
      {
        *(_DWORD *)v169 -= 2;
      }
LABEL_177:
      *(_BYTE *)(v6 + 116) = *(_BYTE *)(v32 + 88);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v166, v167, v168, v73, v74, v75, v76);
          WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          if (v149)
          {
LABEL_181:
            if (v149[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 8))(v149);
            else
              --v149[2];
          }
LABEL_183:
          a3 = v146;
          v62 = (uint64_t *)(a2 + 24);
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
            {
              WTF::StringImpl::~StringImpl(v148, v166, v167, v168, v73, v74, v75, v76);
              WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
            }
            else
            {
              *(_DWORD *)v148 -= 2;
            }
          }
          v4 = v234;
          goto LABEL_187;
        }
        *(_DWORD *)v33 -= 2;
      }
      if (v149)
        goto LABEL_181;
      goto LABEL_183;
    }
LABEL_216:
    __break(0xC471u);
    JUMPOUT(0x1988D89BCLL);
  }
  v6 = *(_QWORD *)(v14 + 16 * v19 + 8);
  if (v6)
LABEL_197:
    ++*(_DWORD *)(v6 + 8);
LABEL_198:
  v183 = *(_DWORD **)a3;
  *(_QWORD *)a3 = v6;
  if (v183)
  {
    if (v183[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v183 + 8))(v183);
    else
      --v183[2];
  }
  result = v4[1];
  *(double *)(a3 + 8) = result;
  return result;
}

void JSC::CachedString::decode(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v28 = 0;
  v12 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(a1 + 8), a2, &v28);
  if (v12)
  {
    if (v28)
    {
      v13 = (_QWORD *)(a2 + 32);
      v14 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 40))
      {
        v15 = v14 + (v14 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v13, v17);
        v14 = *(unsigned int *)(a2 + 44);
        v18 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v14);
      }
      else
      {
        v18 = (_QWORD *)(*v13 + 32 * v14);
      }
      *v18 = &off_1E35986B0;
      v18[1] = v12;
      v18[3] = v18;
      *(_DWORD *)(a2 + 44) = v14 + 1;
    }
    *(_DWORD *)v12 += 2;
  }
  v19 = *a3;
  *a3 = v12;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
}

void JSC::CachedSourceOrigin::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51[2];
  __int128 v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;

  v53 = 0;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  LOBYTE(v54) = 0;
  v9 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(a2 + 8), a3, &v54);
  if (v9)
  {
    if ((_BYTE)v54)
    {
      v10 = (_QWORD *)(a3 + 32);
      v11 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v11 == *(_DWORD *)(a3 + 40))
      {
        v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v11 + 1)
          v14 = v11 + 1;
        else
          v14 = v13;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v10, v14);
        v11 = *(unsigned int *)(a3 + 44);
        v15 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * v11);
      }
      else
      {
        v15 = (_QWORD *)(*v10 + 32 * v11);
      }
      *v15 = &off_1E35986B0;
      v15[1] = v9;
      v15[3] = v15;
      *(_DWORD *)(a3 + 44) = v11 + 1;
    }
    *(_DWORD *)v9 += 2;
  }
  v50 = v9;
  WTF::URL::URL((uint64_t)&v54, (uint64_t)v51, &v50, 0, v5, v6, v7, v8);
  v23 = v54;
  if (v54)
  {
    v24 = *(_DWORD *)v54;
    *(_DWORD *)v54 += 2;
    *(_QWORD *)a1 = v23;
    *(_OWORD *)(a1 + 8) = v55;
    *(_OWORD *)(a1 + 24) = v56;
    *(_QWORD *)(a1 + 40) = 0;
    v54 = 0;
    if (v24)
    {
      *(_DWORD *)v23 = v24;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v55;
    *(_OWORD *)(a1 + 24) = v56;
    *(_QWORD *)(a1 + 40) = 0;
    v54 = 0;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v25 = v51[0];
  v51[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void JSC::WebAssemblySourceProvider::~WebAssemblySourceProvider(JSC::WebAssemblySourceProvider *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  JSC::SourceProvider::~SourceProvider(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t JSC::WebAssemblySourceProvider::hash(JSC::WebAssemblySourceProvider *this)
{
  WTF::StringImpl *v1;
  unsigned int v2;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  v2 = *((_DWORD *)v1 + 4);
  if (v2 < 0x100)
    return WTF::StringImpl::hashSlowCase(v1);
  else
    return v2 >> 8;
}

uint64_t JSC::WebAssemblySourceProvider::source(JSC::WebAssemblySourceProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t JSC::WebAssemblySourceProvider::data(JSC::WebAssemblySourceProvider *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t JSC::WebAssemblySourceProvider::size(JSC::WebAssemblySourceProvider *this)
{
  return *((unsigned int *)this + 35);
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3598790;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3598790;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedSourceProvider,JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void JSC::CachedVariableEnvironment::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl ***v65;
  WTF::StringImpl **v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  *(_BYTE *)(a3 + 8) = *(_BYTE *)a1;
  v6 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v6)
    goto LABEL_49;
  if (v6 >> 29)
    goto LABEL_67;
  v7 = WTF::fastMalloc((WTF *)(8 * v6));
  v14 = v7;
  v15 = (unsigned int *)(v7 + 8 * v6);
  v16 = v7;
  do
  {
    *(_BYTE *)(v16 + 4) = 0;
    *(_DWORD *)v16 = 0;
    *(_WORD *)(v16 + 6) = 0;
    v16 += 8;
  }
  while ((unsigned int *)v16 != v15);
  v17 = (unsigned int *)v7;
  if (*(_DWORD *)(a1 + 24))
  {
    v18 = 0;
    v19 = a1 + 16 + *(_QWORD *)(a1 + 16);
    v20 = v7;
    do
    {
      if (v6 == v18)
      {
        __break(0xC471u);
        JUMPOUT(0x1988D917CLL);
      }
      JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode((_QWORD *)v19, a2, (unsigned int *)v20);
      *(_WORD *)(v20 + 6) = *(_WORD *)(v19 + 8);
      ++v18;
      v20 += 8;
      v19 += 16;
    }
    while (v18 < *(unsigned int *)(a1 + 24));
    v17 = (unsigned int *)v14;
  }
  do
  {
    v31 = (WTF::StringImpl *)(*v17 | ((unint64_t)*((unsigned __int8 *)v17 + 4) << 32));
    if (v31)
      *(_DWORD *)v31 += 2;
    v32 = *(_QWORD *)a3;
    if (*(_QWORD *)a3
      || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand((uint64_t *)a3, 0), (v32 = *(_QWORD *)a3) != 0))
    {
      v30 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      v30 = 0;
    }
    v33 = *((_DWORD *)v31 + 4);
    if ((v33 & 0x20) != 0)
      v33 = *((_DWORD *)v31 + 8);
    v34 = v30 & (v33 >> 8);
    v29 = (WTF::AtomStringImpl *)(v32 + 16 * v34);
    v35 = *(WTF::StringImpl **)v29;
    if (*(_QWORD *)v29)
    {
      v36 = 0;
      v37 = 1;
      while (v35 != v31)
      {
        if (v35 == (WTF::StringImpl *)-1)
          v36 = v29;
        v34 = (v34 + v37) & v30;
        v29 = (WTF::AtomStringImpl *)(v32 + 16 * v34);
        v35 = *(WTF::StringImpl **)v29;
        ++v37;
        if (!*(_QWORD *)v29)
        {
          if (v36)
          {
            *(_QWORD *)v36 = 0;
            *((_WORD *)v36 + 4) = 0;
            --*(_DWORD *)(*(_QWORD *)a3 - 16);
            v29 = v36;
          }
          goto LABEL_29;
        }
      }
      *((_WORD *)v29 + 4) = *((_WORD *)v17 + 3);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v29, v8, v9, v10, v11, v12, v13);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    else
    {
LABEL_29:
      *(_QWORD *)v29 = v31;
      *((_WORD *)v29 + 4) = *((_WORD *)v17 + 3);
      v38 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        v39 = *(_DWORD *)(v38 - 12) + 1;
      else
        v39 = 1;
      *(_DWORD *)(v38 - 12) = v39;
      v40 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        v41 = *(_DWORD *)(v40 - 12);
      else
        v41 = 0;
      v42 = (*(_DWORD *)(v40 - 16) + v41);
      v43 = *(unsigned int *)(v40 - 4);
      if (v43 <= 0x400)
      {
        if (3 * v43 > 4 * v42)
          goto LABEL_41;
LABEL_40:
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand((uint64_t *)a3, (WTF::StringImpl **)v29);
        goto LABEL_41;
      }
      if (v43 <= 2 * v42)
        goto LABEL_40;
    }
LABEL_41:
    v17 += 2;
  }
  while (v17 != v15);
  v44 = 0;
  do
  {
    v45 = v14 + v44;
    v46 = (WTF::StringImpl *)(*(unsigned int *)(v14 + v44) | ((unint64_t)*(unsigned __int8 *)(v14 + v44 + 4) << 32));
    *(_DWORD *)v45 = 0;
    *(_BYTE *)(v45 + 4) = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v29, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    v44 += 8;
  }
  while (8 * v6 != v44);
  WTF::fastFree(v14, v29, v8, v9, v10, v11, v12, v13);
LABEL_49:
  v56 = *(_QWORD *)(a1 + 32);
  v55 = (_QWORD *)(a1 + 32);
  if (v56 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v57 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v57 = 0;
    v65 = *(WTF::StringImpl ****)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v57;
    if (v65)
    {
      v66 = *v65;
      if (*v65)
      {
        v67 = *((unsigned int *)v66 - 1);
        if ((_DWORD)v67)
        {
          v68 = *v65;
          do
          {
            v69 = *v68;
            if (*v68 != (WTF::StringImpl *)-1)
            {
              *v68 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                {
                  WTF::StringImpl::~StringImpl(v69, v58, v59, v60, v61, v62, v63, v64);
                  WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
                }
                else
                {
                  *(_DWORD *)v69 -= 2;
                }
              }
            }
            v68 += 2;
            --v67;
          }
          while (v67);
        }
        WTF::fastFree((unint64_t)(v66 - 2), v58, v59, v60, v61, v62, v63, v64);
      }
      WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
    }
    if (*v55 != 0x7FFFFFFFFFFFFFFFLL)
    {
      JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::decode((uint64_t)v55 + *v55, a2, *(uint64_t **)(a3 + 16));
      return;
    }
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1988D9174);
  }
}

int *JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;
  char *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  int *v91;
  WTF::StringImpl *v92;

  v4 = *a1;
  if (*a1 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = a2[2];
    v8 = *(unsigned int *)(v7 + 32);
    if ((_DWORD)v8 == -1
      || (*(_QWORD *)&v90 = &v92,
          v10 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v90, v7 + 16), v11 = *(unsigned int *)(v7 + 32), (_DWORD)v11 == -1))
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_68;
    }
    v12 = v10;
    *(_QWORD *)&v90 = &v92;
    ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v90, v7 + 16);
    v18 = (WTF::StringImpl *)((char *)a1 + v4 - v12);
    v20 = a2 + 3;
    v19 = a2[3];
    if (v19)
    {
      v21 = *(_DWORD *)(v19 - 8);
      v22 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = *(WTF::StringImpl **)(v19 + 16 * v25);
      if (v26 != v18)
      {
        v27 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v27) & v21;
          v26 = *(WTF::StringImpl **)(v19 + 16 * v25);
          ++v27;
          if (v26 == v18)
            goto LABEL_12;
        }
        v25 = *(unsigned int *)(v19 - 4);
      }
LABEL_12:
      if (v25 != *(_DWORD *)(v19 - 4))
      {
        v5 = *(int **)(v19 + 16 * v25 + 8);
        goto LABEL_19;
      }
    }
    *a3 = 1;
    v28 = *a1;
    if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(0xC471u);
      JUMPOUT(0x1988D9608);
    }
    v29 = (char *)a1 + v28;
    v30 = *(unsigned int *)((char *)a1 + v28 + 12);
    v31 = *((_BYTE *)a1 + v28 + 8);
    if (!(_DWORD)v30)
    {
      if ((v31 & 2) != 0)
      {
        v5 = (int *)WTF::fastCompactMalloc((WTF *)0x30);
        v34 = off_1ECF2C428;
        v35 = dword_1ECF2C424;
        *v5 = 2;
        v5[1] = v35;
        *((_QWORD *)v5 + 1) = v34;
        v5[4] = 38;
        *((_QWORD *)v5 + 3) = &WTF::StringImpl::s_emptyAtomString;
        WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                       + 256) | 0x80000000;
        v5[8] = WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol;
        v5[9] = 1;
        goto LABEL_59;
      }
      v5 = &WTF::StringImpl::s_emptyAtomString;
      v33 = WTF::StringImpl::s_emptyAtomString + 2;
LABEL_58:
      *v5 = v33;
      goto LABEL_59;
    }
    v32 = &v29[*(_QWORD *)v29];
    if ((v31 & 1) == 0)
    {
      if ((v31 & 2) == 0)
      {
        WTF::AtomStringImpl::add((uint64_t)&v29[*(_QWORD *)v29], v30, v13, v14, v15, v16, v17, &v90);
LABEL_24:
        v5 = (int *)v90;
LABEL_59:
        v91 = v5;
        v92 = v18;
        WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v90, v20, (uint64_t *)&v92, (uint64_t *)&v91, v14, v15, v16, v17);
        return v5;
      }
      v36 = a2[1];
      if ((v31 & 0x10) == 0)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 41952) + 48);
        v38 = (unint64_t)&v29[*(_QWORD *)v29];
        if ((v31 & 4) != 0)
          v39 = JSC::BuiltinNames::lookUpWellKnownSymbol(v37, v38, v30);
        else
          v39 = JSC::BuiltinNames::lookUpPrivateName(v37, v38, v30);
        v5 = (int *)v39;
        if (!v39)
        {
LABEL_69:
          __break(0xC471u);
          JUMPOUT(0x1988D951CLL);
        }
        goto LABEL_57;
      }
      if (v30 < 0x7FFFFFF0)
      {
        v53 = WTF::fastCompactMalloc((WTF *)(2 * v30 + 20));
        v54 = (_WORD *)(v53 + 20);
        *(_DWORD *)v53 = 2;
        *(_DWORD *)(v53 + 4) = v30;
        *(_QWORD *)(v53 + 8) = v53 + 20;
        *(_DWORD *)(v53 + 16) = 0;
        if ((_DWORD)v30 == 1)
          *v54 = *(_WORD *)v32;
        else
          memcpy(v54, v32, 2 * v30);
        *(_QWORD *)&v90 = v53;
        if ((v29[8] & 0x20) != 0)
          v63 = 41936;
        else
          v63 = 41920;
        WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(v36 + v63), (WTF::StringImpl **)&v90, v47, v48, v49, v50, v51, v52, &v92);
        v5 = (int *)v92;
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v53, v40, v41, v42, v14, v15, v16, v17);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
          if (!v5)
            goto LABEL_69;
        }
        else
        {
          *(_DWORD *)v53 -= 2;
          if (!v5)
            goto LABEL_69;
        }
        goto LABEL_57;
      }
LABEL_68:
      __break(0xC471u);
      JUMPOUT(0x1988D9614);
    }
    if ((v31 & 2) == 0)
    {
      WTF::AtomStringImpl::add((uint64_t)&v29[*(_QWORD *)v29], v30, v13, v14, v15, v16, v17, &v90);
      goto LABEL_24;
    }
    v43 = a2[1];
    if ((v31 & 0x10) != 0)
    {
      if ((v30 & 0x80000000) != 0)
        goto LABEL_69;
      v61 = WTF::fastCompactMalloc((WTF *)(v30 + 20));
      v62 = (char *)(v61 + 20);
      *(_DWORD *)v61 = 2;
      *(_DWORD *)(v61 + 4) = v30;
      *(_QWORD *)(v61 + 8) = v61 + 20;
      *(_DWORD *)(v61 + 16) = 4;
      if ((_DWORD)v30 == 1)
        *v62 = *v32;
      else
        memcpy(v62, v32, v30);
      *(_QWORD *)&v90 = v61;
      if ((v29[8] & 0x20) != 0)
        v64 = 41936;
      else
        v64 = 41920;
      WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(v43 + v64), (WTF::StringImpl **)&v90, v55, v56, v57, v58, v59, v60, &v92);
      v5 = (int *)v92;
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v61, v40, v41, v42, v14, v15, v16, v17);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        if (!v5)
          goto LABEL_65;
      }
      else
      {
        *(_DWORD *)v61 -= 2;
        if (!v5)
          goto LABEL_65;
      }
    }
    else
    {
      v44 = *(_QWORD *)(*(_QWORD *)(v43 + 41952) + 48);
      v45 = (unint64_t)&v29[*(_QWORD *)v29];
      if ((v31 & 4) != 0)
        v46 = JSC::BuiltinNames::lookUpWellKnownSymbol(v44, v45, v30);
      else
        v46 = JSC::BuiltinNames::lookUpPrivateName(v44, v45, v30);
      v5 = (int *)v46;
      if (!v46)
      {
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x1988D95E8);
      }
    }
LABEL_57:
    v33 = *v5;
    *v5 += 2;
    if (!v33)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v5, v40, v41, v42, v14, v15, v16, v17);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  v5 = 0;
LABEL_19:
  *a3 = 0;
  return v5;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E35987D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E35987D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedStringImpl,WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)(a1 + 8);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

int16x8_t JSC::CachedMetadataTable::decode(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int16x8_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int16x8_t *v22;
  int16x8_t v23;
  int16x8_t v24;

  if (*(_BYTE *)a2)
  {
    v4 = *(unsigned __int8 *)(a2 + 1);
    v5 = *(unsigned int *)(a2 + 4);
    v6 = *(unsigned int *)(a2 + 196);
    v7 = WTF::fastMalloc((WTF *)0x18);
    v15 = v7;
    *(_DWORD *)v7 = 1;
    if (v4)
      v16 = 41;
    else
      v16 = 33;
    *(_BYTE *)(v7 + 4) = *(_BYTE *)(v7 + 4) & 0xC0 | v16;
    *(_DWORD *)(v7 + 8) = v5;
    v17 = WTF::fastZeroedMalloc(v6 + 16 * v5 + 16, v8, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)(v15 + 16) = v17;
    *a1 = v15;
    v19 = *(_BYTE *)(v15 + 4) & 0xF9 | 2;
    *(_BYTE *)(v15 + 4) = v19;
    *(_BYTE *)(v15 + 4) = v19 & 0xFE | *(_BYTE *)a2;
    v20 = *(unsigned int *)(a2 + 4);
    *(_DWORD *)(v15 + 8) = v20;
    if (*(_BYTE *)(a2 + 1))
    {
      *(_DWORD *)(v17 + 112 + 16 * v20 + 188) = *(_DWORD *)(a2 + 196);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 184) = *(_DWORD *)(a2 + 192);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 180) = *(_DWORD *)(a2 + 188);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 176) = *(_DWORD *)(a2 + 184);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 172) = *(_DWORD *)(a2 + 180);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 168) = *(_DWORD *)(a2 + 176);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 164) = *(_DWORD *)(a2 + 172);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 160) = *(_DWORD *)(a2 + 168);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 156) = *(_DWORD *)(a2 + 164);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 152) = *(_DWORD *)(a2 + 160);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 148) = *(_DWORD *)(a2 + 156);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 144) = *(_DWORD *)(a2 + 152);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 140) = *(_DWORD *)(a2 + 148);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 136) = *(_DWORD *)(a2 + 144);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 132) = *(_DWORD *)(a2 + 140);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 128) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 124) = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 120) = *(_DWORD *)(a2 + 128);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 116) = *(_DWORD *)(a2 + 124);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 112) = *(_DWORD *)(a2 + 120);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 108) = *(_DWORD *)(a2 + 116);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 104) = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 100) = *(_DWORD *)(a2 + 108);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 96) = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 92) = *(_DWORD *)(a2 + 100);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 88) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 84) = *(_DWORD *)(a2 + 92);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 80) = *(_DWORD *)(a2 + 88);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 76) = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 72) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 68) = *(_DWORD *)(a2 + 76);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 64) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 60) = *(_DWORD *)(a2 + 68);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 56) = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 52) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 48) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 44) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 40) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 36) = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 32) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 28) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 24) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 20) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 16) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 12) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8) + 4) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(v17 + 112 + 16 * *(unsigned int *)(v15 + 8)) = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v22 = (int16x8_t *)(v17 + 16 * v20);
      v23 = vuzp1q_s16(*(int16x8_t *)(a2 + 168), *(int16x8_t *)(a2 + 184));
      v22[5] = vuzp1q_s16(*(int16x8_t *)(a2 + 136), *(int16x8_t *)(a2 + 152));
      v22[6] = v23;
      v24 = vuzp1q_s16(*(int16x8_t *)(a2 + 104), *(int16x8_t *)(a2 + 120));
      v22[3] = vuzp1q_s16(*(int16x8_t *)(a2 + 72), *(int16x8_t *)(a2 + 88));
      v22[4] = v24;
      result = vuzp1q_s16(*(int16x8_t *)(a2 + 40), *(int16x8_t *)(a2 + 56));
      v22[1] = vuzp1q_s16(*(int16x8_t *)(a2 + 8), *(int16x8_t *)(a2 + 24));
      v22[2] = result;
    }
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = *(_BYTE *)(v21 + 4) & 0xC0 | 0x22;
    *(_DWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *a1 = v21;
  }
  return result;
}

uint64_t JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::decode<>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 != -1)
  {
    *(_QWORD *)&v37 = &v39;
    v10 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v37, v7 + 16);
    v11 = *(unsigned int *)(v7 + 32);
    if ((_DWORD)v11 != -1)
    {
      v12 = v10;
      *(_QWORD *)&v37 = &v39;
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v37, v7 + 16);
      v13 = (uint64_t)a1 + v4 - v12;
      v16 = *(_QWORD *)(a2 + 24);
      v15 = (uint64_t *)(a2 + 24);
      v14 = v16;
      if (!v16)
        goto LABEL_13;
      v17 = *(_DWORD *)(v14 - 8);
      v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = *(_QWORD *)(v14 + 16 * v21);
      if (v22 != v13)
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v17;
          v22 = *(_QWORD *)(v14 + 16 * v21);
          ++v23;
          if (v22 == v13)
            goto LABEL_12;
        }
        v21 = *(unsigned int *)(v14 - 4);
      }
LABEL_12:
      if (v21 == *(_DWORD *)(v14 - 4))
      {
LABEL_13:
        *a3 = 1;
        v24 = *a1;
        if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1988D9D18);
        }
        v25 = (char *)a1 + v24;
        v26 = *(_DWORD *)((char *)a1 + v24 + 8);
        if (v26)
        {
          v27 = WTF::fastMalloc((WTF *)*(unsigned int *)((char *)a1 + v24 + 8));
          v28 = v27;
          if (*((_DWORD *)v25 + 2))
          {
            v29 = 0;
            v30 = &v25[*(_QWORD *)v25];
            do
            {
              *(_BYTE *)(v27 + v29) = v30[v29];
              ++v29;
            }
            while (v29 < *((unsigned int *)v25 + 2));
          }
        }
        else
        {
          v28 = 0;
        }
        v5 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v5 = v28;
        *(_DWORD *)(v5 + 8) = v26;
        *(_DWORD *)(v5 + 12) = v26;
        v38 = v5;
        v39 = v13;
        WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v37, v15, &v39, &v38, v31, v32, v33, v34);
        return v5;
      }
      v5 = *(_QWORD *)(v14 + 16 * v21 + 8);
LABEL_20:
      *a3 = 0;
      return v5;
    }
  }
  v36 = std::__throw_bad_variant_access[abi:sn180100]();
  return JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::decode<>(v36);
}

unint64_t *JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::decode<>(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  unint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int *v52;
  char *v53;
  unsigned int *v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  unint64_t v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  const WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  WTF *v105;
  int *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  WTF *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  unsigned int v145;
  unsigned int v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  WTF::StringImpl *v151;
  unsigned int v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  _DWORD *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int *v205;
  _DWORD *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  _DWORD *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unsigned int *v227;
  unint64_t v228;
  unsigned int *v229;
  uint64_t v230;
  unint64_t v231;
  unsigned int *v232;
  unsigned int *v233;
  uint64_t v234;
  _DWORD *v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  uint64_t v240;
  WTF::StringImpl ***v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int *v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  WTF::AtomStringImpl *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  WTF::StringImpl *v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  int v277;
  _DWORD *v278;
  unsigned int v279;
  unsigned int v280;
  _QWORD *v281;
  _DWORD *v282;
  _QWORD *v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  WTF *v292;
  WTF::StringImpl *v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  WTF::StringImpl ***v303;
  WTF::StringImpl **v304;
  uint64_t v305;
  WTF::StringImpl **v306;
  WTF::StringImpl *v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  _QWORD *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int *v323;
  uint64_t v324;
  unint64_t *v325;
  _QWORD *v326;
  WTF *v327;
  uint64_t v328;
  WTF *v329;
  WTF *v330;
  uint64_t v331;
  WTF *v332;
  _QWORD *v333;
  __int128 v334;
  unsigned int **v335;
  uint64_t v336[2];

  v4 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    result = 0;
LABEL_57:
    *a3 = 0;
    return result;
  }
  v6 = a2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 == -1
    || (*(_QWORD *)&v334 = v336,
        v10 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v334, v7 + 16), v11 = *(unsigned int *)(v7 + 32), (_DWORD)v11 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_291;
  }
  v12 = v10;
  *(_QWORD *)&v334 = v336;
  ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v334, v7 + 16);
  v13 = (uint64_t)a1 + v4 - v12;
  v14 = *(_QWORD *)(v6 + 24);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(_QWORD *)(v14 + 16 * v19);
    if (v20 != v13)
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(_QWORD *)(v14 + 16 * v19);
        ++v21;
        if (v20 == v13)
          goto LABEL_12;
      }
      v19 = *(unsigned int *)(v14 - 4);
    }
LABEL_12:
    if (v19 != *(_DWORD *)(v14 - 4))
    {
      result = *(unint64_t **)(v14 + 16 * v19 + 8);
      goto LABEL_57;
    }
  }
  *a3 = 1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(0xC471u);
    JUMPOUT(0x1988DAE90);
  }
  v318 = *a1;
  v319 = a1;
  v22 = (unsigned int *)((char *)a1 + *a1);
  v27 = (unsigned int **)WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  *((_OWORD *)v27 + 2) = 0u;
  v27[6] = 0;
  *((_BYTE *)v27 + 56) &= 0xFCu;
  v28 = v22[2];
  v325 = (unint64_t *)v27;
  if ((_DWORD)v28)
  {
    v29 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v28) | 4));
    v27 = (unsigned int **)v325;
    v33 = v29;
    *v29 = v28;
    v34 = *v325;
    *v325 = (unint64_t)v33;
    if (v34)
    {
      WTF::fastFree(v34, v30, v31, v32, v23, v24, v25, v26);
      v27 = (unsigned int **)v325;
    }
    if (v22[2])
    {
      v35 = 0;
      v36 = 0;
      v37 = (char *)v22 + *(_QWORD *)v22;
      do
      {
        if (v36 >= **v27)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DADD0);
        }
        *(_OWORD *)&(*v27)[v35 + 1] = *(_OWORD *)&v37[v35 * 4];
        ++v36;
        v35 += 4;
      }
      while (v36 < v22[2]);
    }
  }
  v316 = v13;
  v317 = (uint64_t *)(v6 + 24);
  v38 = v22[6];
  v331 = v6;
  v323 = v22;
  if ((_DWORD)v38)
  {
    v39 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v22[6]) | 8));
    *v39 = v38;
    bzero(v39 + 2, 16 * v38);
    v27 = (unsigned int **)v325;
    v43 = (unsigned int *)v325[1];
    v325[1] = (unint64_t)v39;
    if (v43)
    {
      v45 = (unint64_t *)(v43 + 2);
      v44 = *v43;
      if ((_DWORD)v44)
      {
        v46 = 16 * v44;
        do
        {
          v47 = *v45;
          *v45 = 0;
          if (v47)
            WTF::fastFree(v47, v40, v41, v42, v23, v24, v25, v26);
          v45 += 2;
          v46 -= 16;
        }
        while (v46);
      }
      WTF::fastFree((unint64_t)v43, v40, v41, v42, v23, v24, v25, v26);
      v27 = (unsigned int **)v325;
    }
    if (v22[6])
    {
      v48 = 0;
      v49 = *((_QWORD *)v22 + 2);
      v50 = (char *)v22 + v49 + 16;
      v51 = (uint64_t)v319 + v49 + v318 + 24;
      while (1)
      {
        v52 = v27[1];
        if (v48 >= *v52)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DAE70);
        }
        v53 = &v50[24 * v48];
        v54 = &v52[4 * v48];
        v55 = v53 + 8;
        v54[4] = *(_DWORD *)v53;
        v58 = *((_DWORD *)v53 + 4);
        v56 = v53 + 16;
        v57 = v58;
        if (v58)
        {
          v59 = (unint64_t *)(v54 + 2);
          v63 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v57 + 4));
          *v63 = v57;
          v64 = *v59;
          *v59 = (unint64_t)v63;
          if (v64)
            WTF::fastFree(v64, v60, v61, v62, v23, v24, v25, v26);
          v27 = (unsigned int **)v325;
          if (*v56)
            break;
        }
LABEL_39:
        ++v48;
        v22 = v323;
        v51 += 24;
        v6 = v331;
        if (v48 >= v323[6])
          goto LABEL_40;
      }
      v65 = 0;
      v66 = *v59 + 4;
      v67 = *(unsigned int *)*v59;
      v68 = v51 + *v55;
      while (v67 != v65)
      {
        *(_DWORD *)(v66 + 4 * v65) = *(_DWORD *)(v68 + 4 * v65);
        if (++v65 >= (unint64_t)*v56)
          goto LABEL_39;
      }
LABEL_296:
      __break(0xC471u);
      JUMPOUT(0x1988DADB0);
    }
  }
LABEL_40:
  v69 = v22[10];
  if ((_DWORD)v69)
  {
    v70 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v69 + 8));
    *v70 = v69;
    bzero(v70 + 2, 24 * ((24 * v69 - 24) / 0x18uLL) + 24);
    v27 = (unsigned int **)v325;
    v74 = (_DWORD *)v325[2];
    v325[2] = (unint64_t)v70;
    if (v74)
    {
      v75 = v74 + 2;
      if (*v74)
      {
        v76 = &v75[6 * *v74];
        do
        {
          v77 = *(_QWORD *)v75;
          if (*(_QWORD *)v75)
          {
            v78 = v75[2];
            if ((_DWORD)v78)
            {
              v79 = *(WTF::StringImpl ***)v75;
              do
              {
                v80 = *v79;
                *v79 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v80, v71, v72, v73, v23, v24, v25, v26);
                    WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
                  }
                  else
                  {
                    *(_DWORD *)v80 -= 2;
                  }
                }
                v79 += 2;
                --v78;
              }
              while (v78);
            }
            WTF::fastFree(v77, v71, v72, v73, v23, v24, v25, v26);
          }
          v75 += 6;
        }
        while (v75 != v76);
      }
      WTF::fastFree((unint64_t)v74, v71, v72, v73, v23, v24, v25, v26);
      v27 = (unsigned int **)v325;
    }
    v89 = v22[10];
    if ((_DWORD)v89)
    {
      v90 = 0;
      v91 = *((_QWORD *)v22 + 4);
      v320 = (char *)v22 + v91 + 32;
      v326 = (_QWORD *)(v6 + 32);
      v324 = (uint64_t)v319 + v91 + v318 + 40;
      do
      {
        v92 = v27[2];
        if (v90 >= *v92)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DADF0);
        }
        v93 = 3 * v90;
        v94 = &v320[24 * v90];
        v95 = *((unsigned int *)v94 + 4);
        if ((_DWORD)v95)
        {
          v322 = v90;
          if (v95 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1988DAEB4);
          }
          v329 = (WTF *)WTF::fastMalloc((WTF *)(16 * v95));
          v321 = 16 * v95;
          bzero(v329, 16 * v95);
          if (*((_DWORD *)v94 + 4))
          {
            v103 = 0;
            v104 = (_QWORD *)(v324 + *((_QWORD *)v94 + 1));
            v105 = v329;
            while (v95 != v103)
            {
              LOBYTE(v334) = 0;
              v106 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>(v104, (_QWORD *)v6, &v334);
              if (v106)
              {
                if ((_BYTE)v334)
                {
                  v107 = *(unsigned int *)(v6 + 44);
                  if ((_DWORD)v107 == *(_DWORD *)(v6 + 40))
                  {
                    v108 = v107 + (v107 >> 2);
                    if (v108 >= 0x10)
                      v109 = v108 + 1;
                    else
                      v109 = 16;
                    if (v109 <= v107 + 1)
                      v110 = v107 + 1;
                    else
                      v110 = v109;
                    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v326, v110);
                    v107 = *(unsigned int *)(v6 + 44);
                    v111 = (_QWORD *)(*(_QWORD *)(v6 + 32) + 32 * v107);
                  }
                  else
                  {
                    v111 = (_QWORD *)(*v326 + 32 * v107);
                  }
                  *v111 = &off_1E35987D8;
                  v111[1] = v106;
                  v111[3] = v111;
                  *(_DWORD *)(v6 + 44) = v107 + 1;
                }
                *v106 += 2;
              }
              v112 = *(WTF::StringImpl **)v105;
              *(_QWORD *)v105 = v106;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                {
                  WTF::StringImpl::~StringImpl(v112, v96, (uint64_t)v97, v98, v99, v100, v101, v102);
                  WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                }
                else
                {
                  *(_DWORD *)v112 -= 2;
                }
              }
              *((_QWORD *)v105 + 1) = v104[1];
              ++v103;
              v105 = (WTF *)((char *)v105 + 16);
              v104 += 2;
              if (v103 >= *((unsigned int *)v94 + 4))
                goto LABEL_86;
            }
LABEL_291:
            __break(0xC471u);
            JUMPOUT(0x1988DAE9CLL);
          }
LABEL_86:
          v121 = (uint64_t)&v92[2 * v93 + 2];
          v327 = (WTF *)((char *)v329 + 16 * v95);
          v332 = v329;
          do
          {
            v123 = *(_DWORD *)(v121 + 8);
            v122 = *(unsigned int *)(v121 + 12);
            if (20 * v122 >= 19 * (unint64_t)v123 || *(_BYTE *)(v121 + 20) && v123 <= 2 * (int)v122)
            {
              if (v123)
                v152 = 2 * v123;
              else
                v152 = 8;
              WTF::RobinHoodHashTable<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation>>,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>,JSC::UnlinkedStringJumpTable::OffsetLocation,WTF::DefaultHash<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::HashTraits<JSC::UnlinkedStringJumpTable::OffsetLocation>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(v121, v152);
              v123 = *(_DWORD *)(v121 + 8);
            }
            v124 = *(_DWORD *)(v121 + 16);
            v125 = *(_DWORD *)(*(_QWORD *)v332 + 16);
            if (v125 < 0x100)
              v126 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v332);
            else
              v126 = v125 >> 8;
            v127 = v123 - 1;
            v128 = (v126 ^ v124) & (v123 - 1);
            v129 = *(_QWORD *)v121;
            v130 = *(_QWORD *)v121 + 16 * v128;
            v131 = *(WTF **)v130;
            if (*(_QWORD *)v130)
            {
              v132 = 0;
              while (1)
              {
                v133 = *((_DWORD *)v131 + 4);
                v134 = v133 < 0x100 ? WTF::StringImpl::hashSlowCase(v131) : v133 >> 8;
                v135 = (v128 + v123 - ((v134 ^ v124) & v127)) & v127;
                if (v132 > v135)
                  break;
                if (v134 == v126 && WTF::equal(*(WTF **)v130, *(const WTF::StringImpl **)v332, v97))
                {
                  v6 = v331;
                  *(_QWORD *)(v130 + 8) = *((_QWORD *)v332 + 1);
                  goto LABEL_120;
                }
                v129 = *(_QWORD *)v121;
                v128 = ((_DWORD)v128 + 1) & v127;
                ++v132;
                v130 = *(_QWORD *)v121 + 16 * v128;
                v131 = *(WTF **)v130;
                if (!*(_QWORD *)v130)
                {
                  if (v132 >= 0x80)
                    *(_BYTE *)(v121 + 20) = 1;
                  v6 = v331;
                  goto LABEL_116;
                }
              }
              if (v132 >= 0x80)
                *(_BYTE *)(v121 + 20) = 1;
              v136 = *(WTF **)v130;
              *(_QWORD *)v130 = 0;
              v137 = v129 + 16 * v128;
              v140 = *(_QWORD *)(v137 + 8);
              v138 = (_QWORD *)(v137 + 8);
              v139 = v140;
              *(_QWORD *)v130 = 0;
              *(_QWORD *)(v130 + 8) = 0;
              v6 = v331;
              v141 = *(WTF::StringImpl **)v332;
              if (*(_QWORD *)v332)
                *(_DWORD *)v141 += 2;
              *(_QWORD *)v130 = v141;
              *v138 = *((_QWORD *)v332 + 1);
              while (1)
              {
                v128 = ((_DWORD)v128 + 1) & v127;
                v142 = *(_QWORD *)v121;
                v143 = *(_QWORD *)v121 + 16 * v128;
                v144 = *(WTF::StringImpl **)v143;
                if (!*(_QWORD *)v143)
                  break;
                v145 = *((_DWORD *)v144 + 4);
                if (v145 < 0x100)
                {
                  v150 = v136;
                  v146 = WTF::StringImpl::hashSlowCase(v144);
                  v136 = v150;
                  v6 = v331;
                }
                else
                {
                  v146 = v145 >> 8;
                }
                if (++v135 > (((_DWORD)v128 + v123 - ((v146 ^ v124) & v127)) & v127))
                {
                  v147 = *(WTF **)v143;
                  *(_QWORD *)v143 = 0;
                  v148 = v142 + 16 * v128;
                  v149 = *(_QWORD *)(v148 + 8);
                  *(_QWORD *)v143 = v136;
                  *(_QWORD *)(v148 + 8) = v139;
                  v139 = v149;
                  v136 = v147;
                  v135 = (v128 + v123 - ((v146 ^ v124) & v127)) & v127;
                }
              }
              *(_QWORD *)v143 = v136;
              *(_QWORD *)(v143 + 8) = v139;
            }
            else
            {
LABEL_116:
              v151 = *(WTF::StringImpl **)v332;
              if (*(_QWORD *)v332)
                *(_DWORD *)v151 += 2;
              *(_QWORD *)v130 = v151;
              *(_QWORD *)(v129 + 16 * v128 + 8) = *((_QWORD *)v332 + 1);
            }
            ++*(_DWORD *)(v121 + 12);
LABEL_120:
            v332 = (WTF *)((char *)v332 + 16);
          }
          while (v332 != v327);
          v153 = 0;
          v22 = v323;
          do
          {
            v154 = *(WTF::StringImpl **)((char *)v329 + v153);
            *(_QWORD *)((char *)v329 + v153) = 0;
            if (v154)
            {
              if (*(_DWORD *)v154 == 2)
              {
                WTF::StringImpl::~StringImpl(v154, v96, (uint64_t)v97, v98, v99, v100, v101, v102);
                WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
              }
              else
              {
                *(_DWORD *)v154 -= 2;
              }
            }
            v153 += 16;
          }
          while (v321 != v153);
          WTF::fastFree((unint64_t)v329, v96, (uint64_t)v97, v98, v99, v100, v101, v102);
          v89 = v323[10];
          v27 = (unsigned int **)v325;
          v90 = v322;
        }
        ++v90;
        v324 += 24;
      }
      while (v90 < v89);
    }
  }
  v163 = v22[16];
  if (!(_DWORD)v163)
    goto LABEL_172;
  if (v163 >= 0x15555556)
    goto LABEL_296;
  v164 = WTF::fastMalloc((WTF *)(12 * v163));
  v171 = v164;
  if (v22[16])
  {
    v172 = 0;
    v173 = (_QWORD *)(v164 + 4);
    v174 = (_QWORD *)((char *)v319 + *((_QWORD *)v22 + 7) + v318 + 60);
    do
    {
      if (v163 == v172)
      {
        __break(0xC471u);
        JUMPOUT(0x1988DAEACLL);
      }
      *((_DWORD *)v173 - 1) = *((_DWORD *)v174 - 1);
      v175 = *v174;
      v174 = (_QWORD *)((char *)v174 + 12);
      *v173 = v175;
      v173 = (_QWORD *)((char *)v173 + 12);
      ++v172;
    }
    while (v172 < v22[16]);
  }
  v176 = (uint64_t *)(v325 + 3);
  v177 = v164 + 12 * v163;
  v178 = v164;
  do
  {
    v179 = *v176;
    if (*v176
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v176, 8u, 0), (v179 = *v176) != 0))
    {
      v180 = *(_DWORD *)(v179 - 8);
    }
    else
    {
      v180 = 0;
    }
    v181 = *(_DWORD *)v178;
    v182 = 9 * ((v181 + ~(v181 << 15)) ^ ((v181 + ~(v181 << 15)) >> 10));
    v183 = (v182 ^ (v182 >> 6)) + ~((v182 ^ (v182 >> 6)) << 11);
    v184 = (v183 ^ HIWORD(v183)) & v180;
    v185 = v179 + 12 * v184;
    v186 = *(_DWORD *)v185;
    if (*(_DWORD *)v185)
    {
      v187 = 0;
      v188 = 1;
      do
      {
        if (v186 == v181)
        {
          *(_QWORD *)(v185 + 4) = *(_QWORD *)(v178 + 4);
          goto LABEL_166;
        }
        if (v186 == -1)
          v187 = v185;
        v184 = (v184 + v188) & v180;
        v185 = v179 + 12 * v184;
        v186 = *(_DWORD *)v185;
        ++v188;
      }
      while (*(_DWORD *)v185);
      if (v187)
      {
        *(_DWORD *)v187 = 0;
        *(_QWORD *)(v187 + 4) = 0;
        --*(_DWORD *)(*v176 - 16);
        v181 = *(_DWORD *)v178;
        v185 = v187;
      }
    }
    *(_DWORD *)v185 = v181;
    *(_QWORD *)(v185 + 4) = *(_QWORD *)(v178 + 4);
    v189 = *v176;
    if (*v176)
      v190 = *(_DWORD *)(v189 - 12) + 1;
    else
      v190 = 1;
    *(_DWORD *)(v189 - 12) = v190;
    v191 = *v176;
    if (*v176)
      v192 = *(_DWORD *)(v191 - 12);
    else
      v192 = 0;
    v193 = (*(_DWORD *)(v191 - 16) + v192);
    v194 = *(unsigned int *)(v191 - 4);
    if (v194 <= 0x400)
    {
      if (3 * v194 > 4 * v193)
        goto LABEL_166;
      if ((_DWORD)v194)
LABEL_161:
        v195 = (_DWORD)v194 << (6 * *(_DWORD *)(v191 - 12) >= (2 * v194));
      else
        v195 = 8;
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v176, v195, (_DWORD *)v185);
      goto LABEL_166;
    }
    if (v194 <= 2 * v193)
      goto LABEL_161;
LABEL_166:
    v178 += 12;
  }
  while (v178 != v177);
  WTF::fastFree(v171, v165, v185, v166, v167, v168, v169, v170);
  v6 = v331;
  v27 = (unsigned int **)v325;
LABEL_172:
  v196 = v22[20];
  if ((_DWORD)v196)
  {
    v197 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v196 + 4));
    v27 = (unsigned int **)v325;
    v201 = v197;
    *v197 = v196;
    v202 = v325[4];
    v325[4] = (unint64_t)v201;
    if (v202)
    {
      WTF::fastFree(v202, v198, v199, v200, v23, v24, v25, v26);
      v27 = (unsigned int **)v325;
    }
    if (v22[20])
    {
      v203 = 0;
      v204 = (uint64_t)v22 + *((_QWORD *)v22 + 9) + 72;
      v205 = v27[4];
      v208 = *v205;
      v206 = v205 + 1;
      v207 = v208;
      do
      {
        if (v207 == v203)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DAE10);
        }
        v206[v203] = *(_DWORD *)(v204 + 4 * v203);
        ++v203;
      }
      while (v203 < v22[20]);
    }
  }
  v209 = v22[24];
  if ((_DWORD)v209)
  {
    v210 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v209 + 8));
    *v210 = v209;
    memset_pattern16(v210 + 2, &unk_1991575C0, 8 * v209);
    v27 = (unsigned int **)v325;
    v214 = (unsigned int *)v325[5];
    v325[5] = (unint64_t)v210;
    if (v214)
    {
      v215 = WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::BitVector>,WTF::BitVector>::~TrailingArray(v214, v211, v212, v213, v23, v24, v25, v26);
      WTF::fastFree((unint64_t)v215, v216, v217, v218, v219, v220, v221, v222);
      v27 = (unsigned int **)v325;
    }
    v223 = v22[24];
    if ((_DWORD)v223)
    {
      v224 = 0;
      v225 = (_QWORD *)((char *)v22 + *((_QWORD *)v22 + 11) + 88);
      v226 = 2;
      do
      {
        v227 = v27[5];
        if (v224 >= *v227)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DAE30);
        }
        v228 = v225[1];
        if (v228)
        {
          v229 = &v227[2 * v224];
          v230 = *((_QWORD *)v229 + 1);
          if (v230 < 0)
            v231 = 63;
          else
            v231 = *(_QWORD *)(2 * v230);
          v232 = &v227[v226];
          if (v231 < v228)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v227[v226], v228, 0);
            v228 = v225[1];
            v230 = *((_QWORD *)v229 + 1);
          }
          if (v230 >= 0)
            v233 = (unsigned int *)(2 * v230 + 8);
          else
            v233 = v232;
          memcpy(v233, (char *)v225 + *v225, (v228 + 7) >> 3);
          v223 = v22[24];
          v27 = (unsigned int **)v325;
        }
        ++v224;
        v225 += 2;
        v226 += 2;
      }
      while (v224 < v223);
    }
  }
  v234 = v22[28];
  if ((_DWORD)v234)
  {
    v235 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v234 + 8));
    *v235 = v234;
    bzero(v235 + 2, 8 * v234);
    v27 = (unsigned int **)v325;
    v239 = (unsigned int *)v325[6];
    v325[6] = (unint64_t)v235;
    if (v239)
    {
      v241 = (WTF::StringImpl ***)(v239 + 2);
      v240 = *v239;
      if ((_DWORD)v240)
      {
        v303 = &v241[v240];
        do
        {
          v304 = *v241;
          if (*v241)
          {
            v305 = *((unsigned int *)v304 - 1);
            if ((_DWORD)v305)
            {
              v306 = *v241;
              do
              {
                v307 = *v306;
                if (*v306 != (WTF::StringImpl *)-1)
                {
                  *v306 = 0;
                  if (v307)
                  {
                    if (*(_DWORD *)v307 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v307, v236, v237, v238, v23, v24, v25, v26);
                      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
                    }
                    else
                    {
                      *(_DWORD *)v307 -= 2;
                    }
                  }
                }
                ++v306;
                --v305;
              }
              while (v305);
            }
            WTF::fastFree((unint64_t)(v304 - 2), v236, v237, v238, v23, v24, v25, v26);
          }
          ++v241;
        }
        while (v241 != v303);
      }
      WTF::fastFree((unint64_t)v239, v236, v237, v238, v23, v24, v25, v26);
      v27 = (unsigned int **)v325;
    }
    v242 = v22[28];
    if ((_DWORD)v242)
    {
      v243 = 0;
      v244 = (uint64_t)v22 + *((_QWORD *)v22 + 13) + 104;
      v333 = (_QWORD *)(v6 + 32);
      v328 = v244;
      while (1)
      {
        v245 = v27[6];
        if (v243 >= *v245)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DAE50);
        }
        v246 = v328 + 16 * v243;
        v247 = *(unsigned int *)(v246 + 8);
        if ((_DWORD)v247)
          break;
LABEL_266:
        ++v243;
        v244 += 16;
        if (v243 >= v242)
          goto LABEL_267;
      }
      if (v247 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1988DAEBCLL);
      }
      v248 = (char *)WTF::fastMalloc((WTF *)(8 * v247));
      v330 = (WTF *)(8 * v247);
      bzero(v248, 8 * v247);
      if (*(_DWORD *)(v246 + 8))
      {
        v255 = 0;
        v256 = (_QWORD *)(v244 + *(_QWORD *)v246);
        do
        {
          if (v247 == v255)
          {
            __break(0xC471u);
            JUMPOUT(0x1988DAEA4);
          }
          LOBYTE(v334) = 0;
          v258 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>(v256, v331, &v334);
          if (v258)
          {
            if ((_BYTE)v334)
            {
              v259 = *(unsigned int *)(v331 + 44);
              if ((_DWORD)v259 == *(_DWORD *)(v331 + 40))
              {
                v260 = v259 + (v259 >> 2);
                if (v260 >= 0x10)
                  v261 = v260 + 1;
                else
                  v261 = 16;
                if (v261 <= v259 + 1)
                  v262 = v259 + 1;
                else
                  v262 = v261;
                WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v333, v262);
                v259 = *(unsigned int *)(v331 + 44);
                v263 = (_QWORD *)(*(_QWORD *)(v331 + 32) + 32 * v259);
              }
              else
              {
                v263 = (_QWORD *)(*v333 + 32 * v259);
              }
              *v263 = &off_1E35986B0;
              v263[1] = v258;
              v263[3] = v263;
              *(_DWORD *)(v331 + 44) = v259 + 1;
            }
            *(_DWORD *)v258 += 2;
          }
          v264 = *(WTF::StringImpl **)&v248[8 * v255];
          *(_QWORD *)&v248[8 * v255] = v258;
          if (v264)
          {
            if (*(_DWORD *)v264 == 2)
            {
              WTF::StringImpl::~StringImpl(v264, v249, v257, v250, v251, v252, v253, v254);
              WTF::fastFree(v265, v266, v267, v268, v269, v270, v271, v272);
            }
            else
            {
              *(_DWORD *)v264 -= 2;
            }
          }
          ++v255;
          ++v256;
        }
        while (v255 < *(unsigned int *)(v246 + 8));
      }
      v273 = (uint64_t *)&v245[2 * v243 + 2];
      v274 = &v248[8 * v247];
      v275 = v248;
      while (2)
      {
        v276 = *v273;
        if (*v273
          || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v273, 8uLL, 0, v250, v251, v252, v253, v254), (v276 = *v273) != 0))
        {
          v277 = *(_DWORD *)(v276 - 8);
        }
        else
        {
          v277 = 0;
        }
        v278 = *(_DWORD **)v275;
        v279 = *(_DWORD *)(*(_QWORD *)v275 + 16);
        if ((v279 & 0x20) != 0)
          v279 = v278[8];
        v280 = v277 & (v279 >> 8);
        v281 = (_QWORD *)(v276 + 8 * v280);
        v282 = (_DWORD *)*v281;
        if (*v281)
        {
          v283 = 0;
          v284 = 1;
          while (v282 != v278)
          {
            if (v282 == (_DWORD *)-1)
              v283 = v281;
            v280 = (v280 + v284) & v277;
            v281 = (_QWORD *)(v276 + 8 * v280);
            v282 = (_DWORD *)*v281;
            ++v284;
            if (!*v281)
            {
              if (!v283)
              {
                if (!v278)
                  goto LABEL_241;
                goto LABEL_240;
              }
              *v283 = 0;
              --*(_DWORD *)(*v273 - 16);
              v278 = *(_DWORD **)v275;
              v281 = v283;
              if (*(_QWORD *)v275)
                goto LABEL_240;
              goto LABEL_241;
            }
          }
LABEL_249:
          v275 += 8;
          if (v275 == v274)
          {
            v292 = 0;
            v22 = v323;
            do
            {
              v293 = *(WTF::StringImpl **)((char *)v292 + (_QWORD)v248);
              *(_QWORD *)((char *)v292 + (_QWORD)v248) = 0;
              if (v293)
              {
                if (*(_DWORD *)v293 == 2)
                {
                  WTF::StringImpl::~StringImpl(v293, v249, (uint64_t)v281, v250, v251, v252, v253, v254);
                  WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
                }
                else
                {
                  *(_DWORD *)v293 -= 2;
                }
              }
              v292 = (WTF *)((char *)v292 + 8);
            }
            while (v330 != v292);
            WTF::fastFree((unint64_t)v248, v249, (uint64_t)v281, v250, v251, v252, v253, v254);
            v242 = v323[28];
            v27 = (unsigned int **)v325;
            goto LABEL_266;
          }
          continue;
        }
        break;
      }
LABEL_240:
      *v278 += 2;
LABEL_241:
      *v281 = v278;
      v285 = *v273;
      if (*v273)
        v286 = *(_DWORD *)(v285 - 12) + 1;
      else
        v286 = 1;
      *(_DWORD *)(v285 - 12) = v286;
      v287 = *v273;
      if (*v273)
        v288 = *(_DWORD *)(v287 - 12);
      else
        v288 = 0;
      v289 = (*(_DWORD *)(v287 - 16) + v288);
      v290 = *(unsigned int *)(v287 - 4);
      if (v290 > 0x400)
      {
        if (v290 > 2 * v289)
          goto LABEL_249;
      }
      else
      {
        if (3 * v290 > 4 * v289)
          goto LABEL_249;
        if (!(_DWORD)v290)
        {
          v291 = 8;
          goto LABEL_257;
        }
      }
      v291 = ((_DWORD)v290 << (6 * *(_DWORD *)(v287 - 12) >= (2 * v290)));
LABEL_257:
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v273, v291, (uint64_t)v281, v250, v251, v252, v253, v254);
      goto LABEL_249;
    }
  }
LABEL_267:
  v302 = (_BYTE)v27[7] & 0xFE | v22[30] & 1;
  *((_BYTE *)v27 + 56) = v302;
  *((_BYTE *)v27 + 56) = v302 & 0xFD | v22[30] & 2;
  v335 = v27;
  v336[0] = v316;
  WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v334, v317, v336, (uint64_t *)&v335, v23, v24, v25, v26);
  return v325;
}

void _ZNK3JSC12CachedVectorINS_16CachedIdentifierELm0EN3WTF15CrashOnOverflowENS2_10FastMallocEE6decodeIJENS2_11FixedVectorINS_10IdentifierEEEEEvRNS_7DecoderERT0_DpT_(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v3;
  unsigned int *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;

  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v7 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v3 + 8));
    *v7 = v3;
    bzero(v7 + 2, 8 * v3);
    v15 = *a3;
    *a3 = v7;
    if (v15)
    {
      v17 = (WTF::StringImpl **)(v15 + 2);
      v16 = *v15;
      if ((_DWORD)v16)
      {
        v18 = 8 * v16;
        do
        {
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::~StringImpl(v19, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    }
    if (*(_DWORD *)(a1 + 8))
    {
      v28 = 0;
      v29 = a1 + *(_QWORD *)a1;
      while (v28 < **a3)
      {
        v30 = (uint64_t)&(*a3)[2 * v28];
        JSC::CachedIdentifier::decode(&v47, v29, a2);
        v38 = *(WTF::StringImpl **)(v30 + 8);
        *(_QWORD *)(v30 + 8) = v47;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        ++v28;
        v29 += 24;
        if (v28 >= *(unsigned int *)(a1 + 8))
          return;
      }
      __break(0xC471u);
    }
  }
}

void JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>(uint64_t a1, uint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (***v18)();
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v9 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v4 + 8));
    *v9 = v4;
    bzero(v9 + 2, 8 * v4);
    v17 = *a3;
    *a3 = (unint64_t)v9;
    if (v17)
      WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
    if (*(_DWORD *)(a1 + 8))
    {
      v18 = (uint64_t (***)())(a1 + *(_QWORD *)a1);
      if (a4)
      {
        v21 = 0;
        while (1)
        {
          v22 = *a3;
          if (v21 >= *(unsigned int *)*a3)
            break;
          v23 = JSC::CachedPtr<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>::decode<>(v18, a2, &v25);
          if (v23)
          {
            v24 = a2[1];
            *(_QWORD *)(v22 + 8 * v21 + 8) = v23;
            if (*(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(a4 + 7))
              JSC::Heap::writeBarrierSlowPath(v24 + 192, a4);
          }
          ++v21;
          ++v18;
          if (v21 >= *(unsigned int *)(a1 + 8))
            return;
        }
      }
      else
      {
        while (1)
        {
          v19 = *a3;
          if (a4 >= *(unsigned int *)*a3)
            break;
          v20 = JSC::CachedPtr<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>::decode<>(v18, a2, &v25);
          if (v20)
            *(_QWORD *)(v19 + 8 * a4 + 8) = v20;
          ++a4;
          ++v18;
          if (a4 >= *(unsigned int *)(a1 + 8))
            return;
        }
      }
      __break(0xC471u);
    }
  }
}

void JSC::CachedJSValue::decode(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t SlowCase;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl **v47;
  WTF::StringImpl **v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  _QWORD *v93;
  _QWORD *v94;
  WTF::StringImpl *v95;
  unsigned int *v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t **v105;
  uint64_t *j;
  uint64_t *v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t *i;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unsigned int v115;
  unsigned int v116;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  JSC::SymbolTableEntry *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl **v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  WTF *v160;
  int v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  WTF *v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  _OWORD *v189;
  WTF *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF *v201;
  unsigned int v202;
  unsigned int v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  char *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::AtomStringImpl *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  WTF *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF *v288;
  uint64_t v289;
  uint64_t v290;
  int *v291;
  int v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  WTF::AtomStringImpl *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  JSC::SymbolTable::SymbolTableRareData *v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  BOOL v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t v321;
  _QWORD *v323;
  _QWORD *v324;
  WTF *v325;
  unint64_t v326;
  _BYTE v327[64];
  WTF *v328;
  unint64_t v329;
  _BYTE v330[32];
  __int128 v331;
  _OWORD v332[4];

  v8 = a4;
  v9 = (_QWORD *)a3;
  switch(*((_BYTE *)a1 + 8))
  {
    case 0:
      SlowCase = *(uint64_t *)((char *)a1 + *a1);
      goto LABEL_264;
    case 1:
      v35 = (uint64_t)a1 + *a1;
      v36 = *(_QWORD *)(a2 + 8);
      SlowCase = *(_QWORD *)(v36 + 40048);
      if (SlowCase < *(_QWORD *)(v36 + 40056))
        goto LABEL_22;
      SlowCase = *(_QWORD *)(v36 + 40064);
      if ((SlowCase & 1) != 0)
        goto LABEL_283;
      v316 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v36 + 40072);
      *(_QWORD *)(v36 + 40056) = SlowCase + HIDWORD(v316);
      *(_QWORD *)(v36 + 40064) = SlowCase + (int)v316;
LABEL_22:
      *(_QWORD *)(v36 + 40048) = SlowCase + 64;
      while (2)
      {
        *(_DWORD *)SlowCase = 0;
        JSC::SymbolTable::SymbolTable(SlowCase, v36);
        if (*(_BYTE *)(v36 + 755))
          __dmb(0xAu);
        v319 = v9;
        v321 = v8;
        v36 = *(unsigned int *)(v35 + 16);
        if (!(_DWORD)v36)
          goto LABEL_136;
        if (v36 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DC278);
        }
        v37 = (uint64_t *)(SlowCase + 8);
        v317 = 16 * v36;
        v38 = WTF::fastMalloc((WTF *)(16 * v36));
        v46 = (WTF::StringImpl **)v38;
        v47 = (WTF::StringImpl **)(v38 + 16 * v36);
        v48 = (WTF::StringImpl **)v38;
        do
        {
          *v48 = 0;
          v48[1] = (WTF::StringImpl *)1;
          v48 += 2;
        }
        while (v48 != v47);
        v318 = v38;
        if (*(_DWORD *)(v35 + 16))
        {
          v49 = 0;
          v50 = (_QWORD *)(v35 + 8 + *(_QWORD *)(v35 + 8));
          v323 = (_QWORD *)(a2 + 32);
          v51 = v38;
          do
          {
            if (v36 == v49)
            {
              __break(0xC471u);
              JUMPOUT(0x1988DC260);
            }
            v52 = v35;
            LOBYTE(v331) = 0;
            v53 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>(v50, a2, &v331);
            if (v53)
            {
              if ((_BYTE)v331)
              {
                v54 = *(unsigned int *)(a2 + 44);
                if ((_DWORD)v54 == *(_DWORD *)(a2 + 40))
                {
                  v55 = v54 + (v54 >> 2);
                  if (v55 >= 0x10)
                    v56 = v55 + 1;
                  else
                    v56 = 16;
                  if (v56 <= v54 + 1)
                    v57 = v54 + 1;
                  else
                    v57 = v56;
                  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v323, v57);
                  v54 = *(unsigned int *)(a2 + 44);
                  v58 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v54);
                }
                else
                {
                  v58 = (_QWORD *)(*v323 + 32 * v54);
                }
                *v58 = &off_1E35986B0;
                v58[1] = v53;
                v58[3] = v58;
                *(_DWORD *)(a2 + 44) = v54 + 1;
              }
              *(_DWORD *)v53 += 2;
            }
            v59 = *(WTF::StringImpl **)v51;
            *(_QWORD *)v51 = v53;
            v35 = v52;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
              {
                WTF::StringImpl::~StringImpl(v59, v39, v40, v41, v42, v43, v44, v45);
                WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
              }
              else
              {
                *(_DWORD *)v59 -= 2;
              }
            }
            *(_QWORD *)(v51 + 8) = v50[1];
            ++v49;
            v51 += 16;
            v50 += 2;
          }
          while (v49 < *(unsigned int *)(v52 + 16));
          v46 = (WTF::StringImpl **)v318;
        }
        do
        {
          v113 = *v37;
          if (*v37
            || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(SlowCase + 8), 8u, 0), (v113 = *v37) != 0))
          {
            v104 = *(_DWORD *)(v113 - 8);
          }
          else
          {
            v104 = 0;
          }
          v114 = *v46;
          v115 = *((_DWORD *)*v46 + 4);
          if ((v115 & 0x20) != 0)
            v115 = *((_DWORD *)v114 + 8);
          v116 = v104 & (v115 >> 8);
          v117 = (WTF::StringImpl **)(v113 + 16 * v116);
          v118 = *v117;
          if (*v117)
          {
            v119 = 0;
            v120 = 1;
            do
            {
              if (v118 == v114)
              {
                v126 = (JSC::SymbolTableEntry *)(v117 + 1);
                v127 = v46[1];
                if ((v127 & 1) != 0)
                {
                  if ((*(_BYTE *)v126 & 1) == 0)
                  {
                    JSC::SymbolTableEntry::freeFatEntrySlow(v126, v39, v40, v41, v42, v43, v44, v45);
                    v127 = v46[1];
                  }
                  *(_QWORD *)v126 = v127;
                }
                else
                {
                  v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  v94 = v93;
                  v95 = v46[1];
                  *v93 = *(_QWORD *)v95;
                  v96 = (unsigned int *)*((_QWORD *)v95 + 1);
                  if (v96)
                  {
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 + 1, v96));
                  }
                  v93[1] = v96;
                  v98 = *(_QWORD *)v126;
                  if ((*(_QWORD *)v126 & 1) == 0 && v98)
                  {
                    v99 = v35;
                    v100 = *(_QWORD *)(v98 + 8);
                    v101 = *(_QWORD *)v126;
                    *(_QWORD *)(v98 + 8) = 0;
                    if (v100)
                    {
                      do
                      {
                        v102 = __ldaxr((unsigned int *)v100);
                        v103 = v102 - 1;
                      }
                      while (__stlxr(v103, (unsigned int *)v100));
                      if (!v103)
                      {
                        atomic_store(1u, (unsigned int *)v100);
                        v109 = (uint64_t **)(v100 + 8);
                        for (i = *(uint64_t **)(v100 + 8); i != (uint64_t *)v109; i = *v109)
                        {
                          v112 = *i;
                          v111 = (uint64_t *)i[1];
                          *v111 = *i;
                          *(_QWORD *)(v112 + 8) = v111;
                          *i = 0;
                          i[1] = 0;
                        }
                        WTF::fastFree(v100, v39, v40, v41, v42, v43, v44, v45);
                      }
                    }
                    WTF::fastFree(v101, v39, v40, v41, v42, v43, v44, v45);
                    v35 = v99;
                  }
                  *(_QWORD *)v126 = v94;
                }
                goto LABEL_126;
              }
              if (v118 == (WTF::StringImpl *)-1)
                v119 = v117;
              v116 = (v116 + v120) & v104;
              v117 = (WTF::StringImpl **)(v113 + 16 * v116);
              v118 = *v117;
              ++v120;
            }
            while (*v117);
            if (v119)
            {
              *v119 = 0;
              v119[1] = (WTF::StringImpl *)1;
              --*(_DWORD *)(*v37 - 16);
              v114 = *v46;
              v117 = v119;
            }
            if (!v114)
              goto LABEL_110;
          }
          *(_DWORD *)v114 += 2;
LABEL_110:
          *v117 = v114;
          v121 = v117 + 1;
          v82 = (uint64_t)v46[1];
          if ((v82 & 1) != 0)
          {
            if ((*v121 & 1) == 0)
            {
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v117 + 1), v39, v40, v41, v42, v43, v44, v45);
              v82 = (uint64_t)v46[1];
            }
          }
          else
          {
            v82 = WTF::fastMalloc((WTF *)0x10);
            v83 = v46[1];
            *(_QWORD *)v82 = *(_QWORD *)v83;
            v84 = (unsigned int *)*((_QWORD *)v83 + 1);
            if (v84)
            {
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 + 1, v84));
            }
            *(_QWORD *)(v82 + 8) = v84;
            v86 = *(_QWORD *)v121;
            if ((*(_QWORD *)v121 & 1) == 0 && v86)
            {
              v87 = v35;
              v88 = v82;
              v89 = *(_QWORD *)(v86 + 8);
              v90 = *(_QWORD *)v121;
              *(_QWORD *)(v86 + 8) = 0;
              if (v89)
              {
                do
                {
                  v91 = __ldaxr((unsigned int *)v89);
                  v92 = v91 - 1;
                }
                while (__stlxr(v92, (unsigned int *)v89));
                if (!v92)
                {
                  atomic_store(1u, (unsigned int *)v89);
                  v105 = (uint64_t **)(v89 + 8);
                  for (j = *(uint64_t **)(v89 + 8); j != (uint64_t *)v105; j = *v105)
                  {
                    v108 = *j;
                    v107 = (uint64_t *)j[1];
                    *v107 = *j;
                    *(_QWORD *)(v108 + 8) = v107;
                    *j = 0;
                    j[1] = 0;
                  }
                  WTF::fastFree(v89, v39, v40, v41, v42, v43, v44, v45);
                }
              }
              WTF::fastFree(v90, v39, v40, v41, v42, v43, v44, v45);
              v82 = v88;
              v35 = v87;
            }
          }
          *(_QWORD *)v121 = v82;
          v122 = *v37;
          if (*v37)
            v80 = *(_DWORD *)(v122 - 12) + 1;
          else
            v80 = 1;
          *(_DWORD *)(v122 - 12) = v80;
          v123 = *v37;
          if (*v37)
            v81 = *(_DWORD *)(v123 - 12);
          else
            v81 = 0;
          v124 = (*(_DWORD *)(v123 - 16) + v81);
          v125 = *(unsigned int *)(v123 - 4);
          if (v125 > 0x400)
          {
            if (v125 > 2 * v124)
              goto LABEL_126;
          }
          else
          {
            if (3 * v125 > 4 * v124)
              goto LABEL_126;
            if (!(_DWORD)v125)
            {
              v79 = 8;
              goto LABEL_121;
            }
          }
          v79 = (_DWORD)v125 << (6 * *(_DWORD *)(v123 - 12) >= (2 * v125));
LABEL_121:
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(SlowCase + 8), v79, v117);
LABEL_126:
          v46 += 2;
        }
        while (v46 != v47);
        v128 = 0;
        v36 = v317;
        v9 = (_QWORD *)v318;
        do
        {
          v129 = (WTF::StringImpl **)(v318 + v128);
          if ((*(_BYTE *)(v318 + v128 + 8) & 1) == 0)
            JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v318 + v128 + 8), v39, v40, v41, v42, v43, v44, v45);
          v130 = *v129;
          *v129 = 0;
          if (v130)
          {
            if (*(_DWORD *)v130 == 2)
            {
              WTF::StringImpl::~StringImpl(v130, v39, v40, v41, v42, v43, v44, v45);
              WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
            }
            else
            {
              *(_DWORD *)v130 -= 2;
            }
          }
          v128 += 16;
        }
        while (v317 != v128);
        WTF::fastFree(v318, v39, v40, v41, v42, v43, v44, v45);
LABEL_136:
        *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(v35 + 24);
        v139 = *(_BYTE *)(SlowCase + 21) & 0xFE | *(_BYTE *)(v35 + 28) & 1;
        *(_BYTE *)(SlowCase + 21) = v139;
        v140 = v139 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v35 + 28) >> 1) & 1));
        *(_BYTE *)(SlowCase + 21) = v140;
        *(_BYTE *)(SlowCase + 21) = v140 & 0xE3 | *(_BYTE *)(v35 + 28) & 0x1C;
        v8 = v35 + 32;
        v141 = *(_QWORD *)(v35 + 32);
        if (v141 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v142 = *(_QWORD *)(a2 + 16);
          v143 = *(unsigned int *)(v142 + 32);
          if ((_DWORD)v143 == -1
            || (v36 = v142 + 16,
                *(_QWORD *)&v331 = &v325,
                v144 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v143])(&v331, v142 + 16), v145 = *(unsigned int *)(v142 + 32), (_DWORD)v145 == -1))
          {
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_283:
            JSC::sanitizeStackForVM((JSC *)v36, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v36 + 40024, v36 + 192, 64, 0, 0);
            continue;
          }
          v146 = v144;
          *(_QWORD *)&v331 = &v325;
          ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v145])(&v331, v142 + 16);
          v153 = (WTF *)(v8 + v141 - v146);
          v154 = *(_QWORD *)(a2 + 24);
          if (!v154)
            goto LABEL_247;
          v155 = *(_DWORD *)(v154 - 8);
          v156 = ((unint64_t)v153 + ~((_QWORD)v153 << 32)) ^ (((unint64_t)v153 + ~((_QWORD)v153 << 32)) >> 22);
          v157 = 9 * ((v156 + ~(v156 << 13)) ^ ((v156 + ~(v156 << 13)) >> 8));
          v158 = (v157 ^ (v157 >> 15)) + ~((v157 ^ (v157 >> 15)) << 27);
          v159 = v155 & ((v158 >> 31) ^ v158);
          v160 = *(WTF **)(v154 + 16 * v159);
          if (v160 != v153)
          {
            v161 = 1;
            while (v160)
            {
              v159 = ((_DWORD)v159 + v161) & v155;
              v160 = *(WTF **)(v154 + 16 * v159);
              ++v161;
              if (v160 == v153)
                goto LABEL_246;
            }
            v159 = *(unsigned int *)(v154 - 4);
          }
LABEL_246:
          if (v159 != *(_DWORD *)(v154 - 4))
          {
            v288 = *(WTF **)(v154 + 16 * v159 + 8);
            if (v288)
              goto LABEL_257;
          }
          else
          {
LABEL_247:
            if (*(_QWORD *)v8 == 0x7FFFFFFFFFFFFFFFLL)
            {
              __break(0xC471u);
              JUMPOUT(0x1988DC1B0);
            }
            v282 = (unsigned int *)(v8 + *(_QWORD *)v8);
            JSC::ScopedArgumentsTable::tryCreate(*(JSC::ScopedArgumentsTable **)(a2 + 8), (JSC::VM *)*v282, v147, v148, v149, v150, v151, v152);
            if (!v283)
            {
              __break(0xC471u);
              JUMPOUT(0x1988DC1D0);
            }
            v288 = v283;
            v289 = *((_QWORD *)v283 + 2);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v289 = (v289 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v290 = *v282;
            if ((_DWORD)v290)
            {
              v291 = (int *)((char *)v282 + *((_QWORD *)v282 + 1) + 8);
              do
              {
                v292 = *v291++;
                *(_DWORD *)v289 = v292;
                v289 += 4;
                --v290;
              }
              while (v290);
            }
            v325 = v153;
            v328 = v283;
            WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v331, (uint64_t *)(a2 + 24), (uint64_t *)&v325, (uint64_t *)&v328, v284, v285, v286, v287);
LABEL_257:
            v293 = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(SlowCase + 32) = v288;
            if (*(_DWORD *)(v293 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
              JSC::Heap::writeBarrierSlowPath(v293 + 192, SlowCase);
          }
        }
        break;
      }
      v295 = *(_QWORD *)(v35 + 40);
      v294 = (_QWORD *)(v35 + 40);
      v9 = v319;
      v8 = v321;
      if (v295 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v303 = WTF::fastMalloc((WTF *)0x28);
        *(_OWORD *)v303 = 0u;
        *(_OWORD *)(v303 + 16) = 0u;
        *(_QWORD *)(v303 + 32) = 0;
        v304 = *(JSC::SymbolTable::SymbolTableRareData **)(SlowCase + 24);
        *(_QWORD *)(SlowCase + 24) = v303;
        if (v304)
        {
          JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(v304, v296, v297, v298, v299, v300, v301, v302);
          WTF::fastFree(v305, v306, v307, v308, v309, v310, v311, v312);
        }
        if (*v294 == 0x7FFFFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DC190);
        }
        JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::decode((uint64_t)v294 + *v294, a2, (uint64_t *)(*(_QWORD *)(SlowCase + 24) + 32));
      }
LABEL_264:
      v313 = *(_QWORD *)(a2 + 8);
      *v9 = SlowCase;
      v315 = (SlowCase & 0xFFFE000000000002) != 0 || v8 == 0 || SlowCase == 0;
      if (!v315 && *(_DWORD *)(v313 + 760) >= *(unsigned __int8 *)(v8 + 7))
        JSC::Heap::writeBarrierSlowPath(v313 + 192, v8);
      return;
    case 2:
      v25 = (uint64_t)a1 + *a1;
      v26 = *(unsigned int *)(v25 + 12);
      if ((_DWORD)v26)
      {
        v27 = (_BYTE *)(v25 + *(_QWORD *)v25);
        if ((*(_BYTE *)(v25 + 8) & 1) != 0)
          v28 = (int *)JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<unsigned char const,18446744073709551615ul>>(v25, a2, v27, v26, a5, a6, a7, a8);
        else
          v28 = (int *)JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)const::{lambda(WTF::UniquedStringImpl)#1}::operator()<std::span<char16_t const,18446744073709551615ul>>(v25, a2, v27, v26, a5, a6, a7, a8);
      }
      else if ((*(_BYTE *)(v25 + 8) & 2) != 0)
      {
        v28 = (int *)WTF::fastCompactMalloc((WTF *)0x30);
        v270 = off_1ECF2C428;
        v271 = dword_1ECF2C424;
        *v28 = 2;
        v28[1] = v271;
        *((_QWORD *)v28 + 1) = v270;
        v28[4] = 38;
        *((_QWORD *)v28 + 3) = &WTF::StringImpl::s_emptyAtomString;
        WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol
                                                                       + 256) | 0x80000000;
        v28[8] = WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol;
        v28[9] = 1;
      }
      else
      {
        v28 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v272 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v331 = v28;
      SlowCase = JSC::jsString(v272, (JSC::VM *)&v331, a3, v26, a5, a6, a7, a8);
      v273 = (WTF::StringImpl *)v331;
      *(_QWORD *)&v331 = 0;
      if (!v273)
        goto LABEL_264;
      if (*(_DWORD *)v273 == 2)
        goto LABEL_244;
      *(_DWORD *)v273 -= 2;
      goto LABEL_264;
    case 3:
      v29 = (unsigned __int8 *)a1 + *a1;
      v30 = JSC::JSImmutableButterfly::create(*(JSC::JSImmutableButterfly **)(a2 + 8), (JSC::VM *)*v29, *((_DWORD *)v29 + 1), a4, a5, a6, a7, a8);
      SlowCase = v30;
      v31 = *((unsigned int *)v29 + 1);
      if ((*v29 & 0xE) == 6)
      {
        if ((_DWORD)v31)
        {
          v32 = (_QWORD *)(v30 + 16);
          v33 = &v29[*((_QWORD *)v29 + 1) + 8];
          do
          {
            v34 = *(_QWORD *)v33;
            v33 += 8;
            *v32++ = v34;
            --v31;
          }
          while (v31);
        }
      }
      else if ((_DWORD)v31)
      {
        v76 = 0;
        v77 = (uint64_t)&v29[*((_QWORD *)v29 + 1) + 8];
        v78 = 8 * v31;
        do
        {
          JSC::CachedJSValue::decode(v77, a2, SlowCase + v76 + 16, SlowCase);
          v76 += 8;
          v77 += 16;
        }
        while (v78 != v76);
      }
      goto LABEL_264;
    case 4:
      v13 = (uint64_t)a1 + *a1;
      LOBYTE(v331) = 0;
      v18 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v13 + 8), a2, &v331);
      if (v18)
      {
        if ((_BYTE)v331)
        {
          v19 = (_QWORD *)(a2 + 32);
          v20 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v20 == *(_DWORD *)(a2 + 40))
          {
            v21 = v20 + (v20 >> 2);
            if (v21 >= 0x10)
              v22 = v21 + 1;
            else
              v22 = 16;
            if (v22 <= v20 + 1)
              v23 = v20 + 1;
            else
              v23 = v22;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v19, v23);
            v20 = *(unsigned int *)(a2 + 44);
            v24 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v20);
          }
          else
          {
            v24 = (_QWORD *)(*v19 + 32 * v20);
          }
          *v24 = &off_1E35986B0;
          v24[1] = v18;
          v24[3] = v24;
          *(_DWORD *)(a2 + 44) = v20 + 1;
        }
        *(_DWORD *)v18 += 2;
      }
      *(_QWORD *)&v331 = v18;
      SlowCase = JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 93032), *(_QWORD *)(a2 + 8), (const WTF::StringImpl *)&v331, *(unsigned __int16 *)(v13 + 16), v14, v15, v16, v17);
      if (!v18)
        goto LABEL_264;
      if (*(_DWORD *)v18 == 2)
      {
        v273 = v18;
LABEL_244:
        WTF::StringImpl::~StringImpl(v273, v263, v264, v265, v266, v267, v268, v269);
        WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
      goto LABEL_264;
    case 5:
      v68 = *a1;
      v69 = (uint64_t)a1 + *a1;
      v328 = (WTF *)v330;
      v329 = 4;
      v325 = (WTF *)v327;
      v326 = 4;
      v70 = *(unsigned int *)(v69 + 8);
      if ((_DWORD)v70)
      {
        *(_QWORD *)&v331 = v332;
        DWORD2(v331) = 4;
        HIDWORD(v331) = v70;
        if (v70 < 5)
        {
          v71 = v332;
        }
        else
        {
          if (v70 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1988DC280);
          }
          v71 = (_OWORD *)WTF::fastMalloc((WTF *)(8 * v70));
          DWORD2(v331) = v70;
          *(_QWORD *)&v331 = v71;
          v70 = HIDWORD(v331);
        }
        bzero(v71, 8 * v70);
        if (HIDWORD(v329))
        {
          v169 = v328;
          v170 = 8 * HIDWORD(v329);
          do
          {
            v171 = *(WTF::StringImpl **)v169;
            *(_QWORD *)v169 = 0;
            if (v171)
            {
              if (*(_DWORD *)v171 == 2)
              {
                WTF::StringImpl::~StringImpl(v171, v162, v163, v164, v165, v166, v167, v168);
                WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
              }
              else
              {
                *(_DWORD *)v171 -= 2;
              }
            }
            v169 = (WTF *)((char *)v169 + 8);
            v170 -= 8;
          }
          while (v170);
        }
        v180 = v328;
        if (v328 != (WTF *)v330)
        {
          if (v328)
          {
            v328 = 0;
            LODWORD(v329) = 0;
            WTF::fastFree((unint64_t)v180, v162, v163, v164, v165, v166, v167, v168);
          }
          v328 = (WTF *)v330;
        }
        v181 = (WTF *)v331;
        if ((_OWORD *)v331 == v332)
        {
          v183 = HIDWORD(v331);
          memcpy(v330, v332, 8 * HIDWORD(v331));
          v182 = DWORD2(v331);
        }
        else
        {
          *(_QWORD *)&v331 = v332;
          v328 = v181;
          v182 = DWORD2(v331);
          v183 = HIDWORD(v331);
          DWORD2(v331) = 4;
        }
        HIDWORD(v331) = 0;
        v329 = __PAIR64__(v183, v182);
        WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v331, v162, v163, v164, v165, v166, v167, v168);
        if (*(_DWORD *)(v69 + 8))
        {
          v184 = 0;
          v185 = 0;
          v186 = v69 + *(_QWORD *)v69;
          do
          {
            if (v185 >= HIDWORD(v329))
            {
              __break(0xC471u);
              JUMPOUT(0x1988DC268);
            }
            JSC::CachedString::decode(v186, a2, (WTF::StringImpl **)((char *)v328 + v184));
            ++v185;
            v184 += 8;
            v186 += 16;
          }
          while (v185 < *(unsigned int *)(v69 + 8));
        }
      }
      v187 = *(unsigned int *)(v69 + 24);
      if (!(_DWORD)v187)
        goto LABEL_230;
      *(_QWORD *)&v331 = v332;
      DWORD2(v331) = 4;
      HIDWORD(v331) = v187;
      if (v187 <= 4)
      {
        v189 = &v332[v187];
        v188 = v332;
        do
        {
LABEL_174:
          *v188 = 0;
          v188[8] = 0;
          v188 += 16;
        }
        while (v188 != (_BYTE *)v189);
        goto LABEL_175;
      }
      if (v187 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1988DC288);
      }
      v188 = (_BYTE *)WTF::fastMalloc((WTF *)(16 * v187));
      DWORD2(v331) = v187;
      *(_QWORD *)&v331 = v188;
      if (HIDWORD(v331))
      {
        v189 = &v188[16 * HIDWORD(v331)];
        goto LABEL_174;
      }
LABEL_175:
      v190 = v325;
      if (HIDWORD(v326))
      {
        v191 = 16 * HIDWORD(v326);
        do
        {
          if (*((_BYTE *)v190 + 8))
          {
            v192 = *(WTF::StringImpl **)v190;
            *(_QWORD *)v190 = 0;
            if (v192)
            {
              if (*(_DWORD *)v192 == 2)
              {
                WTF::StringImpl::~StringImpl(v192, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
              }
              else
              {
                *(_DWORD *)v192 -= 2;
              }
            }
          }
          v190 = (WTF *)((char *)v190 + 16);
          v191 -= 16;
        }
        while (v191);
        v190 = v325;
      }
      if (v190 != (WTF *)v327)
      {
        if (v190)
        {
          v325 = 0;
          LODWORD(v326) = 0;
          WTF::fastFree((unint64_t)v190, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v325 = (WTF *)v327;
      }
      v201 = (WTF *)v331;
      if ((_OWORD *)v331 == v332)
      {
        WTF::VectorMover<false,std::optional<WTF::String>>::move((WTF::AtomStringImpl *)v332, (WTF::AtomStringImpl *)&v332[HIDWORD(v331)], (uint64_t)v327, a4, a5, a6, a7, a8);
        v202 = DWORD2(v331);
      }
      else
      {
        *(_QWORD *)&v331 = v332;
        v325 = v201;
        v202 = DWORD2(v331);
        DWORD2(v331) = 4;
      }
      v203 = HIDWORD(v331);
      HIDWORD(v331) = 0;
      v326 = __PAIR64__(v203, v202);
      WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v331, (void *)a2, a3, a4, a5, a6, a7, a8);
      if (!*(_DWORD *)(v69 + 24))
      {
LABEL_230:
        v242 = *(_QWORD *)(a2 + 8);
        v243 = (_DWORD *)WTF::fastMalloc((WTF *)0x90);
        *(_QWORD *)&v331 = JSC::TemplateObjectDescriptor::TemplateObjectDescriptor(v243, (uint64_t)&v328, (uint64_t)&v325);
        SlowCase = JSC::JSTemplateObjectDescriptor::create(v242, (uint64_t *)&v331, *(unsigned int *)(v69 + 32), v244, v245, v246, v247, v248);
        if ((_QWORD)v331)
          WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref((JSC::TemplateObjectDescriptor *)v331, v249, v250, v251, v252, v253, v254, v255);
        WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v325, v249, v250, v251, v252, v253, v254, v255);
        WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v328, v256, v257, v258, v259, v260, v261, v262);
        v9 = (_QWORD *)a3;
        v8 = a4;
        goto LABEL_264;
      }
      v211 = 0;
      v212 = 0;
      v324 = (_QWORD *)(a2 + 32);
      v213 = (uint64_t)a1 + *(_QWORD *)(v69 + 16) + v68 + 24;
      break;
    case 6:
      v72 = (uint64_t)a1 + *a1;
      v73 = JSC::JSBigInt::createWithLength(0, *(JSC::JSGlobalObject **)(a2 + 8), (JSC::VM *)*(unsigned int *)(v72 + 8), a4);
      if (!v73)
      {
        __break(0xC471u);
        JUMPOUT(0x1988DC170);
      }
      SlowCase = v73;
      *(_BYTE *)(v73 + 16) = *(_BYTE *)(v72 + 12);
      v74 = *(unsigned int *)(v72 + 8);
      if ((_DWORD)v74)
      {
        v75 = *(_QWORD *)(v73 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v75 = (v75 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        memcpy((void *)v75, (const void *)(v72 + *(_QWORD *)v72), 8 * v74);
      }
      goto LABEL_264;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988DC1F0);
  }
  while (1)
  {
    if (v212 >= HIDWORD(v326))
    {
      __break(0xC471u);
      JUMPOUT(0x1988DC270);
    }
    v214 = v325;
    v215 = *(_QWORD *)(v213 - 8);
    if (v215 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v216 = 0;
      v217 = 0;
    }
    else
    {
      LOBYTE(v331) = 0;
      v216 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(v213 + v215), a2, &v331);
      if (v216)
      {
        if ((_BYTE)v331)
        {
          v218 = *(unsigned int *)(a2 + 44);
          if ((_DWORD)v218 == *(_DWORD *)(a2 + 40))
          {
            v219 = v218 + (v218 >> 2);
            if (v219 >= 0x10)
              v220 = v219 + 1;
            else
              v220 = 16;
            if (v220 <= v218 + 1)
              v221 = v218 + 1;
            else
              v221 = v220;
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v324, v221);
            v218 = *(unsigned int *)(a2 + 44);
            v222 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v218);
          }
          else
          {
            v222 = (_QWORD *)(*v324 + 32 * v218);
          }
          *v222 = &off_1E35986B0;
          v222[1] = v216;
          v222[3] = v222;
          *(_DWORD *)(a2 + 44) = v218 + 1;
        }
        *(_DWORD *)v216 += 2;
      }
      v217 = 1;
    }
    v223 = (char *)v214 + v211;
    if (*((unsigned __int8 *)v214 + v211 + 8) == v217)
    {
      if (*((_BYTE *)v214 + v211 + 8))
      {
        v224 = *(WTF::StringImpl **)((char *)v214 + v211);
        *(_QWORD *)((char *)v214 + v211) = v216;
        if (v224)
        {
          if (*(_DWORD *)v224 == 2)
            goto LABEL_226;
          *(_DWORD *)v224 -= 2;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (!*((_BYTE *)v214 + v211 + 8))
      {
        *(_QWORD *)((char *)v214 + v211) = v216;
        v223[8] = 1;
        goto LABEL_227;
      }
      v225 = *(WTF::StringImpl **)((char *)v214 + v211);
      *(_QWORD *)((char *)v214 + v211) = 0;
      if (v225)
      {
        if (*(_DWORD *)v225 == 2)
        {
          WTF::StringImpl::~StringImpl(v225, v204, v205, v206, v207, v208, v209, v210);
          WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
        }
        else
        {
          *(_DWORD *)v225 -= 2;
        }
      }
      v223[8] = 0;
    }
    if (v215 == 0x7FFFFFFFFFFFFFFFLL || !v216)
      goto LABEL_227;
    if (*(_DWORD *)v216 == 2)
    {
      v224 = v216;
LABEL_226:
      WTF::StringImpl::~StringImpl(v224, v204, v205, v206, v207, v208, v209, v210);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
      goto LABEL_227;
    }
    *(_DWORD *)v216 -= 2;
LABEL_227:
    ++v212;
    v211 += 16;
    v213 += 8;
    if (v212 >= *(unsigned int *)(v69 + 24))
      goto LABEL_230;
  }
}

void JSC::SymbolTable::SymbolTableRareData::~SymbolTableRareData(JSC::SymbolTable::SymbolTableRareData *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  BOOL v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v13 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v13)
    {
      v14 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v15 = *v14;
        if (*v14 != (WTF::StringImpl *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    v24 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v24)
    {
      v25 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v26 = *v25;
        if (*v25 != (WTF::StringImpl *)-1)
        {
          v27 = v25[1];
          v25[1] = 0;
          if (v27)
          {
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v27, a2, a3, a4, a5, a6, a7, a8);
            v26 = *v25;
          }
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v36 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v36)
    {
      v37 = (WTF::StringImpl **)(v11 + 8);
      do
      {
        if (*((_BYTE *)v37 - 8))
          v38 = 0;
        else
          v38 = *((_DWORD *)v37 - 1) == 0;
        if (!v38)
        {
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v48 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v48)
    {
      v49 = *(WTF::StringImpl ***)this;
      do
      {
        v50 = *v49;
        if (*v49 != (WTF::StringImpl *)-1)
        {
          *v49 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::~StringImpl(v50, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
            }
            else
            {
              *(_DWORD *)v50 -= 2;
            }
          }
        }
        v49 += 2;
        --v48;
      }
      while (v48);
    }
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::decode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v3)
    return;
  if (v3 >> 29)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x1988DC74CLL);
  }
  v7 = a1 + 8;
  v8 = WTF::fastMalloc((WTF *)(8 * v3));
  v15 = v8;
  v16 = (unsigned int *)(v8 + 8 * v3);
  v17 = v8;
  do
  {
    *(_BYTE *)(v17 + 4) = 0;
    *(_DWORD *)v17 = 0;
    *(_WORD *)(v17 + 6) = 0;
    v17 += 8;
  }
  while ((unsigned int *)v17 != v16);
  v18 = (unsigned int *)v8;
  if (*(_DWORD *)(a1 + 16))
  {
    v19 = 0;
    v20 = v7 + *(_QWORD *)(a1 + 8);
    v21 = v8;
    while (v3 != v19)
    {
      JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode((_QWORD *)v20, a2, (unsigned int *)v21);
      *(_WORD *)(v21 + 6) = *(_WORD *)(v20 + 8);
      ++v19;
      v21 += 8;
      v20 += 16;
      if (v19 >= *(unsigned int *)(a1 + 16))
      {
        v18 = (unsigned int *)v15;
        goto LABEL_16;
      }
    }
    goto LABEL_52;
  }
  do
  {
LABEL_16:
    v35 = (WTF::StringImpl *)(*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32));
    if (v35)
      *(_DWORD *)v35 += 2;
    v36 = *a3;
    if (*a3
      || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a3, 8u, 0), (v36 = *a3) != 0))
    {
      v34 = *(_DWORD *)(v36 - 8);
    }
    else
    {
      v34 = 0;
    }
    v37 = *((_DWORD *)v35 + 4);
    if ((v37 & 0x20) != 0)
      v37 = *((_DWORD *)v35 + 8);
    v38 = v34 & (v37 >> 8);
    v30 = v36 + 16 * v38;
    v39 = *(WTF::StringImpl **)v30;
    if (!*(_QWORD *)v30)
    {
LABEL_31:
      *(_QWORD *)v30 = v35;
      *(_WORD *)(v30 + 8) = *((_WORD *)v18 + 3);
      v42 = *a3;
      if (*a3)
        v32 = *(_DWORD *)(v42 - 12) + 1;
      else
        v32 = 1;
      *(_DWORD *)(v42 - 12) = v32;
      v43 = *a3;
      if (*a3)
        v33 = *(_DWORD *)(v43 - 12);
      else
        v33 = 0;
      v44 = (*(_DWORD *)(v43 - 16) + v33);
      v45 = *(unsigned int *)(v43 - 4);
      if (v45 > 0x400)
      {
        if (v45 > 2 * v44)
          goto LABEL_43;
      }
      else
      {
        if (3 * v45 > 4 * v44)
          goto LABEL_43;
        if (!(_DWORD)v45)
        {
          v31 = 8;
          goto LABEL_39;
        }
      }
      v31 = (_DWORD)v45 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v45));
LABEL_39:
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a3, v31, (WTF::StringImpl **)v30);
      goto LABEL_43;
    }
    v40 = 0;
    v41 = 1;
    while (v39 != v35)
    {
      if (v39 == (WTF::StringImpl *)-1)
        v40 = v30;
      v38 = (v38 + v41) & v34;
      v30 = v36 + 16 * v38;
      v39 = *(WTF::StringImpl **)v30;
      ++v41;
      if (!*(_QWORD *)v30)
      {
        if (v40)
        {
          *(_QWORD *)v40 = 0;
          *(_WORD *)(v40 + 8) = 0;
          --*(_DWORD *)(*a3 - 16);
          v30 = v40;
        }
        goto LABEL_31;
      }
    }
    *(_WORD *)(v30 + 8) = *((_WORD *)v18 + 3);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v9, v30, v10, v11, v12, v13, v14);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
LABEL_43:
    v18 += 2;
  }
  while (v18 != v16);
  v46 = 0;
  do
  {
    v47 = v15 + v46;
    v48 = (WTF::StringImpl *)(*(unsigned int *)(v15 + v46) | ((unint64_t)*(unsigned __int8 *)(v15 + v46 + 4) << 32));
    *(_DWORD *)v47 = 0;
    *(_BYTE *)(v47 + 4) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v9, v30, v10, v11, v12, v13, v14);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    v46 += 8;
  }
  while (8 * v3 != v46);
  WTF::fastFree(v15, v9, v30, v10, v11, v12, v13, v14);
}

void JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v28 = 0;
  v12 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>(a1, a2, &v28);
  if (v12)
  {
    if (v28)
    {
      v13 = (_QWORD *)(a2 + 32);
      v14 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 40))
      {
        v15 = v14 + (v14 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v13, v17);
        v14 = *(unsigned int *)(a2 + 44);
        v18 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v14);
      }
      else
      {
        v18 = (_QWORD *)(*v13 + 32 * v14);
      }
      *v18 = &off_1E3598820;
      v18[1] = v12;
      v18[3] = v18;
      *(_DWORD *)(a2 + 44) = v14 + 1;
    }
    *(_DWORD *)((unint64_t)v12 & 0xFFFFFFFFFFLL) += 2;
  }
  v19 = (WTF::StringImpl *)(*a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32));
  *a3 = v12;
  *((_BYTE *)a3 + 4) = BYTE4(v12);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3598820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3598820;
  a2[1] = v2;
  return result;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)(a1 + 8);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

_QWORD *WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int const&>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v17 ^ HIWORD(v17)) & v14;
  v19 = (_DWORD *)(v12 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v15)
      {
        if ((v13 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v12 - 4);
        *v11 = v19;
        v11[1] = v12 + 8 * v30;
        *((_BYTE *)v11 + 16) = 0;
        v19[1] = *a4;
        return result;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = (_DWORD *)(v12 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v19 = v21;
    }
  }
  *v19 = v15;
  v19[1] = *a4;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
      goto LABEL_31;
  }
  else if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
      goto LABEL_20;
    }
LABEL_31:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_20:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, v29, (uint64_t)v19, (uint64_t)a4, a5, a6, a7, a8);
    v19 = result;
    v25 = *a2;
    if (*a2)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
  *v11 = v19;
  v11[1] = v25 + 8 * v28;
  *((_BYTE *)v11 + 16) = 1;
  return result;
}

void JSC::CachedIdentifier::decode(WTF::StringImpl **a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::AtomStringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl *v41;

  v40 = 0;
  v5 = JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::decode<>((_QWORD *)(a2 + 16), a3, &v40);
  if (v5)
  {
    v13 = v5;
    if (v40)
    {
      v14 = (_QWORD *)(a3 + 32);
      v15 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v15 == *(_DWORD *)(a3 + 40))
      {
        v16 = v15 + (v15 >> 2);
        if (v16 >= 0x10)
          v17 = v16 + 1;
        else
          v17 = 16;
        if (v17 <= v15 + 1)
          v18 = v15 + 1;
        else
          v18 = v17;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v14, v18);
        v15 = *(unsigned int *)(a3 + 44);
        v19 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * v15);
      }
      else
      {
        v19 = (_QWORD *)(*v14 + 32 * v15);
      }
      *v19 = &off_1E35986B0;
      v19[1] = v13;
      v19[3] = v19;
      *(_DWORD *)(a3 + 44) = v15 + 1;
    }
    v20 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    v21 = *((_DWORD *)v13 + 4);
    if ((v21 & 0x20) != 0)
    {
      *(_DWORD *)v13 = v20 + 4;
      v22 = v13;
    }
    else
    {
      if ((v21 & 0x10) != 0)
      {
        *(_DWORD *)v13 = v20 + 4;
        v22 = v13;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 8) + 41912), (unint64_t)v13, v7, v8, v9, v10, v11, v12, &v41);
        v22 = v41;
      }
      v23 = *(_DWORD *)v22;
      *(_DWORD *)v22 += 2;
      if (v23)
      {
        *(_DWORD *)v22 = v23;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v22, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    *a1 = v22;
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, (uint64_t)v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    *a1 = 0;
  }
}

unint64_t JSC::CachedPtr<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>::decode<>(uint64_t (***a1)(), uint64_t *a2, _BYTE *a3)
{
  uint64_t (***v3)();
  uint64_t *v4;
  char *v5;
  uint64_t (**v7)();
  unint64_t SlowCase;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t (**v32)();
  JSC *v33;
  unint64_t v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  JSC::TDZEnvironmentLink *v93;
  unsigned int v94;
  _DWORD *v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int *v121;
  unsigned int *v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  unsigned int *v137;
  char v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  JSC::Decoder **v174;
  int v175;
  JSC::Decoder *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t (**v202)();
  uint64_t *v203;
  uint64_t *v204;
  int v205;
  char *v206;
  JSC::Decoder **v207;
  uint64_t *v208;
  __int128 v209;
  unint64_t v210;
  uint64_t *v211;

  v7 = *a1;
  if (*a1 == (uint64_t (**)())0x7FFFFFFFFFFFFFFFLL)
  {
    SlowCase = 0;
LABEL_26:
    *a3 = 0;
    return SlowCase;
  }
  v9 = a2;
  v10 = (char *)a2[2];
  v11 = *((unsigned int *)v10 + 8);
  if ((_DWORD)v11 == -1)
    goto LABEL_116;
  v3 = a1;
  v12 = v10 + 16;
  *(_QWORD *)&v209 = &v211;
  v13 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v209, v10 + 16);
  v14 = *((unsigned int *)v10 + 8);
  if ((_DWORD)v14 == -1)
    goto LABEL_116;
  v15 = v13;
  v16 = (char *)v7 + (_QWORD)v3;
  *(_QWORD *)&v209 = &v211;
  v7 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix;
  ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v209, v12);
  v4 = (uint64_t *)&v16[-v15];
  v24 = v9[3];
  if (v24)
  {
    v25 = *(_DWORD *)(v24 - 8);
    v26 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = *(uint64_t **)(v24 + 16 * v29);
    if (v30 != v4)
    {
      v31 = 1;
      while (v30)
      {
        v29 = ((_DWORD)v29 + v31) & v25;
        v30 = *(uint64_t **)(v24 + 16 * v29);
        ++v31;
        if (v30 == v4)
          goto LABEL_12;
      }
      v29 = *(unsigned int *)(v24 - 4);
    }
LABEL_12:
    if (v29 != *(_DWORD *)(v24 - 4))
    {
      SlowCase = *(_QWORD *)(v24 + 16 * v29 + 8);
      goto LABEL_26;
    }
  }
  *a3 = 1;
  v32 = *v3;
  if (*v3 == (uint64_t (**)())0x7FFFFFFFFFFFFFFFLL)
  {
    __break(0xC471u);
    JUMPOUT(0x1988DD76CLL);
  }
  v208 = v9 + 3;
  v202 = *v3;
  v10 = (char *)v32 + (_QWORD)v3;
  v5 = (char *)v32 + (_QWORD)v3;
  v33 = (JSC *)v9[1];
  SlowCase = *((_QWORD *)v33 + 5170);
  if (SlowCase >= *((_QWORD *)v33 + 5171))
  {
    SlowCase = *((_QWORD *)v33 + 5172);
    if ((SlowCase & 1) != 0)
      goto LABEL_117;
    v198 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v33 + 5173);
    *((_QWORD *)v33 + 5171) = SlowCase + HIDWORD(v198);
    *((_QWORD *)v33 + 5172) = SlowCase + (int)v198;
  }
  *((_QWORD *)v33 + 5170) = SlowCase + 96;
  while (1)
  {
    *(_DWORD *)SlowCase = 0;
    v34 = *(_QWORD *)(v9[1] + 41712);
    v35 = *(_DWORD *)(v34 + 8);
    *(_DWORD *)SlowCase = v34 >> 4;
    *(_DWORD *)(SlowCase + 4) = v35;
    v36 = *(_WORD *)(SlowCase + 48);
    v38 = *(_QWORD *)(SlowCase + 32);
    v37 = *(_QWORD *)(SlowCase + 40);
    v40 = *(_QWORD *)(SlowCase + 16);
    v39 = *(_QWORD *)(SlowCase + 24);
    v41 = *((unsigned int *)v5 + 1) | ((unint64_t)*(unsigned int *)(SlowCase + 12) << 32) | 0x80000000;
    *(_QWORD *)(SlowCase + 8) = v41;
    v42 = v41 & 0x80000000FFFFFFFFLL | ((unint64_t)(*((_DWORD *)v5 + 2) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 8) = v42;
    v43 = v5[3];
    v44 = v42 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v43 << 63);
    v45 = v40 | (v43 >> 1);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v45;
    v46 = v45 & 0xFFFFFFFF80000000 | *((_DWORD *)v5 + 3) & 0x7FFFFFFF;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v46;
    v47 = v46 & 0xFFFFFFFF7FFFFFFFLL | ((((unint64_t)*((unsigned int *)v5 + 2) >> 31) & 1) << 31);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v47;
    v48 = v47 & 0x80000000FFFFFFFFLL | ((unint64_t)(*((_DWORD *)v5 + 4) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v48;
    v49 = *((_QWORD *)v5 + 1) & 0x8000000000000000 | v48 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    v50 = v39 & 0xFFFFFFFF80000000 | *((_DWORD *)v5 + 5) & 0x7FFFFFFF;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v50;
    v51 = v50 & 0xFFFFFFFF7FFFFFFFLL | (((*((_QWORD *)v5 + 2) >> 31) & 1) << 31);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v51;
    v52 = v51 & 0x80000000FFFFFFFFLL | ((unint64_t)(*((_DWORD *)v5 + 6) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v52;
    v53 = v52 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*((int *)v5 + 6) < 0) << 63);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    v54 = v38 & 0xFFFFFFFF80000000 | *(_QWORD *)(v5 + 28) & 0x7FFFFFFFLL;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v54;
    v55 = v54 & 0xFFFFFFFF7FFFFFFFLL | ((((unint64_t)*((unsigned int *)v5 + 7) >> 31) & 1) << 31);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v55;
    v56 = v55 | ((unint64_t)(*((_DWORD *)v5 + 8) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    v57 = v37 & 0xFFFFFFFF80000000 | *((_DWORD *)v5 + 9) & 0x7FFFFFFF;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 40) = v57;
    v58 = v57 & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)((*(_WORD *)(v5 + 45) & 0x80) != 0) << 31);
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 40) = v58;
    v59 = v58 & 0x80000000FFFFFFFFLL | ((unint64_t)(*((_DWORD *)v5 + 10) & 0x7FFFFFFF) << 32);
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 40) = v59;
    v60 = v59 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*((int *)v5 + 10) < 0) << 63);
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 40) = v60;
    LOWORD(v48) = *(_WORD *)v5;
    v61 = v36 & 0xC000 | *(_WORD *)v5 & 0x3FFF;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 40) = v60;
    *(_WORD *)(SlowCase + 48) = v61;
    LOWORD(v48) = v48 & 0x3FFF | (*(_WORD *)(v5 + 45) << 14);
    *(_QWORD *)(SlowCase + 32) = v56;
    *(_QWORD *)(SlowCase + 40) = v60;
    *(_QWORD *)(SlowCase + 16) = v49;
    *(_QWORD *)(SlowCase + 24) = v53;
    *(_QWORD *)(SlowCase + 8) = v44;
    *(_WORD *)(SlowCase + 48) = v48;
    *(_BYTE *)(SlowCase + 50) = v5[44];
    LODWORD(v60) = *(_WORD *)(SlowCase + 51) & 0xFFFC | v5[46] & 3;
    *(_WORD *)(SlowCase + 51) = v60;
    LODWORD(v60) = v60 & 0xFFFFFFF3 | (4 * (v5[2] & 3));
    *(_WORD *)(SlowCase + 51) = v60;
    LODWORD(v60) = v60 & 0xFFFFFFCF | (16 * ((*(unsigned __int16 *)(v5 + 45) >> 2) & 3));
    *(_WORD *)(SlowCase + 51) = v60;
    LODWORD(v60) = v60 & 0xFFFFFF3F | (((*(unsigned __int16 *)(v5 + 45) >> 4) & 3) << 6);
    *(_WORD *)(SlowCase + 51) = v60;
    *(_WORD *)(SlowCase + 51) = v60 & 0xFEFF | (4 * *(_WORD *)(v5 + 45)) & 0x100;
    *(_QWORD *)(SlowCase + 56) = 0;
    *(_QWORD *)(SlowCase + 64) = 0;
    JSC::CachedIdentifier::decode((WTF::StringImpl **)(SlowCase + 72), (uint64_t)(v10 + 56), (uint64_t)v9);
    v206 = v10;
    v207 = (JSC::Decoder **)(SlowCase + 56);
    JSC::CachedIdentifier::decode((WTF::StringImpl **)(SlowCase + 80), (uint64_t)(v10 + 80), (uint64_t)v9);
    v66 = 0;
    v67 = (uint64_t *)(v5 + 48);
    v68 = *((_QWORD *)v5 + 6);
    if (v68 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v203 = v4;
      v10 = (char *)v9[2];
      v69 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v69 == -1)
        goto LABEL_116;
      v4 = (uint64_t *)&v211;
      *(_QWORD *)&v209 = &v211;
      v70 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v69])(&v209, v10 + 16);
      v71 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v71 == -1)
        goto LABEL_116;
      v72 = v70;
      *(_QWORD *)&v209 = &v211;
      ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v71])(&v209, v10 + 16);
      v73 = (uint64_t)v67 + v68 - v72;
      v74 = *v208;
      v4 = v203;
      if (!*v208)
        goto LABEL_29;
      v75 = *(_DWORD *)(v74 - 8);
      v76 = (v73 + ~(v73 << 32)) ^ ((unint64_t)(v73 + ~(v73 << 32)) >> 22);
      v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
      v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
      v79 = v75 & ((v78 >> 31) ^ v78);
      v80 = *(_QWORD *)(v74 + 16 * v79);
      if (v80 != v73)
      {
        v81 = 1;
        while (v80)
        {
          v79 = ((_DWORD)v79 + v81) & v75;
          v80 = *(_QWORD *)(v74 + 16 * v79);
          ++v81;
          if (v80 == v73)
            goto LABEL_28;
        }
        v79 = *(unsigned int *)(v74 - 4);
      }
LABEL_28:
      if (v79 != *(_DWORD *)(v74 - 4))
      {
        v66 = *(_QWORD *)(v74 + 16 * v79 + 8);
      }
      else
      {
LABEL_29:
        v82 = *v67;
        if (*v67 == 0x7FFFFFFFFFFFFFFFLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DD7B8);
        }
        v83 = (char *)v67 + v82;
        v84 = WTF::fastMalloc((WTF *)0x48);
        v66 = v84;
        *(_QWORD *)v84 = 0;
        *(_QWORD *)(v84 + 8) = 0;
        *(_QWORD *)(v84 + 16) = -1;
        *(_OWORD *)(v84 + 24) = 0u;
        *(_OWORD *)(v84 + 40) = 0u;
        *(_OWORD *)(v84 + 56) = 0u;
        if (*v83)
        {
          v85 = v9[7];
          if (v85)
            ++*(_DWORD *)(v85 + 8);
          *(_QWORD *)v84 = v85;
        }
        *(_QWORD *)(v84 + 8) = *(_QWORD *)(v83 + 4);
        *(_DWORD *)(v84 + 16) = *((_DWORD *)v83 + 3);
        *(_DWORD *)(v84 + 20) = *((_DWORD *)v83 + 4);
        LOBYTE(v209) = 0;
        v86 = (_DWORD *)JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::decode<>((uint64_t *)v83 + 3, (uint64_t)v9, &v209);
        if (v86)
        {
          if ((_BYTE)v209)
          {
            v87 = v9 + 4;
            v88 = *((unsigned int *)v9 + 11);
            if ((_DWORD)v88 == *((_DWORD *)v9 + 10))
            {
              v89 = v88 + (v88 >> 2);
              if (v89 >= 0x10)
                v90 = v89 + 1;
              else
                v90 = 16;
              if (v90 <= v88 + 1)
                v91 = v88 + 1;
              else
                v91 = v90;
              WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v87, v91);
              v88 = *((unsigned int *)v9 + 11);
              v92 = (_QWORD *)(v9[4] + 32 * v88);
            }
            else
            {
              v92 = (_QWORD *)(*v87 + 32 * v88);
            }
            *v92 = &off_1E35988C0;
            v92[1] = v86;
            v92[3] = v92;
            *((_DWORD *)v9 + 11) = v88 + 1;
          }
          ++*v86;
        }
        v201 = v73;
        v93 = *(JSC::TDZEnvironmentLink **)(v66 + 40);
        *(_QWORD *)(v66 + 40) = v86;
        if (v93)
        {
          if (*(_DWORD *)v93 == 1)
          {
            JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v93);
            WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
          }
          else
          {
            --*(_DWORD *)v93;
          }
        }
        _ZNK3JSC12CachedVectorINS_16CachedIdentifierELm0EN3WTF15CrashOnOverflowENS2_10FastMallocEE6decodeIJENS2_11FixedVectorINS_10IdentifierEEEEEvRNS_7DecoderERT0_DpT_((uint64_t)(v83 + 32), (uint64_t)v9, (unsigned int **)(v66 + 48));
        v94 = *((_DWORD *)v83 + 14);
        if (v94)
        {
          v95 = (_DWORD *)WTF::fastMalloc((WTF *)(40 * v94 + 8));
          *v95 = v94;
          v103 = 2;
          do
          {
            v104 = &v95[v103];
            *(_OWORD *)v104 = 0uLL;
            *((_OWORD *)v104 + 1) = 0uLL;
            *((_QWORD *)v104 + 4) = 0;
            *((_QWORD *)v104 + 1) = -1;
            v104[4] = -1;
            v103 += 10;
          }
          while (v104 + 10 != &v95[10 * v94 + 2]);
          v105 = *(unsigned int **)(v66 + 56);
          *(_QWORD *)(v66 + 56) = v95;
          if (v105)
          {
            v106 = v82;
            v108 = (WTF::StringImpl **)(v105 + 2);
            v107 = *v105;
            if ((_DWORD)v107)
            {
              v109 = 40 * v107;
              do
              {
                v110 = *v108;
                *v108 = 0;
                if (v110)
                {
                  if (*(_DWORD *)v110 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v110, v96, v97, v98, v99, v100, v101, v102);
                    WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
                  }
                  else
                  {
                    *(_DWORD *)v110 -= 2;
                  }
                }
                v108 += 5;
                v109 -= 40;
              }
              while (v109);
            }
            WTF::fastFree((unint64_t)v105, v96, v97, v98, v99, v100, v101, v102);
            v82 = v106;
          }
          if (*((_DWORD *)v83 + 14))
          {
            v119 = 0;
            v120 = 0;
            v3 = (uint64_t (***)())((char *)v3 + (_QWORD)v202 + *((_QWORD *)v83 + 6) + v82 + 144);
            do
            {
              v121 = *(unsigned int **)(v66 + 56);
              if (v120 >= *v121)
              {
                __break(0xC471u);
                JUMPOUT(0x1988DD74CLL);
              }
              v122 = &v121[v119];
              JSC::CachedIdentifier::decode((WTF::StringImpl **)&v209, (uint64_t)(v3 - 6), (uint64_t)v9);
              v130 = *(WTF::StringImpl **)&v121[v119 + 2];
              *(_QWORD *)&v121[v119 + 2] = v209;
              if (v130)
              {
                if (*(_DWORD *)v130 == 2)
                {
                  WTF::StringImpl::~StringImpl(v130, v123, v124, v125, v126, v127, v128, v129);
                  WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
                }
                else
                {
                  *(_DWORD *)v130 -= 2;
                }
              }
              v131 = *((_DWORD *)v3 - 4);
              *((_QWORD *)v122 + 2) = *(v3 - 3);
              v122[6] = v131;
              v132 = (uint64_t)*(v3 - 1);
              if (v132 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v133 = 0;
                v134 = 0;
                v135 = 0;
              }
              else
              {
                v136 = (int *)((char *)v3 + v132);
                v135 = *(uint64_t *)((char *)v3 + v132 - 8);
                v133 = *v136;
                v134 = 0x100000000;
              }
              v137 = &v121[v119];
              *(_QWORD *)(v137 + 7) = v135;
              *((_BYTE *)v137 + 40) = BYTE4(v134);
              v137[9] = v134 | v133;
              v138 = *(_BYTE *)v3;
              v3 += 7;
              *((_BYTE *)v137 + 44) = v138;
              ++v120;
              v119 += 10;
            }
            while (v120 < *((unsigned int *)v83 + 14));
          }
        }
        JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::decode((uint64_t)(v83 + 64), (uint64_t)v9, (uint64_t *)(v66 + 64));
        v210 = v66;
        v211 = (uint64_t *)v201;
        WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v209, v208, (uint64_t *)&v211, (uint64_t *)&v210, v147, v148, v149, v150);
        v4 = v203;
      }
      v7 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix;
    }
    *(_QWORD *)(SlowCase + 88) = v66;
    if (*((_QWORD *)v5 + 13) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*((_QWORD *)v5 + 14) == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_101;
    }
    else
    {
      v204 = v9;
      v10 = (char *)v9[2];
      v151 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v151 == -1)
        goto LABEL_116;
      v3 = (uint64_t (***)())(v10 + 16);
      v9 = (uint64_t *)&v211;
      *(_QWORD *)&v209 = &v211;
      v152 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v151])(&v209, v10 + 16);
      v153 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v153 == -1)
        goto LABEL_116;
      v154 = v152;
      *(_QWORD *)&v209 = &v211;
      ((void (*)(__int128 *, char *))v7[v153])(&v209, v10 + 16);
      v9 = v204;
      v155 = v204[2];
      v156 = *(unsigned int *)(v155 + 32);
      if ((_DWORD)v156 == -1)
        goto LABEL_116;
      v157 = (unint64_t)&v5[-v154 + 104];
      *(_QWORD *)&v209 = &v211;
      if (v157 < ((uint64_t (*)(__int128 *, uint64_t))v7[v156])(&v209, v155 + 16))
      {
        v158 = 0;
        *(_DWORD *)(SlowCase + 64) = v157;
        *(_QWORD *)(SlowCase + 32) |= 0x8000000000000000;
        goto LABEL_87;
      }
    }
    *(_DWORD *)(SlowCase + 64) = 0;
    v158 = 1;
LABEL_87:
    v159 = *((_QWORD *)v5 + 14);
    v5 += 112;
    if (v159 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v160 = *(_QWORD *)(SlowCase + 32);
    }
    else
    {
      v205 = v158;
      v10 = (char *)v9[2];
      v161 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v161 == -1)
        goto LABEL_116;
      v162 = v9;
      v3 = (uint64_t (***)())(v10 + 16);
      v9 = (uint64_t *)&v211;
      *(_QWORD *)&v209 = &v211;
      v163 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v161])(&v209, v10 + 16);
      v164 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v164 == -1)
        goto LABEL_116;
      v165 = v163;
      *(_QWORD *)&v209 = &v211;
      ((void (*)(__int128 *, char *))v7[v164])(&v209, v10 + 16);
      v166 = v162[2];
      v167 = *(unsigned int *)(v166 + 32);
      if ((_DWORD)v167 == -1)
        goto LABEL_116;
      v9 = v162;
      *(_QWORD *)&v209 = &v211;
      v168 = ((uint64_t (*)(__int128 *, uint64_t))v7[v167])(&v209, v166 + 16);
      v160 = *(_QWORD *)(SlowCase + 32);
      if ((unint64_t)&v5[-v165] < v168)
      {
        v169 = *(_QWORD *)(SlowCase + 40);
        v171 = *(_QWORD *)(SlowCase + 16);
        v170 = *(_QWORD *)(SlowCase + 24);
        v172 = *(_QWORD *)(SlowCase + 8);
        v173 = *(_WORD *)(SlowCase + 48);
        *(_DWORD *)(SlowCase + 68) = (_DWORD)v5 - v165;
        *(_QWORD *)(SlowCase + 8) = v172;
        *(_QWORD *)(SlowCase + 16) = v171;
        *(_QWORD *)(SlowCase + 32) = v160 | 0x8000000000000000;
        *(_QWORD *)(SlowCase + 40) = v169;
        *(_QWORD *)(SlowCase + 24) = v170;
        *(_WORD *)(SlowCase + 48) = v173;
        v174 = (JSC::Decoder **)(SlowCase + 56);
        v175 = v205;
LABEL_94:
        ++*(_DWORD *)v9;
        v176 = *v174;
        *v174 = (JSC::Decoder *)v9;
        if (!v176)
          goto LABEL_100;
        goto LABEL_98;
      }
    }
    *(_DWORD *)(SlowCase + 68) = 0;
    v175 = 1;
    v174 = (JSC::Decoder **)(SlowCase + 56);
    if (v160 < 0)
      goto LABEL_94;
    v176 = *v207;
    *v207 = 0;
    if (!v176)
      goto LABEL_100;
LABEL_98:
    if (*(_DWORD *)v176 != 1)
    {
      --*(_DWORD *)v176;
LABEL_100:
      if (!v175)
        goto LABEL_104;
      goto LABEL_101;
    }
    JSC::Decoder::~Decoder(v176);
    WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
    if (!v175)
      goto LABEL_104;
LABEL_101:
    v10 = (char *)v9[2];
    v177 = *((unsigned int *)v10 + 8);
    if ((_DWORD)v177 != -1)
    {
      v3 = (uint64_t (***)())(v10 + 16);
      *(_QWORD *)&v209 = &v211;
      v178 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v177])(&v209, v10 + 16);
      v179 = *((unsigned int *)v10 + 8);
      if ((_DWORD)v179 != -1)
        break;
    }
LABEL_116:
    v33 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_117:
    v199 = (_QWORD *)((char *)v33 + 41336);
    v200 = (_QWORD *)((char *)v33 + 192);
    JSC::sanitizeStackForVM(v33, v17, v18, v19, v20, v21, v22, v23);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v199, v200, 96, 0, 0);
  }
  v180 = v178;
  *(_QWORD *)&v209 = &v211;
  ((void (*)(__int128 *, char *))v7[v179])(&v209, v10 + 16);
  v210 = (unint64_t)&v206[-v180];
  v211 = (uint64_t *)SlowCase;
  WTF::HashMap<JSC::UnlinkedFunctionExecutable const*,JSC::LeafExecutable,WTF::DefaultHash<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::UnlinkedFunctionExecutable const*>,WTF::HashTraits<JSC::LeafExecutable>,WTF::HashTableTraits>::add<long &>(&v209, (uint64_t *)(v9[2] + 40), (uint64_t *)&v211, (uint64_t *)&v210);
LABEL_104:
  if (*(_BYTE *)(v9[1] + 755))
    __dmb(0xAu);
  v210 = SlowCase;
  v211 = v4;
  WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v209, v208, (uint64_t *)&v211, (uint64_t *)&v210, v62, v63, v64, v65);
  return SlowCase;
}

uint64_t JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::decode<>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  JSC::Profiler::BytecodeSequence *v103;
  JSC::Profiler::BytecodeSequence *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  JSC::Profiler::BytecodeSequence *v115;
  JSC::Profiler::BytecodeSequence *v116;
  _DWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v130;
  char *v131;
  __int128 v132;
  BOOL v133;
  __int128 v134;
  uint64_t v135;

  v4 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
LABEL_26:
    *a3 = 0;
    return v5;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v8 == -1)
    goto LABEL_125;
  *(_QWORD *)&v134 = &v132;
  v10 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v134, v7 + 16);
  v11 = *(unsigned int *)(v7 + 32);
  if ((_DWORD)v11 == -1)
    goto LABEL_125;
  v12 = v10;
  *(_QWORD *)&v134 = &v132;
  ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v134, v7 + 16);
  v13 = (char *)a1 + v4 - v12;
  v15 = (uint64_t *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    v16 = *(_DWORD *)(v14 - 8);
    v17 = (unint64_t)&v13[~((_QWORD)v13 << 32)] ^ ((unint64_t)&v13[~((_QWORD)v13 << 32)] >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char **)(v14 + 16 * v20);
    if (v21 != v13)
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char **)(v14 + 16 * v20);
        ++v22;
        if (v21 == v13)
          goto LABEL_12;
      }
      v20 = *(unsigned int *)(v14 - 4);
    }
LABEL_12:
    if (v20 != *(_DWORD *)(v14 - 4))
    {
      v5 = *(_QWORD *)(v14 + 16 * v20 + 8);
      goto LABEL_26;
    }
  }
  *a3 = 1;
  v23 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_128;
  v24 = (char *)a1 + v23;
  v25 = *(uint64_t *)((char *)a1 + v23);
  if (v25 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v131 = (char *)a1 + v23;
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(unsigned int *)(v27 + 32);
    if ((_DWORD)v28 != -1)
    {
      v29 = v27 + 16;
      *(_QWORD *)&v134 = &v132;
      v30 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v28])(&v134, v27 + 16);
      v31 = *(unsigned int *)(v27 + 32);
      if ((_DWORD)v31 != -1)
      {
        v32 = v30;
        v24 = v131;
        *(_QWORD *)&v134 = &v132;
        ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v134, v29);
        v33 = &v131[v25 - v32];
        v34 = *v15;
        if (!*v15)
          goto LABEL_29;
        v35 = *(_DWORD *)(v34 - 8);
        v36 = (unint64_t)&v33[~((_QWORD)v33 << 32)] ^ ((unint64_t)&v33[~((_QWORD)v33 << 32)] >> 22);
        v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
        v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
        v39 = v35 & ((v38 >> 31) ^ v38);
        v40 = *(char **)(v34 + 16 * v39);
        if (v40 != v33)
        {
          v41 = 1;
          while (v40)
          {
            v39 = ((_DWORD)v39 + v41) & v35;
            v40 = *(char **)(v34 + 16 * v39);
            ++v41;
            if (v40 == v33)
              goto LABEL_28;
          }
          v39 = *(unsigned int *)(v34 - 4);
        }
LABEL_28:
        if (v39 == *(_DWORD *)(v34 - 4))
        {
LABEL_29:
          if (*(_QWORD *)v131 == 0x7FFFFFFFFFFFFFFFLL)
          {
            __break(0xC471u);
            JUMPOUT(0x1988DE06CLL);
          }
          v42 = &v131[*(_QWORD *)v131];
          v50 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v50 = 0;
          *(_QWORD *)(v50 + 8) = 0;
          *(_DWORD *)(v50 + 16) = 0;
          v134 = 0uLL;
          v51 = *((unsigned int *)v42 + 2);
          if (!(_DWORD)v51)
          {
            v54 = 0;
            v53 = 0;
            goto LABEL_45;
          }
          if (v51 < 0x33333334)
          {
            v52 = 5 * v51;
            v53 = (void *)WTF::fastMalloc((WTF *)(5 * v51));
            v54 = 5 * (int)v51 / 5u;
            bzero(v53, v52 - ((int)v52 - 5) % 5u);
            v55 = *((_DWORD *)v42 + 2);
            v56 = *(_QWORD *)v42;
            *(_QWORD *)&v134 = v53;
            *((_QWORD *)&v134 + 1) = __PAIR64__(v51, v54);
            if (v55)
            {
              v130 = v52 / 5;
              v57 = 0;
              v58 = &v42[v56];
              v59 = (unsigned int *)v53;
              do
              {
                if (v51 == v57)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988DE114);
                }
                JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>::decode(v58, a2, v59);
                ++v57;
                v59 = (unsigned int *)((char *)v59 + 5);
                v58 += 8;
              }
              while (v57 < *((unsigned int *)v42 + 2));
              v54 = v130;
            }
LABEL_45:
            JSC::CompactTDZEnvironment::sortCompact((uint64_t)&v134, v43, v44, v45, v46, v47, v48, v49);
            v77 = *(unsigned int *)(v50 + 16);
            if ((_DWORD)v77 != -1)
            {
              if (!(_DWORD)v77)
              {
                v78 = *(unsigned int *)(v50 + 12);
                if ((_DWORD)v78)
                  WTF::VectorTypeOperations<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>::destruct(*(WTF::AtomStringImpl **)v50, (WTF::AtomStringImpl *)(*(_QWORD *)v50 + 5 * v78), v71, v72, v73, v74, v75, v76);
                v79 = *(WTF::AtomStringImpl **)v50;
                if (*(_QWORD *)v50)
                {
                  *(_QWORD *)v50 = 0;
                  *(_DWORD *)(v50 + 8) = 0;
                  WTF::fastFree((unint64_t)v79, v70, v71, v72, v73, v74, v75, v76);
                }
                *(_QWORD *)v50 = v53;
                *(_DWORD *)(v50 + 8) = v54;
                *(_DWORD *)(v50 + 12) = v51;
LABEL_54:
                *(_DWORD *)(v50 + 24) = *((_DWORD *)v42 + 4);
                *(_QWORD *)&v132 = v33;
                v135 = v50;
                v15 = (uint64_t *)(a2 + 24);
                WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v134, (uint64_t *)(a2 + 24), (uint64_t *)&v132, &v135, v73, v74, v75, v76);
                v133 = 0;
                JSC::CompactTDZEnvironmentMap::get(*(JSC::CompactTDZEnvironmentMap **)(*(_QWORD *)(a2 + 8) + 93064), (JSC::CompactTDZEnvironment *)v50, &v133, v80, v81, v82, v83, v84, (JSC::CompactTDZEnvironment **)&v132);
                if (!v133)
                {
                  v85 = (_QWORD *)(a2 + 32);
                  v86 = *(unsigned int *)(a2 + 44);
                  if ((_DWORD)v86 == *(_DWORD *)(a2 + 40))
                  {
                    v87 = v86 + (v86 >> 2);
                    if (v87 >= 0x10)
                      v88 = v87 + 1;
                    else
                      v88 = 16;
                    if (v88 <= v86 + 1)
                      v89 = v86 + 1;
                    else
                      v89 = v88;
                    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v85, v89);
                    v86 = *(unsigned int *)(a2 + 44);
                    v90 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v86);
                  }
                  else
                  {
                    v90 = (_QWORD *)(*v85 + 32 * v86);
                  }
                  *v90 = &off_1E3598878;
                  v90[1] = v50;
                  v90[3] = v90;
                  *(_DWORD *)(a2 + 44) = v86 + 1;
                }
                v92 = (uint64_t *)(a2 + 48);
                v91 = *(_QWORD *)(a2 + 48);
                if (v91
                  || (WTF::HashTable<JSC::CompactTDZEnvironment *,WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>>,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashMap<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironmentMap::Handle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironment *>>::rehash((uint64_t *)(a2 + 48), 8u, 0), (v91 = *v92) != 0))
                {
                  v93 = *(_DWORD *)(v91 - 8);
                }
                else
                {
                  v93 = 0;
                }
                v94 = (~(v50 << 32) + v50) ^ ((unint64_t)(~(v50 << 32) + v50) >> 22);
                v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
                v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
                v97 = v93 & ((v96 >> 31) ^ v96);
                v98 = (uint64_t *)(v91 + 24 * v97);
                v99 = *v98;
                if (*v98)
                {
                  v100 = 0;
                  v101 = 1;
                  do
                  {
                    if (v99 == v50)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1988DE0E8);
                    }
                    if (v99 == -1)
                      v100 = v98;
                    v97 = (v97 + v101) & v93;
                    v98 = (uint64_t *)(v91 + 24 * v97);
                    v99 = *v98;
                    ++v101;
                  }
                  while (*v98);
                  if (v100)
                  {
                    *v100 = 0;
                    v100[1] = 0;
                    v100[2] = 0;
                    --*(_DWORD *)(*v92 - 16);
                    v98 = v100;
                  }
                }
                *v98 = v50;
                v102 = *((_QWORD *)&v132 + 1);
                v26 = v132;
                if (*((_QWORD *)&v132 + 1))
                {
                  ++**((_DWORD **)&v132 + 1);
                  *((_QWORD *)&v134 + 1) = v102;
                  v135 = v26;
                  v103 = WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>>,JSC::CompactTDZEnvironmentKey>((uint64_t *)(v102 + 8), &v135);
                  v104 = *(JSC::Profiler::BytecodeSequence **)(v102 + 8);
                  if (v104)
                    v104 = (JSC::Profiler::BytecodeSequence *)((char *)v104 + 16 * *((unsigned int *)v104 - 1));
                  if (v104 == v103)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1988DE094);
                  }
                  ++*((_DWORD *)v103 + 2);
                }
                else
                {
                  *((_QWORD *)&v134 + 1) = 0;
                }
                v105 = *(_OWORD *)(v98 + 1);
                v98[1] = v26;
                v106 = *((_QWORD *)&v134 + 1);
                v134 = v105;
                v98[2] = v106;
                JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)&v134);
                v107 = *v92;
                if (*v92)
                  v108 = *(_DWORD *)(v107 - 12) + 1;
                else
                  v108 = 1;
                *(_DWORD *)(v107 - 12) = v108;
                v109 = *v92;
                if (*v92)
                  v110 = *(_DWORD *)(v109 - 12);
                else
                  v110 = 0;
                v111 = (*(_DWORD *)(v109 - 16) + v110);
                v112 = *(unsigned int *)(v109 - 4);
                if (v112 > 0x400)
                {
                  if (v112 > 2 * v111)
                    goto LABEL_93;
                }
                else
                {
                  if (3 * v112 > 4 * v111)
                  {
LABEL_93:
                    v24 = v131;
                    goto LABEL_102;
                  }
                  if (!(_DWORD)v112)
                  {
                    v113 = 8;
                    goto LABEL_92;
                  }
                }
                v113 = (_DWORD)v112 << (6 * *(_DWORD *)(v109 - 12) >= (2 * v112));
LABEL_92:
                WTF::HashTable<JSC::CompactTDZEnvironment *,WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle>>,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashMap<JSC::CompactTDZEnvironment *,JSC::CompactTDZEnvironmentMap::Handle,WTF::DefaultHash<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironment *>,WTF::HashTraits<JSC::CompactTDZEnvironmentMap::Handle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironment *>>::rehash((uint64_t *)(a2 + 48), v113, v98);
                goto LABEL_93;
              }
              ((void (*)(__int128 *, uint64_t))off_1E3598858[v77])(&v132, v50);
            }
            *(_QWORD *)v50 = v53;
            *(_DWORD *)(v50 + 8) = v54;
            *(_DWORD *)(v50 + 12) = v51;
            *(_DWORD *)(v50 + 16) = 0;
            goto LABEL_54;
          }
LABEL_128:
          __break(0xC471u);
          JUMPOUT(0x1988DE04CLL);
        }
        v60 = *(_QWORD *)(v34 + 16 * v39 + 8);
        if (!v60)
          goto LABEL_15;
        v61 = *(_QWORD *)(a2 + 48);
        if (v61)
        {
          v62 = *(_DWORD *)(v61 - 8);
          v63 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
          v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
          v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
          v66 = v62 & ((v65 >> 31) ^ v65);
          v67 = (uint64_t *)(v61 + 24 * v66);
          v68 = *v67;
          if (*v67 != v60)
          {
            v69 = 1;
            while (v68)
            {
              v66 = (v66 + v69) & v62;
              v67 = (uint64_t *)(v61 + 24 * v66);
              v68 = *v67;
              ++v69;
              if (*v67 == v60)
                goto LABEL_96;
            }
            v67 = (uint64_t *)(v61 + 24 * *(unsigned int *)(v61 - 4));
          }
LABEL_96:
          if (v67 != (uint64_t *)(v61 + 24 * *(unsigned int *)(v61 - 4)))
          {
            v26 = v67[1];
            v114 = v67[2];
            if (v114)
            {
              ++*(_DWORD *)v114;
              *((_QWORD *)&v132 + 1) = v114;
              *(_QWORD *)&v134 = v26;
              v115 = WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>>,JSC::CompactTDZEnvironmentKey>((uint64_t *)(v114 + 8), (uint64_t *)&v134);
              v116 = *(JSC::Profiler::BytecodeSequence **)(v114 + 8);
              if (v116)
                v116 = (JSC::Profiler::BytecodeSequence *)((char *)v116 + 16 * *((unsigned int *)v116 - 1));
              if (v116 == v115)
              {
                __break(0xC471u);
                JUMPOUT(0x1988DE0B4);
              }
              ++*((_DWORD *)v115 + 2);
              goto LABEL_102;
            }
            goto LABEL_16;
          }
        }
LABEL_126:
        __break(0xC471u);
        JUMPOUT(0x1988DE10CLL);
      }
    }
LABEL_125:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_126;
  }
LABEL_15:
  v26 = 0;
LABEL_16:
  *((_QWORD *)&v132 + 1) = 0;
LABEL_102:
  LOBYTE(v134) = 0;
  v117 = (_DWORD *)JSC::CachedPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink>::decode<>(v24 + 8, a2, &v134);
  if (v117)
  {
    if ((_BYTE)v134)
    {
      v118 = (_QWORD *)(a2 + 32);
      v119 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v119 == *(_DWORD *)(a2 + 40))
      {
        v120 = v119 + (v119 >> 2);
        if (v120 >= 0x10)
          v121 = v120 + 1;
        else
          v121 = 16;
        if (v121 <= v119 + 1)
          v122 = v119 + 1;
        else
          v122 = v121;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v118, v122);
        v119 = *(unsigned int *)(a2 + 44);
        v123 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v119);
      }
      else
      {
        v123 = (_QWORD *)(*v118 + 32 * v119);
      }
      *v123 = &off_1E35988C0;
      v123[1] = v117;
      v123[3] = v123;
      *(_DWORD *)(a2 + 44) = v119 + 1;
    }
    ++*v117;
  }
  v5 = WTF::fastMalloc((WTF *)0x20);
  v124 = *((_QWORD *)&v132 + 1);
  v132 = 0u;
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v26;
  *(_QWORD *)(v5 + 16) = v124;
  v134 = 0u;
  *(_QWORD *)(v5 + 24) = v117;
  JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)&v134);
  JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)&v132);
  *(_QWORD *)&v132 = v13;
  v135 = v5;
  WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v134, v15, (uint64_t *)&v132, &v135, v125, v126, v127, v128);
  return v5;
}

void std::__function::__func<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3598878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3598878;
  a2[1] = v2;
  return result;
}

void std::__function::__func<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedCompactTDZEnvironmentMapHandle::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char v10;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 16);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, unint64_t))off_1E3598858[v9])(&v10, v8);
    *(_DWORD *)(v8 + 16) = -1;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E35988C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E35988C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1},std::allocator<JSC::CachedRefPtr<JSC::CachedTDZEnvironmentLink,JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>>::decode(JSC::Decoder &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  JSC::TDZEnvironmentLink *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(JSC::TDZEnvironmentLink **)(a1 + 8);
  if (v1)
  {
    if (*(_DWORD *)v1 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v1);
      WTF::fastFree(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else
    {
      --*(_DWORD *)v1;
    }
  }
}

_OWORD *JSC::CachedPtr<JSC::CachedSourceProvider,JSC::SourceProvider>::encode(_OWORD *result, JSC::Encoder *this, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  size_t v44;
  int *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64x2_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  size_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;

  v5 = result;
  v7 = (uint64_t *)((char *)this + 48);
  v6 = *((_QWORD *)this + 6);
  if (!v6)
    goto LABEL_9;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = *(_QWORD *)(v6 + 16 * v12);
  if (v13 != a3)
  {
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(v6 + 16 * v12);
      ++v14;
      if (v13 == a3)
        goto LABEL_8;
    }
    v12 = *(unsigned int *)(v6 - 4);
  }
LABEL_8:
  if (v12 == *(_DWORD *)(v6 - 4))
  {
LABEL_9:
    v15 = *((_DWORD *)this + 11);
    if (v15)
    {
      v16 = 0;
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_88;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = JSC::Encoder::malloc(this, 0x10u);
      v23 = (_QWORD *)v22;
      *v5 = v21 + v24;
      *(_QWORD *)v22 = 0x7FFFFFFFFFFFFFFFLL;
      v25 = *(unsigned __int8 *)(a3 + 12);
      *(_BYTE *)(v22 + 8) = v25;
      if (v25 >= 2)
      {
        if (v25 != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DE8E0);
        }
        v54 = *((_DWORD *)this + 11);
        if (!v54)
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x1988DE614);
        }
        v55 = 0;
        v56 = (unint64_t *)*((_QWORD *)this + 4);
        v57 = &v56[3 * v54];
        while (1)
        {
          v58 = v56[1];
          if (*v56 <= v22 && *v56 + v58 > v22)
            break;
          v55 += v58;
          v56 += 3;
          if (v56 == v57)
            goto LABEL_50;
        }
        v60 = *v56 - (v55 + v22);
        v61 = JSC::Encoder::malloc(this, 0x70u);
        *v23 = v60 + v62;
        v63 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        *(int64x2_t *)v61 = v63;
        *(int64x2_t *)(v61 + 16) = v63;
        *(int64x2_t *)(v61 + 32) = v63;
        *(int64x2_t *)(v61 + 48) = v63;
        *(int64x2_t *)(v61 + 64) = v63;
        *(_QWORD *)(v61 + 96) = 0x7FFFFFFFFFFFFFFFLL;
        v64 = v61 + 96;
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v61 + 8), this, *(WTF::StringImpl **)(a3 + 16));
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v61 + 24), this, *(WTF::StringImpl **)(a3 + 64));
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v61 + 40), this, *(WTF::StringImpl **)(a3 + 80));
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v61 + 56), this, *(WTF::StringImpl **)(a3 + 88));
        JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v61 + 72), this, *(WTF::StringImpl **)(a3 + 96));
        *(_QWORD *)(v61 + 80) = *(_QWORD *)(a3 + 104);
        *(_BYTE *)(v61 + 88) = *(_BYTE *)(a3 + 116);
        v65 = *(_DWORD *)(a3 + 140);
        *(_DWORD *)(v61 + 104) = v65;
        if (v65)
        {
          v66 = *((_DWORD *)this + 11);
          if (!v66)
          {
LABEL_59:
            __break(0xC471u);
            JUMPOUT(0x1988DE728);
          }
          v67 = 0;
          v68 = (unint64_t *)*((_QWORD *)this + 4);
          v69 = &v68[3 * v66];
          while (1)
          {
            v70 = v68[1];
            if (*v68 <= v64 && *v68 + v70 > v64)
              break;
            v67 += v70;
            v68 += 3;
            if (v68 == v69)
              goto LABEL_59;
          }
          v72 = *v68 - (v67 + v64);
          v73 = JSC::Encoder::malloc(this, v65);
          *(_QWORD *)(v61 + 96) = v72 + v74;
          if (*(_DWORD *)(v61 + 104))
          {
            v75 = 0;
            do
            {
              if (v75 >= *(unsigned int *)(a3 + 140))
              {
                __break(0xC471u);
                JUMPOUT(0x1988DE8E8);
              }
              *(_BYTE *)(v73 + v75) = *(_BYTE *)(*(_QWORD *)(a3 + 128) + v75);
              ++v75;
            }
            while (v75 < *(unsigned int *)(v61 + 104));
          }
        }
        goto LABEL_76;
      }
      v26 = *((_DWORD *)this + 11);
      if (!v26)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1988DE428);
      }
      v27 = 0;
      v28 = (unint64_t *)*((_QWORD *)this + 4);
      v29 = &v28[3 * v26];
      while (1)
      {
        v30 = v28[1];
        if (*v28 <= v22 && *v28 + v30 > v22)
          break;
        v27 += v30;
        v28 += 3;
        if (v28 == v29)
          goto LABEL_25;
      }
      v32 = *v28 - (v27 + v22);
      v33 = JSC::Encoder::malloc(this, 0x70u);
      *v23 = v32 + v34;
      v35 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      *(int64x2_t *)v33 = v35;
      *(int64x2_t *)(v33 + 16) = v35;
      *(int64x2_t *)(v33 + 32) = v35;
      *(int64x2_t *)(v33 + 48) = v35;
      *(int64x2_t *)(v33 + 64) = v35;
      *(int64x2_t *)(v33 + 96) = v35;
      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 8), this, *(WTF::StringImpl **)(a3 + 16));
      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 24), this, *(WTF::StringImpl **)(a3 + 64));
      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 40), this, *(WTF::StringImpl **)(a3 + 80));
      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 56), this, *(WTF::StringImpl **)(a3 + 88));
      JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 72), this, *(WTF::StringImpl **)(a3 + 96));
      *(_QWORD *)(v33 + 80) = *(_QWORD *)(a3 + 104);
      *(_BYTE *)(v33 + 88) = *(_BYTE *)(a3 + 116);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
      v42 = (_BYTE *)v36;
      v43 = v37;
      v44 = v37;
      if ((v37 & 0xFF00000000) != 0)
      {
        if (v36)
        {
          if ((_DWORD)v37)
          {
            if ((unint64_t)v37 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x1988DE8F0);
            }
            v45 = (int *)WTF::fastCompactMalloc((WTF *)(v37 + 20));
            v46 = v45 + 5;
            *v45 = 2;
            v45[1] = v43;
            *((_QWORD *)v45 + 1) = v45 + 5;
            v45[4] = 4;
            if (v44 == 1)
            {
              *v46 = *v42;
              goto LABEL_74;
            }
            v76 = v42;
            v77 = v44;
LABEL_73:
            memcpy(v46, v76, v77);
LABEL_74:
            JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)(v33 + 104), this, (WTF::StringImpl *)v45);
            if (*v45 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v78, v79, v80, v38, v39, v40, v41);
              WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
            }
            else
            {
              *v45 -= 2;
            }
            goto LABEL_76;
          }
LABEL_70:
          v45 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_74;
        }
LABEL_76:
        v81 = *((_DWORD *)this + 11);
        if (!v81)
        {
LABEL_83:
          __break(0xC471u);
          JUMPOUT(0x1988DE870);
        }
        v82 = 0;
        v83 = (_QWORD *)*((_QWORD *)this + 4);
        v84 = &v83[3 * v81];
        while (1)
        {
          v85 = v83[1];
          if (*v83 <= (unint64_t)v23 && *v83 + v85 > (unint64_t)v23)
            break;
          v82 += v85;
          v83 += 3;
          if (v83 == v84)
            goto LABEL_83;
        }
        v96 = (uint64_t)v23 + v82 - *v83;
        v97 = a3;
        return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v95, v7, &v97, &v96, v38, v39, v40, v41);
      }
      if (!v36)
        goto LABEL_76;
      if (!(_DWORD)v37)
        goto LABEL_70;
      if (v37 < 0x7FFFFFF0uLL)
      {
        v45 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v37 + 20));
        v46 = v45 + 5;
        *v45 = 2;
        v45[1] = v43;
        *((_QWORD *)v45 + 1) = v45 + 5;
        v45[4] = 0;
        if (v44 == 1)
        {
          *(_WORD *)v46 = *(_WORD *)v42;
          goto LABEL_74;
        }
        v76 = v42;
        v77 = 2 * v44;
        goto LABEL_73;
      }
    }
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x1988DE394);
  }
  v47 = *((_DWORD *)this + 11);
  if (!v47)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1988DE5A0);
  }
  v48 = 0;
  v49 = *(_QWORD *)(v6 + 16 * v12 + 8);
  v50 = (_QWORD *)*((_QWORD *)this + 4);
  v51 = &v50[3 * v47];
  while (1)
  {
    v52 = v50[1];
    if (*v50 <= (unint64_t)result && *v50 + v52 > (unint64_t)result)
      break;
    v48 += v52;
    v50 += 3;
    if (v50 == v51)
      goto LABEL_39;
  }
  *(_QWORD *)result = v49 - ((_QWORD)result + v48) + *v50;
  return result;
}

void JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::encode(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  unsigned int *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v9 = *a3;
  if (!*a3)
  {
    *(_DWORD *)(a1 + 16) = 0;
    return;
  }
  v11 = *((unsigned int *)v9 - 3);
  v12 = 8 * v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1988DEC44);
    }
    v14 = WTF::fastMalloc((WTF *)(8 * v11));
    v15 = v14;
    do
    {
      *(_BYTE *)(v15 + 4) = 0;
      *(_DWORD *)v15 = 0;
      *(_WORD *)(v15 + 6) = 0;
      v15 += 8;
    }
    while (v15 != v14 + 8 * v11);
    v9 = *a3;
    if (!*a3)
      goto LABEL_15;
  }
  else
  {
    v14 = 0;
  }
  if (*((_DWORD *)v9 - 3))
  {
    v16 = *((unsigned int *)v9 - 1);
    v17 = v9;
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v17 = v9;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        v18 -= 16;
        if (!v18)
          goto LABEL_15;
      }
    }
    v50 = &v9[2 * v16];
    if (v50 != v17)
    {
      v51 = 0;
      while (1)
      {
        v52 = *v17;
        if ((*v17 & 0xFFFFFFFFFFLL) != 0)
          *(_DWORD *)(*v17 & 0xFFFFFFFFFFLL) += 2;
        if (v51 == v11)
          goto LABEL_64;
        v53 = *((_WORD *)v17 + 4);
        v54 = (unsigned int *)(v14 + 8 * v51);
        v55 = (WTF::StringImpl *)(*v54 | ((unint64_t)*((unsigned __int8 *)v54 + 4) << 32));
        *v54 = v52;
        *((_BYTE *)v54 + 4) = BYTE4(v52);
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
        *((_WORD *)v54 + 3) = v53;
        v17 += 2;
        if (v17 != v50)
        {
          ++v51;
          while ((unint64_t)(*v17 + 1) <= 1)
          {
            v17 += 2;
            if (v17 == v50)
              goto LABEL_15;
          }
          if (v17 != v50)
            continue;
        }
        break;
      }
    }
  }
LABEL_15:
  *(_DWORD *)(a1 + 16) = v11;
  if ((_DWORD)v11)
  {
    v19 = *(_DWORD *)(a2 + 44);
    if (v19)
    {
      v20 = 0;
      v21 = (_QWORD *)(a1 + 8);
      v22 = *(_QWORD **)(a2 + 32);
      v23 = &v22[3 * v19];
      while (1)
      {
        v24 = v22[1];
        if (*v22 <= (unint64_t)v21 && *v22 + v24 > (unint64_t)v21)
          break;
        v20 += v24;
        v22 += 3;
        if (v22 == v23)
          goto LABEL_64;
      }
      v26 = *v22 - ((_QWORD)v21 + v20);
      v27 = JSC::Encoder::malloc((JSC::Encoder *)a2, 16 * (int)v11);
      *v21 = v26 + a2;
      v28 = v27;
      do
      {
        *(_QWORD *)v28 = 0x7FFFFFFFFFFFFFFFLL;
        *(_WORD *)(v28 + 8) = 0;
        v28 += 16;
      }
      while (v28 != v27 + 16 * v11);
      if (*(_DWORD *)(a1 + 16))
      {
        v29 = 0;
        v30 = (unsigned int *)v14;
        do
        {
          if (v11 == v29)
          {
            __break(0xC471u);
            JUMPOUT(0x1988DEC3CLL);
          }
          v31 = (WTF::StringImpl *)(*v30 | ((unint64_t)*((unsigned __int8 *)v30 + 4) << 32));
          if (v31)
          {
            *(_DWORD *)v31 += 2;
            JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)v27, (JSC::Encoder *)a2, v31);
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          else
          {
            JSC::CachedPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl>::encode((_OWORD *)v27, (JSC::Encoder *)a2, 0);
          }
          *(_WORD *)(v27 + 8) = *((_WORD *)v30 + 3);
          ++v29;
          v30 += 2;
          v27 += 16;
        }
        while (v29 < *(unsigned int *)(a1 + 16));
      }
      v40 = (unsigned int *)v14;
      do
      {
        v41 = (WTF::StringImpl *)(*v40 | ((unint64_t)*((unsigned __int8 *)v40 + 4) << 32));
        *v40 = 0;
        *((_BYTE *)v40 + 4) = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        v40 += 2;
        v12 -= 8;
      }
      while (v12);
      goto LABEL_43;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1988DEA24);
  }
LABEL_43:
  if (v14)
    WTF::fastFree(v14, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

_OWORD *JSC::CachedPtr<JSC::CachedVariableEnvironmentRareData,JSC::VariableEnvironment::RareData>::encode(_OWORD *result, JSC::Encoder *this, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  int64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;
  uint64_t **v48;

  if (a3)
  {
    v5 = result;
    v7 = (uint64_t *)((char *)this + 48);
    v6 = *((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_10;
    v8 = *(_DWORD *)(v6 - 8);
    v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(uint64_t ***)(v6 + 16 * v12);
    if (v13 != a3)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(uint64_t ***)(v6 + 16 * v12);
        ++v14;
        if (v13 == a3)
          goto LABEL_9;
      }
      v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      v39 = *((_DWORD *)this + 11);
      if (!v39)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1988DEE80);
      }
      v40 = 0;
      v41 = *(_QWORD *)(v6 + 16 * v12 + 8);
      v42 = (_QWORD *)*((_QWORD *)this + 4);
      v43 = &v42[3 * v39];
      while (1)
      {
        v44 = v42[1];
        if (*v42 <= (unint64_t)result && *v42 + v44 > (unint64_t)result)
          break;
        v40 += v44;
        v42 += 3;
        if (v42 == v43)
          goto LABEL_34;
      }
      *(_QWORD *)result = v41 - ((_QWORD)result + v40) + *v42;
    }
    else
    {
LABEL_10:
      v15 = *((_DWORD *)this + 11);
      if (!v15)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x1988DED64);
      }
      v16 = 0;
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      v18 = &v17[3 * v15];
      while (1)
      {
        v19 = v17[1];
        if (*v17 <= (unint64_t)result && *v17 + v19 > (unint64_t)result)
          break;
        v16 += v19;
        v17 += 3;
        if (v17 == v18)
          goto LABEL_17;
      }
      v21 = *v17 - ((_QWORD)result + v16);
      v22 = (int64x2_t *)JSC::Encoder::malloc(this, 0x18u);
      *v5 = v21 + v23;
      *v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      JSC::CachedHashMap<JSC::CachedRefPtr<JSC::CachedUniquedStringImpl,WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::encode((uint64_t)v22, (uint64_t)this, a3, v24, v25, v26, v27, v28);
      v33 = *((_DWORD *)this + 11);
      if (!v33)
      {
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1988DEDF8);
      }
      v34 = 0;
      v35 = (_QWORD *)*((_QWORD *)this + 4);
      v36 = &v35[3 * v33];
      while (1)
      {
        v37 = v35[1];
        if (*v35 <= (unint64_t)v22 && *v35 + v37 > (unint64_t)v22)
          break;
        v34 += v37;
        v35 += 3;
        if (v35 == v36)
          goto LABEL_25;
      }
      v47 = (uint64_t)v22->i64 + v34 - *v35;
      v48 = a3;
      return WTF::HashMap<char const*,unsigned long,WTF::DefaultHash<char const*>,WTF::HashTraits<char const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<unsigned long>(&v46, v7, (uint64_t *)&v48, &v47, v29, v30, v31, v32);
    }
  }
  return result;
}

unint64_t JSC::CachedPtr<JSC::CachedFunctionCodeBlock,JSC::UnlinkedFunctionCodeBlock>::decode<>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  unint64_t SlowCase;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  int *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  _DWORD *v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  int *v117;
  int v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int *v135;
  _DWORD *v136;
  int v137;
  int *v138;
  int *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  _DWORD *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  __int128 v168;

  v7 = *a1;
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    SlowCase = 0;
LABEL_29:
    *(_BYTE *)a3 = 0;
    return SlowCase;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(unsigned int *)(v10 + 32);
  if ((_DWORD)v11 == -1
    || (v4 = a1,
        v3 = (uint64_t *)(v10 + 16),
        v5 = &v167,
        *(_QWORD *)&v168 = &v167,
        v12 = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4dataEvE3__0JZNKS9_4dataEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v168, v10 + 16), v13 = *(unsigned int *)(v10 + 32), (_DWORD)v13 == -1))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v14 = v12;
    *(_QWORD *)&v168 = &v167;
    ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK3JSC12CachePayload4sizeEvE3__0JZNKS9_4sizeEvE3__1EEEEEJRKNS0_6__implIJNS6_14FileSystemImpl14MappedFileDataENS_4pairINS6_9MallocPtrIhNS6_10FastMallocEEEmEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v168, v10 + 16);
    v10 = (uint64_t)v4 + v7 - v14;
    v3 = (uint64_t *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 24);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 - 8);
      v24 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(_QWORD *)(v22 + 16 * v27);
      if (v28 != v10)
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(_QWORD *)(v22 + 16 * v27);
          ++v29;
          if (v28 == v10)
            goto LABEL_12;
        }
        v27 = *(unsigned int *)(v22 - 4);
      }
LABEL_12:
      if (v27 != *(_DWORD *)(v22 - 4))
      {
        SlowCase = *(_QWORD *)(v22 + 16 * v27 + 8);
        goto LABEL_29;
      }
    }
    *(_BYTE *)a3 = 1;
    if (*v4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(0xC471u);
      JUMPOUT(0x1988DF7A8);
    }
    v165 = *v4;
    v5 = (uint64_t *)((char *)v4 + *v4);
    v7 = *(_QWORD *)(a2 + 8);
    a3 = *(_QWORD *)(v7 + 40904);
    if (!a3)
      a3 = JSC::GCClient::Heap::unlinkedFunctionCodeBlockSpaceSlow((JSC::Heap **)(v7 + 37552));
    SlowCase = *(_QWORD *)(a3 + 24);
    if (SlowCase < *(_QWORD *)(a3 + 32))
      goto LABEL_17;
    SlowCase = *(_QWORD *)(a3 + 40);
    if ((SlowCase & 1) == 0)
    {
      v164 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = SlowCase + HIDWORD(v164);
      *(_QWORD *)(a3 + 40) = SlowCase + (int)v164;
LABEL_17:
      *(_QWORD *)(a3 + 24) = SlowCase + 224;
      goto LABEL_18;
    }
  }
  JSC::sanitizeStackForVM((JSC *)v7, v15, v16, v17, v18, v19, v20, v21);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a3, v7 + 192, 224, 0, 0);
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v30 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 41736);
  v31 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)SlowCase = v30 >> 4;
  *(_DWORD *)(SlowCase + 4) = v31;
  v32 = *(unsigned __int16 *)(SlowCase + 28);
  *(_DWORD *)(SlowCase + 8) = *(_DWORD *)v5;
  *(_DWORD *)(SlowCase + 12) = *((_DWORD *)v5 + 1);
  *(_DWORD *)(SlowCase + 16) = *(_DWORD *)(SlowCase + 16) & 0x80000000 | v5[3] & 0x7FFFFFFF;
  v33 = v32 | (*(unsigned __int8 *)(SlowCase + 30) << 16);
  v34 = *(_QWORD *)(SlowCase + 20) & 0xFFFFFFFF80000000 | *((_DWORD *)v5 + 7) & 0x7FFFFFFF;
  *(_QWORD *)(SlowCase + 20) = v34;
  v35 = v34 & 0xFFFFFFFF7FFFFFFFLL | (*((_DWORD *)v5 + 2) << 31);
  *(_QWORD *)(SlowCase + 20) = v35;
  v36 = v35 & 0x80000000FFFFFFFFLL | ((unint64_t)(v5[4] & 0x7FFFFFFF) << 32);
  *(_QWORD *)(SlowCase + 20) = v36;
  v37 = v36 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*((_DWORD *)v5 + 2) >> 1) << 63);
  *(_QWORD *)(SlowCase + 20) = v37;
  v38 = v33 & 0xFFFFFFFE | (*((_DWORD *)v5 + 2) >> 2) & 1;
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v38;
  v39 = v38 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v5 + 2) >> 3) & 1));
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v39;
  v40 = v39 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v5 + 2) >> 4) & 1));
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v40;
  v41 = v40 & 0xFFFFFFF7 | (8 * ((*((_DWORD *)v5 + 2) >> 5) & 1));
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v41;
  v42 = v41 & 0xFFFFFFEF | (16 * ((*((_DWORD *)v5 + 2) >> 6) & 1));
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v42;
  v43 = v42 & 0xFFFFFFDF | (32 * ((*((_DWORD *)v5 + 2) >> 13) & 1));
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v43;
  v44 = v43 & 0xFFFFFF3F | (((*((_DWORD *)v5 + 2) >> 7) & 3) << 6);
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v44;
  v45 = v44 & 0xFFFFFCFF | (((*((_DWORD *)v5 + 2) >> 9) & 3) << 8);
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v45;
  v46 = v45 & 0xFFFFF3FF | (((*((_DWORD *)v5 + 2) >> 11) & 3) << 10);
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 28) = v46;
  v46 &= 0xFFFE0FFF;
  LODWORD(v34) = v46 | ((unsigned __int16)*((_DWORD *)v5 + 2) >> 14 << 12);
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_BYTE *)(SlowCase + 30) = BYTE2(v46);
  *(_WORD *)(SlowCase + 28) = v34;
  v47 = v34 & 0xFFFC3FFF | (2 * (v5[1] & 0x10000));
  *(_WORD *)(SlowCase + 28) = v34;
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_BYTE *)(SlowCase + 30) = BYTE2(v47);
  LODWORD(v34) = *((_DWORD *)v5 + 2) >> 17;
  v47 &= 0xF23FFFu;
  *(_WORD *)(SlowCase + 28) = v47;
  *(_QWORD *)(SlowCase + 20) = v37;
  *(_WORD *)(SlowCase + 30) = ((v47 & 0xFFF3FFFF | ((v34 & 3) << 18)) >> 16);
  *(_QWORD *)(SlowCase + 32) = 0;
  *(_WORD *)(SlowCase + 40) = *((_WORD *)v5 + 6);
  *(_BYTE *)(SlowCase + 42) = *((_BYTE *)v5 + 14);
  *(_BYTE *)(SlowCase + 43) = *((_BYTE *)v5 + 15);
  *(_QWORD *)(SlowCase + 44) = v5[2];
  LOBYTE(v168) = 0;
  v48 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>(v5 + 33, (_QWORD *)a2, &v168);
  if (v48)
  {
    if ((_BYTE)v168)
    {
      v49 = (_QWORD *)(a2 + 32);
      v50 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v50 == *(_DWORD *)(a2 + 40))
      {
        v51 = v50 + (v50 >> 2);
        if (v51 >= 0x10)
          v52 = v51 + 1;
        else
          v52 = 16;
        if (v52 <= v50 + 1)
          v53 = v50 + 1;
        else
          v53 = v52;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v49, v53);
        v50 = *(unsigned int *)(a2 + 44);
        v54 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v50);
      }
      else
      {
        v54 = (_QWORD *)(*v49 + 32 * v50);
      }
      *v54 = &off_1E35987D8;
      v54[1] = v48;
      v54[3] = v54;
      *(_DWORD *)(a2 + 44) = v50 + 1;
    }
    *v48 += 2;
  }
  *(_DWORD *)(SlowCase + 52) = (_DWORD)v48;
  *(_BYTE *)(SlowCase + 56) = BYTE4(v48);
  LOBYTE(v168) = 0;
  v55 = JSC::CachedPtr<JSC::CachedStringImpl,WTF::StringImpl>::decode<>(v5 + 34, (_QWORD *)a2, &v168);
  if (v55)
  {
    if ((_BYTE)v168)
    {
      v56 = (_QWORD *)(a2 + 32);
      v57 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v57 == *(_DWORD *)(a2 + 40))
      {
        v58 = v57 + (v57 >> 2);
        if (v58 >= 0x10)
          v59 = v58 + 1;
        else
          v59 = 16;
        if (v59 <= v57 + 1)
          v60 = v57 + 1;
        else
          v60 = v59;
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v56, v60);
        v57 = *(unsigned int *)(a2 + 44);
        v61 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v57);
      }
      else
      {
        v61 = (_QWORD *)(*v56 + 32 * v57);
      }
      *v61 = &off_1E35987D8;
      v61[1] = v55;
      v61[3] = v61;
      *(_DWORD *)(a2 + 44) = v57 + 1;
    }
    *v55 += 2;
  }
  *(_DWORD *)(SlowCase + 57) = (_DWORD)v55;
  *(_BYTE *)(SlowCase + 61) = BYTE4(v55);
  *(_QWORD *)(SlowCase + 64) = 0;
  JSC::CachedMetadataTable::decode((uint64_t *)(SlowCase + 72), (uint64_t)v5 + 52);
  *(_QWORD *)(SlowCase + 80) = JSC::CachedPtr<JSC::CachedInstructionStream,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>::decode<>(v5 + 35, a2, &v168);
  *(_OWORD *)(SlowCase + 88) = 0u;
  *(_OWORD *)(SlowCase + 104) = 0u;
  *(_OWORD *)(SlowCase + 120) = 0u;
  *(_OWORD *)(SlowCase + 136) = 0u;
  v62 = JSC::CachedPtr<JSC::CachedCodeBlockRareData,JSC::UnlinkedCodeBlock::RareData>::decode<>(v5 + 32, a2, &v168);
  v63 = 0;
  *(_QWORD *)(SlowCase + 160) = 0;
  *(_QWORD *)(SlowCase + 168) = 0;
  *(_QWORD *)(SlowCase + 152) = v62;
  *(_DWORD *)(SlowCase + 176) = 0;
  v64 = *((unsigned int *)v5 + 9);
  if ((_DWORD)v64)
  {
    v63 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v64 + 8));
    *v63 = v64;
    bzero(v63 + 2, 8 * v64);
  }
  *(_QWORD *)(SlowCase + 184) = v63;
  v65 = *((unsigned int *)v5 + 10);
  if ((_DWORD)v65)
  {
    v66 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * *((unsigned int *)v5 + 10)) | 4));
    *v66 = v65;
    bzero(v66 + 1, 8 * v65);
  }
  else
  {
    v66 = 0;
  }
  *(_QWORD *)(SlowCase + 192) = v66;
  v67 = *((unsigned int *)v5 + 11);
  if ((_DWORD)v67)
  {
    v68 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v67 + 4));
    *v68 = v67;
    bzero(v68 + 1, 2 * v67);
  }
  else
  {
    v68 = 0;
  }
  *(_QWORD *)(SlowCase + 200) = v68;
  v69 = *((unsigned int *)v5 + 12);
  if ((_DWORD)v69)
  {
    v70 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v69 + 4));
    *v70 = v69;
    bzero(v70 + 1, 2 * v69);
  }
  else
  {
    v70 = 0;
  }
  *(_QWORD *)(SlowCase + 208) = v70;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 755))
    __dmb(0xAu);
  v71 = *((unsigned int *)v5 + 78);
  if ((_DWORD)v71)
  {
    v72 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v71 + 8));
    *v72 = v71;
    bzero(v72 + 2, 8 * v71);
    v80 = *(_QWORD *)(SlowCase + 112);
    *(_QWORD *)(SlowCase + 112) = v72;
    if (v80)
      WTF::fastFree(v80, v73, v74, v75, v76, v77, v78, v79);
    if (*((_DWORD *)v5 + 78))
    {
      v81 = 0;
      v82 = (uint64_t *)((char *)v5 + v5[38] + 304);
      v83 = 2;
      while (1)
      {
        v84 = *(unsigned int **)(SlowCase + 112);
        if (v81 >= *v84)
          break;
        JSC::CachedJSValue::decode(v82, a2, (uint64_t)&v84[v83], SlowCase, v76, v77, v78, v79);
        ++v81;
        v83 += 2;
        v82 += 2;
        if (v81 >= *((unsigned int *)v5 + 78))
          goto LABEL_63;
      }
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x1988DF748);
    }
  }
LABEL_63:
  v85 = *((unsigned int *)v5 + 82);
  if ((_DWORD)v85)
  {
    v93 = (_DWORD *)WTF::fastMalloc((WTF *)(v85 + 4));
    *v93 = v85;
    v94 = *(_QWORD *)(SlowCase + 120);
    *(_QWORD *)(SlowCase + 120) = v93;
    if (v94)
      WTF::fastFree(v94, v86, v87, v88, v89, v90, v91, v92);
    v95 = *((unsigned int *)v5 + 82);
    if ((_DWORD)v95)
    {
      v96 = (char *)v5 + v5[40] + 320;
      v97 = *(_DWORD **)(SlowCase + 120);
      v100 = *v97;
      v98 = v97 + 1;
      v99 = v100;
      do
      {
        if (!v99)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DF768);
        }
        v101 = *v96++;
        *v98++ = v101;
        --v99;
        --v95;
      }
      while (v95);
    }
  }
  v102 = v5[42];
  if (v102 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(0xC471u);
    JUMPOUT(0x1988DF7F4);
  }
  v103 = (unsigned int *)((char *)v5 + v102 + 336);
  v104 = *v103;
  v105 = v103[1];
  v106 = v103[2];
  v107 = WTF::fastMalloc((WTF *)(8 * v104 + 4 * (v106 + v105) + 24));
  *(_QWORD *)v107 = 0;
  *(_DWORD *)(v107 + 8) = v104;
  *(_DWORD *)(v107 + 12) = v105;
  *(_DWORD *)(v107 + 16) = v106;
  v115 = (v105 + 2 * v104 + v106);
  if ((_DWORD)v115)
  {
    v116 = (_DWORD *)(v107 + 24);
    v117 = (int *)((char *)v103 + *((_QWORD *)v103 + 2) + 16);
    do
    {
      v118 = *v117++;
      *v116++ = v118;
      --v115;
    }
    while (v115);
  }
  v119 = *(_QWORD *)(SlowCase + 160);
  *(_QWORD *)(SlowCase + 160) = v107;
  WTF::fastFree(v119, v108, v109, v110, v111, v112, v113, v114);
  WTF::fastFree(0, v120, v121, v122, v123, v124, v125, v126);
  v127 = *((unsigned int *)v5 + 90);
  if ((_DWORD)v127)
  {
    if (v127 >> 29)
      goto LABEL_105;
    v128 = WTF::fastMalloc((WTF *)(8 * v127));
    v133 = v128;
    if (*((_DWORD *)v5 + 90))
    {
      v134 = 0;
      v135 = (int *)((char *)v4 + v5[44] + v165 + 356);
      v136 = (_DWORD *)(v128 + 4);
      do
      {
        if (v127 == v134)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DF8B0);
        }
        *(v136 - 1) = *(v135 - 1);
        v137 = *v135;
        v135 += 2;
        *v136 = v137;
        v136 += 2;
        ++v134;
      }
      while (v134 < *((unsigned int *)v5 + 90));
    }
    v138 = (int *)(v128 + 8 * v127);
    v139 = (int *)v128;
    do
    {
      WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int const&>(&v168, (uint64_t *)(SlowCase + 144), v139, v139 + 1, v129, v130, v131, v132);
      v139 += 2;
    }
    while (v139 != v138);
    WTF::fastFree(v133, v140, v141, v142, v129, v130, v131, v132);
  }
  v143 = *((unsigned int *)v5 + 74);
  if ((_DWORD)v143)
  {
    v151 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v143 + 4));
    *v151 = v143;
    v152 = *(_QWORD *)(SlowCase + 64);
    *(_QWORD *)(SlowCase + 64) = v151;
    if (v152)
      WTF::fastFree(v152, v144, v145, v146, v147, v148, v149, v150);
    if (*((_DWORD *)v5 + 74))
    {
      v153 = 0;
      v154 = (uint64_t)v5 + v5[36] + 288;
      v155 = *(unsigned int **)(SlowCase + 64);
      v158 = *v155;
      v156 = v155 + 1;
      v157 = v158;
      do
      {
        if (v157 == v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1988DF788);
        }
        v156[v153] = *(_DWORD *)(v154 + 4 * v153);
        ++v153;
      }
      while (v153 < *((unsigned int *)v5 + 74));
    }
  }
  _ZNK3JSC12CachedVectorINS_16CachedIdentifierELm0EN3WTF15CrashOnOverflowENS2_10FastMallocEE6decodeIJENS2_11FixedVectorINS_10IdentifierEEEEEvRNS_7DecoderERT0_DpT_((uint64_t)(v5 + 46), a2, (unsigned int **)(SlowCase + 104));
  JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>((uint64_t)(v5 + 48), (uint64_t *)a2, (unint64_t *)(SlowCase + 128), SlowCase);
  JSC::CachedVector<JSC::CachedWriteBarrier<JSC::CachedFunctionExecutable,JSC::UnlinkedFunctionExecutable>,0ul,WTF::CrashOnOverflow,WTF::FastMalloc>::decode<JSC::UnlinkedCodeBlock *,WTF::FixedVector<JSC::WriteBarrier<JSC::UnlinkedFunctionExecutable,WTF::RawPtrTraits<JSC::UnlinkedFunctionExecutable>>>>((uint64_t)(v5 + 50), (uint64_t *)a2, (unint64_t *)(SlowCase + 136), SlowCase);
  v166 = SlowCase;
  v167 = v10;
  WTF::HashMap<long,void *,WTF::DefaultHash<long>,WTF::HashTraits<long>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v168, v3, &v167, (uint64_t *)&v166, v159, v160, v161, v162);
  return SlowCase;
}

uint64_t JSC::PropertyTable::add(JSC::PropertyTable *this, JSC::VM *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;

  v10 = *(_DWORD **)a3;
  v11 = *((_QWORD *)this + 2);
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v13 = *((unsigned int *)this + 2);
  v14 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v11 & 1) != 0)
  {
    if ((v14 & 0x20) != 0)
      v14 = v10[8];
    v15 = *((_DWORD *)this + 3);
    v16 = (v14 >> 8) & *(_QWORD *)&v15;
    v17 = *(unsigned __int8 *)(v12 + v16);
    if (*(_BYTE *)(v12 + v16))
    {
      v18 = 1;
      while (1)
      {
        v19 = *(_QWORD *)(v12 + v13 + 8 * (v17 - 1));
        if (v10 == (_DWORD *)(v19 & 0xFFFFFFFFFFFFLL))
          break;
        v16 = ((_DWORD)v16 + v18) & v15;
        v17 = *(unsigned __int8 *)(v12 + v16);
        ++v18;
        if (!*(_BYTE *)(v12 + v16))
          goto LABEL_11;
      }
      result = (v19 >> 16) & 0xFF00000000 | HIBYTE(v19);
      goto LABEL_10;
    }
  }
  else
  {
    if ((v14 & 0x20) != 0)
      v14 = v10[8];
    v31 = *((_DWORD *)this + 3);
    LODWORD(v16) = v31 & (v14 >> 8);
    v32 = *(_DWORD *)(v12 + 4 * v16);
    if (v32)
    {
      v33 = v12 + 4 * v13;
      v34 = 1;
      while (1)
      {
        v35 = (v32 - 1);
        if (v10 == *(_DWORD **)(v33 + 16 * v35))
          break;
        LODWORD(v16) = (v16 + v34) & v31;
        v32 = *(_DWORD *)(v12 + 4 * v16);
        ++v34;
        if (!v32)
          goto LABEL_11;
      }
      result = *(unsigned int *)(v33 + 16 * v35 + 8) | ((unint64_t)*(unsigned __int8 *)(v33 + 16 * v35 + 12) << 32);
LABEL_10:
      if ((_DWORD)result != -1)
        return result;
    }
  }
LABEL_11:
  *v10 += 2;
  v21 = *((_DWORD *)this + 6);
  v22 = a3[2];
  v24 = (v11 & 1) == 0 || v22 < 256;
  if (*((_DWORD *)this + 7) + v21 >= v13 >> 1 || !v24)
  {
    JSC::PropertyTable::rehash(this, a2, (v21 + 1), v22 < 256, a5, a6, a7, a8);
    v36 = *(_QWORD *)a3;
    v11 = *((_QWORD *)this + 2);
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v37 = *((unsigned int *)this + 2);
    v38 = *(_DWORD *)(*(_QWORD *)a3 + 16);
    if ((v11 & 1) != 0)
    {
      if ((v38 & 0x20) != 0)
        v38 = *(_DWORD *)(v36 + 32);
      v39 = *((_DWORD *)this + 3);
      v16 = (v38 >> 8) & *(_QWORD *)&v39;
      v40 = *(unsigned __int8 *)(v12 + v16);
      if (*(_BYTE *)(v12 + v16))
      {
        v41 = v12 + v37;
        v42 = 1;
        do
        {
          if (v36 == (*(_QWORD *)(v41 + 8 * (v40 - 1)) & 0xFFFFFFFFFFFFLL))
            break;
          v16 = ((_DWORD)v16 + v42) & v39;
          v40 = *(unsigned __int8 *)(v12 + v16);
          ++v42;
        }
        while (*(_BYTE *)(v12 + v16));
      }
    }
    else
    {
      if ((v38 & 0x20) != 0)
        v38 = *(_DWORD *)(v36 + 32);
      v43 = *((_DWORD *)this + 3);
      LODWORD(v16) = v43 & (v38 >> 8);
      v44 = *(_DWORD *)(v12 + 4 * v16);
      if (v44)
      {
        v45 = v12 + 4 * v37;
        v46 = 1;
        do
        {
          if (v36 == *(_QWORD *)(v45 + 16 * (v44 - 1)))
            break;
          LODWORD(v16) = (v16 + v46) & v43;
          v44 = *(_DWORD *)(v12 + 4 * v16);
          ++v46;
        }
        while (v44);
      }
    }
  }
  v25 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
  v26 = v25 + 1;
  if ((v11 & 1) != 0)
  {
    *(_BYTE *)(v12 + v16) = v26;
    v27 = a3[2];
    v28 = *((unsigned __int8 *)a3 + 12);
    *(_QWORD *)(v12 + *((unsigned int *)this + 2) + 8 * v25) = *(_QWORD *)a3 | ((unint64_t)(v28 | (v27 << 8)) << 48);
  }
  else
  {
    *(_DWORD *)(v12 + 4 * v16) = v26;
    v29 = (_QWORD *)(v12 + 4 * *((unsigned int *)this + 2) + 16 * v25);
    v30 = *(_QWORD *)a3;
    *(_QWORD *)((char *)v29 + 5) = *(_QWORD *)((char *)a3 + 5);
    *v29 = v30;
    v27 = a3[2];
    v28 = *((unsigned __int8 *)a3 + 12);
  }
  ++*((_DWORD *)this + 6);
  return v27 | (unint64_t)(v28 << 32);
}

void JSC::CodeCacheMap::pruneSlowCase(JSC::CodeCacheMap *this)
{
  uint64_t v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  _QWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 4) = (v2 - *((_QWORD *)this + 2)) & ~((v2 - *((_QWORD *)this + 2)) >> 63);
  *((_QWORD *)this + 2) = v2;
  *((double *)this + 3) = WTF::ApproximateTime::now(this);
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 5);
  if (v11 < v10)
  {
    *((_QWORD *)this + 5) = v10;
    v11 = v10;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v13 = *(_QWORD *)this;
    v14 = *((_QWORD *)this + 1);
    if (v14 <= v11)
      break;
    if (!v13)
    {
      v17 = 0;
      goto LABEL_13;
    }
    v15 = *(_DWORD *)(v13 - 4);
    v16 = (_QWORD *)(v13 + 56 * v15);
    if (!*(_DWORD *)(v13 - 12))
    {
LABEL_61:
      v17 = v16;
      goto LABEL_13;
    }
LABEL_7:
    v17 = *(_QWORD **)this;
    if (v15)
    {
      v17 = *(_QWORD **)this;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 7;
        if (v17 == v16)
          goto LABEL_61;
      }
    }
LABEL_13:
    v18 = *(unsigned int *)(16 * (**(_DWORD **)v17[5] & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (**(_DWORD **)v17[5] & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &JSC::UnlinkedCodeBlock::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &JSC::UnlinkedCodeBlock::s_info && v20 != 0);
    }
    if (v19)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 56))(*v17);
      v13 = *(_QWORD *)this;
      v14 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v14 - *((int *)v17 + 3) + *((int *)v17 + 2);
    if (v13)
    {
      v23 = (_QWORD *)(v13 + 56 * *(unsigned int *)(v13 - 4));
      if (v23 == v17)
        goto LABEL_38;
    }
    else
    {
      if (!v17)
        goto LABEL_38;
      v23 = 0;
    }
    if (v23 == v17)
      goto LABEL_38;
    v24 = v17[2];
    v17[2] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v24, v3, v4, v5, v6, v7, v8, v9);
        v36 = *(_QWORD *)(StatusReg + 752);
        if (v36)
        {
          if (!(v24 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v24 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v24)) & 1) != 0)
          {
LABEL_46:
            v37 = *(unsigned int *)(v36 + 8000);
            if (v37 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v36, v24, (os_unfair_lock_s *)5, v5, v6, v7, v8, v9);
            }
            else
            {
              *(_QWORD *)(v36 + 8 * v37) = v24 | 0x5000000000000;
              *(_DWORD *)(v36 + 8000) = v37 + 1;
            }
            goto LABEL_30;
          }
          if (v24 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v24 >> 24)
          {
            v5 = 0;
          }
          else
          {
            v5 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v24 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v5 == 1)
              goto LABEL_46;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v36, v24, 1, v5, v6, v7, v8, v9);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v24, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
LABEL_30:
    v25 = (_DWORD *)*v17;
    *v17 = 0;
    if (v25)
    {
      if (v25[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      else
        --v25[2];
    }
    *v17 = -1;
    v17[2] = 0;
    *((_DWORD *)v17 + 6) = 0;
    v26 = v17[5];
    if (v26)
    {
      v32 = (uint64_t *)(v26 - 16);
      v33 = *(_QWORD *)(((v26 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v34 = *(uint64_t **)(v26 - 8);
      if (v34)
      {
        v35 = *v32;
        *v34 = *v32;
        *(_QWORD *)(v35 + 8) = v34;
        *v32 = 0;
        v32[1] = 0;
      }
      *v32 = *(_QWORD *)(v33 + 40);
      *(_QWORD *)(v33 + 40) = v32;
      v17[5] = 0;
    }
    ++*(_DWORD *)(*(_QWORD *)this - 16);
    v27 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v28 = *(_DWORD *)(v27 - 12) - 1;
    else
      v28 = -1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v30 = 6 * *(_DWORD *)(v29 - 12);
      v31 = *(_DWORD *)(v29 - 4);
      if (v30 < v31 && v31 >= 9)
        WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::rehash(this, v31 >> 1, 0);
    }
LABEL_38:
    v11 = *((_QWORD *)this + 5);
  }
  if (v13 && *(_DWORD *)(v13 - 12) >= 0x7D0u)
  {
    v15 = *(_DWORD *)(v13 - 4);
    v16 = (_QWORD *)(v13 + 56 * v15);
    goto LABEL_7;
  }
}

_QWORD *WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[7 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[7 * v1];
  if ((_DWORD)v1)
  {
    v3 = 56 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 7;
      v3 -= 56;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t JSC::writeCodeBlock(uint64_t result, _DWORD **a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  v2 = *(unsigned int *)(16 * (**a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (**a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &JSC::UnlinkedCodeBlock::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &JSC::UnlinkedCodeBlock::s_info && v4 != 0);
  }
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

unint64_t JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedProgramCodeBlock,JSC::ProgramExecutable>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  _DWORD *v89;
  WTF::AtomStringImpl *v90;
  WTF::AtomStringImpl *v91;
  WTF::AtomStringImpl *v92;
  __int128 v93;
  __int128 v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  WTF *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  _DWORD *v112;
  WTF::StringImpl *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  int v186;
  _QWORD *v187;
  int v188;
  _QWORD *v189;
  int v190;
  WTF *v191;
  int v192;
  uint64_t v193;
  WTF *v194[2];
  unint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  int v199;
  int v200;
  int v201;
  WTF::StringImpl *v202[2];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  int v208;
  __int16 v209;
  char v210;
  _QWORD v211[2];

  v16 = *(unsigned __int16 *)(a3 + 70);
  v17 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    ++v17[2];
  v18 = *(_QWORD *)(a4 + 8);
  v196 = v17;
  v197 = v18;
  v198 = 0;
  v193 = a7;
  v199 = (a7 << 6) | (8 * a9) | v16 & 0x10 | a5 | (v16 >> 6) & 0xC | (32 * a6) | 2;
  v200 = -1;
  v201 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17) ^ v199;
  if (*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40))
    goto LABEL_9;
  v23 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_152;
  if (*(_DWORD *)(v23 - 12) >= 0x7D0u)
  {
LABEL_9:
    v20 = mach_approximate_time();
    v22 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v22 != -1)
    {
      v202[0] = (WTF::StringImpl *)v211;
      v194[0] = (WTF *)v202;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v194, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v21) = dword_1ECF4400C;
    if ((double)(v20 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v21 * 1000000000.0)
       - *(double *)(a1 + 24) >= 10.0
      || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000)
    {
      goto LABEL_151;
    }
    v23 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_152;
    if (*(_DWORD *)(v23 - 12) >= 0x7D0u)
    {
LABEL_151:
      JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
      v23 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_152;
    }
  }
  v24 = WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::Hash>,JSC::SourceCodeKey>(v23, &v196, v19);
  v32 = *(_QWORD *)a1;
  if (v24)
  {
    if (!v32)
      goto LABEL_14;
    v33 = *(_DWORD *)(v32 - 4);
  }
  else
  {
    if (!v32)
      goto LABEL_152;
    v33 = *(_DWORD *)(v32 - 4);
    v24 = (_QWORD *)(v32 + 56 * v33);
  }
  if (v24 == (_QWORD *)(v32 + 56 * v33))
  {
LABEL_152:
    v185 = (WTF *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v196 + 32))(v202);
    if (v202[0])
    {
      if (JSC::CachePayload::size((WTF::StringImpl *)((char *)v202[0] + 16)))
      {
        v191 = v202[0];
        ++*(_DWORD *)v202[0];
        v194[0] = v191;
        v42 = JSC::decodeCodeBlock<JSC::UnlinkedProgramCodeBlock>(a2, (uint64_t)&v196, v194);
        if (v194[0])
          WTF::RefCounted<JSC::CachedBytecode>::deref(v194[0], v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        v42 = 0;
      }
      v185 = v202[0];
      v202[0] = 0;
      if (v185)
        WTF::RefCounted<JSC::CachedBytecode>::deref(v185, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      v42 = 0;
    }
    if ((_BYTE)word_1ECF4C738 && WTF::isMainThread(v185) && !v42)
    {
      __break(0xC471u);
      JUMPOUT(0x1988E09C4);
    }
    goto LABEL_22;
  }
LABEL_14:
  v35 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v36 = v34 - v24[6];
  if (v36 > v35)
  {
    v38 = SHIDWORD(v197) - (uint64_t)(int)v197;
    v40 = v35 + (v38 << 7);
  }
  else
  {
    if (v35 >= 0)
      v37 = *(_QWORD *)(a1 + 40);
    else
      v37 = v35 + 1;
    v38 = SHIDWORD(v197) - (uint64_t)(int)v197;
    if (v36 >= v37 >> 1)
      goto LABEL_20;
    v39 = v35 - 4 * v38;
    *(_QWORD *)(a1 + 40) = v39;
    v40 = *(_QWORD *)(a1 + 32);
    if (v39 >= v40)
      goto LABEL_20;
  }
  *(_QWORD *)(a1 + 40) = v40;
LABEL_20:
  v24[6] = v34;
  *(_QWORD *)(a1 + 48) = v38 + v34;
  v41 = (unint64_t *)v24[5];
  if (!v41)
    goto LABEL_34;
  v42 = *v41;
LABEL_22:
  if (v42 && BYTE1(dword_1ECF4C6C3))
  {
    v43 = *(_DWORD *)(v42 + 44);
    v44 = *(_DWORD *)(v42 + 48);
    v45 = *(_DWORD *)(a4 + 16);
    if (v43)
      v46 = 1;
    else
      v46 = *(_DWORD *)(a4 + 20) + 1;
    v47 = *(_QWORD *)(v42 + 20);
    v48 = *(unsigned __int8 *)(v42 + 30);
    *(_WORD *)(a3 + 66) = *(_WORD *)(v42 + 40);
    *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | (v48 >> 2) & 3;
    *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | (v47 >> 63);
    *(_DWORD *)(a3 + 88) = v43 + v45 + 1;
    *(_DWORD *)(a3 + 92) = v46 + v44;
    v49 = (WTF::StringImpl *)(*(unsigned int *)(v42 + 52) | ((unint64_t)*(unsigned __int8 *)(v42 + 56) << 32));
    if (v49)
    {
      v112 = *(_DWORD **)a4;
      *(_DWORD *)v49 += 4;
      v113 = (WTF::StringImpl *)*((_QWORD *)v112 + 11);
      *((_QWORD *)v112 + 11) = v49;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
        {
          WTF::StringImpl::~StringImpl(v113, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          *(_DWORD *)v113 -= 2;
        }
      }
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    v50 = (WTF::StringImpl *)(*(unsigned int *)(v42 + 57) | ((unint64_t)*(unsigned __int8 *)(v42 + 61) << 32));
    if (v50)
    {
      v51 = *(_DWORD **)a4;
      *(_DWORD *)v50 += 4;
      v52 = (WTF::StringImpl *)*((_QWORD *)v51 + 12);
      *((_QWORD *)v51 + 12) = v50;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    goto LABEL_107;
  }
LABEL_34:
  v53 = *(unsigned __int16 *)(a3 + 70);
  v54 = (v53 >> 8) & 3;
  v202[0] = 0;
  JSC::parse<JSC::ProgramNode>((uint64_t)v194, (uint64_t)a2, a4, (uint64_t)v202, a5, a6, a8, v54, a9, (v53 & 0x80) != 0);
  v55 = v202[0];
  v202[0] = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  if (!v194[0])
    goto LABEL_170;
  v56 = *((_DWORD *)v194[0] + 7);
  v192 = v56 - *((_DWORD *)v194[0] + 2);
  v57 = *((_DWORD *)v194[0] + 59);
  if (v56 == *((_DWORD *)v194[0] + 2))
    v58 = *((_DWORD *)v194[0] + 58) + 1;
  else
    v58 = 1;
  v59 = v58 + v57;
  v60 = *((_BYTE *)v194[0] + 166);
  v61 = *((_QWORD *)v194[0] + 24);
  if (*((_BYTE *)v194[0] + 200))
  {
    if (v61)
      v186 = *(_DWORD *)(v61 - 12);
    else
      v186 = 0;
    v187 = (_QWORD *)*((_QWORD *)v194[0] + 26);
    if (v187)
    {
      v187 = (_QWORD *)*v187;
      if (v187)
        LODWORD(v187) = *((_DWORD *)v187 - 3);
    }
    v67 = v186 + (_DWORD)v187 != 0;
    goto LABEL_59;
  }
  if (v61)
  {
    v62 = *(unsigned int *)(v61 - 4);
    v63 = v61 + 16 * v62;
    if (*(_DWORD *)(v61 - 12))
    {
      v64 = *((_QWORD *)v194[0] + 24);
      if ((_DWORD)v62)
      {
        v65 = 16 * v62;
        v64 = *((_QWORD *)v194[0] + 24);
        while ((unint64_t)(*(_QWORD *)v64 + 1) <= 1)
        {
          v64 += 16;
          v65 -= 16;
          if (!v65)
          {
            v64 = v63;
            goto LABEL_49;
          }
        }
      }
      goto LABEL_49;
    }
    v64 = v61 + 16 * v62;
  }
  else
  {
    v64 = 0;
    v62 = 0;
  }
  v63 = v61 + 16 * v62;
LABEL_49:
  if (v61)
    v66 = v61 + 16 * *(unsigned int *)(v61 - 4);
  else
    v66 = 0;
  if (v66 == v64)
  {
    v67 = 0;
  }
  else
  {
    do
    {
      v67 = *(_WORD *)(v64 + 8) & 1;
      if ((*(_WORD *)(v64 + 8) & 1) != 0)
        break;
      v68 = v64 + 16;
      v64 = v63;
      if (v68 != v63)
      {
        v64 = v68;
        while ((unint64_t)(*(_QWORD *)v64 + 1) <= 1)
        {
          v64 += 16;
          if (v64 == v63)
          {
            v64 = v63;
            break;
          }
        }
      }
    }
    while (v64 != v66);
  }
LABEL_59:
  *(_WORD *)(a3 + 66) = *((_WORD *)v194[0] + 82);
  *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | v60 & 3;
  *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | v67;
  *(_DWORD *)(a3 + 88) = v56;
  *(_DWORD *)(a3 + 92) = v59;
  LOBYTE(v211[0]) = ((a6 & 1) << 6) | 0x20;
  BYTE1(v211[0]) = 12;
  BYTE2(v211[0]) = (v53 >> 1) & 8 | (32 * (a9 & 3)) | v54;
  v69 = JSC::UnlinkedProgramCodeBlock::create((uint64_t)a2, (JSC::VM *)v211, v193, v27, v28, v29, v30, v31);
  v42 = v69;
  v76 = *((_WORD *)v194[0] + 82);
  v77 = *((_BYTE *)v194[0] + 166);
  v78 = *((_QWORD *)v194[0] + 24);
  if (!*((_BYTE *)v194[0] + 200))
  {
    if (v78)
    {
      v79 = *(unsigned int *)(v78 - 4);
      v80 = v78 + 16 * v79;
      if (*(_DWORD *)(v78 - 12))
      {
        v81 = *((_QWORD *)v194[0] + 24);
        if ((_DWORD)v79)
        {
          v82 = 16 * v79;
          v81 = *((_QWORD *)v194[0] + 24);
          while ((unint64_t)(*(_QWORD *)v81 + 1) <= 1)
          {
            v81 += 16;
            v82 -= 16;
            if (!v82)
            {
              v81 = v80;
              goto LABEL_67;
            }
          }
        }
        goto LABEL_67;
      }
      v81 = v78 + 16 * v79;
    }
    else
    {
      v81 = 0;
      v79 = 0;
    }
    v80 = v78 + 16 * v79;
LABEL_67:
    if (v78)
      v78 += 16 * *(unsigned int *)(v78 - 4);
    if (v78 != v81)
    {
      while ((*(_WORD *)(v81 + 8) & 1) == 0)
      {
        v83 = v81 + 16;
        v81 = v80;
        if (v83 != v80)
        {
          v81 = v83;
          while ((unint64_t)(*(_QWORD *)v81 + 1) <= 1)
          {
            v81 += 16;
            if (v81 == v80)
            {
              v81 = v80;
              break;
            }
          }
        }
        if (v81 == v78)
          goto LABEL_77;
      }
      *(_WORD *)(v69 + 40) = v76;
      v144 = v77 & 3;
      v86 = *(_QWORD *)(v69 + 20) & 0x7FFFFFFFFFFFFFFFLL;
      v87 = (*(unsigned __int16 *)(v69 + 28) | (*(unsigned __int8 *)(v69 + 30) << 16)) & 0xFFF3FFFF | (v144 << 18);
      goto LABEL_143;
    }
LABEL_77:
    v84 = 0;
    *(_WORD *)(v69 + 40) = v76;
    v85 = v77 & 3;
    v86 = *(_QWORD *)(v69 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v87 = (*(unsigned __int16 *)(v69 + 28) | (*(unsigned __int8 *)(v69 + 30) << 16)) & 0xFFF3FFFF | (v85 << 18);
LABEL_78:
    v88 = v192;
    goto LABEL_79;
  }
  if (v78)
    v188 = *(_DWORD *)(v78 - 12);
  else
    v188 = 0;
  v189 = (_QWORD *)*((_QWORD *)v194[0] + 26);
  if (v189)
  {
    v189 = (_QWORD *)*v189;
    if (v189)
      LODWORD(v189) = *((_DWORD *)v189 - 3);
  }
  *(_WORD *)(v69 + 40) = v76;
  v190 = v77 & 3;
  v86 = *(_QWORD *)(v69 + 20) & 0x7FFFFFFFFFFFFFFFLL;
  v87 = (*(unsigned __int16 *)(v69 + 28) | (*(unsigned __int8 *)(v69 + 30) << 16)) & 0xFFF3FFFF | (v190 << 18);
  if (!(v188 + (_DWORD)v189))
  {
    v84 = 0;
    goto LABEL_78;
  }
LABEL_143:
  v88 = v192;
  v84 = 0x8000000000000000;
LABEL_79:
  *(_QWORD *)(v69 + 20) = v84 | v86;
  *(_WORD *)(v69 + 28) = v87;
  *(_BYTE *)(v69 + 30) = BYTE2(v87);
  *(_DWORD *)(v69 + 44) = v88;
  *(_DWORD *)(v69 + 48) = v57;
  v89 = *(_DWORD **)a4;
  v90 = *(WTF::AtomStringImpl **)(*(_QWORD *)a4 + 88);
  if (v90)
  {
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v69 + 52), v90, v70, v71, v72, v73, v74, v75);
    v89 = *(_DWORD **)a4;
  }
  v91 = (WTF::AtomStringImpl *)*((_QWORD *)v89 + 12);
  if (v91)
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v42 + 57), v91, v70, v71, v72, v73, v74, v75);
  JSC::BytecodeGenerator::generate<JSC::ProgramNode,JSC::UnlinkedProgramCodeBlock>((WTF::MonotonicTime *)v202, (uint64_t)a2, (uint64_t)v194[0], a4, v42, v193);
  v93 = v205;
  *(_OWORD *)(a8 + 32) = v204;
  *(_OWORD *)(a8 + 48) = v93;
  v94 = v203;
  *(_OWORD *)a8 = *(_OWORD *)v202;
  *(_OWORD *)(a8 + 16) = v94;
  v95 = v207;
  v207 = 0;
  v96 = *(WTF::StringImpl **)(a8 + 72);
  *(_QWORD *)(a8 + 64) = v206;
  *(_QWORD *)(a8 + 72) = v95;
  if (!v96)
    goto LABEL_86;
  if (*(_DWORD *)v96 != 2)
  {
    *(_DWORD *)v96 -= 2;
LABEL_86:
    *(_DWORD *)(a8 + 80) = v208;
    *(_WORD *)(a8 + 84) = v209;
    goto LABEL_87;
  }
  WTF::StringImpl::~StringImpl(v96, v92, v26, v27, v28, v29, v30, v31);
  WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
  v143 = v207;
  *(_DWORD *)(a8 + 80) = v208;
  *(_WORD *)(a8 + 84) = v209;
  v207 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v142, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
LABEL_87:
  if (*(_BYTE *)(a8 + 84))
    v97 = 0;
  else
    v97 = v42;
  v25 = v194[0];
  v194[0] = 0;
  if (v25)
    std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)v194, (unint64_t)v25, v26, v27, v28, v29, v30, v31);
  v195 = v97;
  if (!v97)
  {
LABEL_170:
    v42 = 0;
    goto LABEL_107;
  }
  if (BYTE1(dword_1ECF4C6C3))
  {
    v98 = *(WTF **)(a1 + 48);
    v99 = a2[89];
    if (!v99)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 84), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      v99 = a2[89];
    }
    a2[89] = *(_QWORD *)v99;
    *(_QWORD *)v99 = 0;
    *(_QWORD *)(v99 + 8) = 0;
    *(_QWORD *)(v99 + 16) = 0;
    v194[0] = (WTF *)(v99 + 16);
    v100 = *(unint64_t **)((v99 & 0xFFFFFFFFFFFFF000) + 0x10);
    v101 = v100[3];
    v100 += 3;
    *(_QWORD *)v99 = v101;
    *(_QWORD *)(v99 + 8) = v100;
    *v100 = v99;
    *(_QWORD *)(v101 + 8) = v99;
    *(_QWORD *)(v99 + 16) = v97;
    v194[1] = v98;
    if (*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40) || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u)
    {
      v102 = mach_approximate_time();
      v104 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v104 != -1)
      {
        v202[0] = (WTF::StringImpl *)&v210;
        v211[0] = v202;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v211, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v103) = dword_1ECF4400C;
      if ((double)(v102 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v103 * 1000000000.0)
         - *(double *)(a1 + 24) >= 10.0
        || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000
        || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u)
      {
        JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
      }
    }
    WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::add<JSC::SourceCodeValue const&>((uint64_t)v202, (WTF::AtomStringImpl *)a1, (unint64_t)&v196, (uint64_t **)v194, v28, v29, v30, v31);
    v105 = SHIDWORD(v197) - (uint64_t)(int)v197;
    *(_QWORD *)(a1 + 8) += v105;
    *(_QWORD *)(a1 + 48) += v105;
    if (v194[0])
    {
      v114 = (uint64_t *)((char *)v194[0] - 16);
      v115 = *(_QWORD *)((((unint64_t)v194[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v116 = (uint64_t *)*((_QWORD *)v194[0] - 1);
      if (v116)
      {
        v117 = *v114;
        *v116 = *v114;
        *(_QWORD *)(v117 + 8) = v116;
        *v114 = 0;
        v114[1] = 0;
      }
      *v114 = *(_QWORD *)(v115 + 40);
      *(_QWORD *)(v115 + 40) = v114;
    }
    v106 = v196;
    v107 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v107 = off_1E3598938;
    *((_QWORD *)v107 + 1) = a2;
    *((_QWORD *)v107 + 2) = &v196;
    *((_QWORD *)v107 + 3) = &v195;
    v202[0] = v107;
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v106 + 40))(v106, v202);
    v108 = v202[0];
    v202[0] = 0;
    if (v108)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v108 + 8))(v108);
    v42 = v195;
  }
LABEL_107:
  v109 = v198;
  v198 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (v110[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 8))(v110);
    else
      --v110[2];
  }
  return v42;
}

uint64_t JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedEvalCodeBlock,JSC::IndirectEvalExecutable>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::AtomStringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  _DWORD *v69;
  WTF::AtomStringImpl *v70;
  WTF::AtomStringImpl *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  _DWORD *v96;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  JSC::SourceProvider *v117;
  WTF::StringImpl *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  JSC::SourceProvider *v154;
  WTF::StringImpl *v155;
  int v156;
  _QWORD *v157;
  int v158;
  _QWORD *v159;
  int v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t *v180[2];
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  int v185;
  int v186;
  int v187;
  WTF::StringImpl *v188[2];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  int v194;
  __int16 v195;
  char v196;
  _DWORD *v197[2];

  v16 = *(unsigned __int16 *)(a3 + 70);
  v17 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    ++v17[2];
  v18 = *(_QWORD *)(a4 + 8);
  v182 = v17;
  v183 = v18;
  v184 = 0;
  v179 = a7;
  v185 = (a7 << 6) | (8 * a9) | v16 & 0x10 | a5 | (v16 >> 6) & 0xC | (32 * a6);
  v186 = -1;
  v187 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17) ^ v185;
  if (*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40))
    goto LABEL_160;
  v23 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_14;
  if (*(_DWORD *)(v23 - 12) >= 0x7D0u)
  {
LABEL_160:
    v20 = mach_approximate_time();
    v22 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v22 != -1)
    {
      v188[0] = (WTF::StringImpl *)v197;
      v180[0] = (uint64_t *)v188;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v180, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v21) = dword_1ECF4400C;
    if ((double)(v20 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v21 * 1000000000.0)
       - *(double *)(a1 + 24) >= 10.0
      || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000)
    {
      goto LABEL_161;
    }
    v23 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_14;
    if (*(_DWORD *)(v23 - 12) >= 0x7D0u)
    {
LABEL_161:
      JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
      v23 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_14:
        v34 = *(unsigned __int16 *)(a3 + 70);
        v35 = (v34 >> 8) & 3;
        v188[0] = 0;
        JSC::parse<JSC::EvalNode>((uint64_t)v180, a2, a4, (uint64_t)v188, a5, a6, a8, v35, a9, 0, (v34 & 0x80) != 0);
        v36 = v188[0];
        v188[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
            WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        v37 = v180[0];
        if (!v180[0])
          goto LABEL_131;
        v38 = *((_DWORD *)v180[0] + 7);
        v178 = *((_DWORD *)v180[0] + 58);
        v39 = *((_BYTE *)v180[0] + 166);
        v40 = v180[0][24];
        if (*((_BYTE *)v180[0] + 200))
        {
          if (v40)
            v156 = *(_DWORD *)(v40 - 12);
          else
            v156 = 0;
          v157 = (_QWORD *)v180[0][26];
          if (v157)
          {
            v157 = (_QWORD *)*v157;
            if (v157)
              LODWORD(v157) = *((_DWORD *)v157 - 3);
          }
          v46 = v156 + (_DWORD)v157 != 0;
          goto LABEL_36;
        }
        if (v40)
        {
          v41 = *(unsigned int *)(v40 - 4);
          v42 = v40 + 16 * v41;
          if (*(_DWORD *)(v40 - 12))
          {
            v43 = v180[0][24];
            if ((_DWORD)v41)
            {
              v44 = 16 * v41;
              v43 = v180[0][24];
              while ((unint64_t)(*(_QWORD *)v43 + 1) <= 1)
              {
                v43 += 16;
                v44 -= 16;
                if (!v44)
                {
                  v43 = v42;
                  goto LABEL_26;
                }
              }
            }
            goto LABEL_26;
          }
          v43 = v40 + 16 * v41;
        }
        else
        {
          v43 = 0;
          v41 = 0;
        }
        v42 = v40 + 16 * v41;
LABEL_26:
        if (v40)
          v45 = v40 + 16 * *(unsigned int *)(v40 - 4);
        else
          v45 = 0;
        if (v45 == v43)
        {
          v46 = 0;
        }
        else
        {
          do
          {
            v46 = *(_WORD *)(v43 + 8) & 1;
            if ((*(_WORD *)(v43 + 8) & 1) != 0)
              break;
            v47 = v43 + 16;
            v43 = v42;
            if (v47 != v42)
            {
              v43 = v47;
              while ((unint64_t)(*(_QWORD *)v43 + 1) <= 1)
              {
                v43 += 16;
                if (v43 == v42)
                {
                  v43 = v42;
                  break;
                }
              }
            }
          }
          while (v43 != v45);
        }
LABEL_36:
        v177 = v38 - *((_DWORD *)v180[0] + 2);
        *(_WORD *)(a3 + 66) = *((_WORD *)v180[0] + 82);
        *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | v39 & 3;
        *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | v46;
        *(_DWORD *)(a3 + 88) = v38;
        *(_DWORD *)(a3 + 92) = v178 + 1;
        LOBYTE(v181) = ((a6 & 1) << 6) | 0x20;
        BYTE1(v181) = 12;
        BYTE2(v181) = (v34 >> 1) & 8 | (32 * (a9 & 3)) | v35;
        v48 = v179;
        v49 = JSC::UnlinkedEvalCodeBlock::create(a2, (JSC::VM *)&v181, v179, v27, v28, v29, v30, v31);
        v56 = v49;
        v57 = *((_WORD *)v37 + 82);
        v58 = *((_BYTE *)v37 + 166);
        v59 = v37[24];
        if (*((_BYTE *)v37 + 200))
        {
          if (v59)
            v158 = *(_DWORD *)(v59 - 12);
          else
            v158 = 0;
          v159 = (_QWORD *)v37[26];
          if (v159)
          {
            v159 = (_QWORD *)*v159;
            if (v159)
              LODWORD(v159) = *((_DWORD *)v159 - 3);
            v48 = v179;
          }
          *(_WORD *)(v49 + 40) = v57;
          v160 = v58 & 3;
          v67 = *(_QWORD *)(v49 + 20) & 0x7FFFFFFFFFFFFFFFLL;
          v68 = (*(unsigned __int16 *)(v49 + 28) | (*(unsigned __int8 *)(v49 + 30) << 16)) & 0xFFF3FFFF | (v160 << 18);
          if (!(v158 + (_DWORD)v159))
          {
            v65 = 0;
LABEL_55:
            *(_QWORD *)(v49 + 20) = v65 | v67;
            *(_WORD *)(v49 + 28) = v68;
            *(_BYTE *)(v49 + 30) = BYTE2(v68);
            *(_DWORD *)(v49 + 44) = v177;
            *(_DWORD *)(v49 + 48) = v178;
            v69 = *(_DWORD **)a4;
            v70 = *(WTF::AtomStringImpl **)(*(_QWORD *)a4 + 88);
            if (v70)
            {
              WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v49 + 52), v70, v50, v51, v52, v53, v54, v55);
              v69 = *(_DWORD **)a4;
            }
            v71 = (WTF::AtomStringImpl *)*((_QWORD *)v69 + 12);
            if (v71)
              WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v56 + 57), v71, v50, v51, v52, v53, v54, v55);
            v197[0] = 0;
            JSC::BytecodeGenerator::generate<JSC::EvalNode,JSC::UnlinkedEvalCodeBlock>((WTF::MonotonicTime *)v188, a2, (uint64_t)v37, a4, v56, v48, v197, 0);
            v79 = v191;
            *(_OWORD *)(a8 + 32) = v190;
            *(_OWORD *)(a8 + 48) = v79;
            v80 = v189;
            *(_OWORD *)a8 = *(_OWORD *)v188;
            *(_OWORD *)(a8 + 16) = v80;
            v81 = v193;
            v193 = 0;
            v82 = *(WTF::StringImpl **)(a8 + 72);
            *(_QWORD *)(a8 + 64) = v192;
            *(_QWORD *)(a8 + 72) = v81;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
              {
                WTF::StringImpl::~StringImpl(v82, v72, v73, v74, v75, v76, v77, v78);
                WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
                v143 = v193;
                *(_DWORD *)(a8 + 80) = v194;
                *(_WORD *)(a8 + 84) = v195;
                v193 = 0;
                if (v143)
                {
                  if (*(_DWORD *)v143 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v143, v72, v73, v74, v75, v76, v77, v78);
                    WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
                  }
                  else
                  {
                    *(_DWORD *)v143 -= 2;
                  }
                }
LABEL_63:
                v83 = *(unsigned __int8 *)(a8 + 84);
                std::default_delete<JSC::EvalNode>::operator()[abi:sn180100]((unint64_t)v37, v72, v73, v74, v75, v76, v77, v78);
                if (!v83)
                {
                  v181 = v56;
                  if (BYTE1(dword_1ECF4C6C3))
                  {
                    v84 = *(uint64_t **)(a1 + 48);
                    v85 = *(_QWORD *)(a2 + 712);
                    if (!v85)
                    {
                      JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
                      v85 = *(_QWORD *)(a2 + 712);
                    }
                    *(_QWORD *)(a2 + 712) = *(_QWORD *)v85;
                    *(_QWORD *)v85 = 0;
                    *(_QWORD *)(v85 + 8) = 0;
                    *(_QWORD *)(v85 + 16) = 0;
                    v180[0] = (uint64_t *)(v85 + 16);
                    v86 = *(unint64_t **)((v85 & 0xFFFFFFFFFFFFF000) + 0x10);
                    v87 = v86[3];
                    v86 += 3;
                    *(_QWORD *)v85 = v87;
                    *(_QWORD *)(v85 + 8) = v86;
                    *v86 = v85;
                    *(_QWORD *)(v87 + 8) = v85;
                    *(_QWORD *)(v85 + 16) = v56;
                    v180[1] = v84;
                    if (*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40)
                      || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u)
                    {
                      v88 = mach_approximate_time();
                      v90 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
                      if (v90 != -1)
                      {
                        v188[0] = (WTF::StringImpl *)&v196;
                        v197[0] = v188;
                        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v197, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
                      }
                      LODWORD(v89) = dword_1ECF4400C;
                      if ((double)(v88 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v89
                          * 1000000000.0)
                         - *(double *)(a1 + 24) >= 10.0
                        || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000
                        || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u)
                      {
                        JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
                      }
                    }
                    WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::add<JSC::SourceCodeValue const&>((uint64_t)v188, (WTF::AtomStringImpl *)a1, (unint64_t)&v182, v180, v28, v29, v30, v31);
                    v91 = SHIDWORD(v183) - (uint64_t)(int)v183;
                    *(_QWORD *)(a1 + 8) += v91;
                    *(_QWORD *)(a1 + 48) += v91;
                    if (v180[0])
                    {
                      v98 = v180[0] - 2;
                      v99 = *(_QWORD *)(((unint64_t)(v180[0] - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                      v100 = (uint64_t *)*(v180[0] - 1);
                      if (v100)
                      {
                        v101 = *v98;
                        *v100 = *v98;
                        *(_QWORD *)(v101 + 8) = v100;
                        *v98 = 0;
                        v98[1] = 0;
                      }
                      *v98 = *(_QWORD *)(v99 + 40);
                      *(_QWORD *)(v99 + 40) = v98;
                    }
                    v92 = v182;
                    v93 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v93 = off_1E3598960;
                    *((_QWORD *)v93 + 1) = a2;
                    *((_QWORD *)v93 + 2) = &v182;
                    *((_QWORD *)v93 + 3) = &v181;
                    v188[0] = v93;
                    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v92 + 40))(v92, v188);
                    v94 = v188[0];
                    v188[0] = 0;
                    if (v94)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v94 + 8))(v94);
                    v56 = v181;
                  }
                  goto LABEL_78;
                }
LABEL_131:
                v56 = 0;
                goto LABEL_78;
              }
              *(_DWORD *)v82 -= 2;
            }
            *(_DWORD *)(a8 + 80) = v194;
            *(_WORD *)(a8 + 84) = v195;
            goto LABEL_63;
          }
LABEL_123:
          v65 = 0x8000000000000000;
          goto LABEL_55;
        }
        if (v59)
        {
          v60 = *(unsigned int *)(v59 - 4);
          v61 = v59 + 16 * v60;
          if (*(_DWORD *)(v59 - 12))
          {
            v62 = v37[24];
            if ((_DWORD)v60)
            {
              v63 = 16 * v60;
              v62 = v37[24];
              while ((unint64_t)(*(_QWORD *)v62 + 1) <= 1)
              {
                v62 += 16;
                v63 -= 16;
                if (!v63)
                {
                  v62 = v61;
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_44;
          }
          v62 = v59 + 16 * v60;
        }
        else
        {
          v62 = 0;
          v60 = 0;
        }
        v61 = v59 + 16 * v60;
LABEL_44:
        if (v59)
          v59 += 16 * *(unsigned int *)(v59 - 4);
        if (v59 == v62)
        {
LABEL_54:
          v65 = 0;
          *(_WORD *)(v49 + 40) = v57;
          v66 = v58 & 3;
          v67 = *(_QWORD *)(v49 + 20) & 0x7FFFFFFFFFFFFFFFLL;
          v68 = (*(unsigned __int16 *)(v49 + 28) | (*(unsigned __int8 *)(v49 + 30) << 16)) & 0xFFF3FFFF | (v66 << 18);
          goto LABEL_55;
        }
        while ((*(_WORD *)(v62 + 8) & 1) == 0)
        {
          v64 = v62 + 16;
          v62 = v61;
          if (v64 != v61)
          {
            v62 = v64;
            while ((unint64_t)(*(_QWORD *)v62 + 1) <= 1)
            {
              v62 += 16;
              if (v62 == v61)
              {
                v62 = v61;
                break;
              }
            }
          }
          if (v62 == v59)
            goto LABEL_54;
        }
        *(_WORD *)(v49 + 40) = v57;
        v144 = v58 & 3;
        v67 = *(_QWORD *)(v49 + 20) & 0x7FFFFFFFFFFFFFFFLL;
        v68 = (*(unsigned __int16 *)(v49 + 28) | (*(unsigned __int8 *)(v49 + 30) << 16)) & 0xFFF3FFFF | (v144 << 18);
        goto LABEL_123;
      }
    }
  }
  v24 = WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::Hash>,JSC::SourceCodeKey>(v23, &v182, v19);
  v32 = *(_QWORD *)a1;
  if (v24)
  {
    if (!v32)
      goto LABEL_100;
    v33 = *(_DWORD *)(v32 - 4);
  }
  else
  {
    if (!v32)
      goto LABEL_14;
    v33 = *(_DWORD *)(v32 - 4);
    v24 = (_QWORD *)(v32 + 56 * v33);
  }
  if (v24 == (_QWORD *)(v32 + 56 * v33))
    goto LABEL_14;
LABEL_100:
  v103 = *(_QWORD *)(a1 + 40);
  v102 = *(_QWORD *)(a1 + 48);
  v104 = v102 - v24[6];
  if (v104 > v103)
  {
    v107 = v183;
    v106 = HIDWORD(v183);
    v145 = v103 + ((uint64_t)(HIDWORD(v183) - (int)v183) << 7);
LABEL_128:
    *(_QWORD *)(a1 + 40) = v145;
    goto LABEL_105;
  }
  if (v103 >= 0)
    v105 = *(_QWORD *)(a1 + 40);
  else
    v105 = v103 + 1;
  v107 = v183;
  v106 = HIDWORD(v183);
  if (v104 < v105 >> 1)
  {
    v145 = v103 - 4 * (HIDWORD(v183) - (int)v183);
    if (v145 <= *(_QWORD *)(a1 + 32))
      v145 = *(_QWORD *)(a1 + 32);
    goto LABEL_128;
  }
LABEL_105:
  v24[6] = v102;
  *(_QWORD *)(a1 + 48) = v102 + v106 - v107;
  v108 = (uint64_t *)v24[5];
  if (!v108)
    goto LABEL_14;
  v56 = *v108;
  if (!*v108 || !BYTE1(dword_1ECF4C6C3))
    goto LABEL_14;
  v109 = *(_DWORD *)(v56 + 44);
  v110 = *(_DWORD *)(v56 + 48);
  v111 = *(_DWORD *)(a4 + 16);
  if (v109)
    v112 = 1;
  else
    v112 = *(_DWORD *)(a4 + 20) + 1;
  v113 = *(_QWORD *)(v56 + 20);
  v114 = *(unsigned __int8 *)(v56 + 30);
  *(_WORD *)(a3 + 66) = *(_WORD *)(v56 + 40);
  *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | (v114 >> 2) & 3;
  *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | (v113 >> 63);
  *(_DWORD *)(a3 + 88) = v109 + v111 + 1;
  *(_DWORD *)(a3 + 92) = v112 + v110;
  v115 = (WTF::StringImpl *)(*(unsigned int *)(v56 + 52) | ((unint64_t)*(unsigned __int8 *)(v56 + 56) << 32));
  if (v115)
  {
    v154 = *(JSC::SourceProvider **)a4;
    *(_DWORD *)v115 += 2;
    v188[0] = v115;
    JSC::SourceProvider::setSourceURLDirective(v154, (const WTF::String *)v188, v26, v27, v28, v29, v30, v31);
    v155 = v188[0];
    v188[0] = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
      {
        WTF::StringImpl::~StringImpl(v155, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      else
      {
        *(_DWORD *)v155 -= 2;
      }
    }
  }
  v116 = (WTF::StringImpl *)(*(unsigned int *)(v56 + 57) | ((unint64_t)*(unsigned __int8 *)(v56 + 61) << 32));
  if (v116)
  {
    v117 = *(JSC::SourceProvider **)a4;
    *(_DWORD *)v116 += 2;
    v188[0] = v116;
    JSC::SourceProvider::setSourceMappingURLDirective(v117, (const WTF::String *)v188, v26, v27, v28, v29, v30, v31);
    v118 = v188[0];
    v188[0] = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
      {
        WTF::StringImpl::~StringImpl(v118, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
      }
      else
      {
        *(_DWORD *)v118 -= 2;
      }
    }
  }
LABEL_78:
  v95 = v184;
  v184 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v182;
  v182 = 0;
  if (v96)
  {
    if (v96[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
    else
      --v96[2];
  }
  return v56;
}

unint64_t JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedModuleProgramCodeBlock,JSC::ModuleProgramExecutable>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v16;
  uint64_t v17;
  JSC::SourceProvider *v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  JSC::SourceProvider *v53;
  JSC::SourceProvider *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  int v69;
  int v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  JSC::SourceProvider *v100;
  WTF::AtomStringImpl *v101;
  WTF::AtomStringImpl *v102;
  WTF::AtomStringImpl *v103;
  __int128 v104;
  __int128 v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  WTF *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  JSC::SourceProvider *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::AtomStringImpl *v152;
  int v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  JSC::SourceProvider *v162;
  WTF::StringImpl *v163;
  WTF *v164;
  WTF *v165;
  int v166;
  _QWORD *v167;
  int v168;
  _QWORD *v169;
  int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  WTF *v181[2];
  unint64_t v182;
  JSC::SourceProvider *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  int v186;
  int v187;
  int v188;
  WTF::StringImpl *v189[2];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  int v195;
  __int16 v196;

  v16 = *(unsigned __int16 *)(a3 + 70);
  v17 = a7;
  v18 = *(JSC::SourceProvider **)a4;
  if (*(_QWORD *)a4)
    ++*((_DWORD *)v18 + 2);
  v19 = *(_QWORD *)(a4 + 8);
  v183 = v18;
  v184 = v19;
  v185 = 0;
  v186 = (a7 << 6) | (8 * a9) | v16 & 0x10 | a5 | (v16 >> 6) & 8 | (32 * a6) | 6;
  v187 = -1;
  v188 = (*(uint64_t (**)(JSC::SourceProvider *))(*(_QWORD *)v18 + 16))(v18) ^ v186;
  if (*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40))
    goto LABEL_9;
  v24 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_144;
  if (*(_DWORD *)(v24 - 12) >= 0x7D0u)
  {
LABEL_9:
    v21 = mach_approximate_time();
    v23 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v23 != -1)
    {
      v189[0] = (WTF::StringImpl *)&v182;
      v181[0] = (WTF *)v189;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v181, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v22) = dword_1ECF4400C;
    if ((double)(v21 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v22 * 1000000000.0)
       - *(double *)(a1 + 24) >= 10.0
      || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000)
    {
      goto LABEL_143;
    }
    v24 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_144;
    if (*(_DWORD *)(v24 - 12) >= 0x7D0u)
    {
LABEL_143:
      JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
      v24 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_144;
    }
  }
  v25 = WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::Hash>,JSC::SourceCodeKey>(v24, &v183, v20);
  v33 = *(_QWORD *)a1;
  if (v25)
  {
    if (!v33)
      goto LABEL_14;
    v34 = *(_DWORD *)(v33 - 4);
  }
  else
  {
    if (!v33)
      goto LABEL_144;
    v34 = *(_DWORD *)(v33 - 4);
    v25 = (_QWORD *)(v33 + 56 * v34);
  }
  if (v25 == (_QWORD *)(v33 + 56 * v34))
  {
LABEL_144:
    v164 = (WTF *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v183 + 32))(v189);
    if (v189[0])
    {
      if (JSC::CachePayload::size((WTF::StringImpl *)((char *)v189[0] + 16)))
      {
        v165 = v189[0];
        ++*(_DWORD *)v189[0];
        v181[0] = v165;
        v43 = JSC::decodeCodeBlock<JSC::UnlinkedProgramCodeBlock>(a2, (uint64_t)&v183, v181);
        if (v181[0])
          WTF::RefCounted<JSC::CachedBytecode>::deref(v181[0], v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        v43 = 0;
      }
      v164 = v189[0];
      v189[0] = 0;
      if (v164)
        WTF::RefCounted<JSC::CachedBytecode>::deref(v164, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      v43 = 0;
    }
    if ((_BYTE)word_1ECF4C738 && WTF::isMainThread(v164) && !v43)
    {
      __break(0xC471u);
      JUMPOUT(0x1988E1F3CLL);
    }
    goto LABEL_22;
  }
LABEL_14:
  v36 = *(_QWORD *)(a1 + 40);
  v35 = *(_QWORD *)(a1 + 48);
  v37 = v35 - v25[6];
  if (v37 > v36)
  {
    v39 = SHIDWORD(v184) - (uint64_t)(int)v184;
    v41 = v36 + (v39 << 7);
  }
  else
  {
    if (v36 >= 0)
      v38 = *(_QWORD *)(a1 + 40);
    else
      v38 = v36 + 1;
    v39 = SHIDWORD(v184) - (uint64_t)(int)v184;
    if (v37 >= v38 >> 1)
      goto LABEL_20;
    v40 = v36 - 4 * v39;
    *(_QWORD *)(a1 + 40) = v40;
    v41 = *(_QWORD *)(a1 + 32);
    if (v40 >= v41)
      goto LABEL_20;
  }
  *(_QWORD *)(a1 + 40) = v41;
LABEL_20:
  v25[6] = v35;
  *(_QWORD *)(a1 + 48) = v39 + v35;
  v42 = (unint64_t *)v25[5];
  if (!v42)
    goto LABEL_45;
  v43 = *v42;
LABEL_22:
  if (v43 && BYTE1(dword_1ECF4C6C3))
  {
    v44 = *(_DWORD *)(v43 + 44);
    v45 = *(_DWORD *)(v43 + 48);
    if (v44)
      v46 = 1;
    else
      v46 = *(_DWORD *)(a4 + 20) + 1;
    v47 = *(_QWORD *)(v43 + 20);
    v48 = *(unsigned __int8 *)(v43 + 30);
    v49 = *(_DWORD *)(a4 + 16);
    *(_WORD *)(a3 + 66) = *(_WORD *)(v43 + 40);
    *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | (v48 >> 2) & 3;
    *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | (v47 >> 63);
    *(_DWORD *)(a3 + 88) = v44 + v49 + 1;
    *(_DWORD *)(a3 + 92) = v46 + v45;
    v50 = (WTF::StringImpl *)(*(unsigned int *)(v43 + 52) | ((unint64_t)*(unsigned __int8 *)(v43 + 56) << 32));
    if (v50)
    {
      v162 = *(JSC::SourceProvider **)a4;
      *(_DWORD *)v50 += 2;
      v189[0] = v50;
      JSC::SourceProvider::setSourceURLDirective(v162, (const WTF::String *)v189, v27, v28, v29, v30, v31, v32);
      v163 = v189[0];
      v189[0] = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
        {
          WTF::StringImpl::~StringImpl(v163, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
        }
        else
        {
          *(_DWORD *)v163 -= 2;
        }
      }
    }
    v51 = (WTF::StringImpl *)(*(unsigned int *)(v43 + 57) | ((unint64_t)*(unsigned __int8 *)(v43 + 61) << 32));
    if (v51)
    {
      v55 = *(JSC::SourceProvider **)a4;
      *(_DWORD *)v51 += 4;
      v56 = (WTF::StringImpl *)*((_QWORD *)v55 + 12);
      *((_QWORD *)v55 + 12) = v51;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
    goto LABEL_28;
  }
LABEL_45:
  v65 = *(unsigned __int16 *)(a3 + 70);
  v189[0] = 0;
  v66 = a5;
  v67 = (v65 >> 8) & 3;
  JSC::parse<JSC::ModuleProgramNode>((uint64_t)v181, (uint64_t)a2, a4, (uint64_t)v189, v66, a6, a8, v67, a9, (v65 & 0x80) != 0);
  v68 = v189[0];
  v189[0] = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  if (!v181[0])
    goto LABEL_137;
  v69 = *((_DWORD *)v181[0] + 7);
  v180 = v69 - *((_DWORD *)v181[0] + 2);
  if (v180)
    v70 = 1;
  else
    v70 = *((_DWORD *)v181[0] + 58) + 1;
  v179 = *((_DWORD *)v181[0] + 59);
  v71 = v70 + v179;
  v72 = *((_BYTE *)v181[0] + 166);
  v73 = *((_QWORD *)v181[0] + 24);
  if (*((_BYTE *)v181[0] + 200))
  {
    if (v73)
      v166 = *(_DWORD *)(v73 - 12);
    else
      v166 = 0;
    v167 = (_QWORD *)*((_QWORD *)v181[0] + 26);
    if (v167)
    {
      v167 = (_QWORD *)*v167;
      if (v167)
        LODWORD(v167) = *((_DWORD *)v167 - 3);
    }
    v79 = v166 + (_DWORD)v167 != 0;
    goto LABEL_69;
  }
  if (v73)
  {
    v74 = *(unsigned int *)(v73 - 4);
    v75 = v73 + 16 * v74;
    if (*(_DWORD *)(v73 - 12))
    {
      v76 = *((_QWORD *)v181[0] + 24);
      if ((_DWORD)v74)
      {
        v77 = 16 * v74;
        v76 = *((_QWORD *)v181[0] + 24);
        while ((unint64_t)(*(_QWORD *)v76 + 1) <= 1)
        {
          v76 += 16;
          v77 -= 16;
          if (!v77)
          {
            v76 = v75;
            goto LABEL_59;
          }
        }
      }
      goto LABEL_59;
    }
    v76 = v73 + 16 * v74;
  }
  else
  {
    v76 = 0;
    v74 = 0;
  }
  v75 = v73 + 16 * v74;
LABEL_59:
  if (v73)
    v78 = v73 + 16 * *(unsigned int *)(v73 - 4);
  else
    v78 = 0;
  if (v78 == v76)
  {
    v79 = 0;
  }
  else
  {
    do
    {
      v79 = *(_WORD *)(v76 + 8) & 1;
      if ((*(_WORD *)(v76 + 8) & 1) != 0)
        break;
      v80 = v76 + 16;
      v76 = v75;
      if (v80 != v75)
      {
        v76 = v80;
        while ((unint64_t)(*(_QWORD *)v76 + 1) <= 1)
        {
          v76 += 16;
          if (v76 == v75)
          {
            v76 = v75;
            break;
          }
        }
      }
    }
    while (v76 != v78);
  }
LABEL_69:
  *(_WORD *)(a3 + 66) = *((_WORD *)v181[0] + 82);
  *(_BYTE *)(a3 + 68) = *(_BYTE *)(a3 + 68) & 0xFC | v72 & 3;
  *(_WORD *)(a3 + 70) = *(_WORD *)(a3 + 70) & 0xFFFE | v79;
  *(_DWORD *)(a3 + 88) = v69;
  *(_DWORD *)(a3 + 92) = v71;
  LOBYTE(v182) = ((a6 & 1) << 6) | 0x20;
  BYTE1(v182) = 14;
  BYTE2(v182) = (v65 >> 1) & 8 | (32 * (a9 & 3)) | v67;
  v81 = JSC::UnlinkedModuleProgramCodeBlock::create((uint64_t)a2, (JSC::VM *)&v182, v17, v28, v29, v30, v31, v32);
  v43 = v81;
  v88 = *((_WORD *)v181[0] + 82);
  v89 = *((_BYTE *)v181[0] + 166);
  v90 = *((_QWORD *)v181[0] + 24);
  if (!*((_BYTE *)v181[0] + 200))
  {
    if (v90)
    {
      v91 = *(unsigned int *)(v90 - 4);
      v92 = v90 + 16 * v91;
      if (*(_DWORD *)(v90 - 12))
      {
        v93 = *((_QWORD *)v181[0] + 24);
        if ((_DWORD)v91)
        {
          v94 = 16 * v91;
          v93 = *((_QWORD *)v181[0] + 24);
          while ((unint64_t)(*(_QWORD *)v93 + 1) <= 1)
          {
            v93 += 16;
            v94 -= 16;
            if (!v94)
            {
              v93 = v92;
              goto LABEL_77;
            }
          }
        }
        goto LABEL_77;
      }
      v93 = v90 + 16 * v91;
    }
    else
    {
      v93 = 0;
      v91 = 0;
    }
    v92 = v90 + 16 * v91;
LABEL_77:
    if (v90)
      v90 += 16 * *(unsigned int *)(v90 - 4);
    if (v90 == v93)
    {
LABEL_87:
      v96 = 0;
      *(_WORD *)(v81 + 40) = v88;
      v97 = v89 & 3;
      v98 = *(_QWORD *)(v81 + 20) & 0x7FFFFFFFFFFFFFFFLL;
      v99 = (*(unsigned __int16 *)(v81 + 28) | (*(unsigned __int8 *)(v81 + 30) << 16)) & 0xFFF3FFFF | (v97 << 18);
      goto LABEL_88;
    }
    while ((*(_WORD *)(v93 + 8) & 1) == 0)
    {
      v95 = v93 + 16;
      v93 = v92;
      if (v95 != v92)
      {
        v93 = v95;
        while ((unint64_t)(*(_QWORD *)v93 + 1) <= 1)
        {
          v93 += 16;
          if (v93 == v92)
          {
            v93 = v92;
            break;
          }
        }
      }
      if (v93 == v90)
        goto LABEL_87;
    }
    *(_WORD *)(v81 + 40) = v88;
    v153 = v89 & 3;
    v98 = *(_QWORD *)(v81 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v99 = (*(unsigned __int16 *)(v81 + 28) | (*(unsigned __int8 *)(v81 + 30) << 16)) & 0xFFF3FFFF | (v153 << 18);
    goto LABEL_133;
  }
  if (v90)
    v168 = *(_DWORD *)(v90 - 12);
  else
    v168 = 0;
  v169 = (_QWORD *)*((_QWORD *)v181[0] + 26);
  if (v169)
  {
    v169 = (_QWORD *)*v169;
    if (v169)
      LODWORD(v169) = *((_DWORD *)v169 - 3);
  }
  *(_WORD *)(v81 + 40) = v88;
  v170 = v89 & 3;
  v98 = *(_QWORD *)(v81 + 20) & 0x7FFFFFFFFFFFFFFFLL;
  v99 = (*(unsigned __int16 *)(v81 + 28) | (*(unsigned __int8 *)(v81 + 30) << 16)) & 0xFFF3FFFF | (v170 << 18);
  if (v168 + (_DWORD)v169)
  {
LABEL_133:
    v96 = 0x8000000000000000;
    goto LABEL_88;
  }
  v96 = 0;
LABEL_88:
  *(_QWORD *)(v81 + 20) = v96 | v98;
  *(_WORD *)(v81 + 28) = v99;
  *(_BYTE *)(v81 + 30) = BYTE2(v99);
  *(_DWORD *)(v81 + 44) = v180;
  *(_DWORD *)(v81 + 48) = v179;
  v100 = *(JSC::SourceProvider **)a4;
  v101 = *(WTF::AtomStringImpl **)(*(_QWORD *)a4 + 88);
  if (v101)
  {
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v81 + 52), v101, v82, v83, v84, v85, v86, v87);
    v100 = *(JSC::SourceProvider **)a4;
  }
  v102 = (WTF::AtomStringImpl *)*((_QWORD *)v100 + 12);
  if (v102)
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v43 + 57), v102, v82, v83, v84, v85, v86, v87);
  JSC::BytecodeGenerator::generate<JSC::ModuleProgramNode,JSC::UnlinkedModuleProgramCodeBlock>((WTF::MonotonicTime *)v189, (uint64_t)a2, (uint64_t)v181[0], a4, v43, v17);
  v104 = v192;
  *(_OWORD *)(a8 + 32) = v191;
  *(_OWORD *)(a8 + 48) = v104;
  v105 = v190;
  *(_OWORD *)a8 = *(_OWORD *)v189;
  *(_OWORD *)(a8 + 16) = v105;
  v106 = v194;
  v194 = 0;
  v107 = *(WTF::StringImpl **)(a8 + 72);
  *(_QWORD *)(a8 + 64) = v193;
  *(_QWORD *)(a8 + 72) = v106;
  if (!v107)
    goto LABEL_95;
  if (*(_DWORD *)v107 != 2)
  {
    *(_DWORD *)v107 -= 2;
LABEL_95:
    *(_DWORD *)(a8 + 80) = v195;
    *(_WORD *)(a8 + 84) = v196;
    goto LABEL_96;
  }
  WTF::StringImpl::~StringImpl(v107, v103, v27, v28, v29, v30, v31, v32);
  WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
  v107 = v194;
  *(_DWORD *)(a8 + 80) = v195;
  *(_WORD *)(a8 + 84) = v196;
  v194 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v152, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
LABEL_96:
  if (*(_BYTE *)(a8 + 84))
    v108 = 0;
  else
    v108 = v43;
  v26 = v181[0];
  v181[0] = 0;
  if (v26)
    std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v181, (unint64_t)v26, v27, v28, v29, v30, v31, v32);
  v182 = v108;
  if (!v108)
  {
LABEL_137:
    v43 = 0;
    goto LABEL_28;
  }
  if (BYTE1(dword_1ECF4C6C3))
  {
    v109 = *(WTF **)(a1 + 48);
    v110 = a2[89];
    if (!v110)
    {
      v107 = (WTF::StringImpl *)JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 84), (uint64_t)v26, v27, v28, v29, v30, v31, v32);
      v110 = a2[89];
    }
    a2[89] = *(_QWORD *)v110;
    *(_QWORD *)v110 = 0;
    *(_QWORD *)(v110 + 8) = 0;
    *(_QWORD *)(v110 + 16) = 0;
    v181[0] = (WTF *)(v110 + 16);
    v111 = *(unint64_t **)((v110 & 0xFFFFFFFFFFFFF000) + 0x10);
    v112 = v111[3];
    v111 += 3;
    *(_QWORD *)v110 = v112;
    *(_QWORD *)(v110 + 8) = v111;
    *v111 = v110;
    *(_QWORD *)(v112 + 8) = v110;
    *(_QWORD *)(v110 + 16) = v108;
    v181[1] = v109;
    if ((*(_QWORD *)(a1 + 8) > *(_QWORD *)(a1 + 40) || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u)
      && (WTF::ApproximateTime::now(v107) - *(double *)(a1 + 24) >= 10.0
       || (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)(a1 + 16)) >= 16000000
       || *(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 - 12) >= 0x7D0u))
    {
      JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)a1);
    }
    WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::add<JSC::SourceCodeValue const&>((uint64_t)v189, (WTF::AtomStringImpl *)a1, (unint64_t)&v183, (uint64_t **)v181, v29, v30, v31, v32);
    v113 = SHIDWORD(v184) - (uint64_t)(int)v184;
    *(_QWORD *)(a1 + 8) += v113;
    *(_QWORD *)(a1 + 48) += v113;
    v114 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF000) + 0x10);
    v115 = *(_QWORD **)(v110 + 8);
    if (v115)
    {
      v116 = *(_QWORD *)v110;
      *v115 = *(_QWORD *)v110;
      *(_QWORD *)(v116 + 8) = v115;
      *(_QWORD *)v110 = 0;
      *(_QWORD *)(v110 + 8) = 0;
    }
    *(_QWORD *)v110 = *(_QWORD *)(v114 + 40);
    *(_QWORD *)(v114 + 40) = v110;
    v117 = v183;
    v118 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v118 = off_1E3598988;
    *((_QWORD *)v118 + 1) = a2;
    *((_QWORD *)v118 + 2) = &v183;
    *((_QWORD *)v118 + 3) = &v182;
    v189[0] = v118;
    (*(void (**)(JSC::SourceProvider *, WTF::StringImpl **))(*(_QWORD *)v117 + 40))(v117, v189);
    v119 = v189[0];
    v189[0] = 0;
    if (v119)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v119 + 8))(v119);
    v43 = v182;
  }
LABEL_28:
  v52 = v185;
  v185 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = v183;
  v183 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 2) == 1)
      (*(void (**)(JSC::SourceProvider *))(*(_QWORD *)v53 + 8))(v53);
    else
      --*((_DWORD *)v53 + 2);
  }
  return v43;
}

JSC::UnlinkedFunctionExecutable *JSC::CodeCache::getUnlinkedGlobalFunctionExecutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned __int8 v5;
  JSC::ExpressionNode *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::ExpressionNode *v9;
  int *v10;
  WTF::StringImpl **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF::MonotonicTime *v23;
  WTF::AtomStringImpl *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::MonotonicTime *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  JSC::UnlinkedFunctionExecutable **v40;
  JSC::UnlinkedFunctionExecutable *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::MonotonicTime *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  _BOOL8 v76;
  WTF::AtomStringImpl *v77;
  WTF::StringImpl **v78;
  unint64_t v79;
  JSC::TDZEnvironmentLink *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::AtomStringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl **v156;
  WTF::StringImpl *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  double v167;
  const char *v168;
  WTF::StringImpl *v169;
  int v170;
  JSC::SourceProvider *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  int v175;
  JSC::SourceProvider *v176;
  WTF::StringImpl *v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl **v210;
  char v211;
  JSC::TDZEnvironmentLink *v212;
  const char *v213;
  _DWORD *v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  int v217;
  int v218;
  int v219;
  double v220;
  unsigned int v221;
  unsigned int v222;
  _BYTE v223[20];
  _BYTE v224[28];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  int v229;
  __int16 v230;
  uint64_t v231;
  const char *v232;
  _OWORD v233[3];
  uint64_t v234;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = v7;
  v9 = v6;
  v10 = (int *)v4;
  v11 = v3;
  v13 = v12;
  v14 = v2;
  v234 = *MEMORY[0x1E0C80C00];
  v15 = *(_DWORD **)v4;
  if (*(_QWORD *)v4)
    ++v15[2];
  v16 = *(_QWORD *)(v4 + 8);
  v214 = v15;
  v215 = v16;
  v17 = *v3;
  if (*v3)
    *(_DWORD *)v17 += 2;
  v216 = v17;
  if (((unint64_t)v6 & 0xFF00000000) != 0)
    v18 = (int)v6;
  else
    v18 = -1;
  v217 = (v5 << 6) | 4;
  v218 = v18;
  v219 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15) ^ v217;
  if (*(_QWORD *)(v14 + 8) > *(_QWORD *)(v14 + 40))
    goto LABEL_167;
  v23 = *(WTF::MonotonicTime **)v14;
  if (!*(_QWORD *)v14)
    goto LABEL_47;
  if (*((_DWORD *)v23 - 3) >= 0x7D0u)
  {
LABEL_167:
    v20 = mach_approximate_time();
    v22 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v22 != -1)
    {
      *(_QWORD *)v223 = &v232;
      *(_QWORD *)&v233[0] = v223;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v233, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v21) = dword_1ECF4400C;
    if ((double)(v20 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v21 * 1000000000.0)
       - *(double *)(v14 + 24) >= 10.0
      || (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)(v14 + 16)) >= 16000000)
    {
      goto LABEL_168;
    }
    v23 = *(WTF::MonotonicTime **)v14;
    if (!*(_QWORD *)v14)
      goto LABEL_47;
    if (*((_DWORD *)v23 - 3) >= 0x7D0u)
    {
LABEL_168:
      JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)v14);
      v23 = *(WTF::MonotonicTime **)v14;
      if (!*(_QWORD *)v14)
      {
LABEL_47:
        v54 = 0.0;
        if (unk_1ECF4C33E)
          v54 = WTF::MonotonicTime::now(v23);
        *(_QWORD *)&v233[0] = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)v10 + 24))(*(_QWORD *)v10);
        if ((v55 & 0xFF00000000) != 0)
        {
          JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v223, (JSC::VM *)v13, v10, 0, 0, 0, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0);
          JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ProgramNode>((uint64_t)v223, v8, (WTF::AtomStringImpl *)v233, 1, v9, 0, 0, v56, (uint64_t *)&v232);
          v213 = v232;
          v57 = *(_QWORD *)(v231 + 120);
          v58 = *(_DWORD *)(v231 + 128);
          v66 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)v223, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v223, (JSC::VM *)v13, v10, 0, 0, 0, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0);
          JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ProgramNode>((uint64_t)v223, v8, (WTF::AtomStringImpl *)v233, 1, (uint64_t)v9, 0, 0, v147, (uint64_t *)&v232);
          v213 = v232;
          v57 = *(_QWORD *)(v231 + 120);
          v58 = *(_DWORD *)(v231 + 128);
          v66 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)v223, v148, v149, v150, v151, v152, v153, v154);
        }
        if (byte_1ECF4C340)
        {
          do
            v166 = __ldaxr(&JSC::globalParseCount);
          while (__stlxr(v166 + 1, &JSC::globalParseCount));
        }
        if (unk_1ECF4C33E)
        {
          v167 = WTF::MonotonicTime::now(v66);
          JSC::ParseHash::ParseHash((JSC::ParseHash *)v223, (const SourceCode *)v10);
          if (v213)
            v168 = "Parsed #";
          else
            v168 = "Failed to parse #";
          v232 = v168;
          v221 = *(_DWORD *)&v223[4];
          v222 = *(_DWORD *)v223;
          v220 = (v167 - v54) * 1000.0;
          WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>(&v232, &v222, "/#", &v221, " in ", &v220, " ms.", "\n");
        }
        v67 = *(WTF::StringImpl **)&v233[0];
        *(_QWORD *)&v233[0] = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::~StringImpl(v67, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
          }
          else
          {
            *(_DWORD *)v67 -= 2;
          }
        }
        v68 = (unint64_t)v213;
        if (!v213)
        {
          if (!*(_BYTE *)(v8 + 84))
          {
            __break(0xC471u);
            JUMPOUT(0x1988E2B28);
          }
          v41 = 0;
          goto LABEL_31;
        }
        v69 = (uint64_t *)*((_QWORD *)v213 + 28);
        if (v69 && ((v70 = *v69, v71 = v69[1], v70) ? (v72 = v70 == v71) : (v72 = 0), v72))
        {
          v73 = *(_QWORD *)(v70 + 40);
          if (v73)
          {
            v74 = *v11;
            if (*v11)
              *(_DWORD *)v74 += 2;
            v75 = *(WTF::StringImpl **)(v73 + 40);
            *(_QWORD *)(v73 + 40) = v74;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, v24, v25, v26, v27, v28, v29, v30);
                WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
              }
              else
              {
                *(_DWORD *)v75 -= 2;
              }
            }
            *(_DWORD *)(v73 + 136) = v57;
            *(_DWORD *)(v73 + 60) = HIDWORD(v57) - v58;
            v76 = *(_BYTE *)(v73 + 35) != 0;
            v212 = 0;
            v223[0] = 0;
            v223[16] = 0;
            LOBYTE(v210) = 0;
            v211 = 0;
            v41 = (JSC::UnlinkedFunctionExecutable *)JSC::UnlinkedFunctionExecutable::create((uint64_t)v13, (JSC::VM *)v10, v73, 0, v76, 0, 0, &v212, (uint64_t)v223, (uint64_t)&v210, 0, 0, 0, 0);
            if (v211)
            {
              v78 = v210;
              if (v210)
              {
                v155 = *((unsigned int *)v210 - 1);
                if ((_DWORD)v155)
                {
                  v156 = v210;
                  do
                  {
                    v157 = *v156;
                    if (*v156 != (WTF::StringImpl *)-1)
                    {
                      *v156 = 0;
                      if (v157)
                      {
                        if (*(_DWORD *)v157 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v157, v77, v25, v26, v27, v28, v29, v30);
                          WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
                        }
                        else
                        {
                          *(_DWORD *)v157 -= 2;
                        }
                      }
                    }
                    v156 += 2;
                    --v155;
                  }
                  while (v155);
                }
                WTF::fastFree((unint64_t)(v78 - 2), v77, v25, v26, v27, v28, v29, v30);
              }
            }
            if (v223[16])
            {
              if (*(_DWORD *)&v223[12])
              {
                v104 = *(WTF::StringImpl ***)v223;
                v105 = 8 * *(unsigned int *)&v223[12];
                do
                {
                  v106 = *v104;
                  *v104 = 0;
                  if (v106)
                  {
                    if (*(_DWORD *)v106 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v106, v77, v25, v26, v27, v28, v29, v30);
                      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
                    }
                    else
                    {
                      *(_DWORD *)v106 -= 2;
                    }
                  }
                  ++v104;
                  v105 -= 8;
                }
                while (v105);
              }
              v79 = *(_QWORD *)v223;
              if (*(_QWORD *)v223)
              {
                *(_QWORD *)v223 = 0;
                *(_DWORD *)&v223[8] = 0;
                WTF::fastFree(v79, v77, v25, v26, v27, v28, v29, v30);
              }
            }
            v80 = v212;
            v212 = 0;
            if (v80)
              WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v80);
            v81 = *(_QWORD *)v10;
            if (*(_QWORD *)(*(_QWORD *)v10 + 88))
            {
              JSC::UnlinkedFunctionExecutable::setSourceURLDirective(v41, (const WTF::String *)(*(_QWORD *)v10 + 88), v25, v26, v27, v28, v29, v30);
              v81 = *(_QWORD *)v10;
            }
            v82 = *(_QWORD *)(v81 + 96);
            v24 = (WTF::AtomStringImpl *)(v81 + 96);
            if (v82)
              JSC::UnlinkedFunctionExecutable::setSourceMappingURLDirective(v41, v24, v25, v26, v27, v28, v29, v30);
            if (BYTE1(dword_1ECF4C6C3))
            {
              v83 = *(_QWORD *)(v14 + 48);
              v84 = v13[89];
              if (!v84)
              {
                JSC::HandleSet::grow((JSC::HandleSet *)(v13 + 84), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
                v84 = v13[89];
              }
              v13[89] = *(_QWORD *)v84;
              *(_QWORD *)(v84 + 16) = 0;
              *(_QWORD *)v84 = 0;
              *(_QWORD *)(v84 + 8) = 0;
              *(_QWORD *)&v233[0] = v84 + 16;
              if (v41)
              {
                v85 = *(unint64_t **)((v84 & 0xFFFFFFFFFFFFF000) + 0x10);
                v86 = v85[3];
                v85 += 3;
                *(_QWORD *)v84 = v86;
                *(_QWORD *)(v84 + 8) = v85;
                *v85 = v84;
                *(_QWORD *)(v86 + 8) = v84;
              }
              *(_QWORD *)(v84 + 16) = v41;
              *((_QWORD *)&v233[0] + 1) = v83;
              if (*(_QWORD *)(v14 + 8) > *(_QWORD *)(v14 + 40)
                || *(_QWORD *)v14 && *(_DWORD *)(*(_QWORD *)v14 - 12) >= 0x7D0u)
              {
                v87 = mach_approximate_time();
                v89 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
                if (v89 != -1)
                {
                  *(_QWORD *)v223 = &v220;
                  v232 = v223;
                  std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v232, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
                }
                LODWORD(v88) = dword_1ECF4400C;
                if ((double)(v87 * WTF::machTimebaseInfo(void)::timebaseInfo)
                   / ((double)v88
                    * 1000000000.0)
                   - *(double *)(v14 + 24) >= 10.0
                  || (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)(v14 + 16)) >= 16000000
                  || *(_QWORD *)v14 && *(_DWORD *)(*(_QWORD *)v14 - 12) >= 0x7D0u)
                {
                  JSC::CodeCacheMap::pruneSlowCase((JSC::CodeCacheMap *)v14);
                }
              }
              WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::add<JSC::SourceCodeValue const&>((uint64_t)v223, (WTF::AtomStringImpl *)v14, (unint64_t)&v214, (uint64_t **)v233, v27, v28, v29, v30);
              v90 = SHIDWORD(v215) - (uint64_t)(int)v215;
              *(_QWORD *)(v14 + 8) += v90;
              *(_QWORD *)(v14 + 48) += v90;
              if (*(_QWORD *)&v233[0])
              {
                v91 = (uint64_t *)(*(_QWORD *)&v233[0] - 16);
                v92 = *(_QWORD *)(((*(_QWORD *)&v233[0] - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                v93 = *(uint64_t **)(*(_QWORD *)&v233[0] - 8);
                if (v93)
                {
                  v94 = *v91;
                  *v93 = *v91;
                  *(_QWORD *)(v94 + 8) = v93;
                  *v91 = 0;
                  v91[1] = 0;
                }
                *v91 = *(_QWORD *)(v92 + 40);
                *(_QWORD *)(v92 + 40) = v91;
              }
              v68 = (unint64_t)v213;
            }
            v213 = 0;
            if (!v68)
              goto LABEL_31;
LABEL_96:
            std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v213, v68, v25, v26, v27, v28, v29, v30);
            goto LABEL_31;
          }
        }
        else
        {
          memset((char *)v233 + 4, 0, 40);
          v95 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_DWORD *)(v95 + 4) = 12;
          *(_QWORD *)(v95 + 8) = "Parser error";
          *(_DWORD *)(v95 + 16) = 4;
          *(_OWORD *)&v224[12] = *(_OWORD *)((char *)&v233[1] + 12);
          *(_OWORD *)v224 = v233[1];
          *(_DWORD *)v223 = 0x100000;
          *(_OWORD *)&v223[4] = v233[0];
          v226 = -1;
          v227 = -1;
          v225 = -1;
          *(_DWORD *)v95 = 4;
          v228 = (WTF::StringImpl *)v95;
          v229 = -1;
          v230 = 260;
          JSC::ParserError::operator=(v8, (uint64_t)v223, v96, v97, v98, v99, v100, v101);
          v103 = v228;
          v228 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
            {
              WTF::StringImpl::~StringImpl(v103, v102, v25, v26, v27, v28, v29, v30);
              WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
            }
            else
            {
              *(_DWORD *)v103 -= 2;
            }
          }
          if (*(_DWORD *)v95 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v95, v102, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
          }
          else
          {
            *(_DWORD *)v95 -= 2;
          }
        }
        v41 = 0;
        v213 = 0;
        goto LABEL_96;
      }
    }
  }
  v23 = (WTF::MonotonicTime *)WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::Hash>,JSC::SourceCodeKey>((uint64_t)v23, &v214, v19);
  v31 = *(WTF::MonotonicTime **)v14;
  if (v23)
  {
    if (!v31)
      goto LABEL_19;
    v32 = *((_DWORD *)v31 - 1);
  }
  else
  {
    if (!v31)
      goto LABEL_47;
    v32 = *((_DWORD *)v31 - 1);
    v23 = (WTF::MonotonicTime *)((char *)v31 + 56 * v32);
  }
  if (v23 == (WTF::MonotonicTime *)((char *)v31 + 56 * v32))
    goto LABEL_47;
LABEL_19:
  v34 = *(_QWORD *)(v14 + 40);
  v33 = *(_QWORD *)(v14 + 48);
  v35 = v33 - *((_QWORD *)v23 + 6);
  if (v35 > v34)
  {
    v38 = v215;
    v37 = HIDWORD(v215);
    v39 = v34 + ((uint64_t)(HIDWORD(v215) - (int)v215) << 7);
LABEL_26:
    *(_QWORD *)(v14 + 40) = v39;
    goto LABEL_27;
  }
  if (v34 >= 0)
    v36 = *(_QWORD *)(v14 + 40);
  else
    v36 = v34 + 1;
  v38 = v215;
  v37 = HIDWORD(v215);
  if (v35 < v36 >> 1)
  {
    v39 = v34 - 4 * (HIDWORD(v215) - (int)v215);
    if (v39 <= *(_QWORD *)(v14 + 32))
      v39 = *(_QWORD *)(v14 + 32);
    goto LABEL_26;
  }
LABEL_27:
  *((_QWORD *)v23 + 6) = v33;
  *(_QWORD *)(v14 + 48) = v33 + v37 - v38;
  v40 = (JSC::UnlinkedFunctionExecutable **)*((_QWORD *)v23 + 5);
  if (!v40)
    goto LABEL_47;
  v41 = *v40;
  if (!*v40 || !BYTE1(dword_1ECF4C6C3))
    goto LABEL_47;
  v42 = *((_QWORD *)v41 + 11);
  if (v42)
  {
    v169 = *(WTF::StringImpl **)(v42 + 24);
    if (!v169)
      goto LABEL_148;
    v170 = *(_DWORD *)v169;
    *(_DWORD *)v169 += 2;
    if (v170)
    {
      *(_DWORD *)v169 = v170;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v169, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
    }
    v171 = *(JSC::SourceProvider **)v10;
    v172 = *((_QWORD *)v41 + 11);
    if (v172)
    {
      v172 = *(_QWORD *)(v172 + 24);
      if (v172)
        *(_DWORD *)v172 += 2;
    }
    *(_QWORD *)v223 = v172;
    JSC::SourceProvider::setSourceURLDirective(v171, (const WTF::String *)v223, v25, v26, v27, v28, v29, v30);
    v173 = *(WTF::StringImpl **)v223;
    *(_QWORD *)v223 = 0;
    if (v173)
    {
      if (*(_DWORD *)v173 == 2)
      {
        WTF::StringImpl::~StringImpl(v173, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
      }
      else
      {
        *(_DWORD *)v173 -= 2;
      }
    }
    v42 = *((_QWORD *)v41 + 11);
    if (v42)
    {
LABEL_148:
      v174 = *(WTF::StringImpl **)(v42 + 32);
      if (v174)
      {
        v175 = *(_DWORD *)v174;
        *(_DWORD *)v174 += 2;
        if (v175)
        {
          *(_DWORD *)v174 = v175;
          v176 = *(JSC::SourceProvider **)v10;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v174, v24, v25, v26, v27, v28, v29, v30);
          WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
          v42 = *((_QWORD *)v41 + 11);
          v176 = *(JSC::SourceProvider **)v10;
          if (!v42)
          {
LABEL_153:
            *(_QWORD *)v223 = v42;
            JSC::SourceProvider::setSourceMappingURLDirective(v176, (const WTF::String *)v223, v25, v26, v27, v28, v29, v30);
            v177 = *(WTF::StringImpl **)v223;
            *(_QWORD *)v223 = 0;
            if (v177)
            {
              if (*(_DWORD *)v177 == 2)
              {
                WTF::StringImpl::~StringImpl(v177, v24, v25, v26, v27, v28, v29, v30);
                WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
              }
              else
              {
                *(_DWORD *)v177 -= 2;
              }
            }
            goto LABEL_31;
          }
        }
        v42 = *(_QWORD *)(v42 + 32);
        if (v42)
          *(_DWORD *)v42 += 2;
        goto LABEL_153;
      }
    }
  }
LABEL_31:
  v43 = v216;
  v216 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v214;
  v214 = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  return v41;
}

void JSC::UnlinkedFunctionExecutable::setSourceURLDirective(JSC::UnlinkedFunctionExecutable *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::UnlinkedFunctionExecutable::RareData *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *((_QWORD *)this + 11);
  if (!v10)
  {
    v10 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = -1;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    v21 = (JSC::UnlinkedFunctionExecutable::RareData *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v10;
    if (v21)
    {
      JSC::UnlinkedFunctionExecutable::RareData::~RareData(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      v10 = *((_QWORD *)this + 11);
    }
  }
  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  v12 = *(WTF::StringImpl **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

void JSC::UnlinkedFunctionExecutable::setSourceMappingURLDirective(JSC::UnlinkedFunctionExecutable *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::UnlinkedFunctionExecutable::RareData *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *((_QWORD *)this + 11);
  if (!v10)
  {
    v10 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = -1;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    v21 = (JSC::UnlinkedFunctionExecutable::RareData *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v10;
    if (v21)
    {
      JSC::UnlinkedFunctionExecutable::RareData::~RareData(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      v10 = *((_QWORD *)this + 11);
    }
  }
  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  v12 = *(WTF::StringImpl **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

uint64_t JSC::CodeCache::write(JSC::CodeCache *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  result = (uint64_t)WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::begin(*(_QWORD **)this);
  v3 = result;
  v5 = v4;
  if (v1)
    v1 += 56 * *(unsigned int *)(v1 - 4);
  if (v1 != result)
  {
    do
    {
      result = JSC::writeCodeBlock(*(_QWORD *)v3, *(_DWORD ***)(v3 + 40));
      while (1)
      {
        v3 += 56;
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_7;
      }
      v3 = v5;
LABEL_7:
      ;
    }
    while (v3 != v1);
  }
  return result;
}

JSC::CommonIdentifiers *JSC::CommonIdentifiers::CommonIdentifiers(JSC::CommonIdentifiers *this, JSC::VM *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  _QWORD *v1636;
  _DWORD *v1637;
  _DWORD *v1638;
  _DWORD *v1639;
  _DWORD *v1640;
  _DWORD *v1641;
  _DWORD *v1642;
  _DWORD *v1643;
  _DWORD *v1644;
  _DWORD *v1645;
  _DWORD *v1646;
  _DWORD *v1647;
  _DWORD *v1648;
  _DWORD *v1649;
  int *v1651;
  char v1652;

  v10 = (char *)a2 + 42552;
  *(_QWORD *)this = 0;
  v11 = &WTF::StringImpl::s_emptyAtomString;
  if ((dword_1ECF2C430 & 0x10) != 0)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((unint64_t)&WTF::StringImpl::s_emptyAtomString, a3, a4, a5, a6, a7, a8, (WTF *)&v1651);
    v11 = v1651;
  }
  *((_QWORD *)this + 1) = v11;
  WTF::AtomStringImpl::addLiteral((uint64_t)"__proto__", 9uLL, a4, a5, a6, a7, a8, &v1651);
  *((_QWORD *)this + 2) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"use strict", 0xAuLL, v12, v13, v14, v15, v16, &v1651);
  *((_QWORD *)this + 3) = v1651;
  if (v10[1713])
  {
    v22 = *(int **)(*(_QWORD *)v10 + 8);
    if ((v22 & 1) != 0)
      v23 = 0;
    else
      v23 = *(_DWORD **)(*(_QWORD *)v10 + 8);
    *v23 += 2;
  }
  else
  {
    v1652 = 42;
    WTF::AtomStringImpl::add((uint64_t)&v1652, 1uLL, v17, v18, v19, v20, v21, &v1651);
    v22 = v1651;
  }
  *((_QWORD *)this + 4) = v22;
  WTF::AtomStringImpl::addLiteral((uint64_t)"-1", 2uLL, v17, v18, v19, v20, v21, &v1651);
  *((_QWORD *)this + 5) = v1651;
  v24 = WTF::fastMalloc((WTF *)0x1128);
  v30 = JSC::BuiltinNames::BuiltinNames(v24, (uint64_t)a2, (uint64_t)this, v25, v26, v27, v28, v29);
  JSC::Symbols::generatorPrivateName += 2;
  *((_QWORD *)this + 6) = v30;
  *((_QWORD *)this + 7) = &JSC::Symbols::generatorPrivateName;
  JSC::Symbols::generatorStatePrivateName += 2;
  JSC::Symbols::generatorValuePrivateName += 2;
  *((_QWORD *)this + 8) = &JSC::Symbols::generatorStatePrivateName;
  *((_QWORD *)this + 9) = &JSC::Symbols::generatorValuePrivateName;
  JSC::Symbols::generatorResumeModePrivateName += 2;
  JSC::Symbols::generatorFramePrivateName += 2;
  *((_QWORD *)this + 10) = &JSC::Symbols::generatorResumeModePrivateName;
  *((_QWORD *)this + 11) = &JSC::Symbols::generatorFramePrivateName;
  JSC::Symbols::metaPrivateName[0] += 2;
  JSC::Symbols::starDefaultPrivateName += 2;
  *((_QWORD *)this + 12) = JSC::Symbols::metaPrivateName;
  *((_QWORD *)this + 13) = &JSC::Symbols::starDefaultPrivateName;
  JSC::Symbols::starNamespacePrivateName += 2;
  JSC::Symbols::undefinedPrivateName[0] += 2;
  *((_QWORD *)this + 14) = &JSC::Symbols::starNamespacePrivateName;
  *((_QWORD *)this + 15) = JSC::Symbols::undefinedPrivateName;
  WTF::AtomStringImpl::addLiteral((uint64_t)"await", 5uLL, v31, v32, v33, v34, v35, &v1651);
  *((_QWORD *)this + 16) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"break", 5uLL, v36, v37, v38, v39, v40, &v1651);
  *((_QWORD *)this + 17) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"case", 4uLL, v41, v42, v43, v44, v45, &v1651);
  *((_QWORD *)this + 18) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"catch", 5uLL, v46, v47, v48, v49, v50, &v1651);
  *((_QWORD *)this + 19) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"class", 5uLL, v51, v52, v53, v54, v55, &v1651);
  *((_QWORD *)this + 20) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"const", 5uLL, v56, v57, v58, v59, v60, &v1651);
  *((_QWORD *)this + 21) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"continue", 8uLL, v61, v62, v63, v64, v65, &v1651);
  *((_QWORD *)this + 22) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"debugger", 8uLL, v66, v67, v68, v69, v70, &v1651);
  *((_QWORD *)this + 23) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"default", 7uLL, v71, v72, v73, v74, v75, &v1651);
  *((_QWORD *)this + 24) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"delete", 6uLL, v76, v77, v78, v79, v80, &v1651);
  *((_QWORD *)this + 25) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"do", 2uLL, v81, v82, v83, v84, v85, &v1651);
  *((_QWORD *)this + 26) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"else", 4uLL, v86, v87, v88, v89, v90, &v1651);
  *((_QWORD *)this + 27) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"enum", 4uLL, v91, v92, v93, v94, v95, &v1651);
  *((_QWORD *)this + 28) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"export", 6uLL, v96, v97, v98, v99, v100, &v1651);
  *((_QWORD *)this + 29) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"extends", 7uLL, v101, v102, v103, v104, v105, &v1651);
  *((_QWORD *)this + 30) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"false", 5uLL, v106, v107, v108, v109, v110, &v1651);
  *((_QWORD *)this + 31) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"finally", 7uLL, v111, v112, v113, v114, v115, &v1651);
  *((_QWORD *)this + 32) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"for", 3uLL, v116, v117, v118, v119, v120, &v1651);
  *((_QWORD *)this + 33) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"function", 8uLL, v121, v122, v123, v124, v125, &v1651);
  *((_QWORD *)this + 34) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"if", 2uLL, v126, v127, v128, v129, v130, &v1651);
  *((_QWORD *)this + 35) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"implements", 0xAuLL, v131, v132, v133, v134, v135, &v1651);
  *((_QWORD *)this + 36) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"import", 6uLL, v136, v137, v138, v139, v140, &v1651);
  *((_QWORD *)this + 37) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"in", 2uLL, v141, v142, v143, v144, v145, &v1651);
  *((_QWORD *)this + 38) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"instanceof", 0xAuLL, v146, v147, v148, v149, v150, &v1651);
  *((_QWORD *)this + 39) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"interface", 9uLL, v151, v152, v153, v154, v155, &v1651);
  *((_QWORD *)this + 40) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"let", 3uLL, v156, v157, v158, v159, v160, &v1651);
  *((_QWORD *)this + 41) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"new", 3uLL, v161, v162, v163, v164, v165, &v1651);
  *((_QWORD *)this + 42) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"null", 4uLL, v166, v167, v168, v169, v170, &v1651);
  *((_QWORD *)this + 43) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"package", 7uLL, v171, v172, v173, v174, v175, &v1651);
  *((_QWORD *)this + 44) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"private", 7uLL, v176, v177, v178, v179, v180, &v1651);
  *((_QWORD *)this + 45) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"protected", 9uLL, v181, v182, v183, v184, v185, &v1651);
  *((_QWORD *)this + 46) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"public", 6uLL, v186, v187, v188, v189, v190, &v1651);
  *((_QWORD *)this + 47) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"return", 6uLL, v191, v192, v193, v194, v195, &v1651);
  *((_QWORD *)this + 48) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"static", 6uLL, v196, v197, v198, v199, v200, &v1651);
  *((_QWORD *)this + 49) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"super", 5uLL, v201, v202, v203, v204, v205, &v1651);
  *((_QWORD *)this + 50) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"switch", 6uLL, v206, v207, v208, v209, v210, &v1651);
  *((_QWORD *)this + 51) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"this", 4uLL, v211, v212, v213, v214, v215, &v1651);
  *((_QWORD *)this + 52) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"throw", 5uLL, v216, v217, v218, v219, v220, &v1651);
  *((_QWORD *)this + 53) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"true", 4uLL, v221, v222, v223, v224, v225, &v1651);
  *((_QWORD *)this + 54) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"try", 3uLL, v226, v227, v228, v229, v230, &v1651);
  *((_QWORD *)this + 55) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"typeof", 6uLL, v231, v232, v233, v234, v235, &v1651);
  *((_QWORD *)this + 56) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"undefined", 9uLL, v236, v237, v238, v239, v240, &v1651);
  *((_QWORD *)this + 57) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"var", 3uLL, v241, v242, v243, v244, v245, &v1651);
  *((_QWORD *)this + 58) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"void", 4uLL, v246, v247, v248, v249, v250, &v1651);
  *((_QWORD *)this + 59) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"while", 5uLL, v251, v252, v253, v254, v255, &v1651);
  *((_QWORD *)this + 60) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"with", 4uLL, v256, v257, v258, v259, v260, &v1651);
  *((_QWORD *)this + 61) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"yield", 5uLL, v261, v262, v263, v264, v265, &v1651);
  *((_QWORD *)this + 62) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Array", 5uLL, v266, v267, v268, v269, v270, &v1651);
  *((_QWORD *)this + 63) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ArrayBuffer", 0xBuLL, v271, v272, v273, v274, v275, &v1651);
  *((_QWORD *)this + 64) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Atomics", 7uLL, v276, v277, v278, v279, v280, &v1651);
  *((_QWORD *)this + 65) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"BYTES_PER_ELEMENT", 0x11uLL, v281, v282, v283, v284, v285, &v1651);
  *((_QWORD *)this + 66) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"BigInt", 6uLL, v286, v287, v288, v289, v290, &v1651);
  *((_QWORD *)this + 67) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Boolean", 7uLL, v291, v292, v293, v294, v295, &v1651);
  *((_QWORD *)this + 68) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Collator", 8uLL, v296, v297, v298, v299, v300, &v1651);
  *((_QWORD *)this + 69) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"DurationFormat", 0xEuLL, v301, v302, v303, v304, v305, &v1651);
  *((_QWORD *)this + 70) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Date", 4uLL, v306, v307, v308, v309, v310, &v1651);
  *((_QWORD *)this + 71) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"DateTimeFormat", 0xEuLL, v311, v312, v313, v314, v315, &v1651);
  *((_QWORD *)this + 72) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"DisplayNames", 0xCuLL, v316, v317, v318, v319, v320, &v1651);
  *((_QWORD *)this + 73) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Error", 5uLL, v321, v322, v323, v324, v325, &v1651);
  *((_QWORD *)this + 74) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"EvalError", 9uLL, v326, v327, v328, v329, v330, &v1651);
  *((_QWORD *)this + 75) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"FinalizationRegistry", 0x14uLL, v331, v332, v333, v334, v335, &v1651);
  *((_QWORD *)this + 76) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Function", 8uLL, v336, v337, v338, v339, v340, &v1651);
  *((_QWORD *)this + 77) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Infinity", 8uLL, v341, v342, v343, v344, v345, &v1651);
  *((_QWORD *)this + 78) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Intl", 4uLL, v346, v347, v348, v349, v350, &v1651);
  *((_QWORD *)this + 79) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ListFormat", 0xAuLL, v351, v352, v353, v354, v355, &v1651);
  *((_QWORD *)this + 80) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Loader", 6uLL, v356, v357, v358, v359, v360, &v1651);
  *((_QWORD *)this + 81) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Locale", 6uLL, v361, v362, v363, v364, v365, &v1651);
  *((_QWORD *)this + 82) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Map", 3uLL, v366, v367, v368, v369, v370, &v1651);
  *((_QWORD *)this + 83) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"NaN", 3uLL, v371, v372, v373, v374, v375, &v1651);
  *((_QWORD *)this + 84) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Number", 6uLL, v376, v377, v378, v379, v380, &v1651);
  *((_QWORD *)this + 85) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"NumberFormat", 0xCuLL, v381, v382, v383, v384, v385, &v1651);
  *((_QWORD *)this + 86) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Object", 6uLL, v386, v387, v388, v389, v390, &v1651);
  *((_QWORD *)this + 87) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"PluralRules", 0xBuLL, v391, v392, v393, v394, v395, &v1651);
  *((_QWORD *)this + 88) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Promise", 7uLL, v396, v397, v398, v399, v400, &v1651);
  *((_QWORD *)this + 89) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ShadowRealm", 0xBuLL, v401, v402, v403, v404, v405, &v1651);
  *((_QWORD *)this + 90) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Reflect", 7uLL, v406, v407, v408, v409, v410, &v1651);
  *((_QWORD *)this + 91) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"RegExp", 6uLL, v411, v412, v413, v414, v415, &v1651);
  *((_QWORD *)this + 92) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"RelativeTimeFormat", 0x12uLL, v416, v417, v418, v419, v420, &v1651);
  *((_QWORD *)this + 93) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"RemotePlayback", 0xEuLL, v421, v422, v423, v424, v425, &v1651);
  *((_QWORD *)this + 94) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Segmenter", 9uLL, v426, v427, v428, v429, v430, &v1651);
  *((_QWORD *)this + 95) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Set", 3uLL, v431, v432, v433, v434, v435, &v1651);
  *((_QWORD *)this + 96) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"SharedArrayBuffer", 0x11uLL, v436, v437, v438, v439, v440, &v1651);
  *((_QWORD *)this + 97) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"String", 6uLL, v441, v442, v443, v444, v445, &v1651);
  *((_QWORD *)this + 98) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Symbol", 6uLL, v446, v447, v448, v449, v450, &v1651);
  *((_QWORD *)this + 99) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"Temporal", 8uLL, v451, v452, v453, v454, v455, &v1651);
  *((_QWORD *)this + 100) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"WeakRef", 7uLL, v456, v457, v458, v459, v460, &v1651);
  *((_QWORD *)this + 101) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"__defineGetter__", 0x10uLL, v461, v462, v463, v464, v465, &v1651);
  *((_QWORD *)this + 102) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"__defineSetter__", 0x10uLL, v466, v467, v468, v469, v470, &v1651);
  *((_QWORD *)this + 103) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"__lookupGetter__", 0x10uLL, v471, v472, v473, v474, v475, &v1651);
  *((_QWORD *)this + 104) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"__lookupSetter__", 0x10uLL, v476, v477, v478, v479, v480, &v1651);
  *((_QWORD *)this + 105) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"add", 3uLL, v481, v482, v483, v484, v485, &v1651);
  *((_QWORD *)this + 106) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"additionalJettisonReason", 0x18uLL, v486, v487, v488, v489, v490, &v1651);
  *((_QWORD *)this + 107) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"alphabet", 8uLL, v491, v492, v493, v494, v495, &v1651);
  *((_QWORD *)this + 108) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"anonymous", 9uLL, v496, v497, v498, v499, v500, &v1651);
  *((_QWORD *)this + 109) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"arguments", 9uLL, v501, v502, v503, v504, v505, &v1651);
  *((_QWORD *)this + 110) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"as", 2uLL, v506, v507, v508, v509, v510, &v1651);
  *((_QWORD *)this + 111) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"async", 5uLL, v511, v512, v513, v514, v515, &v1651);
  *((_QWORD *)this + 112) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"back", 4uLL, v516, v517, v518, v519, v520, &v1651);
  *((_QWORD *)this + 113) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"bind", 4uLL, v521, v522, v523, v524, v525, &v1651);
  *((_QWORD *)this + 114) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"byteLength", 0xAuLL, v526, v527, v528, v529, v530, &v1651);
  *((_QWORD *)this + 115) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"byteOffset", 0xAuLL, v531, v532, v533, v534, v535, &v1651);
  *((_QWORD *)this + 116) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"bytecode", 8uLL, v536, v537, v538, v539, v540, &v1651);
  *((_QWORD *)this + 117) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"bytecodeIndex", 0xDuLL, v541, v542, v543, v544, v545, &v1651);
  *((_QWORD *)this + 118) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"bytecodes", 9uLL, v546, v547, v548, v549, v550, &v1651);
  *((_QWORD *)this + 119) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"bytecodesID", 0xBuLL, v551, v552, v553, v554, v555, &v1651);
  *((_QWORD *)this + 120) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"calendar", 8uLL, v556, v557, v558, v559, v560, &v1651);
  *((_QWORD *)this + 121) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"callee", 6uLL, v561, v562, v563, v564, v565, &v1651);
  *((_QWORD *)this + 122) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"caller", 6uLL, v566, v567, v568, v569, v570, &v1651);
  *((_QWORD *)this + 123) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"captureStackTrace", 0x11uLL, v571, v572, v573, v574, v575, &v1651);
  *((_QWORD *)this + 124) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"caseFirst", 9uLL, v576, v577, v578, v579, v580, &v1651);
  *((_QWORD *)this + 125) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"cause", 5uLL, v581, v582, v583, v584, v585, &v1651);
  *((_QWORD *)this + 126) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"clear", 5uLL, v586, v587, v588, v589, v590, &v1651);
  *((_QWORD *)this + 127) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"collation", 9uLL, v591, v592, v593, v594, v595, &v1651);
  *((_QWORD *)this + 128) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"column", 6uLL, v596, v597, v598, v599, v600, &v1651);
  *((_QWORD *)this + 129) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"compilationKind", 0xFuLL, v601, v602, v603, v604, v605, &v1651);
  *((_QWORD *)this + 130) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"compilationUID", 0xEuLL, v606, v607, v608, v609, v610, &v1651);
  *((_QWORD *)this + 131) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"compilations", 0xCuLL, v611, v612, v613, v614, v615, &v1651);
  *((_QWORD *)this + 132) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"compile", 7uLL, v616, v617, v618, v619, v620, &v1651);
  *((_QWORD *)this + 133) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"configurable", 0xCuLL, v621, v622, v623, v624, v625, &v1651);
  *((_QWORD *)this + 134) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"constructor", 0xBuLL, v626, v627, v628, v629, v630, &v1651);
  *((_QWORD *)this + 135) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"count", 5uLL, v631, v632, v633, v634, v635, &v1651);
  *((_QWORD *)this + 136) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"counters", 8uLL, v636, v637, v638, v639, v640, &v1651);
  *((_QWORD *)this + 137) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"dateStyle", 9uLL, v641, v642, v643, v644, v645, &v1651);
  *((_QWORD *)this + 138) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"day", 3uLL, v646, v647, v648, v649, v650, &v1651);
  *((_QWORD *)this + 139) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"days", 4uLL, v651, v652, v653, v654, v655, &v1651);
  *((_QWORD *)this + 140) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"daysDisplay", 0xBuLL, v656, v657, v658, v659, v660, &v1651);
  *((_QWORD *)this + 141) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"dayPeriod", 9uLL, v661, v662, v663, v664, v665, &v1651);
  *((_QWORD *)this + 142) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"defineProperty", 0xEuLL, v666, v667, v668, v669, v670, &v1651);
  *((_QWORD *)this + 143) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"deref", 5uLL, v671, v672, v673, v674, v675, &v1651);
  *((_QWORD *)this + 144) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"description", 0xBuLL, v676, v677, v678, v679, v680, &v1651);
  *((_QWORD *)this + 145) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"descriptions", 0xCuLL, v681, v682, v683, v684, v685, &v1651);
  *((_QWORD *)this + 146) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"detached", 8uLL, v686, v687, v688, v689, v690, &v1651);
  *((_QWORD *)this + 147) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"detail", 6uLL, v691, v692, v693, v694, v695, &v1651);
  *((_QWORD *)this + 148) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"displayName", 0xBuLL, v696, v697, v698, v699, v700, &v1651);
  *((_QWORD *)this + 149) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"done", 4uLL, v701, v702, v703, v704, v705, &v1651);
  *((_QWORD *)this + 150) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"dotAll", 6uLL, v706, v707, v708, v709, v710, &v1651);
  *((_QWORD *)this + 151) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"enumerable", 0xAuLL, v711, v712, v713, v714, v715, &v1651);
  *((_QWORD *)this + 152) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"era", 3uLL, v716, v717, v718, v719, v720, &v1651);
  *((_QWORD *)this + 153) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"eraYear", 7uLL, v721, v722, v723, v724, v725, &v1651);
  *((_QWORD *)this + 154) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"errors", 6uLL, v726, v727, v728, v729, v730, &v1651);
  *((_QWORD *)this + 155) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"eval", 4uLL, v731, v732, v733, v734, v735, &v1651);
  *((_QWORD *)this + 156) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"events", 6uLL, v736, v737, v738, v739, v740, &v1651);
  *((_QWORD *)this + 157) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"exec", 4uLL, v741, v742, v743, v744, v745, &v1651);
  *((_QWORD *)this + 158) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"executionCount", 0xEuLL, v746, v747, v748, v749, v750, &v1651);
  *((_QWORD *)this + 159) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"exitKind", 8uLL, v751, v752, v753, v754, v755, &v1651);
  *((_QWORD *)this + 160) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"exports", 7uLL, v756, v757, v758, v759, v760, &v1651);
  *((_QWORD *)this + 161) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"fallback", 8uLL, v761, v762, v763, v764, v765, &v1651);
  *((_QWORD *)this + 162) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"flags", 5uLL, v766, v767, v768, v769, v770, &v1651);
  *((_QWORD *)this + 163) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"forEach", 7uLL, v771, v772, v773, v774, v775, &v1651);
  *((_QWORD *)this + 164) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"formatMatcher", 0xDuLL, v776, v777, v778, v779, v780, &v1651);
  *((_QWORD *)this + 165) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"formatToParts", 0xDuLL, v781, v782, v783, v784, v785, &v1651);
  *((_QWORD *)this + 166) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"forward", 7uLL, v786, v787, v788, v789, v790, &v1651);
  *((_QWORD *)this + 167) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"fractionalDigits", 0x10uLL, v791, v792, v793, v794, v795, &v1651);
  *((_QWORD *)this + 168) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"fractionalSecondDigits", 0x16uLL, v796, v797, v798, v799, v800, &v1651);
  *((_QWORD *)this + 169) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"from", 4uLL, v801, v802, v803, v804, v805, &v1651);
  *((_QWORD *)this + 170) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"fromCharCode", 0xCuLL, v806, v807, v808, v809, v810, &v1651);
  *((_QWORD *)this + 171) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"get", 3uLL, v811, v812, v813, v814, v815, &v1651);
  *((_QWORD *)this + 172) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"getOwnPropertyDescriptor", 0x18uLL, v816, v817, v818, v819, v820, &v1651);
  *((_QWORD *)this + 173) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"global", 6uLL, v821, v822, v823, v824, v825, &v1651);
  *((_QWORD *)this + 174) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"go", 2uLL, v826, v827, v828, v829, v830, &v1651);
  *((_QWORD *)this + 175) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"granularity", 0xBuLL, v831, v832, v833, v834, v835, &v1651);
  *((_QWORD *)this + 176) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"groups", 6uLL, v836, v837, v838, v839, v840, &v1651);
  *((_QWORD *)this + 177) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"grow", 4uLL, v841, v842, v843, v844, v845, &v1651);
  *((_QWORD *)this + 178) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"growable", 8uLL, v846, v847, v848, v849, v850, &v1651);
  *((_QWORD *)this + 179) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"has", 3uLL, v851, v852, v853, v854, v855, &v1651);
  *((_QWORD *)this + 180) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasIndices", 0xAuLL, v856, v857, v858, v859, v860, &v1651);
  *((_QWORD *)this + 181) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasOwn", 6uLL, v861, v862, v863, v864, v865, &v1651);
  *((_QWORD *)this + 182) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hasOwnProperty", 0xEuLL, v866, v867, v868, v869, v870, &v1651);
  *((_QWORD *)this + 183) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hash", 4uLL, v871, v872, v873, v874, v875, &v1651);
  *((_QWORD *)this + 184) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"header", 6uLL, v876, v877, v878, v879, v880, &v1651);
  *((_QWORD *)this + 185) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hour", 4uLL, v881, v882, v883, v884, v885, &v1651);
  *((_QWORD *)this + 186) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hours", 5uLL, v886, v887, v888, v889, v890, &v1651);
  *((_QWORD *)this + 187) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hoursDisplay", 0xCuLL, v891, v892, v893, v894, v895, &v1651);
  *((_QWORD *)this + 188) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hourCycle", 9uLL, v896, v897, v898, v899, v900, &v1651);
  *((_QWORD *)this + 189) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"hour12", 6uLL, v901, v902, v903, v904, v905, &v1651);
  *((_QWORD *)this + 190) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"id", 2uLL, v906, v907, v908, v909, v910, &v1651);
  *((_QWORD *)this + 191) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ignoreCase", 0xAuLL, v911, v912, v913, v914, v915, &v1651);
  *((_QWORD *)this + 192) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ignorePunctuation", 0x11uLL, v916, v917, v918, v919, v920, &v1651);
  *((_QWORD *)this + 193) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"index", 5uLL, v921, v922, v923, v924, v925, &v1651);
  *((_QWORD *)this + 194) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"indices", 7uLL, v926, v927, v928, v929, v930, &v1651);
  *((_QWORD *)this + 195) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"inferredName", 0xCuLL, v931, v932, v933, v934, v935, &v1651);
  *((_QWORD *)this + 196) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"input", 5uLL, v936, v937, v938, v939, v940, &v1651);
  *((_QWORD *)this + 197) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoDay", 6uLL, v941, v942, v943, v944, v945, &v1651);
  *((_QWORD *)this + 198) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoHour", 7uLL, v946, v947, v948, v949, v950, &v1651);
  *((_QWORD *)this + 199) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoMicrosecond", 0xEuLL, v951, v952, v953, v954, v955, &v1651);
  *((_QWORD *)this + 200) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoMillisecond", 0xEuLL, v956, v957, v958, v959, v960, &v1651);
  *((_QWORD *)this + 201) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoMinute", 9uLL, v961, v962, v963, v964, v965, &v1651);
  *((_QWORD *)this + 202) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoMonth", 8uLL, v966, v967, v968, v969, v970, &v1651);
  *((_QWORD *)this + 203) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoNanosecond", 0xDuLL, v971, v972, v973, v974, v975, &v1651);
  *((_QWORD *)this + 204) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoSecond", 9uLL, v976, v977, v978, v979, v980, &v1651);
  *((_QWORD *)this + 205) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isoYear", 7uLL, v981, v982, v983, v984, v985, &v1651);
  *((_QWORD *)this + 206) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"instructionCount", 0x10uLL, v986, v987, v988, v989, v990, &v1651);
  *((_QWORD *)this + 207) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isArray", 7uLL, v991, v992, v993, v994, v995, &v1651);
  *((_QWORD *)this + 208) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isEnabled", 9uLL, v996, v997, v998, v999, v1000, &v1651);
  *((_QWORD *)this + 209) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isPrototypeOf", 0xDuLL, v1001, v1002, v1003, v1004, v1005, &v1651);
  *((_QWORD *)this + 210) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isView", 6uLL, v1006, v1007, v1008, v1009, v1010, &v1651);
  *((_QWORD *)this + 211) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isWatchpoint", 0xCuLL, v1011, v1012, v1013, v1014, v1015, &v1651);
  *((_QWORD *)this + 212) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isWellFormed", 0xCuLL, v1016, v1017, v1018, v1019, v1020, &v1651);
  *((_QWORD *)this + 213) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"isWordLike", 0xAuLL, v1021, v1022, v1023, v1024, v1025, &v1651);
  *((_QWORD *)this + 214) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"jettisonReason", 0xEuLL, v1026, v1027, v1028, v1029, v1030, &v1651);
  *((_QWORD *)this + 215) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"join", 4uLL, v1031, v1032, v1033, v1034, v1035, &v1651);
  *((_QWORD *)this + 216) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"language", 8uLL, v1036, v1037, v1038, v1039, v1040, &v1651);
  *((_QWORD *)this + 217) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"languageDisplay", 0xFuLL, v1041, v1042, v1043, v1044, v1045, &v1651);
  *((_QWORD *)this + 218) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"largestUnit", 0xBuLL, v1046, v1047, v1048, v1049, v1050, &v1651);
  *((_QWORD *)this + 219) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"lastIndex", 9uLL, v1051, v1052, v1053, v1054, v1055, &v1651);
  *((_QWORD *)this + 220) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"length", 6uLL, v1056, v1057, v1058, v1059, v1060, &v1651);
  *((_QWORD *)this + 221) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"line", 4uLL, v1061, v1062, v1063, v1064, v1065, &v1651);
  *((_QWORD *)this + 222) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"locale", 6uLL, v1066, v1067, v1068, v1069, v1070, &v1651);
  *((_QWORD *)this + 223) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"localeMatcher", 0xDuLL, v1071, v1072, v1073, v1074, v1075, &v1651);
  *((_QWORD *)this + 224) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"maxByteLength", 0xDuLL, v1076, v1077, v1078, v1079, v1080, &v1651);
  *((_QWORD *)this + 225) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"maximumFractionDigits", 0x15uLL, v1081, v1082, v1083, v1084, v1085, &v1651);
  *((_QWORD *)this + 226) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"maximumSignificantDigits", 0x18uLL, v1086, v1087, v1088, v1089, v1090, &v1651);
  *((_QWORD *)this + 227) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"message", 7uLL, v1091, v1092, v1093, v1094, v1095, &v1651);
  *((_QWORD *)this + 228) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"microsecond", 0xBuLL, v1096, v1097, v1098, v1099, v1100, &v1651);
  *((_QWORD *)this + 229) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"microseconds", 0xCuLL, v1101, v1102, v1103, v1104, v1105, &v1651);
  *((_QWORD *)this + 230) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"microsecondsDisplay", 0x13uLL, v1106, v1107, v1108, v1109, v1110, &v1651);
  *((_QWORD *)this + 231) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"millisecond", 0xBuLL, v1111, v1112, v1113, v1114, v1115, &v1651);
  *((_QWORD *)this + 232) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"milliseconds", 0xCuLL, v1116, v1117, v1118, v1119, v1120, &v1651);
  *((_QWORD *)this + 233) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"millisecondsDisplay", 0x13uLL, v1121, v1122, v1123, v1124, v1125, &v1651);
  *((_QWORD *)this + 234) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimumFractionDigits", 0x15uLL, v1126, v1127, v1128, v1129, v1130, &v1651);
  *((_QWORD *)this + 235) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimumIntegerDigits", 0x14uLL, v1131, v1132, v1133, v1134, v1135, &v1651);
  *((_QWORD *)this + 236) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimumSignificantDigits", 0x18uLL, v1136, v1137, v1138, v1139, v1140, &v1651);
  *((_QWORD *)this + 237) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minute", 6uLL, v1141, v1142, v1143, v1144, v1145, &v1651);
  *((_QWORD *)this + 238) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minutes", 7uLL, v1146, v1147, v1148, v1149, v1150, &v1651);
  *((_QWORD *)this + 239) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minutesDisplay", 0xEuLL, v1151, v1152, v1153, v1154, v1155, &v1651);
  *((_QWORD *)this + 240) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"month", 5uLL, v1156, v1157, v1158, v1159, v1160, &v1651);
  *((_QWORD *)this + 241) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"monthCode", 9uLL, v1161, v1162, v1163, v1164, v1165, &v1651);
  *((_QWORD *)this + 242) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"months", 6uLL, v1166, v1167, v1168, v1169, v1170, &v1651);
  *((_QWORD *)this + 243) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"monthsDisplay", 0xDuLL, v1171, v1172, v1173, v1174, v1175, &v1651);
  *((_QWORD *)this + 244) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"multiline", 9uLL, v1176, v1177, v1178, v1179, v1180, &v1651);
  *((_QWORD *)this + 245) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, v1181, v1182, v1183, v1184, v1185, &v1651);
  *((_QWORD *)this + 246) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"nanosecond", 0xAuLL, v1186, v1187, v1188, v1189, v1190, &v1651);
  *((_QWORD *)this + 247) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"nanoseconds", 0xBuLL, v1191, v1192, v1193, v1194, v1195, &v1651);
  *((_QWORD *)this + 248) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"nanosecondsDisplay", 0x12uLL, v1196, v1197, v1198, v1199, v1200, &v1651);
  *((_QWORD *)this + 249) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"next", 4uLL, v1201, v1202, v1203, v1204, v1205, &v1651);
  *((_QWORD *)this + 250) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"now", 3uLL, v1206, v1207, v1208, v1209, v1210, &v1651);
  *((_QWORD *)this + 251) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"numInlinedCalls", 0xFuLL, v1211, v1212, v1213, v1214, v1215, &v1651);
  *((_QWORD *)this + 252) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"numInlinedGetByIds", 0x12uLL, v1216, v1217, v1218, v1219, v1220, &v1651);
  *((_QWORD *)this + 253) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"numInlinedPutByIds", 0x12uLL, v1221, v1222, v1223, v1224, v1225, &v1651);
  *((_QWORD *)this + 254) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"numberingSystem", 0xFuLL, v1226, v1227, v1228, v1229, v1230, &v1651);
  *((_QWORD *)this + 255) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"numeric", 7uLL, v1231, v1232, v1233, v1234, v1235, &v1651);
  *((_QWORD *)this + 256) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"of", 2uLL, v1236, v1237, v1238, v1239, v1240, &v1651);
  *((_QWORD *)this + 257) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"omitPadding", 0xBuLL, v1241, v1242, v1243, v1244, v1245, &v1651);
  *((_QWORD *)this + 258) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"opcode", 6uLL, v1246, v1247, v1248, v1249, v1250, &v1651);
  *((_QWORD *)this + 259) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"origin", 6uLL, v1251, v1252, v1253, v1254, v1255, &v1651);
  *((_QWORD *)this + 260) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"osrExitSites", 0xCuLL, v1256, v1257, v1258, v1259, v1260, &v1651);
  *((_QWORD *)this + 261) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"osrExits", 8uLL, v1261, v1262, v1263, v1264, v1265, &v1651);
  *((_QWORD *)this + 262) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"overflow", 8uLL, v1266, v1267, v1268, v1269, v1270, &v1651);
  *((_QWORD *)this + 263) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"ownKeys", 7uLL, v1271, v1272, v1273, v1274, v1275, &v1651);
  *((_QWORD *)this + 264) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"parse", 5uLL, v1276, v1277, v1278, v1279, v1280, &v1651);
  *((_QWORD *)this + 265) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"parseInt", 8uLL, v1281, v1282, v1283, v1284, v1285, &v1651);
  *((_QWORD *)this + 266) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"parseFloat", 0xAuLL, v1286, v1287, v1288, v1289, v1290, &v1651);
  *((_QWORD *)this + 267) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"profiledBytecodes", 0x11uLL, v1291, v1292, v1293, v1294, v1295, &v1651);
  *((_QWORD *)this + 268) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"propertyIsEnumerable", 0x14uLL, v1296, v1297, v1298, v1299, v1300, &v1651);
  *((_QWORD *)this + 269) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"prototype", 9uLL, v1301, v1302, v1303, v1304, v1305, &v1651);
  *((_QWORD *)this + 270) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"raw", 3uLL, v1306, v1307, v1308, v1309, v1310, &v1651);
  *((_QWORD *)this + 271) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"region", 6uLL, v1311, v1312, v1313, v1314, v1315, &v1651);
  *((_QWORD *)this + 272) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"replace", 7uLL, v1316, v1317, v1318, v1319, v1320, &v1651);
  *((_QWORD *)this + 273) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"resizable", 9uLL, v1321, v1322, v1323, v1324, v1325, &v1651);
  *((_QWORD *)this + 274) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"resize", 6uLL, v1326, v1327, v1328, v1329, v1330, &v1651);
  *((_QWORD *)this + 275) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolve", 7uLL, v1331, v1332, v1333, v1334, v1335, &v1651);
  *((_QWORD *)this + 276) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"roundingIncrement", 0x11uLL, v1336, v1337, v1338, v1339, v1340, &v1651);
  *((_QWORD *)this + 277) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"roundingMode", 0xCuLL, v1341, v1342, v1343, v1344, v1345, &v1651);
  *((_QWORD *)this + 278) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"roundingPriority", 0x10uLL, v1346, v1347, v1348, v1349, v1350, &v1651);
  *((_QWORD *)this + 279) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"script", 6uLL, v1351, v1352, v1353, v1354, v1355, &v1651);
  *((_QWORD *)this + 280) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"second", 6uLL, v1356, v1357, v1358, v1359, v1360, &v1651);
  *((_QWORD *)this + 281) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"seconds", 7uLL, v1361, v1362, v1363, v1364, v1365, &v1651);
  *((_QWORD *)this + 282) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"secondsDisplay", 0xEuLL, v1366, v1367, v1368, v1369, v1370, &v1651);
  *((_QWORD *)this + 283) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"segment", 7uLL, v1371, v1372, v1373, v1374, v1375, &v1651);
  *((_QWORD *)this + 284) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"selectRange", 0xBuLL, v1376, v1377, v1378, v1379, v1380, &v1651);
  *((_QWORD *)this + 285) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"sensitivity", 0xBuLL, v1381, v1382, v1383, v1384, v1385, &v1651);
  *((_QWORD *)this + 286) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"set", 3uLL, v1386, v1387, v1388, v1389, v1390, &v1651);
  *((_QWORD *)this + 287) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"size", 4uLL, v1391, v1392, v1393, v1394, v1395, &v1651);
  *((_QWORD *)this + 288) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"slice", 5uLL, v1396, v1397, v1398, v1399, v1400, &v1651);
  *((_QWORD *)this + 289) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"smallestUnit", 0xCuLL, v1401, v1402, v1403, v1404, v1405, &v1651);
  *((_QWORD *)this + 290) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"sort", 4uLL, v1406, v1407, v1408, v1409, v1410, &v1651);
  *((_QWORD *)this + 291) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"source", 6uLL, v1411, v1412, v1413, v1414, v1415, &v1651);
  *((_QWORD *)this + 292) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"sourceCode", 0xAuLL, v1416, v1417, v1418, v1419, v1420, &v1651);
  *((_QWORD *)this + 293) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"sourceURL", 9uLL, v1421, v1422, v1423, v1424, v1425, &v1651);
  *((_QWORD *)this + 294) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"stack", 5uLL, v1426, v1427, v1428, v1429, v1430, &v1651);
  *((_QWORD *)this + 295) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"stackTraceLimit", 0xFuLL, v1431, v1432, v1433, v1434, v1435, &v1651);
  *((_QWORD *)this + 296) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"sticky", 6uLL, v1436, v1437, v1438, v1439, v1440, &v1651);
  *((_QWORD *)this + 297) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"style", 5uLL, v1441, v1442, v1443, v1444, v1445, &v1651);
  *((_QWORD *)this + 298) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"subarray", 8uLL, v1446, v1447, v1448, v1449, v1450, &v1651);
  *((_QWORD *)this + 299) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"summary", 7uLL, v1451, v1452, v1453, v1454, v1455, &v1651);
  *((_QWORD *)this + 300) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"target", 6uLL, v1456, v1457, v1458, v1459, v1460, &v1651);
  *((_QWORD *)this + 301) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"test", 4uLL, v1461, v1462, v1463, v1464, v1465, &v1651);
  *((_QWORD *)this + 302) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"then", 4uLL, v1466, v1467, v1468, v1469, v1470, &v1651);
  *((_QWORD *)this + 303) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"time", 4uLL, v1471, v1472, v1473, v1474, v1475, &v1651);
  *((_QWORD *)this + 304) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeStyle", 9uLL, v1476, v1477, v1478, v1479, v1480, &v1651);
  *((_QWORD *)this + 305) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeZone", 8uLL, v1481, v1482, v1483, v1484, v1485, &v1651);
  *((_QWORD *)this + 306) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeZoneName", 0xCuLL, v1486, v1487, v1488, v1489, v1490, &v1651);
  *((_QWORD *)this + 307) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toExponential", 0xDuLL, v1491, v1492, v1493, v1494, v1495, &v1651);
  *((_QWORD *)this + 308) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toFixed", 7uLL, v1496, v1497, v1498, v1499, v1500, &v1651);
  *((_QWORD *)this + 309) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toISOString", 0xBuLL, v1501, v1502, v1503, v1504, v1505, &v1651);
  *((_QWORD *)this + 310) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toJSON", 6uLL, v1506, v1507, v1508, v1509, v1510, &v1651);
  *((_QWORD *)this + 311) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLocaleString", 0xEuLL, v1511, v1512, v1513, v1514, v1515, &v1651);
  *((_QWORD *)this + 312) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toPrecision", 0xBuLL, v1516, v1517, v1518, v1519, v1520, &v1651);
  *((_QWORD *)this + 313) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toString", 8uLL, v1521, v1522, v1523, v1524, v1525, &v1651);
  *((_QWORD *)this + 314) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toTemporalInstant", 0x11uLL, v1526, v1527, v1528, v1529, v1530, &v1651);
  *((_QWORD *)this + 315) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"toWellFormed", 0xCuLL, v1531, v1532, v1533, v1534, v1535, &v1651);
  *((_QWORD *)this + 316) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"trailingZeroDisplay", 0x13uLL, v1536, v1537, v1538, v1539, v1540, &v1651);
  *((_QWORD *)this + 317) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"transfer", 8uLL, v1541, v1542, v1543, v1544, v1545, &v1651);
  *((_QWORD *)this + 318) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"transferToFixedLength", 0x15uLL, v1546, v1547, v1548, v1549, v1550, &v1651);
  *((_QWORD *)this + 319) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"type", 4uLL, v1551, v1552, v1553, v1554, v1555, &v1651);
  *((_QWORD *)this + 320) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"uid", 3uLL, v1556, v1557, v1558, v1559, v1560, &v1651);
  *((_QWORD *)this + 321) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"unicode", 7uLL, v1561, v1562, v1563, v1564, v1565, &v1651);
  *((_QWORD *)this + 322) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"unicodeSets", 0xBuLL, v1566, v1567, v1568, v1569, v1570, &v1651);
  *((_QWORD *)this + 323) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"unit", 4uLL, v1571, v1572, v1573, v1574, v1575, &v1651);
  *((_QWORD *)this + 324) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"usage", 5uLL, v1576, v1577, v1578, v1579, v1580, &v1651);
  *((_QWORD *)this + 325) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v1581, v1582, v1583, v1584, v1585, &v1651);
  *((_QWORD *)this + 326) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"valueOf", 7uLL, v1586, v1587, v1588, v1589, v1590, &v1651);
  *((_QWORD *)this + 327) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"week", 4uLL, v1591, v1592, v1593, v1594, v1595, &v1651);
  *((_QWORD *)this + 328) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"weekday", 7uLL, v1596, v1597, v1598, v1599, v1600, &v1651);
  *((_QWORD *)this + 329) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"weeks", 5uLL, v1601, v1602, v1603, v1604, v1605, &v1651);
  *((_QWORD *)this + 330) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"weeksDisplay", 0xCuLL, v1606, v1607, v1608, v1609, v1610, &v1651);
  *((_QWORD *)this + 331) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"writable", 8uLL, v1611, v1612, v1613, v1614, v1615, &v1651);
  *((_QWORD *)this + 332) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"year", 4uLL, v1616, v1617, v1618, v1619, v1620, &v1651);
  *((_QWORD *)this + 333) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"years", 5uLL, v1621, v1622, v1623, v1624, v1625, &v1651);
  *((_QWORD *)this + 334) = v1651;
  WTF::AtomStringImpl::addLiteral((uint64_t)"yearsDisplay", 0xCuLL, v1626, v1627, v1628, v1629, v1630, &v1651);
  *((_QWORD *)this + 335) = v1651;
  v1636 = (_QWORD *)*((_QWORD *)this + 6);
  v1637 = (_DWORD *)v1636[513];
  if (v1637)
    *v1637 += 2;
  *((_QWORD *)this + 336) = v1637;
  v1638 = (_DWORD *)v1636[515];
  if (v1638)
    *v1638 += 2;
  *((_QWORD *)this + 337) = v1638;
  v1639 = (_DWORD *)v1636[517];
  if (v1639)
    *v1639 += 2;
  *((_QWORD *)this + 338) = v1639;
  v1640 = (_DWORD *)v1636[519];
  if (v1640)
    *v1640 += 2;
  *((_QWORD *)this + 339) = v1640;
  v1641 = (_DWORD *)v1636[521];
  if (v1641)
    *v1641 += 2;
  *((_QWORD *)this + 340) = v1641;
  v1642 = (_DWORD *)v1636[523];
  if (v1642)
    *v1642 += 2;
  *((_QWORD *)this + 341) = v1642;
  v1643 = (_DWORD *)v1636[525];
  if (v1643)
    *v1643 += 2;
  *((_QWORD *)this + 342) = v1643;
  v1644 = (_DWORD *)v1636[527];
  if (v1644)
    *v1644 += 2;
  *((_QWORD *)this + 343) = v1644;
  v1645 = (_DWORD *)v1636[529];
  if (v1645)
    *v1645 += 2;
  *((_QWORD *)this + 344) = v1645;
  v1646 = (_DWORD *)v1636[531];
  if (v1646)
    *v1646 += 2;
  *((_QWORD *)this + 345) = v1646;
  v1647 = (_DWORD *)v1636[533];
  if (v1647)
    *v1647 += 2;
  *((_QWORD *)this + 346) = v1647;
  v1648 = (_DWORD *)v1636[535];
  if (v1648)
    *v1648 += 2;
  *((_QWORD *)this + 347) = v1648;
  v1649 = (_DWORD *)v1636[537];
  if (v1649)
    *v1649 += 2;
  *((_QWORD *)this + 348) = v1649;
  *((_QWORD *)this + 349) = 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"#constructor", 0xCuLL, v1631, v1632, v1633, v1634, v1635, &v1651);
  *((_QWORD *)this + 350) = v1651;
  return this;
}

void JSC::CommonIdentifiers::~CommonIdentifiers(JSC::CommonIdentifiers *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  JSC::BuiltinNames *v353;
  unint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  void *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  void *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t v592;
  void *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  void *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  void *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  void *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  void *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  void *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  void *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  void *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  void *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  void *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  void *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  void *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  void *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  void *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  void *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unint64_t v728;
  void *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  void *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  void *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unint64_t v752;
  void *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  void *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  void *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  void *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  void *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unint64_t v800;
  void *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  void *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  void *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  void *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  void *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  void *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  void *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  void *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  void *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  void *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  unint64_t v880;
  void *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  void *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  void *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  void *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  unint64_t v920;
  void *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  unint64_t v928;
  void *v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  void *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  void *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  void *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unint64_t v960;
  void *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  unint64_t v968;
  void *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  void *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unint64_t v984;
  void *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  void *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  void *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  void *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  unint64_t v1016;
  void *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unint64_t v1024;
  void *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unint64_t v1032;
  void *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  void *v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  void *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  void *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  void *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  unint64_t v1072;
  void *v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  void *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  unint64_t v1088;
  void *v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  void *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  void *v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unint64_t v1112;
  void *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  void *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  void *v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  void *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  void *v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  void *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  unint64_t v1160;
  void *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  void *v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  void *v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  void *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  void *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  void *v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  unint64_t v1208;
  void *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  void *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  unint64_t v1224;
  void *v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  unint64_t v1232;
  void *v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  unint64_t v1240;
  void *v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  void *v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  void *v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  unint64_t v1264;
  void *v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  unint64_t v1272;
  void *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  void *v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  void *v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  unint64_t v1296;
  void *v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  void *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  void *v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  void *v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  void *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  void *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  unint64_t v1344;
  void *v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  unint64_t v1352;
  void *v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  void *v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  unint64_t v1368;
  void *v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  void *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  void *v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  unint64_t v1392;
  void *v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  unint64_t v1400;
  void *v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  void *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  void *v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  void *v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  void *v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  void *v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  unint64_t v1448;
  void *v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unint64_t v1456;
  void *v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  unint64_t v1464;
  void *v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  unint64_t v1472;
  void *v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  unint64_t v1480;
  void *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  unint64_t v1488;
  void *v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  unint64_t v1496;
  void *v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  void *v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  void *v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  unint64_t v1520;
  void *v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unint64_t v1528;
  void *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  unint64_t v1536;
  void *v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  void *v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  unint64_t v1552;
  void *v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  unint64_t v1560;
  void *v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  unint64_t v1568;
  void *v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  void *v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  unint64_t v1584;
  void *v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  unint64_t v1592;
  void *v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  void *v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  unint64_t v1608;
  void *v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  unint64_t v1616;
  void *v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  unint64_t v1624;
  void *v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  unint64_t v1632;
  void *v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  unint64_t v1640;
  void *v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  unint64_t v1648;
  void *v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  unint64_t v1656;
  void *v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  unint64_t v1664;
  void *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  unint64_t v1672;
  void *v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  unint64_t v1680;
  void *v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  unint64_t v1688;
  void *v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unint64_t v1696;
  void *v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  unint64_t v1704;
  void *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  unint64_t v1712;
  void *v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  unint64_t v1720;
  void *v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  unint64_t v1728;
  void *v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  unint64_t v1736;
  void *v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  unint64_t v1744;
  void *v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  void *v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  unint64_t v1760;
  void *v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  unint64_t v1768;
  void *v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  unint64_t v1776;
  void *v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  unint64_t v1784;
  void *v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  unint64_t v1792;
  void *v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  unint64_t v1800;
  void *v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  unint64_t v1808;
  void *v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  unint64_t v1816;
  void *v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  void *v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  unint64_t v1832;
  void *v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  unint64_t v1840;
  void *v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  unint64_t v1848;
  void *v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  unint64_t v1856;
  void *v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  unint64_t v1864;
  void *v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  unint64_t v1872;
  void *v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  unint64_t v1880;
  void *v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  unint64_t v1888;
  void *v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  unint64_t v1896;
  void *v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  void *v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  void *v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  unint64_t v1920;
  void *v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  unint64_t v1928;
  void *v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  void *v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  void *v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  unint64_t v1952;
  void *v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  unint64_t v1960;
  void *v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  unint64_t v1968;
  void *v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  unint64_t v1976;
  void *v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  unint64_t v1984;
  void *v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  unint64_t v1992;
  void *v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unint64_t v2000;
  void *v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  unint64_t v2008;
  void *v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  unint64_t v2016;
  void *v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  unint64_t v2024;
  void *v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  unint64_t v2032;
  void *v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  unint64_t v2040;
  void *v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  unint64_t v2048;
  void *v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  unint64_t v2056;
  void *v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  unint64_t v2064;
  void *v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  unint64_t v2072;
  void *v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  unint64_t v2080;
  void *v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  unint64_t v2088;
  void *v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  unint64_t v2096;
  void *v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  unint64_t v2104;
  void *v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  unint64_t v2112;
  void *v2113;
  uint64_t v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  unint64_t v2120;
  void *v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  unint64_t v2128;
  void *v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  unint64_t v2136;
  void *v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  unint64_t v2144;
  void *v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  unint64_t v2152;
  void *v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  unint64_t v2160;
  void *v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  unint64_t v2168;
  void *v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  unint64_t v2176;
  void *v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  unint64_t v2184;
  void *v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  unint64_t v2192;
  void *v2193;
  uint64_t v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t v2199;
  unint64_t v2200;
  void *v2201;
  uint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  unint64_t v2208;
  void *v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  unint64_t v2216;
  void *v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  unint64_t v2224;
  void *v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  unint64_t v2232;
  void *v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  unint64_t v2240;
  void *v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  unint64_t v2248;
  void *v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  unint64_t v2256;
  void *v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  unint64_t v2264;
  void *v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  uint64_t v2271;
  unint64_t v2272;
  void *v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  unint64_t v2280;
  void *v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  unint64_t v2288;
  void *v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  uint64_t v2295;
  unint64_t v2296;
  void *v2297;
  uint64_t v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  unint64_t v2304;
  void *v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  unint64_t v2312;
  void *v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  unint64_t v2320;
  void *v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  unint64_t v2328;
  void *v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  unint64_t v2336;
  void *v2337;
  uint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  unint64_t v2344;
  void *v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  unint64_t v2352;
  void *v2353;
  uint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  unint64_t v2360;
  void *v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  unint64_t v2368;
  void *v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  unint64_t v2376;
  void *v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  unint64_t v2384;
  void *v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  unint64_t v2392;
  void *v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  unint64_t v2400;
  void *v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  unint64_t v2408;
  void *v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  unint64_t v2416;
  void *v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  unint64_t v2424;
  void *v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  unint64_t v2432;
  void *v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  unint64_t v2440;
  void *v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  unint64_t v2448;
  void *v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  unint64_t v2456;
  void *v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  unint64_t v2464;
  void *v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  unint64_t v2472;
  void *v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  unint64_t v2480;
  void *v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  unint64_t v2488;
  void *v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  unint64_t v2496;
  void *v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503;
  unint64_t v2504;
  void *v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  unint64_t v2512;
  void *v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  unint64_t v2520;
  void *v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  unint64_t v2528;
  void *v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  uint64_t v2535;
  unint64_t v2536;
  void *v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  unint64_t v2544;
  void *v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t v2551;
  unint64_t v2552;
  void *v2553;
  uint64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  unint64_t v2560;
  void *v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  unint64_t v2568;
  void *v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  unint64_t v2576;
  void *v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  uint64_t v2582;
  uint64_t v2583;
  unint64_t v2584;
  void *v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  uint64_t v2591;
  unint64_t v2592;
  void *v2593;
  uint64_t v2594;
  uint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  unint64_t v2600;
  void *v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  unint64_t v2608;
  void *v2609;
  uint64_t v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  unint64_t v2616;
  void *v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  unint64_t v2624;
  void *v2625;
  uint64_t v2626;
  uint64_t v2627;
  uint64_t v2628;
  uint64_t v2629;
  uint64_t v2630;
  uint64_t v2631;
  unint64_t v2632;
  void *v2633;
  uint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t v2639;
  unint64_t v2640;
  void *v2641;
  uint64_t v2642;
  uint64_t v2643;
  uint64_t v2644;
  uint64_t v2645;
  uint64_t v2646;
  uint64_t v2647;
  unint64_t v2648;
  void *v2649;
  uint64_t v2650;
  uint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  unint64_t v2656;
  void *v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t v2661;
  uint64_t v2662;
  uint64_t v2663;
  unint64_t v2664;
  void *v2665;
  uint64_t v2666;
  uint64_t v2667;
  uint64_t v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  unint64_t v2672;
  void *v2673;
  uint64_t v2674;
  uint64_t v2675;
  uint64_t v2676;
  uint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  unint64_t v2680;
  void *v2681;
  uint64_t v2682;
  uint64_t v2683;
  uint64_t v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  unint64_t v2688;
  void *v2689;
  uint64_t v2690;
  uint64_t v2691;
  uint64_t v2692;
  uint64_t v2693;
  uint64_t v2694;
  uint64_t v2695;
  unint64_t v2696;
  void *v2697;
  uint64_t v2698;
  uint64_t v2699;
  uint64_t v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  unint64_t v2704;
  void *v2705;
  uint64_t v2706;
  uint64_t v2707;
  uint64_t v2708;
  uint64_t v2709;
  uint64_t v2710;
  uint64_t v2711;
  unint64_t v2712;
  void *v2713;
  uint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  unint64_t v2720;
  void *v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t v2727;
  unint64_t v2728;
  void *v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  unint64_t v2736;
  void *v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  uint64_t v2741;
  uint64_t v2742;
  uint64_t v2743;
  unint64_t v2744;
  void *v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t v2749;
  uint64_t v2750;
  uint64_t v2751;
  unint64_t v2752;
  void *v2753;
  uint64_t v2754;
  uint64_t v2755;
  uint64_t v2756;
  uint64_t v2757;
  uint64_t v2758;
  uint64_t v2759;
  unint64_t v2760;
  void *v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  uint64_t v2766;
  uint64_t v2767;
  unint64_t v2768;
  void *v2769;
  uint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  uint64_t v2773;
  uint64_t v2774;
  uint64_t v2775;
  unint64_t v2776;
  void *v2777;
  uint64_t v2778;
  uint64_t v2779;
  uint64_t v2780;
  uint64_t v2781;
  uint64_t v2782;
  uint64_t v2783;
  unint64_t v2784;
  void *v2785;
  uint64_t v2786;
  uint64_t v2787;
  uint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  unint64_t v2792;
  void *v2793;
  uint64_t v2794;
  uint64_t v2795;
  uint64_t v2796;
  uint64_t v2797;
  uint64_t v2798;
  uint64_t v2799;
  unint64_t v2800;
  void *v2801;
  uint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  uint64_t v2805;
  uint64_t v2806;
  uint64_t v2807;
  unint64_t v2808;
  void *v2809;
  uint64_t v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  uint64_t v2814;
  uint64_t v2815;
  unint64_t v2816;
  void *v2817;
  uint64_t v2818;
  uint64_t v2819;
  uint64_t v2820;
  uint64_t v2821;
  uint64_t v2822;
  uint64_t v2823;
  unint64_t v2824;
  void *v2825;
  uint64_t v2826;
  uint64_t v2827;
  uint64_t v2828;
  uint64_t v2829;
  uint64_t v2830;
  uint64_t v2831;
  unint64_t v2832;
  void *v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t v2837;
  uint64_t v2838;
  uint64_t v2839;
  unint64_t v2840;
  void *v2841;
  uint64_t v2842;
  uint64_t v2843;
  uint64_t v2844;
  uint64_t v2845;
  uint64_t v2846;
  uint64_t v2847;
  unint64_t v2848;
  void *v2849;
  uint64_t v2850;
  uint64_t v2851;
  uint64_t v2852;
  uint64_t v2853;
  uint64_t v2854;
  uint64_t v2855;
  unint64_t v2856;
  void *v2857;
  uint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  uint64_t v2861;
  uint64_t v2862;
  uint64_t v2863;
  unint64_t v2864;
  void *v2865;
  uint64_t v2866;
  uint64_t v2867;
  uint64_t v2868;
  uint64_t v2869;
  uint64_t v2870;
  uint64_t v2871;
  unint64_t v2872;
  void *v2873;
  uint64_t v2874;
  uint64_t v2875;
  uint64_t v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  unint64_t v2880;
  void *v2881;
  uint64_t v2882;
  uint64_t v2883;
  uint64_t v2884;
  uint64_t v2885;
  uint64_t v2886;
  uint64_t v2887;
  unint64_t v2888;
  void *v2889;
  uint64_t v2890;
  uint64_t v2891;
  uint64_t v2892;
  uint64_t v2893;
  uint64_t v2894;
  uint64_t v2895;
  unint64_t v2896;
  void *v2897;
  uint64_t v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t v2903;
  unint64_t v2904;
  void *v2905;
  uint64_t v2906;
  uint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  uint64_t v2910;
  uint64_t v2911;
  unint64_t v2912;
  void *v2913;
  uint64_t v2914;
  uint64_t v2915;
  uint64_t v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  unint64_t v2920;
  void *v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  uint64_t v2926;
  uint64_t v2927;
  unint64_t v2928;
  void *v2929;
  uint64_t v2930;
  uint64_t v2931;
  uint64_t v2932;
  uint64_t v2933;
  uint64_t v2934;
  uint64_t v2935;
  unint64_t v2936;
  void *v2937;
  uint64_t v2938;
  uint64_t v2939;
  uint64_t v2940;
  uint64_t v2941;
  uint64_t v2942;
  uint64_t v2943;
  unint64_t v2944;
  void *v2945;
  uint64_t v2946;
  uint64_t v2947;
  uint64_t v2948;
  uint64_t v2949;
  uint64_t v2950;
  uint64_t v2951;
  unint64_t v2952;
  void *v2953;
  uint64_t v2954;
  uint64_t v2955;
  uint64_t v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t v2959;
  unint64_t v2960;
  void *v2961;
  uint64_t v2962;
  uint64_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  uint64_t v2966;
  uint64_t v2967;
  unint64_t v2968;
  void *v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  uint64_t v2973;
  uint64_t v2974;
  uint64_t v2975;
  unint64_t v2976;
  void *v2977;
  uint64_t v2978;
  uint64_t v2979;
  uint64_t v2980;
  uint64_t v2981;
  uint64_t v2982;
  uint64_t v2983;
  unint64_t v2984;
  void *v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  uint64_t v2990;
  uint64_t v2991;
  unint64_t v2992;
  void *v2993;
  uint64_t v2994;
  uint64_t v2995;
  uint64_t v2996;
  uint64_t v2997;
  uint64_t v2998;
  uint64_t v2999;
  unint64_t v3000;
  void *v3001;
  uint64_t v3002;
  uint64_t v3003;
  uint64_t v3004;
  uint64_t v3005;
  uint64_t v3006;
  uint64_t v3007;
  unint64_t v3008;
  void *v3009;
  uint64_t v3010;
  uint64_t v3011;
  uint64_t v3012;
  uint64_t v3013;
  uint64_t v3014;
  uint64_t v3015;
  unint64_t v3016;
  void *v3017;
  uint64_t v3018;
  uint64_t v3019;
  uint64_t v3020;
  uint64_t v3021;
  uint64_t v3022;
  uint64_t v3023;
  unint64_t v3024;
  void *v3025;
  uint64_t v3026;
  uint64_t v3027;
  uint64_t v3028;
  uint64_t v3029;
  uint64_t v3030;
  uint64_t v3031;
  unint64_t v3032;
  void *v3033;
  uint64_t v3034;
  uint64_t v3035;
  uint64_t v3036;
  uint64_t v3037;
  uint64_t v3038;
  uint64_t v3039;
  unint64_t v3040;
  void *v3041;
  uint64_t v3042;
  uint64_t v3043;
  uint64_t v3044;
  uint64_t v3045;
  uint64_t v3046;
  uint64_t v3047;
  unint64_t v3048;
  void *v3049;
  uint64_t v3050;
  uint64_t v3051;
  uint64_t v3052;
  uint64_t v3053;
  uint64_t v3054;
  uint64_t v3055;
  unint64_t v3056;
  void *v3057;
  uint64_t v3058;
  uint64_t v3059;
  uint64_t v3060;
  uint64_t v3061;
  uint64_t v3062;
  uint64_t v3063;
  unint64_t v3064;
  void *v3065;
  uint64_t v3066;
  uint64_t v3067;
  uint64_t v3068;
  uint64_t v3069;
  uint64_t v3070;
  uint64_t v3071;
  unint64_t v3072;
  void *v3073;
  uint64_t v3074;
  uint64_t v3075;
  uint64_t v3076;
  uint64_t v3077;
  uint64_t v3078;
  uint64_t v3079;
  unint64_t v3080;
  void *v3081;
  uint64_t v3082;
  uint64_t v3083;
  uint64_t v3084;
  uint64_t v3085;
  uint64_t v3086;
  uint64_t v3087;
  unint64_t v3088;
  void *v3089;
  uint64_t v3090;
  uint64_t v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  uint64_t v3095;
  unint64_t v3096;
  void *v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  uint64_t v3102;
  uint64_t v3103;
  unint64_t v3104;
  void *v3105;
  uint64_t v3106;
  uint64_t v3107;
  uint64_t v3108;
  uint64_t v3109;
  uint64_t v3110;
  uint64_t v3111;
  unint64_t v3112;
  void *v3113;
  uint64_t v3114;
  uint64_t v3115;
  uint64_t v3116;
  uint64_t v3117;
  uint64_t v3118;
  uint64_t v3119;
  unint64_t v3120;
  void *v3121;
  uint64_t v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  uint64_t v3126;
  uint64_t v3127;
  unint64_t v3128;
  void *v3129;
  uint64_t v3130;
  uint64_t v3131;
  uint64_t v3132;
  uint64_t v3133;
  uint64_t v3134;
  uint64_t v3135;
  unint64_t v3136;
  void *v3137;
  uint64_t v3138;
  uint64_t v3139;
  uint64_t v3140;
  uint64_t v3141;
  uint64_t v3142;
  uint64_t v3143;
  unint64_t v3144;
  void *v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  uint64_t v3149;
  uint64_t v3150;
  uint64_t v3151;
  unint64_t v3152;
  void *v3153;
  uint64_t v3154;
  uint64_t v3155;
  uint64_t v3156;
  uint64_t v3157;
  uint64_t v3158;
  uint64_t v3159;
  unint64_t v3160;
  void *v3161;
  uint64_t v3162;
  uint64_t v3163;
  uint64_t v3164;
  uint64_t v3165;
  uint64_t v3166;
  uint64_t v3167;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v384, v385, v386, v387, v388, v389, v390, v391);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v400, v401, v402, v403, v404, v405, v406, v407);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v408, v409, v410, v411, v412, v413, v414, v415);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v416, v417, v418, v419, v420, v421, v422, v423);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v424, v425, v426, v427, v428, v429, v430, v431);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v432, v433, v434, v435, v436, v437, v438, v439);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v440, v441, v442, v443, v444, v445, v446, v447);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v448, v449, v450, v451, v452, v453, v454, v455);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v456, v457, v458, v459, v460, v461, v462, v463);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v464, v465, v466, v467, v468, v469, v470, v471);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v488, v489, v490, v491, v492, v493, v494, v495);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v496, v497, v498, v499, v500, v501, v502, v503);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v504, v505, v506, v507, v508, v509, v510, v511);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v512, v513, v514, v515, v516, v517, v518, v519);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v520, v521, v522, v523, v524, v525, v526, v527);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v528, v529, v530, v531, v532, v533, v534, v535);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v536, v537, v538, v539, v540, v541, v542, v543);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v544, v545, v546, v547, v548, v549, v550, v551);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = (WTF::StringImpl *)*((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v552, v553, v554, v555, v556, v557, v558, v559);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v568, v569, v570, v571, v572, v573, v574, v575);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v576, v577, v578, v579, v580, v581, v582, v583);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v584, v585, v586, v587, v588, v589, v590, v591);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v592, v593, v594, v595, v596, v597, v598, v599);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v600, v601, v602, v603, v604, v605, v606, v607);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v608, v609, v610, v611, v612, v613, v614, v615);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v616, v617, v618, v619, v620, v621, v622, v623);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  v41 = (WTF::StringImpl *)*((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v624, v625, v626, v627, v628, v629, v630, v631);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v632, v633, v634, v635, v636, v637, v638, v639);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v640, v641, v642, v643, v644, v645, v646, v647);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v648, v649, v650, v651, v652, v653, v654, v655);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v656, v657, v658, v659, v660, v661, v662, v663);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v664, v665, v666, v667, v668, v669, v670, v671);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v672, v673, v674, v675, v676, v677, v678, v679);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v680, v681, v682, v683, v684, v685, v686, v687);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v688, v689, v690, v691, v692, v693, v694, v695);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v696, v697, v698, v699, v700, v701, v702, v703);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v704, v705, v706, v707, v708, v709, v710, v711);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = (WTF::StringImpl *)*((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v712, v713, v714, v715, v716, v717, v718, v719);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v720, v721, v722, v723, v724, v725, v726, v727);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v728, v729, v730, v731, v732, v733, v734, v735);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v736, v737, v738, v739, v740, v741, v742, v743);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v744, v745, v746, v747, v748, v749, v750, v751);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v752, v753, v754, v755, v756, v757, v758, v759);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v760, v761, v762, v763, v764, v765, v766, v767);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v768, v769, v770, v771, v772, v773, v774, v775);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v776, v777, v778, v779, v780, v781, v782, v783);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = (WTF::StringImpl *)*((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v784, v785, v786, v787, v788, v789, v790, v791);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v792, v793, v794, v795, v796, v797, v798, v799);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = (WTF::StringImpl *)*((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v800, v801, v802, v803, v804, v805, v806, v807);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = (WTF::StringImpl *)*((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v808, v809, v810, v811, v812, v813, v814, v815);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v816, v817, v818, v819, v820, v821, v822, v823);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v824, v825, v826, v827, v828, v829, v830, v831);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v832, v833, v834, v835, v836, v837, v838, v839);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = (WTF::StringImpl *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v840, v841, v842, v843, v844, v845, v846, v847);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v848, v849, v850, v851, v852, v853, v854, v855);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v856, v857, v858, v859, v860, v861, v862, v863);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v864, v865, v866, v867, v868, v869, v870, v871);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v872, v873, v874, v875, v876, v877, v878, v879);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v880, v881, v882, v883, v884, v885, v886, v887);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v888, v889, v890, v891, v892, v893, v894, v895);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = (WTF::StringImpl *)*((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v896, v897, v898, v899, v900, v901, v902, v903);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v904, v905, v906, v907, v908, v909, v910, v911);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v912, v913, v914, v915, v916, v917, v918, v919);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v920, v921, v922, v923, v924, v925, v926, v927);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = (WTF::StringImpl *)*((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v928, v929, v930, v931, v932, v933, v934, v935);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v936, v937, v938, v939, v940, v941, v942, v943);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = (WTF::StringImpl *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v944, v945, v946, v947, v948, v949, v950, v951);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = (WTF::StringImpl *)*((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v952, v953, v954, v955, v956, v957, v958, v959);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = (WTF::StringImpl *)*((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v960, v961, v962, v963, v964, v965, v966, v967);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = (WTF::StringImpl *)*((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v968, v969, v970, v971, v972, v973, v974, v975);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v976, v977, v978, v979, v980, v981, v982, v983);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = (WTF::StringImpl *)*((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v984, v985, v986, v987, v988, v989, v990, v991);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = (WTF::StringImpl *)*((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v992, v993, v994, v995, v996, v997, v998, v999);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = (WTF::StringImpl *)*((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = (WTF::StringImpl *)*((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = (WTF::StringImpl *)*((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1016, v1017, v1018, v1019, v1020, v1021, v1022, v1023);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1048, v1049, v1050, v1051, v1052, v1053, v1054, v1055);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1056, v1057, v1058, v1059, v1060, v1061, v1062, v1063);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = (WTF::StringImpl *)*((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1064, v1065, v1066, v1067, v1068, v1069, v1070, v1071);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1072, v1073, v1074, v1075, v1076, v1077, v1078, v1079);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1080, v1081, v1082, v1083, v1084, v1085, v1086, v1087);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = (WTF::StringImpl *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = (WTF::StringImpl *)*((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1096, v1097, v1098, v1099, v1100, v1101, v1102, v1103);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1104, v1105, v1106, v1107, v1108, v1109, v1110, v1111);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1112, v1113, v1114, v1115, v1116, v1117, v1118, v1119);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1120, v1121, v1122, v1123, v1124, v1125, v1126, v1127);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1128, v1129, v1130, v1131, v1132, v1133, v1134, v1135);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1136, v1137, v1138, v1139, v1140, v1141, v1142, v1143);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1144, v1145, v1146, v1147, v1148, v1149, v1150, v1151);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1184, v1185, v1186, v1187, v1188, v1189, v1190, v1191);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1200, v1201, v1202, v1203, v1204, v1205, v1206, v1207);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1208, v1209, v1210, v1211, v1212, v1213, v1214, v1215);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1216, v1217, v1218, v1219, v1220, v1221, v1222, v1223);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1224, v1225, v1226, v1227, v1228, v1229, v1230, v1231);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1232, v1233, v1234, v1235, v1236, v1237, v1238, v1239);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1240, v1241, v1242, v1243, v1244, v1245, v1246, v1247);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1256, v1257, v1258, v1259, v1260, v1261, v1262, v1263);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1264, v1265, v1266, v1267, v1268, v1269, v1270, v1271);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1272, v1273, v1274, v1275, v1276, v1277, v1278, v1279);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1280, v1281, v1282, v1283, v1284, v1285, v1286, v1287);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1288, v1289, v1290, v1291, v1292, v1293, v1294, v1295);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1296, v1297, v1298, v1299, v1300, v1301, v1302, v1303);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1312, v1313, v1314, v1315, v1316, v1317, v1318, v1319);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1320, v1321, v1322, v1323, v1324, v1325, v1326, v1327);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1328, v1329, v1330, v1331, v1332, v1333, v1334, v1335);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1336, v1337, v1338, v1339, v1340, v1341, v1342, v1343);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1344, v1345, v1346, v1347, v1348, v1349, v1350, v1351);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1352, v1353, v1354, v1355, v1356, v1357, v1358, v1359);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1368, v1369, v1370, v1371, v1372, v1373, v1374, v1375);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1392, v1393, v1394, v1395, v1396, v1397, v1398, v1399);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1400, v1401, v1402, v1403, v1404, v1405, v1406, v1407);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = (WTF::StringImpl *)*((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1408, v1409, v1410, v1411, v1412, v1413, v1414, v1415);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = (WTF::StringImpl *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1416, v1417, v1418, v1419, v1420, v1421, v1422, v1423);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = (WTF::StringImpl *)*((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = (WTF::StringImpl *)*((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = (WTF::StringImpl *)*((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1448, v1449, v1450, v1451, v1452, v1453, v1454, v1455);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = (WTF::StringImpl *)*((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = (WTF::StringImpl *)*((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1472, v1473, v1474, v1475, v1476, v1477, v1478, v1479);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = (WTF::StringImpl *)*((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1488, v1489, v1490, v1491, v1492, v1493, v1494, v1495);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = (WTF::StringImpl *)*((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
    {
      WTF::StringImpl::~StringImpl(v150, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1496, v1497, v1498, v1499, v1500, v1501, v1502, v1503);
    }
    else
    {
      *(_DWORD *)v150 -= 2;
    }
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1504, v1505, v1506, v1507, v1508, v1509, v1510, v1511);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  v152 = (WTF::StringImpl *)*((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
    {
      WTF::StringImpl::~StringImpl(v152, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1512, v1513, v1514, v1515, v1516, v1517, v1518, v1519);
    }
    else
    {
      *(_DWORD *)v152 -= 2;
    }
  }
  v153 = (WTF::StringImpl *)*((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
    {
      WTF::StringImpl::~StringImpl(v153, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1520, v1521, v1522, v1523, v1524, v1525, v1526, v1527);
    }
    else
    {
      *(_DWORD *)v153 -= 2;
    }
  }
  v154 = (WTF::StringImpl *)*((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
    {
      WTF::StringImpl::~StringImpl(v154, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1528, v1529, v1530, v1531, v1532, v1533, v1534, v1535);
    }
    else
    {
      *(_DWORD *)v154 -= 2;
    }
  }
  v155 = (WTF::StringImpl *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1536, v1537, v1538, v1539, v1540, v1541, v1542, v1543);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  v156 = (WTF::StringImpl *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1544, v1545, v1546, v1547, v1548, v1549, v1550, v1551);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  v157 = (WTF::StringImpl *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
    {
      WTF::StringImpl::~StringImpl(v157, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1552, v1553, v1554, v1555, v1556, v1557, v1558, v1559);
    }
    else
    {
      *(_DWORD *)v157 -= 2;
    }
  }
  v158 = (WTF::StringImpl *)*((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
    {
      WTF::StringImpl::~StringImpl(v158, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1560, v1561, v1562, v1563, v1564, v1565, v1566, v1567);
    }
    else
    {
      *(_DWORD *)v158 -= 2;
    }
  }
  v159 = (WTF::StringImpl *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1568, v1569, v1570, v1571, v1572, v1573, v1574, v1575);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
    {
      WTF::StringImpl::~StringImpl(v160, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1576, v1577, v1578, v1579, v1580, v1581, v1582, v1583);
    }
    else
    {
      *(_DWORD *)v160 -= 2;
    }
  }
  v161 = (WTF::StringImpl *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
    {
      WTF::StringImpl::~StringImpl(v161, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1584, v1585, v1586, v1587, v1588, v1589, v1590, v1591);
    }
    else
    {
      *(_DWORD *)v161 -= 2;
    }
  }
  v162 = (WTF::StringImpl *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
    {
      WTF::StringImpl::~StringImpl(v162, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1592, v1593, v1594, v1595, v1596, v1597, v1598, v1599);
    }
    else
    {
      *(_DWORD *)v162 -= 2;
    }
  }
  v163 = (WTF::StringImpl *)*((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
    {
      WTF::StringImpl::~StringImpl(v163, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1600, v1601, v1602, v1603, v1604, v1605, v1606, v1607);
    }
    else
    {
      *(_DWORD *)v163 -= 2;
    }
  }
  v164 = (WTF::StringImpl *)*((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
    {
      WTF::StringImpl::~StringImpl(v164, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1608, v1609, v1610, v1611, v1612, v1613, v1614, v1615);
    }
    else
    {
      *(_DWORD *)v164 -= 2;
    }
  }
  v165 = (WTF::StringImpl *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::~StringImpl(v165, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1616, v1617, v1618, v1619, v1620, v1621, v1622, v1623);
    }
    else
    {
      *(_DWORD *)v165 -= 2;
    }
  }
  v166 = (WTF::StringImpl *)*((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1624, v1625, v1626, v1627, v1628, v1629, v1630, v1631);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
  }
  v167 = (WTF::StringImpl *)*((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1632, v1633, v1634, v1635, v1636, v1637, v1638, v1639);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
  v168 = (WTF::StringImpl *)*((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
    {
      WTF::StringImpl::~StringImpl(v168, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1640, v1641, v1642, v1643, v1644, v1645, v1646, v1647);
    }
    else
    {
      *(_DWORD *)v168 -= 2;
    }
  }
  v169 = (WTF::StringImpl *)*((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
    {
      WTF::StringImpl::~StringImpl(v169, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1648, v1649, v1650, v1651, v1652, v1653, v1654, v1655);
    }
    else
    {
      *(_DWORD *)v169 -= 2;
    }
  }
  v170 = (WTF::StringImpl *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  v171 = (WTF::StringImpl *)*((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v172 = (WTF::StringImpl *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1672, v1673, v1674, v1675, v1676, v1677, v1678, v1679);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1680, v1681, v1682, v1683, v1684, v1685, v1686, v1687);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
    {
      WTF::StringImpl::~StringImpl(v174, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1688, v1689, v1690, v1691, v1692, v1693, v1694, v1695);
    }
    else
    {
      *(_DWORD *)v174 -= 2;
    }
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1696, v1697, v1698, v1699, v1700, v1701, v1702, v1703);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  v176 = (WTF::StringImpl *)*((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1704, v1705, v1706, v1707, v1708, v1709, v1710, v1711);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1712, v1713, v1714, v1715, v1716, v1717, v1718, v1719);
    }
    else
    {
      *(_DWORD *)v177 -= 2;
    }
  }
  v178 = (WTF::StringImpl *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
    {
      WTF::StringImpl::~StringImpl(v178, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1720, v1721, v1722, v1723, v1724, v1725, v1726, v1727);
    }
    else
    {
      *(_DWORD *)v178 -= 2;
    }
  }
  v179 = (WTF::StringImpl *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
    {
      WTF::StringImpl::~StringImpl(v179, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1728, v1729, v1730, v1731, v1732, v1733, v1734, v1735);
    }
    else
    {
      *(_DWORD *)v179 -= 2;
    }
  }
  v180 = (WTF::StringImpl *)*((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
    {
      WTF::StringImpl::~StringImpl(v180, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1736, v1737, v1738, v1739, v1740, v1741, v1742, v1743);
    }
    else
    {
      *(_DWORD *)v180 -= 2;
    }
  }
  v181 = (WTF::StringImpl *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
    {
      WTF::StringImpl::~StringImpl(v181, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1744, v1745, v1746, v1747, v1748, v1749, v1750, v1751);
    }
    else
    {
      *(_DWORD *)v181 -= 2;
    }
  }
  v182 = (WTF::StringImpl *)*((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1752, v1753, v1754, v1755, v1756, v1757, v1758, v1759);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v183 = (WTF::StringImpl *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1760, v1761, v1762, v1763, v1764, v1765, v1766, v1767);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  v184 = (WTF::StringImpl *)*((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
    {
      WTF::StringImpl::~StringImpl(v184, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1768, v1769, v1770, v1771, v1772, v1773, v1774, v1775);
    }
    else
    {
      *(_DWORD *)v184 -= 2;
    }
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
    {
      WTF::StringImpl::~StringImpl(v185, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1776, v1777, v1778, v1779, v1780, v1781, v1782, v1783);
    }
    else
    {
      *(_DWORD *)v185 -= 2;
    }
  }
  v186 = (WTF::StringImpl *)*((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
    {
      WTF::StringImpl::~StringImpl(v186, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1784, v1785, v1786, v1787, v1788, v1789, v1790, v1791);
    }
    else
    {
      *(_DWORD *)v186 -= 2;
    }
  }
  v187 = (WTF::StringImpl *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1792, v1793, v1794, v1795, v1796, v1797, v1798, v1799);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v188 = (WTF::StringImpl *)*((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1800, v1801, v1802, v1803, v1804, v1805, v1806, v1807);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
  v189 = (WTF::StringImpl *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
    {
      WTF::StringImpl::~StringImpl(v189, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1808, v1809, v1810, v1811, v1812, v1813, v1814, v1815);
    }
    else
    {
      *(_DWORD *)v189 -= 2;
    }
  }
  v190 = (WTF::StringImpl *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
  v191 = (WTF::StringImpl *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
    {
      WTF::StringImpl::~StringImpl(v191, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1824, v1825, v1826, v1827, v1828, v1829, v1830, v1831);
    }
    else
    {
      *(_DWORD *)v191 -= 2;
    }
  }
  v192 = (WTF::StringImpl *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
    {
      WTF::StringImpl::~StringImpl(v192, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1839);
    }
    else
    {
      *(_DWORD *)v192 -= 2;
    }
  }
  v193 = (WTF::StringImpl *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1840, v1841, v1842, v1843, v1844, v1845, v1846, v1847);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  v194 = (WTF::StringImpl *)*((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
    {
      WTF::StringImpl::~StringImpl(v194, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1848, v1849, v1850, v1851, v1852, v1853, v1854, v1855);
    }
    else
    {
      *(_DWORD *)v194 -= 2;
    }
  }
  v195 = (WTF::StringImpl *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
    {
      WTF::StringImpl::~StringImpl(v195, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1856, v1857, v1858, v1859, v1860, v1861, v1862, v1863);
    }
    else
    {
      *(_DWORD *)v195 -= 2;
    }
  }
  v196 = (WTF::StringImpl *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1864, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  v197 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
    {
      WTF::StringImpl::~StringImpl(v197, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1872, v1873, v1874, v1875, v1876, v1877, v1878, v1879);
    }
    else
    {
      *(_DWORD *)v197 -= 2;
    }
  }
  v198 = (WTF::StringImpl *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
    {
      WTF::StringImpl::~StringImpl(v198, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1880, v1881, v1882, v1883, v1884, v1885, v1886, v1887);
    }
    else
    {
      *(_DWORD *)v198 -= 2;
    }
  }
  v199 = (WTF::StringImpl *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v199)
  {
    if (*(_DWORD *)v199 == 2)
    {
      WTF::StringImpl::~StringImpl(v199, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1888, v1889, v1890, v1891, v1892, v1893, v1894, v1895);
    }
    else
    {
      *(_DWORD *)v199 -= 2;
    }
  }
  v200 = (WTF::StringImpl *)*((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
    {
      WTF::StringImpl::~StringImpl(v200, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903);
    }
    else
    {
      *(_DWORD *)v200 -= 2;
    }
  }
  v201 = (WTF::StringImpl *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1904, v1905, v1906, v1907, v1908, v1909, v1910, v1911);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  v202 = (WTF::StringImpl *)*((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
    {
      WTF::StringImpl::~StringImpl(v202, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1912, v1913, v1914, v1915, v1916, v1917, v1918, v1919);
    }
    else
    {
      *(_DWORD *)v202 -= 2;
    }
  }
  v203 = (WTF::StringImpl *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
    {
      WTF::StringImpl::~StringImpl(v203, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1920, v1921, v1922, v1923, v1924, v1925, v1926, v1927);
    }
    else
    {
      *(_DWORD *)v203 -= 2;
    }
  }
  v204 = (WTF::StringImpl *)*((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1935);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  v205 = (WTF::StringImpl *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
    {
      WTF::StringImpl::~StringImpl(v205, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1936, v1937, v1938, v1939, v1940, v1941, v1942, v1943);
    }
    else
    {
      *(_DWORD *)v205 -= 2;
    }
  }
  v206 = (WTF::StringImpl *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
    {
      WTF::StringImpl::~StringImpl(v206, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1944, v1945, v1946, v1947, v1948, v1949, v1950, v1951);
    }
    else
    {
      *(_DWORD *)v206 -= 2;
    }
  }
  v207 = (WTF::StringImpl *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
    {
      WTF::StringImpl::~StringImpl(v207, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1952, v1953, v1954, v1955, v1956, v1957, v1958, v1959);
    }
    else
    {
      *(_DWORD *)v207 -= 2;
    }
  }
  v208 = (WTF::StringImpl *)*((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
    {
      WTF::StringImpl::~StringImpl(v208, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1960, v1961, v1962, v1963, v1964, v1965, v1966, v1967);
    }
    else
    {
      *(_DWORD *)v208 -= 2;
    }
  }
  v209 = (WTF::StringImpl *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
    {
      WTF::StringImpl::~StringImpl(v209, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1968, v1969, v1970, v1971, v1972, v1973, v1974, v1975);
    }
    else
    {
      *(_DWORD *)v209 -= 2;
    }
  }
  v210 = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
    {
      WTF::StringImpl::~StringImpl(v210, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1976, v1977, v1978, v1979, v1980, v1981, v1982, v1983);
    }
    else
    {
      *(_DWORD *)v210 -= 2;
    }
  }
  v211 = (WTF::StringImpl *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
    {
      WTF::StringImpl::~StringImpl(v211, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1984, v1985, v1986, v1987, v1988, v1989, v1990, v1991);
    }
    else
    {
      *(_DWORD *)v211 -= 2;
    }
  }
  v212 = (WTF::StringImpl *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
    {
      WTF::StringImpl::~StringImpl(v212, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1992, v1993, v1994, v1995, v1996, v1997, v1998, v1999);
    }
    else
    {
      *(_DWORD *)v212 -= 2;
    }
  }
  v213 = (WTF::StringImpl *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
    {
      WTF::StringImpl::~StringImpl(v213, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2000, v2001, v2002, v2003, v2004, v2005, v2006, v2007);
    }
    else
    {
      *(_DWORD *)v213 -= 2;
    }
  }
  v214 = (WTF::StringImpl *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
    {
      WTF::StringImpl::~StringImpl(v214, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2008, v2009, v2010, v2011, v2012, v2013, v2014, v2015);
    }
    else
    {
      *(_DWORD *)v214 -= 2;
    }
  }
  v215 = (WTF::StringImpl *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
    {
      WTF::StringImpl::~StringImpl(v215, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2016, v2017, v2018, v2019, v2020, v2021, v2022, v2023);
    }
    else
    {
      *(_DWORD *)v215 -= 2;
    }
  }
  v216 = (WTF::StringImpl *)*((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
    {
      WTF::StringImpl::~StringImpl(v216, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2024, v2025, v2026, v2027, v2028, v2029, v2030, v2031);
    }
    else
    {
      *(_DWORD *)v216 -= 2;
    }
  }
  v217 = (WTF::StringImpl *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
    {
      WTF::StringImpl::~StringImpl(v217, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2032, v2033, v2034, v2035, v2036, v2037, v2038, v2039);
    }
    else
    {
      *(_DWORD *)v217 -= 2;
    }
  }
  v218 = (WTF::StringImpl *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
    {
      WTF::StringImpl::~StringImpl(v218, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2040, v2041, v2042, v2043, v2044, v2045, v2046, v2047);
    }
    else
    {
      *(_DWORD *)v218 -= 2;
    }
  }
  v219 = (WTF::StringImpl *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
    {
      WTF::StringImpl::~StringImpl(v219, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2048, v2049, v2050, v2051, v2052, v2053, v2054, v2055);
    }
    else
    {
      *(_DWORD *)v219 -= 2;
    }
  }
  v220 = (WTF::StringImpl *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2056, v2057, v2058, v2059, v2060, v2061, v2062, v2063);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  v221 = (WTF::StringImpl *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2064, v2065, v2066, v2067, v2068, v2069, v2070, v2071);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
  }
  v222 = (WTF::StringImpl *)*((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
    {
      WTF::StringImpl::~StringImpl(v222, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2072, v2073, v2074, v2075, v2076, v2077, v2078, v2079);
    }
    else
    {
      *(_DWORD *)v222 -= 2;
    }
  }
  v223 = (WTF::StringImpl *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
    {
      WTF::StringImpl::~StringImpl(v223, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2080, v2081, v2082, v2083, v2084, v2085, v2086, v2087);
    }
    else
    {
      *(_DWORD *)v223 -= 2;
    }
  }
  v224 = (WTF::StringImpl *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
    {
      WTF::StringImpl::~StringImpl(v224, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2088, v2089, v2090, v2091, v2092, v2093, v2094, v2095);
    }
    else
    {
      *(_DWORD *)v224 -= 2;
    }
  }
  v225 = (WTF::StringImpl *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
    {
      WTF::StringImpl::~StringImpl(v225, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2096, v2097, v2098, v2099, v2100, v2101, v2102, v2103);
    }
    else
    {
      *(_DWORD *)v225 -= 2;
    }
  }
  v226 = (WTF::StringImpl *)*((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v226)
  {
    if (*(_DWORD *)v226 == 2)
    {
      WTF::StringImpl::~StringImpl(v226, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2104, v2105, v2106, v2107, v2108, v2109, v2110, v2111);
    }
    else
    {
      *(_DWORD *)v226 -= 2;
    }
  }
  v227 = (WTF::StringImpl *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
    {
      WTF::StringImpl::~StringImpl(v227, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2112, v2113, v2114, v2115, v2116, v2117, v2118, v2119);
    }
    else
    {
      *(_DWORD *)v227 -= 2;
    }
  }
  v228 = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
    {
      WTF::StringImpl::~StringImpl(v228, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2120, v2121, v2122, v2123, v2124, v2125, v2126, v2127);
    }
    else
    {
      *(_DWORD *)v228 -= 2;
    }
  }
  v229 = (WTF::StringImpl *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
    {
      WTF::StringImpl::~StringImpl(v229, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2128, v2129, v2130, v2131, v2132, v2133, v2134, v2135);
    }
    else
    {
      *(_DWORD *)v229 -= 2;
    }
  }
  v230 = (WTF::StringImpl *)*((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl(v230, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2136, v2137, v2138, v2139, v2140, v2141, v2142, v2143);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
  }
  v231 = (WTF::StringImpl *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
    {
      WTF::StringImpl::~StringImpl(v231, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2144, v2145, v2146, v2147, v2148, v2149, v2150, v2151);
    }
    else
    {
      *(_DWORD *)v231 -= 2;
    }
  }
  v232 = (WTF::StringImpl *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
    {
      WTF::StringImpl::~StringImpl(v232, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2152, v2153, v2154, v2155, v2156, v2157, v2158, v2159);
    }
    else
    {
      *(_DWORD *)v232 -= 2;
    }
  }
  v233 = (WTF::StringImpl *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
    {
      WTF::StringImpl::~StringImpl(v233, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2160, v2161, v2162, v2163, v2164, v2165, v2166, v2167);
    }
    else
    {
      *(_DWORD *)v233 -= 2;
    }
  }
  v234 = (WTF::StringImpl *)*((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
    {
      WTF::StringImpl::~StringImpl(v234, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2168, v2169, v2170, v2171, v2172, v2173, v2174, v2175);
    }
    else
    {
      *(_DWORD *)v234 -= 2;
    }
  }
  v235 = (WTF::StringImpl *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
    {
      WTF::StringImpl::~StringImpl(v235, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2176, v2177, v2178, v2179, v2180, v2181, v2182, v2183);
    }
    else
    {
      *(_DWORD *)v235 -= 2;
    }
  }
  v236 = (WTF::StringImpl *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
    {
      WTF::StringImpl::~StringImpl(v236, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2184, v2185, v2186, v2187, v2188, v2189, v2190, v2191);
    }
    else
    {
      *(_DWORD *)v236 -= 2;
    }
  }
  v237 = (WTF::StringImpl *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
    {
      WTF::StringImpl::~StringImpl(v237, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2192, v2193, v2194, v2195, v2196, v2197, v2198, v2199);
    }
    else
    {
      *(_DWORD *)v237 -= 2;
    }
  }
  v238 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v238)
  {
    if (*(_DWORD *)v238 == 2)
    {
      WTF::StringImpl::~StringImpl(v238, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2200, v2201, v2202, v2203, v2204, v2205, v2206, v2207);
    }
    else
    {
      *(_DWORD *)v238 -= 2;
    }
  }
  v239 = (WTF::StringImpl *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v239)
  {
    if (*(_DWORD *)v239 == 2)
    {
      WTF::StringImpl::~StringImpl(v239, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2208, v2209, v2210, v2211, v2212, v2213, v2214, v2215);
    }
    else
    {
      *(_DWORD *)v239 -= 2;
    }
  }
  v240 = (WTF::StringImpl *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
    {
      WTF::StringImpl::~StringImpl(v240, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2216, v2217, v2218, v2219, v2220, v2221, v2222, v2223);
    }
    else
    {
      *(_DWORD *)v240 -= 2;
    }
  }
  v241 = (WTF::StringImpl *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
    {
      WTF::StringImpl::~StringImpl(v241, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2224, v2225, v2226, v2227, v2228, v2229, v2230, v2231);
    }
    else
    {
      *(_DWORD *)v241 -= 2;
    }
  }
  v242 = (WTF::StringImpl *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
    {
      WTF::StringImpl::~StringImpl(v242, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2232, v2233, v2234, v2235, v2236, v2237, v2238, v2239);
    }
    else
    {
      *(_DWORD *)v242 -= 2;
    }
  }
  v243 = (WTF::StringImpl *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
    {
      WTF::StringImpl::~StringImpl(v243, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2240, v2241, v2242, v2243, v2244, v2245, v2246, v2247);
    }
    else
    {
      *(_DWORD *)v243 -= 2;
    }
  }
  v244 = (WTF::StringImpl *)*((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
    {
      WTF::StringImpl::~StringImpl(v244, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2248, v2249, v2250, v2251, v2252, v2253, v2254, v2255);
    }
    else
    {
      *(_DWORD *)v244 -= 2;
    }
  }
  v245 = (WTF::StringImpl *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
    {
      WTF::StringImpl::~StringImpl(v245, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2256, v2257, v2258, v2259, v2260, v2261, v2262, v2263);
    }
    else
    {
      *(_DWORD *)v245 -= 2;
    }
  }
  v246 = (WTF::StringImpl *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
    {
      WTF::StringImpl::~StringImpl(v246, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2264, v2265, v2266, v2267, v2268, v2269, v2270, v2271);
    }
    else
    {
      *(_DWORD *)v246 -= 2;
    }
  }
  v247 = (WTF::StringImpl *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
    {
      WTF::StringImpl::~StringImpl(v247, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2272, v2273, v2274, v2275, v2276, v2277, v2278, v2279);
    }
    else
    {
      *(_DWORD *)v247 -= 2;
    }
  }
  v248 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
    {
      WTF::StringImpl::~StringImpl(v248, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2280, v2281, v2282, v2283, v2284, v2285, v2286, v2287);
    }
    else
    {
      *(_DWORD *)v248 -= 2;
    }
  }
  v249 = (WTF::StringImpl *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
    {
      WTF::StringImpl::~StringImpl(v249, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2288, v2289, v2290, v2291, v2292, v2293, v2294, v2295);
    }
    else
    {
      *(_DWORD *)v249 -= 2;
    }
  }
  v250 = (WTF::StringImpl *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
    {
      WTF::StringImpl::~StringImpl(v250, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2296, v2297, v2298, v2299, v2300, v2301, v2302, v2303);
    }
    else
    {
      *(_DWORD *)v250 -= 2;
    }
  }
  v251 = (WTF::StringImpl *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
    {
      WTF::StringImpl::~StringImpl(v251, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2304, v2305, v2306, v2307, v2308, v2309, v2310, v2311);
    }
    else
    {
      *(_DWORD *)v251 -= 2;
    }
  }
  v252 = (WTF::StringImpl *)*((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
    {
      WTF::StringImpl::~StringImpl(v252, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2312, v2313, v2314, v2315, v2316, v2317, v2318, v2319);
    }
    else
    {
      *(_DWORD *)v252 -= 2;
    }
  }
  v253 = (WTF::StringImpl *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
    {
      WTF::StringImpl::~StringImpl(v253, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2320, v2321, v2322, v2323, v2324, v2325, v2326, v2327);
    }
    else
    {
      *(_DWORD *)v253 -= 2;
    }
  }
  v254 = (WTF::StringImpl *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
    {
      WTF::StringImpl::~StringImpl(v254, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2328, v2329, v2330, v2331, v2332, v2333, v2334, v2335);
    }
    else
    {
      *(_DWORD *)v254 -= 2;
    }
  }
  v255 = (WTF::StringImpl *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
    {
      WTF::StringImpl::~StringImpl(v255, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2336, v2337, v2338, v2339, v2340, v2341, v2342, v2343);
    }
    else
    {
      *(_DWORD *)v255 -= 2;
    }
  }
  v256 = (WTF::StringImpl *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
    {
      WTF::StringImpl::~StringImpl(v256, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2344, v2345, v2346, v2347, v2348, v2349, v2350, v2351);
    }
    else
    {
      *(_DWORD *)v256 -= 2;
    }
  }
  v257 = (WTF::StringImpl *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
    {
      WTF::StringImpl::~StringImpl(v257, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2352, v2353, v2354, v2355, v2356, v2357, v2358, v2359);
    }
    else
    {
      *(_DWORD *)v257 -= 2;
    }
  }
  v258 = (WTF::StringImpl *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
    {
      WTF::StringImpl::~StringImpl(v258, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2360, v2361, v2362, v2363, v2364, v2365, v2366, v2367);
    }
    else
    {
      *(_DWORD *)v258 -= 2;
    }
  }
  v259 = (WTF::StringImpl *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v259)
  {
    if (*(_DWORD *)v259 == 2)
    {
      WTF::StringImpl::~StringImpl(v259, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2368, v2369, v2370, v2371, v2372, v2373, v2374, v2375);
    }
    else
    {
      *(_DWORD *)v259 -= 2;
    }
  }
  v260 = (WTF::StringImpl *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
    {
      WTF::StringImpl::~StringImpl(v260, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2376, v2377, v2378, v2379, v2380, v2381, v2382, v2383);
    }
    else
    {
      *(_DWORD *)v260 -= 2;
    }
  }
  v261 = (WTF::StringImpl *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
    {
      WTF::StringImpl::~StringImpl(v261, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2384, v2385, v2386, v2387, v2388, v2389, v2390, v2391);
    }
    else
    {
      *(_DWORD *)v261 -= 2;
    }
  }
  v262 = (WTF::StringImpl *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
    {
      WTF::StringImpl::~StringImpl(v262, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2392, v2393, v2394, v2395, v2396, v2397, v2398, v2399);
    }
    else
    {
      *(_DWORD *)v262 -= 2;
    }
  }
  v263 = (WTF::StringImpl *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
    {
      WTF::StringImpl::~StringImpl(v263, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2400, v2401, v2402, v2403, v2404, v2405, v2406, v2407);
    }
    else
    {
      *(_DWORD *)v263 -= 2;
    }
  }
  v264 = (WTF::StringImpl *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
    {
      WTF::StringImpl::~StringImpl(v264, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2408, v2409, v2410, v2411, v2412, v2413, v2414, v2415);
    }
    else
    {
      *(_DWORD *)v264 -= 2;
    }
  }
  v265 = (WTF::StringImpl *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
    {
      WTF::StringImpl::~StringImpl(v265, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2416, v2417, v2418, v2419, v2420, v2421, v2422, v2423);
    }
    else
    {
      *(_DWORD *)v265 -= 2;
    }
  }
  v266 = (WTF::StringImpl *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
    {
      WTF::StringImpl::~StringImpl(v266, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2424, v2425, v2426, v2427, v2428, v2429, v2430, v2431);
    }
    else
    {
      *(_DWORD *)v266 -= 2;
    }
  }
  v267 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
    {
      WTF::StringImpl::~StringImpl(v267, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2432, v2433, v2434, v2435, v2436, v2437, v2438, v2439);
    }
    else
    {
      *(_DWORD *)v267 -= 2;
    }
  }
  v268 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 2)
    {
      WTF::StringImpl::~StringImpl(v268, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2440, v2441, v2442, v2443, v2444, v2445, v2446, v2447);
    }
    else
    {
      *(_DWORD *)v268 -= 2;
    }
  }
  v269 = (WTF::StringImpl *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
    {
      WTF::StringImpl::~StringImpl(v269, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2448, v2449, v2450, v2451, v2452, v2453, v2454, v2455);
    }
    else
    {
      *(_DWORD *)v269 -= 2;
    }
  }
  v270 = (WTF::StringImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
    {
      WTF::StringImpl::~StringImpl(v270, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2456, v2457, v2458, v2459, v2460, v2461, v2462, v2463);
    }
    else
    {
      *(_DWORD *)v270 -= 2;
    }
  }
  v271 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
    {
      WTF::StringImpl::~StringImpl(v271, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2464, v2465, v2466, v2467, v2468, v2469, v2470, v2471);
    }
    else
    {
      *(_DWORD *)v271 -= 2;
    }
  }
  v272 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2472, v2473, v2474, v2475, v2476, v2477, v2478, v2479);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v273 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
    {
      WTF::StringImpl::~StringImpl(v273, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2480, v2481, v2482, v2483, v2484, v2485, v2486, v2487);
    }
    else
    {
      *(_DWORD *)v273 -= 2;
    }
  }
  v274 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
    {
      WTF::StringImpl::~StringImpl(v274, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2488, v2489, v2490, v2491, v2492, v2493, v2494, v2495);
    }
    else
    {
      *(_DWORD *)v274 -= 2;
    }
  }
  v275 = (WTF::StringImpl *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
    {
      WTF::StringImpl::~StringImpl(v275, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2496, v2497, v2498, v2499, v2500, v2501, v2502, v2503);
    }
    else
    {
      *(_DWORD *)v275 -= 2;
    }
  }
  v276 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
    {
      WTF::StringImpl::~StringImpl(v276, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2504, v2505, v2506, v2507, v2508, v2509, v2510, v2511);
    }
    else
    {
      *(_DWORD *)v276 -= 2;
    }
  }
  v277 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v277)
  {
    if (*(_DWORD *)v277 == 2)
    {
      WTF::StringImpl::~StringImpl(v277, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2512, v2513, v2514, v2515, v2516, v2517, v2518, v2519);
    }
    else
    {
      *(_DWORD *)v277 -= 2;
    }
  }
  v278 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
    {
      WTF::StringImpl::~StringImpl(v278, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2520, v2521, v2522, v2523, v2524, v2525, v2526, v2527);
    }
    else
    {
      *(_DWORD *)v278 -= 2;
    }
  }
  v279 = (WTF::StringImpl *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
    {
      WTF::StringImpl::~StringImpl(v279, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2528, v2529, v2530, v2531, v2532, v2533, v2534, v2535);
    }
    else
    {
      *(_DWORD *)v279 -= 2;
    }
  }
  v280 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
    {
      WTF::StringImpl::~StringImpl(v280, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2536, v2537, v2538, v2539, v2540, v2541, v2542, v2543);
    }
    else
    {
      *(_DWORD *)v280 -= 2;
    }
  }
  v281 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
    {
      WTF::StringImpl::~StringImpl(v281, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2544, v2545, v2546, v2547, v2548, v2549, v2550, v2551);
    }
    else
    {
      *(_DWORD *)v281 -= 2;
    }
  }
  v282 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
    {
      WTF::StringImpl::~StringImpl(v282, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2552, v2553, v2554, v2555, v2556, v2557, v2558, v2559);
    }
    else
    {
      *(_DWORD *)v282 -= 2;
    }
  }
  v283 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
    {
      WTF::StringImpl::~StringImpl(v283, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2560, v2561, v2562, v2563, v2564, v2565, v2566, v2567);
    }
    else
    {
      *(_DWORD *)v283 -= 2;
    }
  }
  v284 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v284)
  {
    if (*(_DWORD *)v284 == 2)
    {
      WTF::StringImpl::~StringImpl(v284, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2568, v2569, v2570, v2571, v2572, v2573, v2574, v2575);
    }
    else
    {
      *(_DWORD *)v284 -= 2;
    }
  }
  v285 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
    {
      WTF::StringImpl::~StringImpl(v285, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2576, v2577, v2578, v2579, v2580, v2581, v2582, v2583);
    }
    else
    {
      *(_DWORD *)v285 -= 2;
    }
  }
  v286 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v286)
  {
    if (*(_DWORD *)v286 == 2)
    {
      WTF::StringImpl::~StringImpl(v286, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2584, v2585, v2586, v2587, v2588, v2589, v2590, v2591);
    }
    else
    {
      *(_DWORD *)v286 -= 2;
    }
  }
  v287 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
    {
      WTF::StringImpl::~StringImpl(v287, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2592, v2593, v2594, v2595, v2596, v2597, v2598, v2599);
    }
    else
    {
      *(_DWORD *)v287 -= 2;
    }
  }
  v288 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
    {
      WTF::StringImpl::~StringImpl(v288, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2600, v2601, v2602, v2603, v2604, v2605, v2606, v2607);
    }
    else
    {
      *(_DWORD *)v288 -= 2;
    }
  }
  v289 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
    {
      WTF::StringImpl::~StringImpl(v289, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2608, v2609, v2610, v2611, v2612, v2613, v2614, v2615);
    }
    else
    {
      *(_DWORD *)v289 -= 2;
    }
  }
  v290 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v290)
  {
    if (*(_DWORD *)v290 == 2)
    {
      WTF::StringImpl::~StringImpl(v290, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2616, v2617, v2618, v2619, v2620, v2621, v2622, v2623);
    }
    else
    {
      *(_DWORD *)v290 -= 2;
    }
  }
  v291 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
    {
      WTF::StringImpl::~StringImpl(v291, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2624, v2625, v2626, v2627, v2628, v2629, v2630, v2631);
    }
    else
    {
      *(_DWORD *)v291 -= 2;
    }
  }
  v292 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
    {
      WTF::StringImpl::~StringImpl(v292, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2632, v2633, v2634, v2635, v2636, v2637, v2638, v2639);
    }
    else
    {
      *(_DWORD *)v292 -= 2;
    }
  }
  v293 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
    {
      WTF::StringImpl::~StringImpl(v293, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2640, v2641, v2642, v2643, v2644, v2645, v2646, v2647);
    }
    else
    {
      *(_DWORD *)v293 -= 2;
    }
  }
  v294 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
    {
      WTF::StringImpl::~StringImpl(v294, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2648, v2649, v2650, v2651, v2652, v2653, v2654, v2655);
    }
    else
    {
      *(_DWORD *)v294 -= 2;
    }
  }
  v295 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v295)
  {
    if (*(_DWORD *)v295 == 2)
    {
      WTF::StringImpl::~StringImpl(v295, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2656, v2657, v2658, v2659, v2660, v2661, v2662, v2663);
    }
    else
    {
      *(_DWORD *)v295 -= 2;
    }
  }
  v296 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
    {
      WTF::StringImpl::~StringImpl(v296, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2664, v2665, v2666, v2667, v2668, v2669, v2670, v2671);
    }
    else
    {
      *(_DWORD *)v296 -= 2;
    }
  }
  v297 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v297)
  {
    if (*(_DWORD *)v297 == 2)
    {
      WTF::StringImpl::~StringImpl(v297, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2672, v2673, v2674, v2675, v2676, v2677, v2678, v2679);
    }
    else
    {
      *(_DWORD *)v297 -= 2;
    }
  }
  v298 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
    {
      WTF::StringImpl::~StringImpl(v298, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2680, v2681, v2682, v2683, v2684, v2685, v2686, v2687);
    }
    else
    {
      *(_DWORD *)v298 -= 2;
    }
  }
  v299 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
    {
      WTF::StringImpl::~StringImpl(v299, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2688, v2689, v2690, v2691, v2692, v2693, v2694, v2695);
    }
    else
    {
      *(_DWORD *)v299 -= 2;
    }
  }
  v300 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
    {
      WTF::StringImpl::~StringImpl(v300, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2696, v2697, v2698, v2699, v2700, v2701, v2702, v2703);
    }
    else
    {
      *(_DWORD *)v300 -= 2;
    }
  }
  v301 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2704, v2705, v2706, v2707, v2708, v2709, v2710, v2711);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
  v302 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v302)
  {
    if (*(_DWORD *)v302 == 2)
    {
      WTF::StringImpl::~StringImpl(v302, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2712, v2713, v2714, v2715, v2716, v2717, v2718, v2719);
    }
    else
    {
      *(_DWORD *)v302 -= 2;
    }
  }
  v303 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
    {
      WTF::StringImpl::~StringImpl(v303, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2720, v2721, v2722, v2723, v2724, v2725, v2726, v2727);
    }
    else
    {
      *(_DWORD *)v303 -= 2;
    }
  }
  v304 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
    {
      WTF::StringImpl::~StringImpl(v304, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2728, v2729, v2730, v2731, v2732, v2733, v2734, v2735);
    }
    else
    {
      *(_DWORD *)v304 -= 2;
    }
  }
  v305 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
    {
      WTF::StringImpl::~StringImpl(v305, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2736, v2737, v2738, v2739, v2740, v2741, v2742, v2743);
    }
    else
    {
      *(_DWORD *)v305 -= 2;
    }
  }
  v306 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
    {
      WTF::StringImpl::~StringImpl(v306, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2744, v2745, v2746, v2747, v2748, v2749, v2750, v2751);
    }
    else
    {
      *(_DWORD *)v306 -= 2;
    }
  }
  v307 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
    {
      WTF::StringImpl::~StringImpl(v307, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2752, v2753, v2754, v2755, v2756, v2757, v2758, v2759);
    }
    else
    {
      *(_DWORD *)v307 -= 2;
    }
  }
  v308 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
    {
      WTF::StringImpl::~StringImpl(v308, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2760, v2761, v2762, v2763, v2764, v2765, v2766, v2767);
    }
    else
    {
      *(_DWORD *)v308 -= 2;
    }
  }
  v309 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
    {
      WTF::StringImpl::~StringImpl(v309, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2768, v2769, v2770, v2771, v2772, v2773, v2774, v2775);
    }
    else
    {
      *(_DWORD *)v309 -= 2;
    }
  }
  v310 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
    {
      WTF::StringImpl::~StringImpl(v310, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2776, v2777, v2778, v2779, v2780, v2781, v2782, v2783);
    }
    else
    {
      *(_DWORD *)v310 -= 2;
    }
  }
  v311 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
    {
      WTF::StringImpl::~StringImpl(v311, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2784, v2785, v2786, v2787, v2788, v2789, v2790, v2791);
    }
    else
    {
      *(_DWORD *)v311 -= 2;
    }
  }
  v312 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
    {
      WTF::StringImpl::~StringImpl(v312, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2792, v2793, v2794, v2795, v2796, v2797, v2798, v2799);
    }
    else
    {
      *(_DWORD *)v312 -= 2;
    }
  }
  v313 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v313)
  {
    if (*(_DWORD *)v313 == 2)
    {
      WTF::StringImpl::~StringImpl(v313, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2800, v2801, v2802, v2803, v2804, v2805, v2806, v2807);
    }
    else
    {
      *(_DWORD *)v313 -= 2;
    }
  }
  v314 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
    {
      WTF::StringImpl::~StringImpl(v314, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2808, v2809, v2810, v2811, v2812, v2813, v2814, v2815);
    }
    else
    {
      *(_DWORD *)v314 -= 2;
    }
  }
  v315 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
    {
      WTF::StringImpl::~StringImpl(v315, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2816, v2817, v2818, v2819, v2820, v2821, v2822, v2823);
    }
    else
    {
      *(_DWORD *)v315 -= 2;
    }
  }
  v316 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
    {
      WTF::StringImpl::~StringImpl(v316, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2824, v2825, v2826, v2827, v2828, v2829, v2830, v2831);
    }
    else
    {
      *(_DWORD *)v316 -= 2;
    }
  }
  v317 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
    {
      WTF::StringImpl::~StringImpl(v317, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2832, v2833, v2834, v2835, v2836, v2837, v2838, v2839);
    }
    else
    {
      *(_DWORD *)v317 -= 2;
    }
  }
  v318 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
    {
      WTF::StringImpl::~StringImpl(v318, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2840, v2841, v2842, v2843, v2844, v2845, v2846, v2847);
    }
    else
    {
      *(_DWORD *)v318 -= 2;
    }
  }
  v319 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v319)
  {
    if (*(_DWORD *)v319 == 2)
    {
      WTF::StringImpl::~StringImpl(v319, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2848, v2849, v2850, v2851, v2852, v2853, v2854, v2855);
    }
    else
    {
      *(_DWORD *)v319 -= 2;
    }
  }
  v320 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
    {
      WTF::StringImpl::~StringImpl(v320, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2856, v2857, v2858, v2859, v2860, v2861, v2862, v2863);
    }
    else
    {
      *(_DWORD *)v320 -= 2;
    }
  }
  v321 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
    {
      WTF::StringImpl::~StringImpl(v321, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2864, v2865, v2866, v2867, v2868, v2869, v2870, v2871);
    }
    else
    {
      *(_DWORD *)v321 -= 2;
    }
  }
  v322 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v322)
  {
    if (*(_DWORD *)v322 == 2)
    {
      WTF::StringImpl::~StringImpl(v322, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2872, v2873, v2874, v2875, v2876, v2877, v2878, v2879);
    }
    else
    {
      *(_DWORD *)v322 -= 2;
    }
  }
  v323 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2)
    {
      WTF::StringImpl::~StringImpl(v323, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2880, v2881, v2882, v2883, v2884, v2885, v2886, v2887);
    }
    else
    {
      *(_DWORD *)v323 -= 2;
    }
  }
  v324 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v324)
  {
    if (*(_DWORD *)v324 == 2)
    {
      WTF::StringImpl::~StringImpl(v324, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2888, v2889, v2890, v2891, v2892, v2893, v2894, v2895);
    }
    else
    {
      *(_DWORD *)v324 -= 2;
    }
  }
  v325 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v325)
  {
    if (*(_DWORD *)v325 == 2)
    {
      WTF::StringImpl::~StringImpl(v325, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2896, v2897, v2898, v2899, v2900, v2901, v2902, v2903);
    }
    else
    {
      *(_DWORD *)v325 -= 2;
    }
  }
  v326 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 2)
    {
      WTF::StringImpl::~StringImpl(v326, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2904, v2905, v2906, v2907, v2908, v2909, v2910, v2911);
    }
    else
    {
      *(_DWORD *)v326 -= 2;
    }
  }
  v327 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v327)
  {
    if (*(_DWORD *)v327 == 2)
    {
      WTF::StringImpl::~StringImpl(v327, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2912, v2913, v2914, v2915, v2916, v2917, v2918, v2919);
    }
    else
    {
      *(_DWORD *)v327 -= 2;
    }
  }
  v328 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v328)
  {
    if (*(_DWORD *)v328 == 2)
    {
      WTF::StringImpl::~StringImpl(v328, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2920, v2921, v2922, v2923, v2924, v2925, v2926, v2927);
    }
    else
    {
      *(_DWORD *)v328 -= 2;
    }
  }
  v329 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v329)
  {
    if (*(_DWORD *)v329 == 2)
    {
      WTF::StringImpl::~StringImpl(v329, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2928, v2929, v2930, v2931, v2932, v2933, v2934, v2935);
    }
    else
    {
      *(_DWORD *)v329 -= 2;
    }
  }
  v330 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
    {
      WTF::StringImpl::~StringImpl(v330, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2936, v2937, v2938, v2939, v2940, v2941, v2942, v2943);
    }
    else
    {
      *(_DWORD *)v330 -= 2;
    }
  }
  v331 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      WTF::StringImpl::~StringImpl(v331, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2944, v2945, v2946, v2947, v2948, v2949, v2950, v2951);
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  v332 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
    {
      WTF::StringImpl::~StringImpl(v332, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2952, v2953, v2954, v2955, v2956, v2957, v2958, v2959);
    }
    else
    {
      *(_DWORD *)v332 -= 2;
    }
  }
  v333 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 2)
    {
      WTF::StringImpl::~StringImpl(v333, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2960, v2961, v2962, v2963, v2964, v2965, v2966, v2967);
    }
    else
    {
      *(_DWORD *)v333 -= 2;
    }
  }
  v334 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
    {
      WTF::StringImpl::~StringImpl(v334, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2968, v2969, v2970, v2971, v2972, v2973, v2974, v2975);
    }
    else
    {
      *(_DWORD *)v334 -= 2;
    }
  }
  v335 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v335)
  {
    if (*(_DWORD *)v335 == 2)
    {
      WTF::StringImpl::~StringImpl(v335, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2976, v2977, v2978, v2979, v2980, v2981, v2982, v2983);
    }
    else
    {
      *(_DWORD *)v335 -= 2;
    }
  }
  v336 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v336)
  {
    if (*(_DWORD *)v336 == 2)
    {
      WTF::StringImpl::~StringImpl(v336, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2984, v2985, v2986, v2987, v2988, v2989, v2990, v2991);
    }
    else
    {
      *(_DWORD *)v336 -= 2;
    }
  }
  v337 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v337)
  {
    if (*(_DWORD *)v337 == 2)
    {
      WTF::StringImpl::~StringImpl(v337, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2992, v2993, v2994, v2995, v2996, v2997, v2998, v2999);
    }
    else
    {
      *(_DWORD *)v337 -= 2;
    }
  }
  v338 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v338)
  {
    if (*(_DWORD *)v338 == 2)
    {
      WTF::StringImpl::~StringImpl(v338, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3000, v3001, v3002, v3003, v3004, v3005, v3006, v3007);
    }
    else
    {
      *(_DWORD *)v338 -= 2;
    }
  }
  v339 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
    {
      WTF::StringImpl::~StringImpl(v339, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3008, v3009, v3010, v3011, v3012, v3013, v3014, v3015);
    }
    else
    {
      *(_DWORD *)v339 -= 2;
    }
  }
  v340 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v340)
  {
    if (*(_DWORD *)v340 == 2)
    {
      WTF::StringImpl::~StringImpl(v340, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3016, v3017, v3018, v3019, v3020, v3021, v3022, v3023);
    }
    else
    {
      *(_DWORD *)v340 -= 2;
    }
  }
  v341 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2)
    {
      WTF::StringImpl::~StringImpl(v341, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3024, v3025, v3026, v3027, v3028, v3029, v3030, v3031);
    }
    else
    {
      *(_DWORD *)v341 -= 2;
    }
  }
  v342 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v342)
  {
    if (*(_DWORD *)v342 == 2)
    {
      WTF::StringImpl::~StringImpl(v342, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3032, v3033, v3034, v3035, v3036, v3037, v3038, v3039);
    }
    else
    {
      *(_DWORD *)v342 -= 2;
    }
  }
  v343 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v343)
  {
    if (*(_DWORD *)v343 == 2)
    {
      WTF::StringImpl::~StringImpl(v343, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3040, v3041, v3042, v3043, v3044, v3045, v3046, v3047);
    }
    else
    {
      *(_DWORD *)v343 -= 2;
    }
  }
  v344 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v344)
  {
    if (*(_DWORD *)v344 == 2)
    {
      WTF::StringImpl::~StringImpl(v344, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3048, v3049, v3050, v3051, v3052, v3053, v3054, v3055);
    }
    else
    {
      *(_DWORD *)v344 -= 2;
    }
  }
  v345 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v345)
  {
    if (*(_DWORD *)v345 == 2)
    {
      WTF::StringImpl::~StringImpl(v345, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3056, v3057, v3058, v3059, v3060, v3061, v3062, v3063);
    }
    else
    {
      *(_DWORD *)v345 -= 2;
    }
  }
  v346 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v346)
  {
    if (*(_DWORD *)v346 == 2)
    {
      WTF::StringImpl::~StringImpl(v346, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3064, v3065, v3066, v3067, v3068, v3069, v3070, v3071);
    }
    else
    {
      *(_DWORD *)v346 -= 2;
    }
  }
  v347 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v347)
  {
    if (*(_DWORD *)v347 == 2)
    {
      WTF::StringImpl::~StringImpl(v347, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3072, v3073, v3074, v3075, v3076, v3077, v3078, v3079);
    }
    else
    {
      *(_DWORD *)v347 -= 2;
    }
  }
  v348 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
    {
      WTF::StringImpl::~StringImpl(v348, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3080, v3081, v3082, v3083, v3084, v3085, v3086, v3087);
    }
    else
    {
      *(_DWORD *)v348 -= 2;
    }
  }
  v349 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v349)
  {
    if (*(_DWORD *)v349 == 2)
    {
      WTF::StringImpl::~StringImpl(v349, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3088, v3089, v3090, v3091, v3092, v3093, v3094, v3095);
    }
    else
    {
      *(_DWORD *)v349 -= 2;
    }
  }
  v350 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
    {
      WTF::StringImpl::~StringImpl(v350, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3096, v3097, v3098, v3099, v3100, v3101, v3102, v3103);
    }
    else
    {
      *(_DWORD *)v350 -= 2;
    }
  }
  v351 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v351)
  {
    if (*(_DWORD *)v351 == 2)
    {
      WTF::StringImpl::~StringImpl(v351, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3104, v3105, v3106, v3107, v3108, v3109, v3110, v3111);
    }
    else
    {
      *(_DWORD *)v351 -= 2;
    }
  }
  v352 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
    {
      WTF::StringImpl::~StringImpl(v352, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3112, v3113, v3114, v3115, v3116, v3117, v3118, v3119);
    }
    else
    {
      *(_DWORD *)v352 -= 2;
    }
  }
  v353 = (JSC::BuiltinNames *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v353)
  {
    JSC::BuiltinNames::~BuiltinNames(v353, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v354, v355, v356, v357, v358, v359, v360, v361);
  }
  v362 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v362)
  {
    if (*(_DWORD *)v362 == 2)
    {
      WTF::StringImpl::~StringImpl(v362, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3120, v3121, v3122, v3123, v3124, v3125, v3126, v3127);
    }
    else
    {
      *(_DWORD *)v362 -= 2;
    }
  }
  v363 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v363)
  {
    if (*(_DWORD *)v363 == 2)
    {
      WTF::StringImpl::~StringImpl(v363, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3128, v3129, v3130, v3131, v3132, v3133, v3134, v3135);
    }
    else
    {
      *(_DWORD *)v363 -= 2;
    }
  }
  v364 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
    {
      WTF::StringImpl::~StringImpl(v364, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3136, v3137, v3138, v3139, v3140, v3141, v3142, v3143);
    }
    else
    {
      *(_DWORD *)v364 -= 2;
    }
  }
  v365 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v365)
  {
    if (*(_DWORD *)v365 == 2)
    {
      WTF::StringImpl::~StringImpl(v365, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3144, v3145, v3146, v3147, v3148, v3149, v3150, v3151);
    }
    else
    {
      *(_DWORD *)v365 -= 2;
    }
  }
  v366 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
    {
      WTF::StringImpl::~StringImpl(v366, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3152, v3153, v3154, v3155, v3156, v3157, v3158, v3159);
    }
    else
    {
      *(_DWORD *)v366 -= 2;
    }
  }
  v367 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v367)
  {
    if (*(_DWORD *)v367 == 2)
    {
      WTF::StringImpl::~StringImpl(v367, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3160, v3161, v3162, v3163, v3164, v3165, v3166, v3167);
    }
    else
    {
      *(_DWORD *)v367 -= 2;
    }
  }
}

void JSC::CommonIdentifiers::appendExternalName(JSC::CommonIdentifiers *this, const JSC::Identifier *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int v25;
  WTF **v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  i = *((_QWORD *)this + 6);
  v9 = (_QWORD *)(i + 4344);
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v11 = *(unsigned int *)(i + 4356);
  v12 = *(_DWORD *)(i + 4352);
  if (20 * v11 >= 19 * (unint64_t)v12 || *(_BYTE *)(i + 4364) && v12 <= 2 * (int)v11)
  {
    if (v12)
      v45 = 2 * v12;
    else
      v45 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(i + 4344, v45, (uint64_t)a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(i + 4352);
  }
  v13 = v12 - 1;
  v14 = *(_DWORD *)(i + 4360);
  v15 = *((_DWORD *)v10 + 4);
  if (v15 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase(v10);
  else
    v16 = v15 >> 8;
  v17 = (v16 ^ v14) & v13;
  v18 = (WTF **)(*v9 + 8 * v17);
  v19 = *v18;
  if (*v18)
  {
    v46 = i;
    v20 = 0;
    while (1)
    {
      v21 = *((_DWORD *)v19 + 4);
      v22 = v21 < 0x100 ? WTF::StringImpl::hashSlowCase(v19) : v21 >> 8;
      v23 = (v17 + v12 - ((v22 ^ v14) & v13)) & v13;
      if (v20 > v23)
        break;
      if (v22 == v16 && WTF::equal(*v18, v10, (const WTF::StringImpl *)a3))
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, v31, (uint64_t)a3, v32, v33, v34, v35, v36);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
        return;
      }
      v17 = (v17 + 1) & v13;
      ++v20;
      v18 = (WTF **)(*v9 + 8 * v17);
      v19 = *v18;
      if (!*v18)
      {
        if (v20 > 0x7F)
        {
          i = v46;
          *(_BYTE *)(v46 + 4364) = 1;
        }
        else
        {
          i = v46;
        }
        goto LABEL_29;
      }
    }
    if (v20 >= 0x80)
      *(_BYTE *)(v46 + 4364) = 1;
    v24 = *v18;
    *v18 = v10;
    v25 = (v17 + 1) & v13;
    v26 = (WTF **)(*v9 + 8 * v25);
    v27 = *v26;
    for (i = v46; *v26; v27 = *v26)
    {
      v28 = *((_DWORD *)v27 + 4);
      if (v28 < 0x100)
        v29 = WTF::StringImpl::hashSlowCase(v27);
      else
        v29 = v28 >> 8;
      if (++v23 > ((v25 + v12 - ((v29 ^ v14) & v13)) & v13))
      {
        v30 = *v26;
        *v26 = v24;
        v24 = v30;
        v23 = (v25 + v12 - ((v29 ^ v14) & v13)) & v13;
      }
      v25 = (v25 + 1) & v13;
      v26 = (WTF **)(*v9 + 8 * v25);
    }
    *v26 = v24;
  }
  else
  {
LABEL_29:
    *v18 = v10;
  }
  ++*(_DWORD *)(i + 4356);
}

__int128 *slow_path_create_this(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  BOOL v37;
  JSC::VM *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  BOOL v52;
  int v53;
  JSC::VM *v54;
  uint64_t v55;
  JSC::JSGlobalObject *v56;
  JSC::JSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  char **v65;
  JSC *v66;
  unint64_t v67;
  unint64_t v68;
  JSC::VM *v69;
  JSC::VM *v70;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v69 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988E8F8CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v53 = *((__int16 *)a2 + 1);
    if (v53 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v53 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
    v22 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
    v22 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
    v22 = a2[4];
  }
  v23 = *(_QWORD *)(a1 + 8 * v20);
  if (v23)
    v24 = *(_BYTE *)(v23 + 5) == 26;
  else
    v24 = 0;
  if (!v24)
    goto LABEL_75;
  v25 = *(_QWORD *)(v23 + 24);
  if ((v25 & 1) != 0)
  {
    v49 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v49 + 5) == 8)
      goto LABEL_75;
    v26 = *(_QWORD *)(v49 + 88);
  }
  else
  {
    if (*(_BYTE *)(v25 + 5) == 8)
      goto LABEL_75;
    v26 = *(_QWORD *)(v25 + 88);
  }
  if ((*(_DWORD *)(v26 + 16) & 0x80000000) != 0)
  {
    v68 = v9;
    v54 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) + 56);
    LODWORD(v70) = 0;
    JSC::JSObject::getDirect((_DWORD *)v23, v54, *(_QWORD *)(*((_QWORD *)v54 + 5244) + 2160), (const JSC::PropertyTable *)&v70, a5, a6, a7, a8);
    if (!v55 || (v70 & 0x70) != 0)
      goto LABEL_75;
    v25 = *(_QWORD *)(v23 + 24);
    v9 = v68;
  }
  if ((v25 & 1) != 0)
    v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v27 = v25;
  v28 = *(_QWORD *)(v27 + 88);
  if (((1 << *(_BYTE *)(v28 + 50)) & 0x78007) != 0 || (v29 = *(_QWORD **)(v28 + 88)) != 0 && *v29)
  {
    v30 = v25 & 1;
    v31 = *(_QWORD *)(v9 + 136);
    v32 = *(unsigned __int16 *)(v31 + 56);
    if (!*(_WORD *)(v31 + 56))
      v32 = *(_DWORD *)(v31 + 208);
    v33 = (v31 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = *(_QWORD *)(v33 + 8 * v22);
    if (v34)
    {
      if (v34 != 1 && v34 != v23)
        *(_QWORD *)(v33 + 8 * v22) = 1;
    }
    else
    {
      *(_QWORD *)(v33 + 8 * v22) = v23;
      if (*((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v9 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v9);
        v25 = *(_QWORD *)(v23 + 24);
        v30 = v25 & 1;
      }
    }
    v36 = v25 & 0xFFFFFFFFFFFFFFFELL;
    if (v30)
      v37 = v36 == 0;
    else
      v37 = 1;
    if (v37)
    {
      v50 = JSC::JSFunction::allocateAndInitializeRareData((JSC::JSFunction *)v23, v10, v21, a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(_QWORD *)(v36 + 16))
      {
LABEL_41:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v10, &v69, "CommonSlowPaths", a2);
        if (*((_QWORD *)v11 + 2))
          return &xmmword_1ECF4C7C0;
        v38 = *(JSC::VM **)(v36 + 16);
        v39 = JSC::constructEmptyObject(v11, v38, a3, a4, a5, a6, a7, a8);
        v47 = v39;
        if (!*((_QWORD *)v38 + 6))
        {
          v51 = *(_QWORD *)(v36 + 24);
          *(_QWORD *)(v39 + 16) = v51;
          if (v51)
            v52 = (v51 & 0xFFFE000000000002) == 0;
          else
            v52 = 0;
          if (v52 && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v39 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v39);
          JSC::JSObject::didBecomePrototype(v51, v11, v46, v40, v41, v42, v43, v44, v45);
        }
        goto LABEL_45;
      }
      v50 = JSC::JSFunction::initializeRareData((JSC::JSFunction *)v23, v10, v21, a4, a5, a6, a7, a8);
    }
    v36 = (unint64_t)v50;
    goto LABEL_41;
  }
LABEL_75:
  v63 = JSC::JSObject::get((unsigned int *)v23, (uint64_t)v10, *(_QWORD *)(*((_QWORD *)v11 + 5244) + 2160), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v69, "CommonSlowPaths", a2);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v63 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v63 + 5) < 0x17u)
  {
    v70 = (JSC::VM *)*((_QWORD *)v10 + 7);
    while (1)
    {
      while (1)
      {
        v65 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C));
        if (v65 != &JSC::JSBoundFunction::s_info && v65 != &JSC::JSRemoteFunction::s_info)
          break;
        v23 = *(_QWORD *)(v23 + 32);
      }
      if (*(_BYTE *)(v23 + 5) != 61)
      {
        v66 = *(JSC **)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28);
        goto LABEL_85;
      }
      if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v23))
        break;
      v23 = *(_QWORD *)(v23 + 16);
    }
    JSC::throwTypeError((unint64_t)v10, &v70, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v66 = 0;
LABEL_85:
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v10, &v69, "CommonSlowPaths", a2);
    v11 = v69;
    if (*((_QWORD *)v69 + 2))
      return &xmmword_1ECF4C7C0;
    v67 = JSC::constructEmptyObject(v66, v56, (uint64_t)v57, v58, v59, v60, v61, v62);
  }
  else
  {
    v67 = JSC::constructEmptyObject(v10, (JSC::JSGlobalObject *)v63, v57, v64, v58, v59, v60, v61, v62);
  }
  v47 = v67;
LABEL_45:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v69, "CommonSlowPaths", a2);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v47;
  return (__int128 *)a2;
}

__int128 *slow_path_create_promise(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t SlowCase;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  JSC::VM *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  _DWORD **v51;
  _DWORD *v52;
  JSC::VM *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v53 = (JSC::VM *)v10;
  v54 = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988E9510);
  }
  v15 = a2;
  v17 = (uint64_t *)(v10 + 38992);
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = a2[10] != 0;
    v23 = *(_DWORD *)(a2 + 14);
  }
  else if (v18 == 128)
  {
    v45 = *((__int16 *)a2 + 1);
    if (v45 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v45 + 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = a2[6] != 0;
    v23 = *((unsigned __int16 *)a2 + 4);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = a2[3] & 1;
    v23 = a2[4];
  }
  v24 = *(_DWORD **)(a1 + 8 * v21);
  v52 = v24;
  if (v22)
  {
    if (*(_DWORD **)(v9 + 272) == v24)
    {
      v25 = *(_DWORD *)(v9 + 1184);
      if (v25)
        v26 = 16 * (v25 & 0xFFFFFFFE);
      else
        v26 = 0;
    }
    else
    {
      v49 = v10;
      v50 = &v54;
      v51 = &v52;
      v26 = (unint64_t)slow_path_create_promise::$_0::operator()(&v49, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v54, &v53, "CommonSlowPaths", v15);
    if (*(_QWORD *)(v10 + 16))
      return &xmmword_1ECF4C7C0;
    SlowCase = *v17;
    if ((unint64_t)*v17 >= *(_QWORD *)(v10 + 39000))
    {
      SlowCase = *(_QWORD *)(v10 + 39008);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0);
LABEL_24:
        *(_DWORD *)SlowCase = 0;
        v28 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)SlowCase = v26 >> 4;
        *(_DWORD *)(SlowCase + 4) = v28;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 0;
        *(_QWORD *)(SlowCase + 24) = 0;
        if (*(_BYTE *)(v10 + 755))
          goto LABEL_36;
        goto LABEL_37;
      }
      v43 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39016);
      *(_QWORD *)(v10 + 39000) = SlowCase + HIDWORD(v43);
      *(_QWORD *)(v10 + 39008) = SlowCase + (int)v43;
    }
    *v17 = SlowCase + 32;
    goto LABEL_24;
  }
  if (*(_DWORD **)(v9 + 264) == v24)
  {
    v29 = *(_DWORD *)(v9 + 1164);
    if (v29)
      v30 = 16 * (v29 & 0xFFFFFFFE);
    else
      v30 = 0;
  }
  else
  {
    v49 = v10;
    v50 = &v54;
    v51 = &v52;
    v30 = (unint64_t)slow_path_create_promise::$_1::operator()(&v49, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v54, &v53, "CommonSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  SlowCase = *v17;
  if ((unint64_t)*v17 < *(_QWORD *)(v10 + 39000))
    goto LABEL_34;
  SlowCase = *(_QWORD *)(v10 + 39008);
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39016);
    *(_QWORD *)(v10 + 39000) = SlowCase + HIDWORD(v44);
    *(_QWORD *)(v10 + 39008) = SlowCase + (int)v44;
LABEL_34:
    *v17 = SlowCase + 32;
    goto LABEL_35;
  }
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0);
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  v31 = *(_DWORD *)(v30 + 8);
  *(_DWORD *)SlowCase = v30 >> 4;
  *(_DWORD *)(SlowCase + 4) = v31;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v10 + 755))
LABEL_36:
    __dmb(0xAu);
LABEL_37:
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  v32 = v52;
  if (v52 && *((_BYTE *)v52 + 5) == 26)
  {
    v33 = *((_QWORD *)v52 + 3);
    if ((v33 & 1) != 0)
    {
      v42 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v42 + 5) == 8)
        goto LABEL_54;
      v34 = *(_QWORD *)(v42 + 88);
    }
    else
    {
      if (*(_BYTE *)(v33 + 5) == 8)
        goto LABEL_54;
      v34 = *(_QWORD *)(v33 + 88);
    }
    if ((*(_DWORD *)(v34 + 16) & 0x80000000) != 0)
    {
      v46 = *(JSC::VM **)(*(_QWORD *)(16 * (*v52 & 0xFFFFFFFE) + 0x28) + 56);
      LODWORD(v49) = 0;
      v47 = v52;
      JSC::JSObject::getDirect(v52, v46, *(_QWORD *)(*((_QWORD *)v46 + 5244) + 2160), (const JSC::PropertyTable *)&v49, a5, a6, a7, a8);
      if (!v48 || (v49 & 0x70) != 0)
        goto LABEL_54;
      v32 = v47;
      v33 = *((_QWORD *)v47 + 3);
    }
    if ((v33 & 1) != 0)
      v33 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v35 = *(_QWORD *)(v33 + 88);
    if (((1 << *(_BYTE *)(v35 + 50)) & 0x78007) != 0 || (v36 = *(_QWORD **)(v35 + 88)) != 0 && *v36)
    {
      v37 = *(_QWORD *)(v8 + 136);
      v38 = *(unsigned __int16 *)(v37 + 28);
      if (!*(_WORD *)(v37 + 28))
        v38 = *(_DWORD *)(v37 + 152);
      v39 = (v37 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
      v40 = *(_DWORD **)(v39 + 8 * v23);
      if (v40)
      {
        if (v40 != (_DWORD *)1 && v40 != v32)
          *(_QWORD *)(v39 + 8 * v23) = 1;
      }
      else
      {
        *(_QWORD *)(v39 + 8 * v23) = v32;
        if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v8 + 7))
          JSC::Heap::writeBarrierSlowPath(v10 + 192, v8);
      }
    }
  }
LABEL_54:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v54, &v53, "CommonSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v20) = SlowCase;
  return (__int128 *)v15;
}

JSC::JSObject *slow_path_create_promise::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  JSC::InternalFunction *v14;
  int v15;
  JSC::JSObject *v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v26 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v24 = v8;
    v20 = v9;
    v22 = a1;
    v19 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v9 = v20;
    v10 = *(_QWORD *)(v19 + 16);
    a1 = v22;
    v8 = v24;
  }
  JSC::throwTypeError(v20, &v26, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v12 = 0;
  a1 = v22;
  v8 = v24;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v21 = v12;
      v23 = a1;
      v25 = v8;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12 = v21;
      a1 = v23;
      v8 = v25;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v13 = (JSC::JSGlobalObject **)a1[2];
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(_DWORD *)(v12 + 1184);
  if (v15)
    v16 = (JSC::JSObject *)(16 * (v15 & 0xFFFFFFFE));
  else
    v16 = 0;
  return JSC::InternalFunction::createSubclassStructure(v14, *v13, v16, a4, a5, a6, a7, a8);
}

JSC::JSObject *slow_path_create_promise::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  JSC::InternalFunction *v14;
  int v15;
  JSC::JSObject *v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v26 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v24 = v8;
    v20 = v9;
    v22 = a1;
    v19 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v9 = v20;
    v10 = *(_QWORD *)(v19 + 16);
    a1 = v22;
    v8 = v24;
  }
  JSC::throwTypeError(v20, &v26, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v12 = 0;
  a1 = v22;
  v8 = v24;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v21 = v12;
      v23 = a1;
      v25 = v8;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12 = v21;
      a1 = v23;
      v8 = v25;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v13 = (JSC::JSGlobalObject **)a1[2];
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(_DWORD *)(v12 + 1164);
  if (v15)
    v16 = (JSC::JSObject *)(16 * (v15 & 0xFFFFFFFE));
  else
    v16 = 0;
  return JSC::InternalFunction::createSubclassStructure(v14, *v13, v16, a4, a5, a6, a7, a8);
}

__int128 *slow_path_new_promise(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t SlowCase;
  int v25;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  JSC::VM *v37;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v37 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988E9B98);
  }
  v16 = a2;
  v17 = (uint64_t *)(v11 + 38992);
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v33 = *((__int16 *)a2 + 1);
    if (v33 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v33 + 1073741760;
    v34 = a2[4];
    goto LABEL_43;
  }
  if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v34 = a2[6];
LABEL_43:
    v21 = v34 != 0;
    goto LABEL_12;
  }
  v19 = (char)a2[1];
  if (v19 <= 15)
    v20 = (char)a2[1];
  else
    v20 = v19 + 1073741808;
  v21 = a2[2] & 1;
LABEL_12:
  if (!v21)
  {
    v22 = *(_DWORD *)(v10 + 1164);
    if (v22)
      v23 = 16 * (v22 & 0xFFFFFFFE);
    else
      v23 = 0;
    SlowCase = *v17;
    if ((unint64_t)*v17 >= *(_QWORD *)(v11 + 39000))
    {
      SlowCase = *(_QWORD *)(v11 + 39008);
      if ((SlowCase & 1) != 0)
      {
        v36 = v10;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 38968, v11 + 192, 32, 0, 0);
        v10 = v36;
LABEL_18:
        *(_DWORD *)SlowCase = 0;
        v25 = *(_DWORD *)(v23 + 8);
        *(_DWORD *)SlowCase = v23 >> 4;
        *(_DWORD *)(SlowCase + 4) = v25;
        *(_QWORD *)(SlowCase + 8) = 0;
        *(_QWORD *)(SlowCase + 16) = 0;
        *(_QWORD *)(SlowCase + 24) = 0;
        if (!*(_BYTE *)(v11 + 755))
          goto LABEL_20;
        goto LABEL_19;
      }
      v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39016);
      *(_QWORD *)(v11 + 39000) = SlowCase + HIDWORD(v30);
      *(_QWORD *)(v11 + 39008) = SlowCase + (int)v30;
    }
    *v17 = SlowCase + 32;
    goto LABEL_18;
  }
  v27 = *(_DWORD *)(v10 + 1184);
  if (v27)
    v28 = 16 * (v27 & 0xFFFFFFFE);
  else
    v28 = 0;
  SlowCase = *v17;
  if ((unint64_t)*v17 >= *(_QWORD *)(v11 + 39000))
  {
    v35 = v28;
    v31 = v10;
    SlowCase = *(_QWORD *)(v11 + 39008);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 38968, v11 + 192, 32, 0, 0);
    }
    else
    {
      v32 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39016);
      *(_QWORD *)(v11 + 39000) = SlowCase + HIDWORD(v32);
      *(_QWORD *)(v11 + 39008) = SlowCase + (int)v32;
      *v17 = SlowCase + 32;
    }
    v10 = v31;
    v28 = v35;
  }
  else
  {
    *v17 = SlowCase + 32;
  }
  *(_DWORD *)SlowCase = 0;
  v29 = *(_DWORD *)(v28 + 8);
  *(_DWORD *)SlowCase = v28 >> 4;
  *(_DWORD *)(SlowCase + 4) = v29;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v11 + 755))
LABEL_19:
    __dmb(0xAu);
LABEL_20:
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v37, "CommonSlowPaths", v16);
  if (*(_QWORD *)(v11 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v20) = SlowCase;
  return (__int128 *)v16;
}

__int128 *slow_path_create_generator(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::InternalFunction *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  JSC::JSObject *v24;
  uint64_t v25;
  JSC::Structure *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSObject *SubclassStructure;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v49;
  int v50;
  JSC::VM *v51;
  uint64_t v52;
  JSC::VM *v53;
  int v54;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::InternalFunction **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v53 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988E9F04);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else if (v17 == 128)
  {
    v50 = *((__int16 *)a2 + 1);
    if (v50 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v50 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = *(_QWORD *)(a1 + 8 * v20);
  v23 = *((_DWORD *)v9 + 248);
  if (v23)
    v24 = (JSC::JSObject *)(16 * (v23 & 0xFFFFFFFE));
  else
    v24 = 0;
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v9, (JSC::JSGlobalObject *)v22, v24, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v25, (uint64_t)v26, v27, v28, v29, v30, v31))
  {
    v38 = 0;
    goto LABEL_37;
  }
  JSC::JSGenerator::create((JSC::JSGenerator *)v10, SubclassStructure, v26, v27, v28, v29, v30, v31);
  v38 = v37;
  if (v22 && *(_BYTE *)(v22 + 5) == 26)
  {
    v39 = *(_QWORD *)(v22 + 24);
    if ((v39 & 1) != 0)
    {
      v49 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v49 + 5) == 8)
        goto LABEL_37;
      v40 = *(_QWORD *)(v49 + 88);
    }
    else
    {
      if (*(_BYTE *)(v39 + 5) == 8)
        goto LABEL_37;
      v40 = *(_QWORD *)(v39 + 88);
    }
    if ((*(_DWORD *)(v40 + 16) & 0x80000000) != 0)
    {
      v51 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) + 56);
      v54 = 0;
      JSC::JSObject::getDirect((_DWORD *)v22, v51, *(_QWORD *)(*((_QWORD *)v51 + 5244) + 2160), (const JSC::PropertyTable *)&v54, v33, v34, v35, v36);
      if (!v52 || (v54 & 0x70) != 0)
        goto LABEL_37;
      v39 = *(_QWORD *)(v22 + 24);
    }
    if ((v39 & 1) != 0)
      v39 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v41 = *(_QWORD *)(v39 + 88);
    if (((1 << *(_BYTE *)(v41 + 50)) & 0x78007) != 0 || (v42 = *(_QWORD **)(v41 + 88)) != 0 && *v42)
    {
      v43 = *(_QWORD *)(v8 + 136);
      v44 = *(unsigned __int16 *)(v43 + 24);
      if (!*(_WORD *)(v43 + 24))
        v44 = *(_DWORD *)(v43 + 144);
      v45 = (v43 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      v46 = *(_QWORD *)(v45 + 8 * v21);
      if (v46)
      {
        if (v46 != 1 && v46 != v22)
          *(_QWORD *)(v45 + 8 * v21) = 1;
      }
      else
      {
        *(_QWORD *)(v45 + 8 * v21) = v22;
        if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v8 + 7))
          JSC::Heap::writeBarrierSlowPath(v10 + 192, v8);
      }
    }
  }
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v53, "CommonSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v38;
  return (__int128 *)v15;
}

__int128 *slow_path_create_async_generator(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::InternalFunction *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  JSC::JSObject *v24;
  uint64_t v25;
  JSC::Structure *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSObject *SubclassStructure;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v48;
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  JSC::VM *v52;
  int v53;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::InternalFunction **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v52 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EA238);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else if (v17 == 128)
  {
    v49 = *((__int16 *)a2 + 1);
    if (v49 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v49 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = *(_QWORD *)(a1 + 8 * v20);
  v23 = *((_DWORD *)v9 + 249);
  if (v23)
    v24 = (JSC::JSObject *)(16 * (v23 & 0xFFFFFFFE));
  else
    v24 = 0;
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v9, (JSC::JSGlobalObject *)v22, v24, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v25, (uint64_t)v26, v27, v28, v29, v30, v31))
  {
    v37 = 0;
    goto LABEL_37;
  }
  v37 = JSC::JSAsyncGenerator::create((JSC::JSAsyncGenerator *)v10, SubclassStructure, v26);
  if (v22 && *(_BYTE *)(v22 + 5) == 26)
  {
    v38 = *(_QWORD *)(v22 + 24);
    if ((v38 & 1) != 0)
    {
      v48 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v48 + 5) == 8)
        goto LABEL_37;
      v39 = *(_QWORD *)(v48 + 88);
    }
    else
    {
      if (*(_BYTE *)(v38 + 5) == 8)
        goto LABEL_37;
      v39 = *(_QWORD *)(v38 + 88);
    }
    if ((*(_DWORD *)(v39 + 16) & 0x80000000) != 0)
    {
      v50 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) + 56);
      v53 = 0;
      JSC::JSObject::getDirect((_DWORD *)v22, v50, *(_QWORD *)(*((_QWORD *)v50 + 5244) + 2160), (const JSC::PropertyTable *)&v53, v33, v34, v35, v36);
      if (!v51 || (v53 & 0x70) != 0)
        goto LABEL_37;
      v38 = *(_QWORD *)(v22 + 24);
    }
    if ((v38 & 1) != 0)
      v38 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v40 = *(_QWORD *)(v38 + 88);
    if (((1 << *(_BYTE *)(v40 + 50)) & 0x78007) != 0 || (v41 = *(_QWORD **)(v40 + 88)) != 0 && *v41)
    {
      v42 = *(_QWORD *)(v8 + 136);
      v43 = *(unsigned __int16 *)(v42 + 26);
      if (!*(_WORD *)(v42 + 26))
        v43 = *(_DWORD *)(v42 + 148);
      v44 = (v42 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
      v45 = *(_QWORD *)(v44 + 8 * v21);
      if (v45)
      {
        if (v45 != 1 && v45 != v22)
          *(_QWORD *)(v44 + 8 * v21) = 1;
      }
      else
      {
        *(_QWORD *)(v44 + 8 * v21) = v22;
        if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v8 + 7))
          JSC::Heap::writeBarrierSlowPath(v10 + 192, v8);
      }
    }
  }
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v52, "CommonSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v37;
  return (__int128 *)v15;
}

__int128 *slow_path_new_generator(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v27;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v27 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EA3C8);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    if (v17 == 128)
    {
      v18 = *((__int16 *)a2 + 1);
      v19 = v18 + 1073741760;
      v20 = v18 <= 63;
    }
    else
    {
      v18 = (char)a2[1];
      v19 = v18 + 1073741808;
      v20 = v18 <= 15;
    }
    if (v20)
      v21 = v18;
    else
      v21 = v19;
  }
  v22 = *(_DWORD *)(v9 + 992);
  if (v22)
    v23 = (JSC::VM *)(16 * (v22 & 0xFFFFFFFE));
  else
    v23 = 0;
  JSC::JSGenerator::create(v10, v23, a3, a4, a5, a6, a7, a8);
  v25 = v24;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v27, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v21) = v25;
  return (__int128 *)v15;
}

__int128 *slow_path_to_this(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  int v33;
  JSC::JSGlobalObject *v34;
  uint64_t v35;
  JSC::VM *v36;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v36 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EA604);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v33 = *((__int16 *)a2 + 1);
    if (v33 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v33 + 1073741760;
    v20 = a2[4];
    v21 = *((unsigned __int16 *)a2 + 3);
    v22 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = a2[6];
    v21 = *(_DWORD *)(a2 + 10);
    v22 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[4];
  }
  v23 = *(_QWORD *)(v8 + 136);
  v24 = *(unsigned __int16 *)(v23 + 84);
  if (!*(_WORD *)(v23 + 84))
    v24 = *(_DWORD *)(v23 + 264);
  v25 = (v23 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = (_QWORD *)(v25 + 8 * v22);
  v27 = *(_QWORD *)(a1 + 8 * v19);
  v35 = v27;
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    *v26 = 0x100000000;
    goto LABEL_29;
  }
  v28 = *(_DWORD *)v27;
  if (*(_DWORD *)v27 != *(_DWORD *)v26)
  {
    if (*(_DWORD *)v26)
      *(_DWORD *)(v25 + 8 * v22 + 4) = 1;
    *(_DWORD *)v26 = v28;
    if (v28 >= 2 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v8 + 7))
    {
      v34 = v9;
      JSC::Heap::writeBarrierSlowPath(v10 + 192, v8);
      v9 = v34;
    }
  }
  v29 = *(unsigned __int8 *)(v27 + 5);
  if (v29 < 0x17)
  {
LABEL_29:
    if (!v20)
      goto LABEL_18;
    if ((v27 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      v31 = v9;
      v32 = JSC::JSValue::toThisSloppySlowCase((JSC::JSValue *)&v35, v9, a3, a4, a5, a6, a7, a8);
      v9 = v31;
      v27 = v32;
      goto LABEL_18;
    }
    goto LABEL_33;
  }
  if (v29 - 51 > 5)
    goto LABEL_18;
  if (v20)
  {
LABEL_33:
    v27 = *((_QWORD *)v9 + 8);
    goto LABEL_18;
  }
  v27 = 10;
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v36, "CommonSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v27;
  *(_QWORD *)(*(_QWORD *)(v8 + 136) - 16 * v21 - 16) = v27;
  return (__int128 *)v15;
}

__int128 *slow_path_check_tdz(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t TDZError;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::Exception *v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD *);
  _QWORD *v48;
  WTF::StringImpl *v49;
  _QWORD v50[3];

  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[1];
  v4 = (JSC::VM *)v2[9];
  *((_QWORD *)v4 + 5) = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned int *)(v5 + 12) + *(_QWORD *)v5;
  if (v6 > (unint64_t)a2 || v7 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EA84CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v6) & 0x3FFFFFFF;
  v9 = *a2;
  if (v9 == 128)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = v10 + 1073741760;
    v12 = v10 <= 63;
  }
  else
  {
    if (v9 == 130)
    {
      v10 = *(_DWORD *)(a2 + 2);
      goto LABEL_11;
    }
    v10 = (char)a2[1];
    v11 = v10 + 1073741808;
    v12 = v10 <= 15;
  }
  if (!v12)
    v10 = v11;
LABEL_11:
  if (v10 == *(_DWORD *)(v2[7] + 8))
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x6000000002;
    *(_QWORD *)(v13 + 8) = "'super()' must be called in derived constructor before accessing |this| or returning non-object.";
    *(_DWORD *)(v13 + 16) = 4;
    v49 = (WTF::StringImpl *)v13;
    v14 = *(_QWORD *)(v3 + 144);
    v15 = *(JSC::Heap ***)(v3 + 56);
    if ((v14 & 1) != 0)
    {
      v47 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
      v48 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v3 & 8) != 0)
        v48 = (_QWORD *)(v3 - 16);
      v50[0] = *v48;
      v50[1] = v3;
      v50[2] = v3 + 144;
      v14 = v47(v50);
    }
    v16 = JSC::ErrorInstance::create(v15, v14, &v49, 0, 0, 0, 3, 1);
    v22 = (JSC::Exception *)v16;
    if ((v16 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
    {
      v22 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
    }
    JSC::VM::throwException(v4, (JSC::JSGlobalObject *)v3, v22);
    v30 = v49;
    v49 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  else
  {
    TDZError = JSC::createTDZError((JSC *)v3, (JSC::JSGlobalObject *)a2);
    v37 = (JSC::Exception *)TDZError;
    if ((TDZError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TDZError & 0xFFFFFFFE) + 0x4C)))
    {
      v37 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)TDZError, 0, v32, v33, v34, v35, v36);
    }
    JSC::VM::throwException(v4, (JSC::JSGlobalObject *)v3, v37);
  }
  return &xmmword_1ECF4C7C0;
}

uint64_t slow_path_throw_strict_mode_readonly_property_write_error(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  const WTF::String *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Exception *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  WTF::StringImpl *v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(JSC::JSGlobalObject **)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v5 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v6 = *v5;
  v7 = *((unsigned int *)v5 + 3) + *v5;
  if (v6 <= a2 && v7 > a2)
  {
    *(_DWORD *)(a1 + 36) = (a2 - v6) & 0x3FFFFFFF;
    v9 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v9 = 0x2900000002;
    *(_QWORD *)(v9 + 8) = "Attempted to assign to readonly property.";
    *(_DWORD *)(v9 + 16) = 4;
    v35 = (WTF::StringImpl *)v9;
    v11 = JSC::createTypeError((unint64_t)v3, &v35, v10);
    v17 = (JSC::Exception *)v11;
    if ((v11 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
    {
      v17 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)v11, 0, v12, v13, v14, v15, v16);
    }
    JSC::VM::throwException(v4, v3, v17);
    v25 = v35;
    v35 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    return (uint64_t)&xmmword_1ECF4C7C0;
  }
  else
  {
    result = 299;
    __break(0xC471u);
  }
  return result;
}

__int128 *slow_path_not(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  JSC::VM *v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v26 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1988EABDCLL);
  }
  v11 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_39:
    v24 = v15 + v14;
    goto LABEL_40;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (unint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_39;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v24 = *(_DWORD *)(a2 + 6);
LABEL_40:
  v15 = v24;
  v16 = v13;
  if (v24 < 0x40000000)
    goto LABEL_12;
  v25 = (v24 - 0x40000000);
  if (v25 >= *(unsigned int *)(v6 + 172))
    goto LABEL_45;
  v17 = (unint64_t *)(*(_QWORD *)(v6 + 160) + 8 * v25);
LABEL_13:
  v18 = *v17;
  if (v18 >= 0xFFFE000000000000)
    goto LABEL_31;
  if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v18 & 0xFFFE000000000002) != 0)
    {
      if (v18 == 7)
      {
LABEL_17:
        v19 = 6;
        goto LABEL_18;
      }
      goto LABEL_32;
    }
    v21 = *(unsigned __int8 *)(v18 + 5);
    if (v21 == 2)
    {
      v23 = *(_QWORD *)(v18 + 8);
      v18 += 16;
      if ((v23 & 1) == 0)
        v18 = v23 + 4;
      LODWORD(v18) = *(_DWORD *)v18;
    }
    else
    {
      if (v21 != 3)
      {
        v22 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v22 + 10) & 1) == 0 || *(_QWORD *)(v22 + 40) != v4)
          goto LABEL_17;
LABEL_32:
        v19 = 7;
        goto LABEL_18;
      }
      LODWORD(v18) = *(_DWORD *)(v18 + 8);
    }
LABEL_31:
    if ((_DWORD)v18)
      goto LABEL_17;
    goto LABEL_32;
  }
  v19 = 7;
  if (COERCE_DOUBLE(v18 - 0x2000000000000) != 0.0)
    goto LABEL_17;
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v26, "CommonSlowPaths", a2);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v19;
  return (__int128 *)v11;
}

__int128 *slow_path_eq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  JSC::JSBigInt **v26;
  JSC::JSBigInt *v27;
  JSC::JSBigInt **v28;
  JSC::JSBigInt *v29;
  int v31;
  uint64_t v32;
  unint64_t v34;
  int v35;
  unint64_t v36;
  JSC::VM *v37;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::VM ***)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v37 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1988EAE60);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_37:
    v35 = v22 + v21;
    goto LABEL_38;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (JSC::JSBigInt **)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v35 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_38:
  v22 = v35;
  v24 = v20;
  v25 = v23;
  if (v35 < 0x40000000)
    goto LABEL_14;
  v36 = (v35 - 0x40000000);
  if (v36 >= *(unsigned int *)(v12 + 172))
    goto LABEL_45;
  v26 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v36);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v34 = (v25 - 0x40000000);
    if (v34 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988EAEA8);
    }
    v28 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v34);
  }
  else
  {
    v28 = (JSC::JSBigInt **)(a1 + 8 * v25);
  }
  v29 = *v28;
  if ((unint64_t)v27 >= 0xFFFE000000000000 && (unint64_t)v29 >= 0xFFFE000000000000)
    v31 = v27 == v29;
  else
    v31 = JSC::JSValue::equalSlowCase(v10, v27, v29, a5, a6, a7, a8, a9, a3);
  if (v31)
    v32 = 7;
  else
    v32 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v37, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v24) = v32;
  return (__int128 *)v17;
}

__int128 *slow_path_neq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  JSC::JSBigInt **v26;
  JSC::JSBigInt *v27;
  JSC::JSBigInt **v28;
  JSC::JSBigInt *v29;
  int v31;
  uint64_t v32;
  unint64_t v34;
  int v35;
  unint64_t v36;
  JSC::VM *v37;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::VM ***)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v37 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1988EB0A0);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_37:
    v35 = v22 + v21;
    goto LABEL_38;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (JSC::JSBigInt **)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v35 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_38:
  v22 = v35;
  v24 = v20;
  v25 = v23;
  if (v35 < 0x40000000)
    goto LABEL_14;
  v36 = (v35 - 0x40000000);
  if (v36 >= *(unsigned int *)(v12 + 172))
    goto LABEL_45;
  v26 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v36);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v34 = (v25 - 0x40000000);
    if (v34 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988EB0E8);
    }
    v28 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v34);
  }
  else
  {
    v28 = (JSC::JSBigInt **)(a1 + 8 * v25);
  }
  v29 = *v28;
  if ((unint64_t)v27 >= 0xFFFE000000000000 && (unint64_t)v29 >= 0xFFFE000000000000)
    v31 = v27 == v29;
  else
    v31 = JSC::JSValue::equalSlowCase(v10, v27, v29, a5, a6, a7, a8, a9, a3);
  if (v31)
    v32 = 6;
  else
    v32 = 7;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v37, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v24) = v32;
  return (__int128 *)v17;
}

__int128 *slow_path_stricteq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int8x16_t *v41;
  int8x16_t *v42;
  __int32 v43;
  __int32 v44;
  unint64_t v45;
  uint8x8_t *v46;
  unsigned int v47;
  int16x8_t *v48;
  uint16x8_t v49;
  unsigned int v50;
  uint16x8_t v51;
  int16x8_t *v52;
  unsigned int v53;
  uint8x8_t *v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  unsigned int v58;
  double v59;
  double v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v72;
  int v73;
  int v74;
  __int32 v75;
  BOOL v76;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint16x8_t v81;
  unsigned int v82;
  uint16x8_t v83;
  uint8x16_t v84;
  unsigned int v85;
  uint8x16_t v86;
  int v87;
  unint64_t v88;
  JSC::VM *v89;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EB69CLL);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_143:
    v87 = v22 + v21;
    goto LABEL_144;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_143;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v87 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_144:
  v22 = v87;
  v24 = v20;
  v25 = v23;
  if (v87 < 0x40000000)
    goto LABEL_14;
  v88 = (v87 - 0x40000000);
  if (v88 >= *(unsigned int *)(v12 + 172))
  {
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x1988EB914);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v88);
LABEL_15:
  v27 = *v26;
  if (v25 < 0x40000000)
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
    goto LABEL_17;
  }
  v45 = (v25 - 0x40000000);
  if (v45 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    __break(1u);
    goto LABEL_152;
  }
  v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
LABEL_17:
  v29 = *v28;
  if (v27 >= 0xFFFE000000000000)
  {
    if (v29 >= 0xFFFE000000000000)
      goto LABEL_26;
    if (v29 >> 49)
      goto LABEL_69;
  }
  else
  {
    if (v27 >> 49)
      v30 = v29 >> 49 == 0;
    else
      v30 = 1;
    if (!v30)
    {
LABEL_69:
      v59 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v59 = v27 - 0x2000000000000;
      *(_QWORD *)&v60 = v29 - 0x2000000000000;
      if (v29 > 0xFFFDFFFFFFFFFFFFLL)
        v60 = (double)(int)v29;
      if (v59 != v60)
        goto LABEL_74;
LABEL_27:
      v32 = 7;
      goto LABEL_75;
    }
  }
  if (((v27 | v29) & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v31 = *(unsigned __int8 *)(v27 + 5);
  if (v31 != 2)
  {
    if (v31 == 3 && *(_BYTE *)(v29 + 5) == 3)
    {
      if (JSC::JSBigInt::equals((JSC::JSBigInt *)v27, (JSC::JSBigInt *)v29, (JSC::JSBigInt *)v29))
        goto LABEL_27;
      goto LABEL_74;
    }
    goto LABEL_26;
  }
  if (*(_BYTE *)(v29 + 5) != 2)
  {
LABEL_26:
    if (v27 == v29)
      goto LABEL_27;
LABEL_74:
    v32 = 6;
    goto LABEL_75;
  }
  v33 = *(_QWORD *)(v27 + 8);
  if ((v33 & 1) != 0 || (v34 = *(_QWORD *)(v29 + 8), (v34 & 1) != 0))
  {
    if (JSC::JSString::equalSlowCase((JSC::JSString *)v27, v10, (JSC::JSString *)v29, a5, a6, a7, a8, a9, a3))
      goto LABEL_27;
    goto LABEL_74;
  }
  v35 = *(_DWORD *)(v33 + 16);
  v36 = *(_DWORD *)(v34 + 16);
  if (v36 >= 0x100 && v35 >= 0x100 && (v36 ^ v35) > 0xFF)
    goto LABEL_74;
  v37 = *(unsigned int *)(v33 + 4);
  if ((_DWORD)v37 != *(_DWORD *)(v34 + 4))
    goto LABEL_74;
  if (!(_DWORD)v37)
    goto LABEL_27;
  v38 = *(unsigned __int8 **)(v33 + 8);
  v39 = *(unsigned __int8 **)(v34 + 8);
  if ((v35 & 4) != 0)
  {
    if ((v36 & 4) != 0)
    {
      if (*v38 != *v39)
        goto LABEL_74;
      v58 = v37 - 1;
      if ((_DWORD)v37 == 1)
        goto LABEL_27;
      v41 = (int8x16_t *)(v38 + 1);
      v42 = (int8x16_t *)(v39 + 1);
      if ((_DWORD)v37 != 2)
      {
        switch(31 - __clz(v37 - 2))
        {
          case 0u:
            goto LABEL_41;
          case 1u:
            if (v41->u16[0] != v42->u16[0])
              goto LABEL_74;
            v72 = *(unsigned __int16 *)&v38[v37 - 2];
            v73 = *(unsigned __int16 *)&v39[v37 - 2];
            goto LABEL_112;
          case 2u:
            if (v41->i32[0] != v42->i32[0])
              goto LABEL_74;
            v72 = *(_DWORD *)&v38[v37 - 4];
            v78 = &v39[v37];
LABEL_111:
            v73 = *((_DWORD *)v78 - 1);
LABEL_112:
            if (v72 != v73)
              goto LABEL_74;
            goto LABEL_27;
          case 3u:
            if (v41->i64[0] != v42->i64[0])
              goto LABEL_74;
            v79 = *(_QWORD *)&v38[v37 - 8];
            v80 = &v39[v37];
LABEL_116:
            if (v79 != *((_QWORD *)v80 - 1))
              goto LABEL_74;
            goto LABEL_27;
          case 4u:
            if (!vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v38[v37 - 16], *(int8x16_t *)&v39[v37 - 16]), vceqq_s8(*(int8x16_t *)(v38 + 1), *(int8x16_t *)(v39 + 1)))))goto LABEL_74;
            goto LABEL_27;
          default:
            v84 = (uint8x16_t)vceqq_s8(*v41, *v42);
            v84.i8[0] = vminvq_u8(v84);
            if (!v84.i32[0])
              goto LABEL_74;
            if (v58 < 0x10)
              goto LABEL_27;
            v85 = v58 & 0xF;
            v32 = 6;
            break;
        }
        while (1)
        {
          v86 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v41 + v85), *(int8x16_t *)((char *)v42 + v85));
          v86.i8[0] = vminvq_u8(v86);
          if (!v86.i32[0])
            goto LABEL_75;
          v85 += 16;
          if (v85 >= v58)
            goto LABEL_27;
        }
      }
      v43 = v41->u8[0];
      v44 = v42->u8[0];
    }
    else
    {
      if (*(_WORD *)v39 != *v38)
        goto LABEL_74;
      v46 = (uint8x8_t *)(v38 + 1);
      v47 = v37 - 1;
      v48 = (int16x8_t *)(v39 + 2);
      if (v47 >= 8)
      {
        v49 = (uint16x8_t)vceqq_s16(*v48, (int16x8_t)vmovl_u8(*v46));
        v49.i16[0] = vminvq_u16(v49);
        if (!v49.i32[0])
          goto LABEL_74;
        v50 = v47 & 7;
        v32 = 6;
        while (1)
        {
          v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v50), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v46 + v50)));
          v51.i16[0] = vminvq_u16(v51);
          if (!v51.i32[0])
            goto LABEL_75;
          v50 += 8;
          if (v50 >= v47)
            goto LABEL_27;
        }
      }
      if (v47 >= 4)
      {
        v62 = (v46->u32[0] | ((unint64_t)v46->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v63 = (v62 | (v62 << 8)) & 0xFF00FF00FF00FFLL;
        v64 = v48->i64[0];
        v65 = v47 & 3;
        v66 = (*(unsigned int *)((char *)v46->u32 + v65) | ((unint64_t)*(unsigned int *)((char *)v46->u32 + v65) << 16)) & 0xFFFF0000FFFFLL;
        v67 = ((v66 | (v66 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v48->i64 + 2 * v65);
        goto LABEL_84;
      }
      if (v47 >= 2)
      {
        v74 = (v46->u16[0] | (v46->u16[0] << 8)) & 0xFF00FF;
        v75 = v48->i32[0];
        v76 = ((*(unsigned __int16 *)((char *)v46->u16 + (v47 & 1)) | (*(unsigned __int16 *)((char *)v46->u16 + (v47 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v48->i32 + 2 * (v47 & 1));
        goto LABEL_98;
      }
      if (v47 != 1)
        goto LABEL_27;
      v44 = v46->u8[0];
      v43 = v48->u16[0];
    }
LABEL_42:
    if (v43 == v44)
      goto LABEL_27;
    goto LABEL_74;
  }
  if ((v36 & 4) != 0)
  {
    if (*(_WORD *)v38 != *v39)
      goto LABEL_74;
    v52 = (int16x8_t *)(v38 + 2);
    v53 = v37 - 1;
    v54 = (uint8x8_t *)(v39 + 1);
    if (v53 >= 8)
    {
      v55 = (uint16x8_t)vceqq_s16(*v52, (int16x8_t)vmovl_u8(*v54));
      v55.i16[0] = vminvq_u16(v55);
      if (!v55.i32[0])
        goto LABEL_74;
      v56 = v53 & 7;
      v32 = 6;
      while (1)
      {
        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v52 + 2 * v56), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v54 + v56)));
        v57.i16[0] = vminvq_u16(v57);
        if (!v57.i32[0])
          goto LABEL_75;
        v56 += 8;
        if (v56 >= v53)
          goto LABEL_27;
      }
    }
    if (v53 >= 4)
    {
      v68 = (v54->u32[0] | ((unint64_t)v54->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v63 = (v68 | (v68 << 8)) & 0xFF00FF00FF00FFLL;
      v64 = v52->i64[0];
      v69 = v53 & 3;
      v70 = (*(unsigned int *)((char *)v54->u32 + v69) | ((unint64_t)*(unsigned int *)((char *)v54->u32 + v69) << 16)) & 0xFFFF0000FFFFLL;
      v67 = ((v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v52->i64 + 2 * v69);
LABEL_84:
      if (v67 && v63 == v64)
        goto LABEL_27;
      goto LABEL_74;
    }
    if (v53 < 2)
    {
      if (v53 != 1 || v52->i16[0] == v54->u8[0])
        goto LABEL_27;
      goto LABEL_74;
    }
    v74 = (v54->u16[0] | (v54->u16[0] << 8)) & 0xFF00FF;
    v75 = v52->i32[0];
    v76 = ((*(unsigned __int16 *)((char *)v54->u16 + (v53 & 1)) | (*(unsigned __int16 *)((char *)v54->u16 + (v53 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v52->i32 + 2 * (v53 & 1));
LABEL_98:
    if (v76 && v74 == v75)
      goto LABEL_27;
    goto LABEL_74;
  }
  if (*(unsigned __int16 *)v38 != *(unsigned __int16 *)v39)
    goto LABEL_74;
  v40 = v37 - 1;
  if ((_DWORD)v37 == 1)
    goto LABEL_27;
  v41 = (int8x16_t *)(v38 + 2);
  v42 = (int8x16_t *)(v39 + 2);
  if ((_DWORD)v37 == 2)
  {
LABEL_41:
    v43 = v41->u16[0];
    v44 = v42->u16[0];
    goto LABEL_42;
  }
  switch(31 - __clz(v37 - 2))
  {
    case 0u:
      v43 = v41->i32[0];
      v44 = v42->i32[0];
      goto LABEL_42;
    case 1u:
      if (v41->i32[0] != v42->i32[0])
        goto LABEL_74;
      v72 = *(_DWORD *)&v38[2 * v37 - 4];
      v78 = &v39[2 * v37];
      goto LABEL_111;
    case 2u:
      if (v41->i64[0] != v42->i64[0])
        goto LABEL_74;
      v79 = *(_QWORD *)&v38[2 * v37 - 8];
      v80 = &v39[2 * v37];
      goto LABEL_116;
    case 3u:
      if (!vminvq_u16((uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v38[2 * v37 - 16], *(int16x8_t *)&v39[2 * v37 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v38 + 2), *(int16x8_t *)(v39 + 2)))))goto LABEL_74;
      goto LABEL_27;
    default:
      v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v41, *(int16x8_t *)v42);
      v81.i16[0] = vminvq_u16(v81);
      if (!v81.i32[0])
        goto LABEL_74;
      if (v40 < 8)
        goto LABEL_27;
      v82 = v40 & 7;
      v32 = 6;
      break;
  }
  while (1)
  {
    v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v41 + 2 * v82), *(int16x8_t *)((char *)v42 + 2 * v82));
    v83.i16[0] = vminvq_u16(v83);
    if (!v83.i32[0])
      break;
    v82 += 8;
    if (v82 >= v40)
      goto LABEL_27;
  }
LABEL_75:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v89, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v24) = v32;
  return (__int128 *)v17;
}

__int128 *slow_path_nstricteq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int8x16_t *v41;
  int8x16_t *v42;
  __int32 v43;
  __int32 v44;
  unint64_t v45;
  uint8x8_t *v46;
  unsigned int v47;
  int16x8_t *v48;
  uint16x8_t v49;
  unsigned int v50;
  uint16x8_t v51;
  int16x8_t *v52;
  unsigned int v53;
  uint8x8_t *v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  unsigned int v58;
  double v59;
  double v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v72;
  int v73;
  int v74;
  __int32 v75;
  BOOL v76;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint16x8_t v81;
  unsigned int v82;
  uint16x8_t v83;
  uint8x16_t v84;
  unsigned int v85;
  uint8x16_t v86;
  int v87;
  unint64_t v88;
  JSC::VM *v89;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EBEE4);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_143:
    v87 = v22 + v21;
    goto LABEL_144;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_143;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v87 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_144:
  v22 = v87;
  v24 = v20;
  v25 = v23;
  if (v87 < 0x40000000)
    goto LABEL_14;
  v88 = (v87 - 0x40000000);
  if (v88 >= *(unsigned int *)(v12 + 172))
  {
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x1988EC15CLL);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v88);
LABEL_15:
  v27 = *v26;
  if (v25 < 0x40000000)
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
    goto LABEL_17;
  }
  v45 = (v25 - 0x40000000);
  if (v45 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    __break(1u);
    goto LABEL_152;
  }
  v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
LABEL_17:
  v29 = *v28;
  if (v27 >= 0xFFFE000000000000)
  {
    if (v29 >= 0xFFFE000000000000)
      goto LABEL_26;
    if (v29 >> 49)
      goto LABEL_69;
  }
  else
  {
    if (v27 >> 49)
      v30 = v29 >> 49 == 0;
    else
      v30 = 1;
    if (!v30)
    {
LABEL_69:
      v59 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v59 = v27 - 0x2000000000000;
      *(_QWORD *)&v60 = v29 - 0x2000000000000;
      if (v29 > 0xFFFDFFFFFFFFFFFFLL)
        v60 = (double)(int)v29;
      if (v59 != v60)
        goto LABEL_74;
LABEL_27:
      v32 = 6;
      goto LABEL_75;
    }
  }
  if (((v27 | v29) & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v31 = *(unsigned __int8 *)(v27 + 5);
  if (v31 != 2)
  {
    if (v31 == 3 && *(_BYTE *)(v29 + 5) == 3)
    {
      if (JSC::JSBigInt::equals((JSC::JSBigInt *)v27, (JSC::JSBigInt *)v29, (JSC::JSBigInt *)v29))
        goto LABEL_27;
      goto LABEL_74;
    }
    goto LABEL_26;
  }
  if (*(_BYTE *)(v29 + 5) != 2)
  {
LABEL_26:
    if (v27 == v29)
      goto LABEL_27;
LABEL_74:
    v32 = 7;
    goto LABEL_75;
  }
  v33 = *(_QWORD *)(v27 + 8);
  if ((v33 & 1) != 0 || (v34 = *(_QWORD *)(v29 + 8), (v34 & 1) != 0))
  {
    if (JSC::JSString::equalSlowCase((JSC::JSString *)v27, v10, (JSC::JSString *)v29, a5, a6, a7, a8, a9, a3))
      goto LABEL_27;
    goto LABEL_74;
  }
  v35 = *(_DWORD *)(v33 + 16);
  v36 = *(_DWORD *)(v34 + 16);
  if (v36 >= 0x100 && v35 >= 0x100 && (v36 ^ v35) > 0xFF)
    goto LABEL_74;
  v37 = *(unsigned int *)(v33 + 4);
  if ((_DWORD)v37 != *(_DWORD *)(v34 + 4))
    goto LABEL_74;
  if (!(_DWORD)v37)
    goto LABEL_27;
  v38 = *(unsigned __int8 **)(v33 + 8);
  v39 = *(unsigned __int8 **)(v34 + 8);
  if ((v35 & 4) != 0)
  {
    if ((v36 & 4) != 0)
    {
      if (*v38 != *v39)
        goto LABEL_74;
      v58 = v37 - 1;
      if ((_DWORD)v37 == 1)
        goto LABEL_27;
      v41 = (int8x16_t *)(v38 + 1);
      v42 = (int8x16_t *)(v39 + 1);
      if ((_DWORD)v37 != 2)
      {
        switch(31 - __clz(v37 - 2))
        {
          case 0u:
            goto LABEL_41;
          case 1u:
            if (v41->u16[0] != v42->u16[0])
              goto LABEL_74;
            v72 = *(unsigned __int16 *)&v38[v37 - 2];
            v73 = *(unsigned __int16 *)&v39[v37 - 2];
            goto LABEL_112;
          case 2u:
            if (v41->i32[0] != v42->i32[0])
              goto LABEL_74;
            v72 = *(_DWORD *)&v38[v37 - 4];
            v78 = &v39[v37];
LABEL_111:
            v73 = *((_DWORD *)v78 - 1);
LABEL_112:
            if (v72 != v73)
              goto LABEL_74;
            goto LABEL_27;
          case 3u:
            if (v41->i64[0] != v42->i64[0])
              goto LABEL_74;
            v79 = *(_QWORD *)&v38[v37 - 8];
            v80 = &v39[v37];
LABEL_116:
            if (v79 != *((_QWORD *)v80 - 1))
              goto LABEL_74;
            goto LABEL_27;
          case 4u:
            if (!vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v38[v37 - 16], *(int8x16_t *)&v39[v37 - 16]), vceqq_s8(*(int8x16_t *)(v38 + 1), *(int8x16_t *)(v39 + 1)))))goto LABEL_74;
            goto LABEL_27;
          default:
            v84 = (uint8x16_t)vceqq_s8(*v41, *v42);
            v84.i8[0] = vminvq_u8(v84);
            if (!v84.i32[0])
              goto LABEL_74;
            if (v58 < 0x10)
              goto LABEL_27;
            v85 = v58 & 0xF;
            v32 = 7;
            break;
        }
        while (1)
        {
          v86 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v41 + v85), *(int8x16_t *)((char *)v42 + v85));
          v86.i8[0] = vminvq_u8(v86);
          if (!v86.i32[0])
            goto LABEL_75;
          v85 += 16;
          if (v85 >= v58)
            goto LABEL_27;
        }
      }
      v43 = v41->u8[0];
      v44 = v42->u8[0];
    }
    else
    {
      if (*(_WORD *)v39 != *v38)
        goto LABEL_74;
      v46 = (uint8x8_t *)(v38 + 1);
      v47 = v37 - 1;
      v48 = (int16x8_t *)(v39 + 2);
      if (v47 >= 8)
      {
        v49 = (uint16x8_t)vceqq_s16(*v48, (int16x8_t)vmovl_u8(*v46));
        v49.i16[0] = vminvq_u16(v49);
        if (!v49.i32[0])
          goto LABEL_74;
        v50 = v47 & 7;
        v32 = 7;
        while (1)
        {
          v51 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v48 + 2 * v50), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v46 + v50)));
          v51.i16[0] = vminvq_u16(v51);
          if (!v51.i32[0])
            goto LABEL_75;
          v50 += 8;
          if (v50 >= v47)
            goto LABEL_27;
        }
      }
      if (v47 >= 4)
      {
        v62 = (v46->u32[0] | ((unint64_t)v46->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v63 = (v62 | (v62 << 8)) & 0xFF00FF00FF00FFLL;
        v64 = v48->i64[0];
        v65 = v47 & 3;
        v66 = (*(unsigned int *)((char *)v46->u32 + v65) | ((unint64_t)*(unsigned int *)((char *)v46->u32 + v65) << 16)) & 0xFFFF0000FFFFLL;
        v67 = ((v66 | (v66 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v48->i64 + 2 * v65);
        goto LABEL_84;
      }
      if (v47 >= 2)
      {
        v74 = (v46->u16[0] | (v46->u16[0] << 8)) & 0xFF00FF;
        v75 = v48->i32[0];
        v76 = ((*(unsigned __int16 *)((char *)v46->u16 + (v47 & 1)) | (*(unsigned __int16 *)((char *)v46->u16 + (v47 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v48->i32 + 2 * (v47 & 1));
        goto LABEL_98;
      }
      if (v47 != 1)
        goto LABEL_27;
      v44 = v46->u8[0];
      v43 = v48->u16[0];
    }
LABEL_42:
    if (v43 == v44)
      goto LABEL_27;
    goto LABEL_74;
  }
  if ((v36 & 4) != 0)
  {
    if (*(_WORD *)v38 != *v39)
      goto LABEL_74;
    v52 = (int16x8_t *)(v38 + 2);
    v53 = v37 - 1;
    v54 = (uint8x8_t *)(v39 + 1);
    if (v53 >= 8)
    {
      v55 = (uint16x8_t)vceqq_s16(*v52, (int16x8_t)vmovl_u8(*v54));
      v55.i16[0] = vminvq_u16(v55);
      if (!v55.i32[0])
        goto LABEL_74;
      v56 = v53 & 7;
      v32 = 7;
      while (1)
      {
        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v52 + 2 * v56), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v54 + v56)));
        v57.i16[0] = vminvq_u16(v57);
        if (!v57.i32[0])
          goto LABEL_75;
        v56 += 8;
        if (v56 >= v53)
          goto LABEL_27;
      }
    }
    if (v53 >= 4)
    {
      v68 = (v54->u32[0] | ((unint64_t)v54->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v63 = (v68 | (v68 << 8)) & 0xFF00FF00FF00FFLL;
      v64 = v52->i64[0];
      v69 = v53 & 3;
      v70 = (*(unsigned int *)((char *)v54->u32 + v69) | ((unint64_t)*(unsigned int *)((char *)v54->u32 + v69) << 16)) & 0xFFFF0000FFFFLL;
      v67 = ((v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL) == *(uint64_t *)((char *)v52->i64 + 2 * v69);
LABEL_84:
      if (v67 && v63 == v64)
        goto LABEL_27;
      goto LABEL_74;
    }
    if (v53 < 2)
    {
      if (v53 != 1 || v52->i16[0] == v54->u8[0])
        goto LABEL_27;
      goto LABEL_74;
    }
    v74 = (v54->u16[0] | (v54->u16[0] << 8)) & 0xFF00FF;
    v75 = v52->i32[0];
    v76 = ((*(unsigned __int16 *)((char *)v54->u16 + (v53 & 1)) | (*(unsigned __int16 *)((char *)v54->u16 + (v53 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v52->i32 + 2 * (v53 & 1));
LABEL_98:
    if (v76 && v74 == v75)
      goto LABEL_27;
    goto LABEL_74;
  }
  if (*(unsigned __int16 *)v38 != *(unsigned __int16 *)v39)
    goto LABEL_74;
  v40 = v37 - 1;
  if ((_DWORD)v37 == 1)
    goto LABEL_27;
  v41 = (int8x16_t *)(v38 + 2);
  v42 = (int8x16_t *)(v39 + 2);
  if ((_DWORD)v37 == 2)
  {
LABEL_41:
    v43 = v41->u16[0];
    v44 = v42->u16[0];
    goto LABEL_42;
  }
  switch(31 - __clz(v37 - 2))
  {
    case 0u:
      v43 = v41->i32[0];
      v44 = v42->i32[0];
      goto LABEL_42;
    case 1u:
      if (v41->i32[0] != v42->i32[0])
        goto LABEL_74;
      v72 = *(_DWORD *)&v38[2 * v37 - 4];
      v78 = &v39[2 * v37];
      goto LABEL_111;
    case 2u:
      if (v41->i64[0] != v42->i64[0])
        goto LABEL_74;
      v79 = *(_QWORD *)&v38[2 * v37 - 8];
      v80 = &v39[2 * v37];
      goto LABEL_116;
    case 3u:
      if (!vminvq_u16((uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v38[2 * v37 - 16], *(int16x8_t *)&v39[2 * v37 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v38 + 2), *(int16x8_t *)(v39 + 2)))))goto LABEL_74;
      goto LABEL_27;
    default:
      v81 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v41, *(int16x8_t *)v42);
      v81.i16[0] = vminvq_u16(v81);
      if (!v81.i32[0])
        goto LABEL_74;
      if (v40 < 8)
        goto LABEL_27;
      v82 = v40 & 7;
      v32 = 7;
      break;
  }
  while (1)
  {
    v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v41 + 2 * v82), *(int16x8_t *)((char *)v42 + 2 * v82));
    v83.i16[0] = vminvq_u16(v83);
    if (!v83.i32[0])
      break;
    v82 += 8;
    if (v82 >= v40)
      goto LABEL_27;
  }
LABEL_75:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v89, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v24) = v32;
  return (__int128 *)v17;
}

__int128 *slow_path_inc(uint64_t a1, unsigned __int8 *a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  JSC::VM *v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  double v34;
  uint64_t v35;
  BOOL hasExceptionsAfterHandlingTraps;
  double v37;
  JSC::VM *v38;
  JSC::JSObject *v39;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v38 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EC374);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    if (v20 <= 63)
      goto LABEL_9;
    v30 = 1073741760;
LABEL_29:
    v31 = v20 + v30;
    goto LABEL_30;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
    {
LABEL_9:
      v21 = v20;
LABEL_10:
      v22 = (unint64_t *)(a1 + 8 * v21);
      goto LABEL_11;
    }
    v30 = 1073741808;
    goto LABEL_29;
  }
  v31 = *(_DWORD *)(a2 + 2);
LABEL_30:
  v21 = v31;
  if (v31 < 0x40000000)
    goto LABEL_10;
  v32 = (v31 - 0x40000000);
  if (v32 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988EC404);
  }
  v22 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v32);
LABEL_11:
  v23 = *v22;
  v24 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (*v22 >> 49)
    goto LABEL_12;
  if ((v23 & 0xFFFE000000000002) == 0)
  {
    v33 = *(unsigned __int8 *)(v23 + 5);
    if (v33 == 3)
      goto LABEL_12;
    if (v33 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v23, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_56;
    }
    v23 = JSC::JSCell::toPrimitive(v23, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v39 = (JSC::JSObject *)v23;
  if (*((_DWORD *)v24 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v24, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_63:
    v23 = 0;
    goto LABEL_12;
  }
  if (v23 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_12;
  if ((v23 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v23 + 5) == 3)
      goto LABEL_12;
    goto LABEL_54;
  }
  if (v23 < 0xFFFE000000000000)
  {
LABEL_54:
    JSC::JSValue::toNumberSlowCase(&v39, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_55;
  }
  v34 = (double)(int)v23;
LABEL_55:
  if (*((_DWORD *)v24 + 20))
  {
    v37 = v34;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v34 = v37;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_63;
  }
LABEL_56:
  if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v35 = (int)v34, v34 == (double)(int)v35)
    && ((_DWORD)v35 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
  {
    v23 = v35 | 0xFFFE000000000000;
  }
  else
  {
    v23 = *(_QWORD *)&v34 + 0x2000000000000;
  }
LABEL_12:
  if (*((_DWORD *)v24 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v24, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v28 = 0;
  }
  else if (v23 >> 49)
  {
    v25 = (double)(int)v23;
    if (v23 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v25 = v23 - 0x2000000000000;
    v26 = v25 + 1.0;
    if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v27 = (int)v26, v26 == (double)(int)v27)
      && ((_DWORD)v27 || (*(_QWORD *)&v26 & 0x8000000000000000) == 0))
    {
      v28 = v27 | 0xFFFE000000000000;
    }
    else
    {
      v28 = *(_QWORD *)&v26 + 0x2000000000000;
    }
  }
  else
  {
    v28 = (unint64_t)JSC::JSBigInt::inc(v10, (JSC::JSGlobalObject *)v23, a3, a4);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v38, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v38, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v28;
  return (__int128 *)v17;
}

__int128 *slow_path_dec(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  uint64_t v7;
  JSC::JSBigInt *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  JSC::VM *v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  double v31;
  uint64_t v32;
  BOOL hasExceptionsAfterHandlingTraps;
  double v34;
  JSC::VM *v35;
  JSC::JSObject *v36;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v35 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  v15 = *v2;
  if (v15 == 130)
  {
    v27 = *(_DWORD *)(v2 + 2);
  }
  else
  {
    if (v15 == 128)
    {
      v16 = *((__int16 *)v2 + 1);
      if (v16 <= 63)
        goto LABEL_4;
      v26 = 1073741760;
    }
    else
    {
      v16 = (char)v2[1];
      if (v16 <= 15)
      {
LABEL_4:
        v17 = v16;
LABEL_5:
        v18 = (unint64_t *)(a1 + 8 * v17);
        goto LABEL_6;
      }
      v26 = 1073741808;
    }
    v27 = v16 + v26;
  }
  v17 = v27;
  if (v27 < 0x40000000)
    goto LABEL_5;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = (v17 - 0x40000000);
  if (v29 >= *(unsigned int *)(v28 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988EC730);
  }
  v18 = (unint64_t *)(*(_QWORD *)(v28 + 160) + 8 * v29);
LABEL_6:
  v19 = *v18;
  v20 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (*v18 >> 49)
    goto LABEL_7;
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v19 + 5);
    if (v30 == 3)
      goto LABEL_7;
    if (v30 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v19, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
      goto LABEL_51;
    }
    v19 = JSC::JSCell::toPrimitive(v19, (JSC::VM **)v5, (JSC::Structure *)1, v9, v10, v11, v12, v13);
  }
  v36 = (JSC::JSObject *)v19;
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
  {
LABEL_58:
    v19 = 0;
    goto LABEL_7;
  }
  if (v19 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_7;
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v19 + 5) == 3)
      goto LABEL_7;
    goto LABEL_49;
  }
  if (v19 < 0xFFFE000000000000)
  {
LABEL_49:
    JSC::JSValue::toNumberSlowCase(&v36, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    goto LABEL_50;
  }
  v31 = (double)(int)v19;
LABEL_50:
  if (*((_DWORD *)v20 + 20))
  {
    v34 = v31;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v20, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
    v31 = v34;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_58;
  }
LABEL_51:
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v32 = (int)v31, v31 == (double)(int)v32)
    && ((_DWORD)v32 || (*(_QWORD *)&v31 & 0x8000000000000000) == 0))
  {
    v19 = v32 | 0xFFFE000000000000;
  }
  else
  {
    v19 = *(_QWORD *)&v31 + 0x2000000000000;
  }
LABEL_7:
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
  {
    v24 = 0;
  }
  else if (v19 >> 49)
  {
    v21 = (double)(int)v19;
    if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v21 = v19 - 0x2000000000000;
    v22 = v21 + -1.0;
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v23 = (int)v22, v22 == (double)(int)v23)
      && ((_DWORD)v23 || (*(_QWORD *)&v22 & 0x8000000000000000) == 0))
    {
      v24 = v23 | 0xFFFE000000000000;
    }
    else
    {
      v24 = *(_QWORD *)&v22 + 0x2000000000000;
    }
  }
  else
  {
    v24 = (unint64_t)JSC::JSBigInt::dec((JSC::JSGlobalObject **)v5, (JSC::JSGlobalObject *)v19, v8, v9);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v35, "CommonSlowPaths", v2);
  if (*((_QWORD *)v6 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v5, &v35, "CommonSlowPaths", v2);
    if (*((_QWORD *)v6 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v17) = v24;
  return (__int128 *)v2;
}

__int128 *slow_path_to_string(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  uint64_t v22;
  JSC::VM *v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(JSC::JSGlobalObject **)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v23 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1988EC96CLL);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_25:
    v20 = v15 + v14;
    goto LABEL_26;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (uint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v20 = *(_DWORD *)(a2 + 6);
LABEL_26:
  v15 = v20;
  v16 = v13;
  if (v20 < 0x40000000)
    goto LABEL_12;
  v21 = (v20 - 0x40000000);
  if (v21 >= *(unsigned int *)(v5 + 172))
    goto LABEL_30;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v21);
LABEL_13:
  v18 = *v17;
  v22 = v18;
  if ((v18 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v18 + 5) != 2)
    v18 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v22, v3, 1);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v3, &v23, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v18;
  return (__int128 *)v10;
}

__int128 *slow_path_negate(uint64_t a1, unsigned __int8 *a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned __int16 *v28;
  double v29;
  double v30;
  uint64_t v31;
  int64_t v32;
  unsigned int v33;
  int v34;
  unsigned __int8 v35;
  unsigned __int16 v36;
  double v37;
  unsigned __int16 v38;
  int v40;
  unsigned int v41;
  uint64_t v42;
  double v43;
  JSC::VM **v44;
  JSC::JSObject *v45;
  JSC::VM *v46;

  v9 = *(_QWORD **)(a1 + 16);
  v44 = (JSC::VM **)v9[1];
  v10 = (JSC::VM *)v9[9];
  *((_QWORD *)v10 + 5) = a1;
  v46 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x1988ECD58);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v40 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v40 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v40 + 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((unsigned __int16 *)a2 + 3);
    if (v22 <= 63)
      goto LABEL_12;
LABEL_58:
    v22 += v20;
    goto LABEL_59;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v19 + 1073741808;
    v22 = (char)a2[2];
    v23 = a2[3];
    if (v22 < 16)
      goto LABEL_12;
    goto LABEL_58;
  }
  v21 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_59:
  if (v22 < 0x40000000)
  {
LABEL_12:
    v24 = (uint64_t *)(a1 + 8 * v22);
    goto LABEL_13;
  }
  v41 = v22 - 0x40000000;
  if (v41 >= *(_DWORD *)(v11 + 172))
    goto LABEL_74;
  v24 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v41);
LABEL_13:
  v25 = *v24;
  v26 = *v24;
  if ((*v24 & 0xFFFE000000000002) == 0)
    v26 = JSC::JSCell::toPrimitive(*v24, v44, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v45 = (JSC::JSObject *)v26;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v44, &v46, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  v27 = *(unsigned int **)(v9[7] + 208);
  if (*v27 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1988ECD94);
  }
  v28 = (unsigned __int16 *)v27 + v23 + 2;
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    if (v26 >= 0xFFFE000000000000)
    {
      v29 = (double)(int)v26;
      goto LABEL_22;
    }
    if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v29 = v26 - 0x2000000000000;
      goto LABEL_22;
    }
LABEL_21:
    JSC::JSValue::toNumberSlowCase(&v45, (JSC::JSGlobalObject *)v44, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_22:
    v30 = -v29;
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v31 = (int)v30, (double)(int)v31 == v30)
      && ((_DWORD)v31 || (*(_QWORD *)&v30 & 0x8000000000000000) == 0))
    {
      v32 = v31 | 0xFFFE000000000000;
    }
    else
    {
      v32 = *(_QWORD *)&v30 + 0x2000000000000;
    }
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v44, &v46, "CommonSlowPaths", v16);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
    if (HIBYTE(word_1ECF4C620))
    {
      JSC::doExceptionFuzzing((unint64_t)v44, &v46, "CommonSlowPaths", v16);
      if (*((_QWORD *)v10 + 2))
        return &xmmword_1ECF4C7C0;
    }
    *(_QWORD *)(a1 + 8 * v21) = v32;
    v33 = *v28;
    v34 = (v33 >> 7) & 6 | 1;
    if (v25 < 0xFFFE000000000000)
      v34 = (v33 >> 7) & 5 | 2;
    if (v25 >> 49)
      v35 = v34;
    else
      v35 = (v33 >> 7) & 3 | 4;
    v36 = v33 & 0xFC7F | (v35 << 7);
    *v28 = v36;
    if ((v32 & 0xFFFE000000000002) != 0)
    {
      if ((unint64_t)v32 > 0xFFFDFFFFFFFFFFFFLL)
        return (__int128 *)v16;
    }
    else if (*(_BYTE *)(v32 + 5) == 3)
    {
      v38 = v36 | 0x20;
LABEL_43:
      *v28 = v38;
      return (__int128 *)v16;
    }
    if (v25 > 0xFFFDFFFFFFFFFFFFLL)
      v36 |= 8u;
    *(_QWORD *)&v37 = v32 - 0x2000000000000;
    if (v32 <= 0x1FFFFFFFFFFFFLL && v37 == 0.0)
    {
      v38 = v36 | 2;
    }
    else
    {
      *v28 = v36 | 1;
      if ((uint64_t)fabs(v37) < 0x8000000000000)
        return (__int128 *)v16;
      v38 = v36 | 0x11;
    }
    goto LABEL_43;
  }
  if (*(_BYTE *)(v26 + 5) != 3)
    goto LABEL_21;
  v42 = JSC::JSBigInt::unaryMinus((JSC::JSBigInt *)v44, (JSC::JSGlobalObject *)v26, a3, a4);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v44, &v46, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v44, &v46, "CommonSlowPaths", v16);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v42;
  JSC::updateArithProfileForUnaryArithOp(v28, v42, v25, v43);
  return (__int128 *)v16;
}

double JSC::updateArithProfileForUnaryArithOp(_WORD *a1, uint64_t a2, unint64_t a3, double result)
{
  unsigned int v4;
  int v5;
  unsigned __int8 v6;
  __int16 v7;
  __int16 v8;

  v4 = (unsigned __int16)*a1;
  v5 = (v4 >> 7) & 6 | 1;
  if (a3 < 0xFFFE000000000000)
    v5 = (v4 >> 7) & 5 | 2;
  if (a3 >> 49)
    v6 = v5;
  else
    v6 = (v4 >> 7) & 3 | 4;
  v7 = v4 & 0xFC7F | (v6 << 7);
  *a1 = v7;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if ((unint64_t)a2 > 0xFFFDFFFFFFFFFFFFLL)
      return result;
  }
  else if (*(_BYTE *)(a2 + 5) == 3)
  {
    v8 = v7 | 0x20;
    goto LABEL_13;
  }
  if (a3 > 0xFFFDFFFFFFFFFFFFLL)
    v7 |= 8u;
  *(_QWORD *)&result = a2 - 0x2000000000000;
  if (a2 <= 0x1FFFFFFFFFFFFLL && result == 0.0)
  {
    v8 = v7 | 2;
LABEL_13:
    *a1 = v8;
    return result;
  }
  *a1 = v7 | 1;
  result = fabs(result);
  if ((uint64_t)result >= 0x8000000000000)
  {
    v8 = v7 | 0x11;
    goto LABEL_13;
  }
  return result;
}

__int128 *slow_path_to_number(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  JSC::JSObject **v25;
  JSC::JSObject *v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  BOOL v32;
  __int16 v33;
  int v35;
  JSC::JSObject *v36;
  JSC::VM *v37;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v37 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1988ED160);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v35 = *((__int16 *)a2 + 1);
    if (v35 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v35 + 1073741760;
    v22 = *((__int16 *)a2 + 2);
    if (v22 > 63)
      v22 += 1073741760;
    v23 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    if (v22 > 15)
      v22 += 1073741808;
    v23 = a2[3];
  }
  v24 = *(unsigned int **)(v9[7] + 208);
  if (*v24 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1988ED180);
  }
  if (v22 >= 0x40000000)
  {
    if ((v22 - 0x40000000) >= *(_DWORD *)(v12 + 172))
      goto LABEL_57;
    v25 = (JSC::JSObject **)(*(_QWORD *)(v12 + 160) + 8 * (v22 - 0x40000000));
  }
  else
  {
    v25 = (JSC::JSObject **)(a1 + 8 * v22);
  }
  v26 = *v25;
  v36 = v26;
  if ((unint64_t)v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
  }
  else
  {
    v27 = (unint64_t)v26 - 0x2000000000000;
    if (v27 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v36, v10, a3, a4, a5, a6, a7, a8, a9);
    else
      v28 = *(double *)&v27;
  }
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v29 = (int)v28, v28 == (double)(int)v29)
    && ((_DWORD)v29 || (*(_QWORD *)&v28 & 0x8000000000000000) == 0))
  {
    v30 = v29 | 0xFFFE000000000000;
  }
  else
  {
    v30 = *(_QWORD *)&v28 + 0x2000000000000;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v37, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v37, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v30;
  v31 = *((_WORD *)v24 + v23 + 2) | 0x200;
  *((_WORD *)v24 + v23 + 2) = v31;
  if (v30 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v30 >> 49)
    {
      v33 = 27;
    }
    else
    {
      if (v30)
        v32 = (v30 & 0xFFFE000000000002) == 0;
      else
        v32 = 0;
      if (v32 && *(_BYTE *)(v30 + 5) == 3)
        v33 = 32;
      else
        v33 = 4;
    }
    *((_WORD *)v24 + v23 + 2) = v33 | v31;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_to_numeric(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  __int16 v28;
  uint64_t v30;
  int v31;
  double v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  JSC::VM *v38;
  JSC::JSObject *v39;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v38 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988ED404);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
  }
  else if (v19 == 128)
  {
    v33 = *((__int16 *)a2 + 1);
    if (v33 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v33 + 1073741760;
    v22 = *((__int16 *)a2 + 2);
    if (v22 > 63)
      v22 += 1073741760;
    v23 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    if (v22 > 15)
      v22 += 1073741808;
    v23 = a2[3];
  }
  v24 = *(unsigned int **)(v9[7] + 208);
  if (*v24 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1988ED424);
  }
  if (v22 >= 0x40000000)
  {
    if ((v22 - 0x40000000) >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988ED4B4);
    }
    v25 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v22 - 0x40000000));
  }
  else
  {
    v25 = (unint64_t *)(a1 + 8 * v22);
  }
  v26 = *v25;
  if (!(*v25 >> 49))
  {
    v30 = *((_QWORD *)v10 + 7);
    if ((v26 & 0xFFFE000000000002) == 0)
    {
      v31 = *(unsigned __int8 *)(v26 + 5);
      if (v31 == 3)
        goto LABEL_18;
      if (v31 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v26, v10, a3, a4, a5, a6, a7, a8, a9);
LABEL_59:
        if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v34 = (int)v32, v32 == (double)(int)v34)
          && ((_DWORD)v34 || (*(_QWORD *)&v32 & 0x8000000000000000) == 0))
        {
          v26 = v34 | 0xFFFE000000000000;
        }
        else
        {
          v26 = *(_QWORD *)&v32 + 0x2000000000000;
        }
        goto LABEL_18;
      }
      v26 = JSC::JSCell::toPrimitive(v26, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    }
    v39 = (JSC::JSObject *)v26;
    if (*(_DWORD *)(v30 + 80))
    {
      v35 = *(_DWORD *)(v30 + 80);
      if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v30 + 16))
      {
LABEL_70:
        v26 = 0;
        goto LABEL_18;
      }
    }
    if (v26 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_18;
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      if (v26 >= 0xFFFE000000000000)
      {
        v32 = (double)(int)v26;
LABEL_58:
        if (!*(_DWORD *)(v30 + 80))
          goto LABEL_59;
        v37 = v32;
        v36 = *(_DWORD *)(v30 + 80);
        if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v32 = v37;
        if (!*(_QWORD *)(v30 + 16))
          goto LABEL_59;
        goto LABEL_70;
      }
    }
    else if (*(_BYTE *)(v26 + 5) == 3)
    {
      goto LABEL_18;
    }
    JSC::JSValue::toNumberSlowCase(&v39, v10, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_58;
  }
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v38, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v38, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v26;
  v27 = *((_WORD *)v24 + v23 + 2) | 0x200;
  *((_WORD *)v24 + v23 + 2) = v27;
  if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v26 >> 49)
    {
      v28 = 27;
    }
    else if (v26 && (v26 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v26 + 5) == 3)
    {
      v28 = 32;
    }
    else
    {
      v28 = 4;
    }
    *((_WORD *)v24 + v23 + 2) = v28 | v27;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_to_object(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 **v26;
  unint64_t v27;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::Exception *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  JSC::VM *v62;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v62 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x1988ED758);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
    v24 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v18 == 128)
    {
      v50 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v50 <= 63)
        v21 = *((__int16 *)a2 + 1);
      else
        v21 = v50 + 1073741760;
      v22 = *((__int16 *)a2 + 2);
      v23 = *((unsigned __int16 *)a2 + 3);
      v24 = *((unsigned __int16 *)a2 + 4);
      if (v22 <= 63)
        goto LABEL_12;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 <= 15)
        v21 = (char)a2[1];
      else
        v21 = v19 + 1073741808;
      v22 = (char)a2[2];
      v23 = a2[3];
      v24 = a2[4];
      if (v22 <= 15)
      {
LABEL_12:
        v25 = v24;
LABEL_13:
        v26 = (unsigned __int8 **)(a1 + 8 * v22);
        goto LABEL_14;
      }
    }
    v22 += v20;
  }
  v25 = v24;
  if (v22 < 0x40000000)
    goto LABEL_13;
  v51 = v22 - 0x40000000;
  if (v51 >= *(_DWORD *)(v11 + 172))
    goto LABEL_52;
  v26 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v51);
LABEL_14:
  v27 = (unint64_t)*v26;
  v61 = v27;
  if ((v27 & 0xFFFFFFFFFFFFFFF7) != 2)
    goto LABEL_15;
  v30 = *(unsigned int **)(*(_QWORD *)(v8 + 56) + 104);
  if (v30)
  {
    v31 = *v30;
    if (*v30 > v23)
    {
      v32 = &v30[2 * v23];
      goto LABEL_32;
    }
  }
  else
  {
    v31 = 0;
  }
  v33 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 72))(*(_QWORD *)(v8 + 120)) + 48);
  if (*v33 <= v23 - v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1988ED904);
  }
  v32 = &v33[2 * (v23 - v31)];
LABEL_32:
  v34 = (WTF::StringImpl *)*((_QWORD *)v32 + 1);
  if (!v34 || !*((_DWORD *)v34 + 1))
  {
LABEL_15:
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      v29 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v61, v9);
    }
    else
    {
      if (*(unsigned __int8 *)(v27 + 5) > 0x16u)
      {
LABEL_17:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v9, &v62, "CommonSlowPaths", v16);
        if (*((_QWORD *)v10 + 2))
          return &xmmword_1ECF4C7C0;
        *(_QWORD *)(a1 + 8 * v21) = v27;
        *(_QWORD *)(*(_QWORD *)(v8 + 136) - 16 * v25 - 16) = v27;
        return (__int128 *)v16;
      }
      v29 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v27, (JSC::SymbolObject **)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v27 = v29;
    goto LABEL_17;
  }
  *(_DWORD *)v34 += 2;
  v60 = v34;
  v35 = JSC::createTypeError((unint64_t)v9, &v60, a3);
  v41 = (JSC::Exception *)v35;
  if ((v35 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
  {
    v41 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
  }
  JSC::VM::throwException(v10, v9, v41);
  v49 = v60;
  v60 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  return &xmmword_1ECF4C7C0;
}

void slow_path_add(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 40) = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 80);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 12) + *(_QWORD *)v3;
  if (v4 > (unint64_t)a2 || v5 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EE54CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v4) & 0x3FFFFFFF;
  v7 = *a2;
  if (v7 == 128)
  {
    v8 = 1073741760;
    v9 = *((__int16 *)a2 + 2);
    v10 = *((__int16 *)a2 + 3);
    if (v10 > 63)
      v10 += 1073741760;
    if (v9 <= 63)
    {
LABEL_11:
      if (v10 < 0x40000000 || (v10 - 0x40000000) < *(_DWORD *)(v2 + 172))
      {
        v11 = *a2;
        if ((v7 | 2) == 0x82)
          v11 = a2[1];
        __asm { BR              X11 }
      }
      __break(0xC471u);
      JUMPOUT(0x1988EE80CLL);
    }
  }
  else
  {
    if (v7 == 130)
    {
      v12 = *(_DWORD *)(a2 + 6);
      v10 = *(_DWORD *)(a2 + 10);
      goto LABEL_21;
    }
    v8 = 1073741808;
    v9 = (char)a2[2];
    v10 = (char)a2[3];
    if (v10 > 15)
      v10 += 1073741808;
    if (v9 <= 15)
      goto LABEL_11;
  }
  v12 = v9 + v8;
LABEL_21:
  if (v12 >= 0x40000000 && (v12 - 0x40000000) >= (unint64_t)*(unsigned int *)(v2 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988EE814);
  }
  goto LABEL_11;
}

__int16 *JSC::updateArithProfileForBinaryArithOp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  __int16 *result;
  BOOL v9;
  __int16 v10;
  double v11;
  __int16 v12;

  result = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC(a1, a2);
  if (!((unint64_t)a3 >> 49))
  {
    if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 3)
      v12 = *result | 0x20;
    else
      v12 = *result | 4;
    goto LABEL_16;
  }
  if ((unint64_t)a3 > 0xFFFDFFFFFFFFFFFFLL)
    return result;
  v9 = a5 > 0xFFFDFFFFFFFFFFFFLL && a4 > 0xFFFDFFFFFFFFFFFFLL;
  v10 = *result;
  if (v9)
    v10 |= 8u;
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 <= 0x1FFFFFFFFFFFFLL && v11 == 0.0)
  {
    v12 = v10 | 2;
    goto LABEL_16;
  }
  *result = v10 | 1;
  if ((uint64_t)fabs(v11) >= 0x8000000000000)
  {
    v12 = v10 | 0x11;
LABEL_16:
    *result = v12;
  }
  return result;
}

__int128 *slow_path_mul(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  JSC::VM *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  __int16 *v39;
  unsigned int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  JSC::VM *v47;
  int v48;
  double v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  double v54;
  JSC::JSGlobalObject *v55;
  uint64_t v56;
  JSC::JSGlobalObject *v57;
  uint64_t v58;
  BOOL v59;
  JSC::JSGlobalObject *v60;
  uint64_t v61;
  JSC::JSGlobalObject *v62;
  BOOL v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  JSC::JSGlobalObject *v66;
  BOOL v67;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v69;
  BOOL v70;
  JSC::JSGlobalObject *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  JSC::JSGlobalObject *v75;
  JSC::JSGlobalObject *v76;
  JSC::JSGlobalObject *v77;
  JSC::VM *v78;
  JSC::VM *v79;
  JSC::VM *v80;
  JSC::VM *v81;
  JSC::VM *v82;
  JSC::VM *v83;
  JSC::VM *v84;
  JSC::JSObject *v85;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v83 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EEF0CLL);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v51 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v51 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v51 + 1073741760;
    v23 = *((__int16 *)a2 + 2);
    v24 = *((__int16 *)a2 + 3);
    if (v24 > 63)
      v24 += 1073741760;
    if (v23 <= 63)
      goto LABEL_14;
LABEL_80:
    v52 = v23 + v21;
    goto LABEL_81;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    v24 = (char)a2[3];
    if (v24 > 15)
      v24 += 1073741808;
    if (v23 <= 15)
    {
LABEL_14:
      v25 = v23;
LABEL_15:
      v26 = (unint64_t *)(a1 + 8 * v25);
      goto LABEL_16;
    }
    goto LABEL_80;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v52 = *(_DWORD *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 10);
LABEL_81:
  v25 = v52;
  if (v52 < 0x40000000)
    goto LABEL_15;
  v53 = (v52 - 0x40000000);
  if (v53 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988EF064);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v53);
LABEL_16:
  v27 = *v26;
  if (v24 >= 0x40000000)
  {
    v41 = v24 - 0x40000000;
    if (v41 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988EF05CLL);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v41);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v24);
  }
  v29 = *v28;
  v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v84 = v30;
  if (v27 >> 49)
    goto LABEL_19;
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v31 = v27;
LABEL_85:
    v85 = (JSC::JSObject *)v31;
    if (*((_DWORD *)v30 + 20))
    {
      v77 = v10;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v77;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_131;
    }
    if (v31 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_20;
    if ((v31 & 0xFFFE000000000002) != 0)
    {
      if (v31 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v31;
LABEL_101:
        if (!*((_DWORD *)v30 + 20)
          || (v81 = (JSC::VM *)a9.i64[0],
              v69 = v10,
              v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8),
              v10 = v69,
              a9.i64[0] = (uint64_t)v81,
              !v70))
        {
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v56 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v56)
            && ((_DWORD)v56 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v31 = v56 | 0xFFFE000000000000;
          }
          else
          {
            v31 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_20;
        }
LABEL_131:
        v31 = 0;
        goto LABEL_20;
      }
    }
    else if (*(_BYTE *)(v31 + 5) == 3)
    {
      goto LABEL_20;
    }
    v55 = v10;
    JSC::JSValue::toNumberSlowCase(&v85, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v10 = v55;
    goto LABEL_101;
  }
  v45 = *(unsigned __int8 *)(v27 + 5);
  if (v45 == 3)
  {
LABEL_19:
    v31 = v27;
    goto LABEL_20;
  }
  v75 = v10;
  if (v45 != 2)
  {
    v73 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v75;
    v31 = v73;
    goto LABEL_85;
  }
  JSC::JSString::toNumber((JSC::JSString *)v27, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v46 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v46)
    && ((_DWORD)v46 || (a9.i64[0] & 0x8000000000000000) == 0))
  {
    v31 = v46 | 0xFFFE000000000000;
  }
  else
  {
    v31 = a9.i64[0] + 0x2000000000000;
  }
  v10 = v75;
LABEL_20:
  if (*((_DWORD *)v30 + 20))
  {
    v62 = v10;
    v63 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v62;
    if (v63)
      goto LABEL_127;
  }
  if (v29 >> 49)
    goto LABEL_22;
  v47 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) != 0)
  {
    v32 = v29;
  }
  else
  {
    v48 = *(unsigned __int8 *)(v29 + 5);
    if (v48 == 3)
    {
LABEL_22:
      v32 = v29;
      goto LABEL_23;
    }
    v76 = v10;
    v78 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (v48 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v29, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v50 = (int)v49, v49 == (double)(int)v50)
        && ((_DWORD)v50 || (*(_QWORD *)&v49 & 0x8000000000000000) == 0))
      {
        v32 = v50 | 0xFFFE000000000000;
      }
      else
      {
        v32 = *(_QWORD *)&v49 + 0x2000000000000;
      }
      goto LABEL_134;
    }
    v74 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v76;
    v32 = v74;
    v47 = v78;
  }
  v85 = (JSC::JSObject *)v32;
  if (*((_DWORD *)v47 + 20))
  {
    v76 = v10;
    v80 = v47;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v32 = 0;
LABEL_134:
      v10 = v76;
      goto LABEL_23;
    }
    v32 = (unint64_t)v85;
    v10 = v76;
    v47 = v80;
  }
  if (v32 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_23;
  if ((v32 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v32 + 5) == 3)
      goto LABEL_23;
    goto LABEL_107;
  }
  if (v32 < 0xFFFE000000000000)
  {
LABEL_107:
    v79 = v47;
    v57 = v10;
    JSC::JSValue::toNumberSlowCase(&v85, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v47 = v79;
    v10 = v57;
    goto LABEL_108;
  }
  v54 = (double)(int)v32;
LABEL_108:
  if (*((_DWORD *)v47 + 20)
    && (v82 = *(JSC::VM **)&v54,
        v71 = v10,
        v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8),
        v10 = v71,
        v54 = *(double *)&v82,
        v72))
  {
    v32 = 0;
  }
  else if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v58 = (int)v54, v54 == (double)(int)v58)
         && ((_DWORD)v58 || (*(_QWORD *)&v54 & 0x8000000000000000) == 0))
  {
    v32 = v58 | 0xFFFE000000000000;
  }
  else
  {
    v32 = *(_QWORD *)&v54 + 0x2000000000000;
  }
LABEL_23:
  if (*((_DWORD *)v30 + 20))
  {
    v65 = v30;
    v66 = v10;
    v67 = JSC::VM::hasExceptionsAfterHandlingTraps(v65, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v66;
    if (v67)
    {
LABEL_127:
      v38 = 0;
      goto LABEL_37;
    }
  }
  if (v31 >> 49)
    v33 = v32 >> 49 == 0;
  else
    v33 = 1;
  if (v33)
  {
    if ((v31 & 0xFFFE000000000002) == 0
      && (*(_BYTE *)(v31 + 5) == 3 ? (v59 = (v32 & 0xFFFE000000000002) == 0) : (v59 = 0),
          v59 && *(_BYTE *)(v32 + 5) == 3))
    {
      v60 = v10;
      v61 = JSC::JSBigInt::multiply(v10, (JSC::JSGlobalObject *)v31, (JSC::JSBigInt *)v32, a4);
    }
    else
    {
      v60 = v10;
      v61 = JSC::throwTypeError((unint64_t)v10, &v84, (uint64_t)"Invalid mix of BigInt and other type in multiplication.", 56);
    }
    v10 = v60;
    v38 = v61;
  }
  else
  {
    v34 = (double)(int)v31;
    if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v34 = v31 - 0x2000000000000;
    v35 = (double)(int)v32;
    if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v35 = v32 - 0x2000000000000;
    v36 = v34 * v35;
    if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v37 = (int)v36, v36 == (double)(int)v37)
      && ((_DWORD)v37 || (*(_QWORD *)&v36 & 0x8000000000000000) == 0))
    {
      v38 = v37 | 0xFFFE000000000000;
    }
    else
    {
      v38 = *(_QWORD *)&v36 + 0x2000000000000;
    }
  }
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
  {
    v64 = v10;
    JSC::doExceptionFuzzing((unint64_t)v10, &v83, "CommonSlowPaths", v17);
    v10 = v64;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v83, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v22) = v38;
  v39 = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC(v9, (unsigned __int8 *)v17);
  if (!(v38 >> 49))
  {
    if ((v38 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v38 + 5) == 3)
      v44 = *v39 | 0x20;
    else
      v44 = *v39 | 4;
    goto LABEL_57;
  }
  if (v38 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v42 = *v39;
    if (v27 >= 0xFFFE000000000000 && v29 >= 0xFFFE000000000000)
    {
      v42 |= 8u;
      *v39 = v42;
    }
    *(_QWORD *)&v43 = v38 - 0x2000000000000;
    if ((uint64_t)v38 <= 0x1FFFFFFFFFFFFLL && v43 == 0.0)
    {
      v44 = v42 | 2;
    }
    else
    {
      *v39 = v42 | 1;
      if ((uint64_t)fabs(v43) < 0x8000000000000)
        return (__int128 *)v17;
      v44 = v42 | 0x11;
    }
LABEL_57:
    *v39 = v44;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_sub(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  JSC::VM *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  __int16 *v39;
  unsigned int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  JSC::VM *v47;
  int v48;
  double v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  double v54;
  JSC::JSGlobalObject *v55;
  uint64_t v56;
  JSC::JSGlobalObject *v57;
  uint64_t v58;
  JSC::JSGlobalObject *v59;
  BOOL v60;
  JSC::JSGlobalObject *v61;
  JSC::VM *v62;
  JSC::JSGlobalObject *v63;
  BOOL v64;
  JSC::JSGlobalObject *v65;
  BOOL v66;
  uint64_t v67;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v69;
  BOOL v70;
  JSC::JSGlobalObject *v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  JSC::JSGlobalObject *v75;
  JSC::JSGlobalObject *v76;
  JSC::JSGlobalObject *v77;
  JSC::VM *v78;
  JSC::VM *v79;
  JSC::VM *v80;
  JSC::VM *v81;
  JSC::VM *v82;
  JSC::VM *v83;
  JSC::VM *v84;
  JSC::JSObject *v85;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v83 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988EF650);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v51 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v51 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v51 + 1073741760;
    v23 = *((__int16 *)a2 + 2);
    v24 = *((__int16 *)a2 + 3);
    if (v24 > 63)
      v24 += 1073741760;
    if (v23 <= 63)
      goto LABEL_14;
LABEL_80:
    v52 = v23 + v21;
    goto LABEL_81;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    v24 = (char)a2[3];
    if (v24 > 15)
      v24 += 1073741808;
    if (v23 <= 15)
    {
LABEL_14:
      v25 = v23;
LABEL_15:
      v26 = (unint64_t *)(a1 + 8 * v25);
      goto LABEL_16;
    }
    goto LABEL_80;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v52 = *(_DWORD *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 10);
LABEL_81:
  v25 = v52;
  if (v52 < 0x40000000)
    goto LABEL_15;
  v53 = (v52 - 0x40000000);
  if (v53 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988EF7F0);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v53);
LABEL_16:
  v27 = *v26;
  if (v24 >= 0x40000000)
  {
    v41 = v24 - 0x40000000;
    if (v41 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988EF7E8);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v41);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v24);
  }
  v29 = *v28;
  v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v84 = v30;
  if (v27 >> 49)
    goto LABEL_19;
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v31 = v27;
LABEL_85:
    v85 = (JSC::JSObject *)v31;
    if (*((_DWORD *)v30 + 20))
    {
      v77 = v10;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v77;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_131;
    }
    if (v31 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_20;
    if ((v31 & 0xFFFE000000000002) != 0)
    {
      if (v31 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v31;
LABEL_101:
        if (!*((_DWORD *)v30 + 20)
          || (v81 = (JSC::VM *)a9.i64[0],
              v69 = v10,
              v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8),
              v10 = v69,
              a9.i64[0] = (uint64_t)v81,
              !v70))
        {
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v56 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v56)
            && ((_DWORD)v56 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v31 = v56 | 0xFFFE000000000000;
          }
          else
          {
            v31 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_20;
        }
LABEL_131:
        v31 = 0;
        goto LABEL_20;
      }
    }
    else if (*(_BYTE *)(v31 + 5) == 3)
    {
      goto LABEL_20;
    }
    v55 = v10;
    JSC::JSValue::toNumberSlowCase(&v85, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v10 = v55;
    goto LABEL_101;
  }
  v45 = *(unsigned __int8 *)(v27 + 5);
  if (v45 == 3)
  {
LABEL_19:
    v31 = v27;
    goto LABEL_20;
  }
  v75 = v10;
  if (v45 != 2)
  {
    v73 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v75;
    v31 = v73;
    goto LABEL_85;
  }
  JSC::JSString::toNumber((JSC::JSString *)v27, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v46 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v46)
    && ((_DWORD)v46 || (a9.i64[0] & 0x8000000000000000) == 0))
  {
    v31 = v46 | 0xFFFE000000000000;
  }
  else
  {
    v31 = a9.i64[0] + 0x2000000000000;
  }
  v10 = v75;
LABEL_20:
  if (*((_DWORD *)v30 + 20))
  {
    v59 = v10;
    v60 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v59;
    if (v60)
      goto LABEL_120;
  }
  if (v29 >> 49)
    goto LABEL_22;
  v47 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) != 0)
  {
    v32 = v29;
  }
  else
  {
    v48 = *(unsigned __int8 *)(v29 + 5);
    if (v48 == 3)
    {
LABEL_22:
      v32 = v29;
      goto LABEL_23;
    }
    v76 = v10;
    v78 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (v48 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v29, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v50 = (int)v49, v49 == (double)(int)v50)
        && ((_DWORD)v50 || (*(_QWORD *)&v49 & 0x8000000000000000) == 0))
      {
        v32 = v50 | 0xFFFE000000000000;
      }
      else
      {
        v32 = *(_QWORD *)&v49 + 0x2000000000000;
      }
      goto LABEL_134;
    }
    v74 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v76;
    v32 = v74;
    v47 = v78;
  }
  v85 = (JSC::JSObject *)v32;
  if (*((_DWORD *)v47 + 20))
  {
    v76 = v10;
    v80 = v47;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v32 = 0;
LABEL_134:
      v10 = v76;
      goto LABEL_23;
    }
    v32 = (unint64_t)v85;
    v10 = v76;
    v47 = v80;
  }
  if (v32 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_23;
  if ((v32 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v32 + 5) == 3)
      goto LABEL_23;
    goto LABEL_107;
  }
  if (v32 < 0xFFFE000000000000)
  {
LABEL_107:
    v79 = v47;
    v57 = v10;
    JSC::JSValue::toNumberSlowCase(&v85, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v47 = v79;
    v10 = v57;
    goto LABEL_108;
  }
  v54 = (double)(int)v32;
LABEL_108:
  if (*((_DWORD *)v47 + 20)
    && (v82 = *(JSC::VM **)&v54,
        v71 = v10,
        v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8),
        v10 = v71,
        v54 = *(double *)&v82,
        v72))
  {
    v32 = 0;
  }
  else if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v58 = (int)v54, v54 == (double)(int)v58)
         && ((_DWORD)v58 || (*(_QWORD *)&v54 & 0x8000000000000000) == 0))
  {
    v32 = v58 | 0xFFFE000000000000;
  }
  else
  {
    v32 = *(_QWORD *)&v54 + 0x2000000000000;
  }
LABEL_23:
  if (*((_DWORD *)v30 + 20))
  {
    v62 = v30;
    v63 = v10;
    v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v63;
    if (v64)
    {
LABEL_120:
      v38 = 0;
      goto LABEL_37;
    }
  }
  if (v31 >> 49)
    v33 = v32 >> 49 == 0;
  else
    v33 = 1;
  if (v33)
  {
    v65 = v10;
    if ((v31 & 0xFFFE000000000002) == 0
      && (*(_BYTE *)(v31 + 5) == 3 ? (v66 = (v32 & 0xFFFE000000000002) == 0) : (v66 = 0),
          v66 && *(_BYTE *)(v32 + 5) == 3))
    {
      v67 = JSC::JSBigInt::sub(v10, (JSC::JSGlobalObject *)v31, (JSC::JSBigInt *)v32, a4);
    }
    else
    {
      v67 = JSC::throwTypeError((unint64_t)v10, &v84, (uint64_t)"Invalid mix of BigInt and other type in subtraction.", 53);
    }
    v10 = v65;
    v38 = v67;
  }
  else
  {
    v34 = (double)(int)v31;
    if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v34 = v31 - 0x2000000000000;
    v35 = (double)(int)v32;
    if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v35 = v32 - 0x2000000000000;
    v36 = v34 - v35;
    if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v37 = (int)v36, v36 == (double)(int)v37)
      && ((_DWORD)v37 || (*(_QWORD *)&v36 & 0x8000000000000000) == 0))
    {
      v38 = v37 | 0xFFFE000000000000;
    }
    else
    {
      v38 = *(_QWORD *)&v36 + 0x2000000000000;
    }
  }
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
  {
    v61 = v10;
    JSC::doExceptionFuzzing((unint64_t)v10, &v83, "CommonSlowPaths", v17);
    v10 = v61;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v83, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v22) = v38;
  v39 = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC(v9, (unsigned __int8 *)v17);
  if (!(v38 >> 49))
  {
    if ((v38 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v38 + 5) == 3)
      v44 = *v39 | 0x20;
    else
      v44 = *v39 | 4;
    goto LABEL_57;
  }
  if (v38 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v42 = *v39;
    if (v27 >= 0xFFFE000000000000 && v29 >= 0xFFFE000000000000)
    {
      v42 |= 8u;
      *v39 = v42;
    }
    *(_QWORD *)&v43 = v38 - 0x2000000000000;
    if ((uint64_t)v38 <= 0x1FFFFFFFFFFFFLL && v43 == 0.0)
    {
      v44 = v42 | 2;
    }
    else
    {
      *v39 = v42 | 1;
      if ((uint64_t)fabs(v43) < 0x8000000000000)
        return (__int128 *)v17;
      v44 = v42 | 0x11;
    }
LABEL_57:
    *v39 = v44;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_div(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int *v42;
  __int16 *v43;
  unsigned int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  int v49;
  JSC::VM *v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v63;
  JSC::VM *v64;
  JSC::VM *v65;
  JSC::VM *v66;
  JSC::VM *v67;
  JSC::VM *v68;
  JSC::VM *v69;
  JSC::VM *v70;
  JSC::VM *v71;
  JSC::JSObject *v72;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v70 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F0070);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v57 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v57 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v57 + 1073741760;
    v23 = *((__int16 *)a2 + 2);
    v24 = *((__int16 *)a2 + 3);
    if (v24 > 63)
      v24 += 1073741760;
    if (v23 <= 63)
      goto LABEL_14;
LABEL_160:
    v58 = v23 + v21;
    goto LABEL_161;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    v24 = (char)a2[3];
    if (v24 > 15)
      v24 += 1073741808;
    if (v23 <= 15)
    {
LABEL_14:
      v25 = v23;
LABEL_15:
      v26 = (unint64_t *)(a1 + 8 * v25);
      goto LABEL_16;
    }
    goto LABEL_160;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v58 = *(_DWORD *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 10);
LABEL_161:
  v25 = v58;
  if (v58 < 0x40000000)
    goto LABEL_15;
  v59 = (v58 - 0x40000000);
  if (v59 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988F0248);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v59);
LABEL_16:
  v27 = *v26;
  if (v24 >= 0x40000000)
  {
    v45 = v24 - 0x40000000;
    if (v45 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F0240);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v24);
  }
  v29 = *v28;
  v30 = *((_QWORD *)v10 + 7);
  v71 = (JSC::VM *)v30;
  if (v27 >> 49)
    goto LABEL_19;
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v31 = v27;
    goto LABEL_95;
  }
  v49 = *(unsigned __int8 *)(v27 + 5);
  if (v49 != 3)
  {
    if (v49 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v27, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_130;
    }
    v31 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_95:
    v72 = (JSC::JSObject *)v31;
    if (*(_DWORD *)(v30 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_184;
    }
    if (v31 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_20;
    if ((v31 & 0xFFFE000000000002) != 0)
    {
      if (v31 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v31;
LABEL_129:
        if (!*(_DWORD *)(v30 + 80)
          || (v67 = (JSC::VM *)a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = (uint64_t)v67, !hasExceptionsAfterHandlingTraps))
        {
LABEL_130:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v53 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v53)
            && ((_DWORD)v53 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v31 = v53 | 0xFFFE000000000000;
          }
          else
          {
            v31 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_20;
        }
LABEL_184:
        v31 = 0;
        goto LABEL_20;
      }
    }
    else if (*(_BYTE *)(v31 + 5) == 3)
    {
      goto LABEL_20;
    }
    JSC::JSValue::toNumberSlowCase(&v72, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_129;
  }
LABEL_19:
  v31 = v27;
LABEL_20:
  if (*(_DWORD *)(v30 + 80))
  {
    v60 = *(_DWORD *)(v30 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v30 + 16))
      goto LABEL_174;
  }
  if (v29 >> 49)
    goto LABEL_22;
  v50 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) != 0)
  {
    v32 = v29;
    goto LABEL_101;
  }
  v51 = *(unsigned __int8 *)(v29 + 5);
  if (v51 != 3)
  {
    v64 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (v51 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v29, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_137;
    }
    v32 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v50 = v64;
LABEL_101:
    v72 = (JSC::JSObject *)v32;
    if (*((_DWORD *)v50 + 20))
    {
      v66 = v50;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v50, (uint64_t)a2, v32, (uint64_t)a4, a5, a6, a7, a8))
        goto LABEL_186;
      v32 = (unint64_t)v72;
      v50 = v66;
    }
    if (v32 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_23;
    if ((v32 & 0xFFFE000000000002) != 0)
    {
      if (v32 >= 0xFFFE000000000000)
      {
        v52 = (double)(int)v32;
LABEL_136:
        if (!*((_DWORD *)v50 + 20)
          || (v68 = *(JSC::VM **)&v52,
              v63 = JSC::VM::hasExceptionsAfterHandlingTraps(v50, (uint64_t)a2, v32, (uint64_t)a4, a5, a6, a7, a8),
              v52 = *(double *)&v68,
              !v63))
        {
LABEL_137:
          if ((*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v54 = (int)v52, v52 == (double)(int)v54)
            && ((_DWORD)v54 || (*(_QWORD *)&v52 & 0x8000000000000000) == 0))
          {
            v32 = v54 | 0xFFFE000000000000;
          }
          else
          {
            v32 = *(_QWORD *)&v52 + 0x2000000000000;
          }
          goto LABEL_23;
        }
LABEL_186:
        v32 = 0;
        goto LABEL_23;
      }
    }
    else if (*(_BYTE *)(v32 + 5) == 3)
    {
      goto LABEL_23;
    }
    v65 = v50;
    JSC::JSValue::toNumberSlowCase(&v72, v10, v32, (uint64_t)a4, a5, a6, a7, a8, a9);
    v50 = v65;
    goto LABEL_136;
  }
LABEL_22:
  v32 = v29;
LABEL_23:
  if (*(_DWORD *)(v30 + 80))
  {
    v61 = *(_DWORD *)(v30 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
    {
      v69 = (JSC::VM *)v32;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, v32, (uint64_t)a4, a5, a6, a7, a8);
      v32 = (unint64_t)v69;
    }
    if (*(_QWORD *)(v30 + 16))
    {
LABEL_174:
      v38 = 0;
      goto LABEL_37;
    }
  }
  if (v31 >> 49)
    v33 = v32 >> 49 == 0;
  else
    v33 = 1;
  if (v33)
  {
    if ((v31 & 0xFFFE000000000002) == 0
      && (*(_BYTE *)(v31 + 5) == 3 ? (v55 = (v32 & 0xFFFE000000000002) == 0) : (v55 = 0),
          v55 && *(_BYTE *)(v32 + 5) == 3))
    {
      v56 = JSC::JSBigInt::divide(v10, (JSC::JSGlobalObject *)v31, (JSC::JSBigInt *)v32, a4);
    }
    else
    {
      v56 = JSC::throwTypeError((unint64_t)v10, &v71, (uint64_t)"Invalid mix of BigInt and other type in division.", 50);
    }
    v38 = v56;
  }
  else
  {
    v34 = (double)(int)v31;
    if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v34 = v31 - 0x2000000000000;
    v35 = (double)(int)v32;
    if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v35 = v32 - 0x2000000000000;
    v36 = v34 / v35;
    if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v37 = (int)v36, v36 == (double)(int)v37)
      && ((_DWORD)v37 || (*(_QWORD *)&v36 & 0x8000000000000000) == 0))
    {
      v38 = v37 | 0xFFFE000000000000;
    }
    else
    {
      v38 = *(_QWORD *)&v36 + 0x2000000000000;
    }
  }
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v70, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v70, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v22) = v38;
  v39 = *v17;
  v40 = v39;
  if ((v39 | 2) == 0x82)
    v40 = v17[1];
  switch(v40)
  {
    case 157:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFAF8);
      }
      goto LABEL_48;
    case 158:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFE50);
      }
      goto LABEL_48;
    case 159:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFB88);
      }
      goto LABEL_48;
    case 160:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F0050);
      }
      goto LABEL_48;
    case 161:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F0128);
      }
      goto LABEL_48;
    case 162:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFB40);
      }
      goto LABEL_48;
    case 163:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFCF8);
      }
      goto LABEL_48;
    case 164:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFDB8);
      }
      goto LABEL_48;
    case 165:
      if (v39 == 128)
      {
        v41 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v39 == 130)
      {
        v41 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v41 = v17[4];
      }
      v42 = *(unsigned int **)(v9[7] + 200);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x1988EFE00);
      }
LABEL_48:
      v43 = (__int16 *)v42 + v41 + 2;
      break;
    default:
      v43 = 0;
      break;
  }
  if (!(v38 >> 49))
  {
    if ((v38 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v38 + 5) == 3)
      v48 = *v43 | 0x20;
    else
      v48 = *v43 | 4;
    goto LABEL_80;
  }
  if (v38 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v46 = *v43;
    if (v27 >= 0xFFFE000000000000 && v29 >= 0xFFFE000000000000)
    {
      v46 |= 8u;
      *v43 = v46;
    }
    *(_QWORD *)&v47 = v38 - 0x2000000000000;
    if ((uint64_t)v38 <= 0x1FFFFFFFFFFFFLL && v47 == 0.0)
    {
      v48 = v46 | 2;
    }
    else
    {
      *v43 = v46 | 1;
      if ((uint64_t)fabs(v47) < 0x8000000000000)
        return (__int128 *)v17;
      v48 = v46 | 0x11;
    }
LABEL_80:
    *v43 = v48;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_mod(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v38;
  int v39;
  JSC::VM *v40;
  int v41;
  double v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  double v54;
  JSC::VM *v55;
  JSC::VM *v56;
  JSC::JSObject *v57;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v55 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F05A4);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_71:
    v47 = v22 + v21;
    goto LABEL_72;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_71;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v47 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_72:
  v22 = v47;
  v24 = v20;
  v25 = v23;
  if (v47 < 0x40000000)
    goto LABEL_14;
  v48 = (v47 - 0x40000000);
  if (v48 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988F06E0);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v48);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v38 = (v25 - 0x40000000);
    if (v38 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F06D8);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v38);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
  }
  v29 = *v28;
  v30 = *((_QWORD *)v10 + 7);
  v56 = (JSC::VM *)v30;
  if (!(v27 >> 49))
  {
    if ((v27 & 0xFFFE000000000002) == 0)
    {
      v39 = *(unsigned __int8 *)(v27 + 5);
      if (v39 == 3)
        goto LABEL_18;
      if (v39 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v27, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_90;
      }
      v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    v57 = (JSC::JSObject *)v27;
    if (*(_DWORD *)(v30 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_97:
      v27 = 0;
      goto LABEL_18;
    }
    if (v27 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_18;
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      if (v27 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v27;
LABEL_89:
        if (!*(_DWORD *)(v30 + 80)
          || (v53 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v53, !hasExceptionsAfterHandlingTraps))
        {
LABEL_90:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v49 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v49)
            && ((_DWORD)v49 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v27 = v49 | 0xFFFE000000000000;
          }
          else
          {
            v27 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_18;
        }
        goto LABEL_97;
      }
    }
    else if (*(_BYTE *)(v27 + 5) == 3)
    {
      goto LABEL_18;
    }
    JSC::JSValue::toNumberSlowCase(&v57, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_89;
  }
LABEL_18:
  if (*(_DWORD *)(v30 + 80))
  {
    v45 = *(_DWORD *)(v30 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v30 + 16))
      goto LABEL_63;
  }
  if (v29 >> 49)
    goto LABEL_20;
  v40 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    v41 = *(unsigned __int8 *)(v29 + 5);
    if (v41 == 3)
      goto LABEL_20;
    if (v41 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v29, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_110;
    }
    v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  v57 = (JSC::JSObject *)v29;
  if (*((_DWORD *)v40 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_117:
      v29 = 0;
      goto LABEL_20;
    }
    v29 = (unint64_t)v57;
  }
  if (v29 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v29 & 0xFFFE000000000002) != 0)
    {
      if (v29 >= 0xFFFE000000000000)
      {
        v42 = (double)(int)v29;
LABEL_109:
        if (!*((_DWORD *)v40 + 20)
          || (v54 = v42,
              v52 = JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8),
              v42 = v54,
              !v52))
        {
LABEL_110:
          if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v51 = (int)v42, v42 == (double)(int)v51)
            && ((_DWORD)v51 || (*(_QWORD *)&v42 & 0x8000000000000000) == 0))
          {
            v29 = v51 | 0xFFFE000000000000;
          }
          else
          {
            v29 = *(_QWORD *)&v42 + 0x2000000000000;
          }
          goto LABEL_20;
        }
        goto LABEL_117;
      }
LABEL_108:
      JSC::JSValue::toNumberSlowCase(&v57, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_109;
    }
    if (*(_BYTE *)(v29 + 5) != 3)
      goto LABEL_108;
  }
LABEL_20:
  if (*(_DWORD *)(v30 + 80))
  {
    v46 = *(_DWORD *)(v30 + 80);
    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v30 + 16))
    {
LABEL_63:
      v36 = 0;
      goto LABEL_34;
    }
  }
  if (v27 >> 49)
    v31 = v29 >> 49 == 0;
  else
    v31 = 1;
  if (v31)
  {
    if ((v27 & 0xFFFE000000000002) == 0
      && (*(_BYTE *)(v27 + 5) == 3 ? (v43 = (v29 & 0xFFFE000000000002) == 0) : (v43 = 0),
          v43 && *(_BYTE *)(v29 + 5) == 3))
    {
      v44 = JSC::JSBigInt::remainder(v10, (JSC::JSGlobalObject *)v27, (JSC::JSBigInt *)v29, a4);
    }
    else
    {
      v44 = JSC::throwTypeError((unint64_t)v10, &v56, (uint64_t)"Invalid mix of BigInt and other type in remainder.", 51);
    }
    v36 = v44;
  }
  else
  {
    v32 = (double)(int)v27;
    if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v32 = v27 - 0x2000000000000;
    v33 = (double)(int)v29;
    if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v33 = v29 - 0x2000000000000;
    v34 = fmod(v32, v33);
    if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v35 = (int)v34, v34 == (double)(int)v35)
      && ((_DWORD)v35 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
    {
      v36 = v35 | 0xFFFE000000000000;
    }
    else
    {
      v36 = *(_QWORD *)&v34 + 0x2000000000000;
    }
  }
LABEL_34:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v55, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v55, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v24) = v36;
  return (__int128 *)v17;
}

__int128 *slow_path_pow(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  JSC::VM *v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unsigned int v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  double v43;
  BOOL v44;
  unint64_t v45;
  int v46;
  JSC::VM *v47;
  int v48;
  double v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  double v59;
  JSC::VM *v60;
  JSC::VM *v61;
  JSC::JSObject *v62;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v60 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F0D08);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v52 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v19 == 128)
    {
      v20 = *((__int16 *)a2 + 1);
      v21 = 1073741760;
      if (v20 > 63)
        v20 += 1073741760;
      v22 = *((__int16 *)a2 + 2);
      v23 = *((__int16 *)a2 + 3);
      if (v23 > 63)
        v23 += 1073741760;
      if (v22 <= 63)
        goto LABEL_13;
    }
    else
    {
      v20 = (char)a2[1];
      v21 = 1073741808;
      if (v20 > 15)
        v20 += 1073741808;
      v22 = (char)a2[2];
      v23 = (char)a2[3];
      if (v23 > 15)
        v23 += 1073741808;
      if (v22 <= 15)
      {
LABEL_13:
        v24 = v20;
        v25 = v23;
LABEL_14:
        v26 = (unint64_t *)(a1 + 8 * v22);
        goto LABEL_15;
      }
    }
    v52 = v22 + v21;
  }
  v22 = v52;
  v24 = v20;
  v25 = v23;
  if (v52 < 0x40000000)
    goto LABEL_14;
  v53 = (v52 - 0x40000000);
  if (v53 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988F0DB4);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v53);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v45 = (v25 - 0x40000000);
    if (v45 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F0DACLL);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
  }
  v29 = *v28;
  v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v61 = v30;
  if (!(v27 >> 49))
  {
    if ((v27 & 0xFFFE000000000002) == 0)
    {
      v46 = *(unsigned __int8 *)(v27 + 5);
      if (v46 == 3)
        goto LABEL_18;
      if (v46 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v27, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_114;
      }
      v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    v62 = (JSC::JSObject *)v27;
    if (*((_DWORD *)v30 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_121:
      v27 = 0;
      goto LABEL_18;
    }
    if (v27 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_18;
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      if (v27 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v27;
LABEL_113:
        if (!*((_DWORD *)v30 + 20)
          || (v58 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8), a9.i64[0] = v58, !hasExceptionsAfterHandlingTraps))
        {
LABEL_114:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v54 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v54)
            && ((_DWORD)v54 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v27 = v54 | 0xFFFE000000000000;
          }
          else
          {
            v27 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_18;
        }
        goto LABEL_121;
      }
    }
    else if (*(_BYTE *)(v27 + 5) == 3)
    {
      goto LABEL_18;
    }
    JSC::JSValue::toNumberSlowCase(&v62, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_113;
  }
LABEL_18:
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_93;
  }
  if (v29 >> 49)
    goto LABEL_20;
  v47 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    v48 = *(unsigned __int8 *)(v29 + 5);
    if (v48 == 3)
      goto LABEL_20;
    if (v48 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v29, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_134;
    }
    v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  }
  v62 = (JSC::JSObject *)v29;
  if (*((_DWORD *)v47 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_141:
      v29 = 0;
      goto LABEL_20;
    }
    v29 = (unint64_t)v62;
  }
  if (v29 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_20;
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) == 3)
      goto LABEL_20;
    goto LABEL_132;
  }
  if (v29 < 0xFFFE000000000000)
  {
LABEL_132:
    JSC::JSValue::toNumberSlowCase(&v62, v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_133;
  }
  v49 = (double)(int)v29;
LABEL_133:
  if (*((_DWORD *)v47 + 20))
  {
    v59 = v49;
    v57 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v49 = v59;
    if (v57)
      goto LABEL_141;
  }
LABEL_134:
  if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v56 = (int)v49, v49 == (double)(int)v56)
    && ((_DWORD)v56 || (*(_QWORD *)&v49 & 0x8000000000000000) == 0))
  {
    v29 = v56 | 0xFFFE000000000000;
  }
  else
  {
    v29 = *(_QWORD *)&v49 + 0x2000000000000;
  }
LABEL_20:
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_93:
    v41 = 0;
    goto LABEL_43;
  }
  if (v27 >> 49)
    v31 = v29 >> 49 == 0;
  else
    v31 = 1;
  if (v31)
  {
    if ((v27 & 0xFFFE000000000002) == 0
      && (*(_BYTE *)(v27 + 5) == 3 ? (v50 = (v29 & 0xFFFE000000000002) == 0) : (v50 = 0),
          v50 && *(_BYTE *)(v29 + 5) == 3))
    {
      v51 = JSC::JSBigInt::exponentiate(v10, (JSC::JSGlobalObject *)v27, (JSC::JSBigInt *)v29, a4);
    }
    else
    {
      v51 = JSC::throwTypeError((unint64_t)v10, &v61, (uint64_t)"Invalid mix of BigInt and other type in exponentiation.", 56);
    }
    v41 = v51;
    goto LABEL_43;
  }
  v32 = (double)(int)v27;
  if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v32 = v27 - 0x2000000000000;
  *(_QWORD *)&v33 = v29 - 0x2000000000000;
  if (v29 > 0xFFFDFFFFFFFFFFFFLL)
    v33 = (double)(int)v29;
  v34 = fabs(v32);
  v35 = fabs(v33);
  *(double *)&v36 = INFINITY;
  if (v34 == 1.0 && v35 == INFINITY)
  {
    *(double *)&v36 = NAN;
LABEL_100:
    v39 = *(double *)&v36;
    goto LABEL_38;
  }
  if (v33 == 0.5)
  {
    v39 = 0.0;
    if (v32 != 0.0)
    {
      v39 = INFINITY;
      if (v34 != INFINITY)
        v39 = sqrt(v32);
    }
    goto LABEL_38;
  }
  if (v33 != -0.5)
  {
    v38 = (int)v33;
    if ((int)v33 <= 0x3E8 && v33 == (double)(int)v38)
    {
      if (v38)
      {
        v39 = 1.0;
        do
        {
          if ((v38 & 1) != 0)
            v43 = v32;
          else
            v43 = 1.0;
          v39 = v39 * v43;
          v32 = v32 * v32;
          v44 = v38 >= 2;
          v38 >>= 1;
        }
        while (v44);
      }
      else
      {
        v39 = 1.0;
      }
    }
    else
    {
      v39 = pow(v32, v33);
    }
    goto LABEL_38;
  }
  if (v32 == 0.0)
    goto LABEL_100;
  if (v34 == INFINITY)
    v39 = 0.0;
  else
    v39 = 1.0 / sqrt(v32);
LABEL_38:
  if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v40 = (int)v39, v39 == (double)(int)v40)
    && ((_DWORD)v40 || (*(_QWORD *)&v39 & 0x8000000000000000) == 0))
  {
    v41 = v40 | 0xFFFE000000000000;
  }
  else
  {
    v41 = *(_QWORD *)&v39 + 0x2000000000000;
  }
LABEL_43:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v60, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v60, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v24) = v41;
  return (__int128 *)v17;
}

__int128 *slow_path_lshift(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  JSC::VM *v44;
  _QWORD *v45;
  JSC::VM *v46;
  unint64_t v47;
  unint64_t v48;
  __int16 *v49;
  uint64_t v51;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  JSC::VM *v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  BOOL hasExceptionsAfterHandlingTraps;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  JSC::VM *v88;
  JSC::VM *v89;
  JSC::VM *v90;
  JSC::VM *v91;
  unsigned int v92;
  unsigned int v93;
  JSC::VM *v94;
  JSC::VM *v95;
  JSC::JSObject *v96;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v94 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F1478);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v59 = *((__int16 *)a2 + 1);
    if (v59 <= 63)
      v21 = v59;
    else
      v21 = (v59 + 1073741760);
    v60 = *((__int16 *)v17 + 2);
    v23 = v60 + 1073741760;
    if (v60 <= 63)
      v23 = *((__int16 *)v17 + 2);
    v61 = *((__int16 *)v17 + 3);
    v25 = v61 + 1073741760;
    if (v61 <= 63)
      v25 = *((__int16 *)v17 + 3);
    v26 = *((unsigned __int16 *)v17 + 4);
  }
  else if (v19 == 130)
  {
    v21 = *(unsigned int *)(a2 + 2);
    v23 = *(_DWORD *)(v17 + 6);
    v25 = *(_DWORD *)(v17 + 10);
    v26 = *(_DWORD *)(v17 + 14);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = v20;
    else
      v21 = (v20 + 1073741808);
    v22 = (char)v17[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)v17[2];
    v24 = (char)v17[3];
    v25 = v24 + 1073741808;
    if (v24 <= 15)
      v25 = (char)v17[3];
    v26 = v17[4];
  }
  v27 = *(unsigned int **)(v9[7] + 200);
  if (*v27 <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F1498);
  }
  if (v23 >= 0x40000000)
  {
    v54 = v23 - 0x40000000;
    if (v54 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F1818);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v54);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  if (v25 >= 0x40000000)
  {
    v55 = v25 - 0x40000000;
    if (v55 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F1820);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v55);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v25);
  }
  v31 = v27 + 1;
  v32 = *v30;
  v33 = *((unsigned __int16 *)v27 + v26 + 2);
  v34 = (v33 >> 10) & 6 | 1;
  if (v29 < 0xFFFE000000000000)
    LOWORD(v34) = (*((_WORD *)v27 + v26 + 2) >> 10) & 5 | 2;
  if (v29 >> 49)
    v35 = v34;
  else
    v35 = (*((_WORD *)v27 + v26 + 2) >> 10) & 3 | 4;
  v36 = (v33 >> 7) & 3 | 4;
  v37 = (v33 >> 7) & 6 | 1;
  if (v32 < 0xFFFE000000000000)
    LOBYTE(v37) = (v33 >> 7) & 5 | 2;
  if (v32 >> 49)
    LOBYTE(v36) = v37;
  *((_WORD *)v31 + v26) = v33 & 0xE07F | (v35 << 10) | (v36 << 7);
  v38 = *(JSC::VM **)(v10 + 56);
  v95 = v38;
  if (v29 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_37;
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) != 3)
    {
      v39 = v21;
      v40 = v10;
      v41 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      v21 = v39;
      v10 = v40;
      v42 = v41;
      goto LABEL_34;
    }
LABEL_37:
    v42 = v29;
    goto LABEL_38;
  }
  if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v29 - 0x2000000000000;
    v51 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
    if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v51 == *(double *)a9.i64)
    {
      v42 = v51 | 0xFFFE000000000000;
      goto LABEL_38;
    }
  }
  v42 = v29;
LABEL_34:
  v96 = (JSC::JSObject *)v42;
  if (*((_DWORD *)v38 + 20))
  {
    v88 = (JSC::VM *)v10;
    v72 = v21;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    v21 = v72;
    v10 = (unint64_t)v88;
    if (hasExceptionsAfterHandlingTraps)
    {
      v42 = 0;
      goto LABEL_38;
    }
  }
  if (v42 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_38;
  v93 = v21;
  v77 = v10;
  if ((v42 & 0xFFFE000000000002) != 0)
  {
    if (v42 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v42 - 0x2000000000000;
      goto LABEL_116;
    }
  }
  else
  {
    v21 = v21;
    if (*(_BYTE *)(v42 + 5) == 3)
      goto LABEL_38;
  }
  JSC::JSValue::toNumberSlowCase(&v96, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_116:
  v78 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
  if ((v78 - 1023) <= 0x53)
  {
    v84 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
    if (v78 > 0x433)
      LODWORD(v84) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
    if (v78 >= 0x41F)
      v85 = v84;
    else
      v85 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v84)
          + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
    if (a9.i64[0] >= 0)
      v79 = v85;
    else
      v79 = -v85;
  }
  else
  {
    v79 = 0;
  }
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
    v42 = 0;
  else
    v42 = v79 | 0xFFFE000000000000;
  v10 = v77;
  v21 = v93;
LABEL_38:
  if (*((_DWORD *)v38 + 20))
  {
    v62 = v10;
    v63 = v21;
    v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    v21 = v63;
    v10 = v62;
    if (v64)
      goto LABEL_96;
  }
  v43 = v32;
  if (v32 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_47;
  v44 = *(JSC::VM **)(v10 + 56);
  v91 = v11;
  v92 = v21;
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    v47 = v10;
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v32 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v32 - 0x2000000000000)) != INFINITY)
      {
        v53 = (int)*(double *)a9.i64;
        if ((double)(int)v53 == *(double *)a9.i64)
        {
          v43 = v53 | 0xFFFE000000000000;
          v11 = v91;
          v21 = v21;
          goto LABEL_47;
        }
      }
    }
LABEL_43:
    v96 = (JSC::JSObject *)v43;
    if (*((_DWORD *)v44 + 20))
    {
      v89 = v44;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v44, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v43 = 0;
        goto LABEL_45;
      }
      v43 = (unint64_t)v96;
      v44 = v89;
    }
    if (v43 > 0xFFFDFFFFFFFFFFFFLL)
    {
LABEL_45:
      v10 = v47;
      v21 = v92;
LABEL_46:
      v11 = v91;
      goto LABEL_47;
    }
    v90 = v44;
    if ((v43 & 0xFFFE000000000002) != 0)
    {
      v10 = v47;
      v21 = v92;
      if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v80 = v92;
        v81 = v43 - 0x2000000000000;
        goto LABEL_121;
      }
    }
    else
    {
      v10 = v47;
      v21 = v92;
      if (*(_BYTE *)(v43 + 5) == 3)
        goto LABEL_46;
    }
    v80 = v21;
    v47 = v10;
    JSC::JSValue::toNumberSlowCase(&v96, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_121:
    v82 = (v81 >> 52) & 0x7FF;
    if ((v82 - 1023) <= 0x53)
    {
      v86 = v81 >> (51 - (v81 >> 52));
      if (v82 > 0x433)
        LODWORD(v86) = v81 << ((v81 >> 52) - 51);
      if (v82 >= 0x41F)
        v87 = v86;
      else
        v87 = (((1 << ((v81 >> 52) + 1)) - 1) & v86) + (1 << ((v81 >> 52) + 1));
      if ((v81 & 0x8000000000000000) == 0)
        v83 = v87;
      else
        v83 = -v87;
    }
    else
    {
      v83 = 0;
    }
    if (*((_DWORD *)v90 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v90, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
      v43 = 0;
    else
      v43 = v83 | 0xFFFE000000000000;
    v10 = v47;
    v21 = v80;
    goto LABEL_46;
  }
  if (*(_BYTE *)(v32 + 5) != 3)
  {
    v45 = v9;
    v46 = *(JSC::VM **)(v10 + 56);
    v47 = v10;
    v43 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v44 = v46;
    v9 = v45;
    goto LABEL_43;
  }
LABEL_47:
  if (*((_DWORD *)v38 + 20))
  {
    v67 = v38;
    v68 = v10;
    v69 = v21;
    v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v67, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    LODWORD(v21) = v69;
    v10 = v68;
    if (v70)
    {
LABEL_96:
      v48 = 0;
      goto LABEL_51;
    }
  }
  if (v42 < 0xFFFE000000000000 || v43 < 0xFFFE000000000000)
  {
    v74 = v21;
    if ((v42 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v42 + 5) != 3
      || (v43 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v43 + 5) != 3)
    {
      v75 = v10;
      v76 = JSC::throwTypeError(v10, &v95, (uint64_t)"Invalid mix of BigInt and other type in left shift operation.", 62);
    }
    else
    {
      v75 = v10;
      v76 = (uint64_t)JSC::JSBigInt::leftShift((JSC::JSBigInt *)v10, (JSC::JSGlobalObject *)v42, (JSC::JSBigInt *)v43, a4);
    }
    v10 = v75;
    v48 = v76;
    LODWORD(v21) = v74;
  }
  else
  {
    v48 = ((_DWORD)v42 << v43) | 0xFFFE000000000000;
  }
LABEL_51:
  if (HIBYTE(word_1ECF4C620))
  {
    v65 = v21;
    v66 = v10;
    JSC::doExceptionFuzzing(v10, &v94, "CommonSlowPaths", v17);
    LODWORD(v21) = v65;
    v10 = v66;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    v71 = v21;
    JSC::doExceptionFuzzing(v10, &v94, "CommonSlowPaths", v17);
    LODWORD(v21) = v71;
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * (int)v21) = v48;
  v49 = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC((uint64_t)v9, v17);
  if (!(v48 >> 49))
  {
    if ((v48 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v48 + 5) == 3)
      v58 = *v49 | 0x20;
    else
      v58 = *v49 | 4;
    goto LABEL_82;
  }
  if (v48 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v56 = *v49;
    if (v29 >= 0xFFFE000000000000 && v32 >= 0xFFFE000000000000)
    {
      v56 |= 8u;
      *v49 = v56;
    }
    *(_QWORD *)&v57 = v48 - 0x2000000000000;
    if ((uint64_t)v48 <= 0x1FFFFFFFFFFFFLL && v57 == 0.0)
    {
      v58 = v56 | 2;
    }
    else
    {
      *v49 = v56 | 1;
      if ((uint64_t)fabs(v57) < 0x8000000000000)
        return (__int128 *)v17;
      v58 = v56 | 0x11;
    }
LABEL_82:
    *v49 = v58;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_rshift(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  JSC::VM *v44;
  _QWORD *v45;
  JSC::VM *v46;
  unint64_t v47;
  unint64_t v48;
  __int16 *v49;
  uint64_t v51;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  JSC::VM *v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  BOOL hasExceptionsAfterHandlingTraps;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  JSC::VM *v88;
  JSC::VM *v89;
  JSC::VM *v90;
  JSC::VM *v91;
  unsigned int v92;
  unsigned int v93;
  JSC::VM *v94;
  JSC::VM *v95;
  JSC::JSObject *v96;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v94 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F1D34);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v54 = *((__int16 *)a2 + 1);
    if (v54 <= 63)
      v21 = v54;
    else
      v21 = (v54 + 1073741760);
    v55 = *((__int16 *)v17 + 2);
    v23 = v55 + 1073741760;
    if (v55 <= 63)
      v23 = *((__int16 *)v17 + 2);
    v56 = *((__int16 *)v17 + 3);
    v25 = v56 + 1073741760;
    if (v56 <= 63)
      v25 = *((__int16 *)v17 + 3);
    v26 = *((unsigned __int16 *)v17 + 4);
  }
  else if (v19 == 130)
  {
    v21 = *(unsigned int *)(a2 + 2);
    v23 = *(_DWORD *)(v17 + 6);
    v25 = *(_DWORD *)(v17 + 10);
    v26 = *(_DWORD *)(v17 + 14);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = v20;
    else
      v21 = (v20 + 1073741808);
    v22 = (char)v17[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)v17[2];
    v24 = (char)v17[3];
    v25 = v24 + 1073741808;
    if (v24 <= 15)
      v25 = (char)v17[3];
    v26 = v17[4];
  }
  v27 = *(unsigned int **)(v9[7] + 200);
  if (*v27 <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F1D54);
  }
  if (v23 >= 0x40000000)
  {
    v57 = v23 - 0x40000000;
    if (v57 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F20D4);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v57);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  if (v25 >= 0x40000000)
  {
    v58 = v25 - 0x40000000;
    if (v58 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F20DCLL);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v58);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v25);
  }
  v31 = v27 + 1;
  v32 = *v30;
  v33 = *((unsigned __int16 *)v27 + v26 + 2);
  v34 = (v33 >> 10) & 6 | 1;
  if (v29 < 0xFFFE000000000000)
    LOWORD(v34) = (*((_WORD *)v27 + v26 + 2) >> 10) & 5 | 2;
  if (v29 >> 49)
    v35 = v34;
  else
    v35 = (*((_WORD *)v27 + v26 + 2) >> 10) & 3 | 4;
  v36 = (v33 >> 7) & 3 | 4;
  v37 = (v33 >> 7) & 6 | 1;
  if (v32 < 0xFFFE000000000000)
    LOBYTE(v37) = (v33 >> 7) & 5 | 2;
  if (v32 >> 49)
    LOBYTE(v36) = v37;
  *((_WORD *)v31 + v26) = v33 & 0xE07F | (v35 << 10) | (v36 << 7);
  v38 = *(JSC::VM **)(v10 + 56);
  v95 = v38;
  if (v29 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_37;
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) != 3)
    {
      v39 = v21;
      v40 = v10;
      v41 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      v21 = v39;
      v10 = v40;
      v42 = v41;
      goto LABEL_34;
    }
LABEL_37:
    v42 = v29;
    goto LABEL_38;
  }
  if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v29 - 0x2000000000000;
    v51 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
    if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v51 == *(double *)a9.i64)
    {
      v42 = v51 | 0xFFFE000000000000;
      goto LABEL_38;
    }
  }
  v42 = v29;
LABEL_34:
  v96 = (JSC::JSObject *)v42;
  if (*((_DWORD *)v38 + 20))
  {
    v88 = (JSC::VM *)v10;
    v72 = v21;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    v21 = v72;
    v10 = (unint64_t)v88;
    if (hasExceptionsAfterHandlingTraps)
    {
      v42 = 0;
      goto LABEL_38;
    }
  }
  if (v42 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_38;
  v93 = v21;
  v77 = v10;
  if ((v42 & 0xFFFE000000000002) != 0)
  {
    if (v42 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v42 - 0x2000000000000;
      goto LABEL_116;
    }
  }
  else
  {
    v21 = v21;
    if (*(_BYTE *)(v42 + 5) == 3)
      goto LABEL_38;
  }
  JSC::JSValue::toNumberSlowCase(&v96, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_116:
  v78 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
  if ((v78 - 1023) <= 0x53)
  {
    v84 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
    if (v78 > 0x433)
      LODWORD(v84) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
    if (v78 >= 0x41F)
      v85 = v84;
    else
      v85 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v84)
          + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
    if (a9.i64[0] >= 0)
      v79 = v85;
    else
      v79 = -v85;
  }
  else
  {
    v79 = 0;
  }
  if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
    v42 = 0;
  else
    v42 = v79 | 0xFFFE000000000000;
  v10 = v77;
  v21 = v93;
LABEL_38:
  if (*((_DWORD *)v38 + 20))
  {
    v62 = v10;
    v63 = v21;
    v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v38, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    v21 = v63;
    v10 = v62;
    if (v64)
      goto LABEL_96;
  }
  v43 = v32;
  if (v32 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_47;
  v44 = *(JSC::VM **)(v10 + 56);
  v91 = v11;
  v92 = v21;
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    v47 = v10;
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v32 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v32 - 0x2000000000000)) != INFINITY)
      {
        v53 = (int)*(double *)a9.i64;
        if ((double)(int)v53 == *(double *)a9.i64)
        {
          v43 = v53 | 0xFFFE000000000000;
          v11 = v91;
          v21 = v21;
          goto LABEL_47;
        }
      }
    }
LABEL_43:
    v96 = (JSC::JSObject *)v43;
    if (*((_DWORD *)v44 + 20))
    {
      v89 = v44;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v44, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v43 = 0;
        goto LABEL_45;
      }
      v43 = (unint64_t)v96;
      v44 = v89;
    }
    if (v43 > 0xFFFDFFFFFFFFFFFFLL)
    {
LABEL_45:
      v10 = v47;
      v21 = v92;
LABEL_46:
      v11 = v91;
      goto LABEL_47;
    }
    v90 = v44;
    if ((v43 & 0xFFFE000000000002) != 0)
    {
      v10 = v47;
      v21 = v92;
      if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v80 = v92;
        v81 = v43 - 0x2000000000000;
        goto LABEL_121;
      }
    }
    else
    {
      v10 = v47;
      v21 = v92;
      if (*(_BYTE *)(v43 + 5) == 3)
        goto LABEL_46;
    }
    v80 = v21;
    v47 = v10;
    JSC::JSValue::toNumberSlowCase(&v96, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_121:
    v82 = (v81 >> 52) & 0x7FF;
    if ((v82 - 1023) <= 0x53)
    {
      v86 = v81 >> (51 - (v81 >> 52));
      if (v82 > 0x433)
        LODWORD(v86) = v81 << ((v81 >> 52) - 51);
      if (v82 >= 0x41F)
        v87 = v86;
      else
        v87 = (((1 << ((v81 >> 52) + 1)) - 1) & v86) + (1 << ((v81 >> 52) + 1));
      if ((v81 & 0x8000000000000000) == 0)
        v83 = v87;
      else
        v83 = -v87;
    }
    else
    {
      v83 = 0;
    }
    if (*((_DWORD *)v90 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v90, v21, a3, (uint64_t)a4, a5, a6, a7, a8))
      v43 = 0;
    else
      v43 = v83 | 0xFFFE000000000000;
    v10 = v47;
    v21 = v80;
    goto LABEL_46;
  }
  if (*(_BYTE *)(v32 + 5) != 3)
  {
    v45 = v9;
    v46 = *(JSC::VM **)(v10 + 56);
    v47 = v10;
    v43 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v44 = v46;
    v9 = v45;
    goto LABEL_43;
  }
LABEL_47:
  if (*((_DWORD *)v38 + 20))
  {
    v67 = v38;
    v68 = v10;
    v69 = v21;
    v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v67, v21, a3, (uint64_t)a4, a5, a6, a7, a8);
    LODWORD(v21) = v69;
    v10 = v68;
    if (v70)
    {
LABEL_96:
      v48 = 0;
      goto LABEL_51;
    }
  }
  if (v42 < 0xFFFE000000000000 || v43 < 0xFFFE000000000000)
  {
    v74 = v21;
    if ((v42 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v42 + 5) != 3
      || (v43 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v43 + 5) != 3)
    {
      v75 = v10;
      v76 = JSC::throwTypeError(v10, &v95, (uint64_t)"Invalid mix of BigInt and other type in signed right shift operation.", 70);
    }
    else
    {
      v75 = v10;
      v76 = (uint64_t)JSC::JSBigInt::signedRightShift((JSC::JSBigInt *)v10, (JSC::JSGlobalObject *)v42, (JSC::JSBigInt *)v43, a4);
    }
    v10 = v75;
    v48 = v76;
    LODWORD(v21) = v74;
  }
  else
  {
    v48 = ((int)v42 >> v43) | 0xFFFE000000000000;
  }
LABEL_51:
  if (HIBYTE(word_1ECF4C620))
  {
    v65 = v21;
    v66 = v10;
    JSC::doExceptionFuzzing(v10, &v94, "CommonSlowPaths", v17);
    LODWORD(v21) = v65;
    v10 = v66;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    v71 = v21;
    JSC::doExceptionFuzzing(v10, &v94, "CommonSlowPaths", v17);
    LODWORD(v21) = v71;
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * (int)v21) = v48;
  v49 = (__int16 *)JSC::CodeBlock::binaryArithProfileForPC((uint64_t)v9, v17);
  if (!(v48 >> 49))
  {
    if ((v48 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v48 + 5) == 3)
      v61 = *v49 | 0x20;
    else
      v61 = *v49 | 4;
    goto LABEL_90;
  }
  if (v48 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v59 = *v49;
    if (v29 >= 0xFFFE000000000000 && v32 >= 0xFFFE000000000000)
    {
      v59 |= 8u;
      *v49 = v59;
    }
    *(_QWORD *)&v60 = v48 - 0x2000000000000;
    if ((uint64_t)v48 <= 0x1FFFFFFFFFFFFLL && v60 == 0.0)
    {
      v61 = v59 | 2;
    }
    else
    {
      *v49 = v59 | 1;
      if ((uint64_t)fabs(v60) < 0x8000000000000)
        return (__int128 *)v17;
      v61 = v59 | 0x11;
    }
LABEL_90:
    *v49 = v61;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_urshift(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSGlobalObject *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 v36;
  JSC::VM *v37;
  JSC::VM **v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  unint64_t v43;
  double v45;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  BOOL v57;
  int v58;
  BOOL v59;
  JSC::VM *v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  BOOL hasExceptionsAfterHandlingTraps;
  int v66;
  BOOL v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  JSC::JSGlobalObject *v82;
  JSC::VM *v83;
  JSC::VM *v84;
  JSC::JSObject *v85;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v83 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F24D4);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *(unsigned __int8 *)a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_71:
    v53 = v22 + v21;
    goto LABEL_72;
  }
  if (v19 != 130)
  {
    v20 = *((char *)a2 + 1);
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = *((char *)a2 + 2);
    v23 = *((char *)a2 + 3);
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_71;
  }
  v20 = *(_DWORD *)((char *)a2 + 2);
  v53 = *(_DWORD *)((char *)a2 + 6);
  v23 = *(_DWORD *)((char *)a2 + 10);
LABEL_72:
  v22 = v53;
  v24 = v20;
  v25 = v23;
  if (v53 < 0x40000000)
    goto LABEL_14;
  v54 = (v53 - 0x40000000);
  if (v54 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988F27E0);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v54);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v52 = (v25 - 0x40000000);
    if (v52 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F27D8);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v52);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
  }
  v29 = *v28;
  v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v84 = v30;
  v82 = v10;
  if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      a9.i64[0] = v27 - 0x2000000000000;
      v45 = fabs(COERCE_DOUBLE(v27 - 0x2000000000000));
      v47 = v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || v45 == INFINITY;
      v48 = (int)*(double *)a9.i64;
      if (!v47 && (double)(int)v48 == *(double *)a9.i64)
      {
        v27 = v48 | 0xFFFE000000000000;
        goto LABEL_23;
      }
    }
    else
    {
      if (*(_BYTE *)(v27 + 5) == 3)
        goto LABEL_23;
      v31 = v27;
      v32 = v24;
      v33 = JSC::JSCell::toPrimitive(v31, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      v24 = v32;
      v27 = v33;
    }
    v85 = (JSC::JSObject *)v27;
    if (*((_DWORD *)v30 + 20))
    {
      v64 = v24;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v24 = v64;
      if (hasExceptionsAfterHandlingTraps)
      {
        v27 = 0;
        goto LABEL_23;
      }
    }
    if (v27 > 0xFFFDFFFFFFFFFFFFLL)
      goto LABEL_23;
    v68 = v24;
    if ((v27 & 0xFFFE000000000002) != 0)
    {
      if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v27 - 0x2000000000000;
        goto LABEL_101;
      }
    }
    else if (*(_BYTE *)(v27 + 5) == 3)
    {
      goto LABEL_23;
    }
    JSC::JSValue::toNumberSlowCase(&v85, v10, a3, a4, a5, a6, a7, a8, a9);
LABEL_101:
    v69 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v69 - 1023) <= 0x53)
    {
      v75 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v69 > 0x433)
        LODWORD(v75) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v69 >= 0x41F)
        v76 = v75;
      else
        v76 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v75)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v70 = v76;
      else
        v70 = -v76;
    }
    else
    {
      v70 = 0;
    }
    if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      v27 = 0;
    else
      v27 = v70 | 0xFFFE000000000000;
    v10 = v82;
    v24 = v68;
  }
LABEL_23:
  if (*((_DWORD *)v30 + 20))
  {
    v80 = v24;
    v36 = 0;
    v34 = 1;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v35 = 0;
      v24 = v80;
      goto LABEL_26;
    }
    v35 = 0;
    v24 = v80;
    if (v27 < 0xFFFE000000000000)
      goto LABEL_26;
  }
  else if (v27 < 0xFFFE000000000000)
  {
    v36 = 0;
    v35 = 0;
    v34 = 1;
    goto LABEL_26;
  }
  v34 = 0;
  v35 = v27 & 0xFFFFFF00;
  v36 = v27;
LABEL_26:
  if (*((_DWORD *)v30 + 20))
  {
    v56 = v24;
    v57 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v24 = v56;
    if (v57)
      goto LABEL_76;
  }
  v37 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v29 & 0xFFFE000000000002) != 0)
    {
      if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v29 - 0x2000000000000;
        v50 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
        if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v50 == *(double *)a9.i64)
        {
          v29 = v50 | 0xFFFE000000000000;
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (*(_BYTE *)(v29 + 5) == 3)
        goto LABEL_33;
      v38 = (JSC::VM **)v10;
      v39 = v24;
      v40 = JSC::JSCell::toPrimitive(v29, v38, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      v24 = v39;
      v29 = v40;
    }
    v85 = (JSC::JSObject *)v29;
    if (*((_DWORD *)v37 + 20))
    {
      v66 = v24;
      v67 = JSC::VM::hasExceptionsAfterHandlingTraps(v37, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v24 = v66;
      if (v67)
      {
        v29 = 0;
        goto LABEL_33;
      }
    }
    if (v29 > 0xFFFDFFFFFFFFFFFFLL)
      goto LABEL_33;
    v71 = v24;
    if ((v29 & 0xFFFE000000000002) != 0)
    {
      v73 = v29 - 0x2000000000000;
      a2 = v82;
      if (v29 - 0x2000000000000 < 0xFFFC000000000000)
        goto LABEL_106;
    }
    else
    {
      a2 = v82;
      if (*(_BYTE *)(v29 + 5) == 3)
        goto LABEL_33;
    }
    JSC::JSValue::toNumberSlowCase(&v85, a2, a3, a4, a5, a6, a7, a8, a9);
    v73 = v72;
LABEL_106:
    v74 = (v73 >> 52) & 0x7FF;
    if ((v74 - 1023) <= 0x53)
    {
      v77 = v73 >> (51 - (v73 >> 52));
      if (v74 > 0x433)
        LODWORD(v77) = v73 << ((v73 >> 52) - 51);
      if (v74 >= 0x41F)
        v78 = v77;
      else
        v78 = (((1 << ((v73 >> 52) + 1)) - 1) & v77) + (1 << ((v73 >> 52) + 1));
      if ((v73 & 0x8000000000000000) == 0)
        v79 = v78;
      else
        v79 = -v78;
      v29 = v79 | 0xFFFE000000000000;
    }
    else
    {
      v29 = 0xFFFE000000000000;
    }
    if (*((_DWORD *)v37 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v37, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      v29 = 0;
    v24 = v71;
  }
LABEL_33:
  if (*((_DWORD *)v37 + 20))
  {
    v81 = v24;
    v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v37, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v42 = 0;
    v41 = 1;
    if (v59)
    {
      v24 = v81;
      goto LABEL_36;
    }
    v24 = v81;
    if (v29 < 0xFFFE000000000000)
      goto LABEL_36;
  }
  else if (v29 < 0xFFFE000000000000)
  {
    v42 = 0;
    v41 = 1;
    goto LABEL_36;
  }
  v41 = 0;
  v42 = v29 & 0x1F;
LABEL_36:
  if (!*((_DWORD *)v30 + 20)
    || (v60 = v30,
        v61 = v24,
        v62 = JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, a3, a4, a5, a6, a7, a8),
        v24 = v61,
        !v62))
  {
    if ((v34 | v41) != 1)
    {
      v43 = ((v35 | v36) >> v42) | 0xFFFE000000000000;
      goto LABEL_39;
    }
    v55 = v24;
    JSC::throwTypeError((unint64_t)v82, &v84, (uint64_t)"BigInt does not support >>> operator", 37);
    v24 = v55;
  }
LABEL_76:
  v43 = 0;
LABEL_39:
  if (HIBYTE(word_1ECF4C620))
  {
    v58 = v24;
    JSC::doExceptionFuzzing((unint64_t)v82, &v83, "CommonSlowPaths", v17);
    v24 = v58;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    v63 = v24;
    JSC::doExceptionFuzzing((unint64_t)v82, &v83, "CommonSlowPaths", v17);
    v24 = v63;
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v24) = v43;
  return (__int128 *)v17;
}

__int128 *slow_path_unsigned(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSObject **v24;
  JSC::JSObject *v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  JSC::JSObject *v35;
  JSC::VM *v36;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v36 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x1988F2A0CLL);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    if (v22 <= 63)
      goto LABEL_11;
LABEL_28:
    v30 = v22 + v21;
    goto LABEL_29;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    if (v22 <= 15)
    {
LABEL_11:
      v23 = v20;
LABEL_12:
      v24 = (JSC::JSObject **)(a1 + 8 * v22);
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v30 = *(_DWORD *)(a2 + 6);
LABEL_29:
  v22 = v30;
  v23 = v20;
  if (v30 < 0x40000000)
    goto LABEL_12;
  v31 = (v30 - 0x40000000);
  if (v31 >= *(unsigned int *)(v12 + 172))
    goto LABEL_43;
  v24 = (JSC::JSObject **)(*(_QWORD *)(v12 + 160) + 8 * v31);
LABEL_13:
  v25 = *v24;
  v35 = v25;
  if ((unint64_t)v25 < 0xFFFE000000000000)
  {
    v28 = (unint64_t)v25 - 0x2000000000000;
    if (v28 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(&v35, v10, a3, a4, a5, a6, a7, a8, a9);
      v28 = v34;
    }
    v29 = (v28 >> 52) & 0x7FF;
    if ((v29 - 1023) >= 0x54)
    {
      LODWORD(v25) = 0;
      goto LABEL_15;
    }
    v32 = v28 >> (51 - (v28 >> 52));
    if (v29 > 0x433)
      LODWORD(v32) = v28 << ((v28 >> 52) - 51);
    if (v29 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v28 >> 52) + 1)) - 1) & v32) + (1 << ((v28 >> 52) + 1));
    if ((v28 & 0x8000000000000000) == 0)
      LODWORD(v25) = v33;
    else
      LODWORD(v25) = -v33;
  }
  if ((v25 & 0x80000000) == 0)
  {
LABEL_15:
    v26 = v25 | 0xFFFE000000000000;
    goto LABEL_16;
  }
  v26 = COERCE__INT64((double)v25) + 0x2000000000000;
LABEL_16:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v36, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v23) = v26;
  return (__int128 *)v17;
}

__int128 *slow_path_bitnot(uint64_t a1, unsigned __int8 *a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  unint64_t *v25;
  unint64_t v26;
  JSC::VM *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  __int16 v43;
  double v45;
  BOOL v47;
  uint64_t v48;
  int v50;
  JSC::VM *v51;
  JSC::JSObject *v52;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v51 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F2D9CLL);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
  }
  else if (v19 == 128)
  {
    v50 = *((__int16 *)a2 + 1);
    if (v50 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v50 + 1073741760;
    v22 = *((__int16 *)a2 + 2);
    if (v22 > 63)
      v22 += 1073741760;
    v23 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    if (v22 > 15)
      v22 += 1073741808;
    v23 = a2[3];
  }
  v24 = *(unsigned int **)(v9[7] + 208);
  if (*v24 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F2DBCLL);
  }
  if (v22 >= 0x40000000)
  {
    if ((v22 - 0x40000000) >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F2EB4);
    }
    v25 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v22 - 0x40000000));
  }
  else
  {
    v25 = (unint64_t *)(a1 + 8 * v22);
  }
  v26 = *v25;
  v27 = *(JSC::VM **)(v10 + 56);
  if (*v25 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_39;
  if ((v26 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v26 + 5) != 3)
    {
      v28 = JSC::JSCell::toPrimitive(v26, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      goto LABEL_21;
    }
LABEL_39:
    v28 = *v25;
    goto LABEL_40;
  }
  a9.i64[0] = v26 - 0x2000000000000;
  v45 = fabs(COERCE_DOUBLE(v26 - 0x2000000000000));
  v47 = v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || v45 == INFINITY;
  v48 = (int)*(double *)a9.i64;
  if (!v47 && (double)(int)v48 == *(double *)a9.i64)
  {
    v28 = v48 | 0xFFFE000000000000;
    goto LABEL_40;
  }
  v28 = v26;
LABEL_21:
  v52 = (JSC::JSObject *)v28;
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v28 = 0;
    goto LABEL_40;
  }
  if (v28 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v28 & 0xFFFE000000000002) != 0)
    {
      v30 = v28 - 0x2000000000000;
      if (v28 - 0x2000000000000 < 0xFFFC000000000000)
        goto LABEL_26;
    }
    else if (*(_BYTE *)(v28 + 5) == 3)
    {
      goto LABEL_40;
    }
    JSC::JSValue::toNumberSlowCase(&v52, (JSC::JSGlobalObject *)v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v30 = v29;
LABEL_26:
    v31 = (v30 >> 52) & 0x7FF;
    v32 = v31 - 1023;
    v33 = v30 >> (51 - (v30 >> 52));
    if (v31 > 0x433)
      LODWORD(v33) = v30 << ((v30 >> 52) - 51);
    if (v31 >= 0x41F)
      v34 = v33;
    else
      v34 = (((1 << ((v30 >> 52) + 1)) - 1) & v33) + (1 << ((v30 >> 52) + 1));
    if ((v30 & 0x8000000000000000) == 0)
      v35 = v34;
    else
      v35 = -v34;
    v36 = v35 | 0xFFFE000000000000;
    if (v32 <= 0x53)
      v28 = v36;
    else
      v28 = 0xFFFE000000000000;
    if (*((_DWORD *)v27 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v28 = 0;
    }
  }
LABEL_40:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v37 = 0;
  }
  else if (v28 < 0xFFFE000000000000)
  {
    v37 = (unint64_t)JSC::JSBigInt::bitwiseNot((JSC::VM **)v10, (JSC::JSGlobalObject *)v28, a3, a4);
  }
  else
  {
    v37 = v28 ^ 0xFFFE0000FFFFFFFFLL;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v51, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing(v10, &v51, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  v38 = v24 + 1;
  *(_QWORD *)(a1 + 8 * v21) = v37;
  if (v26 >> 49)
    v40 = 5;
  else
    v40 = 3;
  if (v26 >> 49)
    v41 = 2;
  else
    v41 = 4;
  v39 = *((unsigned __int16 *)v24 + v23 + 2);
  v42 = v39 & 0xFFFFFC7F | ((v40 & (v39 >> 7) | v41) << 7);
  *((_WORD *)v38 + v23) = v42;
  if (v37 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if (v37 >> 49)
    {
      v43 = 27;
    }
    else if (v37 && (v37 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v37 + 5) == 3)
    {
      v43 = 32;
    }
    else
    {
      v43 = 4;
    }
    *((_WORD *)v38 + v23) = v43 | v42;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_bitand(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int *v52;
  __int16 *v53;
  uint64_t v55;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  JSC::JSGlobalObject *v85;
  int v86;
  int v87;
  JSC::VM *v88;
  JSC::VM *v89;
  JSC::JSObject *v90;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v88 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F3680);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v63 = *((__int16 *)a2 + 1);
    if (v63 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v63 + 1073741760;
    v64 = *((__int16 *)a2 + 2);
    v23 = v64 + 1073741760;
    if (v64 <= 63)
      v23 = *((__int16 *)a2 + 2);
    v65 = *((__int16 *)a2 + 3);
    v25 = v65 + 1073741760;
    if (v65 <= 63)
      v25 = *((__int16 *)a2 + 3);
    v26 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 6);
    v25 = *(_DWORD *)(a2 + 10);
    v26 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[2];
    v24 = (char)a2[3];
    v25 = v24 + 1073741808;
    if (v24 <= 15)
      v25 = (char)a2[3];
    v26 = a2[4];
  }
  v27 = *(unsigned int **)(v9[7] + 200);
  if (*v27 <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F36A0);
  }
  if (v23 >= 0x40000000)
  {
    v58 = v23 - 0x40000000;
    if (v58 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F39FCLL);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v58);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  if (v25 >= 0x40000000)
  {
    v59 = v25 - 0x40000000;
    if (v59 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F3A04);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v59);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v25);
  }
  v31 = v27 + 1;
  v32 = *v30;
  v33 = *((unsigned __int16 *)v27 + v26 + 2);
  v34 = (v33 >> 10) & 6 | 1;
  if (v29 < 0xFFFE000000000000)
    LOWORD(v34) = (*((_WORD *)v27 + v26 + 2) >> 10) & 5 | 2;
  if (v29 >> 49)
    v35 = v34;
  else
    v35 = (*((_WORD *)v27 + v26 + 2) >> 10) & 3 | 4;
  v36 = (v33 >> 7) & 3 | 4;
  v37 = (v33 >> 7) & 6 | 1;
  if (v32 < 0xFFFE000000000000)
    LOBYTE(v37) = (v33 >> 7) & 5 | 2;
  if (v32 >> 49)
    LOBYTE(v36) = v37;
  *((_WORD *)v31 + v26) = v33 & 0xE07F | (v35 << 10) | (v36 << 7);
  v38 = *(_QWORD *)(v10 + 56);
  v89 = (JSC::VM *)v38;
  if (v29 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_41;
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) != 3)
    {
      v39 = v10;
      v40 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v39;
      v41 = v40;
      goto LABEL_34;
    }
LABEL_41:
    v41 = v29;
    goto LABEL_42;
  }
  if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v29 - 0x2000000000000;
    v55 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
    if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v55 == *(double *)a9.i64)
    {
      v41 = v55 | 0xFFFE000000000000;
      goto LABEL_42;
    }
  }
  v41 = v29;
LABEL_34:
  v90 = (JSC::JSObject *)v41;
  if (*(_DWORD *)(v38 + 80))
  {
    v69 = *(_DWORD *)(v38 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
    {
      v83 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v83;
    }
    if (*(_QWORD *)(v38 + 16))
    {
      v41 = 0;
      goto LABEL_42;
    }
  }
  if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v42 = v10;
    if ((v41 & 0xFFFE000000000002) != 0)
    {
      if (v41 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v41 - 0x2000000000000;
        goto LABEL_39;
      }
    }
    else if (*(_BYTE *)(v41 + 5) == 3)
    {
      goto LABEL_42;
    }
    JSC::JSValue::toNumberSlowCase(&v90, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_39:
    v43 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v43 - 1023) <= 0x53)
    {
      v76 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v43 > 0x433)
        LODWORD(v76) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v43 >= 0x41F)
        v77 = v76;
      else
        v77 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v76)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v44 = v77;
      else
        v44 = -v77;
    }
    else
    {
      v44 = 0;
    }
    if (*(_DWORD *)(v38 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v38, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v41 = 0;
    }
    else
    {
      v41 = v44 | 0xFFFE000000000000;
    }
    v10 = v42;
  }
LABEL_42:
  if (*(_DWORD *)(v38 + 80))
  {
    v66 = *(_DWORD *)(v38 + 80);
    if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
    {
      v80 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v80;
    }
    if (*(_QWORD *)(v38 + 16))
      goto LABEL_154;
  }
  v45 = v32;
  if (v32 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_50;
  v86 = v21;
  v46 = *(_QWORD *)(v10 + 56);
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v32 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v32 - 0x2000000000000)) != INFINITY)
      {
        v57 = (int)*(double *)a9.i64;
        if ((double)(int)v57 == *(double *)a9.i64)
        {
          v45 = v57 | 0xFFFE000000000000;
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v32 + 5) == 3)
      goto LABEL_49;
    v47 = v10;
    v45 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v47;
  }
  v90 = (JSC::JSObject *)v45;
  if (*(_DWORD *)(v46 + 80))
  {
    v70 = *(_DWORD *)(v46 + 80);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
    {
      v84 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v84;
    }
    if (*(_QWORD *)(v46 + 16))
    {
      v45 = 0;
      goto LABEL_49;
    }
    v45 = (unint64_t)v90;
  }
  if (v45 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v85 = (JSC::JSGlobalObject *)v10;
    if ((v45 & 0xFFFE000000000002) != 0)
    {
      if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v73 = v45 - 0x2000000000000;
        goto LABEL_191;
      }
    }
    else if (*(_BYTE *)(v45 + 5) == 3)
    {
      goto LABEL_49;
    }
    JSC::JSValue::toNumberSlowCase(&v90, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_191:
    v74 = (v73 >> 52) & 0x7FF;
    if ((v74 - 1023) <= 0x53)
    {
      v78 = v73 >> (51 - (v73 >> 52));
      if (v74 > 0x433)
        LODWORD(v78) = v73 << ((v73 >> 52) - 51);
      if (v74 >= 0x41F)
        v79 = v78;
      else
        v79 = (((1 << ((v73 >> 52) + 1)) - 1) & v78) + (1 << ((v73 >> 52) + 1));
      if ((v73 & 0x8000000000000000) == 0)
        v75 = v79;
      else
        v75 = -v79;
    }
    else
    {
      v75 = 0;
    }
    if (*(_DWORD *)(v46 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v45 = 0;
    }
    else
    {
      v45 = v75 | 0xFFFE000000000000;
    }
    v10 = (unint64_t)v85;
  }
LABEL_49:
  v21 = v86;
LABEL_50:
  if (*(_DWORD *)(v38 + 80))
  {
    v68 = *(_DWORD *)(v38 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
    {
      v87 = v21;
      v81 = v45;
      v82 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v82;
      v45 = v81;
      v21 = v87;
    }
    if (*(_QWORD *)(v38 + 16))
    {
LABEL_154:
      v48 = 0;
      goto LABEL_54;
    }
  }
  if (v41 < 0xFFFE000000000000 || v45 < 0xFFFE000000000000)
  {
    v71 = v10;
    if ((v41 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v41 + 5) != 3
      || (v45 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v45 + 5) != 3)
    {
      v72 = JSC::throwTypeError(v10, &v89, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'and' operation.", 65);
    }
    else
    {
      v72 = JSC::JSBigInt::bitwiseAnd((JSC::JSBigInt *)v10, (JSC::JSGlobalObject *)v41, (JSC::JSBigInt *)v45, a4);
    }
    v10 = v71;
    v48 = v72;
  }
  else
  {
    v48 = v41 & v45 | 0xFFFE000000000000;
  }
LABEL_54:
  if (HIBYTE(word_1ECF4C620))
  {
    v67 = v10;
    JSC::doExceptionFuzzing(v10, &v88, "CommonSlowPaths", v17);
    v10 = v67;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing(v10, &v88, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v48;
  v49 = *v17;
  v50 = v49;
  if ((v49 | 2) == 0x82)
    v50 = v17[1];
  switch(v50)
  {
    case 157:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F329CLL);
      }
      goto LABEL_65;
    case 158:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F35B4);
      }
      goto LABEL_65;
    case 159:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F33BCLL);
      }
      goto LABEL_65;
    case 160:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F3660);
      }
      goto LABEL_65;
    case 161:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F37A0);
      }
      goto LABEL_65;
    case 162:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F3374);
      }
      goto LABEL_65;
    case 163:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F34D4);
      }
      goto LABEL_65;
    case 164:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F351CLL);
      }
      goto LABEL_65;
    case 165:
      if (v49 == 128)
      {
        v51 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v49 == 130)
      {
        v51 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v51 = v17[4];
      }
      v52 = *(unsigned int **)(v9[7] + 200);
      if (*v52 <= v51)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F3564);
      }
LABEL_65:
      v53 = (__int16 *)v52 + v51 + 2;
      break;
    default:
      v53 = 0;
      break;
  }
  if (!(v48 >> 49))
  {
    if ((v48 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v48 + 5) == 3)
      v62 = *v53 | 0x20;
    else
      v62 = *v53 | 4;
    goto LABEL_108;
  }
  if (v48 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v60 = *v53;
    if (v29 >= 0xFFFE000000000000 && v32 >= 0xFFFE000000000000)
    {
      v60 |= 8u;
      *v53 = v60;
    }
    *(_QWORD *)&v61 = v48 - 0x2000000000000;
    if ((uint64_t)v48 <= 0x1FFFFFFFFFFFFLL && v61 == 0.0)
    {
      v62 = v60 | 2;
    }
    else
    {
      *v53 = v60 | 1;
      if ((uint64_t)fabs(v61) < 0x8000000000000)
        return (__int128 *)v17;
      v62 = v60 | 0x11;
    }
LABEL_108:
    *v53 = v62;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_bitor(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int *v53;
  __int16 *v54;
  uint64_t v56;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  JSC::JSGlobalObject *v86;
  JSC::JSGlobalObject *v87;
  int v88;
  JSC::VM *v89;
  JSC::VM *v90;
  JSC::JSObject *v91;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F4320);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v64 = *((__int16 *)a2 + 1);
    if (v64 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v64 + 1073741760;
    v65 = *((__int16 *)a2 + 2);
    v23 = v65 + 1073741760;
    if (v65 <= 63)
      v23 = *((__int16 *)a2 + 2);
    v66 = *((__int16 *)a2 + 3);
    v25 = v66 + 1073741760;
    if (v66 <= 63)
      v25 = *((__int16 *)a2 + 3);
    v26 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 6);
    v25 = *(_DWORD *)(a2 + 10);
    v26 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[2];
    v24 = (char)a2[3];
    v25 = v24 + 1073741808;
    if (v24 <= 15)
      v25 = (char)a2[3];
    v26 = a2[4];
  }
  v27 = *(unsigned int **)(v9[7] + 200);
  if (*v27 <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F4340);
  }
  if (v23 >= 0x40000000)
  {
    v59 = v23 - 0x40000000;
    if (v59 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F4650);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v59);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  if (v25 >= 0x40000000)
  {
    v60 = v25 - 0x40000000;
    if (v60 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F4658);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v60);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v25);
  }
  v31 = v27 + 1;
  v32 = *v30;
  v33 = *((unsigned __int16 *)v27 + v26 + 2);
  v34 = (v33 >> 10) & 6 | 1;
  if (v29 < 0xFFFE000000000000)
    LOWORD(v34) = (*((_WORD *)v27 + v26 + 2) >> 10) & 5 | 2;
  if (v29 >> 49)
    v35 = v34;
  else
    v35 = (*((_WORD *)v27 + v26 + 2) >> 10) & 3 | 4;
  v36 = (v33 >> 7) & 3 | 4;
  v37 = (v33 >> 7) & 6 | 1;
  if (v32 < 0xFFFE000000000000)
    LOBYTE(v37) = (v33 >> 7) & 5 | 2;
  if (v32 >> 49)
    LOBYTE(v36) = v37;
  *((_WORD *)v31 + v26) = v33 & 0xE07F | (v35 << 10) | (v36 << 7);
  v38 = *(_QWORD *)(v10 + 56);
  v90 = (JSC::VM *)v38;
  if (v29 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_41;
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) != 3)
    {
      v39 = v10;
      v40 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v39;
      v41 = v40;
      goto LABEL_34;
    }
LABEL_41:
    v41 = v29;
    goto LABEL_42;
  }
  if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v29 - 0x2000000000000;
    v56 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
    if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v56 == *(double *)a9.i64)
    {
      v41 = v56 | 0xFFFE000000000000;
      goto LABEL_42;
    }
  }
  v41 = v29;
LABEL_34:
  v91 = (JSC::JSObject *)v41;
  if (*(_DWORD *)(v38 + 80))
  {
    v72 = *(_DWORD *)(v38 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
    {
      v84 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v84;
    }
    if (*(_QWORD *)(v38 + 16))
    {
      v41 = 0;
      goto LABEL_42;
    }
  }
  if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v42 = v10;
    if ((v41 & 0xFFFE000000000002) != 0)
    {
      if (v41 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v41 - 0x2000000000000;
        goto LABEL_39;
      }
    }
    else if (*(_BYTE *)(v41 + 5) == 3)
    {
      goto LABEL_42;
    }
    JSC::JSValue::toNumberSlowCase(&v91, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_39:
    v43 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v43 - 1023) <= 0x53)
    {
      v77 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v43 > 0x433)
        LODWORD(v77) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v43 >= 0x41F)
        v78 = v77;
      else
        v78 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v77)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v44 = v78;
      else
        v44 = -v78;
    }
    else
    {
      v44 = 0;
    }
    if (*(_DWORD *)(v38 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v38, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v41 = 0;
    }
    else
    {
      v41 = v44 | 0xFFFE000000000000;
    }
    v10 = v42;
  }
LABEL_42:
  if (*(_DWORD *)(v38 + 80))
  {
    v69 = *(_DWORD *)(v38 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
    {
      v81 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v81;
    }
    if (*(_QWORD *)(v38 + 16))
      goto LABEL_158;
  }
  v45 = v32;
  if (v32 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_50;
  v88 = v21;
  v46 = *(_QWORD *)(v10 + 56);
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v32 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v32 - 0x2000000000000)) != INFINITY)
      {
        v58 = (int)*(double *)a9.i64;
        if ((double)(int)v58 == *(double *)a9.i64)
        {
          v45 = v58 | 0xFFFE000000000000;
          goto LABEL_49;
        }
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v32 + 5) == 3)
      goto LABEL_49;
    v47 = v10;
    v48 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v47;
    v45 = v48;
  }
  v91 = (JSC::JSObject *)v45;
  if (*(_DWORD *)(v46 + 80))
  {
    v73 = *(_DWORD *)(v46 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
    {
      v85 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, v45, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v85;
    }
    if (*(_QWORD *)(v46 + 16))
    {
      v45 = 0;
      goto LABEL_49;
    }
    v45 = (unint64_t)v91;
  }
  if (v45 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v86 = (JSC::JSGlobalObject *)v10;
    if ((v45 & 0xFFFE000000000002) != 0)
    {
      if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v74 = v45 - 0x2000000000000;
        goto LABEL_191;
      }
    }
    else if (*(_BYTE *)(v45 + 5) == 3)
    {
      goto LABEL_49;
    }
    JSC::JSValue::toNumberSlowCase(&v91, (JSC::JSGlobalObject *)v10, v45, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_191:
    v75 = (v74 >> 52) & 0x7FF;
    if ((v75 - 1023) <= 0x53)
    {
      v79 = v74 >> (51 - (v74 >> 52));
      if (v75 > 0x433)
        LODWORD(v79) = v74 << ((v74 >> 52) - 51);
      if (v75 >= 0x41F)
        v80 = v79;
      else
        v80 = (((1 << ((v74 >> 52) + 1)) - 1) & v79) + (1 << ((v74 >> 52) + 1));
      if ((v74 & 0x8000000000000000) == 0)
        v76 = v80;
      else
        v76 = -v80;
    }
    else
    {
      v76 = 0;
    }
    if (*(_DWORD *)(v46 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v46, (uint64_t)a2, v45, (uint64_t)a4, a5, a6, a7, a8))
    {
      v45 = 0;
    }
    else
    {
      v45 = v76 | 0xFFFE000000000000;
    }
    v10 = (unint64_t)v86;
  }
LABEL_49:
  v21 = v88;
LABEL_50:
  if (*(_DWORD *)(v38 + 80))
  {
    v71 = *(_DWORD *)(v38 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
    {
      v82 = v21;
      v83 = v45;
      v87 = (JSC::JSGlobalObject *)v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v38 + 64), 7u, v45, (uint64_t)a4, a5, a6, a7, a8);
      v10 = (unint64_t)v87;
      v45 = v83;
      v21 = v82;
    }
    if (*(_QWORD *)(v38 + 16))
    {
LABEL_158:
      v49 = 0;
      goto LABEL_54;
    }
  }
  if (v41 < 0xFFFE000000000000 || v45 < 0xFFFE000000000000)
  {
    if ((v41 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v41 + 5) != 3
      || (v45 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v45 + 5) != 3)
    {
      v67 = v10;
      v68 = JSC::throwTypeError(v10, &v90, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'or' operation.", 64);
    }
    else
    {
      v67 = v10;
      v68 = JSC::JSBigInt::bitwiseOr((JSC::JSBigInt *)v10, (JSC::JSGlobalObject *)v41, (JSC::JSBigInt *)v45, a4);
    }
    v10 = v67;
    v49 = v68;
  }
  else
  {
    v49 = v45 | v41 | 0xFFFE000000000000;
  }
LABEL_54:
  if (HIBYTE(word_1ECF4C620))
  {
    v70 = v10;
    JSC::doExceptionFuzzing(v10, &v89, "CommonSlowPaths", v17);
    v10 = v70;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing(v10, &v89, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v49;
  v50 = *v17;
  v51 = v50;
  if ((v50 | 2) == 0x82)
    v51 = v17[1];
  switch(v51)
  {
    case 157:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F3EF0);
      }
      goto LABEL_65;
    case 158:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F4244);
      }
      goto LABEL_65;
    case 159:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F4010);
      }
      goto LABEL_65;
    case 160:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F4300);
      }
      goto LABEL_65;
    case 161:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F4440);
      }
      goto LABEL_65;
    case 162:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F3FC8);
      }
      goto LABEL_65;
    case 163:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F4128);
      }
      goto LABEL_65;
    case 164:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F41ACLL);
      }
      goto LABEL_65;
    case 165:
      if (v50 == 128)
      {
        v52 = *((unsigned __int16 *)v17 + 4);
      }
      else if (v50 == 130)
      {
        v52 = *(_DWORD *)(v17 + 14);
      }
      else
      {
        v52 = v17[4];
      }
      v53 = *(unsigned int **)(v9[7] + 200);
      if (*v53 <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F41F4);
      }
LABEL_65:
      v54 = (__int16 *)v53 + v52 + 2;
      break;
    default:
      v54 = 0;
      break;
  }
  if (!(v49 >> 49))
  {
    if ((v49 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v49 + 5) == 3)
      v63 = *v54 | 0x20;
    else
      v63 = *v54 | 4;
    goto LABEL_108;
  }
  if (v49 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v61 = *v54;
    if (v29 >= 0xFFFE000000000000 && v32 >= 0xFFFE000000000000)
    {
      v61 |= 8u;
      *v54 = v61;
    }
    *(_QWORD *)&v62 = v49 - 0x2000000000000;
    if ((uint64_t)v49 <= 0x1FFFFFFFFFFFFLL && v62 == 0.0)
    {
      v63 = v61 | 2;
    }
    else
    {
      *v54 = v61 | 1;
      if ((uint64_t)fabs(v62) < 0x8000000000000)
        return (__int128 *)v17;
      v63 = v61 | 0x11;
    }
LABEL_108:
    *v54 = v63;
  }
  return (__int128 *)v17;
}

__int128 *slow_path_bitxor(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::JSBigInt *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  JSC::VM *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  JSC::VM *v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  JSC::JSGlobalObject *v78;
  JSC::JSGlobalObject *v79;
  int v80;
  JSC::VM *v81;
  JSC::VM *v82;
  JSC::JSObject *v83;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v81 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F4B64);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v52 = *((__int16 *)a2 + 1);
    if (v52 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v52 + 1073741760;
    v53 = *((__int16 *)a2 + 2);
    v23 = v53 + 1073741760;
    if (v53 <= 63)
      v23 = *((__int16 *)a2 + 2);
    v54 = *((__int16 *)a2 + 3);
    v25 = v54 + 1073741760;
    if (v54 <= 63)
      v25 = *((__int16 *)a2 + 3);
    v26 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 6);
    v25 = *(_DWORD *)(a2 + 10);
    v26 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[2];
    v24 = (char)a2[3];
    v25 = v24 + 1073741808;
    if (v24 <= 15)
      v25 = (char)a2[3];
    v26 = a2[4];
  }
  v27 = *(unsigned int **)(v9[7] + 200);
  if (*v27 <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F4B84);
  }
  if (v23 >= 0x40000000)
  {
    v50 = v23 - 0x40000000;
    if (v50 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F4E84);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v50);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  v80 = v21;
  if (v25 >= 0x40000000)
  {
    v51 = v25 - 0x40000000;
    if (v51 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F4E8CLL);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v51);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v25);
  }
  v31 = v27 + 1;
  v32 = *v30;
  v33 = *((unsigned __int16 *)v27 + v26 + 2);
  v34 = (v33 >> 10) & 6 | 1;
  if (v29 < 0xFFFE000000000000)
    v34 = (v33 >> 10) & 5 | 2;
  if (v29 >> 49)
    v35 = v34;
  else
    v35 = (*((_WORD *)v27 + v26 + 2) >> 10) & 3 | 4;
  v36 = (v33 >> 7) & 3 | 4;
  v37 = (v33 >> 7) & 6 | 1;
  if (v32 < 0xFFFE000000000000)
    v37 = (v33 >> 7) & 5 | 2;
  if (v32 >> 49)
    LOBYTE(v36) = v37;
  *((_WORD *)v31 + v26) = v33 & 0xE07F | (v35 << 10) | (v36 << 7);
  v38 = *(JSC::VM **)(v10 + 56);
  v82 = v38;
  v39 = v29;
  if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v29 & 0xFFFE000000000002) != 0)
    {
      if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v29 - 0x2000000000000;
        v48 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
        if (fabs(COERCE_DOUBLE(v29 - 0x2000000000000)) != INFINITY && (double)(int)v48 == *(double *)a9.i64)
        {
          v39 = v48 | 0xFFFE000000000000;
          goto LABEL_36;
        }
      }
      v39 = v29;
    }
    else
    {
      v39 = v29;
      if (*(_BYTE *)(v29 + 5) == 3)
        goto LABEL_36;
      v40 = v10;
      v41 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v40;
      v39 = v41;
    }
    v83 = (JSC::JSObject *)v39;
    if (*((_DWORD *)v38 + 20))
    {
      v61 = v10;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v38, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v61;
      if (hasExceptionsAfterHandlingTraps)
      {
        v39 = 0;
        goto LABEL_36;
      }
    }
    if (v39 <= 0xFFFDFFFFFFFFFFFFLL)
    {
      v66 = v10;
      if ((v39 & 0xFFFE000000000002) != 0)
      {
        if (v39 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          a9.i64[0] = v39 - 0x2000000000000;
          goto LABEL_96;
        }
      }
      else if (*(_BYTE *)(v39 + 5) == 3)
      {
        goto LABEL_36;
      }
      JSC::JSValue::toNumberSlowCase(&v83, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_96:
      v67 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
      if ((v67 - 1023) <= 0x53)
      {
        v72 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
        if (v67 > 0x433)
          LODWORD(v72) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
        if (v67 >= 0x41F)
          v73 = v72;
        else
          v73 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v72)
              + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
        if (a9.i64[0] >= 0)
          v68 = v73;
        else
          v68 = -v73;
      }
      else
      {
        v68 = 0;
      }
      if (*((_DWORD *)v38 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v38, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v39 = 0;
      }
      else
      {
        v39 = v68 | 0xFFFE000000000000;
      }
      v10 = v66;
    }
  }
LABEL_36:
  if (*((_DWORD *)v38 + 20))
  {
    v55 = v10;
    v56 = JSC::VM::hasExceptionsAfterHandlingTraps(v38, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v55;
    if (v56)
      goto LABEL_78;
  }
  v42 = v32;
  if (v32 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_43;
  v43 = *(JSC::VM **)(v10 + 56);
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v32 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v32 - 0x2000000000000)) != INFINITY)
      {
        v77 = (int)*(double *)a9.i64;
        if ((double)(int)v77 == *(double *)a9.i64)
        {
          v42 = v77 | 0xFFFE000000000000;
          goto LABEL_43;
        }
      }
    }
    v42 = v32;
  }
  else
  {
    v42 = v32;
    if (*(_BYTE *)(v32 + 5) == 3)
      goto LABEL_43;
    v44 = v10;
    v45 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v44;
    v42 = v45;
  }
  v83 = (JSC::JSObject *)v42;
  if (*((_DWORD *)v43 + 20))
  {
    v78 = (JSC::JSGlobalObject *)v10;
    v63 = JSC::VM::hasExceptionsAfterHandlingTraps(v43, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = (unint64_t)v78;
    if (v63)
    {
      v42 = 0;
      goto LABEL_43;
    }
  }
  if (v42 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    v79 = (JSC::JSGlobalObject *)v10;
    if ((v42 & 0xFFFE000000000002) != 0)
    {
      v70 = v42 - 0x2000000000000;
      if (v42 - 0x2000000000000 < 0xFFFC000000000000)
        goto LABEL_101;
    }
    else if (*(_BYTE *)(v42 + 5) == 3)
    {
      goto LABEL_43;
    }
    JSC::JSValue::toNumberSlowCase(&v83, (JSC::JSGlobalObject *)v10, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v70 = v69;
LABEL_101:
    v71 = (v70 >> 52) & 0x7FF;
    if ((v71 - 1023) <= 0x53)
    {
      v74 = v70 >> (51 - (v70 >> 52));
      if (v71 > 0x433)
        LODWORD(v74) = v70 << ((v70 >> 52) - 51);
      if (v71 >= 0x41F)
        v75 = v74;
      else
        v75 = (((1 << ((v70 >> 52) + 1)) - 1) & v74) + (1 << ((v70 >> 52) + 1));
      if ((v70 & 0x8000000000000000) == 0)
        v76 = v75;
      else
        v76 = -v75;
      v42 = v76 | 0xFFFE000000000000;
    }
    else
    {
      v42 = 0xFFFE000000000000;
    }
    if (*((_DWORD *)v43 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v43, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v42 = 0;
    }
    v10 = (unint64_t)v79;
  }
LABEL_43:
  if (*((_DWORD *)v38 + 20))
  {
    v58 = v38;
    v59 = v10;
    v60 = JSC::VM::hasExceptionsAfterHandlingTraps(v58, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = v59;
    if (v60)
    {
LABEL_78:
      v46 = 0;
      goto LABEL_47;
    }
  }
  if (v39 < 0xFFFE000000000000 || v42 < 0xFFFE000000000000)
  {
    v64 = v10;
    if ((v39 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v39 + 5) != 3
      || (v42 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(v42 + 5) != 3)
    {
      v65 = JSC::throwTypeError(v10, &v82, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'xor' operation.", 65);
    }
    else
    {
      v65 = JSC::JSBigInt::bitwiseXor((JSC::JSBigInt *)v10, (JSC::JSGlobalObject *)v39, (JSC::JSBigInt *)v42, a4);
    }
    v10 = v64;
    v46 = v65;
  }
  else
  {
    v46 = v42 ^ v39 | 0xFFFE000000000000;
  }
LABEL_47:
  if (HIBYTE(word_1ECF4C620))
  {
    v57 = v10;
    JSC::doExceptionFuzzing(v10, &v81, "CommonSlowPaths", v17);
    v10 = v57;
  }
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing(v10, &v81, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v80) = v46;
  JSC::updateArithProfileForBinaryArithOp((uint64_t)v9, (unsigned __int8 *)v17, v46, v29, v32);
  return (__int128 *)v17;
}

__int128 *slow_path_typeof(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  int v23;
  unint64_t v24;
  JSC::VM *v25;
  _QWORD v26[3];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v25 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1988F50E0);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_37:
    v23 = v15 + v14;
    goto LABEL_38;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (unint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_37;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v23 = *(_DWORD *)(a2 + 6);
LABEL_38:
  v15 = v23;
  v16 = v13;
  if (v23 < 0x40000000)
    goto LABEL_12;
  v24 = (v23 - 0x40000000);
  if (v24 >= *(unsigned int *)(v5 + 172))
    goto LABEL_47;
  v17 = (unint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v24);
LABEL_13:
  v18 = *v17;
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 41984);
  if (*v17 != 10)
  {
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) == 6)
      goto LABEL_19;
    if (v18 >> 49)
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 42008);
      goto LABEL_19;
    }
    if ((v18 & 0xFFFE000000000002) == 0)
    {
      v20 = *(unsigned __int8 *)(v18 + 5);
      switch(v20)
      {
        case 2u:
          v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 42040);
          goto LABEL_19;
        case 4u:
          v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 42048);
          goto LABEL_19;
        case 3u:
          v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 42056);
          goto LABEL_19;
      }
      if (v20 >= 0x17)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) != 0
          && *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == v3)
        {
          goto LABEL_46;
        }
        if ((v20 & 0xFE) == 0x1A
          || (*(_BYTE *)(v18 + 6) & 4) != 0
          && ((*(void (**)(_QWORD *__return_ptr))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(v26),
              LOBYTE(v26[0])))
        {
          v19 += 2;
          goto LABEL_19;
        }
      }
    }
    v19 += 5;
    goto LABEL_19;
  }
LABEL_46:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 42032);
LABEL_19:
  v21 = *v19;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v25, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v21;
  return (__int128 *)v10;
}

__int128 *slow_path_typeof_is_object(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  unint64_t v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v24 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1988F52C0);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_31:
    v22 = v15 + v14;
    goto LABEL_32;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (uint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_31;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
LABEL_32:
  v15 = v22;
  v16 = v13;
  if (v22 < 0x40000000)
    goto LABEL_12;
  v23 = (v22 - 0x40000000);
  if (v23 >= *(unsigned int *)(v5 + 172))
    goto LABEL_38;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v23);
LABEL_13:
  v18 = *v17;
  if ((*v17 & 0xFFFE000000000002) != 0 || (v19 = *(unsigned __int8 *)(v18 + 5), v19 < 0x17))
  {
    if (v18 == 2)
    {
LABEL_21:
      v20 = 7;
      goto LABEL_22;
    }
  }
  else if (((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0
          || *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) != v3)
         && (v19 & 0xFE) != 0x1A)
  {
    if ((*(_BYTE *)(v18 + 6) & 4) == 0)
      goto LABEL_21;
    (*(void (**)(_QWORD *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                 + 0x38))(v25);
    if (!LOBYTE(v25[0]))
      goto LABEL_21;
  }
  v20 = 6;
LABEL_22:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v24, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v20;
  return (__int128 *)v10;
}

__int128 *slow_path_typeof_is_function(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  unint64_t v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v24 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1988F54E4);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_30:
    v22 = v15 + v14;
    goto LABEL_31;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (uint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_30;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
LABEL_31:
  v15 = v22;
  v16 = v13;
  if (v22 < 0x40000000)
    goto LABEL_12;
  v23 = (v22 - 0x40000000);
  if (v23 >= *(unsigned int *)(v5 + 172))
    goto LABEL_37;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v23);
LABEL_13:
  v18 = *v17;
  if ((*v17 & 0xFFFE000000000002) != 0
    || (v19 = *(unsigned __int8 *)(v18 + 5), v19 < 0x17)
    || (*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) != 0
    && *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == v3
    || (v19 & 0xFE) != 0x1A
    && ((*(_BYTE *)(v18 + 6) & 4) == 0
     || ((*(void (**)(_QWORD *__return_ptr))(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                      + 0x38))(v25),
         !LOBYTE(v25[0]))))
  {
    v20 = 6;
  }
  else
  {
    v20 = 7;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v24, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v20;
  return (__int128 *)v10;
}

__int128 *slow_path_instanceof_custom(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  JSC::VM *v29;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v29 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpInstanceofCustom>(v2, v7);
  v14 = v8;
  if (SHIDWORD(v8) >= 0x40000000)
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = (HIDWORD(v8) - 0x40000000);
    if (v24 >= *(unsigned int *)(v23 + 172))
      goto LABEL_29;
    v15 = (uint64_t *)(*(_QWORD *)(v23 + 160) + 8 * v24);
  }
  else
  {
    v15 = (uint64_t *)(a1 + 8 * (v8 >> 32));
  }
  v16 = *v15;
  if ((int)v9 >= 0x40000000)
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = (v9 - 0x40000000);
    if (v26 >= *(unsigned int *)(v25 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988F5738);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v25 + 160) + 8 * v26);
  }
  else
  {
    v17 = (uint64_t *)(a1 + 8 * (int)v9);
  }
  v18 = *v17;
  if (SHIDWORD(v9) < 0x40000000)
  {
    v19 = (uint64_t *)(a1 + 8 * (v9 >> 32));
    goto LABEL_7;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = (HIDWORD(v9) - 0x40000000);
  if (v28 >= *(unsigned int *)(v27 + 172))
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1988F5730);
  }
  v19 = (uint64_t *)(*(_QWORD *)(v27 + 160) + 8 * v28);
LABEL_7:
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v20 = 0;
  }
  else if (*(unsigned __int8 *)(v18 + 5) <= 0x16u)
  {
    v20 = 0;
  }
  else
  {
    v20 = (unsigned int *)v18;
  }
  if (JSC::JSObject::hasInstance(v20, v5, v16, *v19, v10, v11, v12, v13))
    v21 = 7;
  else
    v21 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v29, "CommonSlowPaths", v2);
  if (*((_QWORD *)v6 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v14) = v21;
  return (__int128 *)v2;
}

double JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpInstanceofCustom>(unsigned __int8 *a1, int8x8_t a2)
{
  int v2;
  int16x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x2_t v9;
  int8x16_t v10;
  int32x2_t v11;
  int8x16_t v12;
  double result;
  int16x4_t v14;
  int32x4_t v15;

  v2 = *a1;
  if (v2 == 130)
  {
    v8 = *(int8x16_t *)(a1 + 2);
  }
  else
  {
    if (v2 == 128)
    {
      v14 = *(int16x4_t *)(a1 + 2);
      v4 = vmovl_s16(v14);
      v15.i64[0] = 0x3F0000003FLL;
      v15.i64[1] = 0x3F0000003FLL;
      v6 = (int8x16_t)vcgtq_s32(v4, v15);
      v7 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v14);
    }
    else
    {
      a2.i32[0] = *(_DWORD *)(a1 + 1);
      v3 = (int16x4_t)vmovl_s8(a2).u64[0];
      v4 = vmovl_s16(v3);
      v5.i64[0] = 0xF0000000FLL;
      v5.i64[1] = 0xF0000000FLL;
      v6 = (int8x16_t)vcgtq_s32(v4, v5);
      v7 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v3);
    }
    v8 = vbslq_s8(v6, v7, (int8x16_t)v4);
  }
  v9 = (int32x2_t)vextq_s8(v8, v8, 8uLL).u64[0];
  v10 = (int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)v8.i8, v9), 0x20uLL);
  v11 = vzip1_s32(*(int32x2_t *)v8.i8, v9);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  *(_QWORD *)&result = vorrq_s8(v10, v12).u64[0];
  return result;
}

__int128 *slow_path_is_callable(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  unint64_t v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v24 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1988F593CLL);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_29:
    v22 = v15 + v14;
    goto LABEL_30;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (uint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_29;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
LABEL_30:
  v15 = v22;
  v16 = v13;
  if (v22 < 0x40000000)
    goto LABEL_12;
  v23 = (v22 - 0x40000000);
  if (v23 >= *(unsigned int *)(v5 + 172))
    goto LABEL_34;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v23);
LABEL_13:
  v18 = *v17;
  if ((*v17 & 0xFFFE000000000002) == 0
    && (v19 = *(unsigned __int8 *)(v18 + 5), v19 >= 0x17)
    && ((v19 & 0xFE) == 0x1A
     || (*(_BYTE *)(v18 + 6) & 4) != 0
     && ((*(void (**)(_QWORD *__return_ptr))(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                      + 0x38))(v25),
         LOBYTE(v25[0]))))
  {
    v20 = 7;
  }
  else
  {
    v20 = 6;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v24, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v20;
  return (__int128 *)v10;
}

__int128 *slow_path_is_constructor(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  _QWORD v24[3];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v23 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1988F5B8CLL);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v15 = *((__int16 *)a2 + 2);
    if (v15 <= 63)
      goto LABEL_11;
LABEL_26:
    v21 = v15 + v14;
    goto LABEL_27;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
    {
LABEL_11:
      v16 = v13;
LABEL_12:
      v17 = (uint64_t *)(a1 + 8 * v15);
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  v13 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
LABEL_27:
  v15 = v21;
  v16 = v13;
  if (v21 < 0x40000000)
    goto LABEL_12;
  v22 = (v21 - 0x40000000);
  if (v22 >= *(unsigned int *)(v5 + 172))
    goto LABEL_33;
  v17 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v22);
LABEL_13:
  v18 = *v17;
  if ((*v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
  {
    v19 = 6;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                 + 0x40))(v24);
    if (LOBYTE(v24[0]))
      v19 = 7;
    else
      v19 = 6;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v23, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v19;
  return (__int128 *)v10;
}

char *iterator_open_try_fast_narrow(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  JSC::Heap *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  JSC::Heap *v45;
  JSC::Heap *v46;
  JSC::Heap *v47;
  uint64_t SlowCase;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v8 = a2;
  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = v9[9];
  *(_QWORD *)(v11 + 40) = a1;
  v12 = a2[1];
  v13 = v12 + 1073741808;
  if (v12 <= 15)
    v13 = a2[1];
  v14 = a2[2];
  if (v14 > 15)
    v14 += 1073741808;
  v15 = a2[3];
  if (v15 <= 15)
    v16 = a2[3];
  else
    v16 = v15 + 1073741808;
  v17 = v8[4];
  if (v17 > 15)
    v17 += 1073741808;
  v18 = v9[17];
  v19 = *(unsigned __int16 *)(v18 + 8);
  if (!*(_WORD *)(v18 + 8))
    v19 = *(_DWORD *)(v18 + 112);
  v20 = v8[7];
  v21 = v8[9];
  v22 = 0x40000000;
  if (v17 >= 0x40000000)
  {
    v40 = *(_QWORD *)(a1 + 16);
    v41 = v17 - 0x40000000;
    a5 = *(unsigned int *)(v40 + 172);
    if (v41 >= a5)
      goto LABEL_52;
    v22 = *(_QWORD *)(v40 + 160);
    v23 = (uint64_t *)(v22 + 8 * v41);
  }
  else
  {
    v23 = (uint64_t *)(a1 + 8 * v17);
  }
  v24 = *v23;
  *(_QWORD *)(v18 - 16 * v8[6] - 16) = v24;
  if (v16 >= 0x40000000)
  {
    v42 = *(_QWORD *)(a1 + 16);
    v43 = v16 - 0x40000000;
    v22 = *(unsigned int *)(v42 + 172);
    if (v43 < v22)
    {
      v25 = (uint64_t *)(*(_QWORD *)(v42 + 160) + 8 * v43);
      goto LABEL_16;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x1988F5F2CLL);
  }
  v25 = (uint64_t *)(a1 + 8 * v16);
LABEL_16:
  v26 = (v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 36)
    goto LABEL_41;
  v27 = *v25;
  v28 = *(_QWORD *)(v10 + 2216);
  v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
  v30 = (_DWORD)v29 != 2 && (v27 & 0xFFFE000000000002) == 0;
  if (!v30 || *(_BYTE *)(v27 + 5) != 26)
    goto LABEL_41;
  v31 = *(_QWORD *)(v10 + 528);
  if ((v31 & 1) != 0)
    v31 = 0;
  if (v31 != v27)
  {
LABEL_41:
    *(_BYTE *)(v26 + 112 * v21 + 108) |= 1u;
    return v8;
  }
  *(_BYTE *)(v26 + 112 * v21 + 108) |= 2u;
  *(_QWORD *)(a1 + 8 * v14) = 0;
  v32 = *(_DWORD *)(v10 + 1000);
  if (v32)
    v33 = 16 * (v32 & 0xFFFFFFFE);
  else
    v33 = 0;
  v34 = *(JSC::Heap **)(v11 + 40328);
  if (!v34)
  {
    v68 = a1;
    v59 = v11;
    v65 = v8;
    v53 = v24;
    v56 = v13;
    v62 = v20;
    v51 = v33;
    v45 = JSC::GCClient::Heap::arrayIteratorSpaceSlow((JSC::Heap **)(v11 + 37552));
    v33 = v51;
    v24 = v53;
    v11 = v59;
    v20 = v62;
    v13 = v56;
    v34 = v45;
    v8 = v65;
    a1 = v68;
  }
  v35 = v11 + 192;
  v36 = *((_QWORD *)v34 + 3);
  if (v36 >= *((_QWORD *)v34 + 4))
  {
    v36 = *((_QWORD *)v34 + 5);
    if ((v36 & 1) != 0)
    {
      v69 = a1;
      v60 = v11;
      v66 = v8;
      v49 = v9;
      v50 = v11 + 192;
      v46 = v34;
      v54 = v24;
      v57 = v13;
      v63 = v20;
      v52 = v33;
      JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v36, v29, v22, a5, a6, a7, a8);
      v47 = v46;
      v9 = v49;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v47, v50, 48, 0, 0);
      v33 = v52;
      v24 = v54;
      v11 = v60;
      v20 = v63;
      v13 = v57;
      v35 = v50;
      v36 = SlowCase;
      v8 = v66;
      a1 = v69;
      goto LABEL_36;
    }
    v44 = *(_QWORD *)(v36 + 8) ^ *((_QWORD *)v34 + 6);
    *((_QWORD *)v34 + 4) = v36 + HIDWORD(v44);
    *((_QWORD *)v34 + 5) = v36 + (int)v44;
  }
  *((_QWORD *)v34 + 3) = v36 + 48;
LABEL_36:
  *(_DWORD *)v36 = 0;
  v37 = *(_DWORD *)(v33 + 8);
  *(_DWORD *)v36 = v33 >> 4;
  *(_DWORD *)(v36 + 4) = v37;
  *(_OWORD *)(v36 + 24) = 0u;
  *(_OWORD *)(v36 + 8) = 0u;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v36 + 24) = v24;
  *(_QWORD *)(v36 + 32) = 0xFFFE000000000000;
  v38 = v13;
  *(_QWORD *)(v36 + 16) = 0xFFFE000000000000;
  if (v24 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v36 + 7))
  {
    v64 = v8;
    v67 = a1;
    v58 = v36;
    v61 = v20;
    v55 = v13;
    JSC::Heap::writeBarrierSlowPath(v35, v36);
    v38 = v55;
    v36 = v58;
    v20 = v61;
    v8 = v64;
    a1 = v67;
  }
  *(_QWORD *)(v36 + 32) = 0xFFFE000000000001;
  *(_QWORD *)(a1 + 8 * v38) = v36;
  *(_QWORD *)(v9[17] - 16 * v20 - 16) = v36;
  return v8;
}

uint64_t iterator_open_try_fast_wide16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  JSC::VM *v34;
  JSC::VM *v35;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;

  v10 = *(_QWORD **)(a1 + 16);
  v11 = v10[1];
  v12 = v10[9];
  *(_QWORD *)(v12 + 40) = a1;
  v13 = *(__int16 *)(a2 + 2);
  if (v13 <= 63)
    v14 = *(__int16 *)(a2 + 2);
  else
    v14 = v13 + 1073741760;
  v15 = *(__int16 *)(a2 + 4);
  if (v15 > 63)
    v15 += 1073741760;
  v16 = *(__int16 *)(a2 + 6);
  if (v16 <= 63)
    v17 = *(__int16 *)(a2 + 6);
  else
    v17 = v16 + 1073741760;
  v18 = *(__int16 *)(a2 + 8);
  if (v18 <= 63)
    v19 = *(__int16 *)(a2 + 8);
  else
    v19 = v18 + 1073741760;
  v20 = v10[17];
  v21 = *(unsigned __int16 *)(v20 + 8);
  if (!*(_WORD *)(v20 + 8))
    v21 = *(_DWORD *)(v20 + 112);
  v22 = *(unsigned __int16 *)(a2 + 14);
  v23 = *(unsigned __int16 *)(a2 + 18);
  if (v19 >= 0x40000000)
  {
    v37 = *(_QWORD *)(a1 + 16);
    v38 = v19 - 0x40000000;
    if (v38 >= *(_DWORD *)(v37 + 172))
      goto LABEL_42;
    v24 = (uint64_t *)(*(_QWORD *)(v37 + 160) + 8 * v38);
  }
  else
  {
    v24 = (uint64_t *)(a1 + 8 * v19);
  }
  v25 = *v24;
  *(_QWORD *)(v20 - 16 * *(unsigned __int16 *)(a2 + 12) - 16) = *v24;
  if (v17 >= 0x40000000)
  {
    v39 = *(_QWORD *)(a1 + 16);
    v40 = v17 - 0x40000000;
    if (v40 < *(_DWORD *)(v39 + 172))
    {
      v26 = (uint64_t *)(*(_QWORD *)(v39 + 160) + 8 * v40);
      goto LABEL_18;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x1988F612CLL);
  }
  v26 = (uint64_t *)(a1 + 8 * v17);
LABEL_18:
  v27 = (v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v25 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v25 + 5) != 36)
    goto LABEL_36;
  v28 = *v26;
  v29 = *(_QWORD *)(v11 + 2216);
  v30 = (v29 & 1) != 0 ? (v29 >> 1) & 3 : *(unsigned __int8 *)(v29 + 4);
  v31 = v30 != 2 && (v28 & 0xFFFE000000000002) == 0;
  if (!v31 || *(_BYTE *)(v28 + 5) != 26)
    goto LABEL_36;
  v32 = *(_QWORD *)(v11 + 528);
  if ((v32 & 1) != 0)
    v32 = 0;
  if (v32 == v28)
  {
    *(_BYTE *)(v27 + 112 * v23 + 108) |= 2u;
    *(_QWORD *)(a1 + 8 * v15) = 0;
    v33 = *(_DWORD *)(v11 + 1000);
    if (v33)
      v34 = (JSC::VM *)(16 * (v33 & 0xFFFFFFFE));
    else
      v34 = 0;
    v35 = JSC::JSArrayIterator::create(v12, v34, v25, 0xFFFE000000000001, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 8 * v14) = v35;
    *(_QWORD *)(v10[17] - 16 * v22 - 16) = v35;
  }
  else
  {
LABEL_36:
    *(_BYTE *)(v27 + 112 * v23 + 108) |= 1u;
  }
  return a2;
}

uint64_t iterator_open_try_fast_wide32(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  int IterationMode;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  JSC::VM *v26;
  JSC::VM *v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = v4[1];
  v6 = v4[9];
  *(_QWORD *)(v6 + 40) = a1;
  v7 = *(int *)(a2 + 14);
  v8 = v4[17];
  v9 = *(unsigned __int16 *)(v8 + 8);
  if (!*(_WORD *)(v8 + 8))
    v9 = *(_DWORD *)(v8 + 112);
  v10 = *(int *)(a2 + 10);
  v11 = *(unsigned int *)(a2 + 26);
  v12 = *(_DWORD *)(a2 + 34);
  v13 = *(int *)(a2 + 2);
  v14 = *(int *)(a2 + 6);
  if ((int)v7 >= 0x40000000)
  {
    v29 = *(_QWORD *)(a1 + 16);
    v30 = v7 - 0x40000000;
    if (v30 >= *(_DWORD *)(v29 + 172))
      goto LABEL_18;
    v15 = (uint64_t *)(*(_QWORD *)(v29 + 160) + 8 * v30);
  }
  else
  {
    v15 = (uint64_t *)(a1 + 8 * v7);
  }
  v16 = *v15;
  *(_QWORD *)(v8 - 16 * *(unsigned int *)(a2 + 22) - 16) = *v15;
  v33 = v14;
  if ((int)v10 < 0x40000000)
  {
    v17 = (uint64_t *)(a1 + 8 * v10);
    goto LABEL_7;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = v10 - 0x40000000;
  if (v32 >= *(_DWORD *)(v31 + 172))
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1988F62D0);
  }
  v17 = (uint64_t *)(*(_QWORD *)(v31 + 160) + 8 * v32);
LABEL_7:
  v18 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  IterationMode = JSC::getIterationMode(v6, v5, v16, *v17);
  v24 = v18 + 112 * v12;
  if (IterationMode == 2)
  {
    *(_BYTE *)(v24 + 108) |= 2u;
    *(_QWORD *)(a1 + 8 * v33) = 0;
    v25 = *(_DWORD *)(v5 + 1000);
    if (v25)
      v26 = (JSC::VM *)(16 * (v25 & 0xFFFFFFFE));
    else
      v26 = 0;
    v27 = JSC::JSArrayIterator::create(v6, v26, v16, 0xFFFE000000000001, v20, v21, v22, v23);
    *(_QWORD *)(a1 + 8 * v13) = v27;
    *(_QWORD *)(v4[17] - 16 * v11 - 16) = v27;
  }
  else
  {
    *(_BYTE *)(v24 + 108) |= 1u;
  }
  return a2;
}

__int128 *iterator_next_try_fast_narrow(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t Index;
  JSC::VM *v37;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v37 = v10;
  v11 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *v11;
  v13 = *((unsigned int *)v11 + 3) + *v11;
  if (v12 > a2 || v13 <= a2)
    goto LABEL_39;
  v15 = (const void *)a2;
  *(_DWORD *)(a1 + 36) = (a2 - v12) & 0x3FFFFFFF;
  v17 = *(char *)(a2 + 1);
  if (v17 > 15)
    v17 += 1073741808;
  v18 = *(char *)(a2 + 2);
  if (v18 <= 15)
    v19 = *(char *)(a2 + 2);
  else
    v19 = v18 + 1073741808;
  v20 = *(char *)(a2 + 3);
  if (v20 <= 15)
    v21 = *(char *)(a2 + 3);
  else
    v21 = v20 + 1073741808;
  v22 = *(char *)(a2 + 5);
  v23 = v22 + 1073741808;
  if (v22 <= 15)
    v23 = *(char *)(a2 + 5);
  v24 = v8[17];
  v25 = *(unsigned __int16 *)(v24 + 4);
  if (!*(_WORD *)(v24 + 4))
    v25 = *(_DWORD *)(v24 + 104);
  v26 = *(_QWORD *)(a1 + 8 * v23);
  if (!v26 || *(_BYTE *)(v26 + 5) != 64 || (v27 = *(_QWORD *)(a1 + 8 * v21)) == 0 || *(_BYTE *)(v27 + 5) != 36)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1988F650CLL);
  }
  v28 = *(unsigned __int8 *)(a2 + 9);
  v29 = ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 7);
  *(_DWORD *)(v29 + 112) = *(_DWORD *)v27;
  *(_BYTE *)(v29 + 124) |= 2u;
  v32 = *(_QWORD *)(v26 + 16);
  v30 = v32 >= 0xFFFE000000000000;
  v31 = (uint64_t)COERCE_DOUBLE(v32 - 0x2000000000000);
  v32 = (int)v32;
  if (!v30)
    v32 = v31;
  if (v32 == -1
    || ((*(_BYTE *)(v27 + 4) & 0xE) == 0 ? (v33 = 0) : (v33 = *(unsigned int *)(*(_QWORD *)(v27 + 8) - 8)),
        (uint64_t)v32 >= v33))
  {
    Index = 0;
    *(_QWORD *)(a1 + 8 * v17) = 7;
    *(_QWORD *)(v26 + 16) = 0xFFFE0000FFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(a1 + 8 * v17) = 6;
    v34 = COERCE__INT64((double)(uint64_t)(v32 + 1)) + 0x2000000000000;
    if (!((v32 + 2147483649u) >> 32))
      v34 = (v32 + 1) | 0xFFFE000000000000;
    *(_QWORD *)(v26 + 16) = v34;
    Index = JSC::JSObject::getIndex((JSC::JSObject *)v27, v9, v32, a4, a5, a6, a7, a8);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v9, &v37, "CommonSlowPaths", v15);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(v8[17] - 16 * v28 - 16) = Index;
  }
  *(_QWORD *)(a1 + 8 * v19) = Index;
  return (__int128 *)v15;
}

__int128 *iterator_next_try_fast_wide16(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t Index;
  JSC::VM *v37;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v37 = v10;
  v11 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *v11;
  v13 = *((unsigned int *)v11 + 3) + *v11;
  if (v12 > a2 || v13 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F67ACLL);
  }
  v15 = (const void *)a2;
  *(_DWORD *)(a1 + 36) = (a2 - v12) & 0x3FFFFFFF;
  v17 = *(__int16 *)(a2 + 2);
  if (v17 > 63)
    v17 += 1073741760;
  v18 = *(__int16 *)(a2 + 4);
  if (v18 <= 63)
    v19 = *(__int16 *)(a2 + 4);
  else
    v19 = v18 + 1073741760;
  v20 = *(__int16 *)(a2 + 6);
  if (v20 <= 63)
    v21 = *(__int16 *)(a2 + 6);
  else
    v21 = v20 + 1073741760;
  v22 = *(__int16 *)(a2 + 10);
  v23 = v22 + 1073741760;
  if (v22 <= 63)
    v23 = *(__int16 *)(a2 + 10);
  v24 = v8[17];
  v25 = *(unsigned __int16 *)(v24 + 4);
  if (!*(_WORD *)(v24 + 4))
    v25 = *(_DWORD *)(v24 + 104);
  v26 = *(_QWORD *)(a1 + 8 * v23);
  if (!v26 || *(_BYTE *)(v26 + 5) != 64 || (v27 = *(_QWORD *)(a1 + 8 * v21)) == 0 || *(_BYTE *)(v27 + 5) != 36)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F678CLL);
  }
  v28 = *(unsigned __int16 *)(a2 + 18);
  v29 = ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 7);
  *(_DWORD *)(v29 + 112) = *(_DWORD *)v27;
  *(_BYTE *)(v29 + 124) |= 2u;
  v32 = *(_QWORD *)(v26 + 16);
  v30 = v32 >= 0xFFFE000000000000;
  v31 = (uint64_t)COERCE_DOUBLE(v32 - 0x2000000000000);
  v32 = (int)v32;
  if (!v30)
    v32 = v31;
  if (v32 == -1
    || ((*(_BYTE *)(v27 + 4) & 0xE) == 0 ? (v33 = 0) : (v33 = *(unsigned int *)(*(_QWORD *)(v27 + 8) - 8)),
        (uint64_t)v32 >= v33))
  {
    Index = 0;
    *(_QWORD *)(a1 + 8 * v17) = 7;
    *(_QWORD *)(v26 + 16) = 0xFFFE0000FFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(a1 + 8 * v17) = 6;
    v34 = COERCE__INT64((double)(uint64_t)(v32 + 1)) + 0x2000000000000;
    if (!((v32 + 2147483649u) >> 32))
      v34 = (v32 + 1) | 0xFFFE000000000000;
    *(_QWORD *)(v26 + 16) = v34;
    Index = JSC::JSObject::getIndex((JSC::JSObject *)v27, v9, v32, a4, a5, a6, a7, a8);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v9, &v37, "CommonSlowPaths", v15);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(v8[17] - 16 * v28 - 16) = Index;
  }
  *(_QWORD *)(a1 + 8 * v19) = Index;
  return (__int128 *)v15;
}

__int128 *iterator_next_try_fast_wide32(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t Index;
  JSC::VM *v32;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v32 = v10;
  v11 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *v11;
  v13 = *((unsigned int *)v11 + 3) + *v11;
  if (v12 > a2 || v13 <= a2)
    goto LABEL_29;
  v15 = (const void *)a2;
  *(_DWORD *)(a1 + 36) = (a2 - v12) & 0x3FFFFFFF;
  v17 = v8[17];
  v18 = *(unsigned __int16 *)(v17 + 4);
  if (!*(_WORD *)(v17 + 4))
    v18 = *(_DWORD *)(v17 + 104);
  v19 = *(_QWORD *)(a1 + 8 * *(int *)(a2 + 18));
  if (!v19
    || *(_BYTE *)(v19 + 5) != 64
    || (v20 = *(_QWORD *)(a1 + 8 * *(int *)(a2 + 10))) == 0
    || *(_BYTE *)(v20 + 5) != 36)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1988F69D8);
  }
  v21 = *(unsigned int *)(a2 + 34);
  v22 = *(int *)(a2 + 2);
  v23 = *(int *)(a2 + 6);
  v24 = ((v17 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)*(unsigned int *)(a2 + 38) << 7);
  *(_DWORD *)(v24 + 112) = *(_DWORD *)v20;
  *(_BYTE *)(v24 + 124) |= 2u;
  v27 = *(_QWORD *)(v19 + 16);
  v25 = v27 >= 0xFFFE000000000000;
  v26 = (uint64_t)COERCE_DOUBLE(v27 - 0x2000000000000);
  v27 = (int)v27;
  if (!v25)
    v27 = v26;
  if (v27 == -1
    || ((*(_BYTE *)(v20 + 4) & 0xE) == 0 ? (v28 = 0) : (v28 = *(unsigned int *)(*(_QWORD *)(v20 + 8) - 8)),
        (uint64_t)v27 >= v28))
  {
    Index = 0;
    *(_QWORD *)(a1 + 8 * v22) = 7;
    *(_QWORD *)(v19 + 16) = 0xFFFE0000FFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(a1 + 8 * v22) = 6;
    v29 = COERCE__INT64((double)(uint64_t)(v27 + 1)) + 0x2000000000000;
    if (!((v27 + 2147483649u) >> 32))
      v29 = (v27 + 1) | 0xFFFE000000000000;
    *(_QWORD *)(v19 + 16) = v29;
    Index = JSC::JSObject::getIndex((JSC::JSObject *)v20, v9, v27, a4, a5, a6, a7, a8);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v9, &v32, "CommonSlowPaths", v15);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(v8[17] - 16 * v21 - 16) = Index;
  }
  *(_QWORD *)(a1 + 8 * v23) = Index;
  return (__int128 *)v15;
}

__int128 *slow_path_strcat(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::VM *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  unint64_t v39;
  int *v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  JSC *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  WTF *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::VM *v56;
  JSC::VM *v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  JSC::VM *v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  WTF *v80;
  uint64_t v81;
  JSC::VM *v82;
  unint64_t v83;
  unsigned __int8 *v84;
  JSC::VM *v85;
  _QWORD *v86;
  JSC *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int *v92;
  unint64_t v93;
  int *v94;
  unint64_t v95;
  int *v96;
  int v97;
  int v98;
  uint64_t *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  JSC *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int *v111;
  unint64_t v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t *v119;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  JSC::VM *v129;
  unsigned __int8 *v130;
  unint64_t v131;
  JSC::VM *v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  JSC::VM *v147;
  JSC::VM *v148;
  unsigned __int8 *v149;
  unint64_t v150;
  uint64_t v151;
  WTF *v152;
  JSC::VM *v153;
  WTF *v154;
  uint64_t v155;
  JSC::VM *v156;
  unsigned __int8 *v157;
  JSC::VM *v158;
  JSC::JSGlobalObject *v159;
  unint64_t OutOfMemoryError;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::Exception *v166;
  uint64_t v167;
  int v168;
  JSC::VM *v169;
  unint64_t v170;
  unsigned __int8 *v171;
  JSC::VM *v172;
  int v174;
  JSC::VM *v175;
  unint64_t v176;
  unsigned __int8 *v177;
  JSC::VM *v178;
  unint64_t v179;
  WTF *v180;
  uint64_t v181;
  BOOL v182;
  unint64_t v185;
  JSC::VM *v186;
  unsigned __int8 *v187;
  int v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  _QWORD *v193;
  uint64_t (*v194)(_QWORD *);
  unsigned __int8 *v195;
  unint64_t v196;
  JSC::VM *v197;
  WTF *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  JSC::VM *v202;
  unsigned __int8 *v203;
  unint64_t v204;
  JSC::VM *v205;
  uint64_t v206;
  WTF *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  JSC::VM *v212;
  uint64_t v213;
  WTF *v214;
  uint64_t v215;
  unint64_t v216;
  JSC::VM *v217;
  uint64_t v218;
  WTF *v219;
  uint64_t SlowCase;
  uint64_t v221;
  JSC::VM *v222;
  unsigned __int8 *v223;
  unint64_t v224;
  JSC::VM *v225;
  uint64_t v226;
  WTF *v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  int v232;
  JSC::VM *v233;
  unint64_t v234;
  unint64_t v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  JSC::VM *v239;
  JSC::VM *v240;
  JSC::VM *v241;
  JSC::VM *v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WTF *v250;
  WTF *v251;
  WTF *v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  JSC::VM *v263;
  char v264;
  JSC *v265;
  char v266;
  uint64_t v267;
  WTF *v268;
  _OWORD v269[5];
  _QWORD v270[3];
  uint64_t v271[2];

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v263 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F768CLL);
  }
  v16 = (JSC::VM *)a1;
  *(_DWORD *)(a1 + 36) = ((_DWORD)v8 - v13) & 0x3FFFFFFF;
  v17 = *v8;
  if (v17 == 128)
  {
    v189 = *((__int16 *)v8 + 1);
    if (v189 <= 63)
      v19 = v189;
    else
      v19 = (v189 + 1073741760);
    v20 = *((__int16 *)v8 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)v8 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(unsigned int *)(v8 + 2);
    v20 = *(_DWORD *)(v8 + 6);
    v21 = *(unsigned int *)(v8 + 10);
  }
  else
  {
    v18 = (char)v8[1];
    if (v18 <= 15)
      v19 = v18;
    else
      v19 = (v18 + 1073741808);
    v20 = (char)v8[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = v8[3];
  }
  v22 = *(_QWORD *)(v10 + 56);
  v264 = 0;
  v265 = (JSC *)v22;
  v266 = 0;
  v267 = 0x800000000;
  v23 = (WTF *)((char *)v269 + 8);
  v268 = (WTF *)((char *)v269 + 8);
  memset(v269, 0, 76);
  if (!(_DWORD)v21)
  {
LABEL_143:
    v104 = *((_QWORD *)v265 + 5246);
LABEL_128:
    v266 = 0;
    LODWORD(v267) = 0;
    DWORD2(v269[4]) = 0;
    goto LABEL_129;
  }
  v24 = 0;
  a7 = (uint64_t)v16 + 8 * v20;
  a6 = 0xFFFE000000000002;
  a8 = 39432;
  while (2)
  {
    v25 = *(_QWORD *)(a7 + 8 * -v24);
    if ((v25 & 0xFFFE000000000002) != 0)
    {
      v53 = *(_QWORD *)(v10 + 56);
      if (v25 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v122 = v25 - 0x2000000000000;
        if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
          goto LABEL_78;
        v54 = v22;
        v55 = v21;
        v56 = v16;
        v58 = v8;
        v59 = v10;
        v57 = v11;
        v60 = v19;
        v61 = v23;
        v62 = a7;
        v63 = JSC::numberToString(*(JSC **)(v10 + 56), (JSC::VM *)0xA, v122, (int)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
      }
      else
      {
        v54 = v22;
        v55 = v21;
        v56 = v16;
        v57 = v11;
        v58 = v8;
        v59 = v10;
        v60 = v19;
        v61 = v23;
        v62 = a7;
        v63 = JSC::int32ToString(*(_QWORD *)(v10 + 56), *(JSC::VM **)(a7 + 8 * -v24), (const WTF::String *)0xA, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
      }
      a8 = 39432;
      a7 = v62;
      a6 = 0xFFFE000000000002;
      v23 = v61;
      v19 = v60;
      v11 = v57;
      v10 = v59;
      v8 = v58;
      v16 = v56;
      v25 = v63;
      v21 = v55;
      v22 = v54;
      goto LABEL_18;
    }
    if (*(_BYTE *)(v25 + 5) == 2)
      goto LABEL_18;
    v53 = *(_QWORD *)(v10 + 56);
LABEL_78:
    switch(v25)
    {
      case 2uLL:
        v25 = *(_QWORD *)(v53 + 42016);
        goto LABEL_18;
      case 6uLL:
        v25 = *(_QWORD *)(v53 + 41992);
        goto LABEL_18;
      case 7uLL:
        v25 = *(_QWORD *)(v53 + 42064);
        goto LABEL_18;
      case 0xAuLL:
        v25 = *(_QWORD *)(v53 + 42032);
        goto LABEL_18;
      default:
        v253 = v21;
        v258 = v22;
        v69 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x40);
        if (v69)
        {
          if (*(_BYTE *)(v69 + 5) != 1)
          {
            v123 = *(_QWORD *)(v69 + 64);
            if (v123)
            {
              if ((*(_QWORD *)(v123 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v124 = *(_QWORD *)(v123 + 40);
                if (v124 == 1)
                  v125 = 0;
                else
                  v125 = v124;
                v126 = *(_QWORD *)(v10 + 512);
                if ((v126 & 1) != 0)
                {
                  v193 = (_QWORD *)(v10 - 16);
                  if ((v10 & 8) == 0)
                    v193 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
                  v194 = *(uint64_t (**)(_QWORD *))(v126 & 0xFFFFFFFFFFFFFFFCLL);
                  v270[0] = *v193;
                  v270[1] = v10;
                  v270[2] = v10 + 512;
                  v239 = v16;
                  v195 = v8;
                  v196 = v10;
                  v197 = v11;
                  v245 = v19;
                  v198 = v23;
                  v199 = a7;
                  v126 = v194(v270);
                  a7 = v199;
                  v23 = v198;
                  v19 = v245;
                  v11 = v197;
                  v10 = v196;
                  v8 = v195;
                  v16 = v239;
                }
                if (v126 == v125)
                {
                  v127 = *(_QWORD *)(v69 + 64);
                  if (v127)
                  {
                    v128 = *(_QWORD *)(v127 + 16);
                    if (v128 >= 2)
                    {
                      v70 = a7;
                      v71 = (uint64_t)v23;
                      v72 = v19;
                      v73 = (uint64_t)v11;
                      v77 = v10;
                      v74 = v8;
                      v75 = v16;
                      v25 = v128;
                      goto LABEL_83;
                    }
                  }
                }
              }
            }
          }
        }
        v70 = a7;
        v71 = (uint64_t)v23;
        v72 = v19;
        v73 = (uint64_t)v11;
        v74 = v8;
        v75 = v16;
        v76 = *(unsigned __int8 *)(v25 + 5);
        if (v76 >= 0x17)
        {
          v77 = v10;
          v78 = JSC::JSObject::toString((JSC::JSObject *)v25, (JSC::JSGlobalObject *)v10);
LABEL_82:
          v25 = v78;
          goto LABEL_83;
        }
        v77 = v10;
        if (v76 != 2)
        {
          v78 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v25, (JSC::JSGlobalObject *)v10, (uint64_t)v11, v19, (uint64_t)v23, a6, a7, a8);
          goto LABEL_82;
        }
LABEL_83:
        v16 = v75;
        v8 = v74;
        v11 = (JSC::VM *)v73;
        v19 = v72;
        v23 = (WTF *)v71;
        v22 = v258;
        v21 = v253;
        a6 = 0xFFFE000000000002;
        a7 = v70;
        a8 = 39432;
        if (*(_DWORD *)(v53 + 80))
        {
          v192 = *(_DWORD *)(v53 + 80);
          if ((v192 & 0x27) != 0)
          {
            if ((v192 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v73, v72, v71, 0xFFFE000000000002, v70, 39432);
            v11 = (JSC::VM *)v73;
            v19 = v72;
            v16 = v75;
            v8 = v74;
            v10 = v77;
            v23 = (WTF *)v71;
            v22 = v258;
            v21 = v253;
            a6 = 0xFFFE000000000002;
            a7 = v70;
            a8 = 39432;
            if (*(_QWORD *)(v53 + 16))
LABEL_231:
              v25 = *(_QWORD *)(v53 + 41968);
          }
          else
          {
            v10 = v77;
            if (*(_QWORD *)(v53 + 16))
              goto LABEL_231;
          }
        }
        else
        {
          v10 = v77;
        }
LABEL_18:
        if (*(_DWORD *)(v22 + 80))
        {
          v174 = *(_DWORD *)(v22 + 80);
          if ((v174 & 0x27) != 0 && (v174 & 0x20) == 0)
          {
            v221 = v22;
            v257 = v21;
            v222 = v16;
            v223 = v8;
            v224 = v10;
            v225 = v11;
            v226 = v19;
            v227 = v23;
            v228 = a7;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
            a8 = 39432;
            a7 = v228;
            a6 = 0xFFFE000000000002;
            v21 = v257;
            v22 = v221;
            v23 = v227;
            v19 = v226;
            v11 = v225;
            v10 = v224;
            v8 = v223;
            v16 = v222;
          }
          if (*(_QWORD *)(v22 + 16))
          {
            v104 = 0;
            goto LABEL_129;
          }
        }
        if (v264)
          goto LABEL_175;
        v26 = *(_QWORD *)(v25 + 8);
        v27 = v26 & 1;
        v28 = (_DWORD *)(v26 + 4);
        if ((v26 & 1) != 0)
          v28 = (_DWORD *)(v25 + 16);
        if (!*v28)
        {
LABEL_33:
          if (++v24 == (_DWORD)v21)
          {
            if (v264)
            {
              __break(0xC471u);
              JUMPOUT(0x1988F76ECLL);
            }
            switch((int)v267)
            {
              case 0:
                goto LABEL_143;
              case 1:
                v104 = *(_QWORD *)v268;
                goto LABEL_128;
              case 2:
                v106 = v265;
                v107 = (uint64_t *)((char *)v265 + 39432);
                v109 = *(_QWORD *)v268;
                v108 = *((_QWORD *)v268 + 1);
                v110 = *(_QWORD *)(*(_QWORD *)v268 + 8);
                v111 = (int *)(v110 + 4);
                if ((v110 & 1) != 0)
                  v111 = (int *)(*(_QWORD *)v268 + 16);
                v112 = *(_QWORD *)(v108 + 8);
                v113 = (int *)(v108 + 16);
                if ((v112 & 1) == 0)
                  v113 = (int *)(v112 + 4);
                if ((v110 & 1) != 0)
                  v110 = (v110 >> 2) & 1;
                else
                  LODWORD(v110) = (*(unsigned __int8 *)(v110 + 16) >> 2) & 1;
                v114 = *v111;
                v115 = *v113;
                if ((v112 & 1) != 0)
                  v112 = (v112 >> 2) & 1;
                else
                  LODWORD(v112) = (*(unsigned __int8 *)(v112 + 16) >> 2) & 1;
                v116 = v115 + v114;
                v117 = v110 & v112;
                v104 = *v107;
                if ((unint64_t)*v107 < *((_QWORD *)v265 + 4930))
                  goto LABEL_123;
                v104 = *((_QWORD *)v265 + 4931);
                if ((v104 & 1) != 0)
                {
                  v238 = v8;
                  v242 = v16;
                  v216 = v10;
                  v217 = v11;
                  v218 = v19;
                  v219 = v23;
                  JSC::sanitizeStackForVM(v265, v16, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v265 + 39408, (char *)v265 + 192, 32, 0, 0);
                  v23 = v219;
                  v19 = v218;
                  v11 = v217;
                  v10 = v216;
                  v8 = v238;
                  v16 = v242;
                  v104 = SlowCase;
                }
                else
                {
                  v191 = *(_QWORD *)(v104 + 8) ^ *((_QWORD *)v265 + 4932);
                  *((_QWORD *)v265 + 4930) = v104 + HIDWORD(v191);
                  v107[2] = v104 + (int)v191;
LABEL_123:
                  *v107 = v104 + 32;
                }
                *(_DWORD *)v104 = (unint64_t)v107[260] >> 4;
                *(_DWORD *)(v104 + 4) = 17302016;
                v118 = 5;
                if (!v117)
                  v118 = 1;
                *(_QWORD *)(v104 + 8) = v118 | v109;
                *(_DWORD *)(v104 + 16) = v116;
                *(_DWORD *)(v104 + 20) = v108;
                *(_WORD *)(v104 + 24) = WORD2(v108);
                *(_WORD *)(v104 + 26) = 0;
                *(_DWORD *)(v104 + 28) = 0;
                if (*((_BYTE *)v106 + 755))
                  goto LABEL_127;
                goto LABEL_128;
              case 3:
                v87 = v265;
                v89 = *(_QWORD *)v268;
                v88 = *((_QWORD *)v268 + 1);
                v90 = *((_QWORD *)v268 + 2);
                v91 = *(_QWORD *)(*(_QWORD *)v268 + 8);
                if ((v91 & 1) != 0)
                  v92 = (int *)(*(_QWORD *)v268 + 16);
                else
                  v92 = (int *)(v91 + 4);
                v93 = *(_QWORD *)(v88 + 8);
                if ((v93 & 1) != 0)
                  v94 = (int *)(v88 + 16);
                else
                  v94 = (int *)(v93 + 4);
                v95 = *(_QWORD *)(v90 + 8);
                v96 = (int *)(v90 + 16);
                if ((v95 & 1) == 0)
                  v96 = (int *)(v95 + 4);
                if ((v91 & 1) != 0)
                  v91 = (v91 >> 2) & 1;
                else
                  LODWORD(v91) = (*(unsigned __int8 *)(v91 + 16) >> 2) & 1;
                v97 = *v92;
                v98 = *v94;
                v99 = (uint64_t *)((char *)v265 + 39432);
                if ((v93 & 1) != 0)
                  v93 = (v93 >> 2) & 1;
                else
                  LODWORD(v93) = (*(unsigned __int8 *)(v93 + 16) >> 2) & 1;
                v100 = *v96;
                v101 = v91 & v93;
                if ((v95 & 1) != 0)
                  v95 = (v95 >> 2) & 1;
                else
                  LODWORD(v95) = (*(unsigned __int8 *)(v95 + 16) >> 2) & 1;
                v102 = v98 + v97 + v100;
                v103 = v101 & v95;
                v104 = *v99;
                if ((unint64_t)*v99 < *((_QWORD *)v265 + 4930))
                  goto LABEL_109;
                v104 = *((_QWORD *)v265 + 4931);
                if ((v104 & 1) != 0)
                {
                  v237 = v8;
                  v241 = v16;
                  v235 = v10;
                  v212 = v11;
                  v213 = v19;
                  v214 = v23;
                  JSC::sanitizeStackForVM(v265, v16, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
                  v215 = JSC::LocalAllocator::allocateSlowCase((char *)v265 + 39408, (char *)v265 + 192, 32, 0, 0);
                  v23 = v214;
                  v19 = v213;
                  v11 = v212;
                  v10 = v235;
                  v8 = v237;
                  v16 = v241;
                  v104 = v215;
                }
                else
                {
                  v190 = *(_QWORD *)(v104 + 8) ^ *((_QWORD *)v265 + 4932);
                  *((_QWORD *)v265 + 4930) = v104 + HIDWORD(v190);
                  v99[2] = v104 + (int)v190;
LABEL_109:
                  *v99 = v104 + 32;
                }
                *(_DWORD *)v104 = (unint64_t)v99[260] >> 4;
                *(_DWORD *)(v104 + 4) = 17302016;
                v105 = 5;
                if (!v103)
                  v105 = 1;
                *(_QWORD *)(v104 + 8) = v105 | v89;
                *(_DWORD *)(v104 + 16) = v102;
                *(_DWORD *)(v104 + 20) = v88;
                *(_WORD *)(v104 + 24) = WORD2(v88);
                *(_WORD *)(v104 + 26) = v90;
                *(_DWORD *)(v104 + 28) = v90 >> 16;
                if (*((_BYTE *)v87 + 755))
LABEL_127:
                  __dmb(0xAu);
                break;
              default:
                v104 = 0;
                goto LABEL_128;
            }
            goto LABEL_128;
          }
          continue;
        }
        if ((_DWORD)v267 != 3)
          goto LABEL_24;
        v35 = *(_QWORD *)v268;
        v34 = *((_QWORD *)v268 + 1);
        v36 = *((_QWORD *)v268 + 2);
        v37 = *(_QWORD *)(*(_QWORD *)v268 + 8);
        v38 = (int *)(v37 + 4);
        if ((v37 & 1) != 0)
          v38 = (int *)(*(_QWORD *)v268 + 16);
        v39 = *(_QWORD *)(v34 + 8);
        v40 = (int *)(v39 + 4);
        if ((v39 & 1) != 0)
          v40 = (int *)(v34 + 16);
        v41 = *(_QWORD *)(v36 + 8);
        v42 = (int *)(v36 + 16);
        if ((v41 & 1) == 0)
          v42 = (int *)(v41 + 4);
        if ((v37 & 1) != 0)
        {
          v37 = (v37 >> 2) & 1;
          if ((v39 & 1) != 0)
            goto LABEL_65;
LABEL_43:
          LODWORD(v39) = (*(unsigned __int8 *)(v39 + 16) >> 2) & 1;
          if ((v41 & 1) == 0)
            goto LABEL_44;
LABEL_66:
          v43 = (v41 >> 2) & 1;
        }
        else
        {
          LODWORD(v37) = (*(unsigned __int8 *)(v37 + 16) >> 2) & 1;
          if ((v39 & 1) == 0)
            goto LABEL_43;
LABEL_65:
          v39 = (v39 >> 2) & 1;
          if ((v41 & 1) != 0)
            goto LABEL_66;
LABEL_44:
          LODWORD(v43) = (*(unsigned __int8 *)(v41 + 16) >> 2) & 1;
        }
        v44 = v265;
        v45 = (_QWORD *)((char *)v265 + 39432);
        v46 = *v38;
        v47 = *v40;
        v48 = *v42;
        v49 = *((_QWORD *)v265 + 4929);
        if (v49 >= *((_QWORD *)v265 + 4930))
        {
          v49 = *((_QWORD *)v265 + 4931);
          if ((v49 & 1) == 0)
          {
            v185 = *(_QWORD *)(v49 + 8) ^ *((_QWORD *)v265 + 4932);
            *((_QWORD *)v265 + 4930) = v49 + HIDWORD(v185);
            v45[2] = v49 + (int)v185;
            goto LABEL_46;
          }
          v233 = v11;
          v234 = v10;
          v246 = v19;
          v236 = v8;
          v262 = v22;
          v256 = v21;
          v240 = v16;
          v249 = a7;
          v252 = v23;
          v231 = v39;
          v232 = v37;
          v230 = v43;
          v229 = v48;
          JSC::sanitizeStackForVM(v265, v16, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
          v211 = JSC::LocalAllocator::allocateSlowCase((char *)v265 + 39408, (char *)v265 + 192, 32, 0, 0);
          v48 = v229;
          LODWORD(v43) = v230;
          LODWORD(v39) = v231;
          LODWORD(v37) = v232;
          a8 = 39432;
          a7 = v249;
          v23 = v252;
          a6 = 0xFFFE000000000002;
          v19 = v246;
          v11 = v233;
          v10 = v234;
          v44 = v265;
          v8 = v236;
          v16 = v240;
          v49 = v211;
          v21 = v256;
          v22 = v262;
        }
        else
        {
LABEL_46:
          *v45 = v49 + 32;
        }
        *(_DWORD *)v49 = v45[260] >> 4;
        *(_DWORD *)(v49 + 4) = 17302016;
        if ((v37 & v39 & v43) != 0)
          v50 = 5;
        else
          v50 = 1;
        *(_QWORD *)(v49 + 8) = v50 | v35;
        *(_DWORD *)(v49 + 16) = v47 + v46 + v48;
        *(_DWORD *)(v49 + 20) = v34;
        *(_WORD *)(v49 + 24) = WORD2(v34);
        *(_WORD *)(v49 + 26) = v36;
        *(_DWORD *)(v49 + 28) = v36 >> 16;
        if (*((_BYTE *)v44 + 755))
          __dmb(0xAu);
        v266 = 0;
        LODWORD(v267) = 0;
        if (!HIDWORD(v267))
        {
          v247 = a7;
          v251 = v23;
          v254 = v21;
          v259 = v22;
          v244 = v19;
          v175 = v11;
          v176 = v10;
          v177 = v8;
          v178 = v16;
          WTF::tryFastMalloc(0, v270);
          v51 = (WTF *)v270[0];
          if (!v270[0])
          {
            v266 = 1;
            v16 = v178;
            v8 = v177;
            v10 = v176;
            v11 = v175;
            v19 = v244;
            v23 = v251;
LABEL_91:
            v22 = v259;
            v21 = v254;
            a6 = 0xFFFE000000000002;
            a7 = v247;
            a8 = 39432;
            goto LABEL_56;
          }
          v79 = v267;
          a6 = 0xFFFE000000000002;
          if ((_DWORD)v267)
          {
            v179 = 0;
            v16 = v178;
            v8 = v177;
            v10 = v176;
            v11 = v175;
            v19 = v244;
            a7 = v247;
            v23 = v251;
            a8 = 39432;
            do
            {
              v180 = v268;
              *((_QWORD *)v51 + v179) = *((_QWORD *)v268 + v179);
              v181 = *((_QWORD *)v180 + v179);
              if (*(_QWORD *)&v269[0])
                v182 = 0;
              else
                v182 = (v181 & 0xFFFE000000000002) == 0;
              if (v182 && v181 != 0)
              {
                v210 = (_QWORD *)(v181 - 16);
                if ((v181 & 8) == 0)
                  v210 = (_QWORD *)(v181 & 0xFFFFFFFFFFFFC000 | 8);
                *(_QWORD *)&v269[0] = *v210 + 560;
                v271[0] = (uint64_t)&v267;
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v269[0], v271, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432, (uint64_t)v270);
                a8 = 39432;
                a7 = v247;
                v23 = v251;
                a6 = 0xFFFE000000000002;
                v19 = v244;
                v11 = v175;
                v10 = v176;
                v8 = v177;
                v16 = v178;
                v79 = v267;
              }
              ++v179;
            }
            while (v179 < v79);
          }
          else
          {
            v16 = v178;
            v8 = v177;
            v10 = v176;
            v11 = v175;
            v19 = v244;
            a7 = v247;
            v23 = v251;
            a8 = 39432;
          }
          if (v268 != v23 && v268 != 0)
          {
            WTF::fastFree((unint64_t)v268, v16, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
            a8 = 39432;
            a7 = v247;
            v23 = v251;
            a6 = 0xFFFE000000000002;
            v19 = v244;
            v11 = v175;
            v10 = v176;
            v8 = v177;
            v16 = v178;
            v79 = v267;
          }
          v268 = v51;
          HIDWORD(v267) = 0;
          v22 = v259;
          v21 = v254;
LABEL_86:
          *((_QWORD *)v51 + v79) = v49;
          LODWORD(v267) = v79 + 1;
          if ((v49 & 0xFFFE000000000002) != 0 || *(_QWORD *)&v269[0])
            goto LABEL_56;
          v259 = v22;
          v254 = v21;
          v247 = a7;
          v80 = v23;
          v81 = v19;
          v82 = v11;
          v83 = v10;
          v84 = v8;
          v85 = v16;
          if ((v49 & 8) != 0)
            v86 = (_QWORD *)(v49 - 16);
          else
            v86 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFC000 | 8);
          *(_QWORD *)&v269[0] = *v86 + 560;
          v271[0] = (uint64_t)&v267;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v269[0], v271, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432, (uint64_t)v270);
          v16 = v85;
          v8 = v84;
          v10 = v83;
          v11 = v82;
          v19 = v81;
          v23 = v80;
          goto LABEL_91;
        }
        v51 = v268;
        if (v268 != v23 && v268)
        {
          v79 = 0;
          goto LABEL_86;
        }
        *(_QWORD *)v268 = v49;
        LODWORD(v267) = 1;
LABEL_56:
        v26 = *(_QWORD *)(v25 + 8);
        v27 = v26 & 1;
LABEL_24:
        v29 = (int *)(v26 + 4);
        if (v27)
          v29 = (int *)(v25 + 16);
        v30 = *v29;
        if (((v30 | DWORD2(v269[4])) & 0x80000000) == 0)
        {
          v31 = DWORD2(v269[4]) + v30;
          if (!__OFADD__(DWORD2(v269[4]), v30))
          {
            v32 = v267;
            if ((_DWORD)v267 == HIDWORD(v267))
            {
              v248 = a7;
              v250 = v23;
              v255 = v21;
              v260 = v22;
              v243 = v19;
              v169 = v11;
              v170 = v10;
              v171 = v8;
              v172 = v16;
              if (v267 >> 30
                || (WTF::tryFastMalloc((WTF *)(16 * v267), v270), (v33 = (WTF *)v270[0]) == 0))
              {
                v266 = 1;
                v16 = v172;
                v8 = v171;
                v10 = v170;
                v11 = v169;
                v19 = v243;
                a7 = v248;
                v23 = v250;
                v22 = v260;
                v21 = v255;
                a6 = 0xFFFE000000000002;
                a8 = 39432;
                goto LABEL_32;
              }
              v52 = v267;
              v16 = v172;
              v8 = v171;
              v10 = v170;
              v11 = v169;
              v19 = v243;
              a7 = v248;
              v23 = v250;
              a6 = 0xFFFE000000000002;
              a8 = 39432;
              if ((_DWORD)v267)
              {
                v68 = 0;
                do
                {
                  v64 = v268;
                  *((_QWORD *)v33 + v68) = *((_QWORD *)v268 + v68);
                  v65 = *((_QWORD *)v64 + v68);
                  if (*(_QWORD *)&v269[0])
                    v66 = 0;
                  else
                    v66 = (v65 & 0xFFFE000000000002) == 0;
                  if (v66 && v65 != 0)
                  {
                    v209 = (_QWORD *)(v65 - 16);
                    if ((v65 & 8) == 0)
                      v209 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFC000 | 8);
                    *(_QWORD *)&v269[0] = *v209 + 560;
                    v271[0] = (uint64_t)&v267;
                    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v269[0], v271, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432, (uint64_t)v270);
                    a8 = 39432;
                    a7 = v248;
                    v23 = v250;
                    a6 = 0xFFFE000000000002;
                    v19 = v243;
                    v11 = v169;
                    v10 = v170;
                    v8 = v171;
                    v16 = v172;
                    v52 = v267;
                  }
                  ++v68;
                }
                while (v68 < v52);
              }
              if (v268 != v23 && v268 != 0)
              {
                WTF::fastFree((unint64_t)v268, v16, (uint64_t)v11, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432);
                a8 = 39432;
                a7 = v248;
                v23 = v250;
                a6 = 0xFFFE000000000002;
                v19 = v243;
                v11 = v169;
                v10 = v170;
                v8 = v171;
                v16 = v172;
                v52 = v267;
              }
              v268 = v33;
              HIDWORD(v267) = 2 * v32;
              v22 = v260;
              v21 = v255;
            }
            else
            {
              v33 = v268;
              if (v268 == v23 || !v268)
              {
                *((_QWORD *)v268 + v267) = v25;
                LODWORD(v267) = v32 + 1;
LABEL_32:
                DWORD2(v269[4]) = v31;
                goto LABEL_33;
              }
              v52 = v267;
            }
            *((_QWORD *)v33 + v52) = v25;
            LODWORD(v267) = v52 + 1;
            if (!*(_QWORD *)&v269[0] && (v25 & 0xFFFE000000000002) == 0 && v25)
            {
              v200 = (_QWORD *)(v25 - 16);
              if ((v25 & 8) == 0)
                v200 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
              v261 = v22;
              v201 = v21;
              *(_QWORD *)&v269[0] = *v200 + 560;
              v271[0] = (uint64_t)&v267;
              v202 = v16;
              v203 = v8;
              v204 = v10;
              v205 = v11;
              v206 = v19;
              v207 = v23;
              v208 = a7;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v269[0], v271, v19, (uint64_t)v23, 0xFFFE000000000002, a7, 39432, (uint64_t)v270);
              a8 = 39432;
              a7 = v208;
              a6 = 0xFFFE000000000002;
              v21 = v201;
              v22 = v261;
              v23 = v207;
              v19 = v206;
              v11 = v205;
              v10 = v204;
              v8 = v203;
              v16 = v202;
            }
            goto LABEL_32;
          }
        }
        v264 = 1;
LABEL_175:
        v153 = (JSC::VM *)v22;
        v154 = v23;
        v155 = v19;
        v156 = v11;
        v157 = v8;
        v158 = v16;
        v159 = (JSC::JSGlobalObject *)v10;
        OutOfMemoryError = JSC::createOutOfMemoryError(v10, v16);
        v166 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v166 = (JSC::Exception *)JSC::Exception::create((uint64_t)v153, (JSC::VM *)OutOfMemoryError, 0, v161, v162, v163, v164, v165);
        }
        v167 = JSC::VM::throwException(v153, v159, v166);
        v10 = (unint64_t)v159;
        v104 = v167;
        v16 = v158;
        v8 = v157;
        v11 = v156;
        v19 = v155;
        v23 = v154;
LABEL_129:
        v119 = *(uint64_t **)&v269[0];
        if (*(_QWORD *)&v269[0])
        {
          v134 = **(_QWORD **)&v269[0];
          if (**(_QWORD **)&v269[0])
          {
            v135 = *(_DWORD *)(v134 - 8);
            v136 = ((unint64_t)&v267 + ~((_QWORD)&v267 << 32)) ^ (((unint64_t)&v267
                                                                        + ~((_QWORD)&v267 << 32)) >> 22);
            v137 = 9 * ((v136 + ~(v136 << 13)) ^ ((v136 + ~(v136 << 13)) >> 8));
            v138 = (v137 ^ (v137 >> 15)) + ~((v137 ^ (v137 >> 15)) << 27);
            v139 = v135 & ((v138 >> 31) ^ v138);
            v140 = *(uint64_t **)(v134 + 8 * v139);
            if (v140 != &v267)
            {
              v168 = 1;
              while (v140)
              {
                v139 = ((_DWORD)v139 + v168) & v135;
                v140 = *(uint64_t **)(v134 + 8 * v139);
                ++v168;
                if (v140 == &v267)
                  goto LABEL_163;
              }
              v139 = *(unsigned int *)(v134 - 4);
            }
LABEL_163:
            if (v139 != *(_DWORD *)(v134 - 4))
            {
              *(_QWORD *)(v134 + 8 * v139) = -1;
              ++*(_DWORD *)(*v119 - 16);
              v141 = *v119;
              v142 = *v119 ? *(_DWORD *)(v141 - 12) - 1 : -1;
              *(_DWORD *)(v141 - 12) = v142;
              v143 = *v119;
              if (*v119)
              {
                v144 = 6 * *(_DWORD *)(v143 - 12);
                v145 = *(_DWORD *)(v143 - 4);
                if (v144 < v145 && v145 >= 9)
                {
                  v147 = v16;
                  v148 = v11;
                  v149 = v8;
                  v150 = v10;
                  v151 = v19;
                  v152 = v23;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v119, v145 >> 1, 0, v19, (uint64_t)v23, a6, a7, a8);
                  v23 = v152;
                  v19 = v151;
                  v11 = v148;
                  v10 = v150;
                  v8 = v149;
                  v16 = v147;
                }
              }
            }
          }
        }
        if (v268 != v23 && v268 != 0)
        {
          v129 = v16;
          v130 = v8;
          v131 = v10;
          v132 = v11;
          v133 = v19;
          WTF::fastFree((unint64_t)v268, v16, (uint64_t)v11, v19, (uint64_t)v23, a6, a7, a8);
          LODWORD(v19) = v133;
          v11 = v132;
          v10 = v131;
          v8 = v130;
          v16 = v129;
        }
        if (HIBYTE(word_1ECF4C620))
        {
          v186 = v16;
          v187 = v8;
          v188 = v19;
          JSC::doExceptionFuzzing(v10, &v263, "CommonSlowPaths", v8);
          LODWORD(v19) = v188;
          v8 = v187;
          v16 = v186;
          v11 = v263;
        }
        if (*((_QWORD *)v11 + 2))
          return &xmmword_1ECF4C7C0;
        *((_QWORD *)v16 + (int)v19) = v104;
        return (__int128 *)v8;
    }
  }
}

__int128 *slow_path_to_primitive(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM **v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v26;
  unint64_t v27;
  JSC::VM **v28;
  uint64_t v29;
  JSC::VM *v30;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::VM ***)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v30 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1988F7E68);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_24:
    v26 = v21 + v20;
    goto LABEL_25;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
    {
LABEL_11:
      v22 = v19;
LABEL_12:
      v23 = (uint64_t *)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v26 = *(_DWORD *)(a2 + 6);
LABEL_25:
  v21 = v26;
  v22 = v19;
  if (v26 < 0x40000000)
    goto LABEL_12;
  v27 = (v26 - 0x40000000);
  if (v27 >= *(unsigned int *)(v11 + 172))
    goto LABEL_29;
  v23 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v27);
LABEL_13:
  v24 = *v23;
  if ((*v23 & 0xFFFE000000000002) == 0)
  {
    v28 = v9;
    v29 = JSC::JSCell::toPrimitive(*v23, v9, 0, a4, a5, a6, a7, a8);
    v9 = v28;
    v24 = v29;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v30, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v24;
  return (__int128 *)v16;
}

__int128 *slow_path_enter(uint64_t a1, const void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v9;
  uint64_t *v11;
  uint64_t v12;
  JSC::VM *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v4 + 40) = a1;
  v14 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned int *)(v5 + 12) + *(_QWORD *)v5;
  if (v6 > (unint64_t)a2 || v7 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F8014);
  }
  v9 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v6) & 0x3FFFFFFF;
  v11 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v2 & 8) != 0)
    v11 = (uint64_t *)(v2 - 16);
  v12 = *v11;
  if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v2);
  *(_QWORD *)(a1 + 8 * *(int *)(v2 + 48)) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if ((*(_DWORD *)(v2 + 32) & 0x80000000) != 0)
    *(_BYTE *)(v4 + 41452) = 1;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v14, "CommonSlowPaths", v9);
  if (*(_QWORD *)(v4 + 16))
    return &xmmword_1ECF4C7C0;
  return (__int128 *)v9;
}

__int128 *slow_path_to_property_key(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  JSC::VM *v25;
  int v26;
  int v28;
  BOOL v29;
  int v31;
  unint64_t v32;
  JSC::VM *v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v33 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x1988F81E0);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v31 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v19 > 63)
        v19 += 1073741760;
      v21 = *((__int16 *)a2 + 2);
      if (v21 <= 63)
        goto LABEL_11;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 > 15)
        v19 += 1073741808;
      v21 = (char)a2[2];
      if (v21 <= 15)
      {
LABEL_11:
        v22 = v19;
LABEL_12:
        v23 = (uint64_t *)(a1 + 8 * v21);
        goto LABEL_13;
      }
    }
    v31 = v21 + v20;
  }
  v21 = v31;
  v22 = v19;
  if (v31 < 0x40000000)
    goto LABEL_12;
  v32 = (v31 - 0x40000000);
  if (v32 >= *(unsigned int *)(v11 + 172))
    goto LABEL_43;
  v23 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v32);
LABEL_13:
  v24 = *v23;
  v25 = *(JSC::VM **)(v9 + 56);
  if ((*v23 & 0xFFFE000000000002) == 0)
  {
    v26 = *(unsigned __int8 *)(v24 + 5);
    if (v26 == 2 || v26 == 4)
      goto LABEL_26;
    v24 = JSC::JSCell::toPrimitive(v24, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v34 = v24;
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v24 = 0;
  }
  else if ((v24 & 0xFFFE000000000002) != 0
         || ((v28 = *(unsigned __int8 *)(v24 + 5), v28 != 2) ? (v29 = v28 == 4) : (v29 = 1), !v29))
  {
    v24 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v34, (JSC::JSGlobalObject *)v9, 1);
  }
LABEL_26:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v33, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v24;
  return (__int128 *)v16;
}

__int128 *slow_path_to_property_key_or_number(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  BOOL v29;
  int v31;
  unint64_t v32;
  int v33;
  JSC::VM *v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v34 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x1988F8468);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_35:
    v31 = v21 + v20;
    goto LABEL_36;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
    {
LABEL_11:
      v22 = v19;
LABEL_12:
      v23 = (uint64_t *)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v31 = *(_DWORD *)(a2 + 6);
LABEL_36:
  v21 = v31;
  v22 = v19;
  if (v31 < 0x40000000)
    goto LABEL_12;
  v32 = (v31 - 0x40000000);
  if (v32 >= *(unsigned int *)(v11 + 172))
    goto LABEL_46;
  v23 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v32);
LABEL_13:
  v24 = *v23;
  if ((unint64_t)*v23 >> 49)
    goto LABEL_27;
  v25 = *(_QWORD *)(v9 + 56);
  if ((v24 & 0xFFFE000000000002) == 0)
  {
    v26 = *(unsigned __int8 *)(v24 + 5);
    if (v26 == 2 || v26 == 4)
      goto LABEL_27;
    v24 = JSC::JSCell::toPrimitive(v24, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v35 = v24;
  if (!*(_DWORD *)(v25 + 80))
    goto LABEL_25;
  v33 = *(_DWORD *)(v25 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v25 + 16))
  {
    v24 = 0;
  }
  else
  {
LABEL_25:
    if ((v24 & 0xFFFE000000000002) != 0
      || ((v28 = *(unsigned __int8 *)(v24 + 5), v28 != 2) ? (v29 = v28 == 4) : (v29 = 1), !v29))
    {
      v24 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v35, (JSC::JSGlobalObject *)v9, 1);
    }
  }
LABEL_27:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v34, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v24;
  return (__int128 *)v16;
}

__int128 *slow_path_get_property_enumerator(uint64_t a1, unsigned __int8 *a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  JSC::VM *v31;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v31 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x1988F8678);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_35:
    v28 = v21 + v20;
    goto LABEL_36;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
    {
LABEL_11:
      v22 = v19;
LABEL_12:
      v23 = (unsigned __int8 **)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v28 = *(_DWORD *)(a2 + 6);
LABEL_36:
  v21 = v28;
  v22 = v19;
  if (v28 < 0x40000000)
    goto LABEL_12;
  v29 = (v28 - 0x40000000);
  if (v29 >= *(unsigned int *)(v11 + 172))
    goto LABEL_40;
  v23 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v29);
LABEL_13:
  v24 = (unint64_t)*v23;
  v30 = v24;
  if ((v24 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v25 = *((_QWORD *)v10 + 5229);
    if (!v25)
      v25 = JSC::VM::emptyPropertyNameEnumeratorSlow(v10);
    goto LABEL_20;
  }
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    v27 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v30, v9);
    goto LABEL_30;
  }
  if (*(unsigned __int8 *)(v24 + 5) <= 0x16u)
  {
    v27 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v24, (JSC::SymbolObject **)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_30:
    v24 = v27;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  v25 = JSC::propertyNameEnumerator(v9, (JSC::JSGlobalObject *)v24, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_20:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v25;
  return (__int128 *)v16;
}

uint64_t *slow_path_enumerator_next(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v10;
  JSC::JSGlobalObject *v11;
  JSC::VM *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int16x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  JSC::VM *v36;
  unint64_t v37;
  JSC::JSRopeString *v38;
  unint64_t v39;
  uint64_t v40;
  JSC::VM *v41;
  int v42;
  unint64_t v43;
  JSC::VM *v44;
  unint64_t v45;
  JSC::VM *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  JSC::JSGlobalObject *v51;
  char v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  JSC *v60;
  WTF::AtomStringImpl *v61;
  JSC::JSGlobalObject *v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  JSC::VM *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  JSC::JSGlobalObject *v95;
  JSC::VM *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  JSC::JSCell *v99;
  JSC::VM *v100;
  JSC::JSGlobalObject *v101;
  uint64_t v102;
  _QWORD *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  JSC::JSGlobalObject *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  _QWORD *v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::JSGlobalObject *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC::VM *v132;
  JSC::JSGlobalObject *v133;
  JSC::VM *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  JSC::JSGlobalObject *v138;
  int v139;
  int v140;
  uint64_t v141;
  BOOL v142;
  char v143;
  uint64_t *v144;
  JSC::JSGlobalObject *v145;
  int v146;
  char v147;
  JSC::JSGlobalObject *v148;
  uint64_t v149;
  JSC::JSGlobalObject *v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  JSC::VM *v168;
  JSC::JSGlobalObject *v169;
  uint64_t *v170;
  JSC::JSGlobalObject *v171;
  uint64_t *v172;
  JSC::JSGlobalObject *v173;
  JSC::JSGlobalObject *v174;
  JSC::VM *v175;
  unint64_t v176;
  JSC::VM *v177;
  JSC::JSGlobalObject *v178;
  char v179;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v181;
  JSC::VMTraps *v182;
  uint64_t v183;
  JSC::VM *v184;
  JSC::VM *v185;
  JSC::VM *v186;
  JSC::VM *v187;
  JSC::VM *v188;
  JSC::VM *v189;
  JSC::JSGlobalObject *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int8x16_t v211;
  int v212;
  unsigned int v213;
  JSC::VM *v214;
  WTF::StringImpl *v215[2];
  unint64_t v216;
  unint64_t v217;
  _DWORD *v218;
  uint64_t v219;
  __int16 v220;
  __int16 v221;
  char v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;

  v10 = *(_QWORD **)(a1 + 16);
  v11 = (JSC::JSGlobalObject *)v10[1];
  v12 = (JSC::VM *)v10[9];
  *((_QWORD *)v12 + 5) = a1;
  v214 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F8EF4);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v168 = v12;
    v169 = v11;
    JSC::OpEnumeratorNext::OpEnumeratorNext(v211.i32, (const unsigned __int16 *)a2 + 1);
    v12 = v168;
    v11 = v169;
    v24 = v213;
  }
  else
  {
    if (v18 == 130)
    {
      v211 = *(int8x16_t *)(a2 + 2);
      v23 = *(_DWORD *)(a2 + 18);
      v24 = *(_DWORD *)(a2 + 22);
    }
    else
    {
      a9.i32[0] = *(_DWORD *)(a2 + 1);
      v19 = (int16x4_t)vmovl_s8(a9).u64[0];
      v20 = vmovl_s16(v19);
      v21.i64[0] = 0xF0000000FLL;
      v21.i64[1] = 0xF0000000FLL;
      v211 = vbslq_s8((int8x16_t)vcgtq_s32(v20, v21), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v19), (int8x16_t)v20);
      v22 = (char)a2[5];
      v23 = v22 + 1073741808;
      if (v22 <= 15)
        v23 = (char)a2[5];
      v24 = a2[6];
    }
    v212 = v23;
    v213 = v24;
  }
  v25 = v10[17];
  v26 = *(unsigned __int16 *)(v25 + 76);
  if (!*(_WORD *)(v25 + 76))
    v26 = *(_DWORD *)(v25 + 248);
  v27 = v211.i32[0];
  v28 = v211.i32[1];
  v29 = *(_QWORD *)(a1 + 8 * v211.i32[1]);
  v30 = v211.i32[2];
  v31 = *(_QWORD *)(a1 + 8 * v211.i32[2]);
  v32 = *(_QWORD *)(a1 + 8 * v212);
  v33 = *(_QWORD *)(a1 + 8 * v211.i32[3]);
  v210 = v33;
  if ((v33 & 0xFFFE000000000002) != 0)
  {
    v202 = v211.i32[0];
    v197 = v24;
    v193 = v211.i32[2];
    v98 = v211.i32[1];
    v100 = v12;
    v101 = v11;
    v102 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v210, v11);
    goto LABEL_100;
  }
  if (*(unsigned __int8 *)(v33 + 5) <= 0x16u)
  {
    v202 = v211.i32[0];
    v197 = v24;
    v193 = v211.i32[2];
    v98 = v211.i32[1];
    v99 = (JSC::JSCell *)v33;
    v100 = v12;
    v101 = v11;
    v102 = JSC::JSCell::toObjectSlow(v99, (JSC::SymbolObject **)v11, a3, a4, a5, a6, a7, a8);
LABEL_100:
    v12 = v100;
    v11 = v101;
    v33 = v102;
    v28 = v98;
    v30 = v193;
    v24 = v197;
    v27 = v202;
  }
  v34 = g_config;
  if (HIBYTE(word_1ECF4C620))
  {
    v132 = v12;
    v203 = v27;
    v198 = v24;
    v194 = v30;
    v209 = v28;
    v133 = v11;
    JSC::doExceptionFuzzing((unint64_t)v11, &v214, "CommonSlowPaths", a2);
    v12 = v132;
    v11 = v133;
    v28 = v209;
    v34 = g_config;
    v30 = v194;
    v24 = v198;
    v27 = v203;
  }
  if (*((_QWORD *)v12 + 2))
    return v34 + 248;
  v35 = (v25 + v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v35 + 16 * v24) = *(_DWORD *)v33;
  v36 = (JSC::VM *)*((_QWORD *)v11 + 7);
  v37 = (v31 + 1);
  switch((char)v29)
  {
    case 0:
      v37 = 0;
      goto LABEL_38;
    case 1:
LABEL_38:
      LODWORD(v43) = *(_DWORD *)(v32 + 20);
      v206 = v35;
      v208 = v28;
      if (v37 >= v43)
        goto LABEL_39;
      v47 = v12;
      v186 = (JSC::VM *)*((_QWORD *)v11 + 7);
      v192 = v30;
      v196 = v24;
      v201 = v27;
      v37 = v37;
      break;
    case 2:
    case 4:
      goto LABEL_20;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988F922CLL);
  }
  do
  {
    v48 = *((_QWORD *)v11 + 7);
    v216 = 0xFFFFFFFF00000000;
    v217 = v33;
    v218 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 2;
    v222 = 0;
    LOBYTE(v223) = 0;
    v224 = 0;
    v182 = (JSC::VMTraps *)(v48 + 64);
    v49 = v33;
    v225 = 0;
    v226 = 0;
    v184 = (JSC::VM *)v48;
    while (1)
    {
      v50 = 16 * (*(_DWORD *)v49 & 0xFFFFFFFE);
      v51 = v11;
      v52 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v50 + 0x4C) + 0x70))(v49, v11, v37, v215);
      a3 = (uint64_t)v184;
      if (!*((_DWORD *)v184 + 20))
      {
        v11 = v51;
        v12 = v47;
        if ((v52 & 1) == 0)
          goto LABEL_61;
        v27 = v201;
        v35 = v206;
        v24 = v196;
        v30 = v192;
        v28 = v208;
        v36 = v186;
        if (!*((_DWORD *)v184 + 20))
          goto LABEL_70;
        v144 = v34;
        v145 = v51;
        LOBYTE(v94) = 1;
LABEL_132:
        v146 = *(_DWORD *)(a3 + 80);
        if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
        {
          JSC::VMTraps::handleTraps(v182, 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          a3 = (uint64_t)v184;
        }
        if (*(_QWORD *)(a3 + 16))
          v147 = 0;
        else
          v147 = v94;
        v11 = v145;
        v12 = v47;
        v27 = v201;
        v35 = v206;
        v24 = v196;
        v30 = v192;
        v28 = v208;
        v34 = v144;
        v36 = v186;
        if ((v147 & 1) == 0)
          goto LABEL_137;
        goto LABEL_70;
      }
      v140 = *((_DWORD *)v184 + 20);
      if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      {
        v189 = v47;
        v179 = v52;
        JSC::VMTraps::handleTraps(v182, 7u, (uint64_t)v184, (uint64_t)a4, a5, a6, a7, a8);
        a3 = (uint64_t)v184;
        v52 = v179;
        v47 = v189;
      }
      v141 = *(_QWORD *)(a3 + 16);
      v142 = v141 == 0;
      v143 = v141 ? 1 : v52;
      v11 = v51;
      v12 = v47;
      if ((v143 & 1) != 0)
        break;
LABEL_61:
      if (v221 != 3)
      {
        v53 = *(unsigned __int8 *)(v49 + 5);
        if (v53 == 61)
        {
          if (v221 == 1)
            goto LABEL_175;
          goto LABEL_64;
        }
LABEL_63:
        if ((v53 - 39) <= 0xA)
        {
          v174 = v11;
          v175 = v12;
          v176 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v49, (uint64_t)v12, a3, (uint64_t)a4, a5, a6, a7, a8);
          a3 = (uint64_t)v184;
          v12 = v175;
          v11 = v174;
          if (v176 <= v37)
          {
LABEL_175:
            v94 = 0;
            goto LABEL_86;
          }
        }
        goto LABEL_64;
      }
      if (v222)
      {
        v94 = 0;
        a3 = (uint64_t)v184;
        goto LABEL_86;
      }
      v53 = *(unsigned __int8 *)(v49 + 5);
      a3 = (uint64_t)v184;
      if (v53 != 61)
        goto LABEL_63;
LABEL_64:
      if ((*(_WORD *)(v50 + 12) & 0x800) == 0 || v221 == 3)
      {
        v47 = v12;
        v54 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
        if (!v54)
          v54 = *(_QWORD *)(v49 + 16);
      }
      else
      {
        v172 = v34;
        v47 = v12;
        v173 = v11;
        if ((*(_WORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v181 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v49, v11, a3);
        }
        else
        {
          v181 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
          if (!v181)
            v181 = *(_QWORD *)(v49 + 16);
        }
        if (*((_DWORD *)v184 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v184, (uint64_t)v12, a3, (uint64_t)a4, a5, a6, a7, a8);
          a3 = (uint64_t)v184;
          v54 = v181;
          v11 = v173;
          v34 = v172;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_85;
        }
        else
        {
          v54 = v181;
          v11 = v173;
          v34 = v172;
          a3 = (uint64_t)v184;
        }
      }
      if ((v54 & 0xFFFE000000000002) == 0)
      {
        v49 = v54;
        if (*(unsigned __int8 *)(v54 + 5) > 0x16u)
          continue;
      }
LABEL_85:
      v94 = 0;
      v12 = v47;
      goto LABEL_86;
    }
    v94 = v142;
LABEL_86:
    if (*(_DWORD *)(a3 + 80))
    {
      v144 = v34;
      v47 = v12;
      v145 = v11;
      goto LABEL_132;
    }
    v27 = v201;
    v35 = v206;
    v24 = v196;
    v30 = v192;
    v28 = v208;
    v36 = v186;
    if (!v94)
    {
LABEL_137:
      v55 = 0;
      goto LABEL_72;
    }
LABEL_70:
    if ((v216 & 4) != 0)
    {
      v55 = (int)v218;
      if (v218)
        v55 = (*(unsigned __int16 *)(16 * (*v218 & 0xFFFFFFFE) + 0xC) >> 12) & 1;
      v27 = v201;
      v35 = v206;
      v24 = v196;
      v30 = v192;
      v28 = v208;
      v36 = v186;
    }
    else
    {
      v55 = 1;
    }
LABEL_72:
    if (v224)
    {
      v56 = *(_DWORD *)(v223 + 4);
      if (!v56)
      {
        __break(0xC471u);
        JUMPOUT(0x1988F90D4);
      }
      *(_DWORD *)(v223 + 4) = v56 - 1;
    }
    if (v55)
    {
      LODWORD(v43) = *(_DWORD *)(v32 + 20);
      goto LABEL_39;
    }
    v170 = v34;
    v47 = v12;
    v171 = v11;
    if (*((_DWORD *)v36 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v186, (uint64_t)v12, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v38 = 0;
      LOBYTE(v29) = 1;
      v11 = v171;
      v12 = v47;
      v27 = v201;
      v35 = v206;
      v24 = v196;
      v30 = v192;
      v28 = v208;
      v34 = v170;
      goto LABEL_46;
    }
    ++v37;
    v43 = *(unsigned int *)(v32 + 20);
    v11 = v171;
    v34 = v170;
  }
  while (v37 < v43);
  v27 = v201;
  v35 = v206;
  v24 = v196;
  v30 = v192;
  v28 = v208;
  v36 = v186;
  v12 = v47;
LABEL_39:
  if (v37 < v43)
  {
    v57 = v30;
    v58 = v24;
    v59 = v27;
    v60 = v36;
    v61 = v12;
    v62 = v11;
    JSC::Identifier::from((uint64_t **)v36, v37, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)v215);
    v69 = JSC::jsString(v60, (JSC::VM *)v215, v63, v64, v65, v66, v67, v68);
    v12 = v61;
    v11 = v62;
    v38 = (JSC::JSRopeString *)v69;
    v76 = v215[0];
    v215[0] = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v61, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        v12 = v61;
        v11 = v62;
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
    LOBYTE(v29) = 1;
    v27 = v59;
    v24 = v58;
    v30 = v57;
    v35 = v206;
    v28 = v208;
LABEL_81:
    v34 = g_config;
  }
  else
  {
    if (!*(_DWORD *)(v32 + 28))
    {
      v38 = 0;
      LOBYTE(v29) = 1;
      goto LABEL_46;
    }
    LODWORD(v37) = 0;
    LOBYTE(v29) = 2;
LABEL_20:
    if (v37 < *(_DWORD *)(v32 + 28))
    {
      while (2)
      {
        v38 = *(JSC::JSRopeString **)(*(_QWORD *)(v32 + 8) + 8 * v37);
        if (!v38 || v37 < *(_DWORD *)(v32 + 24) && *(_DWORD *)v33 == *(_DWORD *)(v32 + 16))
          goto LABEL_43;
        v39 = *((_QWORD *)v38 + 1);
        v40 = *((_QWORD *)v11 + 7);
        v188 = v12;
        v190 = v11;
        v200 = v27;
        v205 = v35;
        v195 = v24;
        v191 = v30;
        v207 = v28;
        if ((v39 & 1) == 0)
        {
          if ((*(_BYTE *)(v39 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v39 += 2;
            goto LABEL_27;
          }
          v187 = v36;
          v103 = (_QWORD *)(v40 + 64768);
          v104 = *(WTF::StringImpl **)(v40 + 64768);
          v185 = (JSC::VM *)(v40 + 64768);
          if (v104 != (WTF::StringImpl *)v39)
          {
            *(_DWORD *)v39 += 2;
            *v103 = v39;
            v183 = v40;
            if (v104)
            {
              v148 = v11;
              if (*(_DWORD *)v104 == 2)
              {
                WTF::StringImpl::~StringImpl(v104, v12, v40, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
              }
              else
              {
                *(_DWORD *)v104 -= 2;
              }
              v11 = v148;
              v40 = v183;
              v103 = v185;
            }
            v105 = (WTF::StringImpl *)*((_QWORD *)v38 + 1);
            if (v105)
            {
              v106 = v11;
              if ((*((_BYTE *)v105 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v105 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v105, (const WTF::StringImpl *)v40, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v215);
                v105 = v215[0];
              }
              v11 = v106;
              v40 = v183;
              v103 = v185;
            }
            v107 = (WTF::StringImpl *)v103[1];
            v103[1] = v105;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
              {
                v151 = v40;
                WTF::StringImpl::~StringImpl(v107, v12, v40, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
                v40 = v151;
                v103 = v185;
                v11 = v190;
              }
              else
              {
                *(_DWORD *)v107 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*((_QWORD *)v38 + 1) + 16) & 0x10) == 0)
          {
            v108 = (WTF::StringImpl *)v103[1];
            *(_DWORD *)v108 += 2;
            v215[0] = v108;
            __dmb(0xAu);
            v109 = (WTF::StringImpl *)*((_QWORD *)v38 + 1);
            *((WTF::StringImpl **)v38 + 1) = v215[0];
            v215[0] = v109;
            v110 = (_QWORD *)(v40 + 808);
            v111 = *(unsigned int *)(v40 + 820);
            if ((_DWORD)v111 == *(_DWORD *)(v40 + 816))
            {
              v149 = v40;
              v150 = v11;
              v113 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)v215);
              v40 = v149;
              v103 = v185;
              v11 = v150;
              v111 = *(unsigned int *)(v149 + 820);
              v112 = (WTF::StringImpl **)(*(_QWORD *)(v149 + 808) + 8 * v111);
              v109 = *v113;
            }
            else
            {
              v112 = (WTF::StringImpl **)(*v110 + 8 * v111);
              v113 = v215;
            }
            *v113 = 0;
            *v112 = v109;
            *(_DWORD *)(v40 + 820) = v111 + 1;
            v114 = v215[0];
            v215[0] = 0;
            if (v114)
            {
              if (*(_DWORD *)v114 == 2)
              {
                v123 = v11;
                WTF::StringImpl::~StringImpl(v114, v12, v40, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
                v103 = v185;
                v11 = v123;
              }
              else
              {
                *(_DWORD *)v114 -= 2;
              }
            }
          }
          v39 = v103[1];
          *(_DWORD *)v39 += 2;
LABEL_94:
          v36 = v187;
          if (!*((_DWORD *)v36 + 20))
            goto LABEL_28;
LABEL_27:
          v139 = *((_DWORD *)v36 + 20);
          if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
          {
            v177 = v36;
            v178 = v11;
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v36 + 64), 7u, v40, (uint64_t)a4, a5, a6, a7, a8);
            v36 = v177;
            v11 = v178;
          }
          if (*((_QWORD *)v36 + 2))
          {
            v42 = 1;
          }
          else
          {
LABEL_28:
            v41 = v36;
            if ((JSC::JSObject::hasEnumerableProperty(v33, (uint64_t)v11, v39, (uint64_t)a4, a5, a6, a7, a8) & 1) != 0)
            {
              v42 = 8;
            }
            else if (*((_DWORD *)v41 + 20)
                   && JSC::VM::hasExceptionsAfterHandlingTraps(v41, (uint64_t)v12, v40, (uint64_t)a4, a5, a6, a7, a8))
            {
              v42 = 1;
            }
            else
            {
              v38 = 0;
              v42 = 0;
              LODWORD(v37) = v37 + 1;
            }
            v36 = v41;
          }
          v27 = v200;
          v35 = v205;
          v24 = v195;
          v30 = v191;
          v28 = v207;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              v77 = v36;
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v39, v12, v40, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              v36 = v77;
              v35 = v205;
              v28 = v207;
              v30 = v191;
              v24 = v195;
              v27 = v200;
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          if (v42)
          {
            if (v42 == 8)
            {
              v12 = v188;
              v11 = v190;
              v34 = g_config;
              goto LABEL_43;
            }
            v38 = 0;
            v12 = v188;
            v11 = v190;
            goto LABEL_81;
          }
          v12 = v188;
          v11 = v190;
          v34 = g_config;
          if (v37 >= *(_DWORD *)(v32 + 28))
            goto LABEL_43;
          continue;
        }
        break;
      }
      v187 = v36;
      v95 = v11;
      v96 = (JSC::VM *)*((_QWORD *)v11 + 7);
      JSC::JSRopeString::resolveRopeToAtomString(v38, v11);
      if (*((_DWORD *)v96 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v96, (uint64_t)v12, v40, (uint64_t)a4, a5, a6, a7, a8))
      {
        v39 = 0;
        v97 = v215[0];
        v215[0] = 0;
        v11 = v95;
        if (!v97)
          goto LABEL_94;
LABEL_92:
        if (*(_DWORD *)v97 != 2)
        {
          *(_DWORD *)v97 -= 2;
          goto LABEL_94;
        }
        WTF::StringImpl::~StringImpl(v97, v12, v40, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
      else
      {
        v39 = (unint64_t)v215[0];
        if (v215[0])
        {
          *(_DWORD *)v215[0] += 2;
          v215[0] = 0;
          v97 = (WTF::StringImpl *)v39;
          v11 = v95;
          goto LABEL_92;
        }
      }
      v11 = v95;
      goto LABEL_94;
    }
    v38 = 0;
LABEL_43:
    if (v37 >= *(_DWORD *)(v32 + 24) && v37 < *(_DWORD *)(v32 + 28))
      LOBYTE(v29) = 4;
  }
LABEL_46:
  if (*((_BYTE *)v34 + 1569))
  {
    v134 = v12;
    v204 = v27;
    v199 = v24;
    v135 = v30;
    v136 = v28;
    v137 = v35;
    v138 = v11;
    JSC::doExceptionFuzzing((unint64_t)v11, &v214, "CommonSlowPaths", a2);
    v12 = v134;
    v11 = v138;
    v35 = v137;
    v28 = v136;
    v34 = g_config;
    v30 = v135;
    v24 = v199;
    v27 = v204;
  }
  v44 = v214;
  if (*((_QWORD *)v214 + 2))
    return v34 + 248;
  *(_BYTE *)(v35 + 16 * v24 + 12) |= v29;
  *(_QWORD *)(a1 + 8 * v28) = v29 | 0xFFFE000000000000;
  v45 = v37 | 0xFFFE000000000000;
  if ((v37 & 0x80000000) != 0)
    v45 = COERCE__INT64((double)v37) + 0x2000000000000;
  *(_QWORD *)(a1 + 8 * v30) = v45;
  if (!v38)
    v38 = (JSC::JSRopeString *)*((_QWORD *)v12 + 5276);
  *(_QWORD *)(a1 + 8 * v27) = v38;
  if (*((_BYTE *)v34 + 1569))
    JSC::doExceptionFuzzing((unint64_t)v11, &v214, "CommonSlowPaths", a2);
  if (*((_QWORD *)v44 + 2))
    return v34 + 248;
  return (uint64_t *)a2;
}

__int128 *slow_path_enumerator_get_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int8x16_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  JSC::JSRopeString *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t Index;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  const WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  JSC::JSString *v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  BOOL v105;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  _QWORD *v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl **v115;
  WTF::StringImpl *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int8x16_t **v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  JSC::VM *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned int v168;
  JSC::VM *v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int8x16_t **v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unsigned __int8 *v203;
  int v204;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v206;
  void *v207;
  const unsigned __int8 *v208;
  uint64_t **v209;
  WTF::AtomStringImpl *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 *v226;
  uint64_t v227;
  unsigned int v228;
  JSC::VM *v229;
  uint64_t v230;
  char v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  int v238;
  char v239;
  uint64_t v240;
  int v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD *v245;
  unsigned __int16 *v246;
  uint64_t v247;
  unsigned int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  unsigned __int8 *v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  JSC::JSString *v257;
  char v258;
  JSC::VM *v259;
  JSC::JSGlobalObject *v260;
  int8x16_t v261;
  __int128 v262;
  JSC::VM *v263;
  JSC::JSString *v264;
  WTF::StringImpl *v265;
  uint64_t v266;
  unint64_t v267;
  JSC::JSString *v268;
  JSC::JSString *v269;
  _QWORD v270[2];
  uint64_t v271;
  char v272;
  int8x16_t **v273;
  uint64_t v274;
  WTF::StringImpl *v275[2];
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD v279[2];
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v259 = v10;
  v260 = v9;
  v263 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988F9F38);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v18 = *(int8x16_t *)(a2 + 2);
    v19 = *(_OWORD *)(a2 + 18);
    v261 = v18;
    v262 = v19;
  }
  else if (v17 == 128)
  {
    JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v261.i32, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v261.i32, a2 + 1);
  }
  if (v261.i32[1] >= 0x40000000)
  {
    v83 = *(_QWORD *)(a1 + 16);
    if ((v261.i32[1] - 0x40000000) >= *(_DWORD *)(v83 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FA978);
    }
    v20 = (uint64_t *)(*(_QWORD *)(v83 + 160) + 8 * (v261.i32[1] - 0x40000000));
  }
  else
  {
    v20 = (uint64_t *)(a1 + 8 * v261.i32[1]);
  }
  v21 = *v20;
  v22 = *(JSC::JSRopeString **)(a1 + 8 * v261.i32[3]);
  v23 = v8[17];
  v24 = *(unsigned __int16 *)(v23 + 86);
  if (!*(_WORD *)(v23 + 86))
    v24 = *(_DWORD *)(v23 + 268);
  v25 = ((v23 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * HIDWORD(v262);
  v26 = *(_QWORD *)(a1 + 8 * v261.i32[2]);
  *(_BYTE *)(v25 + 12) |= v26;
  v27 = *(_QWORD *)(a1 + 8 * SDWORD1(v262));
  v28 = *(_QWORD *)(a1 + 8 * (int)v262);
  v264 = (JSC::JSString *)v21;
  v29 = (JSC::VM *)*((_QWORD *)v260 + 7);
  if (v26 != 2)
  {
    if (v26 == 4)
    {
      if ((v21 & 0xFFFE000000000002) == 0)
        *(_DWORD *)v25 = *(_DWORD *)v21;
      goto LABEL_16;
    }
    if (v26 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1988FA280);
    }
    if ((v21 & 0xFFFE000000000002) == 0)
      *(_DWORD *)v25 = *(_DWORD *)v21;
    v18.i64[0] = 0xFFFFFFFF00000000;
    v276 = 0xFFFFFFFF00000000;
    LOBYTE(v280) = 0;
    v281 = 0;
    v282 = 0;
    v283 = 0;
    v278 = 0;
    memset(v279, 0, 13);
    v277 = v21;
    if ((v21 & 0xFFFE000000000002) != 0)
      goto LABEL_462;
    v70 = *(unsigned __int8 *)(v21 + 5);
    if (v70 > 0x16)
    {
LABEL_91:
      Index = 10;
      while (1)
      {
        v71 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        v79 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v71 + 0x4C) + 0x70))(v21, v260, v28, v275);
        if (*((_DWORD *)v29 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v29, v72, (uint64_t)v73, v74, v75, v76, v77, v78))
        {
LABEL_249:
          Index = 10;
          goto LABEL_106;
        }
        if ((v79 & 1) != 0)
        {
          if (BYTE1(v279[1]) == 1)
          {
            Index = (uint64_t)v275[0];
          }
          else if (BYTE1(v279[1]) == 2)
          {
            Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v275, v260, (uint64_t)v73, v74, v75, v76, v77, v78);
          }
          else
          {
            v209 = (uint64_t **)*((_QWORD *)v260 + 7);
            JSC::Identifier::from(v209, v28, v73, v74, v75, v76, v77, v78, (int **)&v265);
            Index = JSC::PropertySlot::customGetter((uint64_t)v275, (JSC::VM *)v209, v265);
            v217 = v265;
            v265 = 0;
            if (v217)
            {
              if (*(_DWORD *)v217 == 2)
              {
                WTF::StringImpl::~StringImpl(v217, v210, v211, v212, v213, v214, v215, v216);
                WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
              }
              else
              {
                *(_DWORD *)v217 -= 2;
              }
            }
          }
          goto LABEL_106;
        }
        if (BYTE2(v279[1]) == 3)
        {
          if (BYTE4(v279[1]))
            goto LABEL_249;
          v80 = *(unsigned __int8 *)(v21 + 5);
          if (v80 == 61)
            goto LABEL_97;
        }
        else
        {
          v80 = *(unsigned __int8 *)(v21 + 5);
          if (v80 == 61)
          {
            if (BYTE2(v279[1]) == 1)
              goto LABEL_249;
            goto LABEL_97;
          }
        }
        if ((v80 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v21, v72, (uint64_t)v73, v74, v75, v76, v77, v78) <= v28)
        {
          goto LABEL_249;
        }
LABEL_97:
        if ((*(_WORD *)(v71 + 12) & 0x800) == 0 || BYTE2(v279[1]) == 3)
        {
          v81 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
          if (!v81)
            v81 = *(_QWORD *)(v21 + 16);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v81 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v21, v260);
          }
          else
          {
            v81 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
            if (!v81)
              v81 = *(_QWORD *)(v21 + 16);
          }
          if (*((_DWORD *)v29 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v29, v72, (uint64_t)v73, v74, v75, v76, v77, v78))
          {
            goto LABEL_249;
          }
        }
        if ((v81 & 0xFFFE000000000002) == 0)
        {
          v21 = v81;
          if (*(unsigned __int8 *)(v81 + 5) > 0x16u)
            continue;
        }
        goto LABEL_106;
      }
    }
    if (v70 != 2)
      goto LABEL_462;
    v244 = *(_QWORD *)(v21 + 8);
    if ((v244 & 1) != 0)
      v245 = (_DWORD *)(v21 + 16);
    else
      v245 = (_DWORD *)(v244 + 4);
    if (*v245 > v28)
    {
      Index = JSC::JSString::getIndex((JSC::JSString *)v21, v260, v28, a4, a5, a6, a7, a8, v18);
      if (!*((_DWORD *)v29 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        v275[0] = (WTF::StringImpl *)Index;
        LODWORD(v276) = 10;
        v278 = 0;
        BYTE1(v279[1]) = 1;
        if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          Index = 0;
        goto LABEL_106;
      }
    }
    if (!*((_DWORD *)v29 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
LABEL_462:
      v252 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v264, (unint64_t)v260);
      if (v252)
      {
        v21 = v252;
        v29 = (JSC::VM *)*((_QWORD *)v260 + 7);
        goto LABEL_91;
      }
    }
    Index = 0;
LABEL_106:
    if (v281)
    {
      v82 = *(_DWORD *)(v280 + 4);
      if (!v82)
      {
        __break(0xC471u);
        JUMPOUT(0x1988FA1F4);
      }
      *(_DWORD *)(v280 + 4) = v82 - 1;
    }
    goto LABEL_81;
  }
  if ((v21 & 0xFFFE000000000002) == 0 && *(_DWORD *)v21 == *(_DWORD *)(v27 + 16))
  {
    if (*(unsigned __int8 *)(v21 + 5) <= 0x16u)
      v191 = 0;
    else
      v191 = v21;
    v192 = *(_DWORD *)(v27 + 32);
    v87 = v28 >= v192;
    v193 = v28 - v192 + 64;
    if (!v87)
      v193 = v28;
    if (v193 <= 63)
    {
      v194 = v191 + 16;
    }
    else
    {
      v194 = *(_QWORD *)(v191 + 8) - 8;
      v193 = 63 - v193;
    }
    Index = *(_QWORD *)(v194 + 8 * v193);
    goto LABEL_81;
  }
  *(_BYTE *)(v25 + 12) |= 8u;
LABEL_16:
  v30 = *((_QWORD *)v22 + 1);
  v31 = *((_QWORD *)v260 + 7);
  if ((v30 & 1) == 0)
  {
    if ((*(_BYTE *)(v30 + 16) & 0x10) == 0)
    {
      v107 = *(WTF::StringImpl **)(v31 + 64768);
      if (v107 != (WTF::StringImpl *)v30)
      {
        *(_DWORD *)v30 += 2;
        *(_QWORD *)(v31 + 64768) = v30;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
          }
          else
          {
            *(_DWORD *)v107 -= 2;
          }
        }
        v108 = (WTF::StringImpl *)*((_QWORD *)v22 + 1);
        if (v108)
        {
          if ((*((_BYTE *)v108 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v108 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v108, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v275);
            v108 = v275[0];
          }
        }
        v109 = *(WTF::StringImpl **)(v31 + 64776);
        *(_QWORD *)(v31 + 64776) = v108;
        if (v109)
        {
          if (*(_DWORD *)v109 == 2)
          {
            WTF::StringImpl::~StringImpl(v109, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
          }
          else
          {
            *(_DWORD *)v109 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)v22 + 1) + 16) & 0x10) == 0)
      {
        v110 = *(_DWORD **)(v31 + 64776);
        *v110 += 2;
        __dmb(0xAu);
        v111 = (WTF::StringImpl *)*((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = v110;
        v275[0] = v111;
        v112 = (_QWORD *)(v31 + 808);
        v113 = *(unsigned int *)(v31 + 820);
        if ((_DWORD)v113 == *(_DWORD *)(v31 + 816))
        {
          v115 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)v275);
          v113 = *(unsigned int *)(v31 + 820);
          v114 = (WTF::StringImpl **)(*(_QWORD *)(v31 + 808) + 8 * v113);
          v111 = *v115;
        }
        else
        {
          v114 = (WTF::StringImpl **)(*v112 + 8 * v113);
          v115 = v275;
        }
        *v115 = 0;
        *v114 = v111;
        *(_DWORD *)(v31 + 820) = v113 + 1;
        v116 = v275[0];
        v275[0] = 0;
        if (v116)
        {
          if (*(_DWORD *)v116 == 2)
          {
            WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
          }
          else
          {
            *(_DWORD *)v116 -= 2;
          }
        }
      }
      v30 = *(_QWORD *)(v31 + 64776);
    }
    *(_DWORD *)v30 += 2;
    goto LABEL_19;
  }
  JSC::JSRopeString::resolveRopeToAtomString(v22, v260);
  if (!*(_DWORD *)(v31 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v30 = (unint64_t)v275[0];
    if (!v275[0])
      goto LABEL_19;
    *(_DWORD *)v275[0] += 2;
    v275[0] = 0;
    v99 = (WTF::StringImpl *)v30;
LABEL_132:
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
    goto LABEL_19;
  }
  v30 = 0;
  v99 = v275[0];
  v275[0] = 0;
  if (v99)
    goto LABEL_132;
LABEL_19:
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    Index = 0;
    goto LABEL_78;
  }
  v32 = (uint64_t)v264;
  v18.i64[0] = 0xFFFFFFFF00000000;
  v267 = 0xFFFFFFFF00000000;
  LOBYTE(v271) = 0;
  v272 = 0;
  v273 = 0;
  v274 = 0;
  v269 = 0;
  memset(v270, 0, 13);
  v268 = v264;
  if (((unint64_t)v264 & 0xFFFE000000000002) == 0)
  {
    v33 = *((_QWORD *)v260 + 7);
    v34 = *((unsigned __int8 *)v264 + 5);
    if (v34 > 0x16)
      goto LABEL_22;
    if (v34 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v33 + 41952) + 1768) == v30)
      {
        v234 = *((_QWORD *)v264 + 1);
        if ((v234 & 1) != 0)
          v235 = (unsigned int *)((char *)v264 + 16);
        else
          v235 = (unsigned int *)(v234 + 4);
        v236 = *v235;
        if ((v236 & 0x80000000) != 0)
          v237 = (WTF::StringImpl *)(COERCE__INT64((double)v236) + 0x2000000000000);
        else
          v237 = (WTF::StringImpl *)(v236 | 0xFFFE000000000000);
        v238 = 14;
        goto LABEL_396;
      }
      if (v30)
      {
        v241 = *(_DWORD *)(v30 + 16);
        if ((v241 & 0x20) == 0)
        {
          v242 = *(_BYTE **)(v30 + 8);
          v243 = *(unsigned int *)(v30 + 4);
          if ((v241 & 4) != 0)
          {
            if (!(_DWORD)v243)
              goto LABEL_406;
            a3 = *v242 - 48;
            if (a3 > 9 || v243 >= 2 && *v242 == 48)
              goto LABEL_406;
            v253 = v242 + 1;
            v254 = v243 - 1;
            while (v254)
            {
              if (a3 > 0x19999999)
                goto LABEL_406;
              v255 = *v253 - 48;
              if (v255 > 9)
                goto LABEL_406;
              v239 = 0;
              v87 = __CFADD__(v255, 10 * a3);
              a3 = v255 + 10 * (_DWORD)a3;
              ++v253;
              --v254;
              if (v87)
                goto LABEL_397;
            }
          }
          else
          {
            if (!(_DWORD)v243)
              goto LABEL_406;
            a3 = *(unsigned __int16 *)v242 - 48;
            if (a3 > 9 || *(_WORD *)v242 == 48 && v243 > 1)
              goto LABEL_406;
            v246 = (unsigned __int16 *)(v242 + 2);
            v247 = v243 - 1;
            while (v247)
            {
              if (a3 > 0x19999999)
                goto LABEL_406;
              v248 = *v246 - 48;
              if (v248 > 9)
                goto LABEL_406;
              v239 = 0;
              v87 = __CFADD__(v248, 10 * a3);
              a3 = v248 + 10 * (_DWORD)a3;
              ++v246;
              --v247;
              if (v87)
                goto LABEL_397;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v256 = *((_QWORD *)v264 + 1);
            v257 = (v256 & 1) != 0 ? (JSC::JSString *)((char *)v264 + 16) : (JSC::JSString *)(v256 + 4);
            if (*(_DWORD *)v257 > a3)
            {
              v237 = (WTF::StringImpl *)JSC::JSString::getIndex(v264, v260, a3, a4, a5, a6, a7, a8, v18);
              if (!*(_DWORD *)(v33 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
              {
                v238 = 10;
LABEL_396:
                v265 = v237;
                LODWORD(v267) = v238;
                v269 = 0;
                v239 = 1;
                BYTE1(v270[1]) = 1;
                goto LABEL_397;
              }
            }
          }
        }
      }
LABEL_406:
      v239 = 0;
LABEL_397:
      if (*(_DWORD *)(v33 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_65;
      }
      if ((v239 & 1) != 0)
        goto LABEL_73;
    }
  }
  v240 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v264, (unint64_t)v260);
  if (!v240)
    goto LABEL_65;
  v32 = v240;
  v33 = *((_QWORD *)v260 + 7);
LABEL_22:
  v35 = (_BYTE *)(v32 + 6);
  v36 = v30 >> 4;
  v37 = v32;
  if ((*(_BYTE *)(v32 + 6) & 8) != 0)
  {
LABEL_169:
    if (v30)
    {
      v137 = *(_DWORD *)(v30 + 16);
      if ((v137 & 0x20) == 0)
      {
        v138 = *(_BYTE **)(v30 + 8);
        v139 = *(unsigned int *)(v30 + 4);
        if ((v137 & 4) != 0)
        {
          if ((_DWORD)v139)
          {
            v140 = *v138 - 48;
            if (v140 <= 9 && (v139 < 2 || *v138 != 48))
            {
              v249 = v138 + 1;
              v250 = v139 - 1;
              while (v250)
              {
                if (v140 <= 0x19999999)
                {
                  v251 = *v249 - 48;
                  if (v251 <= 9)
                  {
                    v87 = __CFADD__(v251, 10 * v140);
                    v140 = v251 + 10 * (_DWORD)v140;
                    ++v249;
                    --v250;
                    if (!v87)
                      continue;
                  }
                }
                goto LABEL_174;
              }
              if ((_DWORD)v140 != -1)
                goto LABEL_231;
            }
          }
        }
        else if ((_DWORD)v139)
        {
          v140 = *(unsigned __int16 *)v138 - 48;
          if (v140 <= 9 && (*(_WORD *)v138 != 48 || v139 <= 1))
          {
            v166 = (unsigned __int16 *)(v138 + 2);
            v167 = v139 - 1;
            while (v167)
            {
              if (v140 <= 0x19999999)
              {
                v168 = *v166 - 48;
                if (v168 <= 9)
                {
                  v87 = __CFADD__(v168, 10 * v140);
                  v140 = v168 + 10 * (_DWORD)v140;
                  ++v166;
                  --v167;
                  if (!v87)
                    continue;
                }
              }
              goto LABEL_174;
            }
            if ((_DWORD)v140 != -1)
            {
LABEL_231:
              v169 = (JSC::VM *)*((_QWORD *)v260 + 7);
              Index = 10;
              while (1)
              {
                v170 = 16 * (*(_DWORD *)v32 & 0xFFFFFFFE);
                v171 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v170 + 0x4C) + 0x70))(v32, v260, v140, &v265);
                v172 = v171;
                if (*((_DWORD *)v169 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v169, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v172) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_73;
LABEL_65:
                    Index = 10;
                    goto LABEL_75;
                  }
                }
                else if ((v171 & 1) != 0)
                {
                  goto LABEL_73;
                }
                if (BYTE2(v270[1]) == 3)
                {
                  if (BYTE4(v270[1]))
                    goto LABEL_65;
                  v173 = *(unsigned __int8 *)(v32 + 5);
                  if (v173 == 61)
                    goto LABEL_237;
                }
                else
                {
                  v173 = *(unsigned __int8 *)(v32 + 5);
                  if (v173 == 61)
                  {
                    if (BYTE2(v270[1]) == 1)
                      goto LABEL_65;
                    goto LABEL_237;
                  }
                }
                if ((v173 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v32, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v140)
                {
                  goto LABEL_65;
                }
LABEL_237:
                if ((*(_WORD *)(v170 + 12) & 0x800) == 0 || BYTE2(v270[1]) == 3)
                {
                  v174 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x30);
                  if (!v174)
                    v174 = *(_QWORD *)(v32 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v174 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v32, v260);
                  }
                  else
                  {
                    v174 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x30);
                    if (!v174)
                      v174 = *(_QWORD *)(v32 + 16);
                  }
                  if (*((_DWORD *)v169 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v169, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_65;
                  }
                }
                if ((v174 & 0xFFFE000000000002) == 0)
                {
                  v32 = v174;
                  if (*(unsigned __int8 *)(v174 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_75;
              }
            }
          }
        }
      }
    }
LABEL_174:
    v141 = (JSC::VM *)*((_QWORD *)v260 + 7);
    Index = 10;
    while (1)
    {
      v142 = 16 * (*(_DWORD *)v37 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v37 + 6) & 8) == 0)
        break;
      v258 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C) + 0x68))(v37, v260, v30, &v265);
      if (*((_DWORD *)v141 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v141, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_65;
      if ((v258 & 1) != 0)
        goto LABEL_73;
      if (BYTE2(v270[1]) == 3)
      {
        if (BYTE4(v270[1]))
          goto LABEL_65;
        v200 = *(unsigned __int8 *)(v37 + 5);
        if (v200 != 61)
        {
LABEL_292:
          if (!v30)
            goto LABEL_188;
          if ((v200 - 50) < 0xFFFFFFF5)
            goto LABEL_188;
          v201 = *(_DWORD *)(v30 + 16);
          if ((v201 & 0x20) != 0)
            goto LABEL_188;
          v202 = *(unsigned int *)(v30 + 4);
          if (!(_DWORD)v202)
            goto LABEL_188;
          v203 = *(unsigned __int8 **)(v30 + 8);
          if ((v201 & 4) == 0)
          {
            v204 = *(unsigned __int16 *)v203;
            if ((_DWORD)v202 == 1)
              goto LABEL_298;
            if (v204 == 45)
            {
              v204 = *((unsigned __int16 *)v203 + 1);
              goto LABEL_309;
            }
            if ((v204 - 48) >= 0xA && ((_DWORD)v202 != 8 || v204 != 73))
            {
LABEL_325:
              if ((_DWORD)v202 != 3 || v204 != 78)
                goto LABEL_188;
            }
LABEL_313:
            v32 = v32 & 0xFFFFFF0000000000 | v202 | ((unint64_t)((v201 >> 2) & 1) << 32);
            JSC::jsToNumber(v203, v32);
            v207 = WTF::numberToString(v275, v206);
            if (WTF::equal(v30, (unint64_t)v207, v208))
              goto LABEL_65;
            goto LABEL_188;
          }
          v204 = *v203;
          if ((_DWORD)v202 == 1)
          {
LABEL_298:
            if ((v204 - 48) < 0xA)
              goto LABEL_65;
            goto LABEL_188;
          }
          if (v204 == 45)
          {
            v204 = v203[1];
LABEL_309:
            if ((v204 - 48) < 0xA)
            {
              if ((_DWORD)v202 == 2)
                goto LABEL_65;
              goto LABEL_313;
            }
            if ((_DWORD)v202 != 9)
              goto LABEL_188;
          }
          else
          {
            if ((v204 - 48) < 0xA)
              goto LABEL_313;
            if ((_DWORD)v202 != 8)
              goto LABEL_325;
          }
          if (v204 != 73)
            goto LABEL_188;
          goto LABEL_313;
        }
      }
      else
      {
        v200 = *(unsigned __int8 *)(v37 + 5);
        if (v200 != 61)
          goto LABEL_292;
        if (BYTE2(v270[1]) == 1)
          goto LABEL_65;
      }
LABEL_188:
      if ((*(_WORD *)(v142 + 12) & 0x800) == 0)
      {
        v154 = *(_DWORD *)v37;
LABEL_190:
        v155 = *(_QWORD *)(16 * (v154 & 0xFFFFFFFE) + 0x30);
        if (!v155)
          v155 = *(_QWORD *)(v37 + 16);
        goto LABEL_192;
      }
      v154 = *(_DWORD *)v37;
      if (BYTE2(v270[1]) == 3)
        goto LABEL_190;
      v199 = 16 * (v154 & 0xFFFFFFFE);
      if ((*(_WORD *)(v199 + 12) & 0x800) != 0)
      {
        v155 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v199 + 76) + 0xB0))(v37, v260);
      }
      else
      {
        v155 = *(_QWORD *)(v199 + 48);
        if (!v155)
          v155 = *(_QWORD *)(v37 + 16);
      }
      if (*((_DWORD *)v141 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v141, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_65;
LABEL_192:
      if ((v155 & 0xFFFE000000000002) == 0)
      {
        v37 = v155;
        if (*(unsigned __int8 *)(v155 + 5) > 0x16u)
          continue;
      }
      goto LABEL_75;
    }
    if ((_DWORD)v36 && (v36 & ~*(_DWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v143 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x58);
      if (v143
        || (v156 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v156 + 5) == 1 || *(_DWORD *)(v156 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE)), v141, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v143))
      {
        if (*(_DWORD *)(v143 + 24))
        {
          v144 = *(_QWORD *)(v143 + 16);
          v145 = v144 & 0xFFFFFFFFFFFFFFFELL;
          v146 = *(unsigned int *)(v143 + 8);
          v147 = *(_DWORD *)(v30 + 16);
          if ((v144 & 1) != 0)
          {
            if ((v147 & 0x20) != 0)
              v147 = *(_DWORD *)(v30 + 32);
            v148 = *(_DWORD *)(v143 + 12);
            v149 = (v147 >> 8) & *(_QWORD *)&v148;
            v150 = *(unsigned __int8 *)(v145 + v149);
            if (*(_BYTE *)(v145 + v149))
            {
              v151 = v145 + v146;
              v152 = 1;
              while (1)
              {
                v153 = *(_QWORD *)(v151 + 8 * (v150 - 1));
                if (v30 == (v153 & 0xFFFFFFFFFFFFLL))
                  break;
                v149 = ((_DWORD)v149 + v152) & v148;
                v150 = *(unsigned __int8 *)(v145 + v149);
                ++v152;
                if (!*(_BYTE *)(v145 + v149))
                  goto LABEL_187;
              }
              a6 = (v153 >> 16) & 0xFF00000000 | HIBYTE(v153);
              goto LABEL_200;
            }
          }
          else
          {
            if ((v147 & 0x20) != 0)
              v147 = *(_DWORD *)(v30 + 32);
            v157 = *(_DWORD *)(v143 + 12);
            v158 = v157 & (v147 >> 8);
            v159 = *(_DWORD *)(v145 + 4 * v158);
            if (v159)
            {
              v160 = v145 + 4 * v146;
              v161 = 1;
              while (1)
              {
                v162 = (v159 - 1);
                if (v30 == *(_QWORD *)(v160 + 16 * v162))
                  break;
                v158 = (v158 + v161) & v157;
                v159 = *(_DWORD *)(v145 + 4 * v158);
                ++v161;
                if (!v159)
                  goto LABEL_187;
              }
              a6 = *(unsigned int *)(v160 + 16 * v162 + 8) | ((unint64_t)*(unsigned __int8 *)(v160 + 16 * v162 + 12) << 32);
LABEL_200:
              if ((_DWORD)a6 != -1)
              {
                a5 = HIDWORD(a6);
                if ((int)a6 <= 63)
                {
                  v163 = v37 + 16;
                  v164 = a6 << 32;
                }
                else
                {
                  v163 = *(_QWORD *)(v37 + 8) - 8;
                  v164 = 0x3F00000000 - (a6 << 32);
                }
                a4 = *(_QWORD *)(v163 + (v164 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v165 = *(unsigned __int8 *)(a4 + 5);
                  if (v165 != 5)
                  {
                    if (v165 != 6)
                      goto LABEL_218;
                    v195 = *(_DWORD *)(v142 + 16) & 3;
                    v196 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v198 = *(int8x16_t ***)(a4 + 24);
                      v197 = *(_QWORD *)(a4 + 32);
                      v265 = *(WTF::StringImpl **)(a4 + 8);
                      v266 = v196;
                      LODWORD(v267) = HIDWORD(a6);
                      v269 = (JSC::JSString *)v37;
                      BYTE1(v270[1]) = 3;
                      if (v195 != 2)
                        LOBYTE(v270[1]) = 1;
                      BYTE3(v270[1]) = 1;
                      v273 = v198;
                      v274 = v197;
                      goto LABEL_73;
                    }
                    v265 = *(WTF::StringImpl **)(a4 + 8);
                    v266 = v196;
                    LODWORD(v267) = HIDWORD(a6);
                    v269 = (JSC::JSString *)v37;
                    BYTE1(v270[1]) = 3;
                    if (v195 == 2)
                      goto LABEL_73;
LABEL_246:
                    LOBYTE(v270[1]) = 1;
                    goto LABEL_73;
                  }
                  v97 = (unsigned int *)v37;
                  v98 = (uint64_t)v141;
LABEL_126:
                  JSC::JSObject::fillGetterPropertySlot(v97, v98, (uint64_t)&v265, a4, a5, a6);
                  goto LABEL_73;
                }
LABEL_218:
                v265 = (WTF::StringImpl *)a4;
                v269 = (JSC::JSString *)v37;
LABEL_72:
                v267 = __PAIR64__(a6, a5);
                LOWORD(v270[1]) = 257;
                goto LABEL_73;
              }
            }
          }
        }
      }
    }
LABEL_187:
    if ((*(_BYTE *)(v37 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v37, v141, v30, (uint64_t)&v265) & 1) != 0)
    {
      goto LABEL_73;
    }
    goto LABEL_188;
  }
  v38 = v32;
  while (1)
  {
    v39 = *(_DWORD *)v38 & 0xFFFFFFFE;
    v40 = 16 * v39;
    if (!(_DWORD)v36 || (v36 & ~*(_DWORD *)(16 * v39 + 0x20)) != 0)
      goto LABEL_35;
    v41 = *(_QWORD *)(16 * v39 + 0x58);
    if (!v41)
    {
      v52 = *(_QWORD *)(16 * v39 + 0x40);
      if (!v52 || *(_BYTE *)(v52 + 5) != 1 && *(_DWORD *)(v52 + 80) < 2u)
        goto LABEL_35;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v40, (JSC::VM *)v33, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v41)
        goto LABEL_35;
    }
    if (!*(_DWORD *)(v41 + 24))
      goto LABEL_35;
    v42 = *(_QWORD *)(v41 + 16);
    v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
    v44 = *(unsigned int *)(v41 + 8);
    v45 = *(_DWORD *)(v30 + 16);
    if ((v42 & 1) != 0)
    {
      if ((v45 & 0x20) != 0)
        v45 = *(_DWORD *)(v30 + 32);
      v46 = *(_DWORD *)(v41 + 12);
      v47 = (v45 >> 8) & *(_QWORD *)&v46;
      v48 = *(unsigned __int8 *)(v43 + v47);
      if (!*(_BYTE *)(v43 + v47))
        goto LABEL_35;
      v49 = v43 + v44;
      v50 = 1;
      while (1)
      {
        v51 = *(_QWORD *)(v49 + 8 * (v48 - 1));
        if (v30 == (v51 & 0xFFFFFFFFFFFFLL))
          break;
        v47 = ((_DWORD)v47 + v50) & v46;
        v48 = *(unsigned __int8 *)(v43 + v47);
        ++v50;
        if (!*(_BYTE *)(v43 + v47))
          goto LABEL_35;
      }
      a6 = (v51 >> 16) & 0xFF00000000 | HIBYTE(v51);
    }
    else
    {
      if ((v45 & 0x20) != 0)
        v45 = *(_DWORD *)(v30 + 32);
      v53 = *(_DWORD *)(v41 + 12);
      v54 = v53 & (v45 >> 8);
      v55 = *(_DWORD *)(v43 + 4 * v54);
      if (!v55)
        goto LABEL_35;
      v56 = v43 + 4 * v44;
      v57 = 1;
      while (1)
      {
        v58 = (v55 - 1);
        if (v30 == *(_QWORD *)(v56 + 16 * v58))
          break;
        v54 = (v54 + v57) & v53;
        v55 = *(_DWORD *)(v43 + 4 * v54);
        ++v57;
        if (!v55)
          goto LABEL_35;
      }
      a6 = *(unsigned int *)(v56 + 16 * v58 + 8) | ((unint64_t)*(unsigned __int8 *)(v56 + 16 * v58 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v64 = v38 + 16;
        v65 = a6 << 32;
      }
      else
      {
        v64 = *(_QWORD *)(v38 + 8) - 8;
        v65 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v64 + (v65 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_71;
      v66 = *(unsigned __int8 *)(a4 + 5);
      if (v66 == 5)
      {
        v97 = (unsigned int *)v38;
        v98 = v33;
        goto LABEL_126;
      }
      if (v66 != 6)
      {
LABEL_71:
        v265 = (WTF::StringImpl *)a4;
        v269 = (JSC::JSString *)v38;
        goto LABEL_72;
      }
      v117 = *(_DWORD *)(v40 + 16) & 3;
      v118 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v265 = *(WTF::StringImpl **)(a4 + 8);
        v266 = v118;
        LODWORD(v267) = HIDWORD(a6);
        v269 = (JSC::JSString *)v38;
        BYTE1(v270[1]) = 3;
        if (v117 == 2)
          goto LABEL_73;
        goto LABEL_246;
      }
      v120 = *(int8x16_t ***)(a4 + 24);
      v119 = *(_QWORD *)(a4 + 32);
      v265 = *(WTF::StringImpl **)(a4 + 8);
      v266 = v118;
      LODWORD(v267) = HIDWORD(a6);
      v269 = (JSC::JSString *)v38;
      BYTE1(v270[1]) = 3;
      if (v117 != 2)
        LOBYTE(v270[1]) = 1;
      BYTE3(v270[1]) = 1;
      v273 = v120;
      v274 = v119;
LABEL_73:
      if (BYTE1(v270[1]) == 1)
      {
        Index = (uint64_t)v265;
      }
      else
      {
        if (BYTE1(v270[1]) == 2)
        {
          v96 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v265, v260, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v100 = v269;
          v101 = *(_QWORD *)(16 * (*(_DWORD *)v269 & 0xFFFFFFFE) + 0x28);
          if ((v267 & 0x20) != 0)
            v100 = v268;
          if (BYTE3(v270[1]) != 1)
            goto LABEL_148;
          if (((unint64_t)v100 & 0xFFFE000000000002) != 0)
            goto LABEL_328;
          v102 = *(unsigned int *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C);
          v103 = *(_DWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C) != 0;
          v104 = 16 * v102;
          if ((_DWORD)v102)
            v105 = v273 == (int8x16_t **)v104;
          else
            v105 = 1;
          if (!v105)
          {
            do
            {
              v104 = *(_QWORD *)(v104 + 16);
              v103 = v104 != 0;
            }
            while ((int8x16_t **)v104 != v273 && v104 != 0);
          }
          if (!v103)
          {
LABEL_328:
            v275[0] = *((WTF::StringImpl **)v260 + 7);
            v96 = JSC::throwDOMAttributeGetterTypeError(v101, v275, v273, (WTF::StringImpl *)v30);
          }
          else
          {
LABEL_148:
            v96 = ((uint64_t (*)(unint64_t))v265)(v101);
          }
        }
        Index = v96;
      }
      goto LABEL_75;
    }
LABEL_35:
    if ((*v35 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v38, (JSC::VM *)v33, v30, (uint64_t)&v265) & 1) != 0)
    {
      goto LABEL_73;
    }
    v37 = *(_QWORD *)(v40 + 48);
    if (!v37)
      v37 = *(_QWORD *)(v38 + 16);
    if ((v37 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v37 + 5) < 0x17u)
      break;
    v35 = (_BYTE *)(v37 + 6);
    v38 = v37;
    if ((*(_BYTE *)(v37 + 6) & 8) != 0)
      goto LABEL_169;
  }
  if (!v30)
    goto LABEL_65;
  v59 = *(_DWORD *)(v30 + 16);
  if ((v59 & 0x20) != 0)
    goto LABEL_65;
  v60 = *(_BYTE **)(v30 + 8);
  v61 = *(unsigned int *)(v30 + 4);
  if ((v59 & 4) != 0)
  {
    if (!(_DWORD)v61)
      goto LABEL_65;
    v62 = *v60 - 48;
    if (v62 > 9 || v61 >= 2 && *v60 == 48)
      goto LABEL_65;
    v226 = v60 + 1;
    v227 = v61 - 1;
    Index = 10;
    while (v227)
    {
      if (v62 <= 0x19999999)
      {
        v228 = *v226 - 48;
        if (v228 <= 9)
        {
          v87 = __CFADD__(v228, 10 * v62);
          v62 = v228 + 10 * (_DWORD)v62;
          ++v226;
          --v227;
          if (!v87)
            continue;
        }
      }
      goto LABEL_75;
    }
  }
  else
  {
    if (!(_DWORD)v61)
      goto LABEL_65;
    v62 = *(unsigned __int16 *)v60 - 48;
    if (v62 > 9 || *(_WORD *)v60 == 48 && v61 > 1)
      goto LABEL_65;
    v84 = (unsigned __int16 *)(v60 + 2);
    v85 = v61 - 1;
    Index = 10;
    while (v85)
    {
      if (v62 <= 0x19999999)
      {
        v86 = *v84 - 48;
        if (v86 <= 9)
        {
          v87 = __CFADD__(v86, 10 * v62);
          v62 = v86 + 10 * (_DWORD)v62;
          ++v84;
          --v85;
          if (!v87)
            continue;
        }
      }
      goto LABEL_75;
    }
  }
  if ((_DWORD)v62 == -1)
    goto LABEL_65;
  v229 = (JSC::VM *)*((_QWORD *)v260 + 7);
  Index = 10;
  while (2)
  {
    v230 = 16 * (*(_DWORD *)v32 & 0xFFFFFFFE);
    v231 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v230 + 0x4C)
                                                                                                  + 0x70))(v32, v260, v62, &v265);
    if (*((_DWORD *)v229 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v229, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_65;
    if ((v231 & 1) != 0)
      goto LABEL_73;
    if (BYTE2(v270[1]) == 3)
    {
      if (BYTE4(v270[1]))
        goto LABEL_65;
      v232 = *(unsigned __int8 *)(v32 + 5);
      if (v232 != 61)
        goto LABEL_361;
    }
    else
    {
      v232 = *(unsigned __int8 *)(v32 + 5);
      if (v232 == 61)
      {
        if (BYTE2(v270[1]) == 1)
          goto LABEL_65;
      }
      else
      {
LABEL_361:
        if ((v232 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v32, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v62)
        {
          goto LABEL_65;
        }
      }
    }
    if ((*(_WORD *)(v230 + 12) & 0x800) == 0 || BYTE2(v270[1]) == 3)
    {
      v233 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x30);
      if (!v233)
        v233 = *(_QWORD *)(v32 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v233 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v32 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v32, v260);
      }
      else
      {
        v233 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x30);
        if (!v233)
          v233 = *(_QWORD *)(v32 + 16);
      }
      if (*((_DWORD *)v229 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v229, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_65;
    }
    if ((v233 & 0xFFFE000000000002) == 0)
    {
      v32 = v233;
      if (*(unsigned __int8 *)(v233 + 5) > 0x16u)
        continue;
    }
    break;
  }
LABEL_75:
  if (v272)
  {
    v67 = *(_DWORD *)(v271 + 4);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x1988FA034);
    }
    *(_DWORD *)(v271 + 4) = v67 - 1;
  }
LABEL_78:
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v30, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
LABEL_81:
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v260, &v263, "CommonSlowPaths", v15);
    v259 = v263;
  }
  if (*((_QWORD *)v259 + 2))
    return &xmmword_1ECF4C7C0;
  v68 = DWORD2(v262);
  *(_QWORD *)(a1 + 8 * v261.i32[0]) = Index;
  *(_QWORD *)(v8[17] - 16 * v68 - 16) = Index;
  return (__int128 *)v15;
}

__int128 *slow_path_enumerator_in_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  const JSC::PropertyTable *v22;
  uint64_t v23;
  _BOOL4 hasProperty;
  uint64_t v25;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  JSC::VM *v31;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v31 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v28 = *(_OWORD *)(a2 + 2);
    v29 = *(_QWORD *)(a2 + 18);
    v30 = *(_DWORD *)(a2 + 26);
  }
  else if (v17 == 128)
  {
    JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty((int *)&v28, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    JSC::OpEnumeratorInByVal::OpEnumeratorInByVal((int *)&v28, a2 + 1);
  }
  if (SDWORD1(v28) >= 0x40000000)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if ((DWORD1(v28) - 0x40000000) >= *(_DWORD *)(v27 + 172))
    {
      __break(0xC471u);
LABEL_41:
      JUMPOUT(0x1988FAF24);
    }
    v18 = (unsigned __int8 **)(*(_QWORD *)(v27 + 160) + 8 * (DWORD1(v28) - 0x40000000));
  }
  else
  {
    v18 = (unsigned __int8 **)(a1 + 8 * SDWORD1(v28));
  }
  v19 = v8[17];
  v20 = *(unsigned __int16 *)(v19 + 78);
  if (!*(_WORD *)(v19 + 78))
    v20 = *(_DWORD *)(v19 + 252);
  v21 = *v18;
  v22 = (const JSC::PropertyTable *)(((v19 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v30);
  v23 = *(_QWORD *)(a1 + 8 * SDWORD2(v28));
  *((_BYTE *)v22 + 12) |= v23;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  if (((unint64_t)v21 & 0xFFFE000000000002) != 0 || v21[5] < 0x17u || !v21)
    goto LABEL_20;
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      hasProperty = JSC::JSObject::hasProperty((JSC::JSObject *)v21, v9, *(_QWORD *)(a1 + 8 * (int)v29));
LABEL_21:
      if (hasProperty)
        v25 = 7;
      else
        v25 = 6;
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v15);
      if (!*((_QWORD *)v10 + 2))
        goto LABEL_27;
      return &xmmword_1ECF4C7C0;
    }
LABEL_20:
    hasProperty = JSC::CommonSlowPaths::opInByVal(v9, (unint64_t)v21, *(_QWORD *)(a1 + 8 * SHIDWORD(v28)), v22, a5, a6, a7, a8);
    goto LABEL_21;
  }
  if (*(_DWORD *)v21 != *(_DWORD *)(*(_QWORD *)(a1 + 8 * SHIDWORD(v29)) + 16))
    goto LABEL_20;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v15);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
  }
  v25 = 7;
LABEL_27:
  *(_QWORD *)(a1 + 8 * (int)v28) = v25;
  return (__int128 *)v15;
}

__int128 *slow_path_enumerator_put_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  JSC::JSRopeString *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unsigned __int8 v99;
  unsigned int v100;
  JSC::VM *v101;
  WTF::StringImpl *v102[2];
  int v103;
  BOOL v104;
  __int16 v105;
  char v106;
  uint64_t v107;
  unint64_t v108;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (uint64_t *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v101 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    goto LABEL_91;
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v97 = *(_OWORD *)(a2 + 2);
    v98 = *(_QWORD *)(a2 + 18);
    v99 = *(_DWORD *)(a2 + 26);
    v100 = *(_DWORD *)(a2 + 30);
  }
  else if (v17 == 128)
  {
    JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v97, (const unsigned __int16 *)a2 + 1);
  }
  else
  {
    JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v97, a2 + 1);
  }
  if ((int)v97 >= 0x40000000)
  {
    v40 = *(_QWORD *)(a1 + 16);
    if ((v97 - 0x40000000) >= *(_DWORD *)(v40 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FB5F0);
    }
    v18 = (unint64_t *)(*(_QWORD *)(v40 + 160) + 8 * (v97 - 0x40000000));
  }
  else
  {
    v18 = (unint64_t *)(a1 + 8 * (int)v97);
  }
  v19 = *v18;
  v20 = *(JSC::JSRopeString **)(a1 + 8 * SDWORD2(v97));
  if (SHIDWORD(v98) >= 0x40000000)
  {
    v41 = *(_QWORD *)(a1 + 16);
    if ((HIDWORD(v98) - 0x40000000) >= *(_DWORD *)(v41 + 172))
    {
      __break(0xC471u);
LABEL_91:
      JUMPOUT(0x1988FB438);
    }
    v21 = (unint64_t *)(*(_QWORD *)(v41 + 160) + 8 * (HIDWORD(v98) - 0x40000000));
  }
  else
  {
    v21 = (unint64_t *)(a1 + 8 * SHIDWORD(v98));
  }
  v22 = *v21;
  v23 = v8[17];
  v24 = *(unsigned __int16 *)(v23 + 82);
  if (!*(_WORD *)(v23 + 82))
    v24 = *(_DWORD *)(v23 + 260);
  v25 = *(_QWORD *)(a1 + 8 * SDWORD1(v97));
  v26 = ((v23 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v100;
  v27 = (_BYTE *)(v26 + 12);
  *(_BYTE *)(v26 + 12) |= v25;
  v28 = *(_QWORD *)(a1 + 8 * (int)v98);
  v29 = *(const WTF::StringImpl **)(a1 + 8 * SHIDWORD(v97));
  v30 = v99;
  v108 = v19;
  v31 = (JSC::VM *)v9[7];
  switch(v25)
  {
    case 2u:
      if ((v19 & 0xFFFE000000000002) == 0)
      {
        v32 = *(unsigned int *)v19;
        if ((_DWORD)v32 == *(_DWORD *)(v28 + 16) && (*(_BYTE *)((16 * v32) | 0x12) & 4) == 0)
        {
          v78 = *(_DWORD *)(v28 + 32);
          v79 = v29 >= v78;
          v80 = (_DWORD)v29 - v78 + 64;
          if (v79)
            LODWORD(v29) = v80;
          JSC::JSObject::putDirectOffset(v19, v9[7], (int)v29, v22);
          goto LABEL_27;
        }
      }
      *v27 |= 8u;
      break;
    case 1u:
      if ((v19 & 0xFFFE000000000002) != 0)
      {
        JSC::JSValue::putToPrimitiveByIndex((JSC::JSValue *)&v108, (JSC::JSGlobalObject *)v9, v29, v22, v99 == 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)v26 = *(_DWORD *)v19;
        (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) + 0x50))();
      }
      goto LABEL_27;
    case 4u:
      if ((v19 & 0xFFFE000000000002) == 0)
        *(_DWORD *)v26 = *(_DWORD *)v19;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1988FB5C0);
  }
  v33 = *((_QWORD *)v20 + 1);
  v34 = v9[7];
  if ((v33 & 1) == 0)
  {
    if ((*(_BYTE *)(v33 + 16) & 0x10) == 0)
    {
      v51 = (uint64_t *)(v34 + 64768);
      v52 = *(WTF::StringImpl **)(v34 + 64768);
      if (v52 != (WTF::StringImpl *)v33)
      {
        *(_DWORD *)v33 += 2;
        *v51 = v33;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)v29, a4, a5, a6, a7, a8);
            WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
            v51 = (uint64_t *)(v34 + 64768);
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
        }
        v53 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
        if (v53)
        {
          if ((*((_BYTE *)v53 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v53 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v53, v29, a4, a5, a6, a7, a8, (WTF *)v102);
            v53 = v102[0];
          }
          v51 = (uint64_t *)(v34 + 64768);
        }
        v54 = (WTF::StringImpl *)v51[1];
        v51[1] = (uint64_t)v53;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)v29, a4, a5, a6, a7, a8);
            WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
            v51 = (uint64_t *)(v34 + 64768);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)v20 + 1) + 16) & 0x10) == 0)
      {
        v55 = (_DWORD *)v51[1];
        *v55 += 2;
        __dmb(0xAu);
        v56 = (WTF::StringImpl *)*((_QWORD *)v20 + 1);
        *((_QWORD *)v20 + 1) = v55;
        v102[0] = v56;
        v57 = (_QWORD *)(v34 + 808);
        v58 = *(unsigned int *)(v34 + 820);
        if ((_DWORD)v58 == *(_DWORD *)(v34 + 816))
        {
          v60 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)v102);
          v51 = (uint64_t *)(v34 + 64768);
          v58 = *(unsigned int *)(v34 + 820);
          v59 = (WTF::StringImpl **)(*(_QWORD *)(v34 + 808) + 8 * v58);
          v56 = *v60;
        }
        else
        {
          v59 = (WTF::StringImpl **)(*v57 + 8 * v58);
          v60 = v102;
        }
        *v60 = 0;
        *v59 = v56;
        *(_DWORD *)(v34 + 820) = v58 + 1;
        v61 = v102[0];
        v102[0] = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, (WTF::AtomStringImpl *)a2, (uint64_t)v29, a4, a5, a6, a7, a8);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
            v51 = (uint64_t *)(v34 + 64768);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
      }
      v33 = v51[1];
    }
    *(_DWORD *)v33 += 2;
    goto LABEL_21;
  }
  JSC::JSRopeString::resolveRopeToAtomString(v20, (JSC::JSGlobalObject *)v9);
  if (!*(_DWORD *)(v34 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, (uint64_t)a2, (uint64_t)v29, a4, a5, a6, a7, a8))
  {
    v33 = (uint64_t)v102[0];
    if (!v102[0])
      goto LABEL_21;
    *(_DWORD *)v102[0] += 2;
    v102[0] = 0;
    v50 = (WTF::StringImpl *)v33;
LABEL_46:
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, (WTF::AtomStringImpl *)a2, (uint64_t)v29, a4, a5, a6, a7, a8);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
    goto LABEL_21;
  }
  v33 = 0;
  v50 = v102[0];
  v102[0] = 0;
  if (v50)
    goto LABEL_46;
LABEL_21:
  if (!*((_DWORD *)v31 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)a2, (uint64_t)v29, a4, a5, a6, a7, a8))
  {
    v102[0] = 0;
    v102[1] = (WTF::StringImpl *)v108;
    v103 = -1;
    v104 = v30 == 0;
    v105 = 0;
    v106 = 1;
    v107 = 0;
    if ((v108 & 0xFFFE000000000002) != 0)
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v108, (JSC::JSGlobalObject *)v9, v33, v22, (uint64_t)v102, a6, a7, a8);
    else
      (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v108 & 0xFFFFFFFE) + 0x4C) + 0x48))();
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
LABEL_27:
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v9, &v101, "CommonSlowPaths", v15);
    v10 = v101;
  }
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  return (__int128 *)v15;
}

__int128 *slow_path_enumerator_has_own_property(uint64_t a1, JSC::OpEnumeratorHasOwnProperty *this, int8x8_t a3)
{
  _QWORD *v3;
  JSC::JSGlobalObject *v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v10;
  const WTF::StringImpl *v12;
  JSC::Symbol *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::VM *v76;
  WTF::StringImpl *v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  JSC::VM *v85;
  WTF::StringImpl *v86[6];
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (JSC::JSGlobalObject *)v3[1];
  v5 = (JSC::VM *)v3[9];
  *((_QWORD *)v5 + 5) = a1;
  v85 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)this || v8 <= (unint64_t)this)
  {
    __break(0xC471u);
    goto LABEL_85;
  }
  v10 = (__int128 *)this;
  *(_DWORD *)(a1 + 36) = ((_DWORD)this - v7) & 0x3FFFFFFF;
  JSC::OpEnumeratorHasOwnProperty::decode((int *)this, (uint64_t)&v79, a3);
  if (v80 >= 0x40000000)
  {
    v32 = *(_QWORD *)(a1 + 16);
    if ((v80 - 0x40000000) >= *(_DWORD *)(v32 + 172))
    {
      __break(0xC471u);
LABEL_85:
      JUMPOUT(0x1988FBA18);
    }
    v18 = (unsigned __int8 **)(*(_QWORD *)(v32 + 160) + 8 * (v80 - 0x40000000));
  }
  else
  {
    v18 = (unsigned __int8 **)(a1 + 8 * v80);
  }
  v19 = (WTF::StringImpl *)*v18;
  v78 = *v18;
  v20 = v3[17];
  v21 = *(unsigned __int16 *)(v20 + 80);
  if (!*(_WORD *)(v20 + 80))
    v21 = *(_DWORD *)(v20 + 256);
  v22 = (v20 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v23 = *(_QWORD *)(a1 + 8 * v81);
  *(_BYTE *)(v22 + 16 * v84 + 12) |= v23;
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0)
    goto LABEL_17;
  if (*((unsigned __int8 *)v19 + 5) < 0x17u || v19 == 0)
    goto LABEL_17;
  if (v23 == 2)
  {
    if (*(_DWORD *)v19 == *(_DWORD *)(*(_QWORD *)(a1 + 8 * v83) + 16))
    {
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v4, &v85, "CommonSlowPaths", v10);
      if (*((_QWORD *)v5 + 2))
        return &xmmword_1ECF4C7C0;
      *(_QWORD *)(a1 + 8 * v79) = 7;
      return v10;
    }
LABEL_17:
    v25 = *(_QWORD *)(a1 + 8 * v82);
    v26 = *(_QWORD *)(v25 + 8);
    v27 = *((_QWORD *)v4 + 7);
    if ((v26 & 1) == 0)
    {
      if ((*(_BYTE *)(v26 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v26 += 2;
        v77 = (WTF::StringImpl *)v26;
      }
      else
      {
        if (*(_QWORD *)(v27 + 64768) != v26)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v27 + 64768), (WTF::AtomStringImpl *)v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
          v42 = *(WTF::StringImpl **)(v25 + 8);
          if (v42)
          {
            if ((*((_BYTE *)v42 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v42 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v42, v12, (uint64_t)v13, v14, v15, v16, v17, (WTF *)v86);
              v42 = v86[0];
            }
          }
          v43 = *(WTF::StringImpl **)(v27 + 64776);
          *(_QWORD *)(v27 + 64776) = v42;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              v76 = v5;
              v67 = v43;
              WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
              v68 = (unint64_t)v67;
              v5 = v76;
              WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else
            {
              *(_DWORD *)v43 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 8) + 16) & 0x10) == 0)
        {
          v44 = *(_DWORD **)(v27 + 64776);
          *v44 += 2;
          __dmb(0xAu);
          v45 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = v44;
          v86[0] = v45;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v27 + 192, (unint64_t)v86);
          v46 = v86[0];
          v86[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
        }
        v47 = *(WTF::StringImpl **)(v27 + 64776);
        *(_DWORD *)v47 += 2;
        v77 = v47;
      }
      goto LABEL_20;
    }
    JSC::JSRopeString::resolveRopeToAtomString(*(JSC::JSRopeString **)(a1 + 8 * v82), v4);
    if (*(_DWORD *)(v27 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v27, v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17))
    {
      v41 = v86[0];
      v77 = 0;
      v86[0] = 0;
      if (!v41)
        goto LABEL_20;
    }
    else
    {
      v41 = v86[0];
      if (!v86[0])
      {
        v77 = 0;
LABEL_20:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v4, &v85, "CommonSlowPaths", v10);
        if (*((_QWORD *)v5 + 2))
          goto LABEL_72;
        v28 = (JSC::JSGlobalObject *)JSC::JSValue::toObject((JSC::JSValue *)&v78, v4, (uint64_t)v12, v13, v14, v15, v16, v17);
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v4, &v85, "CommonSlowPaths", v10);
        if (*((_QWORD *)v5 + 2))
          goto LABEL_72;
        if (JSC::objectPrototypeHasOwnProperty(v4, v28, (uint64_t)&v77, (uint64_t)v13, v14, v15, v16, v17))
          v29 = 7;
        else
          v29 = 6;
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v4, &v85, "CommonSlowPaths", v10);
        if (*((_QWORD *)v5 + 2))
LABEL_72:
          v10 = &xmmword_1ECF4C7C0;
        else
          *(_QWORD *)(a1 + 8 * v79) = v29;
        v30 = v77;
        v77 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
            WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
        return v10;
      }
      *(_DWORD *)v86[0] += 2;
      v77 = v41;
      v86[0] = 0;
    }
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)v26, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
    goto LABEL_20;
  }
  if (v23 != 1)
    goto LABEL_17;
  v86[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
  v86[4] = 0;
  v86[5] = 0;
  v86[3] = v19;
  v87 = 0x20000;
  v88 = 0;
  LOBYTE(v89) = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v48 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) + 0x70))();
  if (v90)
  {
    v49 = *(_DWORD *)(v89 + 4);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x1988FBB1CLL);
    }
    *(_DWORD *)(v89 + 4) = v49 - 1;
  }
  if (v48)
    v50 = 7;
  else
    v50 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v4, &v85, "CommonSlowPaths", v10);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v79) = v50;
  return v10;
}

__int128 *slow_path_profile_type_clear_log(uint64_t a1, const void *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v9;
  JSC::TypeProfilerLog *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v35 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned int *)(v5 + 12) + *(_QWORD *)v5;
  if (v6 > (unint64_t)a2 || v7 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988FBC74);
  }
  v9 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v6) & 0x3FFFFFFF;
  v10 = (JSC::TypeProfilerLog *)*((_QWORD *)v4 + 11647);
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0xF00000002;
  *(_QWORD *)(v11 + 8) = "LLInt log full.";
  *(_DWORD *)(v11 + 16) = 4;
  v34 = (WTF::StringImpl *)v11;
  JSC::TypeProfilerLog::processLogEntries(v10, v4, (const WTF::String *)&v34, v12, v13, v14, v15, v16);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v35, "CommonSlowPaths", v9);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  return (__int128 *)v9;
}

void slow_path_unreachable(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 40) = a1;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  __break(0xC471u);
}

__int128 *slow_path_push_with_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, JSC::Symbol *a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 **v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  JSC::VM *v34;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v34 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x1988FBE58);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 6);
    v24 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v18 == 128)
    {
      v30 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v30 <= 63)
        v21 = *((__int16 *)a2 + 1);
      else
        v21 = v30 + 1073741760;
      v31 = *((__int16 *)a2 + 2);
      if (v31 <= 63)
        v23 = *((__int16 *)a2 + 2);
      else
        v23 = v31 + 1073741760;
      v24 = *((__int16 *)a2 + 3);
      if (v24 <= 63)
        goto LABEL_15;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 <= 15)
        v21 = (char)a2[1];
      else
        v21 = v19 + 1073741808;
      v22 = (char)a2[2];
      if (v22 <= 15)
        v23 = (char)a2[2];
      else
        v23 = v22 + 1073741808;
      v24 = (char)a2[3];
      if (v24 <= 15)
        goto LABEL_15;
    }
    v24 += v20;
  }
  if (v24 < 0x40000000)
  {
LABEL_15:
    v25 = (unsigned __int8 **)(a1 + 8 * v24);
    goto LABEL_16;
  }
  v32 = v24 - 0x40000000;
  if (v32 >= *(_DWORD *)(v11 + 172))
    goto LABEL_42;
  v25 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v32);
LABEL_16:
  v26 = (unint64_t)*v25;
  v33 = v26;
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    v29 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v33, v9);
  }
  else
  {
    if (*(unsigned __int8 *)(v26 + 5) > 0x16u)
      goto LABEL_18;
    v29 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v26, (JSC::SymbolObject **)v9, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  v26 = v29;
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v34, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  v27 = JSC::JSWithScope::create(v10, (unint64_t)v9, *(JSC::JSGlobalObject **)(a1 + 8 * v23), (JSC::JSScope *)v26, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v34, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v21) = v27;
  return (__int128 *)v16;
}

__int128 *slow_path_resolve_scope_for_hoisting_func_decl_in_eval(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSScope *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unint64_t v26;
  _DWORD *v28;
  int v29;
  int v30;
  JSC::VM *v31;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSScope **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v31 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1988FC0B4);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
  }
  else if (v17 == 128)
  {
    v29 = *((__int16 *)a2 + 1);
    if (v29 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v29 + 1073741760;
    v30 = *((__int16 *)a2 + 2);
    if (v30 <= 63)
      v21 = *((__int16 *)a2 + 2);
    else
      v21 = v30 + 1073741760;
    v22 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 <= 15)
      v21 = (char)a2[2];
    else
      v21 = v20 + 1073741808;
    v22 = a2[3];
  }
  v23 = *(unsigned int **)(*(_QWORD *)(v8 + 56) + 104);
  if (v23)
  {
    v24 = *v23;
    if (*v23 > v22)
    {
      v25 = &v23[2 * v22];
      goto LABEL_18;
    }
  }
  else
  {
    v24 = 0;
  }
  v28 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 72))(*(_QWORD *)(v8 + 120)) + 48);
  if (*v28 <= v22 - v24)
    goto LABEL_37;
  v25 = &v28[2 * (v22 - v24)];
LABEL_18:
  v26 = JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(v9, *(JSC::JSGlobalObject **)(a1 + 8 * v21), (JSC::JSScope *)(v25 + 2), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v9, &v31, "CommonSlowPaths", v15);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v19) = v26;
  return (__int128 *)v15;
}

__int128 *slow_path_resolve_scope(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::JSScope *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  JSC::JSScope *v27;
  uint64_t v28;
  const JSC::PropertyTable *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  int *v36;
  int v37;
  uint64_t v40;
  int v41;
  int hasProperty;
  unsigned __int8 *v43;
  unint64_t v45;
  int v46;
  JSC::JSScope *v47;
  _DWORD *v48;
  int v50;
  int v51;
  unint64_t v53;
  int v54;
  int v55;
  JSC::VM *v56;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSScope **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v56 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    goto LABEL_75;
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v50 = *((__int16 *)a2 + 1);
    if (v50 > 63)
      v50 += 1073741760;
    v55 = v50;
    v51 = *((__int16 *)a2 + 2);
    v20 = v51 + 1073741760;
    if (v51 <= 63)
      v20 = *((__int16 *)a2 + 2);
    v21 = *((unsigned __int16 *)a2 + 3);
    v22 = *((unsigned __int16 *)a2 + 6);
  }
  else if (v17 == 130)
  {
    v55 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
    v22 = *(_DWORD *)(a2 + 22);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 > 15)
      v18 += 1073741808;
    v55 = v18;
    v19 = (char)a2[2];
    v20 = v19 + 1073741808;
    if (v19 <= 15)
      v20 = (char)a2[2];
    v21 = a2[3];
    v22 = a2[6];
  }
  v23 = *(_QWORD *)(v9 + 136);
  v24 = *(unsigned __int16 *)(v23 + 50);
  if (!*(_WORD *)(v23 + 50))
    v24 = *(_DWORD *)(v23 + 196);
  v25 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v25)
  {
    v26 = *v25;
    if (*v25 > v21)
    {
      v27 = (JSC::JSScope *)&v25[2 * v21 + 2];
      goto LABEL_18;
    }
  }
  else
  {
    v26 = 0;
  }
  v54 = v20;
  v47 = v10;
  v48 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v48 <= v21 - v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988FC4B0);
  }
  v27 = (JSC::JSScope *)&v48[2 * (v21 - v26) + 2];
  v10 = v47;
  v20 = v54;
LABEL_18:
  v53 = (unint64_t)v10;
  v34 = JSC::JSScope::resolve(v10, *(unsigned int ***)(a1 + 8 * v20), v27, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v53, &v56, "CommonSlowPaths", v16);
  if (*(_QWORD *)(v11 + 16))
    return &xmmword_1ECF4C7C0;
  v35 = (v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (int *)(v35 + 16 * v22);
  v37 = *v36;
  if ((*v36 - 10) < 2 || v37 == 0 || v37 == 6)
  {
    v40 = v37;
    v41 = *((unsigned __int8 *)v34 + 5);
    if (v41 == 51)
    {
      hasProperty = JSC::JSObject::hasProperty((unint64_t)v34, (uint64_t)v34, *(_QWORD *)v27, v29, v30, v31, v32, v33);
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v34, &v56, "CommonSlowPaths", v16);
      if (*(_QWORD *)(v11 + 16))
        return &xmmword_1ECF4C7C0;
      if (!hasProperty)
        goto LABEL_49;
      v43 = (unsigned __int8 *)(v9 + 16);
      if (__ldaxr((unsigned __int8 *)(v9 + 16)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v43))
      {
        goto LABEL_37;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 16);
LABEL_37:
      if (v40 >= 0xC)
      {
        __break(0xC471u);
        JUMPOUT(0x1988FC540);
      }
      *v36 = dword_199157610[v40];
      v45 = v35 + 16 * v22;
      *(_QWORD *)(v45 + 8) = v34;
      if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v9 + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, v9);
      *(_DWORD *)(v45 + 4) = v34[794];
      goto LABEL_41;
    }
    if (v41 != 52)
      goto LABEL_49;
    v43 = (unsigned __int8 *)(v9 + 16);
    if (__ldaxr((unsigned __int8 *)(v9 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v43))
    {
      goto LABEL_68;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 16);
LABEL_68:
    if (v40 >= 0xC)
    {
      __break(0xC471u);
LABEL_75:
      JUMPOUT(0x1988FC43CLL);
    }
    *v36 = dword_199157640[v40];
    *(_QWORD *)(v35 + 16 * v22 + 8) = v34;
    if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v9 + 7))
      JSC::Heap::writeBarrierSlowPath(v11 + 192, v9);
LABEL_41:
    v46 = __ldxr(v43);
    if (v46 == 1)
    {
      if (!__stlxr(0, v43))
        goto LABEL_49;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v43, 0, v28, (uint64_t)v29, v30, v31, v32, v33);
  }
LABEL_49:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v53, &v56, "CommonSlowPaths", v16);
  if (*((_QWORD *)v56 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v55) = v34;
  return (__int128 *)v16;
}

__int128 *slow_path_create_rest(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v28;
  int v29;
  JSC::JSGlobalObject *v30;
  unint64_t v31;
  int v33;
  unint64_t v34;
  JSC::VM *v35;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v35 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1988FC6C4);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((unsigned __int16 *)a2 + 3);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_31:
    v33 = v21 + v20;
    goto LABEL_32;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = a2[3];
    if (v21 <= 15)
    {
LABEL_11:
      v23 = v19;
      v24 = v22;
LABEL_12:
      v25 = (unint64_t *)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_31;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v33 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_32:
  v21 = v33;
  v23 = v19;
  v24 = v22;
  if (v33 < 0x40000000)
    goto LABEL_12;
  v34 = (v33 - 0x40000000);
  if (v34 >= *(unsigned int *)(v11 + 172))
    goto LABEL_36;
  v25 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v34);
LABEL_13:
  v26 = *v25;
  if (v26 >= 0xFFFE000000000000 && (v26 & 0x80000000) == 0)
    v28 = v26;
  else
    v28 = COERCE_DOUBLE(v26 - 0x2000000000000);
  v29 = *((_DWORD *)v9 + 227);
  if (v29)
    v30 = (JSC::JSGlobalObject *)(16 * (v29 & 0xFFFFFFFE));
  else
    v30 = 0;
  v31 = JSC::constructArray(v9, v30, (JSC::Structure *)(a1 + 8 * v24 + 48), (const JSC::JSValue *)v28, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v35, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v23) = v31;
  return (__int128 *)v16;
}

__int128 *slow_path_get_by_val_with_this(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v15;
  int v17;
  int16x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int v22;
  int v23;
  JSC::JSString **v24;
  JSC::JSString *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  unint64_t v41;
  int v42;
  JSC::JSString *v43;
  JSC::VM *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  JSC::JSString *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  unsigned int v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t Index;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t ***v130;
  JSC::VM *v131;
  uint64_t **v132;
  uint64_t v133;
  uint64_t v134;
  const WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  JSC::VM *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  JSC::VM *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned __int8 *v191;
  int v192;
  JSC::VM *v193;
  unint64_t NotAnObjectError;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  void *v201;
  const unsigned __int8 *v202;
  unsigned __int8 *v203;
  uint64_t v204;
  unsigned int v205;
  JSC::VM *v206;
  uint64_t v207;
  char v208;
  int v209;
  uint64_t v210;
  JSC::VM *v211;
  WTF::AtomStringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  JSC::VM *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  int v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  char v265;
  uint64_t v266;
  int v267;
  _BYTE *v268;
  uint64_t v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unsigned int v272;
  unsigned __int8 *v273;
  uint64_t v274;
  unsigned int v275;
  JSC::VM *v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  JSC::JSString *v287;
  char v288;
  JSC::VM **v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD v295[2];
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  JSC::JSString *v300;
  int8x16_t v301;
  uint64_t v302;
  JSC::VM *v303;
  unsigned __int8 *v304;
  WTF::StringImpl *v305[18];

  v305[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 16);
  v289 = (JSC::VM **)v9[1];
  v10 = (JSC::VM *)v9[9];
  *((_QWORD *)v10 + 5) = a1;
  v303 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988FD2F4);
  }
  v15 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v21 = *(int8x16_t *)(a2 + 2);
    v301 = v21;
    v302 = *(_QWORD *)(a2 + 18);
    goto LABEL_9;
  }
  if (v17 != 128)
  {
    a9.i32[0] = *(_DWORD *)(a2 + 1);
    v18 = (int16x4_t)vmovl_s8(a9).u64[0];
    v19 = vmovl_s16(v18);
    v20.i64[0] = 0xF0000000FLL;
    v20.i64[1] = 0xF0000000FLL;
    v21 = vbslq_s8((int8x16_t)vcgtq_s32(v19, v20), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v18), (int8x16_t)v19);
    v301 = v21;
    v22 = a2[6];
    LODWORD(v302) = a2[5];
    HIDWORD(v302) = v22;
LABEL_9:
    v23 = v21.i32[1];
    goto LABEL_10;
  }
  JSC::OpGetByValWithThis::OpGetByValWithThis(v301.i32, (const unsigned __int16 *)a2 + 1);
  v23 = v301.i32[1];
LABEL_10:
  if (v23 >= 0x40000000)
  {
    v81 = *(_QWORD *)(a1 + 16);
    v82 = v23 - 0x40000000;
    if (v82 >= *(_DWORD *)(v81 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FDD28);
    }
    v24 = (JSC::JSString **)(*(_QWORD *)(v81 + 160) + 8 * v82);
  }
  else
  {
    v24 = (JSC::JSString **)(a1 + 8 * v23);
  }
  v25 = *v24;
  v300 = v25;
  if (v301.i32[2] >= 0x40000000)
  {
    v83 = *(_QWORD *)(a1 + 16);
    if ((v301.i32[2] - 0x40000000) >= *(_DWORD *)(v83 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FDD30);
    }
    v26 = (uint64_t *)(*(_QWORD *)(v83 + 160) + 8 * (v301.i32[2] - 0x40000000));
  }
  else
  {
    v26 = (uint64_t *)(a1 + 8 * v301.i32[2]);
  }
  v27 = *v26;
  if (v301.i32[3] >= 0x40000000)
  {
    v84 = *(_QWORD *)(a1 + 16);
    if ((v301.i32[3] - 0x40000000) >= *(_DWORD *)(v84 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FDD38);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v84 + 160) + 8 * (v301.i32[3] - 0x40000000));
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v301.i32[3]);
  }
  v29 = *v28;
  v30 = *v28 & 0xFFFE000000000002;
  if ((unint64_t)v25 & 0xFFFE000000000002 | v30)
    goto LABEL_41;
  if (*(_BYTE *)(v29 + 5) != 2)
    goto LABEL_41;
  v31 = 16 * (*(_DWORD *)v25 & 0xFFFFFFFE);
  if (((*(_DWORD *)(v31 + 0x10) | *(unsigned __int8 *)(v31 + 0xA)) & 8) != 0)
    goto LABEL_41;
  v32 = *(_QWORD *)(v29 + 8);
  if ((v32 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v29, (JSC::JSGlobalObject *)v289);
    goto LABEL_137;
  }
  if ((*(_BYTE *)(v32 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::lookUp(*(WTF::AtomStringImpl **)(v29 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v305);
LABEL_137:
    v32 = (unint64_t)v305[0];
    goto LABEL_22;
  }
  *(_DWORD *)v32 += 2;
LABEL_22:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
  {
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    return &xmmword_1ECF4C7C0;
  }
  if (v32)
  {
    if ((v32 >> 4))
    {
      if (((v32 >> 4) & ~*(_DWORD *)(v31 + 32)) == 0)
      {
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v31, v10, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (v33)
        {
          v305[0] = (WTF::StringImpl *)v32;
          v34 = JSC::PropertyTable::get(v33, (uint64_t *)v305);
          if ((_DWORD)v34 != -1)
          {
            if ((int)v34 <= 63)
            {
              v35 = (char *)v300 + 16;
              v36 = v34 << 32;
            }
            else
            {
              v35 = (char *)(*((_QWORD *)v300 + 1) - 8);
              v36 = 0x3F00000000 - (v34 << 32);
            }
            v37 = *(_QWORD *)&v35[v36 >> 29];
            if (v37)
            {
              if (HIBYTE(word_1ECF4C620))
                JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
              if (*((_QWORD *)v10 + 2))
              {
                v15 = &xmmword_1ECF4C7C0;
              }
              else
              {
                v38 = v302;
                *(_QWORD *)(a1 + 8 * v301.i32[0]) = v37;
                *(_QWORD *)(v9[17] - 16 * v38 - 16) = v37;
              }
              if (*(_DWORD *)v32 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
              }
              else
              {
                *(_DWORD *)v32 -= 2;
              }
              return v15;
            }
          }
        }
      }
    }
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
LABEL_41:
  v21.i64[0] = 0xFFFFFFFF00000000;
  v292 = 0xFFFFFFFF00000000;
  LOBYTE(v296) = 0;
  v297 = 0;
  v298 = 0;
  v299 = 0;
  v294 = 0;
  memset(v295, 0, 13);
  v293 = v27;
  v39 = (uint64_t)v300;
  if (v29 >= 0xFFFE000000000000 && (v29 & 0x80000000) == 0)
  {
    if (((unint64_t)v300 & 0xFFFE000000000002) != 0)
    {
      v130 = (uint64_t ***)(v289 + 7);
    }
    else
    {
      v117 = *((unsigned __int8 *)v300 + 5);
      if (v117 == 2)
      {
        v118 = *((_QWORD *)v300 + 1);
        if ((v118 & 1) != 0)
          v119 = (_DWORD *)((char *)v300 + 16);
        else
          v119 = (_DWORD *)(v118 + 4);
        if (*v119 > v29)
        {
          Index = JSC::JSString::getIndex(v300, (JSC::JSGlobalObject *)v289, v29, a4, a5, a6, a7, a8, v21);
          if (HIBYTE(word_1ECF4C620))
            JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
          if (!*((_QWORD *)v10 + 2))
            goto LABEL_203;
          goto LABEL_165;
        }
        v130 = (uint64_t ***)(v289 + 7);
        v131 = v289[7];
        if (*((_DWORD *)v131 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v131, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
LABEL_271:
          Index = 0;
          goto LABEL_200;
        }
      }
      else
      {
        v130 = (uint64_t ***)(v289 + 7);
        if (v117 > 0x16)
        {
LABEL_186:
          v132 = *v130;
          Index = 10;
          while (1)
          {
            v133 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
            v141 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, uint64_t *))(16
                                                                                               * *(unsigned int *)(v133 + 0x4C)
                                                                                               + 0x70))(v39, v289, v29, &v290);
            if (*((_DWORD *)v132 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v132, v134, (uint64_t)v135, v136, v137, v138, v139, v140))
            {
LABEL_269:
              Index = 10;
              goto LABEL_200;
            }
            if ((v141 & 1) != 0)
            {
              if (BYTE1(v295[1]) == 1)
              {
                Index = v290;
              }
              else if (BYTE1(v295[1]) == 2)
              {
                Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v290, (JSC::JSGlobalObject *)v289, (uint64_t)v135, v136, v137, v138, v139, v140);
              }
              else
              {
                v211 = (JSC::VM *)*v130;
                JSC::Identifier::from(*v130, v29, v135, v136, v137, v138, v139, v140, (int **)v305);
                Index = JSC::PropertySlot::customGetter((uint64_t)&v290, v211, v305[0]);
                v219 = v305[0];
                v305[0] = 0;
                if (v219)
                {
                  if (*(_DWORD *)v219 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v219, v212, v213, v214, v215, v216, v217, v218);
                    WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
                  }
                  else
                  {
                    *(_DWORD *)v219 -= 2;
                  }
                }
              }
LABEL_200:
              if (HIBYTE(word_1ECF4C620))
                JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
              if (!*((_QWORD *)v303 + 2))
              {
LABEL_203:
                v144 = v302;
                *(_QWORD *)(a1 + 8 * v301.i32[0]) = Index;
                *(_QWORD *)(v9[17] - 16 * v144 - 16) = Index;
                goto LABEL_116;
              }
LABEL_165:
              v15 = &xmmword_1ECF4C7C0;
              goto LABEL_116;
            }
            if (BYTE2(v295[1]) == 3)
            {
              if (BYTE4(v295[1]))
                goto LABEL_269;
              v142 = *(unsigned __int8 *)(v39 + 5);
              if (v142 == 61)
                goto LABEL_192;
            }
            else
            {
              v142 = *(unsigned __int8 *)(v39 + 5);
              if (v142 == 61)
              {
                if (BYTE2(v295[1]) == 1)
                  goto LABEL_269;
                goto LABEL_192;
              }
            }
            if ((v142 - 39) <= 0xA
              && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v39, v134, (uint64_t)v135, v136, v137, v138, v139, v140) <= v29)
            {
              goto LABEL_269;
            }
LABEL_192:
            if ((*(_WORD *)(v133 + 12) & 0x800) == 0 || BYTE2(v295[1]) == 3)
            {
              v143 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
              if (!v143)
                v143 = *(_QWORD *)(v39 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v143 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v39, v289);
              }
              else
              {
                v143 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x30);
                if (!v143)
                  v143 = *(_QWORD *)(v39 + 16);
              }
              if (*((_DWORD *)v132 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v132, v134, (uint64_t)v135, v136, v137, v138, v139, v140))
              {
                goto LABEL_269;
              }
            }
            if ((v143 & 0xFFFE000000000002) == 0)
            {
              v39 = v143;
              if (*(unsigned __int8 *)(v143 + 5) > 0x16u)
                continue;
            }
            goto LABEL_200;
          }
        }
      }
    }
    v39 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v300, (unint64_t)v289);
    if (!v39)
      goto LABEL_271;
    goto LABEL_186;
  }
  if (((unint64_t)v300 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v193 = v289[7];
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v289, (unint64_t)v300);
    JSC::VM::throwException(v193, (JSC::JSGlobalObject *)v289, NotAnObjectError, v195, v196, v197, v198, v199);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    goto LABEL_165;
  v40 = v289[7];
  if (v30)
  {
LABEL_377:
    v304 = (unsigned __int8 *)v29;
    if (*((_DWORD *)v40 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v41 = *(_QWORD *)(*((_QWORD *)v40 + 5244) + 8);
      if (!v41)
        goto LABEL_54;
      goto LABEL_52;
    }
    if ((v29 & 0xFFFE000000000002) == 0)
    {
      v228 = *(unsigned __int8 *)(v29 + 5);
      if (v228 == 2)
        goto LABEL_380;
      if (v228 == 4)
      {
        v41 = *(_QWORD *)(v29 + 8);
        v235 = *(_DWORD *)v41;
        *(_DWORD *)v41 += 4;
        v42 = v235 + 2;
        if (v42)
          goto LABEL_53;
        v116 = (WTF::StringImpl *)v41;
LABEL_396:
        WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
        goto LABEL_54;
      }
    }
    v29 = (unint64_t)JSC::JSValue::toStringSlowCase(&v304, (uint64_t)v289, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_380:
    if (*((_DWORD *)v40 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v41 = 0;
      goto LABEL_54;
    }
    v41 = *(_QWORD *)(v29 + 8);
    v229 = v289[7];
    if ((v41 & 1) == 0)
    {
      if ((*(_BYTE *)(v41 + 16) & 0x10) == 0)
      {
        if (*((_QWORD *)v229 + 8096) != v41)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v229 + 8096, *(WTF::AtomStringImpl **)(v29 + 8), a3, a4, a5, a6, a7, a8);
          v230 = *(WTF::StringImpl **)(v29 + 8);
          if (v230)
          {
            if ((*((_BYTE *)v230 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v230 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v230, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v305);
              v230 = v305[0];
            }
          }
          v231 = (WTF::StringImpl *)*((_QWORD *)v229 + 8097);
          *((_QWORD *)v229 + 8097) = v230;
          if (v231)
          {
            if (*(_DWORD *)v231 == 2)
            {
              WTF::StringImpl::~StringImpl(v231, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v252, v253, v254, v255, v256, v257, v258, v259);
            }
            else
            {
              *(_DWORD *)v231 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
        {
          v232 = (WTF::StringImpl *)*((_QWORD *)v229 + 8097);
          *(_DWORD *)v232 += 2;
          v305[0] = v232;
          __dmb(0xAu);
          v233 = *(WTF::StringImpl **)(v29 + 8);
          *(WTF::StringImpl **)(v29 + 8) = v305[0];
          v305[0] = v233;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v229 + 192, (unint64_t)v305);
          v234 = v305[0];
          v305[0] = 0;
          if (v234)
          {
            if (*(_DWORD *)v234 == 2)
            {
              WTF::StringImpl::~StringImpl(v234, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
            }
            else
            {
              *(_DWORD *)v234 -= 2;
            }
          }
        }
        v41 = *((_QWORD *)v229 + 8097);
      }
      goto LABEL_52;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, (JSC::JSGlobalObject *)v289);
    if (!*((_DWORD *)v229 + 20))
      goto LABEL_151;
    v185 = v229;
    goto LABEL_261;
  }
  if (*(_BYTE *)(v29 + 5) != 2)
  {
    v29 = JSC::JSCell::toPrimitive(v29, v289, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_377;
  }
  v41 = *(_QWORD *)(v29 + 8);
  if ((v41 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, (JSC::JSGlobalObject *)v289);
    if (!*((_DWORD *)v40 + 20))
      goto LABEL_151;
    v185 = v40;
LABEL_261:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v185, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v41 = 0;
      v116 = v305[0];
      v305[0] = 0;
      if (!v116)
        goto LABEL_54;
LABEL_153:
      if (*(_DWORD *)v116 != 2)
      {
        *(_DWORD *)v116 -= 2;
        goto LABEL_54;
      }
      goto LABEL_396;
    }
LABEL_151:
    v41 = (unint64_t)v305[0];
    if (!v305[0])
      goto LABEL_54;
    *(_DWORD *)v305[0] += 2;
    v305[0] = 0;
    v116 = (WTF::StringImpl *)v41;
    goto LABEL_153;
  }
  if ((*(_BYTE *)(v41 + 16) & 0x10) == 0)
  {
    if (*((_QWORD *)v40 + 8096) != v41)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v40 + 8096, *(WTF::AtomStringImpl **)(v29 + 8), a3, a4, a5, a6, a7, a8);
      v121 = *(WTF::StringImpl **)(v29 + 8);
      if (v121)
      {
        if ((*((_BYTE *)v121 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v121 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v121, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v305);
          v121 = v305[0];
        }
      }
      v122 = (WTF::StringImpl *)*((_QWORD *)v40 + 8097);
      *((_QWORD *)v40 + 8097) = v121;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
        {
          WTF::StringImpl::~StringImpl(v122, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
        }
        else
        {
          *(_DWORD *)v122 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
    {
      v123 = (WTF::StringImpl *)*((_QWORD *)v40 + 8097);
      *(_DWORD *)v123 += 2;
      v305[0] = v123;
      __dmb(0xAu);
      v124 = *(WTF::StringImpl **)(v29 + 8);
      *(WTF::StringImpl **)(v29 + 8) = v305[0];
      v305[0] = v124;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v40 + 192, (unint64_t)v305);
      v125 = v305[0];
      v305[0] = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
        {
          WTF::StringImpl::~StringImpl(v125, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v125 -= 2;
        }
      }
    }
    v41 = *((_QWORD *)v40 + 8097);
  }
LABEL_52:
  v42 = *(_DWORD *)v41 + 2;
LABEL_53:
  *(_DWORD *)v41 = v42;
LABEL_54:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    goto LABEL_225;
  v43 = v300;
  if (((unint64_t)v300 & 0xFFFE000000000002) == 0)
  {
    v44 = v289[7];
    v45 = *((unsigned __int8 *)v300 + 5);
    if (v45 > 0x16)
      goto LABEL_59;
    if (v45 == 2)
    {
      if (*(_QWORD *)(*((_QWORD *)v44 + 5244) + 1768) == v41)
      {
        v260 = *((_QWORD *)v300 + 1);
        if ((v260 & 1) != 0)
          v261 = (unsigned int *)((char *)v300 + 16);
        else
          v261 = (unsigned int *)(v260 + 4);
        v262 = *v261;
        if ((v262 & 0x80000000) != 0)
          v263 = COERCE__INT64((double)v262) + 0x2000000000000;
        else
          v263 = v262 | 0xFFFE000000000000;
        v264 = 14;
        goto LABEL_418;
      }
      if (v41)
      {
        v267 = *(_DWORD *)(v41 + 16);
        if ((v267 & 0x20) == 0)
        {
          v268 = *(_BYTE **)(v41 + 8);
          v269 = *(unsigned int *)(v41 + 4);
          if ((v267 & 4) != 0)
          {
            if (!(_DWORD)v269)
              goto LABEL_428;
            a3 = *v268 - 48;
            if (a3 > 9 || v269 >= 2 && *v268 == 48)
              goto LABEL_428;
            v283 = v268 + 1;
            v284 = v269 - 1;
            while (v284)
            {
              if (a3 > 0x19999999)
                goto LABEL_428;
              v285 = *v283 - 48;
              if (v285 > 9)
                goto LABEL_428;
              v265 = 0;
              v88 = __CFADD__(v285, 10 * a3);
              a3 = v285 + 10 * (_DWORD)a3;
              ++v283;
              --v284;
              if (v88)
                goto LABEL_419;
            }
          }
          else
          {
            if (!(_DWORD)v269)
              goto LABEL_428;
            a3 = *(unsigned __int16 *)v268 - 48;
            if (a3 > 9 || *(_WORD *)v268 == 48 && v269 > 1)
              goto LABEL_428;
            v270 = (unsigned __int16 *)(v268 + 2);
            v271 = v269 - 1;
            while (v271)
            {
              if (a3 > 0x19999999)
                goto LABEL_428;
              v272 = *v270 - 48;
              if (v272 > 9)
                goto LABEL_428;
              v265 = 0;
              v88 = __CFADD__(v272, 10 * a3);
              a3 = v272 + 10 * (_DWORD)a3;
              ++v270;
              --v271;
              if (v88)
                goto LABEL_419;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v286 = *((_QWORD *)v300 + 1);
            v287 = (v286 & 1) != 0 ? (JSC::JSString *)((char *)v300 + 16) : (JSC::JSString *)(v286 + 4);
            if (*(_DWORD *)v287 > a3)
            {
              v263 = JSC::JSString::getIndex(v300, (JSC::JSGlobalObject *)v289, a3, a4, a5, a6, a7, a8, v21);
              if (!*((_DWORD *)v44 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v44, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
              {
                v264 = 10;
LABEL_418:
                v290 = v263;
                LODWORD(v292) = v264;
                v294 = 0;
                v265 = 1;
                BYTE1(v295[1]) = 1;
                goto LABEL_419;
              }
            }
          }
        }
      }
LABEL_428:
      v265 = 0;
LABEL_419:
      if (*((_DWORD *)v44 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v44, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_99;
      if ((v265 & 1) != 0)
        goto LABEL_107;
    }
  }
  v266 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v300, (unint64_t)v289);
  if (!v266)
    goto LABEL_99;
  v43 = (JSC::JSString *)v266;
  v44 = v289[7];
LABEL_59:
  v46 = (unint64_t)v43 + 6;
  v47 = v41 >> 4;
  v48 = (uint64_t)v43;
  if ((*((_BYTE *)v43 + 6) & 8) == 0)
  {
    v49 = v43;
    do
    {
      v50 = *(_DWORD *)v49 & 0xFFFFFFFE;
      v51 = 16 * v50;
      if (!(_DWORD)v47 || (v47 & ~*(_DWORD *)(16 * v50 + 0x20)) != 0)
        goto LABEL_72;
      v52 = *(_QWORD *)(16 * v50 + 0x58);
      if (!v52)
      {
        v63 = *(_QWORD *)(16 * v50 + 0x40);
        if (!v63 || *(_BYTE *)(v63 + 5) != 1 && *(_DWORD *)(v63 + 80) < 2u)
          goto LABEL_72;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v51, v44, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v52)
          goto LABEL_72;
      }
      if (!*(_DWORD *)(v52 + 24))
        goto LABEL_72;
      v53 = *(_QWORD *)(v52 + 16);
      v54 = v53 & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(unsigned int *)(v52 + 8);
      v56 = *(_DWORD *)(v41 + 16);
      if ((v53 & 1) != 0)
      {
        if ((v56 & 0x20) != 0)
          v56 = *(_DWORD *)(v41 + 32);
        v57 = *(_DWORD *)(v52 + 12);
        v58 = (v56 >> 8) & *(_QWORD *)&v57;
        v59 = *(unsigned __int8 *)(v54 + v58);
        if (!*(_BYTE *)(v54 + v58))
          goto LABEL_72;
        v60 = v54 + v55;
        v61 = 1;
        while (1)
        {
          v62 = *(_QWORD *)(v60 + 8 * (v59 - 1));
          if (v41 == (v62 & 0xFFFFFFFFFFFFLL))
            break;
          v58 = ((_DWORD)v58 + v61) & v57;
          v59 = *(unsigned __int8 *)(v54 + v58);
          ++v61;
          if (!*(_BYTE *)(v54 + v58))
            goto LABEL_72;
        }
        a6 = (v62 >> 16) & 0xFF00000000 | HIBYTE(v62);
      }
      else
      {
        if ((v56 & 0x20) != 0)
          v56 = *(_DWORD *)(v41 + 32);
        v64 = *(_DWORD *)(v52 + 12);
        v65 = v64 & (v56 >> 8);
        v66 = *(_DWORD *)(v54 + 4 * v65);
        if (!v66)
          goto LABEL_72;
        v67 = v54 + 4 * v55;
        v68 = 1;
        while (1)
        {
          v69 = (v66 - 1);
          if (v41 == *(_QWORD *)(v67 + 16 * v69))
            break;
          v65 = (v65 + v68) & v64;
          v66 = *(_DWORD *)(v54 + 4 * v65);
          ++v68;
          if (!v66)
            goto LABEL_72;
        }
        a6 = *(unsigned int *)(v67 + 16 * v69 + 8) | ((unint64_t)*(unsigned __int8 *)(v67 + 16 * v69 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v75 = (uint64_t)v49 + 16;
          v76 = a6 << 32;
        }
        else
        {
          v75 = *((_QWORD *)v49 + 1) - 8;
          v76 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v75 + (v76 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v77 = *(unsigned __int8 *)(a4 + 5);
          if (v77 != 5)
          {
            if (v77 != 6)
              goto LABEL_105;
            v126 = *(_DWORD *)(v51 + 16) & 3;
            v127 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v129 = *(_QWORD *)(a4 + 24);
              v128 = *(_QWORD *)(a4 + 32);
              v290 = *(_QWORD *)(a4 + 8);
              v291 = v127;
              LODWORD(v292) = HIDWORD(a6);
              v294 = (uint64_t)v49;
              goto LABEL_179;
            }
            v290 = *(_QWORD *)(a4 + 8);
            v291 = v127;
            LODWORD(v292) = HIDWORD(a6);
            v294 = (uint64_t)v49;
LABEL_251:
            BYTE1(v295[1]) = 3;
            if (v126 != 2)
              LOBYTE(v295[1]) = 1;
            goto LABEL_107;
          }
          v98 = (unsigned int *)v49;
          v99 = (uint64_t)v44;
LABEL_145:
          JSC::JSObject::fillGetterPropertySlot(v98, v99, (uint64_t)&v290, a4, a5, a6);
          goto LABEL_107;
        }
LABEL_105:
        v290 = a4;
        v294 = (uint64_t)v49;
LABEL_106:
        v292 = __PAIR64__(a6, a5);
        LOWORD(v295[1]) = 257;
        goto LABEL_107;
      }
LABEL_72:
      if ((*(_BYTE *)v46 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v49, v44, v41, (uint64_t)&v290) & 1) != 0)
      {
        goto LABEL_107;
      }
      v48 = *(_QWORD *)(v51 + 48);
      if (!v48)
        v48 = *((_QWORD *)v49 + 2);
      if ((v48 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v48 + 5) < 0x17u)
      {
        if (!v41)
          goto LABEL_99;
        v70 = *(_DWORD *)(v41 + 16);
        if ((v70 & 0x20) != 0)
          goto LABEL_99;
        v71 = *(_WORD **)(v41 + 8);
        v72 = *(unsigned int *)(v41 + 4);
        if ((v70 & 4) == 0)
        {
          if ((_DWORD)v72)
          {
            v73 = (unsigned __int16)*v71 - 48;
            if (v73 <= 9 && (*v71 != 48 || v72 <= 1))
            {
              v85 = v71 + 1;
              v86 = v72 - 1;
              v74 = 10;
              while (v86)
              {
                if (v73 <= 0x19999999)
                {
                  v87 = *v85 - 48;
                  if (v87 <= 9)
                  {
                    v88 = __CFADD__(v87, 10 * v73);
                    v73 = v87 + 10 * (_DWORD)v73;
                    ++v85;
                    --v86;
                    if (!v88)
                      continue;
                  }
                }
                goto LABEL_109;
              }
              goto LABEL_324;
            }
          }
          goto LABEL_99;
        }
        if (!(_DWORD)v72)
          goto LABEL_99;
        v73 = *(unsigned __int8 *)v71 - 48;
        if (v73 > 9 || v72 >= 2 && *(_BYTE *)v71 == 48)
          goto LABEL_99;
        v203 = (unsigned __int8 *)v71 + 1;
        v204 = v72 - 1;
        v74 = 10;
        while (v204)
        {
          if (v73 <= 0x19999999)
          {
            v205 = *v203 - 48;
            if (v205 <= 9)
            {
              v88 = __CFADD__(v205, 10 * v73);
              v73 = v205 + 10 * (_DWORD)v73;
              ++v203;
              --v204;
              if (!v88)
                continue;
            }
          }
          goto LABEL_109;
        }
LABEL_324:
        if ((_DWORD)v73 == -1)
        {
LABEL_99:
          v74 = 10;
          goto LABEL_109;
        }
        v206 = v289[7];
        v74 = 10;
        while (2)
        {
          v207 = 16 * (*(_DWORD *)v43 & 0xFFFFFFFE);
          v208 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                            * *(unsigned int *)(v207 + 0x4C)
                                                                                            + 0x70))(v43, v289, v73, &v290);
          if (*((_DWORD *)v206 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v206, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_99;
          }
          if ((v208 & 1) != 0)
            goto LABEL_107;
          if (BYTE2(v295[1]) == 3)
          {
            if (BYTE4(v295[1]))
              goto LABEL_99;
            v209 = *((unsigned __int8 *)v43 + 5);
            if (v209 != 61)
              goto LABEL_330;
          }
          else
          {
            v209 = *((unsigned __int8 *)v43 + 5);
            if (v209 == 61)
            {
              if (BYTE2(v295[1]) == 1)
                goto LABEL_99;
            }
            else
            {
LABEL_330:
              if ((v209 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v43, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v73)
              {
                goto LABEL_99;
              }
            }
          }
          if ((*(_WORD *)(v207 + 12) & 0x800) == 0 || BYTE2(v295[1]) == 3)
          {
            v210 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x30);
            if (!v210)
              v210 = *((_QWORD *)v43 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v210 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v43 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v43, v289);
            }
            else
            {
              v210 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x30);
              if (!v210)
                v210 = *((_QWORD *)v43 + 2);
            }
            if (*((_DWORD *)v206 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v206, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_99;
            }
          }
          if ((v210 & 0xFFFE000000000002) != 0)
            goto LABEL_109;
          v43 = (JSC::JSString *)v210;
          if (*(unsigned __int8 *)(v210 + 5) <= 0x16u)
            goto LABEL_109;
          continue;
        }
      }
      v46 = v48 + 6;
      v49 = (JSC::JSString *)v48;
    }
    while ((*(_BYTE *)(v48 + 6) & 8) == 0);
  }
  if (v41)
  {
    v153 = *(_DWORD *)(v41 + 16);
    if ((v153 & 0x20) == 0)
    {
      v154 = *(_BYTE **)(v41 + 8);
      v155 = *(unsigned int *)(v41 + 4);
      if ((v153 & 4) != 0)
      {
        if ((_DWORD)v155)
        {
          v156 = *v154 - 48;
          if (v156 <= 9 && (v155 < 2 || *v154 != 48))
          {
            v273 = v154 + 1;
            v274 = v155 - 1;
            while (v274)
            {
              if (v156 <= 0x19999999)
              {
                v275 = *v273 - 48;
                if (v275 <= 9)
                {
                  v88 = __CFADD__(v275, 10 * v156);
                  v156 = v275 + 10 * (_DWORD)v156;
                  ++v273;
                  --v274;
                  if (!v88)
                    continue;
                }
              }
              goto LABEL_211;
            }
LABEL_451:
            if ((_DWORD)v156 != -1)
            {
              v276 = v289[7];
              v74 = 10;
              while (1)
              {
                v277 = 16 * (*(_DWORD *)v43 & 0xFFFFFFFE);
                v278 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **, uint64_t, uint64_t *))(16 * *(unsigned int *)(v277 + 0x4C)
                                                                                                  + 0x70))(v43, v289, v156, &v290);
                v279 = v278;
                if (*((_DWORD *)v276 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v276, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v279) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_107;
                    goto LABEL_99;
                  }
                }
                else if ((v278 & 1) != 0)
                {
                  goto LABEL_107;
                }
                if (BYTE2(v295[1]) == 3)
                {
                  if (BYTE4(v295[1]))
                    goto LABEL_99;
                  v280 = *((unsigned __int8 *)v43 + 5);
                  if (v280 == 61)
                    goto LABEL_458;
                }
                else
                {
                  v280 = *((unsigned __int8 *)v43 + 5);
                  if (v280 == 61)
                  {
                    if (BYTE2(v295[1]) == 1)
                      goto LABEL_99;
                    goto LABEL_458;
                  }
                }
                if ((v280 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v43, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v156)
                {
                  goto LABEL_99;
                }
LABEL_458:
                if ((*(_WORD *)(v277 + 12) & 0x800) == 0 || BYTE2(v295[1]) == 3)
                {
                  v281 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x30);
                  if (!v281)
                    v281 = *((_QWORD *)v43 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v281 = (*(uint64_t (**)(JSC::JSString *, JSC::VM **))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v43, v289);
                  }
                  else
                  {
                    v281 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x30);
                    if (!v281)
                      v281 = *((_QWORD *)v43 + 2);
                  }
                  if (*((_DWORD *)v276 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v276, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_99;
                  }
                }
                if ((v281 & 0xFFFE000000000002) == 0)
                {
                  v43 = (JSC::JSString *)v281;
                  if (*(unsigned __int8 *)(v281 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_109;
              }
            }
          }
        }
      }
      else if ((_DWORD)v155)
      {
        v156 = *(unsigned __int16 *)v154 - 48;
        if (v156 <= 9 && (*(_WORD *)v154 != 48 || v155 <= 1))
        {
          v166 = (unsigned __int16 *)(v154 + 2);
          v167 = v155 - 1;
          while (v167)
          {
            if (v156 <= 0x19999999)
            {
              v168 = *v166 - 48;
              if (v168 <= 9)
              {
                v88 = __CFADD__(v168, 10 * v156);
                v156 = v168 + 10 * (_DWORD)v156;
                ++v166;
                --v167;
                if (!v88)
                  continue;
              }
            }
            goto LABEL_211;
          }
          goto LABEL_451;
        }
      }
    }
  }
LABEL_211:
  v157 = v289[7];
  v74 = 10;
  while (1)
  {
    v158 = 16 * (*(_DWORD *)v48 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v48 + 6) & 8) == 0)
      break;
    v288 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, uint64_t *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0x68))(v48, v289, v41, &v290);
    if (*((_DWORD *)v157 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v157, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_99;
    if ((v288 & 1) != 0)
      goto LABEL_107;
    if (BYTE2(v295[1]) == 3)
    {
      if (BYTE4(v295[1]))
        goto LABEL_99;
      v188 = *(unsigned __int8 *)(v48 + 5);
      if (v188 != 61)
      {
LABEL_283:
        if (!v41)
          goto LABEL_218;
        if ((v188 - 50) < 0xFFFFFFF5)
          goto LABEL_218;
        v189 = *(_DWORD *)(v41 + 16);
        if ((v189 & 0x20) != 0)
          goto LABEL_218;
        v190 = *(unsigned int *)(v41 + 4);
        if (!(_DWORD)v190)
          goto LABEL_218;
        v191 = *(unsigned __int8 **)(v41 + 8);
        if ((v189 & 4) == 0)
        {
          v192 = *(unsigned __int16 *)v191;
          if ((_DWORD)v190 == 1)
            goto LABEL_289;
          if (v192 == 45)
          {
            v192 = *((unsigned __int16 *)v191 + 1);
            goto LABEL_296;
          }
          if ((v192 - 48) >= 0xA && ((_DWORD)v190 != 8 || v192 != 73))
          {
LABEL_309:
            if ((_DWORD)v190 != 3 || v192 != 78)
              goto LABEL_218;
          }
LABEL_302:
          v46 = v46 & 0xFFFFFF0000000000 | v190 | ((unint64_t)((v189 >> 2) & 1) << 32);
          JSC::jsToNumber(v191, v46);
          v201 = WTF::numberToString(v305, v200);
          if (WTF::equal(v41, (unint64_t)v201, v202))
            goto LABEL_99;
          goto LABEL_218;
        }
        v192 = *v191;
        if ((_DWORD)v190 == 1)
        {
LABEL_289:
          if ((v192 - 48) < 0xA)
            goto LABEL_99;
          goto LABEL_218;
        }
        if (v192 == 45)
        {
          v192 = v191[1];
LABEL_296:
          if ((v192 - 48) < 0xA)
          {
            if ((_DWORD)v190 == 2)
              goto LABEL_99;
            goto LABEL_302;
          }
          if ((_DWORD)v190 != 9)
            goto LABEL_218;
        }
        else
        {
          if ((v192 - 48) < 0xA)
            goto LABEL_302;
          if ((_DWORD)v190 != 8)
            goto LABEL_309;
        }
        if (v192 != 73)
          goto LABEL_218;
        goto LABEL_302;
      }
    }
    else
    {
      v188 = *(unsigned __int8 *)(v48 + 5);
      if (v188 != 61)
        goto LABEL_283;
      if (BYTE2(v295[1]) == 1)
        goto LABEL_99;
    }
LABEL_218:
    if ((*(_WORD *)(v158 + 12) & 0x800) == 0)
    {
      v161 = *(_DWORD *)v48;
LABEL_220:
      v162 = *(_QWORD *)(16 * (v161 & 0xFFFFFFFE) + 0x30);
      if (!v162)
        v162 = *(_QWORD *)(v48 + 16);
      goto LABEL_222;
    }
    v161 = *(_DWORD *)v48;
    if (BYTE2(v295[1]) == 3)
      goto LABEL_220;
    v187 = 16 * (v161 & 0xFFFFFFFE);
    if ((*(_WORD *)(v187 + 12) & 0x800) != 0)
    {
      v162 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v187 + 76) + 0xB0))(v48, v289);
    }
    else
    {
      v162 = *(_QWORD *)(v187 + 48);
      if (!v162)
        v162 = *(_QWORD *)(v48 + 16);
    }
    if (*((_DWORD *)v157 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v157, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_99;
LABEL_222:
    if ((v162 & 0xFFFE000000000002) == 0)
    {
      v48 = v162;
      if (*(unsigned __int8 *)(v162 + 5) > 0x16u)
        continue;
    }
    goto LABEL_109;
  }
  if (!(_DWORD)v47
    || (v47 & ~*(_DWORD *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE)), v157, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v159)|| (v305[0] = (WTF::StringImpl *)v41, v160 = JSC::PropertyTable::get(v159, (uint64_t *)v305), a6 = v160, (_DWORD)v160 == -1))
  {
    if ((*(_BYTE *)(v48 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v48, v157, v41, (uint64_t)&v290) & 1) != 0)
    {
      goto LABEL_107;
    }
    goto LABEL_218;
  }
  a5 = HIDWORD(v160);
  if ((int)v160 <= 63)
  {
    v163 = v48 + 16;
    v164 = v160 << 32;
  }
  else
  {
    v163 = *(_QWORD *)(v48 + 8) - 8;
    v164 = 0x3F00000000 - (v160 << 32);
  }
  a4 = *(_QWORD *)(v163 + (v164 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_233:
    v290 = a4;
    v294 = v48;
    goto LABEL_106;
  }
  v165 = *(unsigned __int8 *)(a4 + 5);
  if (v165 == 5)
  {
    v98 = (unsigned int *)v48;
    v99 = (uint64_t)v157;
    goto LABEL_145;
  }
  if (v165 != 6)
    goto LABEL_233;
  v126 = *(_DWORD *)(v158 + 16) & 3;
  v186 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v290 = *(_QWORD *)(a4 + 8);
    v291 = v186;
    LODWORD(v292) = HIDWORD(v160);
    v294 = v48;
    goto LABEL_251;
  }
  v129 = *(_QWORD *)(a4 + 24);
  v128 = *(_QWORD *)(a4 + 32);
  v290 = *(_QWORD *)(a4 + 8);
  v291 = v186;
  LODWORD(v292) = HIDWORD(v160);
  v294 = v48;
LABEL_179:
  BYTE1(v295[1]) = 3;
  if (v126 != 2)
    LOBYTE(v295[1]) = 1;
  BYTE3(v295[1]) = 1;
  v298 = v129;
  v299 = v128;
LABEL_107:
  if (BYTE1(v295[1]) == 1)
  {
    v74 = v290;
  }
  else
  {
    if (BYTE1(v295[1]) == 2)
      v97 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v290, (JSC::JSGlobalObject *)v289, a3, a4, a5, a6, a7, a8);
    else
      v97 = JSC::PropertySlot::customGetter((uint64_t)&v290, v289[7], (WTF::StringImpl *)v41);
    v74 = v97;
  }
LABEL_109:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v289, &v303, "CommonSlowPaths", v15);
  if (*((_QWORD *)v303 + 2))
  {
LABEL_225:
    v15 = &xmmword_1ECF4C7C0;
    goto LABEL_113;
  }
  v78 = v302;
  *(_QWORD *)(a1 + 8 * v301.i32[0]) = v74;
  *(_QWORD *)(v9[17] - 16 * v78 - 16) = v74;
LABEL_113:
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v41, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
LABEL_116:
  if (v297)
  {
    v79 = *(_DWORD *)(v296 + 4);
    if (!v79)
    {
      __break(0xC471u);
      JUMPOUT(0x1988FD46CLL);
    }
    *(_DWORD *)(v296 + 4) = v79 - 1;
  }
  return v15;
}

__int128 *slow_path_get_prototype_of(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  JSC::VM *v27;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[1];
  v4 = (JSC::VM *)v2[9];
  *((_QWORD *)v4 + 5) = a1;
  v27 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1988FE28CLL);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 130)
  {
    v13 = *(_DWORD *)(a2 + 2);
    v24 = *(_DWORD *)(a2 + 6);
    v16 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v12 == 128)
    {
      v13 = *((__int16 *)a2 + 1);
      v14 = 1073741760;
      if (v13 > 63)
        v13 += 1073741760;
      v15 = *((__int16 *)a2 + 2);
      v16 = *((unsigned __int16 *)a2 + 3);
      if (v15 <= 63)
        goto LABEL_11;
    }
    else
    {
      v13 = (char)a2[1];
      v14 = 1073741808;
      if (v13 > 15)
        v13 += 1073741808;
      v15 = (char)a2[2];
      v16 = a2[3];
      if (v15 <= 15)
      {
LABEL_11:
        v17 = v13;
        v18 = v16;
LABEL_12:
        v19 = (uint64_t *)(a1 + 8 * v15);
        goto LABEL_13;
      }
    }
    v24 = v15 + v14;
  }
  v15 = v24;
  v17 = v13;
  v18 = v16;
  if (v24 < 0x40000000)
    goto LABEL_12;
  v25 = (v24 - 0x40000000);
  if (v25 >= *(unsigned int *)(v5 + 172))
    goto LABEL_35;
  v19 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v25);
LABEL_13:
  v20 = *v19;
  v26 = v20;
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
  {
    v23 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v26, v3);
LABEL_24:
    v21 = v23;
    goto LABEL_18;
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v23 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0xB0))(v20, v3);
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
  if (!v21)
    v21 = *(_QWORD *)(v20 + 16);
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v27, "CommonSlowPaths", v10);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v17) = v21;
  *(_QWORD *)(v2[17] - 16 * v18 - 16) = v21;
  return (__int128 *)v10;
}

__int128 *slow_path_put_by_id_with_this(uint64_t a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t *v30;
  int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  uint64_t v41;
  const JSC::PropertyTable **v42;
  const JSC::PropertyTable *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  JSC::VM *v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  const char *v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unint64_t v71;
  _QWORD v72[2];
  int v73;
  BOOL v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  unsigned __int8 *v79;
  JSC::VM *v80;
  JSC::VM *v81;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v80 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_125:
    __break(0xC471u);
    JUMPOUT(0x1988FE7F8);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  v71 = (unint64_t)v10;
  if (v18 == 128)
  {
    v24 = *((__int16 *)a2 + 1);
    v25 = 1073741760;
    v26 = *((__int16 *)a2 + 2);
    if (v26 <= 63)
      v20 = *((__int16 *)a2 + 2);
    else
      v20 = v26 + 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
    v27 = *((__int16 *)a2 + 4);
    if (v27 <= 63)
      v22 = *((__int16 *)a2 + 4);
    else
      v22 = v27 + 1073741760;
    v23 = a2[10];
    if (v24 <= 63)
      goto LABEL_27;
  }
  else
  {
    if (v18 == 130)
    {
      v19 = *(_DWORD *)(a2 + 2);
      v20 = *(_DWORD *)(a2 + 6);
      v21 = *(_DWORD *)(a2 + 10);
      v22 = *(_DWORD *)(a2 + 14);
      v23 = a2[18];
      goto LABEL_17;
    }
    v24 = (char)a2[1];
    v25 = 1073741808;
    v31 = (char)a2[2];
    if (v31 <= 15)
      v20 = (char)a2[2];
    else
      v20 = v31 + 1073741808;
    v21 = a2[3];
    v32 = (char)a2[4];
    if (v32 <= 15)
      v22 = (char)a2[4];
    else
      v22 = v32 + 1073741808;
    v23 = a2[5];
    if (v24 <= 15)
    {
LABEL_27:
      v33 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
      if (v33)
      {
        v34 = *v33;
        if (*v33 > v21)
        {
          v30 = (unint64_t *)&v33[2 * v21 + 2];
LABEL_33:
          v36 = v24;
LABEL_38:
          v38 = (unsigned __int8 **)(a1 + 8 * v36);
          goto LABEL_39;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
      if (*v35 <= v21 - v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1988FE87CLL);
      }
      v30 = (unint64_t *)&v35[2 * (v21 - v34) + 2];
      v10 = (JSC::JSGlobalObject *)v71;
      goto LABEL_33;
    }
  }
  v19 = v24 + v25;
LABEL_17:
  v28 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v28)
  {
    v29 = *v28;
    if (*v28 > v21)
    {
      v30 = (unint64_t *)&v28[2 * v21 + 2];
      goto LABEL_37;
    }
  }
  else
  {
    v29 = 0;
  }
  v37 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v37 <= v21 - v29)
  {
    __break(0xC471u);
    JUMPOUT(0x1988FE92CLL);
  }
  v30 = (unint64_t *)&v37[2 * (v21 - v29) + 2];
  v10 = (JSC::JSGlobalObject *)v71;
LABEL_37:
  v36 = v19;
  if (v19 < 0x40000000)
    goto LABEL_38;
  v63 = *(_QWORD *)(a1 + 16);
  v64 = (v19 - 0x40000000);
  if (v64 >= *(unsigned int *)(v63 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988FE9CCLL);
  }
  v38 = (unsigned __int8 **)(*(_QWORD *)(v63 + 160) + 8 * v64);
LABEL_39:
  v39 = *v38;
  v79 = *v38;
  if (v20 >= 0x40000000)
  {
    v65 = *(_QWORD *)(a1 + 16);
    if ((v20 - 0x40000000) >= *(_DWORD *)(v65 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FE9D4);
    }
    v40 = (uint64_t *)(*(_QWORD *)(v65 + 160) + 8 * (v20 - 0x40000000));
  }
  else
  {
    v40 = (uint64_t *)(a1 + 8 * v20);
  }
  v41 = *v40;
  if (v22 >= 0x40000000)
  {
    v66 = *(_QWORD *)(a1 + 16);
    if ((v22 - 0x40000000) >= *(_DWORD *)(v66 + 172))
      goto LABEL_125;
    v42 = (const JSC::PropertyTable **)(*(_QWORD *)(v66 + 160) + 8 * (v22 - 0x40000000));
  }
  else
  {
    v42 = (const JSC::PropertyTable **)(a1 + 8 * v22);
  }
  v43 = *v42;
  if ((*(_WORD *)(*(_QWORD *)(v9 + 56) + 28) & 0x3000) == 0x1000)
    v44 = 2;
  else
    v44 = 1;
  v72[0] = 0;
  v72[1] = v41;
  v73 = -1;
  v74 = v23 == 0;
  v75 = 0;
  v76 = v44;
  v77 = 1;
  v78 = 0;
  v45 = *v30;
  if (((unint64_t)v39 & 0xFFFE000000000002) != 0)
  {
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v79, v10, v45, (unint64_t)v43, (uint64_t)v72, a7, a8, a9);
    goto LABEL_81;
  }
  v46 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
  if ((*(_WORD *)(v46 + 0xC) & 0x400) != 0)
  {
    (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C) + 0x48))(v39, v10, v45, v43, v72);
    goto LABEL_81;
  }
  v47 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v45)
  {
    v48 = *(_DWORD *)(v45 + 16);
    if ((v48 & 0x20) == 0)
    {
      v49 = *(_BYTE **)(v45 + 8);
      v50 = *(unsigned int *)(v45 + 4);
      if ((v48 & 4) != 0)
      {
        if ((_DWORD)v50)
        {
          v51 = *v49 - 48;
          if (v51 <= 9 && (v50 < 2 || *v49 != 48))
          {
            v68 = v50 - 1;
            v69 = v49 + 1;
            v10 = (JSC::JSGlobalObject *)v71;
            while (v68)
            {
              if (v51 <= 0x19999999)
              {
                v70 = *v69 - 48;
                if (v70 <= 9)
                {
                  v59 = __CFADD__(v70, 10 * v51);
                  v51 = v70 + 10 * (_DWORD)v51;
                  --v68;
                  ++v69;
                  if (!v59)
                    continue;
                }
              }
              goto LABEL_53;
            }
            v10 = (JSC::JSGlobalObject *)v71;
            if ((_DWORD)v51 != -1)
              goto LABEL_76;
          }
        }
      }
      else if ((_DWORD)v50)
      {
        v51 = *(unsigned __int16 *)v49 - 48;
        if (v51 <= 9 && (*(_WORD *)v49 != 48 || v50 <= 1))
        {
          v56 = (unsigned __int16 *)(v49 + 2);
          v57 = v50 - 1;
          while (v57)
          {
            if (v51 <= 0x19999999)
            {
              v58 = *v56 - 48;
              if (v58 <= 9)
              {
                v59 = __CFADD__(v58, 10 * v51);
                v51 = v58 + 10 * (_DWORD)v51;
                ++v56;
                --v57;
                if (!v59)
                  continue;
              }
            }
            goto LABEL_53;
          }
          if ((_DWORD)v51 != -1)
          {
LABEL_76:
            if ((unsigned __int8 *)v41 == v39
              || (v41 & 0xFFFE000000000002) == 0
              && *(_BYTE *)(v41 + 5) == 32
              && *(unsigned __int8 **)(v41 + 16) == v39)
            {
              (*(void (**)(unsigned __int8 *, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, BOOL))(16 * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C) + 0x50))(v39, v10, v51, v43, v23 == 0);
            }
            else
            {
              JSC::ordinarySetSlow((unint64_t)v10, (uint64_t)v39, (WTF::StringImpl *)v45, (uint64_t)v43, v41, v23 == 0, a8, a9);
            }
            goto LABEL_81;
          }
        }
      }
    }
  }
LABEL_53:
  if (*(_QWORD *)(*((_QWORD *)v47 + 5244) + 16) != v45)
  {
    v52 = *(_DWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x10);
    if ((v52 & 0x10) == 0)
    {
      v53 = v39;
      while ((*(_WORD *)(v46 + 12) & 0x800) == 0 && (v53 == v39 || (*(_WORD *)(v46 + 12) & 0x400) == 0))
      {
        v54 = *(unsigned __int8 **)(v46 + 48);
        if (!v54)
          v54 = (unsigned __int8 *)*((_QWORD *)v53 + 2);
        if (v54 == (unsigned __int8 *)2)
        {
          if ((unsigned __int8 *)v41 == v39
            || (v41 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v41 + 5) == 32 && *(unsigned __int8 **)(v41 + 16) == v39)
          {
            if ((v39[6] & 0x20) == 0 || (v52 & 0x400000) != 0)
            {
              v81 = v47;
              v60 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v39, (uint64_t)v47, v45, (uint64_t)v43, 0, (uint64_t)v72, a8, a9, a3);
              if (v61 && v74)
                JSC::throwTypeError(v71, &v81, (uint64_t)v60, v61);
            }
            else
            {
              JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(v39, (unint64_t)v10, v45, (uint64_t)v43, (uint64_t)v72, a3, a7, a8, a9);
            }
          }
          else
          {
            JSC::JSObject::definePropertyOnReceiver((unint64_t)v10, v45, (uint64_t)v43, (uint64_t)v72, v41, a7, a8, a9, a3);
          }
          goto LABEL_81;
        }
        v46 = 16 * (*(_DWORD *)v54 & 0xFFFFFFFE);
        v53 = v54;
        if ((*(_BYTE *)(v46 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow(v39, (unint64_t)v10, v45, v43, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v72, a7, a8, a9, a3);
LABEL_81:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v71, &v80, "CommonSlowPaths", a2);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *slow_path_put_by_val_with_this(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  int v92;
  int v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _DWORD *v108;
  WTF::StringImpl *v109;
  _QWORD *v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  int v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  WTF::StringImpl *v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159[2];
  int v160;
  BOOL v161;
  __int16 v162;
  char v163;
  uint64_t v164;
  unint64_t v165;
  JSC::VM *v166;
  uint64_t v167;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v166 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_150:
    __break(0xC471u);
    JUMPOUT(0x1988FEE10);
  }
  v16 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v60 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
    v24 = *(_DWORD *)(a2 + 14);
    v25 = a2[18];
  }
  else
  {
    if (v17 == 128)
    {
      v18 = *((__int16 *)a2 + 1);
      v19 = 1073741760;
      v61 = *((__int16 *)a2 + 2);
      if (v61 <= 63)
        v21 = *((__int16 *)a2 + 2);
      else
        v21 = v61 + 1073741760;
      v62 = *((__int16 *)a2 + 3);
      v23 = v62 + 1073741760;
      if (v62 <= 63)
        v23 = *((__int16 *)a2 + 3);
      v24 = *((__int16 *)a2 + 4);
      if (v24 > 63)
        v24 += 1073741760;
      v25 = a2[10];
      if (v18 <= 63)
        goto LABEL_16;
    }
    else
    {
      v18 = (char)a2[1];
      v19 = 1073741808;
      v20 = (char)a2[2];
      if (v20 <= 15)
        v21 = (char)a2[2];
      else
        v21 = v20 + 1073741808;
      v22 = (char)a2[3];
      v23 = v22 + 1073741808;
      if (v22 <= 15)
        v23 = (char)a2[3];
      v24 = (char)a2[4];
      if (v24 > 15)
        v24 += 1073741808;
      v25 = a2[5];
      if (v18 <= 15)
      {
LABEL_16:
        v26 = v18;
LABEL_17:
        v27 = (unint64_t *)(a1 + 8 * v26);
        goto LABEL_18;
      }
    }
    v60 = v18 + v19;
  }
  v26 = v60;
  if (v60 < 0x40000000)
    goto LABEL_17;
  v63 = (v60 - 0x40000000);
  if (v63 >= *(unsigned int *)(v11 + 172))
    goto LABEL_150;
  v27 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v63);
LABEL_18:
  v28 = *v27;
  v165 = *v27;
  if (v21 >= 0x40000000)
  {
    v39 = v21 - 0x40000000;
    if (v39 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FF28CLL);
    }
    v29 = (WTF::StringImpl **)(*(_QWORD *)(v11 + 160) + 8 * v39);
  }
  else
  {
    v29 = (WTF::StringImpl **)(a1 + 8 * v21);
  }
  v30 = *v29;
  if (v23 >= 0x40000000)
  {
    v40 = v23 - 0x40000000;
    if (v40 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FF294);
    }
    v31 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v40);
  }
  else
  {
    v31 = (uint64_t *)(a1 + 8 * v23);
  }
  v32 = *v31;
  if (v24 >= 0x40000000)
  {
    v41 = v24 - 0x40000000;
    if (v41 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FF29CLL);
    }
    v33 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v41);
  }
  else
  {
    v33 = (unint64_t *)(a1 + 8 * v24);
  }
  v34 = *v33;
  v35 = *(_QWORD *)(v9 + 56);
  if ((v32 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v32 + 5) == 2)
    {
      v36 = *(_QWORD *)(v32 + 8);
      if ((v36 & 1) == 0)
      {
        if ((*(_BYTE *)(v36 + 16) & 0x10) != 0)
        {
LABEL_28:
          v37 = *(_DWORD *)v36 + 2;
LABEL_29:
          *(_DWORD *)v36 = v37;
          goto LABEL_30;
        }
        v157 = *v29;
        v154 = v25;
        v50 = *(WTF::StringImpl **)(v35 + 64768);
        if (v50 != (WTF::StringImpl *)v36)
        {
          *(_DWORD *)v36 += 2;
          *(_QWORD *)(v35 + 64768) = v36;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::~StringImpl(v50, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
            }
            else
            {
              *(_DWORD *)v50 -= 2;
            }
          }
          v51 = *(WTF::StringImpl **)(v32 + 8);
          if (v51)
          {
            if ((*((_BYTE *)v51 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v51 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v51, a3, a4, a5, a6, a7, a8, (WTF *)v159);
              v51 = v159[0];
            }
          }
          v52 = *(WTF::StringImpl **)(v35 + 64776);
          *(_QWORD *)(v35 + 64776) = v51;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
            }
            else
            {
              *(_DWORD *)v52 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v32 + 8) + 16) & 0x10) == 0)
        {
          v53 = *(_DWORD **)(v35 + 64776);
          *v53 += 2;
          __dmb(0xAu);
          v54 = *(WTF::StringImpl **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = v53;
          v159[0] = v54;
          v55 = (_QWORD *)(v35 + 808);
          v56 = *(unsigned int *)(v35 + 820);
          if ((_DWORD)v56 == *(_DWORD *)(v35 + 816))
          {
            v58 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)v159);
            v56 = *(unsigned int *)(v35 + 820);
            v57 = (WTF::StringImpl **)(*(_QWORD *)(v35 + 808) + 8 * v56);
            v54 = *v58;
          }
          else
          {
            v57 = (WTF::StringImpl **)(*v55 + 8 * v56);
            v58 = v159;
          }
          *v58 = 0;
          *v57 = v54;
          *(_DWORD *)(v35 + 820) = v56 + 1;
          v59 = v159[0];
          v159[0] = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
            }
            else
            {
              *(_DWORD *)v59 -= 2;
            }
          }
        }
        v36 = *(_QWORD *)(v35 + 64776);
        goto LABEL_62;
      }
      goto LABEL_112;
    }
    v155 = v25;
    v90 = *v29;
    v32 = JSC::JSCell::toPrimitive(v32, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v30 = v90;
    v25 = v155;
  }
  v167 = v32;
  if (*(_DWORD *)(v35 + 80))
  {
    v158 = v30;
    v156 = v25;
    v133 = *(_DWORD *)(v35 + 80);
    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v25 = v156;
    v30 = v158;
    if (*(_QWORD *)(v35 + 16))
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 41952) + 8);
      if (v36)
        *(_DWORD *)v36 += 2;
      v25 = v156;
      v30 = v158;
      goto LABEL_30;
    }
  }
  if ((v32 & 0xFFFE000000000002) == 0)
  {
    v91 = *(unsigned __int8 *)(v32 + 5);
    if (v91 == 2)
      goto LABEL_96;
    if (v91 == 4)
    {
      v36 = *(_QWORD *)(v32 + 8);
      v92 = *(_DWORD *)v36;
      *(_DWORD *)v36 += 4;
      v37 = v92 + 2;
      if (v37)
        goto LABEL_29;
      v93 = v25;
      v94 = v30;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v36, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      v30 = v94;
      v25 = v93;
      goto LABEL_30;
    }
  }
  v103 = v25;
  v104 = v30;
  v32 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v167, (JSC::JSGlobalObject *)v9, 1);
  v30 = v104;
  v25 = v103;
LABEL_96:
  if (!*(_DWORD *)(v35 + 80))
    goto LABEL_97;
  v134 = v30;
  v135 = v25;
  v136 = *(_DWORD *)(v35 + 80);
  if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v25 = v135;
  v30 = v134;
  if (!*(_QWORD *)(v35 + 16))
  {
LABEL_97:
    v36 = *(_QWORD *)(v32 + 8);
    v35 = *(_QWORD *)(v9 + 56);
    if ((v36 & 1) == 0)
    {
      if ((*(_BYTE *)(v36 + 16) & 0x10) != 0)
        goto LABEL_28;
      v157 = v30;
      v154 = v25;
      v105 = *(WTF::StringImpl **)(v35 + 64768);
      if (v105 != (WTF::StringImpl *)v36)
      {
        *(_DWORD *)v36 += 2;
        *(_QWORD *)(v35 + 64768) = v36;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
          {
            WTF::StringImpl::~StringImpl(v105, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          }
          else
          {
            *(_DWORD *)v105 -= 2;
          }
        }
        v106 = *(WTF::StringImpl **)(v32 + 8);
        if (v106)
        {
          if ((*((_BYTE *)v106 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v106 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v106, a3, a4, a5, a6, a7, a8, (WTF *)v159);
            v106 = v159[0];
          }
        }
        v107 = *(WTF::StringImpl **)(v35 + 64776);
        *(_QWORD *)(v35 + 64776) = v106;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
          }
          else
          {
            *(_DWORD *)v107 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v32 + 8) + 16) & 0x10) == 0)
      {
        v108 = *(_DWORD **)(v35 + 64776);
        *v108 += 2;
        __dmb(0xAu);
        v109 = *(WTF::StringImpl **)(v32 + 8);
        *(_QWORD *)(v32 + 8) = v108;
        v159[0] = v109;
        v110 = (_QWORD *)(v35 + 808);
        v111 = *(unsigned int *)(v35 + 820);
        if ((_DWORD)v111 == *(_DWORD *)(v35 + 816))
        {
          v113 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)v159);
          v111 = *(unsigned int *)(v35 + 820);
          v112 = (WTF::StringImpl **)(*(_QWORD *)(v35 + 808) + 8 * v111);
          v109 = *v113;
        }
        else
        {
          v112 = (WTF::StringImpl **)(*v110 + 8 * v111);
          v113 = v159;
        }
        *v113 = 0;
        *v112 = v109;
        *(_DWORD *)(v35 + 820) = v111 + 1;
        v114 = v159[0];
        v159[0] = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
          {
            WTF::StringImpl::~StringImpl(v114, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
          }
          else
          {
            *(_DWORD *)v114 -= 2;
          }
        }
      }
      v36 = *(_QWORD *)(v35 + 64776);
LABEL_62:
      *(_DWORD *)v36 += 2;
      v25 = v154;
LABEL_118:
      v30 = v157;
      goto LABEL_30;
    }
LABEL_112:
    v157 = v30;
    v115 = v25;
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v32, (JSC::JSGlobalObject *)v9);
    if (!*(_DWORD *)(v35 + 80))
      goto LABEL_113;
    v137 = *(_DWORD *)(v35 + 80);
    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v35 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v35 + 16))
    {
      v36 = 0;
      v116 = v159[0];
      v159[0] = 0;
      if (!v116)
        goto LABEL_117;
    }
    else
    {
LABEL_113:
      v36 = (uint64_t)v159[0];
      if (!v159[0])
      {
LABEL_117:
        v25 = v115;
        goto LABEL_118;
      }
      *(_DWORD *)v159[0] += 2;
      v159[0] = 0;
      v116 = (WTF::StringImpl *)v36;
    }
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
    goto LABEL_117;
  }
  v36 = 0;
LABEL_30:
  if (HIBYTE(word_1ECF4C620))
  {
    v72 = v25;
    v73 = v30;
    JSC::doExceptionFuzzing(v9, &v166, "CommonSlowPaths", v16);
    v30 = v73;
    v25 = v72;
  }
  if (*((_QWORD *)v10 + 2))
    goto LABEL_77;
  v159[0] = 0;
  v159[1] = v30;
  v160 = -1;
  v161 = v25 == 0;
  v162 = 0;
  v163 = 1;
  v164 = 0;
  if ((v28 & 0xFFFE000000000002) != 0)
    JSC::JSValue::putToPrimitive((JSC::JSValue *)&v165, (JSC::JSGlobalObject *)v9, v36, v34, (uint64_t)v159, a6, a7, a8);
  else
    (*(void (**)(unint64_t, unint64_t, uint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) + 0x48))(v28, v9, v36, v34, v159);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v166, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
  {
LABEL_77:
    v16 = &xmmword_1ECF4C7C0;
    if (!v36)
      return v16;
  }
  else if (!v36)
  {
    return v16;
  }
  if (*(_DWORD *)v36 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v36, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    *(_DWORD *)v36 -= 2;
  }
  return v16;
}

__int128 *slow_path_define_data_property(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  _DWORD **v26;
  int v27;
  int v28;
  _DWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  _QWORD *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  WTF::StringImpl **v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v139;
  BOOL v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::VM *v166;
  uint64_t v167;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v166 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_160:
    __break(0xC471u);
    JUMPOUT(0x1988FF6F4);
  }
  v16 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 1);
    v19 = 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 <= 63)
      v21 = *((__int16 *)a2 + 2);
    else
      v21 = v20 + 1073741760;
    v22 = *((__int16 *)a2 + 3);
    v23 = v22 + 1073741760;
    if (v22 <= 63)
      v23 = *((__int16 *)a2 + 3);
    v24 = *((__int16 *)a2 + 4);
    if (v24 > 63)
      v24 += 1073741760;
    if (v18 <= 63)
      goto LABEL_28;
    goto LABEL_15;
  }
  if (v17 != 130)
  {
    v18 = (char)a2[1];
    v19 = 1073741808;
    v27 = (char)a2[2];
    if (v27 <= 15)
      v21 = (char)a2[2];
    else
      v21 = v27 + 1073741808;
    v28 = (char)a2[3];
    v23 = v28 + 1073741808;
    if (v28 <= 15)
      v23 = (char)a2[3];
    v24 = (char)a2[4];
    if (v24 > 15)
      v24 += 1073741808;
    if (v18 < 16)
      goto LABEL_28;
LABEL_15:
    v18 += v19;
    goto LABEL_16;
  }
  v18 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
  v24 = *(_DWORD *)(a2 + 14);
LABEL_16:
  if (v18 >= 0x40000000)
  {
    v25 = v18 - 0x40000000;
    if (v25 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FFB28);
    }
    v26 = (_DWORD **)(*(_QWORD *)(v11 + 160) + 8 * v25);
    goto LABEL_29;
  }
LABEL_28:
  v26 = (_DWORD **)(a1 + 8 * v18);
LABEL_29:
  v29 = *v26;
  if (v21 >= 0x40000000)
  {
    v42 = v21 - 0x40000000;
    if (v42 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FFB30);
    }
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v42);
  }
  else
  {
    v30 = (uint64_t *)(a1 + 8 * v21);
  }
  v31 = *v30;
  if (v23 >= 0x40000000)
  {
    v43 = v23 - 0x40000000;
    if (v43 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988FFB38);
    }
    v32 = (WTF::StringImpl **)(*(_QWORD *)(v11 + 160) + 8 * v43);
  }
  else
  {
    v32 = (WTF::StringImpl **)(a1 + 8 * v23);
  }
  v33 = *v32;
  if (v24 >= 0x40000000)
  {
    v44 = v24 - 0x40000000;
    if (v44 >= *(_DWORD *)(v11 + 172))
      goto LABEL_160;
    v34 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v44);
  }
  else
  {
    v34 = (uint64_t *)(a1 + 8 * v24);
  }
  v35 = *v34;
  v36 = *(_QWORD *)(v9 + 56);
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v31 + 5) == 2)
    {
      v37 = *(WTF::StringImpl **)(v31 + 8);
      if ((v37 & 1) == 0)
      {
        if ((*((_BYTE *)v37 + 16) & 0x10) == 0)
        {
          v53 = *(WTF::StringImpl **)(v36 + 64768);
          if (v53 != v37)
          {
            *(_DWORD *)v37 += 2;
            *(_QWORD *)(v36 + 64768) = v37;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
              {
                v83 = v33;
                WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                v33 = v83;
              }
              else
              {
                *(_DWORD *)v53 -= 2;
              }
            }
            v54 = *(WTF::StringImpl **)(v31 + 8);
            if (v54)
            {
              v55 = v33;
              if ((*((_BYTE *)v54 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v54 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v54, a3, a4, a5, a6, a7, a8, (WTF *)&v162);
                v54 = v162;
              }
              v33 = v55;
            }
            v56 = *(WTF::StringImpl **)(v36 + 64776);
            *(_QWORD *)(v36 + 64776) = v54;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
              {
                v159 = v33;
                WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
                v33 = v159;
              }
              else
              {
                *(_DWORD *)v56 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
          {
            v57 = *(_DWORD **)(v36 + 64776);
            *v57 += 2;
            __dmb(0xAu);
            v58 = *(WTF::StringImpl **)(v31 + 8);
            *(_QWORD *)(v31 + 8) = v57;
            v162 = v58;
            v59 = (_QWORD *)(v36 + 808);
            v60 = *(unsigned int *)(v36 + 820);
            if ((_DWORD)v60 == *(_DWORD *)(v36 + 816))
            {
              v74 = v33;
              v62 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v162);
              v33 = v74;
              v60 = *(unsigned int *)(v36 + 820);
              v61 = (WTF::StringImpl **)(*(_QWORD *)(v36 + 808) + 8 * v60);
              v58 = *v62;
            }
            else
            {
              v61 = (WTF::StringImpl **)(*v59 + 8 * v60);
              v62 = &v162;
            }
            *v62 = 0;
            *v61 = v58;
            *(_DWORD *)(v36 + 820) = v60 + 1;
            v63 = v162;
            v162 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                v64 = v33;
                WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
                v33 = v64;
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
          }
          v37 = *(WTF::StringImpl **)(v36 + 64776);
        }
LABEL_39:
        v38 = *(_DWORD *)v37 + 2;
LABEL_40:
        *(_DWORD *)v37 = v38;
        goto LABEL_41;
      }
      goto LABEL_126;
    }
    v92 = v31;
    v93 = *v32;
    v94 = JSC::JSCell::toPrimitive(v92, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v33 = v93;
    v31 = v94;
  }
  v167 = v31;
  if (*(_DWORD *)(v36 + 80))
  {
    v160 = v33;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v33 = v160;
    if (hasExceptionsAfterHandlingTraps)
    {
      v37 = *(WTF::StringImpl **)(*(_QWORD *)(v36 + 41952) + 8);
      if (v37)
        *(_DWORD *)v37 += 2;
      v33 = v160;
      goto LABEL_41;
    }
  }
  if ((v31 & 0xFFFE000000000002) != 0)
    goto LABEL_134;
  v95 = *(unsigned __int8 *)(v31 + 5);
  if (v95 == 2)
    goto LABEL_109;
  if (v95 != 4)
  {
LABEL_134:
    v119 = v33;
    v120 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v167, (JSC::JSGlobalObject *)v9, 1);
    v33 = v119;
    v31 = v120;
LABEL_109:
    if (*(_DWORD *)(v36 + 80))
    {
      v139 = v33;
      v140 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = v139;
      if (v140)
      {
        v37 = 0;
        goto LABEL_41;
      }
    }
    v37 = *(WTF::StringImpl **)(v31 + 8);
    v36 = *(_QWORD *)(v9 + 56);
    if ((v37 & 1) == 0)
    {
      if ((*((_BYTE *)v37 + 16) & 0x10) == 0)
      {
        v96 = *(WTF::StringImpl **)(v36 + 64768);
        if (v96 != v37)
        {
          *(_DWORD *)v37 += 2;
          *(_QWORD *)(v36 + 64768) = v37;
          if (v96)
          {
            v141 = v33;
            if (*(_DWORD *)v96 == 2)
            {
              WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
            }
            else
            {
              *(_DWORD *)v96 -= 2;
            }
            v33 = v141;
          }
          v97 = *(WTF::StringImpl **)(v31 + 8);
          if (v97)
          {
            v98 = v33;
            if ((*((_BYTE *)v97 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v97 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v97, a3, a4, a5, a6, a7, a8, (WTF *)&v162);
              v97 = v162;
            }
            v33 = v98;
          }
          v99 = *(WTF::StringImpl **)(v36 + 64776);
          *(_QWORD *)(v36 + 64776) = v97;
          if (v99)
          {
            v161 = v33;
            if (*(_DWORD *)v99 == 2)
            {
              WTF::StringImpl::~StringImpl(v99, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
            }
            else
            {
              *(_DWORD *)v99 -= 2;
            }
            v33 = v161;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
        {
          v100 = *(_DWORD **)(v36 + 64776);
          *v100 += 2;
          __dmb(0xAu);
          v101 = *(WTF::StringImpl **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = v100;
          v162 = v101;
          v102 = (_QWORD *)(v36 + 808);
          v103 = *(unsigned int *)(v36 + 820);
          if ((_DWORD)v103 == *(_DWORD *)(v36 + 816))
          {
            v142 = v33;
            v105 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, v103 + 1, (unint64_t)&v162);
            v33 = v142;
            v103 = *(unsigned int *)(v36 + 820);
            v104 = (WTF::StringImpl **)(*(_QWORD *)(v36 + 808) + 8 * v103);
            v101 = *v105;
          }
          else
          {
            v104 = (WTF::StringImpl **)(*v102 + 8 * v103);
            v105 = &v162;
          }
          *v105 = 0;
          *v104 = v101;
          *(_DWORD *)(v36 + 820) = v103 + 1;
          v106 = v162;
          v162 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
            {
              v129 = v33;
              WTF::StringImpl::~StringImpl(v106, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
              v33 = v129;
            }
            else
            {
              *(_DWORD *)v106 -= 2;
            }
          }
        }
        v37 = *(WTF::StringImpl **)(v36 + 64776);
      }
      goto LABEL_39;
    }
LABEL_126:
    v107 = v33;
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)v9);
    if (*(_DWORD *)(v36 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v37 = 0;
      v108 = v162;
      v162 = 0;
      v33 = v107;
      if (!v108)
        goto LABEL_41;
    }
    else
    {
      v37 = v162;
      if (!v162)
      {
LABEL_136:
        v33 = v107;
        goto LABEL_41;
      }
      *(_DWORD *)v162 += 2;
      v162 = 0;
      v108 = v37;
      v33 = v107;
    }
    if (*(_DWORD *)v108 != 2)
    {
      *(_DWORD *)v108 -= 2;
      goto LABEL_41;
    }
    WTF::StringImpl::~StringImpl(v108, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    goto LABEL_136;
  }
  v37 = *(WTF::StringImpl **)(v31 + 8);
  v109 = *(_DWORD *)v37;
  *(_DWORD *)v37 += 4;
  v38 = v109 + 2;
  if (v38)
    goto LABEL_40;
  v110 = v33;
  WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
  v33 = v110;
LABEL_41:
  if (HIBYTE(word_1ECF4C620))
  {
    v73 = v33;
    JSC::doExceptionFuzzing(v9, &v166, "CommonSlowPaths", v16);
    v33 = v73;
  }
  if (*((_QWORD *)v10 + 2))
    goto LABEL_91;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 14;
  if ((v35 & 0xC) == 8)
  {
    v39 = 0;
    v40 = 14;
  }
  else
  {
    if ((v35 & 0xC) == 4)
      v40 = 10;
    else
      v40 = 14;
    v39 = 2;
    v165 = v40 | 0x200000000;
  }
  if ((v35 & 3) == 1)
  {
    v40 &= 7u;
LABEL_48:
    v39 |= 4u;
    v165 = __PAIR64__(v39, v40);
    goto LABEL_49;
  }
  if ((v35 & 3) != 2)
  {
    v40 |= 8u;
    goto LABEL_48;
  }
LABEL_49:
  if ((v35 & 0x40) != 0)
    v162 = v33;
  if ((v35 & 0x30) == 0x10)
  {
    v40 &= ~2u;
LABEL_53:
    LODWORD(v165) = v40;
    HIDWORD(v165) = v39 | 1;
    goto LABEL_54;
  }
  if ((v35 & 0x30) != 0x20)
  {
    v40 |= 2u;
    goto LABEL_53;
  }
LABEL_54:
  if ((v35 & 0x80) != 0)
  {
    v163 = 10;
    v40 = v40 & 0xFFFFFFED | 0x10;
    LODWORD(v165) = v40;
  }
  if ((v35 & 0x100) != 0)
  {
    v164 = 10;
    LODWORD(v165) = v40 & 0xFFFFFFED | 0x10;
  }
  (*(void (**)(_DWORD *, unint64_t, WTF::StringImpl *, WTF::StringImpl **, uint64_t))(16 * *(unsigned int *)(16 * (*v29 & 0xFFFFFFFE) + 0x4C) + 0x90))(v29, v9, v37, &v162, 1);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v166, "CommonSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
LABEL_91:
    v16 = &xmmword_1ECF4C7C0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return v16;
}

__int128 *slow_path_define_accessor_property(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v17;
  int v18;
  int v19;
  int8x16_t v20;
  int v21;
  int v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int v26;
  unint64_t v27;
  _DWORD **v28;
  int16x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  _DWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  unsigned int v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  _QWORD *v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _DWORD *v108;
  WTF::StringImpl *v109;
  _QWORD *v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  JSC::VM *v162;
  uint64_t v163;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v162 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_160:
    __break(0xC471u);
    JUMPOUT(0x1988FFFD8);
  }
  v17 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v21 = *((__int16 *)a2 + 1);
    v22 = 1073741760;
    v23 = *(int16x4_t *)(a2 + 4);
    v24 = vmovl_s16(v23);
    v25.i64[0] = 0x3F0000003FLL;
    v25.i64[1] = 0x3F0000003FLL;
    v20 = vbslq_s8((int8x16_t)vcgtq_s32(v24, v25), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v23), (int8x16_t)v24);
    if (v21 <= 63)
      goto LABEL_15;
  }
  else
  {
    if (v18 == 130)
    {
      v19 = *(_DWORD *)(a2 + 2);
      v20 = *(int8x16_t *)(a2 + 6);
      goto LABEL_11;
    }
    v21 = (char)a2[1];
    v22 = 1073741808;
    a9.i32[0] = *(_DWORD *)(a2 + 2);
    v29 = (int16x4_t)vmovl_s8(a9).u64[0];
    v30 = vmovl_s16(v29);
    v31.i64[0] = 0xF0000000FLL;
    v31.i64[1] = 0xF0000000FLL;
    v20 = vbslq_s8((int8x16_t)vcgtq_s32(v30, v31), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v29), (int8x16_t)v30);
    if (v21 <= 15)
    {
LABEL_15:
      v26 = v21;
      goto LABEL_16;
    }
  }
  v19 = v21 + v22;
LABEL_11:
  v26 = v19;
  if (v19 < 0x40000000)
  {
LABEL_16:
    v28 = (_DWORD **)(a1 + 8 * v26);
    goto LABEL_17;
  }
  v27 = (v19 - 0x40000000);
  if (v27 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198900420);
  }
  v28 = (_DWORD **)(*(_QWORD *)(v12 + 160) + 8 * v27);
LABEL_17:
  v32 = *v28;
  if (v20.i32[0] >= 0x40000000)
  {
    if ((v20.i32[0] - 0x40000000) >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198900428);
    }
    v33 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v20.i32[0] - 0x40000000));
  }
  else
  {
    v33 = (uint64_t *)(a1 + 8 * v20.i32[0]);
  }
  v34 = *v33;
  if (v20.i32[1] >= 0x40000000)
  {
    if ((v20.i32[1] - 0x40000000) >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198900430);
    }
    v35 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v20.i32[1] - 0x40000000));
  }
  else
  {
    v35 = (uint64_t *)(a1 + 8 * v20.i32[1]);
  }
  v36 = *v35;
  if (v20.i32[2] >= 0x40000000)
  {
    if ((v20.i32[2] - 0x40000000) >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198900438);
    }
    v37 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v20.i32[2] - 0x40000000));
  }
  else
  {
    v37 = (uint64_t *)(a1 + 8 * v20.i32[2]);
  }
  v38 = *v37;
  if (v20.i32[3] >= 0x40000000)
  {
    if ((v20.i32[3] - 0x40000000) >= *(_DWORD *)(v12 + 172))
      goto LABEL_160;
    v39 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * (v20.i32[3] - 0x40000000));
  }
  else
  {
    v39 = (uint64_t *)(a1 + 8 * v20.i32[3]);
  }
  v40 = *v39;
  v41 = *(_QWORD *)(v10 + 56);
  if ((v34 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v34 + 5) == 2)
    {
      v42 = *(WTF::StringImpl **)(v34 + 8);
      if ((v42 & 1) == 0)
      {
        if ((*((_BYTE *)v42 + 16) & 0x10) != 0)
        {
LABEL_29:
          v43 = *(_DWORD *)v42 + 2;
LABEL_30:
          *(_DWORD *)v42 = v43;
          goto LABEL_31;
        }
        v154 = v36;
        v156 = *v37;
        v55 = *(WTF::StringImpl **)(v41 + 64768);
        if (v55 != v42)
        {
          *(_DWORD *)v42 += 2;
          *(_QWORD *)(v41 + 64768) = v42;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
            {
              WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
            }
            else
            {
              *(_DWORD *)v55 -= 2;
            }
          }
          v56 = *(WTF::StringImpl **)(v34 + 8);
          if (v56)
          {
            if ((*((_BYTE *)v56 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v56 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v56, a3, a4, a5, a6, a7, a8, (WTF *)&v158);
              v56 = v158;
            }
          }
          v57 = *(WTF::StringImpl **)(v41 + 64776);
          *(_QWORD *)(v41 + 64776) = v56;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v34 + 8) + 16) & 0x10) == 0)
        {
          v58 = *(_DWORD **)(v41 + 64776);
          *v58 += 2;
          __dmb(0xAu);
          v59 = *(WTF::StringImpl **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = v58;
          v158 = v59;
          v60 = (_QWORD *)(v41 + 808);
          v61 = *(unsigned int *)(v41 + 820);
          if ((_DWORD)v61 == *(_DWORD *)(v41 + 816))
          {
            v63 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v158);
            v61 = *(unsigned int *)(v41 + 820);
            v62 = (WTF::StringImpl **)(*(_QWORD *)(v41 + 808) + 8 * v61);
            v59 = *v63;
          }
          else
          {
            v62 = (WTF::StringImpl **)(*v60 + 8 * v61);
            v63 = &v158;
          }
          *v63 = 0;
          *v62 = v59;
          *(_DWORD *)(v41 + 820) = v61 + 1;
          v64 = v158;
          v158 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
            {
              WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
          }
        }
        v42 = *(WTF::StringImpl **)(v41 + 64776);
        goto LABEL_79;
      }
      goto LABEL_122;
    }
    v155 = v36;
    v157 = *v37;
    v34 = JSC::JSCell::toPrimitive(v34, (JSC::VM **)v10, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v36 = v155;
    v38 = v157;
  }
  v163 = v34;
  if (*(_DWORD *)(v41 + 80))
  {
    v154 = v36;
    v156 = v38;
    v133 = *(_DWORD *)(v41 + 80);
    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v36 = v154;
    v38 = v156;
    if (*(_QWORD *)(v41 + 16))
    {
      v42 = *(WTF::StringImpl **)(*(_QWORD *)(v41 + 41952) + 8);
      if (!v42)
        goto LABEL_80;
      goto LABEL_79;
    }
  }
  if ((v34 & 0xFFFE000000000002) == 0)
  {
    v91 = *(unsigned __int8 *)(v34 + 5);
    if (v91 == 2)
      goto LABEL_106;
    if (v91 == 4)
    {
      v42 = *(WTF::StringImpl **)(v34 + 8);
      v92 = *(_DWORD *)v42;
      *(_DWORD *)v42 += 4;
      v43 = v92 + 2;
      if (v43)
        goto LABEL_30;
      v93 = v36;
      v94 = v38;
      WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      v38 = v94;
      v36 = v93;
      goto LABEL_31;
    }
  }
  v103 = v36;
  v104 = v38;
  v34 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v163, (JSC::JSGlobalObject *)v10, 1);
  v38 = v104;
  v36 = v103;
LABEL_106:
  if (!*(_DWORD *)(v41 + 80))
    goto LABEL_107;
  v134 = v38;
  v135 = v36;
  v136 = *(_DWORD *)(v41 + 80);
  if ((v136 & 0x27) != 0 && (v136 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v36 = v135;
  v38 = v134;
  if (!*(_QWORD *)(v41 + 16))
  {
LABEL_107:
    v42 = *(WTF::StringImpl **)(v34 + 8);
    v41 = *(_QWORD *)(v10 + 56);
    if ((v42 & 1) == 0)
    {
      if ((*((_BYTE *)v42 + 16) & 0x10) != 0)
        goto LABEL_29;
      v154 = v36;
      v156 = v38;
      v105 = *(WTF::StringImpl **)(v41 + 64768);
      if (v105 != v42)
      {
        *(_DWORD *)v42 += 2;
        *(_QWORD *)(v41 + 64768) = v42;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
          {
            WTF::StringImpl::~StringImpl(v105, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          }
          else
          {
            *(_DWORD *)v105 -= 2;
          }
        }
        v106 = *(WTF::StringImpl **)(v34 + 8);
        if (v106)
        {
          if ((*((_BYTE *)v106 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v106 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v106, a3, a4, a5, a6, a7, a8, (WTF *)&v158);
            v106 = v158;
          }
        }
        v107 = *(WTF::StringImpl **)(v41 + 64776);
        *(_QWORD *)(v41 + 64776) = v106;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
          }
          else
          {
            *(_DWORD *)v107 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v34 + 8) + 16) & 0x10) == 0)
      {
        v108 = *(_DWORD **)(v41 + 64776);
        *v108 += 2;
        __dmb(0xAu);
        v109 = *(WTF::StringImpl **)(v34 + 8);
        *(_QWORD *)(v34 + 8) = v108;
        v158 = v109;
        v110 = (_QWORD *)(v41 + 808);
        v111 = *(unsigned int *)(v41 + 820);
        if ((_DWORD)v111 == *(_DWORD *)(v41 + 816))
        {
          v113 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v158);
          v111 = *(unsigned int *)(v41 + 820);
          v112 = (WTF::StringImpl **)(*(_QWORD *)(v41 + 808) + 8 * v111);
          v109 = *v113;
        }
        else
        {
          v112 = (WTF::StringImpl **)(*v110 + 8 * v111);
          v113 = &v158;
        }
        *v113 = 0;
        *v112 = v109;
        *(_DWORD *)(v41 + 820) = v111 + 1;
        v114 = v158;
        v158 = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
          {
            WTF::StringImpl::~StringImpl(v114, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
          }
          else
          {
            *(_DWORD *)v114 -= 2;
          }
        }
      }
      v42 = *(WTF::StringImpl **)(v41 + 64776);
LABEL_79:
      *(_DWORD *)v42 += 2;
LABEL_80:
      v36 = v154;
LABEL_128:
      v38 = v156;
      goto LABEL_31;
    }
LABEL_122:
    v156 = v38;
    v115 = v36;
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v34, (JSC::JSGlobalObject *)v10);
    if (!*(_DWORD *)(v41 + 80))
      goto LABEL_123;
    v137 = *(_DWORD *)(v41 + 80);
    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v41 + 16))
    {
      v42 = 0;
      v116 = v158;
      v158 = 0;
      if (!v116)
        goto LABEL_127;
    }
    else
    {
LABEL_123:
      v42 = v158;
      if (!v158)
      {
LABEL_127:
        v36 = v115;
        goto LABEL_128;
      }
      *(_DWORD *)v158 += 2;
      v158 = 0;
      v116 = v42;
    }
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
    goto LABEL_127;
  }
  v42 = 0;
LABEL_31:
  if (HIBYTE(word_1ECF4C620))
  {
    v73 = v36;
    v74 = v38;
    JSC::doExceptionFuzzing(v10, &v162, "CommonSlowPaths", v17);
    v38 = v74;
    v36 = v73;
  }
  if (*((_QWORD *)v11 + 2))
    goto LABEL_82;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 14;
  if ((v40 & 0xC) == 8)
  {
    v44 = 0;
    v45 = 14;
  }
  else
  {
    if ((v40 & 0xC) == 4)
      v45 = 10;
    else
      v45 = 14;
    v44 = 2;
    v161 = v45 | 0x200000000;
  }
  if ((v40 & 3) == 1)
  {
    v45 &= 7u;
LABEL_38:
    v44 |= 4u;
    v161 = __PAIR64__(v44, v45);
    goto LABEL_40;
  }
  if ((v40 & 3) != 2)
  {
    v45 |= 8u;
    goto LABEL_38;
  }
LABEL_40:
  if ((v40 & 0x40) != 0)
    v158 = (WTF::StringImpl *)10;
  if ((v40 & 0x30) == 0x10)
  {
    v45 &= ~2u;
  }
  else
  {
    if ((v40 & 0x30) == 0x20)
      goto LABEL_47;
    v45 |= 2u;
  }
  LODWORD(v161) = v45;
  HIDWORD(v161) = v44 | 1;
LABEL_47:
  if ((v40 & 0x80) != 0)
  {
    v159 = v36;
    v45 = v45 & 0xFFFFFFED | 0x10;
    LODWORD(v161) = v45;
    if ((v40 & 0x100) == 0)
      goto LABEL_49;
  }
  else if ((v40 & 0x100) == 0)
  {
    goto LABEL_49;
  }
  v160 = v38;
  LODWORD(v161) = v45 & 0xFFFFFFED | 0x10;
LABEL_49:
  (*(void (**)(_DWORD *, unint64_t, WTF::StringImpl *, WTF::StringImpl **, uint64_t))(16 * *(unsigned int *)(16 * (*v32 & 0xFFFFFFFE) + 0x4C) + 0x90))(v32, v10, v42, &v158, 1);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v162, "CommonSlowPaths", v17);
  if (!*((_QWORD *)v11 + 2))
  {
    if (!v42)
      return v17;
    goto LABEL_53;
  }
LABEL_82:
  v17 = &xmmword_1ECF4C7C0;
  if (!v42)
    return v17;
LABEL_53:
  if (*(_DWORD *)v42 == 2)
  {
    WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
  }
  else
  {
    *(_DWORD *)v42 -= 2;
  }
  return v17;
}

__int128 *slow_path_throw_static_error(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unsigned __int8 v14;
  unint64_t *v15;
  unint64_t v16;
  int **v17;
  unint64_t Error;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  JSC::CallFrame::setCurrentVPC(a1, (unint64_t)a2);
  v7 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpThrowStaticError>(a2);
  v14 = BYTE4(v7);
  if ((int)v7 >= 0x40000000)
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = (v7 - 0x40000000);
    if (v26 >= *(unsigned int *)(v25 + 172))
      goto LABEL_10;
    v15 = (unint64_t *)(*(_QWORD *)(v25 + 160) + 8 * v26);
  }
  else
  {
    v15 = (unint64_t *)(a1 + 8 * (int)v7);
  }
  v16 = *v15;
  if ((*v15 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198900550);
  }
  v17 = (int **)(v16 + 8);
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(v16, v5, (uint64_t)v17, v8, v13, v9, v10, v11, v12);
  Error = JSC::createError(v5, v14, (WTF::StringImpl **)v17);
  JSC::VM::throwException(v6, v5, Error, v19, v20, v21, v22, v23);
  return &xmmword_1ECF4C7C0;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpThrowStaticError>(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;

  v1 = *a1;
  if (v1 == 130)
  {
    v2 = *(_DWORD *)(a1 + 2);
    v3 = *(_DWORD *)(a1 + 6);
  }
  else if (v1 == 128)
  {
    v2 = *((__int16 *)a1 + 1);
    if (v2 > 63)
      v2 += 1073741760;
    LOBYTE(v3) = a1[4];
  }
  else
  {
    v2 = (char)a1[1];
    if (v2 > 15)
      v2 += 1073741808;
    LOBYTE(v3) = a1[2];
  }
  return v2 | ((unint64_t)v3 << 32);
}

__int128 *slow_path_new_array_with_spread(uint64_t a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, JSC::JSImmutableButterfly *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  JSC *v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t *v25;
  JSC::Structure **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  JSC::Structure **v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t *v40;
  int v41;
  uint64_t NewArrayBuffer;
  int v43;
  unint64_t v44;
  JSC::Structure **v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  JSC::Structure *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t OutOfMemoryError;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  JSC::Structure **v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  JSC *v83;
  JSC::VM *v84;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v83 = v10;
  v84 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198900A1CLL);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v77 = *((__int16 *)a2 + 1);
    if (v77 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v77 + 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((unsigned __int16 *)a2 + 3);
    v23 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
    v23 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = a2[3];
    v23 = a2[4];
  }
  v24 = *(unsigned int **)(*(_QWORD *)(v9[7] + 152) + 40);
  if (*v24 <= v23)
  {
    __break(0xC471u);
    JUMPOUT(0x198900A3CLL);
  }
  v25 = (uint64_t *)&v24[2 * v23 + 2];
  v26 = (JSC::Structure **)(a1 + 8 * v21);
  v82 = v25;
  if (v22 == 1)
  {
    v27 = *v25;
    v28 = (_QWORD *)(2 * *v25);
    if ((*v25 & 0x8000000000000000) == 0 && !*v28)
      goto LABEL_21;
    v40 = v28 + 1;
    if (v27 < 0)
      v40 = v25;
    if ((*(_BYTE *)v40 & 1) != 0)
    {
      v41 = *((_DWORD *)v83 + 232);
      a2 = v41 ? (unsigned __int8 *)(16 * (v41 & 0xFFFFFFFE)) : 0;
      if ((a2[8] & 0x10) != 0)
      {
        NewArrayBuffer = JSC::CommonSlowPaths::allocateNewArrayBuffer(v11, (JSC::VM *)a2, *v26, a5, a6, a7, a8, a9, a3);
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v83, &v84, "CommonSlowPaths", v16);
        if (*((_QWORD *)v11 + 2))
          return &xmmword_1ECF4C7C0;
        *(_QWORD *)(a1 + 8 * v20) = NewArrayBuffer;
        return (__int128 *)v16;
      }
    }
  }
  else
  {
    if (v22 < 1)
    {
      v43 = 0;
      v31 = 0;
      goto LABEL_66;
    }
    v27 = *v25;
    v28 = (_QWORD *)(2 * *v25);
  }
  v29 = v28 + 1;
  if (v27 < 0)
    v29 = v25;
  if (v27 < 0)
  {
    v44 = 0;
    LODWORD(v31) = 0;
    v32 = 0;
    v45 = v26;
    do
    {
      if (v44 <= 0x3E && (((unint64_t)*v29 >> v44) & 1) != 0)
      {
        v46 = *((_DWORD *)*v45 + 2);
        v47 = __CFADD__((_DWORD)v31, v46);
        v48 = v31 + v46;
        if (v47)
          v32 = 1;
        if (v47)
          v31 = v31;
        else
          v31 = v48;
      }
      else if ((_DWORD)v31 == -1)
      {
        v32 = 1;
        v31 = 0xFFFFFFFFLL;
      }
      else
      {
        v31 = (v31 + 1);
      }
      ++v44;
      --v45;
    }
    while (v22 != v44);
    goto LABEL_63;
  }
LABEL_21:
  v30 = 0;
  LODWORD(v31) = 0;
  v32 = 0;
  v35 = *v28;
  v33 = v28 + 1;
  v34 = v35;
  v36 = v26;
  do
  {
    if (v34 > v30 && ((*(_QWORD *)((char *)v33 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
    {
      v37 = *((_DWORD *)*v36 + 2);
      v38 = __CFADD__((_DWORD)v31, v37);
      v39 = v31 + v37;
      if (v38)
        v32 = 1;
      if (v38)
        v31 = v31;
      else
        v31 = v39;
    }
    else if ((_DWORD)v31 == -1)
    {
      v32 = 1;
      v31 = 0xFFFFFFFFLL;
    }
    else
    {
      v31 = (v31 + 1);
    }
    ++v30;
    --v36;
  }
  while (v22 != v30);
LABEL_63:
  if (v32 || v31 >> 27)
  {
LABEL_101:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v83, (JSC::JSGlobalObject *)a2);
    JSC::VM::throwException(v11, v83, OutOfMemoryError, v71, v72, v73, v74, v75);
    return &xmmword_1ECF4C7C0;
  }
  v43 = 1;
LABEL_66:
  v49 = *((_DWORD *)v83 + 227);
  if (v49)
    v50 = 16 * (v49 & 0xFFFFFFFE);
  else
    v50 = 0;
  v51 = JSC::JSArray::tryCreate(v11, v50, (JSC::Structure *)v31, (uint64_t)a5, a6, a7, a8, a9, a3);
  if (!v51)
    goto LABEL_101;
  v57 = v51;
  v80 = v20;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v83, &v84, "CommonSlowPaths", v16);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  v81 = a1;
  if (v43)
  {
    v58 = 0;
    v59 = 0;
    v60 = v22;
    v78 = v22;
    v79 = v26;
    do
    {
      v61 = (unint64_t *)(2 * *v82);
      if (*v82 < 0)
        v62 = 63;
      else
        v62 = *v61;
      v63 = v26[-v58];
      if (v62 > v58
        && ((v64 = (uint64_t *)(v61 + 1), *v82 >= 0) ? (v65 = v64) : (v65 = v82),
            ((*(unint64_t *)((char *)v65 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v58) & 1) != 0))
      {
        if (*((_DWORD *)v63 + 2))
        {
          v66 = 0;
          v67 = (char *)v63 + 16;
          while (1)
          {
            if ((*((_BYTE *)v63 + 4) & 0xE) == 6)
            {
              v76 = *(_QWORD *)&v67[8 * v66];
              if (v76 == 0xFFFE000000000000)
              {
LABEL_109:
                __break(0xC471u);
                JUMPOUT(0x198900B08);
              }
              v68 = v76 + 0x2000000000000;
            }
            else
            {
              v68 = *(_QWORD *)&v67[8 * v66];
              if (!v68)
                goto LABEL_109;
            }
            JSC::JSObject::putDirectIndex(v57, (unint64_t)v83, (JSC::VM *)(v59 + v66), v68, v52, v53, v54, v55, v56);
            if (HIBYTE(word_1ECF4C620))
              JSC::doExceptionFuzzing((unint64_t)v83, &v84, "CommonSlowPaths", v16);
            if (*((_QWORD *)v11 + 2))
              return &xmmword_1ECF4C7C0;
            if (++v66 >= (unint64_t)*((unsigned int *)v63 + 2))
            {
              v59 = (v59 + v66);
              v60 = v78;
              v26 = v79;
              break;
            }
          }
        }
      }
      else
      {
        JSC::JSObject::putDirectIndex(v57, (unint64_t)v83, (JSC::VM *)v59, (unint64_t)v26[-v58], v52, v53, v54, v55, v56);
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v83, &v84, "CommonSlowPaths", v16);
        if (*((_QWORD *)v11 + 2))
          return &xmmword_1ECF4C7C0;
        v59 = (v59 + 1);
      }
      ++v58;
    }
    while (v58 != v60);
  }
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v83, &v84, "CommonSlowPaths", v16);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(v81 + 8 * v80) = v57;
  return (__int128 *)v16;
}

__int128 *slow_path_new_array_with_species(uint64_t a1, unsigned __int8 *a2, JSC::ProxyObject *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int isArraySlow;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  JSC::VM *v46;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::Heap **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  JSC::JSCell *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  _BYTE *v75;
  JSC::VM *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  JSC::JSCell *v91;
  int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _WORD *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  WTF::Thread *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  BOOL v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  JSC::JSCell *v131;
  unint64_t v132;
  char OwnStaticPropertySlot;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  unint64_t v142;
  int v143;
  _BYTE *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t (*v153)(uint64_t *);
  uint64_t *v154;
  uint64_t v155;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  double v162;
  unsigned __int16 *v163;
  uint64_t v164;
  unsigned int v165;
  char v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  WTF::StringImpl *Index;
  int v172;
  char v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _BYTE *v179;
  uint64_t v180;
  unsigned __int16 *v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned __int8 *v191;
  int v192;
  double v193;
  void *v194;
  const unsigned __int8 *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  char v200;
  int v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  _BOOL4 v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  _DWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  JSC::VM *v223;
  JSC::VM *v224;
  int v225;
  JSC::VM *v226;
  JSC::VM *v227;
  WTF *v228;
  WTF *v229;
  WTF *v230;
  JSC::JSArrayBufferView *v231;
  JSC::JSArrayBufferView *v232;
  JSC::JSArrayBufferView *v233;
  JSC::JSArrayBufferView *v234;
  JSC::JSArrayBufferView *v235;
  JSC::JSArrayBufferView *v236;
  int v237;
  JSC::VM *v238;
  _QWORD *v239;
  int v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD v247[2];
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  JSC::VM *v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  _QWORD v256[15];

  v256[13] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v238 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198900E54);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v139 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v139 > 63)
      v139 += 1073741760;
    v237 = v139;
    v140 = *((__int16 *)a2 + 2);
    v23 = v140 + 1073741760;
    if (v140 <= 63)
      v23 = *((__int16 *)a2 + 2);
    v24 = *((__int16 *)a2 + 3);
    v25 = *((unsigned __int16 *)a2 + 4);
    v26 = *((unsigned __int16 *)a2 + 5);
    if (v24 <= 63)
      goto LABEL_13;
LABEL_174:
    v141 = v24 + v21;
    goto LABEL_175;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v237 = v20;
    v22 = (char)a2[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[2];
    v24 = (char)a2[3];
    v25 = a2[4];
    v26 = a2[5];
    if (v24 <= 15)
    {
LABEL_13:
      v27 = v24;
      goto LABEL_14;
    }
    goto LABEL_174;
  }
  v237 = *(_DWORD *)(a2 + 2);
  v23 = *(_DWORD *)(a2 + 6);
  v141 = *(_DWORD *)(a2 + 10);
  v25 = *(_DWORD *)(a2 + 14);
  v26 = *(_DWORD *)(a2 + 18);
LABEL_175:
  v27 = v141;
  if (v141 >= 0x40000000)
  {
    v142 = (v141 - 0x40000000);
    if (v142 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198901CA4);
    }
    v28 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v142);
    goto LABEL_15;
  }
LABEL_14:
  v28 = (uint64_t *)(a1 + 8 * v27);
LABEL_15:
  v29 = *v28;
  if (v23 >= 0x40000000)
  {
    v48 = v23 - 0x40000000;
    if (v48 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198901C9CLL);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v48);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v23);
  }
  v31 = *v30;
  *(double *)a9.i64 = (double)(int)v31;
  if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v32 = v31 - 0x2000000000000;
  else
    v32 = (double)(int)v31;
  v33 = v9[17];
  v34 = *(unsigned __int16 *)(v33 + 44);
  if (!*(_WORD *)(v33 + 44))
    v34 = *(_DWORD *)(v33 + 184);
  v35 = ((v33 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v26;
  *(_DWORD *)(v35 + 8) = *(_DWORD *)v29;
  v36 = *(_QWORD *)(v10 + 56);
  v241 = 10;
  if ((v29 & 0xFFFE000000000002) != 0)
    goto LABEL_47;
  v37 = *(unsigned __int8 *)(v29 + 5);
  if (v37 < 0x17)
    goto LABEL_47;
  if (v37 - 36 < 2)
  {
    isArraySlow = 1;
    goto LABEL_26;
  }
  if (v37 == 61)
    isArraySlow = JSC::isArraySlow((JSC *)v10, (JSC::JSGlobalObject *)v29, a3);
  else
LABEL_47:
    isArraySlow = 0;
LABEL_26:
  if (*(_DWORD *)(v36 + 80))
  {
    v49 = *(_DWORD *)(v36 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v36 + 16))
      goto LABEL_57;
  }
  v39 = (unint64_t)v32;
  if (!isArraySlow)
    goto LABEL_38;
  v40 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x28);
  v41 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x30);
  if (!v41)
    v41 = *(_QWORD *)(v29 + 16);
  v44 = v41 == *(_QWORD *)(v40 + 672)
     && ((v42 = *(_QWORD *)(v40 + 2280), (v42 & 1) != 0)
       ? (v43 = (v42 >> 1) & 3)
       : (v43 = *(unsigned __int8 *)(v42 + 4)),
         v43 == 1)
     && ((*(_BYTE *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x12) & 0x20) == 0
      || JSC::JSObject::getDirectOffset((_DWORD *)v29, (JSC::VM *)v36, *(_QWORD *)(*(_QWORD *)(v36 + 41952) + 1080), a4, a5, a6, a7, a8) == -1);
  if (*(_DWORD *)(v36 + 80))
  {
    v50 = *(_DWORD *)(v36 + 80);
    if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v36 + 16))
      goto LABEL_57;
  }
  if (v44)
    goto LABEL_38;
  v72 = JSC::JSObject::get((unsigned int *)v29, v10, *(_QWORD *)(*(_QWORD *)(v36 + 41952) + 1080), (uint64_t)a4, a5, a6, a7, a8);
  v241 = v72;
  if (*(_DWORD *)(v36 + 80))
  {
    v155 = v72;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)v69, v70, v71, a5, a6, a7, a8);
    v72 = v155;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_57;
  }
  if ((v72 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v72 + 5) >= 0x17u)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x40))(&v253, v72);
    v72 = v241;
    if ((_BYTE)v253)
    {
      if (*(_QWORD *)(16 * (*(_DWORD *)v241 & 0xFFFFFFFE) + 0x28) != v10
        && &JSC::ArrayConstructor::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v241 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_38;
      }
    }
  }
  if ((v72 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v72 + 5) < 0x17u)
  {
LABEL_135:
    if (v72 == 10)
      goto LABEL_38;
    LOBYTE(v253) = 0;
    HIDWORD(v254) = 8;
    memset(v256, 0, 72);
    v255 = &v256[1];
    if (HIDWORD(v39))
    {
      v162 = (double)v39;
    }
    else
    {
      if ((v39 & 0x80000000) == 0)
      {
        v107 = v39 | 0xFFFE000000000000;
        goto LABEL_139;
      }
      v162 = (double)v39;
    }
    v107 = *(_QWORD *)&v162 + 0x2000000000000;
LABEL_139:
    v256[1] = v107;
    LODWORD(v254) = 1;
    v239 = &v256[1];
    v240 = 1;
    v252 = *(JSC::VM **)(v10 + 56);
    if ((v72 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v242) = 0;
    }
    else
    {
      v108 = (WTF::Thread *)v72;
      if (*(_BYTE *)(v72 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v242, (uint64_t *)v72, v69);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v242, v72);
      if ((_BYTE)v242)
      {
        v51 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(v10 + 56) + 90560), v108, (unsigned __int8 *)&v242, (uint64_t)&v239, v108, v109, v110, v111);
        goto LABEL_144;
      }
    }
    JSC::throwTypeError(v10, &v252, (uint64_t)"Species construction did not get a valid constructor", 53);
    v51 = 0;
LABEL_144:
    if (!*(_DWORD *)(v36 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)v112, v113, v114, v115, v116, v117, v118))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v254, v112, v113, v114, v115, v116, v117, v118);
      goto LABEL_61;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v254, v112, v113, v114, v115, v116, v117, v118);
LABEL_57:
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v10, &v238, "CommonSlowPaths", v17);
    if (*((_QWORD *)v238 + 2))
      return &xmmword_1ECF4C7C0;
    v51 = 0;
LABEL_61:
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v10, &v238, "CommonSlowPaths", v17);
    if (!*((_QWORD *)v238 + 2))
    {
      *(_QWORD *)(a1 + 8 * v237) = v51;
      *(_QWORD *)(v9[17] - 16 * v25 - 16) = v51;
      return (__int128 *)v17;
    }
    return &xmmword_1ECF4C7C0;
  }
  v73 = *(_QWORD *)(*(_QWORD *)(v36 + 41952) + 2752);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v244 = 0xFFFFFFFF00000000;
  LOBYTE(v248) = 0;
  v249 = 0;
  v250 = 0;
  v251 = 0;
  v246 = 0;
  memset(v247, 0, 13);
  v245 = v72;
  v69 = *(JSC::JSCell **)(v10 + 56);
  v74 = *(unsigned __int8 *)(v72 + 5);
  if (v74 > 0x16)
    goto LABEL_78;
  if (v74 == 2)
  {
    v236 = *(JSC::JSArrayBufferView **)(v10 + 56);
    v167 = v73;
    if (*(_QWORD *)(*((_QWORD *)v69 + 5244) + 1768) == v73)
    {
      v168 = *(_QWORD *)(v72 + 8);
      if ((v168 & 1) != 0)
        v169 = (unsigned int *)(v72 + 16);
      else
        v169 = (unsigned int *)(v168 + 4);
      v170 = *v169;
      if ((v170 & 0x80000000) != 0)
      {
        *(double *)a9.i64 = (double)v170;
        Index = (WTF::StringImpl *)(COERCE__INT64((double)v170) + 0x2000000000000);
      }
      else
      {
        Index = (WTF::StringImpl *)(v170 | 0xFFFE000000000000);
      }
      v172 = 14;
      goto LABEL_251;
    }
    if (v73)
    {
      v178 = *(_DWORD *)(v73 + 16);
      if ((v178 & 0x20) == 0)
      {
        v179 = *(_BYTE **)(v73 + 8);
        v180 = *(unsigned int *)(v73 + 4);
        if ((v178 & 4) != 0)
        {
          if (!(_DWORD)v180)
            goto LABEL_264;
          v73 = *v179 - 48;
          if (v73 > 9 || v180 >= 2 && *v179 == 48)
            goto LABEL_264;
          v212 = v179 + 1;
          v213 = v180 - 1;
          while (v213)
          {
            if (v73 > 0x19999999)
              goto LABEL_264;
            v214 = *v212 - 48;
            if (v214 > 9)
              goto LABEL_264;
            v173 = 0;
            v122 = __CFADD__(v214, 10 * v73);
            v73 = v214 + 10 * (_DWORD)v73;
            ++v212;
            --v213;
            if (v122)
              goto LABEL_252;
          }
        }
        else
        {
          if (!(_DWORD)v180)
            goto LABEL_264;
          v73 = *(unsigned __int16 *)v179 - 48;
          if (v73 > 9)
            goto LABEL_264;
          if (*(_WORD *)v179 == 48 && v180 > 1)
            goto LABEL_264;
          v182 = (unsigned __int16 *)(v179 + 2);
          v183 = v180 - 1;
          while (v183)
          {
            if (v73 > 0x19999999)
              goto LABEL_264;
            v184 = *v182 - 48;
            if (v184 > 9)
              goto LABEL_264;
            v173 = 0;
            v122 = __CFADD__(v184, 10 * v73);
            v73 = v184 + 10 * (_DWORD)v73;
            ++v182;
            --v183;
            if (v122)
              goto LABEL_252;
          }
        }
        if ((_DWORD)v73 != -1)
        {
          v215 = *(_QWORD *)(v72 + 8);
          v216 = (_DWORD *)((v215 & 1) != 0 ? v72 + 16 : v215 + 4);
          if (*v216 > v73)
          {
            Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v72, (JSC::JSGlobalObject *)v10, v73, v71, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v236 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v236, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
            {
              v172 = 10;
LABEL_251:
              v242 = Index;
              LODWORD(v244) = v172;
              v246 = 0;
              v173 = 1;
              BYTE1(v247[1]) = 1;
              goto LABEL_252;
            }
          }
        }
      }
    }
LABEL_264:
    v173 = 0;
LABEL_252:
    if (*((_DWORD *)v236 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v236, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
    {
      goto LABEL_404;
    }
    v73 = v167;
    if ((v173 & 1) != 0)
      goto LABEL_128;
  }
  v160 = v73;
  v161 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v241, v10);
  if (!v161)
    goto LABEL_404;
  v72 = v161;
  v69 = *(JSC::JSCell **)(v10 + 56);
  v73 = v160;
LABEL_78:
  v75 = (_BYTE *)(v72 + 6);
  v76 = (JSC::VM *)(v73 >> 4);
  v77 = v72;
  if ((*(_BYTE *)(v72 + 6) & 8) == 0)
  {
    a7 = v72;
    do
    {
      v78 = *(_DWORD *)a7 & 0xFFFFFFFE;
      a8 = 16 * v78;
      if (!(_DWORD)v76 || (v76 & ~*(_DWORD *)(16 * v78 + 0x20)) != 0)
        goto LABEL_91;
      v79 = *(_QWORD *)(16 * v78 + 0x58);
      if (!v79)
      {
        v90 = *(_QWORD *)(16 * v78 + 0x40);
        if (!v90 || *(_BYTE *)(v90 + 5) != 1 && *(_DWORD *)(v90 + 80) < 2u)
          goto LABEL_91;
        v91 = v69;
        v228 = (WTF *)v73;
        v231 = (JSC::JSArrayBufferView *)v72;
        v218 = a7;
        v223 = v76;
        v217 = a8;
        JSC::Structure::materializePropertyTable((JSC::Structure *)a8, v69, 1, (const JSC::PropertyTable *)v71, a5, a6, a7, a8);
        a8 = v217;
        a7 = v218;
        v76 = v223;
        v73 = (unint64_t)v228;
        v72 = (uint64_t)v231;
        v69 = v91;
        if (!v79)
          goto LABEL_91;
      }
      if (!*(_DWORD *)(v79 + 24))
        goto LABEL_91;
      v80 = *(_QWORD *)(v79 + 16);
      v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
      v82 = *(unsigned int *)(v79 + 8);
      v83 = *(_DWORD *)(v73 + 16);
      if ((v80 & 1) != 0)
      {
        if ((v83 & 0x20) != 0)
          v83 = *(_DWORD *)(v73 + 32);
        v84 = *(_DWORD *)(v79 + 12);
        v85 = (v83 >> 8) & *(_QWORD *)&v84;
        v86 = *(unsigned __int8 *)(v81 + v85);
        if (!*(_BYTE *)(v81 + v85))
          goto LABEL_91;
        v87 = v81 + v82;
        v88 = 1;
        while (1)
        {
          v89 = *(_QWORD *)(v87 + 8 * (v86 - 1));
          if (v73 == (v89 & 0xFFFFFFFFFFFFLL))
            break;
          v85 = ((_DWORD)v85 + v88) & v84;
          v86 = *(unsigned __int8 *)(v81 + v85);
          ++v88;
          if (!*(_BYTE *)(v81 + v85))
            goto LABEL_91;
        }
        a6 = (v89 >> 16) & 0xFF00000000 | HIBYTE(v89);
      }
      else
      {
        if ((v83 & 0x20) != 0)
          v83 = *(_DWORD *)(v73 + 32);
        v92 = *(_DWORD *)(v79 + 12);
        v93 = v92 & (v83 >> 8);
        v94 = *(_DWORD *)(v81 + 4 * v93);
        if (!v94)
          goto LABEL_91;
        v95 = v81 + 4 * v82;
        v96 = 1;
        while (1)
        {
          v97 = (v94 - 1);
          if (v73 == *(_QWORD *)(v95 + 16 * v97))
            break;
          v93 = (v93 + v96) & v92;
          v94 = *(_DWORD *)(v81 + 4 * v93);
          ++v96;
          if (!v94)
            goto LABEL_91;
        }
        a6 = *(unsigned int *)(v95 + 16 * v97 + 8) | ((unint64_t)*(unsigned __int8 *)(v95 + 16 * v97 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v103 = a7 + 16;
          v104 = a6 << 32;
        }
        else
        {
          v103 = *(_QWORD *)(a7 + 8) - 8;
          v104 = 0x3F00000000 - (a6 << 32);
        }
        v71 = *(_QWORD *)(v103 + (v104 >> 29));
        if ((v71 & 0xFFFE000000000002) != 0)
          goto LABEL_127;
        v105 = *(unsigned __int8 *)(v71 + 5);
        if (v105 == 5)
        {
          v134 = v73;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)a7, (uint64_t)v69, (uint64_t)&v242, v71, SHIDWORD(a6), a6);
          v73 = v134;
          goto LABEL_128;
        }
        if (v105 != 6)
        {
LABEL_127:
          v242 = (WTF::StringImpl *)v71;
          v246 = a7;
          v244 = __PAIR64__(a6, HIDWORD(a6));
          LOWORD(v247[1]) = 257;
          goto LABEL_128;
        }
        v135 = *(_DWORD *)(a8 + 16) & 3;
        v136 = *(_QWORD *)(v71 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v138 = *(_QWORD *)(v71 + 24);
          v137 = *(_QWORD *)(v71 + 32);
          v242 = *(WTF::StringImpl **)(v71 + 8);
          v243 = v136;
          LODWORD(v244) = HIDWORD(a6);
          v246 = a7;
          BYTE1(v247[1]) = 3;
          if (v135 != 2)
            LOBYTE(v247[1]) = 1;
          BYTE3(v247[1]) = 1;
          v250 = v138;
          v251 = v137;
          goto LABEL_128;
        }
        v242 = *(WTF::StringImpl **)(v71 + 8);
        v243 = v136;
        LODWORD(v244) = HIDWORD(a6);
        v246 = a7;
        BYTE1(v247[1]) = 3;
        if (v135 == 2)
          goto LABEL_128;
LABEL_239:
        LOBYTE(v247[1]) = 1;
        goto LABEL_128;
      }
LABEL_91:
      if ((*v75 & 0x20) != 0)
      {
        v131 = v69;
        v132 = v73;
        v233 = (JSC::JSArrayBufferView *)v72;
        v219 = a7;
        v224 = v76;
        v217 = a8;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a7, v69, v73, (uint64_t)&v242);
        a8 = v217;
        a7 = v219;
        v76 = v224;
        v72 = (uint64_t)v233;
        v73 = v132;
        v69 = v131;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_128;
      }
      v77 = *(_QWORD *)(a8 + 48);
      if (!v77)
        v77 = *(_QWORD *)(a7 + 16);
      if ((v77 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v77 + 5) < 0x17u)
      {
        if (!v73)
          goto LABEL_121;
        v98 = *(_DWORD *)(v73 + 16);
        if ((v98 & 0x20) != 0)
          goto LABEL_121;
        v99 = *(_WORD **)(v73 + 8);
        v100 = *(unsigned int *)(v73 + 4);
        if ((v98 & 4) == 0)
        {
          if ((_DWORD)v100)
          {
            v101 = (unsigned __int16)*v99 - 48;
            if (v101 <= 9)
            {
              v229 = (WTF *)v73;
              v232 = (JSC::JSArrayBufferView *)v72;
              if (*v99 != 48 || v100 <= 1)
              {
                v119 = v99 + 1;
                v120 = v100 - 1;
                v102 = 10;
                while (v120)
                {
                  if (v101 <= 0x19999999)
                  {
                    v121 = *v119 - 48;
                    if (v121 <= 9)
                    {
                      v122 = __CFADD__(v121, 10 * v101);
                      v101 = v121 + 10 * v101;
                      ++v119;
                      --v120;
                      if (!v122)
                        continue;
                    }
                  }
                  goto LABEL_130;
                }
                goto LABEL_335;
              }
            }
          }
LABEL_121:
          v102 = 10;
          goto LABEL_130;
        }
        v229 = (WTF *)v73;
        v232 = (JSC::JSArrayBufferView *)v72;
        if ((_DWORD)v100)
        {
          v101 = *(unsigned __int8 *)v99 - 48;
          if (v101 <= 9 && (v100 < 2 || *(_BYTE *)v99 != 48))
          {
            v196 = (unsigned __int8 *)v99 + 1;
            v197 = v100 - 1;
            while (v197)
            {
              if (v101 > 0x19999999)
                goto LABEL_404;
              v198 = *v196 - 48;
              if (v198 > 9)
                goto LABEL_404;
              v122 = __CFADD__(v198, 10 * v101);
              v101 = v198 + 10 * v101;
              ++v196;
              --v197;
              v102 = 10;
              if (v122)
                goto LABEL_130;
            }
LABEL_335:
            if (v101 != -1)
            {
              v226 = *(JSC::VM **)(v10 + 56);
              while (1)
              {
                v221 = 16 * (*(_DWORD *)v232 & 0xFFFFFFFE);
                v200 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v221 + 0x4C) + 0x70))();
                if (*((_DWORD *)v226 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v226, (uint64_t)v69, v199, v71, a5, a6, a7, a8))
                {
                  break;
                }
                v73 = (unint64_t)v229;
                if ((v200 & 1) != 0)
                  goto LABEL_128;
                if (BYTE2(v247[1]) == 3)
                {
                  if (BYTE4(v247[1]))
                    goto LABEL_121;
                  v201 = *((unsigned __int8 *)v232 + 5);
                  if (v201 == 61)
                    goto LABEL_342;
                }
                else
                {
                  v201 = *((unsigned __int8 *)v232 + 5);
                  if (v201 == 61)
                  {
                    if (BYTE2(v247[1]) == 1)
                      goto LABEL_121;
                    goto LABEL_342;
                  }
                }
                if ((v201 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v232, (uint64_t)v69, (uint64_t)v229, v71, a5, a6, a7, a8) <= v101)
                {
                  break;
                }
LABEL_342:
                if ((*(_WORD *)(v221 + 12) & 0x800) == 0 || BYTE2(v247[1]) == 3)
                {
                  v202 = *(_QWORD *)(16 * (*(_DWORD *)v232 & 0xFFFFFFFE) + 0x30);
                  if (!v202)
                    v202 = *((_QWORD *)v232 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v232 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v202 = (*(uint64_t (**)(JSC::JSArrayBufferView *, unint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v232 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v232, v10, v73);
                  }
                  else
                  {
                    v202 = *(_QWORD *)(16 * (*(_DWORD *)v232 & 0xFFFFFFFE) + 0x30);
                    if (!v202)
                      v202 = *((_QWORD *)v232 + 2);
                  }
                  if (*((_DWORD *)v226 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v226, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
                  {
                    break;
                  }
                }
                if ((v202 & 0xFFFE000000000002) != 0)
                  break;
                v232 = (JSC::JSArrayBufferView *)v202;
                v102 = 10;
                if (*(unsigned __int8 *)(v202 + 5) <= 0x16u)
                  goto LABEL_130;
              }
            }
          }
        }
LABEL_404:
        v102 = 10;
        goto LABEL_130;
      }
      v75 = (_BYTE *)(v77 + 6);
      a7 = v77;
    }
    while ((*(_BYTE *)(v77 + 6) & 8) == 0);
  }
  v220 = v77;
  v225 = (int)v76;
  v230 = (WTF *)v73;
  v234 = (JSC::JSArrayBufferView *)v72;
  if (v73)
  {
    v143 = *(_DWORD *)(v73 + 16);
    if ((v143 & 0x20) == 0)
    {
      v144 = *(_BYTE **)(v73 + 8);
      v145 = *(unsigned int *)(v73 + 4);
      if ((v143 & 4) != 0)
      {
        if ((_DWORD)v145)
        {
          v146 = *v144 - 48;
          if (v146 <= 9 && (v145 < 2 || *v144 != 48))
          {
            v203 = v144 + 1;
            v204 = v145 - 1;
            while (v204)
            {
              if (v146 <= 0x19999999)
              {
                v205 = *v203 - 48;
                if (v205 <= 9)
                {
                  v122 = __CFADD__(v205, 10 * v146);
                  v146 = v205 + 10 * v146;
                  ++v203;
                  --v204;
                  if (!v122)
                    continue;
                }
              }
              goto LABEL_187;
            }
LABEL_382:
            if (v146 != -1)
            {
              v227 = *(JSC::VM **)(v10 + 56);
              while (1)
              {
                v222 = 16 * (*(_DWORD *)v234 & 0xFFFFFFFE);
                v206 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v222 + 0x4C) + 0x70))();
                v208 = v206;
                if (*((_DWORD *)v227 + 20))
                {
                  v211 = JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v69, v207, v71, a5, a6, a7, a8);
                  v73 = (unint64_t)v230;
                  if (((v211 | v208) & 1) != 0)
                  {
                    if (!v211)
                      goto LABEL_128;
                    goto LABEL_121;
                  }
                }
                else
                {
                  v73 = (unint64_t)v230;
                  if ((v206 & 1) != 0)
                    goto LABEL_128;
                }
                if (BYTE2(v247[1]) == 3)
                {
                  if (BYTE4(v247[1]))
                    goto LABEL_121;
                  v209 = *((unsigned __int8 *)v234 + 5);
                  if (v209 == 61)
                    goto LABEL_389;
                }
                else
                {
                  v209 = *((unsigned __int8 *)v234 + 5);
                  if (v209 == 61)
                  {
                    if (BYTE2(v247[1]) == 1)
                      goto LABEL_121;
                    goto LABEL_389;
                  }
                }
                if ((v209 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length(v234, (uint64_t)v69, v73, v71, a5, a6, a7, a8) <= v146)
                {
                  goto LABEL_404;
                }
LABEL_389:
                if ((*(_WORD *)(v222 + 12) & 0x800) == 0 || BYTE2(v247[1]) == 3)
                {
                  v210 = *(_QWORD *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x30);
                  if (!v210)
                    v210 = *((_QWORD *)v234 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v210 = (*(uint64_t (**)(JSC::JSArrayBufferView *, unint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v234, v10, v73);
                  }
                  else
                  {
                    v210 = *(_QWORD *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x30);
                    if (!v210)
                      v210 = *((_QWORD *)v234 + 2);
                  }
                  if (*((_DWORD *)v227 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
                  {
                    goto LABEL_404;
                  }
                }
                if ((v210 & 0xFFFE000000000002) != 0)
                  goto LABEL_404;
                v234 = (JSC::JSArrayBufferView *)v210;
                v102 = 10;
                if (*(unsigned __int8 *)(v210 + 5) <= 0x16u)
                  goto LABEL_130;
              }
            }
          }
        }
      }
      else if ((_DWORD)v145)
      {
        v146 = *(unsigned __int16 *)v144 - 48;
        if (v146 <= 9 && (*(_WORD *)v144 != 48 || v145 <= 1))
        {
          v163 = (unsigned __int16 *)(v144 + 2);
          v164 = v145 - 1;
          while (v164)
          {
            if (v146 <= 0x19999999)
            {
              v165 = *v163 - 48;
              if (v165 <= 9)
              {
                v122 = __CFADD__(v165, 10 * v146);
                v146 = v165 + 10 * v146;
                ++v163;
                --v164;
                if (!v122)
                  continue;
              }
            }
            goto LABEL_187;
          }
          goto LABEL_382;
        }
      }
    }
  }
LABEL_187:
  v235 = *(JSC::JSArrayBufferView **)(v10 + 56);
  while (1)
  {
    v147 = *(_DWORD *)v220 & 0xFFFFFFFE;
    v148 = 16 * v147;
    if ((*(_BYTE *)(v220 + 6) & 8) == 0)
      break;
    v187 = (*(uint64_t (**)(uint64_t, unint64_t, WTF *, WTF::StringImpl **))(16
                                                                                           * *(unsigned int *)(16 * v147 + 0x4C)
                                                                                           + 0x68))(v220, v10, v230, &v242);
    if (*((_DWORD *)v235 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v235, (uint64_t)v69, v186, v71, a5, a6, a7, a8))
    {
      goto LABEL_404;
    }
    v73 = (unint64_t)v230;
    if ((v187 & 1) != 0)
      goto LABEL_128;
    if (BYTE2(v247[1]) == 3)
    {
      if (BYTE4(v247[1]))
        goto LABEL_121;
      v188 = *(unsigned __int8 *)(v220 + 5);
      if (v188 != 61)
      {
LABEL_290:
        if (!v230)
          goto LABEL_194;
        if ((v188 - 50) < 0xFFFFFFF5)
          goto LABEL_194;
        v189 = *((_DWORD *)v230 + 4);
        if ((v189 & 0x20) != 0)
          goto LABEL_194;
        v190 = *((unsigned int *)v230 + 1);
        if (!(_DWORD)v190)
          goto LABEL_194;
        v191 = (unsigned __int8 *)*((_QWORD *)v230 + 1);
        if ((v189 & 4) == 0)
        {
          v192 = *(unsigned __int16 *)v191;
          if ((_DWORD)v190 == 1)
            goto LABEL_296;
          if (v192 == 45)
          {
            v192 = *((unsigned __int16 *)v191 + 1);
            goto LABEL_304;
          }
          if ((v192 - 48) >= 0xA && ((_DWORD)v190 != 8 || v192 != 73))
          {
LABEL_319:
            if ((_DWORD)v190 != 3 || v192 != 78)
              goto LABEL_194;
          }
LABEL_310:
          v217 = v217 & 0xFFFFFF0000000000 | v190 | ((unint64_t)((v189 >> 2) & 1) << 32);
          JSC::jsToNumber(v191, v217);
          v194 = WTF::numberToString(&v253, v193);
          if (WTF::equal((unint64_t)v230, (unint64_t)v194, v195))
            goto LABEL_121;
          goto LABEL_194;
        }
        v192 = *v191;
        if ((_DWORD)v190 == 1)
        {
LABEL_296:
          if ((v192 - 48) < 0xA)
            goto LABEL_121;
          goto LABEL_194;
        }
        if (v192 == 45)
        {
          v192 = v191[1];
LABEL_304:
          if ((v192 - 48) < 0xA)
          {
            if ((_DWORD)v190 == 2)
              goto LABEL_121;
            goto LABEL_310;
          }
          if ((_DWORD)v190 != 9)
            goto LABEL_194;
        }
        else
        {
          if ((v192 - 48) < 0xA)
            goto LABEL_310;
          if ((_DWORD)v190 != 8)
            goto LABEL_319;
        }
        if (v192 != 73)
          goto LABEL_194;
        goto LABEL_310;
      }
    }
    else
    {
      v188 = *(unsigned __int8 *)(v220 + 5);
      if (v188 != 61)
        goto LABEL_290;
      if (BYTE2(v247[1]) == 1)
        goto LABEL_121;
    }
LABEL_194:
    if ((*(_WORD *)(v148 + 12) & 0x800) != 0)
    {
      v151 = *(_DWORD *)v220;
      if (BYTE2(v247[1]) != 3)
      {
        v185 = 16 * (v151 & 0xFFFFFFFE);
        if ((*(_WORD *)(v185 + 12) & 0x800) != 0)
        {
          v152 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v185 + 76) + 0xB0))(v220, v10);
        }
        else
        {
          v152 = *(_QWORD *)(v185 + 48);
          if (!v152)
            v152 = *(_QWORD *)(v220 + 16);
        }
        if (*((_DWORD *)v235 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v235, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
        {
          goto LABEL_404;
        }
        goto LABEL_198;
      }
    }
    else
    {
      v151 = *(_DWORD *)v220;
    }
    v152 = *(_QWORD *)(16 * (v151 & 0xFFFFFFFE) + 0x30);
    if (!v152)
      v152 = *(_QWORD *)(v220 + 16);
LABEL_198:
    if ((v152 & 0xFFFE000000000002) != 0)
      goto LABEL_404;
    v220 = v152;
    v102 = 10;
    if (*(unsigned __int8 *)(v152 + 5) <= 0x16u)
      goto LABEL_130;
  }
  if (!v225
    || (v225 & ~*(_DWORD *)(16 * v147 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v148, v235, v73, (const JSC::PropertyTable *)v71, a5, a6, a7, a8), !v149)|| (v253 = (uint64_t)v230, v150 = JSC::PropertyTable::get(v149, &v253), a6 = v150, (_DWORD)v150 == -1))
  {
    if ((*(_BYTE *)(v220 + 6) & 0x20) != 0)
    {
      v166 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v220, v235, (unint64_t)v230, (uint64_t)&v242);
      v73 = (unint64_t)v230;
      if ((v166 & 1) != 0)
        goto LABEL_128;
    }
    goto LABEL_194;
  }
  a5 = HIDWORD(v150);
  if ((int)v150 <= 63)
  {
    v157 = v220 + 16;
    v158 = v150 << 32;
  }
  else
  {
    v157 = *(_QWORD *)(v220 + 8) - 8;
    v158 = 0x3F00000000 - (v150 << 32);
  }
  v71 = *(_QWORD *)(v157 + (v158 >> 29));
  if ((v71 & 0xFFFE000000000002) != 0)
  {
LABEL_217:
    v242 = (WTF::StringImpl *)v71;
    v246 = v220;
    v244 = __PAIR64__(v150, HIDWORD(v150));
    LOWORD(v247[1]) = 257;
    goto LABEL_218;
  }
  v159 = *(unsigned __int8 *)(v71 + 5);
  if (v159 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v220, (uint64_t)v235, (uint64_t)&v242, v71, SHIDWORD(v150), v150);
    goto LABEL_218;
  }
  if (v159 != 6)
    goto LABEL_217;
  v174 = *(_DWORD *)(v148 + 16) & 3;
  v175 = *(_QWORD *)(v71 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C)))
  {
    v242 = *(WTF::StringImpl **)(v71 + 8);
    v243 = v175;
    LODWORD(v244) = HIDWORD(v150);
    v246 = v220;
    BYTE1(v247[1]) = 3;
    v73 = (unint64_t)v230;
    if (v174 == 2)
      goto LABEL_128;
    goto LABEL_239;
  }
  v177 = *(_QWORD *)(v71 + 24);
  v176 = *(_QWORD *)(v71 + 32);
  v242 = *(WTF::StringImpl **)(v71 + 8);
  v243 = v175;
  LODWORD(v244) = HIDWORD(v150);
  v246 = v220;
  BYTE1(v247[1]) = 3;
  if (v174 != 2)
    LOBYTE(v247[1]) = 1;
  BYTE3(v247[1]) = 1;
  v250 = v177;
  v251 = v176;
LABEL_218:
  v73 = (unint64_t)v230;
LABEL_128:
  if (BYTE1(v247[1]) == 1)
  {
    v102 = (uint64_t)v242;
  }
  else if (BYTE1(v247[1]) == 2)
  {
    v102 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v242, (JSC::JSGlobalObject *)v10, v73, v71, a5, a6, a7, a8);
  }
  else
  {
    v102 = JSC::PropertySlot::customGetter((uint64_t)&v242, *(JSC::VM **)(v10 + 56), (WTF::StringImpl *)v73);
  }
LABEL_130:
  if (v249)
  {
    v106 = *(_DWORD *)(v248 + 4);
    if (!v106)
    {
      __break(0xC471u);
      JUMPOUT(0x198901964);
    }
    *(_DWORD *)(v248 + 4) = v106 - 1;
  }
  v241 = v102;
  if (*(_DWORD *)(v36 + 80))
  {
    if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)v69, v73, v71, a5, a6, a7, a8))
    {
      v102 = v241;
      goto LABEL_134;
    }
    goto LABEL_57;
  }
LABEL_134:
  v72 = v102;
  if (v102 != 2)
    goto LABEL_135;
LABEL_38:
  if (HIDWORD(v39))
  {
    v52 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v52 = 0x3A00000002;
    *(_QWORD *)(v52 + 8) = "Array length must be a positive integer of safe magnitude.";
    *(_DWORD *)(v52 + 16) = 4;
    v242 = (WTF::StringImpl *)v52;
    v53 = *(_QWORD *)(v10 + 128);
    v54 = *(JSC::Heap ***)(v10 + 56);
    if ((v53 & 1) != 0)
    {
      v153 = *(uint64_t (**)(uint64_t *))(v53 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v10 & 8) != 0)
        v154 = (uint64_t *)(v10 - 16);
      else
        v154 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      v253 = *v154;
      v254 = v10;
      v255 = (_QWORD *)(v10 + 128);
      v53 = v153(&v253);
    }
    v55 = JSC::ErrorInstance::create(v54, v53, &v242, 0, 0, 0, 2, 1);
    JSC::VM::throwException(v238, (JSC::JSGlobalObject *)v10, v55, v56, v57, v58, v59, v60);
    v68 = v242;
    v242 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    return &xmmword_1ECF4C7C0;
  }
  else
  {
    v45 = JSC::constructEmptyArray(v10, v35, (unint64_t)v32, 0, a5, a6, a7, a8, (__n128)a9);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v10, &v238, "CommonSlowPaths", v17);
    v46 = v238;
    if (*((_QWORD *)v238 + 2))
      return &xmmword_1ECF4C7C0;
    if (HIBYTE(word_1ECF4C620) && (JSC::doExceptionFuzzing(v10, &v238, "CommonSlowPaths", v17), *((_QWORD *)v46 + 2)))
    {
      return &xmmword_1ECF4C7C0;
    }
    else
    {
      *(_QWORD *)(a1 + 8 * v237) = v45;
      *(_QWORD *)(v9[17] - 16 * v25 - 16) = v45;
    }
  }
  return (__int128 *)v17;
}

__int128 *slow_path_new_array_buffer(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  JSC::VM *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t SlowCase;
  int v48;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  JSC::VM *v74;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 72);
  *(_QWORD *)(v12 + 40) = a1;
  v74 = (JSC::VM *)v12;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 80);
  v15 = *(_QWORD *)v14;
  v16 = *(unsigned int *)(v14 + 12) + *(_QWORD *)v14;
  if (v15 > (unint64_t)a2 || v16 <= (unint64_t)a2)
    goto LABEL_95;
  v18 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v15) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v55 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v55 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v55 + 1073741760;
    v23 = *((__int16 *)a2 + 2);
    v24 = *((unsigned __int16 *)a2 + 4);
    if ((int)v23 <= 63)
      goto LABEL_12;
LABEL_61:
    v23 = (v23 + v21);
    goto LABEL_62;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    v24 = a2[4];
    if ((int)v23 <= 15)
    {
LABEL_12:
      v25 = v23 << 32;
      v26 = v24;
LABEL_13:
      v27 = (unint64_t *)(a1 + 8 * (int)v23);
      goto LABEL_14;
    }
    goto LABEL_61;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v23 = *(unsigned int *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 14);
LABEL_62:
  v25 = v23 << 32;
  v26 = v24;
  if ((int)v23 < 0x40000000)
    goto LABEL_13;
  v56 = (v23 - 0x40000000);
  if (v56 >= *(unsigned int *)(v13 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1989028B0);
  }
  v27 = (unint64_t *)(*(_QWORD *)(v13 + 160) + 8 * v56);
LABEL_14:
  v28 = *v27;
  v29 = *(_QWORD *)(v10 + 136);
  v30 = *(unsigned __int16 *)(v29 + 34);
  if (!*(_WORD *)(v29 + 34))
    v30 = *(_DWORD *)(v29 + 164);
  v31 = (v29 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)(v31 + 8 * v26);
  v33 = v32 & 0xFFFFFFFFFFFFLL;
  if ((v32 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v34 = *(_BYTE *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
    v35 = HIBYTE(v32);
    if ((v34 & 0xF) != HIBYTE(v32))
    {
      *(_QWORD *)(v31 + 8 * v26) = v32 & 0xFFFF000000000000;
      if (byte_1ECF4C722)
      {
        v50 = HIWORD(v32);
        v51 = HIBYTE(v32) & 0xF;
        if (v51 <= (v34 & 0xFu))
          LODWORD(v51) = v34 & 0xF;
        if (v51 >= 0xA)
          v52 = 9;
        else
          v52 = v51;
        v53 = v52 | 0x10;
        if ((v35 & 0x10) != 0)
          LODWORD(v51) = v53;
        if ((v34 & 0xE) != 0)
          v54 = *(_DWORD *)(*(_QWORD *)(v33 + 8) - 4);
        else
          v54 = 0;
        if (v50 > v54)
          v54 = v50;
        if (v54 >= 0x19)
          v54 = 25;
        v32 = (unint64_t)(v54 | ((_DWORD)v51 << 8)) << 48;
        *(_QWORD *)(v31 + 8 * v26) = v32;
      }
      else
      {
        v32 &= 0xFFFF000000000000;
      }
    }
  }
  v36 = (JSC::VM *)HIBYTE(v32);
  v37 = (v32 >> 57) & 7;
  if ((v36 & 0x10) != 0)
    LODWORD(v37) = ((v36 & 0xEu) + 10) >> 1;
  v38 = *(_DWORD *)(v11 + 4 * v37 + 892);
  if (v38)
    v39 = 16 * (v38 & 0xFFFFFFFE);
  else
    v39 = 0;
  v40 = *(unsigned __int8 *)(v28 + 4);
  if ((v40 & 0x1F) == (_DWORD)v36)
  {
    v41 = v28;
  }
  else
  {
    v71 = v25;
    v72 = v11;
    v57 = JSC::JSImmutableButterfly::create((JSC::JSImmutableButterfly *)v12, v36, *(_DWORD *)(v28 + 8), a4, a5, a6, a7, a8);
    v58 = v71;
    v41 = v57;
    if (*(_DWORD *)(v28 + 8))
    {
      v59 = 0;
      v60 = v28 + 16;
      v61 = (unint64_t *)(v57 + 16);
      do
      {
        if ((*(_BYTE *)(v28 + 4) & 0xE) == 6)
          v62 = *(_QWORD *)(v60 + 8 * v59) + 0x2000000000000;
        else
          v62 = *(_QWORD *)(v60 + 8 * v59);
        if ((*(_BYTE *)(v41 + 4) & 0xE) == 6)
        {
          a9.n128_f64[0] = (double)(int)v62;
          if (v62 <= 0xFFFDFFFFFFFFFFFFLL)
            a9.n128_u64[0] = v62 - 0x2000000000000;
          *v61 = a9.n128_u64[0];
        }
        else
        {
          *v61 = v62;
          if (v62)
            v63 = (v62 & 0xFFFE000000000002) == 0;
          else
            v63 = 0;
          if (v63 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v41 + 7))
          {
            v69 = v59;
            v70 = v41;
            v68 = v60;
            JSC::Heap::writeBarrierSlowPath(v12 + 192, v41);
            v60 = v68;
            v59 = v69;
            v41 = v70;
            v58 = v71;
          }
        }
        ++v59;
        ++v61;
      }
      while (v59 < *(unsigned int *)(v28 + 8));
    }
    __dmb(0xAu);
    v64 = (v58 - 0x4000000000000000) >> 32;
    if (v64 >= *(unsigned int *)(v10 + 172))
    {
LABEL_95:
      __break(0xC471u);
      JUMPOUT(0x19890265CLL);
    }
    *(_QWORD *)(*(_QWORD *)(v10 + 160) + 8 * v64) = v41;
    v11 = v72;
    if (v41
      && (v41 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
    {
      v67 = v41;
      JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
      v11 = v72;
      v41 = v67;
    }
    __dmb(0xAu);
    v40 = *(unsigned __int8 *)(v41 + 4);
  }
  v42 = (uint64_t *)(v12 + 37584);
  if ((v40 & 0x10) != 0)
    v43 = ((v40 & 0xE) + 10) >> 1;
  else
    v43 = (v40 >> 1) & 7;
  v44 = *(_DWORD *)(*(_QWORD *)(v39 + 40) + 4 * v43 + 852);
  if (v44)
    v45 = 16 * (v44 & 0xFFFFFFFE);
  else
    v45 = 0;
  v46 = v41 + 16;
  SlowCase = *v42;
  if ((unint64_t)*v42 < *(_QWORD *)(v12 + 37592))
    goto LABEL_32;
  SlowCase = *(_QWORD *)(v12 + 37600);
  if ((SlowCase & 1) == 0)
  {
    v65 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 37608);
    *(_QWORD *)(v12 + 37592) = SlowCase + HIDWORD(v65);
    *(_QWORD *)(v12 + 37600) = SlowCase + (int)v65;
LABEL_32:
    *v42 = SlowCase + 16;
    goto LABEL_33;
  }
  v73 = v11;
  JSC::sanitizeStackForVM((JSC *)v12, v36, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 37560, v12 + 192, 16, 0, 0);
  v11 = v73;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v48 = *(_DWORD *)(v45 + 8);
  *(_DWORD *)SlowCase = v45 >> 4;
  *(_DWORD *)(SlowCase + 4) = v48;
  *(_QWORD *)(SlowCase + 8) = v46;
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  if (v45 != v39)
  {
    v66 = v11;
    JSC::JSObject::switchToSlowPutArrayStorage((unsigned __int8 *)SlowCase, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
    v11 = v66;
  }
  *(_QWORD *)(v31 + 8 * v26) = SlowCase | ((unint64_t)*(unsigned __int16 *)(v31 + 8 * v26 + 6) << 48);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v11, &v74, "CommonSlowPaths", v18);
  if (*(_QWORD *)(v12 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = SlowCase;
  return (__int128 *)v18;
}

__int128 *slow_path_spread(uint64_t a1, unsigned __int8 *a2, JSC::JSString *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t ***v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  JSC::ClonedArguments *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::VM *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  BOOL v89;
  JSC::ScopedArguments *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  unsigned int v100;
  double v101;
  double v102;
  double v103;
  uint64_t Slow;
  double v105;
  uint64_t SlowCase;
  unint64_t OutOfMemoryError;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  JSC::Exception *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t (*v116)(JSC::VM **);
  JSC::VM **v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t DirectIndex;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  double v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  double v143;
  int v144;
  unint64_t v145;
  JSC::DirectArguments *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::JSGlobalObject *v155;
  uint64_t ***v156;
  int v157;
  uint64_t *v158;
  int v159;
  JSC::VM *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  JSC::VM *v172[2];

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::JSGlobalObject **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v172[0] = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_225:
    __break(0xC471u);
    JUMPOUT(0x1989030D8);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    if (v22 <= 63)
      goto LABEL_11;
LABEL_205:
    v144 = v22 + v21;
    goto LABEL_206;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    if (v22 <= 15)
    {
LABEL_11:
      v23 = v20;
LABEL_12:
      v24 = (uint64_t *)(a1 + 8 * v22);
      goto LABEL_13;
    }
    goto LABEL_205;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v144 = *(_DWORD *)(a2 + 6);
LABEL_206:
  v22 = v144;
  v23 = v20;
  if (v144 < 0x40000000)
    goto LABEL_12;
  v145 = (v144 - 0x40000000);
  if (v145 >= *(unsigned int *)(v12 + 172))
    goto LABEL_225;
  v24 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v145);
LABEL_13:
  v25 = *v24;
  v157 = v23;
  if ((*v24 & 0xFFFE000000000002) != 0)
    goto LABEL_62;
  v26 = *(unsigned __int8 *)(v25 + 5);
  if (v26 != 36)
  {
    v45 = 0;
    if (*(unsigned __int8 *)(v25 + 5) <= 0x22u)
    {
      switch(v26)
      {
        case 2:
          v99 = *(_QWORD *)(v10 + 2240);
          if ((v99 & 1) != 0)
            v100 = (v99 >> 1) & 3;
          else
            v100 = *(unsigned __int8 *)(v99 + 4);
          if (v100 == 2)
            goto LABEL_212;
          v57 = JSC::JSImmutableButterfly::createFromString((JSC::JSImmutableButterfly *)v10, (JSC::JSGlobalObject *)v25, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          break;
        case 33:
          if (!JSC::DirectArguments::isIteratorProtocolFastAndNonObservable((JSC::DirectArguments *)v25))
          {
LABEL_212:
            v45 = 0;
            goto LABEL_50;
          }
          v57 = JSC::JSImmutableButterfly::createFromDirectArguments((JSC::JSImmutableButterfly *)v10, (JSC::JSGlobalObject *)v25, v146, v147, v148, v149, v150, v151);
          break;
        case 34:
          if (!JSC::ScopedArguments::isIteratorProtocolFastAndNonObservable((JSC::ScopedArguments *)v25))
            goto LABEL_212;
          v57 = JSC::JSImmutableButterfly::createFromScopedArguments((JSC::JSImmutableButterfly *)v10, (JSC::JSGlobalObject *)v25, v90, v91, v92, v93, v94, v95);
          break;
        default:
          goto LABEL_50;
      }
    }
    else
    {
      if (v26 != 35)
        goto LABEL_50;
      if (!JSC::ClonedArguments::isIteratorProtocolFastAndNonObservable((JSC::ClonedArguments *)v25))
        goto LABEL_212;
      v57 = JSC::JSImmutableButterfly::createFromClonedArguments((JSC::JSImmutableButterfly *)v10, (JSC::JSGlobalObject *)v25, v50, v51, v52, v53, v54, v55, v56);
    }
    v45 = v57;
    goto LABEL_50;
  }
  v27 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28);
  v28 = *(_QWORD *)(v27 + 2216);
  if ((v28 & 1) != 0)
    v29 = (v28 >> 1) & 3;
  else
    v29 = *(unsigned __int8 *)(v28 + 4);
  if (v29 == 2 || *(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
    goto LABEL_212;
  v30 = *(_QWORD *)(v27 + 2304);
  v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
  if (v31 == 2)
    goto LABEL_212;
  v155 = v11;
  v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 8);
  v33 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  v34 = *(_DWORD *)(v27 + 4 * v33 + 852);
  if (v34)
    v35 = 16 * (v34 & 0xFFFFFFFE);
  else
    v35 = 0;
  if (v35 != 16 * (*(_DWORD *)v25 & 0xFFFFFFFE))
  {
    if ((v32 & 0x20) != 0)
      goto LABEL_189;
    v131 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x30);
    if (!v131)
      v131 = *(_QWORD *)(v25 + 16);
    if (v131 != *(_QWORD *)(v27 + 672)
      || JSC::JSObject::getDirectOffset((_DWORD *)v25, *(JSC::VM **)(v27 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 41952) + 2712), a4, a5, a6, a7, a8) != -1)
    {
LABEL_189:
      v45 = 0;
      goto LABEL_50;
    }
  }
  v36 = (uint64_t ***)v10;
  v37 = *(_QWORD *)(v10 + 56);
  v38 = *(_BYTE *)(v25 + 4) & 0xE;
  if ((*(_BYTE *)(v25 + 4) & 0xE) != 0)
  {
    LODWORD(v39) = *(_DWORD *)(*(_QWORD *)(v25 + 8) - 8);
    if (v39 > 0x10000000)
      goto LABEL_149;
  }
  else
  {
    LODWORD(v39) = 0;
  }
  v40 = *(_QWORD *)(v37 + 41656);
  v41 = (8 * v39);
  v42 = (v41 + 31) & 0x1FFFFFFF0;
  if (v42 > 0x1F60 || (v43 = *(_QWORD *)(v37 + (((unint64_t)(v41 + 31) >> 1) & 0xFFFFFFF8) + 10880)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v37 + 10792, (JSC *)v37, v42, 0, a5, a6, a7, a8);
LABEL_138:
    v45 = Slow;
LABEL_34:
    if (v45)
      goto LABEL_35;
LABEL_149:
    v10 = (unint64_t)v36;
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v36, (JSC::JSGlobalObject *)a2);
    v113 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v113 = (JSC::Exception *)JSC::Exception::create(v37, (JSC::VM *)OutOfMemoryError, 0, v108, v109, v110, v111, v112);
    }
    v11 = v155;
    JSC::VM::throwException((JSC::VM *)v37, (JSC::JSGlobalObject *)v10, v113);
    v45 = 0;
    v23 = v157;
    goto LABEL_50;
  }
  v44 = *(unsigned int *)(v43 + 60);
  v45 = *(_QWORD *)(v43 + 24);
  if (v45 < *(_QWORD *)(v43 + 32))
  {
    *(_QWORD *)(v43 + 24) = v45 + v44;
    goto LABEL_34;
  }
  v45 = *(_QWORD *)(v43 + 40);
  if ((v45 & 1) != 0)
  {
    v154 = *(unsigned int *)(v43 + 60);
    v152 = *(_QWORD *)(v37 + (((unint64_t)(v41 + 31) >> 1) & 0xFFFFFFF8) + 10880);
    JSC::sanitizeStackForVM((JSC *)v37, (JSC::VM *)a2, v42, (uint64_t)a4, a5, a6, a7, a8);
    Slow = JSC::LocalAllocator::allocateSlowCase(v152, v37 + 192, v154, 0, 1);
    goto LABEL_138;
  }
  v114 = *(_QWORD *)(v45 + 8) ^ *(_QWORD *)(v43 + 48);
  *(_QWORD *)(v43 + 32) = v45 + HIDWORD(v114);
  *(_QWORD *)(v43 + 40) = v45 + (int)v114;
  *(_QWORD *)(v43 + 24) = v45 + v44;
LABEL_35:
  *(_DWORD *)v45 = 0;
  v46 = *(_DWORD *)(v40 + 8);
  *(_DWORD *)v45 = v40 >> 4;
  *(_DWORD *)(v45 + 4) = v46;
  *(_DWORD *)(v45 + 8) = v39;
  *(_DWORD *)(v45 + 12) = v39;
  if ((_DWORD)v39 && (*(_BYTE *)(v45 + 4) & 0xE) == 8)
    bzero((void *)(v45 + 16), (8 * v39));
  if (*(_BYTE *)(v37 + 755))
    __dmb(0xAu);
  if ((_DWORD)v39)
  {
    if (v38 == 4 || v38 == 8)
    {
      v47 = 0;
      v39 = v39;
      do
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + v47);
        if (!v48)
          v48 = 10;
        if ((*(_BYTE *)(v45 + 4) & 0xE) == 6)
        {
          v101 = (double)(int)v48;
          if (v48 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v101 = v48 - 0x2000000000000;
          *(double *)(v45 + v47 + 16) = v101;
        }
        else
        {
          *(_QWORD *)(v45 + v47 + 16) = v48;
          if ((v48 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v37 + 760) >= *(unsigned __int8 *)(v45 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v37 + 192, v45);
          }
        }
        v47 += 8;
        --v39;
      }
      while (v39);
    }
    else if (v38 == 6)
    {
      v87 = 0;
      do
      {
        v88 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + v87) + 0x2000000000000;
        if ((*(_BYTE *)(v45 + 4) & 0xE) == 6)
        {
          v102 = (double)*(int *)(*(_QWORD *)(v25 + 8) + v87);
          if (v88 <= 0xFFFDFFFFFFFFFFFFLL)
            v102 = *(double *)(*(_QWORD *)(v25 + 8) + v87);
          *(double *)(v45 + v87 + 16) = v102;
        }
        else
        {
          *(_QWORD *)(v45 + v87 + 16) = v88;
          if (v88)
            v89 = (v88 & 0xFFFE000000000002) == 0;
          else
            v89 = 0;
          if (v89 && *(_DWORD *)(v37 + 760) >= *(unsigned __int8 *)(v45 + 7))
            JSC::Heap::writeBarrierSlowPath(v37 + 192, v45);
        }
        v87 += 8;
      }
      while (8 * v39 != v87);
    }
    else
    {
      v119 = 0;
      v120 = 16;
      while (1)
      {
        DirectIndex = JSC::JSObject::getDirectIndex((JSC::JSObject *)v25, v36, v119);
        v129 = DirectIndex ? DirectIndex : 10;
        if (*(_DWORD *)(v37 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37, v122, v123, v124, v125, v126, v127, v128))
        {
          break;
        }
        if ((*(_BYTE *)(v45 + 4) & 0xE) == 6)
        {
          v130 = (double)(int)v129;
          if (v129 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v130 = v129 - 0x2000000000000;
          *(double *)(v45 + v120) = v130;
        }
        else
        {
          *(_QWORD *)(v45 + v120) = v129;
          if ((v129 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v37 + 760) >= *(unsigned __int8 *)(v45 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v37 + 192, v45);
          }
        }
        ++v119;
        v120 += 8;
        if (v39 == v119)
          goto LABEL_49;
      }
      v45 = 0;
    }
  }
LABEL_49:
  v10 = (unint64_t)v36;
  v11 = v155;
  v23 = v157;
LABEL_50:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, v172, "CommonSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  if (!v45)
  {
LABEL_62:
    v58 = *(_QWORD *)(v10 + 1960);
    if (*(_DWORD *)v58 <= 0x40u)
    {
      __break(0xC471u);
      JUMPOUT(0x198903234);
    }
    v59 = *(_QWORD *)(v58 + 520);
    if ((v59 & 1) != 0)
    {
      v115 = (uint64_t *)(v58 + 520);
      v116 = *(uint64_t (**)(JSC::VM **))(v59 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v10 & 8) != 0)
        v117 = (JSC::VM **)(v10 - 16);
      else
        v117 = (JSC::VM **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
      v160 = *v117;
      v161 = v10;
      v162 = v115;
      v59 = v116(&v160);
    }
    if (*(_BYTE *)(v59 + 5) == 26)
    {
      v60 = *(_QWORD *)(v59 + 24);
      if ((v60 & 1) != 0)
        v60 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v60 + 5) == 8)
      {
        LOBYTE(v169) = 1;
        v170 = *(_QWORD *)(v60 + 40);
        LOBYTE(v171) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                                  + 0x4C));
      }
      else
      {
        LOBYTE(v169) = 2;
        v61 = *(_QWORD *)(v59 + 16);
        v170 = v60;
        v171 = v61;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(&v169, v59);
    }
    LOBYTE(v160) = 0;
    v162 = &v164;
    v163 = 0;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0;
    v164 = v25;
    v161 = 0x800000001;
    v158 = &v164;
    v159 = 1;
    v69 = JSC::call(v10, v59, &v169, 2, &v158);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v10, v172, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v161, v62, v63, v64, v65, v66, v67, v68);
      return &xmmword_1ECF4C7C0;
    }
    v156 = (uint64_t ***)v10;
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v161, v62, v63, v64, v65, v66, v67, v68);
    v160 = v11;
    v76 = *(_BYTE *)(v69 + 4) & 0xE;
    if ((*(_BYTE *)(v69 + 4) & 0xE) != 0)
    {
      LODWORD(v77) = *(_DWORD *)(*(_QWORD *)(v69 + 8) - 8);
      if (v77 > 0x10000000)
        goto LABEL_160;
    }
    else
    {
      LODWORD(v77) = 0;
    }
    v78 = *((_QWORD *)v11 + 5207);
    v79 = (8 * v77);
    v80 = (v79 + 31) & 0x1FFFFFFF0;
    if (v80 <= 0x1F60
      && (v81 = *(_QWORD *)((char *)v11 + (((unint64_t)(v79 + 31) >> 1) & 0xFFFFFFF8) + 10880)) != 0)
    {
      v82 = *(unsigned int *)(v81 + 60);
      v83 = *(_QWORD *)(v81 + 24);
      if (v83 < *(_QWORD *)(v81 + 32))
      {
        *(_QWORD *)(v81 + 24) = v83 + v82;
        goto LABEL_78;
      }
      v83 = *(_QWORD *)(v81 + 40);
      if ((v83 & 1) == 0)
      {
        v118 = *(_QWORD *)(v83 + 8) ^ *(_QWORD *)(v81 + 48);
        *(_QWORD *)(v81 + 32) = v83 + HIDWORD(v118);
        *(_QWORD *)(v81 + 40) = v83 + (int)v118;
        *(_QWORD *)(v81 + 24) = v83 + v82;
LABEL_79:
        *(_DWORD *)v83 = 0;
        v84 = *(_DWORD *)(v78 + 8);
        *(_DWORD *)v83 = v78 >> 4;
        *(_DWORD *)(v83 + 4) = v84;
        *(_DWORD *)(v83 + 8) = v77;
        *(_DWORD *)(v83 + 12) = v77;
        if ((_DWORD)v77 && (*(_BYTE *)(v83 + 4) & 0xE) == 8)
          bzero((void *)(v83 + 16), (8 * v77));
        if (*((_BYTE *)v11 + 755))
          __dmb(0xAu);
        if (!(_DWORD)v77)
          goto LABEL_93;
        if (v76 == 4 || v76 == 8)
        {
          v85 = 0;
          v77 = v77;
          do
          {
            v86 = *(_QWORD *)(*(_QWORD *)(v69 + 8) + v85);
            if (!v86)
              v86 = 10;
            if ((*(_BYTE *)(v83 + 4) & 0xE) == 6)
            {
              v103 = (double)(int)v86;
              if (v86 <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v103 = v86 - 0x2000000000000;
              *(double *)(v83 + v85 + 16) = v103;
            }
            else
            {
              *(_QWORD *)(v83 + v85 + 16) = v86;
              if ((v86 & 0xFFFE000000000002) == 0
                && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v83 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v83);
              }
            }
            v85 += 8;
            --v77;
          }
          while (v77);
          goto LABEL_93;
        }
        if (v76 == 6)
        {
          v96 = 0;
          do
          {
            v97 = *(_QWORD *)(*(_QWORD *)(v69 + 8) + v96) + 0x2000000000000;
            if ((*(_BYTE *)(v83 + 4) & 0xE) == 6)
            {
              v105 = (double)*(int *)(*(_QWORD *)(v69 + 8) + v96);
              if (v97 <= 0xFFFDFFFFFFFFFFFFLL)
                v105 = *(double *)(*(_QWORD *)(v69 + 8) + v96);
              *(double *)(v83 + v96 + 16) = v105;
            }
            else
            {
              *(_QWORD *)(v83 + v96 + 16) = v97;
              if (v97)
                v98 = (v97 & 0xFFFE000000000002) == 0;
              else
                v98 = 0;
              if (v98 && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v83 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v83);
            }
            v96 += 8;
          }
          while (8 * v77 != v96);
          goto LABEL_93;
        }
        v132 = 0;
        v133 = 16;
        while (1)
        {
          v134 = JSC::JSObject::getDirectIndex((JSC::JSObject *)v69, v156, v132);
          v142 = v134 ? v134 : 10;
          if (*((_DWORD *)v160 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v160, v135, v136, v137, v138, v139, v140, v141))
          {
            break;
          }
          if ((*(_BYTE *)(v83 + 4) & 0xE) == 6)
          {
            v143 = (double)(int)v142;
            if (v142 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v143 = v142 - 0x2000000000000;
            *(double *)(v83 + v133) = v143;
          }
          else
          {
            *(_QWORD *)(v83 + v133) = v142;
            if ((v142 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(v83 + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, v83);
            }
          }
          ++v132;
          v133 += 8;
          if (v77 == v132)
            goto LABEL_93;
        }
LABEL_161:
        v83 = 0;
LABEL_93:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v156, v172, "CommonSlowPaths", v17);
        if (*((_QWORD *)v172[0] + 2))
          return &xmmword_1ECF4C7C0;
        *(_QWORD *)(a1 + 8 * v157) = v83;
        return (__int128 *)v17;
      }
      v153 = *(unsigned int *)(v81 + 60);
      JSC::sanitizeStackForVM(v11, v70, v80, v71, v72, v73, v74, v75);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v81, (char *)v11 + 192, v153, 0, 1);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v11 + 10792, v11, v80, 0, v72, v73, v74, v75);
    }
    v83 = SlowCase;
LABEL_78:
    if (v83)
      goto LABEL_79;
LABEL_160:
    JSC::throwOutOfMemoryError(v156, &v160);
    goto LABEL_161;
  }
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing(v10, v172, "CommonSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v23) = v45;
  return (__int128 *)v17;
}

uint64_t JSC::checkSyntax(JSC *this, JSC::JSGlobalObject *a2, const SourceCode *a3, JSC::JSValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  SourceProvider *var0;
  WTF::StringImpl *v25;
  uint64_t result;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  SourceCode v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  __int16 v45;
  unsigned int *v46;
  unint64_t v47;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v46, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v13 = *((_QWORD *)v12 + 5239);
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS(0);
  if (v13 == *(_QWORD *)(v14 + 56))
  {
    LODWORD(v36) = 0x100000;
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
    v40 = -1;
    v41 = -1;
    v42 = -1;
    v43 = 0;
    v44 = -1;
    v45 = 0;
    JSC::parseRootNode<JSC::ProgramNode>((uint64_t)v12, (uint64_t)a2, 0, 0, 0, 0, 12, (uint64_t)&v36, 0, 0, 0);
    v22 = v47;
    v47 = 0;
    if (v22)
    {
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v47, v22, v16, v17, v18, v19, v20, v21);
    }
    else if (a3)
    {
      v23 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        ++*(_DWORD *)(v23 + 8);
      v35.var0.var0 = (SourceProvider *)v23;
      *(_OWORD *)&v35.var1 = *(_OWORD *)((char *)a2 + 8);
      a3->var0.var0 = (SourceProvider *)JSC::ParserError::toErrorObject(&v36, this, &v35, 0xFFFFFFFFLL, v18, v19, v20, v21);
      var0 = v35.var0.var0;
      v35.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 2) == 1)
          (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
        else
          --*((_DWORD *)var0 + 2);
      }
    }
    v25 = v43;
    v43 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v46, v15, v16, v17, v18, v19, v20, v21);
    return v22 != 0;
  }
  else
  {
    result = 56;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::checkSyntax(JSC *this, JSC::VM *a2, const SourceCode *a3, JSC::ParserError *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  unsigned int *v23;
  unint64_t v24;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v23, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v12 = *((_QWORD *)this + 5239);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(0);
  if (v12 == *(_QWORD *)(v13 + 56))
  {
    JSC::parseRootNode<JSC::ProgramNode>((uint64_t)this, (uint64_t)a2, 0, 0, 0, 0, 12, (uint64_t)a3, 0, 0, 0);
    v21 = v24;
    v24 = 0;
    if (v21)
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v24, v21, v15, v16, v17, v18, v19, v20);
    JSC::JSLockHolder::~JSLockHolder(&v23, v14, v15, v16, v17, v18, v19, v20);
    return v21 != 0;
  }
  else
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

BOOL JSC::checkModuleSyntax(unint64_t this, JSC::JSGlobalObject *a2, const SourceCode *a3, JSC::ParserError *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  JSC::ModuleProgramNode *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  const JSC::VariableEnvironment *v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::AtomStringImpl *v45;
  _BOOL8 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl **v48;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD *);
  _QWORD *v94;
  unsigned __int16 v95;
  WTF::StringImpl *v96;
  _QWORD v97[2];
  WTF::StringImpl **v98;
  char v99;
  WTF::StringImpl *v100;
  JSC::ModuleProgramNode *v101;
  unsigned int *v102;
  _QWORD v103[2];
  char *v104;

  v12 = *(JSC::VM **)(this + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v102, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v13 = *((_QWORD *)v12 + 5239);
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS(0);
  if (v13 != *(_QWORD *)(v14 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x198903B84);
  }
  JSC::parseRootNode<JSC::ModuleProgramNode>((uint64_t)v12, (uint64_t)a2, 0, 0, 1, 1, 13, (uint64_t)a3, 0, 0, 0);
  if (v101)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1000000002;
    *(_QWORD *)(v22 + 8) = "EntryPointModule";
    *(_DWORD *)(v22 + 16) = 4;
    v30 = WTF::fastCompactMalloc((WTF *)0x30);
    v31 = *(_QWORD *)(v22 + 8);
    v32 = *(_DWORD *)(v22 + 4);
    *(_DWORD *)v22 += 2;
    *(_DWORD *)v30 = 2;
    *(_DWORD *)(v30 + 4) = v32;
    *(_QWORD *)(v30 + 8) = v31;
    *(_DWORD *)(v30 + 16) = 38;
    *(_QWORD *)(v30 + 24) = v22;
    v33 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
    *(_QWORD *)(v30 + 32) = v33;
    WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v33;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
    *(_DWORD *)v30 += 2;
    v34 = (const JSC::VariableEnvironment *)*((unsigned __int16 *)v101 + 82);
    v35 = *(JSC::JSGlobalObject **)(this + 56);
    v96 = (WTF::StringImpl *)v30;
    v97[0] = v35;
    v36 = *(_QWORD *)(this + 1096);
    if ((v36 & 1) != 0)
    {
      v93 = *(uint64_t (**)(_QWORD *))(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v94 = (_QWORD *)(this - 16);
      else
        v94 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v103[0] = *v94;
      v103[1] = this;
      v104 = (char *)(this + 1096);
      v36 = v93(v103);
    }
    v97[1] = JSC::JSModuleRecord::create((JSC::JSModuleRecord *)this, v35, v36, (JSC::Structure *)&v96, a2, (const SourceCode *)v101 + 8, (JSC::ModuleProgramNode *)((char *)v101 + 112), v34, v95);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v44 = v96;
    v96 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    JSC::ModuleAnalyzer::analyze((JSC::ModuleAnalyzer *)v97, v101, v38, v39, v40, v41, v42, v43, (uint64_t)v103);
    v46 = (_DWORD)v104 == 0;
    if ((_DWORD)v104 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E3598918[v104])(&v96, v103);
    v47 = v100;
    v100 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v45, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    v48 = v98;
    if (v98)
    {
      v50 = *((unsigned int *)v98 - 1);
      if ((_DWORD)v50)
      {
        v51 = v98;
        do
        {
          v52 = *v51;
          if (*v51 != (WTF::StringImpl *)-1)
          {
            *v51 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
              {
                WTF::StringImpl::~StringImpl(v52, v45, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
              }
              else
              {
                *(_DWORD *)v52 -= 2;
              }
            }
          }
          ++v51;
          --v50;
        }
        while (v50);
      }
      WTF::fastFree((unint64_t)(v48 - 2), v45, v16, v17, v18, v19, v20, v21);
    }
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v30, v45, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
    v15 = v101;
    v101 = 0;
    if (v15)
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v101, (unint64_t)v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    v46 = 0;
  }
  JSC::JSLockHolder::~JSLockHolder(&v102, v15, v16, v17, v18, v19, v20, v21);
  return v46;
}

void JSC::generateProgramBytecode(JSC *this@<X0>, const SourceCode *a2@<X1>, const SourceCode *a3@<X2>, JSC::BytecodeCacheError *a4@<X4>, uint64_t a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  int v11;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WTF::AtomStringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  WTF::StringImpl *v59;
  __int128 v60;
  WTF::StringImpl *v61;
  __int128 v62;
  WTF::StringImpl *v63;
  __int128 v64;
  SourceProvider *var0;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _QWORD *v138;
  int v139;
  _BYTE v140[48];
  __int128 v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  __int16 v145;
  unsigned int *v146;
  WTF::StringImpl *v147[2];
  WTF::StringImpl *v148[2];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  int v153;
  __int16 v154;
  __int16 v155;
  char v156;
  uint64_t v157;

  v11 = (int)a3;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v146, this, (uint64_t)a3, a5, (uint64_t)a4, a6, a7, a8, a10);
  v15 = *((_QWORD *)this + 5239);
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(0);
  if (v15 != *(_QWORD *)(v16 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1989041D4);
  }
  *(_DWORD *)v140 = 0x100000;
  memset(&v140[8], 0, 40);
  *(_QWORD *)&v141 = -1;
  *((_QWORD *)&v141 + 1) = -1;
  v142 = -1;
  v143 = 0;
  v144 = -1;
  v145 = 0;
  v147[0] = 0;
  JSC::parse<JSC::ProgramNode>((uint64_t)&v157, (uint64_t)this, (uint64_t)a2, (uint64_t)v147, 0, 0, (uint64_t)v140, 0, 0, 0);
  v24 = v147[0];
  v147[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (!v157)
    goto LABEL_45;
  v25 = *(_DWORD *)(v157 + 236);
  v26 = *(_DWORD *)(v157 + 28) - *(_DWORD *)(v157 + 8);
  v155 = 3104;
  v156 &= 0x80u;
  v27 = JSC::UnlinkedProgramCodeBlock::create((uint64_t)this, (JSC::VM *)&v155, 0, v19, v20, v21, v22, v23);
  v35 = v27;
  v36 = *(_WORD *)(v157 + 164);
  v37 = *(_BYTE *)(v157 + 166);
  v38 = *(_QWORD *)(v157 + 192);
  if (*(_BYTE *)(v157 + 200))
  {
    if (v38)
      v137 = *(_DWORD *)(v38 - 12);
    else
      v137 = 0;
    v138 = *(_QWORD **)(v157 + 208);
    if (v138)
    {
      v138 = (_QWORD *)*v138;
      if (v138)
        LODWORD(v138) = *((_DWORD *)v138 - 3);
    }
    *(_WORD *)(v27 + 40) = v36;
    v139 = v37 & 3;
    v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v139 << 18);
    if (!(v137 + (_DWORD)v138))
    {
      v44 = 0;
      goto LABEL_26;
    }
    goto LABEL_86;
  }
  if (v38)
  {
    v39 = *(unsigned int *)(v38 - 4);
    v40 = v38 + 16 * v39;
    if (*(_DWORD *)(v38 - 12))
    {
      v41 = *(_QWORD *)(v157 + 192);
      if ((_DWORD)v39)
      {
        v42 = 16 * v39;
        v41 = *(_QWORD *)(v157 + 192);
        while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
        {
          v41 += 16;
          v42 -= 16;
          if (!v42)
          {
            v41 = v40;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v41 = v38 + 16 * v39;
  }
  else
  {
    v41 = 0;
    v39 = 0;
  }
  v40 = v38 + 16 * v39;
  if (v38)
LABEL_16:
    v38 += 16 * *(unsigned int *)(v38 - 4);
  if (v38 != v41)
  {
    while ((*(_WORD *)(v41 + 8) & 1) == 0)
    {
      v43 = v41 + 16;
      v41 = v40;
      if (v43 != v40)
      {
        v41 = v43;
        while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
        {
          v41 += 16;
          if (v41 == v40)
          {
            v41 = v40;
            break;
          }
        }
      }
      if (v41 == v38)
        goto LABEL_25;
    }
    *(_WORD *)(v27 + 40) = v36;
    v120 = v37 & 3;
    v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v120 << 18);
LABEL_86:
    v44 = 0x8000000000000000;
    goto LABEL_26;
  }
LABEL_25:
  v44 = 0;
  *(_WORD *)(v27 + 40) = v36;
  v45 = v37 & 3;
  v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
  v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v45 << 18);
LABEL_26:
  *(_QWORD *)(v27 + 20) = v44 | v46;
  *(_WORD *)(v27 + 28) = v47;
  *(_BYTE *)(v27 + 30) = BYTE2(v47);
  *(_DWORD *)(v27 + 44) = v26;
  *(_DWORD *)(v27 + 48) = v25;
  v48 = (_DWORD *)*((_QWORD *)a2->var0.var0 + 11);
  if (v48)
  {
    *v48 += 2;
    v49 = (WTF::StringImpl *)(*(unsigned int *)(v27 + 52) | ((unint64_t)*(unsigned __int8 *)(v27 + 56) << 32));
    *(_DWORD *)(v35 + 52) = (_DWORD)v48;
    *(_BYTE *)(v35 + 56) = BYTE4(v48);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  v50 = (_DWORD *)*((_QWORD *)a2->var0.var0 + 12);
  if (v50)
  {
    *v50 += 2;
    v51 = (WTF::StringImpl *)(*(unsigned int *)(v35 + 57) | ((unint64_t)*(unsigned __int8 *)(v35 + 61) << 32));
    *(_DWORD *)(v35 + 57) = (_DWORD)v50;
    *(_BYTE *)(v35 + 61) = BYTE4(v50);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  JSC::BytecodeGenerator::generate<JSC::ProgramNode,JSC::UnlinkedProgramCodeBlock>((WTF::MonotonicTime *)v147, (uint64_t)this, v157, (uint64_t)a2, v35, 0);
  *(_OWORD *)&v140[32] = v149;
  v141 = v150;
  *(_OWORD *)v140 = *(_OWORD *)v147;
  *(_OWORD *)&v140[16] = *(_OWORD *)v148;
  v53 = v152;
  v152 = 0;
  v54 = v143;
  v142 = v151;
  v143 = v53;
  if (!v54)
    goto LABEL_37;
  if (*(_DWORD *)v54 != 2)
  {
    *(_DWORD *)v54 -= 2;
LABEL_37:
    v144 = v153;
    v145 = v154;
    goto LABEL_38;
  }
  WTF::StringImpl::~StringImpl(v54, v52, v18, v19, v20, v21, v22, v23);
  WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  v95 = v152;
  v144 = v153;
  v145 = v154;
  v152 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v94, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
LABEL_38:
  if ((_BYTE)v145)
    v55 = 0;
  else
    v55 = v35;
  v17 = (WTF::AtomStringImpl *)v157;
  v157 = 0;
  if (v17)
    std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v157, (unint64_t)v17, v18, v19, v20, v21, v22, v23);
  if (v55)
  {
    JSC::generateUnlinkedCodeBlockForFunctions((SourceProvider *)this, v55, a2, (uint64_t)v140);
    v56 = 0;
    goto LABEL_46;
  }
LABEL_45:
  v35 = 0;
  v56 = 1;
LABEL_46:
  if (!(_BYTE)v145)
    goto LABEL_55;
  v57 = *(unsigned int *)(a5 + 88);
  if ((_DWORD)v57 == -1)
  {
LABEL_61:
    v62 = v141;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)&v140[32];
    *(_OWORD *)(a5 + 48) = v62;
    v63 = v143;
    *(_QWORD *)(a5 + 64) = v142;
    v64 = *(_OWORD *)&v140[16];
    *(_OWORD *)a5 = *(_OWORD *)v140;
    *(_OWORD *)(a5 + 16) = v64;
    if (v63)
      *(_DWORD *)v63 += 2;
    *(_QWORD *)(a5 + 72) = v63;
    *(_DWORD *)(a5 + 80) = v144;
    *(_WORD *)(a5 + 84) = v145;
    *(_DWORD *)(a5 + 88) = 0;
    if (v56)
      goto LABEL_56;
    goto LABEL_64;
  }
  if ((_DWORD)v57)
  {
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v57])(v147, a5);
    goto LABEL_61;
  }
  v58 = v141;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&v140[32];
  *(_OWORD *)(a5 + 48) = v58;
  v59 = v143;
  *(_QWORD *)(a5 + 64) = v142;
  v60 = *(_OWORD *)&v140[16];
  *(_OWORD *)a5 = *(_OWORD *)v140;
  *(_OWORD *)(a5 + 16) = v60;
  if (v59)
    *(_DWORD *)v59 += 2;
  v61 = *(WTF::StringImpl **)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v59;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  *(_DWORD *)(a5 + 80) = v144;
  *(_WORD *)(a5 + 84) = v145;
LABEL_55:
  if (v56)
  {
LABEL_56:
    *a9 = 0;
    goto LABEL_72;
  }
LABEL_64:
  var0 = a2->var0.var0;
  v66 = *(WTF::StringImpl **)&a2->var1;
  if (a2->var0.var0)
    ++*((_DWORD *)var0 + 2);
  v147[0] = (WTF::StringImpl *)var0;
  v147[1] = v66;
  v148[0] = 0;
  v148[1] = (WTF::StringImpl *)0xFFFFFFFF00000002;
  LODWORD(v149) = (*(uint64_t (**)(SourceProvider *))(*(_QWORD *)var0 + 16))(var0) ^ 2;
  JSC::encodeCodeBlock((uint64_t)this, (uint64_t)v147, (_DWORD *)v35, v11, (JSC::BytecodeCacheError *)a5, a9);
  v67 = v148[0];
  v148[0] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = v147[0];
  v147[0] = 0;
  if (v68)
  {
    if (*((_DWORD *)v68 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v68 + 8))(v68);
    else
      --*((_DWORD *)v68 + 2);
  }
LABEL_72:
  v69 = v143;
  v143 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v146, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::generateModuleBytecode(JSC *this@<X0>, const SourceCode *a2@<X1>, const SourceCode *a3@<X2>, JSC::BytecodeCacheError *a4@<X4>, uint64_t a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  int v11;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WTF::AtomStringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  WTF::StringImpl *v59;
  __int128 v60;
  WTF::StringImpl *v61;
  __int128 v62;
  WTF::StringImpl *v63;
  __int128 v64;
  SourceProvider *var0;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _QWORD *v138;
  int v139;
  _BYTE v140[48];
  __int128 v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  __int16 v145;
  unsigned int *v146;
  WTF::StringImpl *v147[2];
  WTF::StringImpl *v148[2];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  int v153;
  __int16 v154;
  __int16 v155;
  char v156;
  uint64_t v157;

  v11 = (int)a3;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v146, this, (uint64_t)a3, a5, (uint64_t)a4, a6, a7, a8, a10);
  v15 = *((_QWORD *)this + 5239);
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(0);
  if (v15 != *(_QWORD *)(v16 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x198904848);
  }
  *(_DWORD *)v140 = 0x100000;
  memset(&v140[8], 0, 40);
  *(_QWORD *)&v141 = -1;
  *((_QWORD *)&v141 + 1) = -1;
  v142 = -1;
  v143 = 0;
  v144 = -1;
  v145 = 0;
  v147[0] = 0;
  JSC::parse<JSC::ModuleProgramNode>((uint64_t)&v157, (uint64_t)this, (uint64_t)a2, (uint64_t)v147, 1, 1, (uint64_t)v140, 0, 0, 0);
  v24 = v147[0];
  v147[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (!v157)
    goto LABEL_45;
  v25 = *(_DWORD *)(v157 + 236);
  v26 = *(_DWORD *)(v157 + 28) - *(_DWORD *)(v157 + 8);
  v155 = 3680;
  v156 &= 0x80u;
  v27 = JSC::UnlinkedModuleProgramCodeBlock::create((uint64_t)this, (JSC::VM *)&v155, 0, v19, v20, v21, v22, v23);
  v35 = v27;
  v36 = *(_WORD *)(v157 + 164);
  v37 = *(_BYTE *)(v157 + 166);
  v38 = *(_QWORD *)(v157 + 192);
  if (*(_BYTE *)(v157 + 200))
  {
    if (v38)
      v137 = *(_DWORD *)(v38 - 12);
    else
      v137 = 0;
    v138 = *(_QWORD **)(v157 + 208);
    if (v138)
    {
      v138 = (_QWORD *)*v138;
      if (v138)
        LODWORD(v138) = *((_DWORD *)v138 - 3);
    }
    *(_WORD *)(v27 + 40) = v36;
    v139 = v37 & 3;
    v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v139 << 18);
    if (!(v137 + (_DWORD)v138))
    {
      v44 = 0;
      goto LABEL_26;
    }
    goto LABEL_86;
  }
  if (v38)
  {
    v39 = *(unsigned int *)(v38 - 4);
    v40 = v38 + 16 * v39;
    if (*(_DWORD *)(v38 - 12))
    {
      v41 = *(_QWORD *)(v157 + 192);
      if ((_DWORD)v39)
      {
        v42 = 16 * v39;
        v41 = *(_QWORD *)(v157 + 192);
        while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
        {
          v41 += 16;
          v42 -= 16;
          if (!v42)
          {
            v41 = v40;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v41 = v38 + 16 * v39;
  }
  else
  {
    v41 = 0;
    v39 = 0;
  }
  v40 = v38 + 16 * v39;
  if (v38)
LABEL_16:
    v38 += 16 * *(unsigned int *)(v38 - 4);
  if (v38 != v41)
  {
    while ((*(_WORD *)(v41 + 8) & 1) == 0)
    {
      v43 = v41 + 16;
      v41 = v40;
      if (v43 != v40)
      {
        v41 = v43;
        while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
        {
          v41 += 16;
          if (v41 == v40)
          {
            v41 = v40;
            break;
          }
        }
      }
      if (v41 == v38)
        goto LABEL_25;
    }
    *(_WORD *)(v27 + 40) = v36;
    v120 = v37 & 3;
    v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v120 << 18);
LABEL_86:
    v44 = 0x8000000000000000;
    goto LABEL_26;
  }
LABEL_25:
  v44 = 0;
  *(_WORD *)(v27 + 40) = v36;
  v45 = v37 & 3;
  v46 = *(_QWORD *)(v27 + 20) & 0x7FFFFFFFFFFFFFFFLL;
  v47 = (*(unsigned __int16 *)(v27 + 28) | (*(unsigned __int8 *)(v27 + 30) << 16)) & 0xFFF3FFFF | (v45 << 18);
LABEL_26:
  *(_QWORD *)(v27 + 20) = v44 | v46;
  *(_WORD *)(v27 + 28) = v47;
  *(_BYTE *)(v27 + 30) = BYTE2(v47);
  *(_DWORD *)(v27 + 44) = v26;
  *(_DWORD *)(v27 + 48) = v25;
  v48 = (_DWORD *)*((_QWORD *)a2->var0.var0 + 11);
  if (v48)
  {
    *v48 += 2;
    v49 = (WTF::StringImpl *)(*(unsigned int *)(v27 + 52) | ((unint64_t)*(unsigned __int8 *)(v27 + 56) << 32));
    *(_DWORD *)(v35 + 52) = (_DWORD)v48;
    *(_BYTE *)(v35 + 56) = BYTE4(v48);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
  v50 = (_DWORD *)*((_QWORD *)a2->var0.var0 + 12);
  if (v50)
  {
    *v50 += 2;
    v51 = (WTF::StringImpl *)(*(unsigned int *)(v35 + 57) | ((unint64_t)*(unsigned __int8 *)(v35 + 61) << 32));
    *(_DWORD *)(v35 + 57) = (_DWORD)v50;
    *(_BYTE *)(v35 + 61) = BYTE4(v50);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  JSC::BytecodeGenerator::generate<JSC::ModuleProgramNode,JSC::UnlinkedModuleProgramCodeBlock>((WTF::MonotonicTime *)v147, (uint64_t)this, v157, (uint64_t)a2, v35, 0);
  *(_OWORD *)&v140[32] = v149;
  v141 = v150;
  *(_OWORD *)v140 = *(_OWORD *)v147;
  *(_OWORD *)&v140[16] = *(_OWORD *)v148;
  v53 = v152;
  v152 = 0;
  v54 = v143;
  v142 = v151;
  v143 = v53;
  if (!v54)
    goto LABEL_37;
  if (*(_DWORD *)v54 != 2)
  {
    *(_DWORD *)v54 -= 2;
LABEL_37:
    v144 = v153;
    v145 = v154;
    goto LABEL_38;
  }
  WTF::StringImpl::~StringImpl(v54, v52, v18, v19, v20, v21, v22, v23);
  WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  v95 = v152;
  v144 = v153;
  v145 = v154;
  v152 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v94, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
LABEL_38:
  if ((_BYTE)v145)
    v55 = 0;
  else
    v55 = v35;
  v17 = (WTF::AtomStringImpl *)v157;
  v157 = 0;
  if (v17)
    std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v157, (unint64_t)v17, v18, v19, v20, v21, v22, v23);
  if (v55)
  {
    JSC::generateUnlinkedCodeBlockForFunctions((SourceProvider *)this, v55, a2, (uint64_t)v140);
    v56 = 0;
    goto LABEL_46;
  }
LABEL_45:
  v35 = 0;
  v56 = 1;
LABEL_46:
  if (!(_BYTE)v145)
    goto LABEL_55;
  v57 = *(unsigned int *)(a5 + 88);
  if ((_DWORD)v57 == -1)
  {
LABEL_61:
    v62 = v141;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)&v140[32];
    *(_OWORD *)(a5 + 48) = v62;
    v63 = v143;
    *(_QWORD *)(a5 + 64) = v142;
    v64 = *(_OWORD *)&v140[16];
    *(_OWORD *)a5 = *(_OWORD *)v140;
    *(_OWORD *)(a5 + 16) = v64;
    if (v63)
      *(_DWORD *)v63 += 2;
    *(_QWORD *)(a5 + 72) = v63;
    *(_DWORD *)(a5 + 80) = v144;
    *(_WORD *)(a5 + 84) = v145;
    *(_DWORD *)(a5 + 88) = 0;
    if (v56)
      goto LABEL_56;
    goto LABEL_64;
  }
  if ((_DWORD)v57)
  {
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v57])(v147, a5);
    goto LABEL_61;
  }
  v58 = v141;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&v140[32];
  *(_OWORD *)(a5 + 48) = v58;
  v59 = v143;
  *(_QWORD *)(a5 + 64) = v142;
  v60 = *(_OWORD *)&v140[16];
  *(_OWORD *)a5 = *(_OWORD *)v140;
  *(_OWORD *)(a5 + 16) = v60;
  if (v59)
    *(_DWORD *)v59 += 2;
  v61 = *(WTF::StringImpl **)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v59;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  *(_DWORD *)(a5 + 80) = v144;
  *(_WORD *)(a5 + 84) = v145;
LABEL_55:
  if (v56)
  {
LABEL_56:
    *a9 = 0;
    goto LABEL_72;
  }
LABEL_64:
  var0 = a2->var0.var0;
  v66 = *(WTF::StringImpl **)&a2->var1;
  if (a2->var0.var0)
    ++*((_DWORD *)var0 + 2);
  v147[0] = (WTF::StringImpl *)var0;
  v147[1] = v66;
  v148[0] = 0;
  v148[1] = (WTF::StringImpl *)-4294967257;
  LODWORD(v149) = (*(uint64_t (**)(SourceProvider *))(*(_QWORD *)var0 + 16))(var0) ^ 0x27;
  JSC::encodeCodeBlock((uint64_t)this, (uint64_t)v147, (_DWORD *)v35, v11, (JSC::BytecodeCacheError *)a5, a9);
  v67 = v148[0];
  v148[0] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = v147[0];
  v147[0] = 0;
  if (v68)
  {
    if (*((_DWORD *)v68 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v68 + 8))(v68);
    else
      --*((_DWORD *)v68 + 2);
  }
LABEL_72:
  v69 = v143;
  v143 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v146, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t JSC::evaluate(JSC::JSGlobalObject *a1, SourceCode *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v10;
  uint64_t v13;
  JSC::Structure *v14;
  JSC::Symbol *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  JSC::JSGlobalObject *v40;

  v10 = a3;
  v40 = (JSC::JSGlobalObject *)a3;
  v13 = *((_QWORD *)a1 + 7);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v39, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v13 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = *(_QWORD *)(StatusReg + 736);
  if (!v22)
    v22 = WTF::Thread::initializeCurrentTLS(0);
  if (v20 != *(_QWORD *)(v22 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x198904A0CLL);
  }
  v23 = *(_QWORD *)(StatusReg + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v23 + 5) > 0x3Fu)
    goto LABEL_23;
  v24 = *(_QWORD *)(StatusReg + 736);
  if (!v24)
    v24 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v24 + 5) & 8) != 0 || *(_BYTE *)(v13 + 202))
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198904A2CLL);
  }
  if (v10 <= 0xA && ((1 << v10) & 0x405) != 0)
  {
    v40 = a1;
    v10 = (unint64_t)a1;
  }
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned __int8 *)(v10 + 5);
    if (v25 >= 0x17)
    {
      if (v25 - 51 > 5)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_21:
    v10 = *((_QWORD *)a1 + 8);
    goto LABEL_17;
  }
  v10 = JSC::JSValue::toThisSloppySlowCase((JSC::JSValue *)&v40, a1, v14, v15, v16, v17, v18, v19);
LABEL_17:
  v26 = JSC::Interpreter::executeProgram((JSC::Interpreter *)(v13 + 90560), a2, a1, (JSC::JSObject *)v10, v16, v17, v18, v19);
  v34 = *(_QWORD *)(v13 + 16);
  if (v34)
  {
    *a4 = v34;
    *(_QWORD *)(v13 + 16) = 0;
    v37 = (unsigned int *)(v13 + 80);
    v35 = 10;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 & 0xFFFFFFEF, v37));
  }
  else
  {
    v35 = v26;
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198904A70);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v39, v27, v28, v29, v30, v31, v32, v33);
  return v35;
}

uint64_t JSC::profiledEvaluate(JSC::JSGlobalObject *a1, double a2, uint64_t a3, SourceCode *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  _QWORD *v13;
  uint64_t v14;
  SourceCode *v15;
  int v16;
  int v17;
  JSC::JSGlobalObject *v18;
  JSC::Debugger *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;

  if (!a1)
    return JSC::evaluate(a1, a4, a5, a6, (uint64_t)a6, a7, a8, a9, a2);
  v9 = *((_QWORD *)a1 + 252);
  if (!v9)
    return JSC::evaluate(a1, a4, a5, a6, (uint64_t)a6, a7, a8, a9, a2);
  v11 = *(_QWORD *)(v9 + 208);
  if (!v11)
    return JSC::evaluate(a1, a4, a5, a6, (uint64_t)a6, a7, a8, a9, a2);
  v12 = a1;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  a4 = v15;
  a5 = v14;
  a6 = v13;
  v17 = v16;
  a1 = v12;
  if (v17)
    return JSC::evaluate(a1, a4, a5, a6, (uint64_t)a6, a7, a8, a9, a2);
  v18 = v12;
  v19 = (JSC::Debugger *)*((_QWORD *)v12 + 252);
  v20 = v13;
  v21 = a5;
  JSC::Debugger::willEvaluateScript(v19);
  v27 = JSC::evaluate(v18, v15, v21, v20, v22, v23, v24, v25, v26);
  v28 = *((_QWORD *)v18 + 252);
  if (v28)
  {
    if (*(_QWORD *)(v28 + 208))
      JSC::Debugger::didEvaluateScript(v28);
  }
  return v27;
}

uint64_t JSC::evaluateWithScopeExtension(unint64_t a1, SourceCode *a2, JSC::JSScope *a3, _QWORD *a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t result;

  if (!a3)
    return JSC::evaluate((JSC::JSGlobalObject *)a1, a2, a1, a4, (uint64_t)a5, a6, a7, a8, a9);
  v12 = JSC::JSWithScope::create(*(JSC::JSWithScope **)(a1 + 56), a1, *(JSC::JSGlobalObject **)(a1 + 72), a3, a5, a6, a7, a8);
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 80) = v12;
  if (a1 && v12 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(v18 + 192, a1);
  result = JSC::evaluate((JSC::JSGlobalObject *)a1, a2, a1, a4, v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t JSC::loadAndEvaluateModule(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t StatusReg;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(_QWORD *);
  uint64_t *v33;
  unsigned int *v34;
  _QWORD v35[3];

  v13 = a1[7];
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v34, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8, a9);
  v17 = *(_QWORD *)(v13 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v19 = *(_QWORD *)(StatusReg + 736);
  if (!v19)
    v19 = WTF::Thread::initializeCurrentTLS(0);
  if (v17 != *(_QWORD *)(v19 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x198904D28);
  }
  v20 = *(_QWORD *)(StatusReg + 736);
  if (!v20)
    v20 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v20 + 5) > 0x3Fu)
    goto LABEL_14;
  v21 = *(_QWORD *)(StatusReg + 736);
  if (!v21)
    v21 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v21 + 5) & 8) != 0 || *(_BYTE *)(v13 + 202))
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198904D48);
  }
  v22 = a1[81];
  if ((v22 & 1) != 0)
  {
    v32 = *(uint64_t (**)(_QWORD *))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (uint64_t *)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v33 = a1 - 2;
    v35[0] = *v33;
    v35[1] = a1;
    v35[2] = a1 + 81;
    v22 = v32(v35);
  }
  v23 = JSC::JSModuleLoader::loadAndEvaluateModule((unsigned int *)v22, a1, a2, a3, a4, v14, v15, v16);
  JSC::JSLockHolder::~JSLockHolder(&v34, v24, v25, v26, v27, v28, v29, v30);
  return v23;
}

uint64_t JSC::JSGlobalObject::moduleLoader(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 648);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 648;
    return v3(v5);
  }
  return v1;
}

uint64_t JSC::loadAndEvaluateModule(unint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(WTF::StringImpl **);
  WTF::StringImpl **v60;
  unsigned int *v61;
  WTF::StringImpl *v62[3];

  v13 = *(_QWORD *)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v61, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8, a9);
  v21 = *(_QWORD *)(v13 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = *(_QWORD *)(StatusReg + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if (v21 != *(_QWORD *)(v23 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x198904F8CLL);
  }
  v24 = *(_QWORD *)(StatusReg + 736);
  if (!v24)
    v24 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v24 + 5) > 0x3Fu)
    goto LABEL_28;
  v25 = *(_QWORD *)(StatusReg + 736);
  if (!v25)
    v25 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v25 + 5) & 8) != 0 || *(_BYTE *)(v13 + 202))
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x198904FACLL);
  }
  v26 = *(_QWORD *)(a1 + 648);
  if ((v26 & 1) != 0)
  {
    v59 = *(uint64_t (**)(WTF::StringImpl **))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v60 = (WTF::StringImpl **)(a1 - 16);
    else
      v60 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v62[0] = *v60;
    v62[1] = (WTF::StringImpl *)a1;
    v62[2] = (WTF::StringImpl *)(a1 + 648);
    v26 = v59(v62);
  }
  v27 = *a2;
  if (v27)
  {
    if ((*((_BYTE *)v27 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v27 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), (unint64_t)v27, v15, v16, v17, v18, v19, v20, v62);
      v27 = v62[0];
    }
  }
  v28 = *(_DWORD *)v27;
  *(_DWORD *)v27 += 2;
  if (v28)
  {
    *(_DWORD *)v27 = v28;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v27, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  v62[0] = v27;
  if ((*((_BYTE *)v27 + 16) & 0x20) != 0)
    v29 = JSC::Symbol::create((JSC::Symbol *)v13, v27, v15, v16, v17, v18, v19, v20);
  else
    v29 = JSC::jsString((JSC *)v13, (JSC::VM *)v62, v15, v16, v17, v18, v19, v20);
  v40 = JSC::JSModuleLoader::loadAndEvaluateModule((unsigned int *)v26, (uint64_t *)a1, v29, a3, a4, v30, v31, v32);
  v41 = v62[0];
  v62[0] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v61, v33, v34, v35, v36, v37, v38, v39);
  return v40;
}

unint64_t JSC::loadAndEvaluateModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  WTF::SymbolImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int **v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t SlowCase;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t *);
  uint64_t *v67;
  int v68;
  uint64_t v69;
  unint64_t *v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t (*v77)(uint64_t *);
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v12 = *(_QWORD *)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v83, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(v12 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 736);
  if (!v15)
    v15 = WTF::Thread::initializeCurrentTLS(0);
  if (v13 != *(_QWORD *)(v15 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1989051C4);
  }
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v16 + 5) > 0x3Fu)
    goto LABEL_23;
  v17 = *(_QWORD *)(StatusReg + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v17 + 5) & 8) != 0 || *(_BYTE *)(v12 + 202))
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x1989051E4);
  }
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x1000000002;
  *(_QWORD *)(v18 + 8) = "EntryPointModule";
  *(_DWORD *)(v18 + 16) = 4;
  v26 = WTF::fastCompactMalloc((WTF *)0x30);
  v27 = *(_QWORD *)(v18 + 8);
  v28 = *(_DWORD *)(v18 + 4);
  *(_DWORD *)v18 += 2;
  *(_DWORD *)v26 = 2;
  *(_DWORD *)(v26 + 4) = v28;
  *(_QWORD *)(v26 + 8) = v27;
  *(_DWORD *)(v26 + 16) = 38;
  *(_QWORD *)(v26 + 24) = v18;
  v29 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  *(_QWORD *)(v26 + 32) = v29;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v29;
  if (*(_DWORD *)v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)v18 -= 2;
  }
  v37 = JSC::Symbol::create((JSC::Symbol *)v12, (JSC::VM *)v26, v20, v21, v22, v23, v24, v25);
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, v30, v31, v32, v33, v34, v35, v36);
    WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
  v38 = (unsigned int **)(a1 + 648);
  v39 = *(_QWORD *)(a1 + 648);
  if ((v39 & 1) != 0)
  {
    v66 = *(uint64_t (**)(uint64_t *))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v67 = (uint64_t *)(a1 - 16);
    else
      v67 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v84 = *v67;
    v85 = a1;
    v86 = a1 + 648;
    v39 = v66(&v84);
  }
  JSC::JSModuleLoader::provideFetch((unsigned int *)v39, (uint64_t *)a1, v37, a2, v33, v34, v35, v36);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_17;
  v68 = *(_DWORD *)(v12 + 80);
  if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v41, v42, v43, v44, v45, v46);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_17:
    v47 = (unint64_t)*v38;
    if ((*v38 & 1) != 0)
    {
      v77 = *(uint64_t (**)(uint64_t *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v78 = (uint64_t *)(a1 - 16);
      else
        v78 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v84 = *v78;
      v85 = a1;
      v86 = a1 + 648;
      v47 = v77(&v84);
    }
    SlowCase = JSC::JSModuleLoader::loadAndEvaluateModule((unsigned int *)v47, (uint64_t *)a1, v37, 10, a3, v44, v45, v46);
    goto LABEL_19;
  }
  v69 = *(_QWORD *)(a1 + 56);
  v70 = (unint64_t *)(v69 + 38992);
  v71 = *(_DWORD *)(a1 + 1184);
  if (v71)
    v72 = 16 * (v71 & 0xFFFFFFFE);
  else
    v72 = 0;
  SlowCase = *v70;
  if (*v70 >= *(_QWORD *)(v69 + 39000))
  {
    SlowCase = *(_QWORD *)(v69 + 39008);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), v40, v41, v42, v43, v44, v45, v46);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v69 + 38968, v69 + 192, 32, 0, 0, v80, v81, v82);
      goto LABEL_34;
    }
    v79 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v69 + 39016);
    *(_QWORD *)(v69 + 39000) = SlowCase + HIDWORD(v79);
    *(_QWORD *)(v69 + 39008) = SlowCase + (int)v79;
  }
  *v70 = SlowCase + 32;
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  v73 = *(_DWORD *)(v72 + 8);
  *(_DWORD *)SlowCase = v72 >> 4;
  *(_DWORD *)(SlowCase + 4) = v73;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v69 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  v74 = *(_QWORD *)(v12 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24) != v74)
  {
    v75 = (unsigned int *)(v12 + 80);
    *(_QWORD *)(v12 + 16) = 0;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 & 0xFFFFFFEF, v75));
    JSC::JSPromise::reject(SlowCase, (uint64_t *)a1, *(_QWORD *)(v74 + 8), v42, v43, v44, v45, v46);
  }
LABEL_19:
  JSC::JSLockHolder::~JSLockHolder(&v83, v40, v41, v42, v43, v44, v45, v46);
  return SlowCase;
}

uint64_t JSC::loadModule(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  WTF::SymbolImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Module;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v40)(_QWORD *);
  uint64_t *v41;
  unsigned int *v42;
  _QWORD v43[3];

  v13 = a1[7];
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v42, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v13 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = *(_QWORD *)(StatusReg + 736);
  if (!v22)
    v22 = WTF::Thread::initializeCurrentTLS(0);
  if (v20 != *(_QWORD *)(v22 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1989054C4);
  }
  v23 = *(_QWORD *)(StatusReg + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v23 + 5) > 0x3Fu)
    goto LABEL_18;
  v24 = *(_QWORD *)(StatusReg + 736);
  if (!v24)
    v24 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v24 + 5) & 8) != 0 || *(_BYTE *)(v13 + 202))
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1989054E4);
  }
  v25 = a1[81];
  if ((v25 & 1) != 0)
  {
    v40 = *(uint64_t (**)(_QWORD *))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v41 = a1 - 2;
    else
      v41 = (uint64_t *)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
    v43[0] = *v41;
    v43[1] = a1;
    v43[2] = a1 + 81;
    v25 = v40(v43);
  }
  v26 = *(JSC::VM **)a2;
  if (*(_QWORD *)a2 && (*((_BYTE *)v26 + 16) & 0x20) != 0)
    v27 = JSC::Symbol::create((JSC::Symbol *)v13, v26, v14, v15, v16, v17, v18, v19);
  else
    v27 = JSC::jsString((JSC *)v13, a2, v14, v15, v16, v17, v18, v19);
  Module = JSC::JSModuleLoader::loadModule((unsigned int *)v25, a1, v27, a3, a4, v28, v29, v30);
  JSC::JSLockHolder::~JSLockHolder(&v42, v32, v33, v34, v35, v36, v37, v38);
  return Module;
}

unint64_t JSC::loadModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  WTF::SymbolImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int **v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t Module;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t *);
  uint64_t *v67;
  int v68;
  uint64_t v69;
  unint64_t *v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t (*v77)(uint64_t *);
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v12 = *(_QWORD *)(a1 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v83, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
  v13 = *(_QWORD *)(v12 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 736);
  if (!v15)
    v15 = WTF::Thread::initializeCurrentTLS(0);
  if (v13 != *(_QWORD *)(v15 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1989056FCLL);
  }
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16)
    v16 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v16 + 5) > 0x3Fu)
    goto LABEL_23;
  v17 = *(_QWORD *)(StatusReg + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v17 + 5) & 8) != 0 || *(_BYTE *)(v12 + 202))
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x19890571CLL);
  }
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x1000000002;
  *(_QWORD *)(v18 + 8) = "EntryPointModule";
  *(_DWORD *)(v18 + 16) = 4;
  v26 = WTF::fastCompactMalloc((WTF *)0x30);
  v27 = *(_QWORD *)(v18 + 8);
  v28 = *(_DWORD *)(v18 + 4);
  *(_DWORD *)v18 += 2;
  *(_DWORD *)v26 = 2;
  *(_DWORD *)(v26 + 4) = v28;
  *(_QWORD *)(v26 + 8) = v27;
  *(_DWORD *)(v26 + 16) = 38;
  *(_QWORD *)(v26 + 24) = v18;
  v29 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
  *(_QWORD *)(v26 + 32) = v29;
  WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v29;
  if (*(_DWORD *)v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)v18 -= 2;
  }
  v37 = JSC::Symbol::create((JSC::Symbol *)v12, (JSC::VM *)v26, v20, v21, v22, v23, v24, v25);
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, v30, v31, v32, v33, v34, v35, v36);
    WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
  v38 = (unsigned int **)(a1 + 648);
  v39 = *(_QWORD *)(a1 + 648);
  if ((v39 & 1) != 0)
  {
    v66 = *(uint64_t (**)(uint64_t *))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v67 = (uint64_t *)(a1 - 16);
    else
      v67 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v84 = *v67;
    v85 = a1;
    v86 = a1 + 648;
    v39 = v66(&v84);
  }
  JSC::JSModuleLoader::provideFetch((unsigned int *)v39, (uint64_t *)a1, v37, a2, v33, v34, v35, v36);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_17;
  v68 = *(_DWORD *)(v12 + 80);
  if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v41, v42, v43, v44, v45, v46);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_17:
    v47 = (unint64_t)*v38;
    if ((*v38 & 1) != 0)
    {
      v77 = *(uint64_t (**)(uint64_t *))(v47 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v78 = (uint64_t *)(a1 - 16);
      else
        v78 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v84 = *v78;
      v85 = a1;
      v86 = a1 + 648;
      v47 = v77(&v84);
    }
    Module = JSC::JSModuleLoader::loadModule((unsigned int *)v47, (uint64_t *)a1, v37, 10, a3, v44, v45, v46);
    goto LABEL_19;
  }
  v69 = *(_QWORD *)(a1 + 56);
  v70 = (unint64_t *)(v69 + 38992);
  v71 = *(_DWORD *)(a1 + 1184);
  if (v71)
    v72 = 16 * (v71 & 0xFFFFFFFE);
  else
    v72 = 0;
  Module = *v70;
  if (*v70 >= *(_QWORD *)(v69 + 39000))
  {
    Module = *(_QWORD *)(v69 + 39008);
    if ((Module & 1) != 0)
    {
      JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), v40, v41, v42, v43, v44, v45, v46);
      Module = JSC::LocalAllocator::allocateSlowCase(v69 + 38968, v69 + 192, 32, 0, 0, v80, v81, v82);
      goto LABEL_34;
    }
    v79 = *(_QWORD *)(Module + 8) ^ *(_QWORD *)(v69 + 39016);
    *(_QWORD *)(v69 + 39000) = Module + HIDWORD(v79);
    *(_QWORD *)(v69 + 39008) = Module + (int)v79;
  }
  *v70 = Module + 32;
LABEL_34:
  *(_DWORD *)Module = 0;
  v73 = *(_DWORD *)(v72 + 8);
  *(_DWORD *)Module = v72 >> 4;
  *(_DWORD *)(Module + 4) = v73;
  *(_QWORD *)(Module + 8) = 0;
  *(_QWORD *)(Module + 16) = 0;
  *(_QWORD *)(Module + 24) = 0;
  if (*(_BYTE *)(v69 + 755))
    __dmb(0xAu);
  *(_OWORD *)(Module + 16) = xmmword_19914EFB0;
  v74 = *(_QWORD *)(v12 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24) != v74)
  {
    v75 = (unsigned int *)(v12 + 80);
    *(_QWORD *)(v12 + 16) = 0;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 & 0xFFFFFFEF, v75));
    JSC::JSPromise::reject(Module, (uint64_t *)a1, *(_QWORD *)(v74 + 8), v42, v43, v44, v45, v46);
  }
LABEL_19:
  JSC::JSLockHolder::~JSLockHolder(&v83, v40, v41, v42, v43, v44, v45, v46);
  return Module;
}

uint64_t JSC::linkAndEvaluateModule(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  WTF::SymbolImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t StatusReg;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v40)(_QWORD *);
  uint64_t *v41;
  unsigned int *v42;
  _QWORD v43[3];

  v12 = a1[7];
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v42, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
  v19 = *(_QWORD *)(v12 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v21 = *(_QWORD *)(StatusReg + 736);
  if (!v21)
    v21 = WTF::Thread::initializeCurrentTLS(0);
  if (v19 != *(_QWORD *)(v21 + 56))
  {
    __break(0xC471u);
    JUMPOUT(0x1989059ECLL);
  }
  v22 = *(_QWORD *)(StatusReg + 736);
  if (!v22)
    v22 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v22 + 5) > 0x3Fu)
    goto LABEL_18;
  v23 = *(_QWORD *)(StatusReg + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v23 + 5) & 8) != 0 || *(_BYTE *)(v12 + 202))
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x198905A0CLL);
  }
  v24 = a1[81];
  if ((v24 & 1) != 0)
  {
    v40 = *(uint64_t (**)(_QWORD *))(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v41 = a1 - 2;
    else
      v41 = (uint64_t *)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
    v43[0] = *v41;
    v43[1] = a1;
    v43[2] = a1 + 81;
    v24 = v40(v43);
  }
  v25 = *(JSC::VM **)a2;
  if (*(_QWORD *)a2 && (*((_BYTE *)v25 + 16) & 0x20) != 0)
    v26 = JSC::Symbol::create((JSC::Symbol *)v12, v25, v13, v14, v15, v16, v17, v18);
  else
    v26 = JSC::jsString((JSC *)v12, a2, v13, v14, v15, v16, v17, v18);
  v31 = JSC::JSModuleLoader::linkAndEvaluateModule((unsigned int *)v24, a1, v26, a3, v27, v28, v29, v30);
  JSC::JSLockHolder::~JSLockHolder(&v42, v32, v33, v34, v35, v36, v37, v38);
  return v31;
}

uint64_t JSC::importModule(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v32;

  v14 = a1[7];
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, (JSC::VM *)v14, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(_QWORD *)(v14 + 41912);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(StatusReg + 736);
  if (!v17)
    v17 = WTF::Thread::initializeCurrentTLS(0);
  if (v15 != *(_QWORD *)(v17 + 56))
    goto LABEL_12;
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18)
    v18 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v18 + 5) > 0x3Fu)
    goto LABEL_12;
  v19 = *(_QWORD *)(StatusReg + 736);
  if (!v19)
    v19 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v19 + 5) & 8) != 0 || *(_BYTE *)(v14 + 202))
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198905B4CLL);
  }
  v20 = (unsigned int *)JSC::JSGlobalObject::moduleLoader((unint64_t)a1);
  v23 = JSC::JSModuleLoader::requestImportModule(v20, a1, a2, a3, a4, a5, v21, v22);
  JSC::JSLockHolder::~JSLockHolder(&v32, v24, v25, v26, v27, v28, v29, v30);
  return v23;
}

void JSC::retrieveImportAttributesFromDynamicImportOptions(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  int v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  _QWORD *v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  JSC::VM *v140;

  v10 = *(_QWORD *)(a1 + 56);
  v140 = (JSC::VM *)v10;
  if (a2 == 10)
    goto LABEL_6;
  v11 = (JSC::JSGlobalObject *)a1;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v115 = "dynamic import's options should be an object";
    v116 = 45;
LABEL_131:
    JSC::throwTypeError(a1, &v140, (uint64_t)v115, v116);
LABEL_6:
    *a9 = 0;
    return;
  }
  v19 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 488), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v117 = *(_DWORD *)(v10 + 80);
    if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_6;
  }
  if (v19 == 10)
    goto LABEL_6;
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    v115 = "dynamic import's options.with should be an object";
    a1 = (unint64_t)v11;
    v116 = 50;
    goto LABEL_131;
  }
  v20 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v20 = 1;
  *((_QWORD *)v20 + 1) = (char *)v20 + 24;
  *((_QWORD *)v20 + 2) = 20;
  v136 = v20;
  v137 = 0;
  v138 = v10;
  v139 = 258;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF **, uint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v19 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x78))(v19, v11, &v136, 1);
  if (*(_DWORD *)(v10 + 80))
  {
    v118 = *(_DWORD *)(v10 + 80);
    if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (*(_QWORD *)(v10 + 16))
    {
      *a9 = 0;
      goto LABEL_88;
    }
  }
  v135 = 0;
  v28 = *((unsigned int *)v136 + 5);
  if (!(_DWORD)v28)
  {
    v92 = 0;
    goto LABEL_86;
  }
  v29 = (unint64_t *)*((_QWORD *)v136 + 1);
  v30 = &v29[v28];
  do
  {
    v31 = JSC::JSObject::get((unsigned int *)v19, (uint64_t)v11, *v29, v23, v24, v25, v26, v27);
    v33 = v140;
    if (*((_DWORD *)v140 + 20))
    {
      v69 = *((_DWORD *)v140 + 20);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v140 + 64), 7u, v22, v23, v24, v25, v26, v27);
      if (*((_QWORD *)v33 + 2))
        goto LABEL_70;
    }
    if ((v31 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v31 + 5) != 2)
    {
      JSC::throwTypeError((unint64_t)v11, &v140, (uint64_t)"dynamic import's options.with includes non string property", 59);
LABEL_70:
      *a9 = 0;
LABEL_71:
      v71 = (uint64_t)v135;
      if (v135)
      {
        v72 = *((unsigned int *)v135 - 1);
        if ((_DWORD)v72)
        {
          v73 = (uint64_t)v135;
          do
          {
            v74 = *(WTF::StringImpl **)v73;
            if (*(_QWORD *)v73 != -1)
            {
              v75 = *(WTF::StringImpl **)(v73 + 8);
              *(_QWORD *)(v73 + 8) = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                {
                  WTF::StringImpl::~StringImpl(v75, v21, v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                  v74 = *(WTF::StringImpl **)v73;
                }
                else
                {
                  *(_DWORD *)v75 -= 2;
                }
              }
              *(_QWORD *)v73 = 0;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, v21, v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v73 += 16;
            --v72;
          }
          while (v72);
        }
        WTF::fastFree(v71 - 16, v21, v22, v23, v24, v25, v26, v27);
      }
      goto LABEL_88;
    }
    v34 = *(WTF::StringImpl **)(v31 + 8);
    if ((v34 & 1) != 0)
    {
      v34 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v31, v11, v22, v23, v32, v24, v25, v26, v27);
      if (!v34)
        goto LABEL_18;
LABEL_17:
      *(_DWORD *)v34 += 2;
      goto LABEL_18;
    }
    if (v34)
      goto LABEL_17;
LABEL_18:
    v134 = v34;
    if (!*((_DWORD *)v33 + 20))
      goto LABEL_19;
    v70 = *((_DWORD *)v33 + 20);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v33 + 64), 7u, v22, v23, v24, v25, v26, v27);
    if (!*((_QWORD *)v33 + 2))
    {
LABEL_19:
      v35 = *v29;
      if (*v29)
        *(_DWORD *)v35 += 2;
      v36 = (uint64_t)v135;
      if (v135
        || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)&v135, 8uLL, 0, v23, v24, v25, v26, v27), (v36 = (uint64_t)v135) != 0))
      {
        v37 = *(_DWORD *)(v36 - 8);
      }
      else
      {
        v37 = 0;
      }
      v38 = (~(v35 << 32) + v35) ^ ((~(v35 << 32) + v35) >> 22);
      v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
      v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
      v41 = v37 & ((v40 >> 31) ^ v40);
      v42 = v36 + 16 * v41;
      v43 = *(_QWORD *)v42;
      if (*(_QWORD *)v42)
      {
        v44 = 0;
        v45 = 1;
        while (v43 != v35)
        {
          if (v43 == -1)
            v44 = (_QWORD *)v42;
          v41 = (v41 + v45) & v37;
          v42 = v36 + 16 * v41;
          v43 = *(_QWORD *)v42;
          ++v45;
          if (!*(_QWORD *)v42)
          {
            if (v44)
            {
              *v44 = 0;
              v44[1] = 0;
              --*(_DWORD *)(v36 - 16);
              v42 = (uint64_t)v44;
            }
            goto LABEL_32;
          }
        }
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v21, v22, v23, v24, v25, v26, v27);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        goto LABEL_45;
      }
LABEL_32:
      *(_QWORD *)v42 = v35;
      WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)(v42 + 8), (WTF::AtomStringImpl *)&v134, v22, v23, v24, v25, v26, v27);
      v46 = (uint64_t)v135;
      if (v135)
        v47 = *((_DWORD *)v135 - 3) + 1;
      else
        v47 = 1;
      *((_DWORD *)v135 - 3) = v47;
      v48 = (*(_DWORD *)(v46 - 16) + v47);
      v49 = *(unsigned int *)(v46 - 4);
      if (v49 > 0x400)
      {
        if (v49 > 2 * v48)
          goto LABEL_45;
      }
      else
      {
        if (3 * v49 > 4 * v48)
        {
LABEL_45:
          v51 = 1;
          goto LABEL_46;
        }
        if (!(_DWORD)v49)
        {
          v50 = 8;
          goto LABEL_44;
        }
      }
      v50 = ((_DWORD)v49 << (6 * v47 >= (2 * v49)));
LABEL_44:
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)&v135, v50, v42, v23, v24, v25, v26, v27);
      goto LABEL_45;
    }
    v51 = 0;
    *a9 = 0;
LABEL_46:
    v52 = v134;
    v134 = 0;
    if (!v52)
      goto LABEL_49;
    if (*(_DWORD *)v52 != 2)
    {
      *(_DWORD *)v52 -= 2;
LABEL_49:
      if ((v51 & 1) == 0)
        goto LABEL_71;
      goto LABEL_50;
    }
    WTF::StringImpl::~StringImpl(v52, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    if ((v51 & 1) == 0)
      goto LABEL_71;
LABEL_50:
    ++v29;
  }
  while (v29 != v30);
  v92 = (uint64_t)v135;
  if (v135 && *((_DWORD *)v135 - 3))
  {
    v108 = *((unsigned int *)v135 - 1);
    v109 = v135;
    if ((_DWORD)v108)
    {
      v110 = 0;
      while ((unint64_t)(v135[v110] + 1) <= 1)
      {
        v110 += 2;
        if (2 * v108 == v110)
          goto LABEL_86;
      }
      v109 = &v135[v110];
    }
    v111 = &v135[2 * v108];
    if (v111 != v109)
    {
      v112 = *v109;
      if (*(_DWORD *)(a3 + 12))
      {
LABEL_118:
        v113 = *(_QWORD **)a3;
        v114 = *(unsigned int *)(a3 + 12);
        while (*v113 != v112)
        {
          ++v113;
          if (!--v114)
            goto LABEL_135;
        }
        while (1)
        {
          v109 += 2;
          if (v109 == v111)
            goto LABEL_86;
          v112 = *v109;
          if ((unint64_t)(*v109 + 1) > 1)
          {
            if (v109 != v111)
              goto LABEL_118;
            goto LABEL_86;
          }
        }
      }
LABEL_135:
      if (!v112)
      {
        v120 = 0;
        LODWORD(v119) = 0;
        v122 = 0x100000000;
        LODWORD(v121) = 1;
        goto LABEL_138;
      }
      v119 = *(unsigned int *)(v112 + 4);
      if ((v119 & 0x80000000) != 0)
        goto LABEL_150;
      v120 = *(_BYTE **)(v112 + 8);
      v121 = ((unint64_t)*(unsigned int *)(v112 + 16) >> 2) & 1;
      v122 = v119 & 0xFFFFFFFEFFFFFFFFLL | (v121 << 32);
LABEL_138:
      v123 = __OFADD__((_DWORD)v119, 1);
      v124 = v119 + 1;
      if (v123 || __OFADD__(v124, 62))
      {
LABEL_150:
        v134 = 0;
      }
      else
      {
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v124 + 62), v121, (int8x16_t *)"dynamic import's options.with includes unsupported attribute \"", 0x3Eu, v120, v122, (int8x16_t *)"\"", 1u, (int **)&v134);
        if (v134)
        {
          JSC::throwTypeError((unint64_t)v11, &v140, &v134);
          v125 = v134;
          v134 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2)
            {
              WTF::StringImpl::~StringImpl(v125, v21, v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
            }
            else
            {
              *(_DWORD *)v125 -= 2;
            }
          }
          goto LABEL_70;
        }
      }
      __break(0xC471u);
      return;
    }
  }
LABEL_86:
  *a9 = v92;
LABEL_88:
  if (v137)
    WTF::fastFree(v137 - 16, v21, v22, v23, v24, v25, v26, v27);
  v93 = v136;
  v136 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
    {
      v94 = *((unsigned int *)v93 + 5);
      if ((_DWORD)v94)
      {
        v95 = (WTF::StringImpl **)*((_QWORD *)v93 + 1);
        v96 = 8 * v94;
        do
        {
          v97 = *v95;
          *v95 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
            {
              WTF::StringImpl::~StringImpl(v97, v21, v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
            }
            else
            {
              *(_DWORD *)v97 -= 2;
            }
          }
          ++v95;
          v96 -= 8;
        }
        while (v96);
      }
      v106 = *((_QWORD *)v93 + 1);
      if ((WTF *)((char *)v93 + 24) != (WTF *)v106 && v106 != 0)
      {
        *((_QWORD *)v93 + 1) = 0;
        *((_DWORD *)v93 + 4) = 0;
        WTF::fastFree(v106, v21, v22, v23, v24, v25, v26, v27);
      }
      WTF::fastFree((unint64_t)v93, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      --*(_DWORD *)v93;
    }
  }
}

uint64_t JSC::retrieveTypeImportAttribute(unint64_t a1, uint64_t *a2)
{
  JSC::VM *v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  _BOOL4 v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint16x8_t v63;
  uint16x8_t v64;
  WTF::StringImpl *v66;
  JSC::VM *v67;

  v2 = *(JSC::VM **)(a1 + 56);
  v67 = v2;
  v3 = *a2;
  if (!*a2 || !*(_DWORD *)(v3 - 12))
    goto LABEL_48;
  v6 = *(_QWORD *)(*((_QWORD *)v2 + 5244) + 2560);
  v7 = *(_DWORD *)(v3 - 8);
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(v6);
  v16 = result & v7;
  v17 = *(_QWORD *)(v3 + 16 * v16);
  if (v17 == v6)
  {
LABEL_7:
    v19 = v3 + 16 * v16;
    v20 = *a2;
    if (!*a2)
      goto LABEL_12;
    v21 = *(unsigned int *)(v20 - 4);
  }
  else
  {
    v18 = 1;
    while (v17)
    {
      v16 = ((_DWORD)v16 + v18) & v7;
      v17 = *(_QWORD *)(v3 + 16 * v16);
      ++v18;
      if (v17 == v6)
        goto LABEL_7;
    }
    v20 = *a2;
    if (!*a2)
      goto LABEL_48;
    v21 = *(unsigned int *)(v20 - 4);
    v19 = v20 + 16 * v21;
  }
  v20 += 16 * v21;
LABEL_12:
  if (v19 == v20)
    goto LABEL_48;
  v22 = *(_QWORD *)(v19 + 8);
  if (!v22)
  {
    v24 = 0;
    goto LABEL_34;
  }
  v23 = *(_DWORD *)v22;
  v24 = *(_DWORD *)(v22 + 4);
  v25 = *(_DWORD *)v22 + 2;
  *(_DWORD *)v22 = v25;
  v26 = *(_DWORD *)(v22 + 16);
  v27 = *(const char **)(v22 + 8);
  if (v27 != "json" && v24 == 4)
  {
    if ((v26 & 4) != 0)
    {
      if (*v27 == 106 && *(_WORD *)(v27 + 1) == 28531 && *((_WORD *)v27 + 1) == 28271)
      {
LABEL_53:
        v34 = 3;
LABEL_54:
        v33 = 1;
LABEL_55:
        v51 = v25 - 2;
        if (v51)
        {
          *(_DWORD *)v22 = v51;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v9, v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        return v34 | (v33 << 8);
      }
    }
    else if (*(_WORD *)v27 == 106)
    {
      v60 = *(_DWORD *)(v27 + 2);
      v61 = *((_DWORD *)v27 + 1);
      if (v60 == 7274611 && v61 == 7209071)
        goto LABEL_53;
    }
LABEL_21:
    *(_DWORD *)v22 = v23 + 4;
LABEL_34:
    if (__OFADD__(v24, 14))
      goto LABEL_79;
    result = (v24 + 37);
    if (__OFADD__(v24 + 14, 23))
      goto LABEL_79;
    v31 = !v22 || (*(_BYTE *)(v22 + 16) & 4) != 0;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v31, (int8x16_t *)"Import attribute type \"", 0x17u, v22, (int8x16_t *)"\" is not valid", 0xEu, (int **)&v66);
    if (!v66)
      goto LABEL_80;
    JSC::throwTypeError(a1, &v67, &v66);
    v32 = v66;
    v66 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        if (v22)
          goto LABEL_44;
        goto LABEL_48;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (v22)
    {
LABEL_44:
      v25 = *(_DWORD *)v22 - 2;
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        v25 = *(_DWORD *)v22;
      }
      else
      {
        *(_DWORD *)v22 = v25;
      }
      v33 = 0;
      v34 = 0;
      goto LABEL_55;
    }
LABEL_48:
    v34 = 0;
    v33 = 0;
    return v34 | (v33 << 8);
  }
  if (v27 == "json" && v24 == 4)
    goto LABEL_53;
  if (v27 != "webassembly" && v24 == 11)
  {
    if ((v26 & 4) != 0)
    {
      if (*v27 == 119 && *(_QWORD *)(v27 + 1) == 0x626D657373616265)
      {
        if (*(_QWORD *)(v27 + 3) == 0x796C626D65737361)
        {
LABEL_60:
          v34 = 2;
          goto LABEL_54;
        }
        goto LABEL_21;
      }
    }
    else if (*(_WORD *)v27 == 119)
    {
      v63 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v27 + 2), (int16x8_t)xmmword_199157070);
      v63.i16[0] = vminvq_u16(v63);
      if (v63.i32[0])
      {
        v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v27 + 6), (int16x8_t)xmmword_199157080);
        v64.i16[0] = vminvq_u16(v64);
        if (v64.i32[0])
          goto LABEL_60;
      }
    }
    *(_DWORD *)v22 = v23 + 4;
    v24 = 11;
    goto LABEL_34;
  }
  if (v24 == 11 && v27 == "webassembly")
    goto LABEL_60;
  *(_DWORD *)v22 = v23 + 4;
  if ((v24 & 0x80000000) == 0)
    goto LABEL_34;
LABEL_79:
  v66 = 0;
LABEL_80:
  __break(0xC471u);
  return result;
}

char *JSC::ConfigFile::ConfigFile(char *this, const char *a2)
{
  char *v2;

  v2 = this;
  if (a2)
  {
    this = strncpy(this, a2, 0x400uLL);
    v2 = this + 1024;
  }
  *v2 = 0;
  this[1025] = 0;
  return this;
}

{
  char *v2;

  v2 = this;
  if (a2)
  {
    this = strncpy(this, a2, 0x400uLL);
    v2 = this + 1024;
  }
  *v2 = 0;
  this[1025] = 0;
  return this;
}

char *JSC::ConfigFile::setProcessName(JSC::ConfigFile *this, const char *a2)
{
  return strncpy(_MergedGlobals_42, (const char *)this, 0x80uLL);
}

char *JSC::ConfigFile::setParentProcessName(JSC::ConfigFile *this, const char *a2)
{
  return strncpy(byte_1ECF58E31, (const char *)this, 0x80uLL);
}

void JSC::ConfigFile::parse(JSC::ConfigFile *this)
{
  size_t v2;
  int v3;
  unint64_t v4;
  size_t v5;
  char *v6;
  size_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  char *v18;
  int v19;
  const char *v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  int v30;
  int64_t v31;
  char *v32;
  char *v33;
  int v34;
  int64_t v35;
  char *v36;
  char *v37;
  int64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  int v44;
  int64_t v45;
  char *v46;
  char *v47;
  const char *v48;
  char *v49;
  int v50;
  char *v51;
  int v52;
  char *v53;
  const char *v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  const char *v63;
  char *v64;
  unsigned int v65;
  char *v66;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  const char *v88;
  _DWORD *v89;
  JSC::Options *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  JSC::ConfigFileScanner *v116[2];
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  unsigned int v119;
  char v120;
  regex_t v121;
  char __dst[1025];
  char __s[8];
  unsigned int v124;
  FILE *v125;
  char v126[1024];
  char *__s1;
  char *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)this)
  {
    if (*(_BYTE *)this != 47 && getcwd(__s, 0x401uLL))
    {
      v2 = strlen(__s);
      v3 = __s[v2 - 1];
      v4 = v3 == 47 ? v2 : v2 + 1;
      if (v4 <= 0x400)
      {
        if (v3 != 47)
          *(_WORD *)&__s[strlen(__s)] = 47;
        v5 = strlen(__s);
        strncat(__s, (const char *)this, 1024 - v5);
        strncpy((char *)this, __s, 0x400uLL);
        *((_BYTE *)this + 1024) = 0;
      }
    }
    v6 = strrchr((char *)this, 47);
    if (v6)
    {
      v7 = ((_DWORD)v6 - (_DWORD)this);
      strncpy((char *)this + 1025, (const char *)this, v7);
    }
    else
    {
      *((_BYTE *)this + 1025) = 47;
      v7 = 1;
    }
    *((_BYTE *)this + v7 + 1025) = 0;
  }
  *(_QWORD *)__s = this;
  v124 = 0;
  __s1 = v126;
  v128 = v126;
  v125 = fopen((const char *)this, "r");
  if (!v125)
  {
    WTF::dataLogF((WTF *)"Failed to open file JSC Config file '%s'.\n", v8, *(_QWORD *)__s);
    return;
  }
  bzero(__dst, 0x401uLL);
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 1;
  v116[0] = (JSC::ConfigFileScanner *)__s;
  v116[1] = (JSC::ConfigFileScanner *)&v117;
  v9 = (char *)this + 1025;
  while (1)
  {
    if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
    {
      if (__dst[0])
        WTF::setDataFile((WTF *)__dst, v10);
      v68 = v119;
      if (v119)
      {
        if (byte_1ECF4C090)
        {
          __break(0xC471u);
          JUMPOUT(0x19890725CLL);
        }
        byte_1ECF4C1E0 = 1;
        v87 = v117;
        if (v117)
          goto LABEL_181;
        if ((v119 & 0x80000000) == 0 && v118 && *((_DWORD *)v118 + 1) > v119 + (v119 >> 2))
        {
          if ((*((_BYTE *)v118 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v117, (WTF::AtomStringImpl *)v119, v11, v12, v13, v14, v15, v16);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v117, (WTF::AtomStringImpl *)v119, v11, v12, v13, v14, v15, v16);
          v106 = v117;
          v117 = v118;
          v118 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
            {
              WTF::StringImpl::~StringImpl(v106, v99, v100, v101, v102, v103, v104, v105);
              WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
            }
            else
            {
              *(_DWORD *)v106 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v117);
        v87 = v117;
        if (v117)
LABEL_181:
          *(_DWORD *)v87 += 2;
        v115 = v87;
        WTF::String::utf8((uint64_t *)&v115, 0, v12, v13, v14, v15, v16, &v121, v17);
        v89 = *(_DWORD **)&v121.re_magic;
        if (*(_QWORD *)&v121.re_magic)
          v90 = (JSC::Options *)(*(_QWORD *)&v121.re_magic + 16);
        else
          v90 = 0;
        JSC::Options::setOptions(v90, v88);
        *(_QWORD *)&v121.re_magic = 0;
        if (v89)
        {
          if (*v89 == 1)
            WTF::fastFree((unint64_t)v89, (void *)v68, v11, v12, v13, v14, v15, v16);
          else
            --*v89;
        }
        v115 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
          {
            WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)v68, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
          }
          else
          {
            *(_DWORD *)v87 -= 2;
          }
        }
      }
      goto LABEL_166;
    }
    if (JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
    {
      v18 = __s1;
      if (!strncmp(__s1, "jscOptions", 0xAuLL))
      {
        __s1 = v18 + 10;
        v52 = JSC::ConfigFile::parse(void)::$_1::operator()(v116, 0);
        goto LABEL_132;
      }
    }
    v19 = JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s);
    v21 = __s1;
    if (!v19 || strncmp(__s1, "logFile", 7uLL))
      break;
    __s1 = v21 + 7;
    if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
      goto LABEL_160;
    if (*__s1 != 61)
      goto LABEL_160;
    ++__s1;
    if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
      goto LABEL_160;
    v53 = __s1;
    if (*__s1 != 34)
      goto LABEL_160;
    v54 = ++__s1;
    v55 = strchr(v53 + 1, 34);
    if (!v55)
      goto LABEL_160;
    *v55 = 0;
    __s1 = v55 + 1;
    if (*v54 == 47)
    {
      strncpy(__dst, v54, 0x400uLL);
      goto LABEL_131;
    }
    if (snprintf(__dst, 0x401uLL, "%s/%s", v9, v54) >= 0x401)
      goto LABEL_160;
LABEL_131:
    v52 = 0;
LABEL_132:
    if (v52)
      goto LABEL_160;
  }
  if (!v21)
    goto LABEL_160;
  v22 = 1;
  while (1)
  {
    v23 = v128;
    while (1)
    {
LABEL_25:
      if (v21 == v23)
      {
        while (1)
        {
          v27 = fgets(v126, 1024, v125);
          __s1 = v27;
          if (!v27)
          {
            fclose(v125);
            v21 = __s1;
            if (!__s1)
              goto LABEL_160;
            v23 = v128;
LABEL_41:
            while (2)
            {
              while (2)
              {
                if (v21 != v23)
                {
                  v30 = *v21;
                  if ((v30 - 9) < 5 || v30 == 32)
                  {
                    __s1 = ++v21;
                    continue;
                  }
                  if (!strncmp(v21, "parentProcessName", 0x11uLL))
                  {
                    v28 = v21 + 17;
                    v29 = byte_1ECF58E31;
                    goto LABEL_71;
                  }
LABEL_57:
                  while (2)
                  {
                    while (v21 != v23)
                    {
                      v34 = *v21;
                      if ((v34 - 9) >= 5 && v34 != 32)
                      {
                        if (strncmp(v21, "build", 5uLL))
                          goto LABEL_160;
                        v28 = v21 + 5;
                        v29 = "Release";
                        goto LABEL_71;
                      }
                      __s1 = ++v21;
                    }
LABEL_63:
                    v37 = fgets(v126, 1024, v125);
                    __s1 = v37;
                    if (!v37)
                    {
                      fclose(v125);
                      goto LABEL_160;
                    }
                    v21 = v37;
                    ++v124;
                    v36 = strchr(v37, 35);
                    v128 = v36;
                    if (v36)
                    {
LABEL_65:
                      *v36 = 0;
                      v23 = v128;
                      v21 = __s1;
                    }
                    else
                    {
                      v35 = strlen(v21);
                      v23 = &v21[v35];
                      v128 = &v21[v35];
                      if (v35 >= 1)
                      {
                        v36 = v23 - 1;
                        if (*(v23 - 1) == 10)
                        {
                          v128 = v23 - 1;
                          goto LABEL_65;
                        }
                      }
                    }
                    if (v23 != v21)
                      continue;
                    goto LABEL_63;
                  }
                }
                break;
              }
LABEL_47:
              v33 = fgets(v126, 1024, v125);
              __s1 = v33;
              if (!v33)
              {
                fclose(v125);
                v21 = __s1;
                if (!__s1)
                  goto LABEL_160;
                v23 = v128;
                goto LABEL_57;
              }
              v21 = v33;
              ++v124;
              v32 = strchr(v33, 35);
              v128 = v32;
              if (v32)
              {
LABEL_49:
                *v32 = 0;
                v23 = v128;
                v21 = __s1;
              }
              else
              {
                v31 = strlen(v21);
                v23 = &v21[v31];
                v128 = &v21[v31];
                if (v31 >= 1)
                {
                  v32 = v23 - 1;
                  if (*(v23 - 1) == 10)
                  {
                    v128 = v23 - 1;
                    goto LABEL_49;
                  }
                }
              }
              if (v23 != v21)
                continue;
              goto LABEL_47;
            }
          }
          v21 = v27;
          ++v124;
          v26 = strchr(v27, 35);
          v128 = v26;
          if (!v26)
          {
            v25 = strlen(v21);
            v23 = &v21[v25];
            v128 = &v21[v25];
            if (v25 < 1)
              goto LABEL_34;
            v26 = v23 - 1;
            if (*(v23 - 1) != 10)
              goto LABEL_34;
            v128 = v23 - 1;
          }
          *v26 = 0;
          v23 = v128;
          v21 = __s1;
LABEL_34:
          if (v23 != v21)
            goto LABEL_25;
        }
      }
      v24 = *v21;
      if ((v24 - 9) >= 5 && v24 != 32)
        break;
      __s1 = ++v21;
    }
    if (strncmp(v21, "processName", 0xBuLL))
      goto LABEL_41;
    v28 = v21 + 11;
    v29 = _MergedGlobals_42;
LABEL_71:
    __s1 = v28;
LABEL_72:
    if (v28 == v23)
      break;
    v41 = *v28;
    if ((v41 - 9) < 5 || v41 == 32)
    {
      ++v28;
      goto LABEL_71;
    }
    if (strncmp(v28, "==", 2uLL))
      goto LABEL_92;
    __s1 = v28 + 2;
    if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
      goto LABEL_111;
    v21 = __s1;
    if (*__s1 == 34)
    {
      v21 = __s1 + 1;
      __s1 = v21;
      v42 = strchr(v21, 34);
      if (v42)
      {
        *v42 = 0;
        __s1 = v42 + 1;
        v43 = strcmp(v21, v29);
        goto LABEL_117;
      }
    }
LABEL_112:
    if (!v21)
      goto LABEL_160;
  }
  while (1)
  {
    v40 = fgets(v126, 1024, v125);
    __s1 = v40;
    if (!v40)
      break;
    v28 = v40;
    ++v124;
    v39 = strchr(v40, 35);
    v128 = v39;
    if (!v39)
    {
      v38 = strlen(v28);
      v23 = &v28[v38];
      v128 = &v28[v38];
      if (v38 < 1)
        goto LABEL_80;
      v39 = v23 - 1;
      if (*(v23 - 1) != 10)
        goto LABEL_80;
      v128 = v23 - 1;
    }
    *v39 = 0;
    v23 = v128;
    v28 = __s1;
LABEL_80:
    if (v23 != v28)
      goto LABEL_72;
  }
  fclose(v125);
  v28 = __s1;
  if (!__s1)
    goto LABEL_160;
  v23 = v128;
LABEL_92:
  while (2)
  {
    if (v28 == v23)
    {
      while (1)
      {
        v47 = fgets(v126, 1024, v125);
        __s1 = v47;
        if (!v47)
        {
          fclose(v125);
          goto LABEL_111;
        }
        v28 = v47;
        ++v124;
        v46 = strchr(v47, 35);
        v128 = v46;
        if (!v46)
        {
          v45 = strlen(v28);
          v23 = &v28[v45];
          v128 = &v28[v45];
          if (v45 < 1)
            goto LABEL_101;
          v46 = v23 - 1;
          if (*(v23 - 1) != 10)
            goto LABEL_101;
          v128 = v23 - 1;
        }
        *v46 = 0;
        v23 = v128;
        v28 = __s1;
LABEL_101:
        if (v23 != v28)
          goto LABEL_92;
      }
    }
    v44 = *v28;
    if ((v44 - 9) < 5 || v44 == 32)
    {
      __s1 = ++v28;
      continue;
    }
    break;
  }
  if (strncmp(v28, "=~", 2uLL)
    || (__s1 = v28 + 2, !JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s)))
  {
LABEL_111:
    v21 = __s1;
    goto LABEL_112;
  }
  v21 = __s1;
  if (*__s1 != 47)
    goto LABEL_112;
  v48 = __s1 + 1;
  v49 = strchr(__s1 + 1, 47);
  if (!v49)
    goto LABEL_111;
  *v49 = 0;
  __s1 = v49 + 1;
  if (v49[1] == 105)
  {
    __s1 = v49 + 2;
    v50 = 3;
  }
  else
  {
    v50 = 1;
  }
  if (regcomp(&v121, v48, v50))
    goto LABEL_111;
  v43 = regexec(&v121, v29, 0, 0, 0);
LABEL_117:
  if (v43)
    v22 = 2;
  if (JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
  {
    v51 = __s1;
    if (!strncmp(__s1, "&&", 2uLL))
    {
      v21 = v51 + 2;
      __s1 = v21;
      goto LABEL_112;
    }
  }
  if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s) || *__s1 != 123)
    goto LABEL_160;
  v56 = 0;
  ++__s1;
  while (!v56)
  {
    if (!JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
      goto LABEL_160;
    if (JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s))
    {
      v57 = __s1;
      if (!strncmp(__s1, "jscOptions", 0xAuLL))
      {
        __s1 = v57 + 10;
        v56 = JSC::ConfigFile::parse(void)::$_1::operator()(v116, v22);
        continue;
      }
    }
    if (JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s)
      && (v58 = __s1, !strncmp(__s1, "logFile", 7uLL)))
    {
      __s1 = v58 + 7;
      v60 = JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s);
      v56 = 1;
      if (v60)
      {
        if (*__s1 == 61)
        {
          ++__s1;
          v61 = JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s);
          v56 = 1;
          if (v61)
          {
            v62 = __s1;
            if (*__s1 == 34)
            {
              v63 = ++__s1;
              v64 = strchr(v62 + 1, 34);
              v56 = 1;
              if (v64)
              {
                *v64 = 0;
                __s1 = v64 + 1;
                if (v22 != 2)
                {
                  if (*v63 == 47)
                  {
                    strncpy(__dst, v63, 0x400uLL);
                  }
                  else
                  {
                    v65 = snprintf(__dst, 0x401uLL, "%s/%s", v9, v63);
                    v56 = 1;
                    if (v65 >= 0x401)
                      continue;
                  }
                }
                v56 = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      v59 = JSC::ConfigFileScanner::fillBufferIfNeeded((JSC::ConfigFileScanner *)__s);
      v56 = 1;
      if (v59 && *__s1 == 125)
      {
        ++__s1;
        v56 = 2;
      }
    }
  }
  if (v56 == 2)
    goto LABEL_131;
LABEL_160:
  v66 = __s1;
  if (__s1 == v128 || __s1 == 0)
    v66 = "";
  WTF::dataLogF((WTF *)"Error in JSC Config file on or near line %u, parsing '%s'\n", v20, v124, v66);
LABEL_166:
  v69 = v118;
  v118 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)v68, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = v117;
  v117 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, (WTF::AtomStringImpl *)v68, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
}

void JSC::processConfigFile(JSC *this, const char *a2, const char *a3, const char *a4)
{
  unint64_t v4;
  _QWORD v5[3];
  const char *v6;
  const char *v7;
  JSC *v8;
  _QWORD **v9;
  _QWORD *v10;

  v8 = this;
  v6 = a3;
  v7 = a2;
  if (this && *(_BYTE *)this)
  {
    v5[0] = &v8;
    v5[1] = &v7;
    v5[2] = &v6;
    v4 = atomic_load(&JSC::processConfigFile(char const*,char const*,char const*)::processConfigFileOnceFlag);
    if (v4 != -1)
    {
      v10 = v5;
      v9 = &v10;
      std::__call_once(&JSC::processConfigFile(char const*,char const*,char const*)::processConfigFileOnceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::processConfigFile(char const*,char const*,char const*)::$_0 &&>>);
    }
  }
}

void JSC::ConsoleClient::printConsoleMessage(WTF::AtomStringImpl *a1, uint64_t a2, uint64_t a3, uint64_t *a4, WTF::StringBuilder *a5, const WTF::String *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  _DWORD *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _WORD *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  char v92;
  _DWORD *v93;

  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 1;
  if (*(_QWORD *)a5)
  {
    if (*(_DWORD *)(*(_QWORD *)a5 + 4))
    {
      JSC::appendURLAndPosition((JSC *)&v89, a5, a6, a7, (uint64_t)a5, (uint64_t)a6, a7, a8);
      if ((v91 & 0x80000000) == 0)
      {
        v69 = v90;
        if ((v90 || (v69 = v89) != 0) && (*((_BYTE *)v69 + 16) & 4) == 0)
        {
          v70 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v89, (WTF::AtomStringImpl *)(v91 + 2), v67, v68, (uint64_t)a5, (uint64_t)a6, a7, a8);
          if (v70)
            *v70 = 2097210;
        }
        else
        {
          v78 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v89, (WTF::AtomStringImpl *)(v91 + 2), v67, v68, (uint64_t)a5, (uint64_t)a6, a7, a8);
          if (v78)
            *v78 = 8250;
        }
      }
    }
  }
  JSC::appendMessagePrefix((uint64_t)&v89, a1, a2, a3, (uint64_t)a5, (uint64_t)a6, a7, a8);
  LOBYTE(v88) = 32;
  v93 = (_DWORD *)*a4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v89, (char *)&v88, (uint64_t *)&v93, v12, v13, v14, v15, v16);
  v24 = v89;
  if (v89)
    goto LABEL_3;
  if ((v91 & 0x80000000) == 0 && v90 && *((_DWORD *)v90 + 1) > v91 + (v91 >> 2))
  {
    if ((*((_BYTE *)v90 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v89, (WTF::AtomStringImpl *)v91, v17, v18, v19, v20, v21, v22);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v89, (WTF::AtomStringImpl *)v91, v17, v18, v19, v20, v21, v22);
    v79 = v89;
    v89 = v90;
    v90 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v89);
  v24 = v89;
  if (v89)
LABEL_3:
    *(_DWORD *)v24 += 2;
  v88 = v24;
  WTF::String::utf8((uint64_t *)&v88, 0, v18, v19, v20, v21, v22, &v93, v23);
  v32 = v93;
  v33 = (_BYTE)v93 + 16;
  if (!v93)
    v33 = 0;
  WTFLogAlways("%s", v25, v26, v27, v28, v29, v30, v31, v33);
  v93 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::fastFree((unint64_t)v32, v34, v35, v36, v37, v38, v39, v40);
    else
      --*v32;
  }
  v88 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v41 = v90;
  v90 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = v89;
  v89 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
}

void JSC::appendURLAndPosition(JSC *this, WTF::StringBuilder *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  BOOL v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t *v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  char v29;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v9 = a3;
    v10 = *(unsigned int *)(v8 + 4);
    if ((_DWORD)v10)
    {
      v11 = a4;
      if (*((_DWORD *)this + 4))
        v13 = 0;
      else
        v13 = *((_QWORD *)this + 1) == 0;
      if (v13)
      {
        *(_DWORD *)v8 += 2;
        v15 = *(WTF::StringImpl **)this;
        *(_QWORD *)this = v8;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::~StringImpl(v15, a2, v10, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        v16 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          LODWORD(v16) = *(_DWORD *)(v16 + 4);
        *((_DWORD *)this + 4) = v16;
      }
      else
      {
        v25 = *(int8x16_t **)(v8 + 8);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          WTF::StringBuilder::append((uint64_t)this, v25, v10, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::append((uint64_t)this, v25, v10, a4, a5, a6, a7, a8);
      }
      if (v9)
      {
        v27 = 58;
        v26 = v9;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)this, &v27, &v26, a4, a5, a6, a7, a8);
      }
      if (v11)
      {
        v29 = 58;
        v28 = v11;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)this, &v29, &v28, a4, a5, a6, a7, a8);
      }
    }
  }
}

void JSC::appendMessagePrefix(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v8 = a4;
  v9 = a3;
  if (a2 <= 0x10 && ((0x1FFF7u >> (char)a2) & 1) != 0)
  {
    v12 = dword_199157670[(char)a2];
    v13 = off_1E35989A0[(char)a2];
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v11 = 2;
    *(_DWORD *)(v11 + 4) = v12;
    *(_QWORD *)(v11 + 8) = v13;
    *(_DWORD *)(v11 + 16) = 4;
  }
  else
  {
    v11 = 0;
  }
  v14 = v9 - 1;
  if ((v9 - 1) > 0xC)
  {
    v17 = 0;
  }
  else
  {
    v15 = dword_1991576B4[v14];
    v16 = off_1E3598A28[v14];
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v17 = 2;
    *(_DWORD *)(v17 + 4) = v15;
    *(_QWORD *)(v17 + 8) = v16;
    *(_DWORD *)(v17 + 16) = 4;
  }
  v18 = "DEBUG";
  v19 = 5;
  switch(v8)
  {
    case 0:
      if (v9)
        goto LABEL_10;
      v18 = "LOG";
      v19 = 3;
      goto LABEL_15;
    case 1:
      v18 = "WARN";
      goto LABEL_14;
    case 2:
      v18 = "ERROR";
      goto LABEL_15;
    case 3:
      goto LABEL_15;
    case 4:
      v18 = "INFO";
LABEL_14:
      v19 = 4;
LABEL_15:
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v20 = 2;
      *(_DWORD *)(v20 + 4) = v19;
      *(_QWORD *)(v20 + 8) = v18;
      *(_DWORD *)(v20 + 16) = 4;
      break;
    default:
LABEL_10:
      v20 = 0;
      break;
  }
  v21 = *(_DWORD *)(a1 + 16);
  if ((v21 & 0x80000000) == 0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    if ((v22 || (v22 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v22 + 16) & 4) == 0)
    {
      v23 = WTF::StringBuilder::extendBufferForAppending<char16_t>(a1, (WTF::AtomStringImpl *)(v21 + 7), a3, a4, a5, a6, a7, a8);
      if (v23)
      {
        *(_QWORD *)v23 = 0x53004E004F0043;
        *(_DWORD *)(v23 + 8) = 4980815;
        *(_WORD *)(v23 + 12) = 69;
      }
    }
    else
    {
      v24 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)(v21 + 7), a3, a4, a5, a6, a7, a8);
      if (v24)
      {
        *(_DWORD *)((char *)v24 + 3) = 1162628947;
        *v24 = 1397641027;
      }
    }
  }
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    v50 = 32;
    v49 = v11;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v50, &v49, a4, a5, a6, a7, a8);
  }
  if (v17 && *(_DWORD *)(v17 + 4))
  {
    v50 = 32;
    v49 = v17;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v50, &v49, a4, a5, a6, a7, a8);
  }
  if (v20)
  {
    if (*(_DWORD *)(v20 + 4))
    {
      v50 = 32;
      v49 = v20;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v50, &v49, a4, a5, a6, a7, a8);
    }
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      if (!v11)
        return;
      goto LABEL_31;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!v11)
    return;
LABEL_31:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
}

void JSC::ConsoleClient::printConsoleMessageWithArguments(WTF::AtomStringImpl *a1, uint64_t a2, uint64_t a3, JSC::VM **this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSGlobalObject **v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  char v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  int v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  unsigned int v95;
  unint64_t v96;
  BOOL v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _WORD *v110;
  unsigned int v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  char *v120;
  _BYTE *v121;
  _BYTE *v122;
  size_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  BOOL v132;
  int v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  char v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int128 *v203;
  unsigned __int128 *v204;
  unsigned __int128 v205;
  char v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  Inspector::ScriptCallStack *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  _DWORD *v229;
  _WORD *v230;
  WTF::AtomStringImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  unsigned int v251;
  char v252;
  WTF::StringImpl *v253[3];
  uint64_t v254;
  int8x16_t v255[2];
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 4)
    v13 = 200;
  else
    v13 = 1;
  Inspector::createScriptCallStackForConsole(this, (JSC::JSGlobalObject *)v13, a3, (uint64_t)this, a5, a6, a7, a8, &v254, a9);
  if (!*(_DWORD *)(v254 + 20))
  {
    __break(0xC471u);
LABEL_197:
    JUMPOUT(0x1989082C0);
  }
  v18 = *(unsigned int **)(v254 + 8);
  memset(v253, 0, 21);
  v19 = *((_QWORD *)v18 + 1);
  if (v19)
  {
    if (*(_DWORD *)(v19 + 4))
    {
      JSC::appendURLAndPosition((JSC *)v253, (WTF::StringBuilder *)(v18 + 2), (const WTF::String *)v18[7], v18[8], v14, v15, v16, v17);
      if (((uint64_t)v253[2] & 0x80000000) == 0)
      {
        v228 = v253[1];
        if ((v253[1] || (v228 = v253[0]) != 0) && (*((_BYTE *)v228 + 16) & 4) == 0)
        {
          v229 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v253, (WTF::AtomStringImpl *)(LODWORD(v253[2]) + 2), v226, v227, v14, v15, v16, v17);
          if (v229)
            *v229 = 2097210;
        }
        else
        {
          v230 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v253, (WTF::AtomStringImpl *)(LODWORD(v253[2]) + 2), v226, v227, v14, v15, v16, v17);
          if (v230)
            *v230 = 8250;
        }
      }
    }
  }
  JSC::appendMessagePrefix((uint64_t)v253, a1, a2, a3, v14, v15, v16, v17);
  if (*(_DWORD *)(*(_QWORD *)a5 + 28))
  {
    v28 = 0;
    while (1)
    {
      v255[0].i8[0] = 32;
      if (v253[1]
        && ((v29 = LODWORD(v253[2]), LODWORD(v253[2]) < *((_DWORD *)v253[1] + 1)) ? (v30 = v253[0] == 0) : (v30 = 0),
            v30))
      {
        v31 = *((_DWORD *)v253[1] + 4);
        v32 = *((_QWORD *)v253[1] + 1);
        ++LODWORD(v253[2]);
        if ((v31 & 4) != 0)
          *(_BYTE *)(v32 + v29) = 32;
        else
          *(_WORD *)(v32 + 2 * v29) = 32;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)v253, v255, 1uLL, v21, v22, v23, v24, v25);
      }
      v33 = *(_QWORD *)a5;
      if (v28 >= *(unsigned int *)(*(_QWORD *)a5 + 28))
      {
        __break(0xC471u);
        goto LABEL_197;
      }
      v34 = *(JSC::JSGlobalObject ***)(v33 + 8);
      v35 = *v34;
      v36 = *((_QWORD *)*v34 + 7);
      v37 = *(unint64_t **)(*(_QWORD *)(v33 + 16) + 8 * v28);
      if (v37)
      {
        v38 = *v37;
        v249 = (WTF::StringImpl *)v38;
        if ((v38 & 0xFFFE000000000002) != 0)
        {
LABEL_54:
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v249, v35, v20, v21, v22, v23, v24, v25, (int **)v255);
          goto LABEL_24;
        }
      }
      else
      {
        v38 = 0;
        v249 = 0;
      }
      if (*(_BYTE *)(v38 + 5) != 2)
        goto LABEL_54;
      v39 = *(int **)(v38 + 8);
      if ((v39 & 1) != 0)
        break;
      if (v39)
        goto LABEL_22;
LABEL_23:
      v255[0].i64[0] = (uint64_t)v39;
LABEL_24:
      v40 = (WTF::StringImpl *)v255[0].i64[0];
      if (!LODWORD(v253[2]) && !v253[1])
      {
        if (v255[0].i64[0])
          *(_DWORD *)v255[0].i64[0] += 2;
        v41 = v253[0];
        v253[0] = v40;
        if (v41)
        {
          if (*(_DWORD *)v41 != 2)
          {
            *(_DWORD *)v41 -= 2;
            goto LABEL_31;
          }
          WTF::StringImpl::~StringImpl(v41, v35, (uint64_t)v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
          v40 = (WTF::StringImpl *)v255[0].i64[0];
          if (!v255[0].i64[0])
          {
LABEL_33:
            LODWORD(v253[2]) = (_DWORD)v40;
            goto LABEL_34;
          }
        }
        else
        {
LABEL_31:
          if (!v40)
            goto LABEL_33;
        }
        LODWORD(v40) = *((_DWORD *)v40 + 1);
        goto LABEL_33;
      }
      if (v255[0].i64[0])
      {
        v61 = *(int8x16_t **)(v255[0].i64[0] + 8);
        v62 = *(unsigned int *)(v255[0].i64[0] + 4);
        if ((*(_BYTE *)(v255[0].i64[0] + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)v253, v61, v62, v21, v22, v23, v24, v25);
          goto LABEL_34;
        }
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      WTF::StringBuilder::append((uint64_t)v253, v61, v62, v21, v22, v23, v24, v25);
LABEL_34:
      v42 = (WTF::StringImpl *)v255[0].i64[0];
      v255[0].i64[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, v35, (uint64_t)v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      *(_QWORD *)(v36 + 16) = 0;
      v43 = (unsigned int *)(v36 + 80);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 & 0xFFFFFFEF, v43));
      if (++v28 >= *(unsigned int *)(*(_QWORD *)a5 + 28))
        goto LABEL_55;
    }
    v39 = *JSC::JSRopeString::resolveRope(v38, v35, (uint64_t)v20, v21, v26, v22, v23, v24, v25);
    if (!v39)
      goto LABEL_23;
LABEL_22:
    *v39 += 2;
    goto LABEL_23;
  }
LABEL_55:
  if (((uint64_t)v253[2] & 0x80000000) != 0)
  {
    WTFLogAlways("Console message exceeded maximum length.", LODWORD(v253[2]), (uint64_t)v20, v21, v22, v23, v24, v25, v247);
  }
  else
  {
    v63 = v253[0];
    if (v253[0])
      goto LABEL_57;
    if (v253[1] && *((_DWORD *)v253[1] + 1) > (LODWORD(v253[2]) + (LODWORD(v253[2]) >> 2)))
    {
      if ((*((_BYTE *)v253[1] + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v253, (WTF::AtomStringImpl *)LODWORD(v253[2]), (uint64_t)v20, v21, v22, v23, v24, v25);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v253, (WTF::AtomStringImpl *)LODWORD(v253[2]), (uint64_t)v20, v21, v22, v23, v24, v25);
      v238 = v253[0];
      v253[0] = v253[1];
      v253[1] = 0;
      if (v238)
      {
        if (*(_DWORD *)v238 == 2)
        {
          WTF::StringImpl::~StringImpl(v238, v231, v232, v233, v234, v235, v236, v237);
          WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
        }
        else
        {
          *(_DWORD *)v238 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)v253);
    v63 = v253[0];
    if (v253[0])
LABEL_57:
      *(_DWORD *)v63 += 2;
    v249 = v63;
    WTF::String::utf8((uint64_t *)&v249, 0, v21, v22, v23, v24, v25, v255, v27);
    v71 = (_DWORD *)v255[0].i64[0];
    v72 = v255[0].i8[0] + 16;
    if (!v255[0].i64[0])
      v72 = 0;
    WTFLogAlways("%s", v64, v65, v66, v67, v68, v69, v70, v72);
    v255[0].i64[0] = 0;
    if (v71)
    {
      if (*v71 == 1)
        WTF::fastFree((unint64_t)v71, v73, v74, v75, v76, v77, v78, v79);
      else
        --*v71;
    }
    v249 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
  }
  if ((_DWORD)a2 == 4)
  {
    v88 = v254;
    if (*(_DWORD *)(v254 + 20))
    {
      v89 = 0;
      do
      {
        v90 = *(_QWORD *)(v88 + 8);
        v91 = *(WTF::StringImpl **)(v90 + 40 * v89);
        if (v91)
        {
          v92 = *((_DWORD *)v91 + 1);
          *(_DWORD *)v91 += 2;
          if (v92)
          {
            v93 = (uint64_t)v91;
          }
          else
          {
            v93 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v93 = 0x900000002;
            *(_QWORD *)(v93 + 8) = "(unknown)";
            *(_DWORD *)(v93 + 16) = 4;
            if (*(_DWORD *)v91 == 2)
            {
              WTF::StringImpl::~StringImpl(v91, v94, v74, v75, v76, v77, v78, v79);
              WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
            }
            else
            {
              *(_DWORD *)v91 -= 2;
            }
          }
        }
        else
        {
          v93 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v93 = 0x900000002;
          *(_QWORD *)(v93 + 8) = "(unknown)";
          *(_DWORD *)(v93 + 16) = 4;
        }
        v95 = 0;
        v249 = 0;
        v250 = 0;
        v251 = 0;
        v96 = v89;
        v252 = 1;
        do
        {
          ++v95;
          v97 = v96 > 9;
          v96 /= 0xAuLL;
        }
        while (v97);
        v98 = *(_DWORD *)(v93 + 4);
        if (v98 >= 0xFFFFFFFC)
          v98 = -4;
        v99 = v98 + v95 + 3;
        if (v99 < v95)
          v100 = 0xFFFFFFFFLL;
        else
          v100 = v99;
        if ((*(_BYTE *)(v93 + 16) & 4) != 0)
        {
          v114 = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v249, (WTF::AtomStringImpl *)v100, v74, v75, v76, v77, v78, v79);
          if (v114)
          {
            v115 = v114;
            v116 = 0;
            v117 = v89;
            do
            {
              v255[1].i8[v116-- + 8] = (v117 % 0xA) | 0x30;
              v97 = v117 > 9;
              v117 /= 0xAuLL;
            }
            while (v97);
            if (v116 + 26 <= 25)
              memcpy(v114, (char *)&v255[1].u64[1] + v116 + 1, -v116);
            v118 = 0;
            v119 = v89;
            do
            {
              ++v118;
              v97 = v119 > 9;
              v119 /= 0xAuLL;
            }
            while (v97);
            v120 = &v115[v118];
            *(_WORD *)v120 = 8250;
            v121 = v120 + 2;
            v122 = *(_BYTE **)(v93 + 8);
            v123 = *(unsigned int *)(v93 + 4);
            if ((*(_BYTE *)(v93 + 16) & 4) != 0)
            {
              if ((_DWORD)v123 == 1)
              {
                *v121 = *v122;
              }
              else if ((_DWORD)v123)
              {
                memcpy(v121, v122, v123);
              }
            }
            else
            {
              if (v123 < 0x10)
              {
                v203 = (unsigned __int128 *)v121;
              }
              else
              {
                v203 = (unsigned __int128 *)&v121[v123 & 0xFFFFFFF0];
                v204 = (unsigned __int128 *)v121;
                do
                {
                  v205 = (unsigned __int128)vld2q_s8(v122);
                  v122 += 32;
                  *v204++ = v205;
                }
                while (v204 != v203);
              }
              while (v203 != (unsigned __int128 *)&v121[v123])
              {
                v206 = *v122;
                v122 += 2;
                *(_BYTE *)v203 = v206;
                v203 = (unsigned __int128 *)((char *)v203 + 1);
              }
            }
            v121[*(unsigned int *)(v93 + 4)] = 40;
          }
        }
        else
        {
          v101 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v249, (WTF::AtomStringImpl *)v100, v74, v75, v76, v77, v78, v79);
          if (v101)
          {
            v106 = -1;
            v107 = 24;
            v108 = v89;
            do
            {
              v109 = v106;
              v255[0].i8[v107--] = (v108 % 0xA) | 0x30;
              --v106;
              v97 = v108 > 9;
              v108 /= 0xAuLL;
            }
            while (v97);
            if (v107 + 2 <= 25)
            {
              v110 = (_WORD *)v101;
              do
                *v110++ = v255[1].u8[v109 + 9];
              while (!__CFADD__(v109++, 1));
            }
            v112 = 0;
            v113 = v89;
            do
            {
              ++v112;
              v97 = v113 > 9;
              v113 /= 0xAuLL;
            }
            while (v97);
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((char *)(v101 + 2 * v112), (int8x16_t *)": ", 2, v93, 40);
          }
        }
        JSC::appendURLAndPosition((JSC *)&v249, (WTF::StringBuilder *)(v90 + 40 * v89 + 8), (const WTF::String *)*(unsigned int *)(v90 + 40 * v89 + 28), *(unsigned int *)(v90 + 40 * v89 + 32), v102, v103, v104, v105);
        v255[0].i8[0] = 41;
        if (v250 && ((v131 = v251, v251 < *((_DWORD *)v250 + 1)) ? (v132 = v249 == 0) : (v132 = 0), v132))
        {
          v133 = *((_DWORD *)v250 + 4);
          v134 = *((_QWORD *)v250 + 1);
          ++v251;
          if ((v133 & 4) != 0)
            *(_BYTE *)(v134 + v131) = 41;
          else
            *(_WORD *)(v134 + 2 * v131) = 41;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v249, v255, 1uLL, v125, v126, v127, v128, v129);
        }
        v135 = v249;
        if (v249)
          goto LABEL_117;
        if ((v251 & 0x80000000) == 0 && v250 && *((_DWORD *)v250 + 1) > v251 + (v251 >> 2))
        {
          if ((*((_BYTE *)v250 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v249, (WTF::AtomStringImpl *)v251, v124, v125, v126, v127, v128, v129);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v249, (WTF::AtomStringImpl *)v251, v124, v125, v126, v127, v128, v129);
          v194 = v249;
          v249 = v250;
          v250 = 0;
          if (v194)
          {
            if (*(_DWORD *)v194 == 2)
            {
              WTF::StringImpl::~StringImpl(v194, v187, v188, v189, v190, v191, v192, v193);
              WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
            }
            else
            {
              *(_DWORD *)v194 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v249);
        v135 = v249;
        if (v249)
LABEL_117:
          *(_DWORD *)v135 += 2;
        v248 = v135;
        WTF::String::utf8((uint64_t *)&v248, 0, v125, v126, v127, v128, v129, v255, v130);
        v143 = (_DWORD *)v255[0].i64[0];
        v144 = v255[0].i8[0] + 16;
        if (!v255[0].i64[0])
          v144 = 0;
        WTFLogAlways("%s", v136, v137, v138, v139, v140, v141, v142, v144);
        v255[0].i64[0] = 0;
        if (v143)
        {
          if (*v143 == 1)
            WTF::fastFree((unint64_t)v143, v73, v74, v75, v76, v77, v78, v79);
          else
            --*v143;
        }
        v248 = 0;
        if (v135)
        {
          if (*(_DWORD *)v135 == 2)
          {
            WTF::StringImpl::~StringImpl(v135, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
          }
          else
          {
            *(_DWORD *)v135 -= 2;
          }
        }
        v145 = v250;
        v250 = 0;
        if (v145)
        {
          if (*(_DWORD *)v145 == 2)
          {
            WTF::StringImpl::~StringImpl(v145, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
          }
          else
          {
            *(_DWORD *)v145 -= 2;
          }
        }
        v146 = v249;
        v249 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
          {
            WTF::StringImpl::~StringImpl(v146, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
            WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
          }
          else
          {
            *(_DWORD *)v146 -= 2;
          }
        }
        if (*(_DWORD *)v93 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v93, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
          WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        }
        else
        {
          *(_DWORD *)v93 -= 2;
        }
        ++v89;
        v88 = v254;
      }
      while (v89 < *(unsigned int *)(v254 + 20));
    }
  }
  v207 = v253[1];
  v253[1] = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
    {
      WTF::StringImpl::~StringImpl(v207, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v207 -= 2;
    }
  }
  v208 = v253[0];
  v253[0] = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
    {
      WTF::StringImpl::~StringImpl(v208, (WTF::AtomStringImpl *)v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v208 -= 2;
    }
  }
  v209 = (Inspector::ScriptCallStack *)v254;
  v254 = 0;
  if (v209)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v209);
}

uint64_t JSC::ConsoleClient::logWithLevel(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(*(_QWORD *)a3 + 28))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 0, a4, a2, a3);
  return result;
}

void JSC::ConsoleClient::clear(JSC::ConsoleClient *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Inspector::ScriptArguments *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  v28 = Inspector::ScriptArguments::ScriptArguments(v4, (unint64_t)a2, (uint64_t *)&v26, v5, v6, v7, v8, v9);
  (*(void (**)(JSC::ConsoleClient *, uint64_t, _QWORD, JSC::JSGlobalObject *, uint64_t *))(*(_QWORD *)this
                                                                                                  + 16))(this, 8, 0, a2, &v28);
  v17 = (Inspector::ScriptArguments *)v28;
  v28 = 0;
  if (v17)
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v17, v10, v11, v12, v13, v14, v15, v16);
  v18 = v26;
  if (HIDWORD(v27))
  {
    v19 = 8 * HIDWORD(v27);
    v20 = v26;
    do
    {
      v21 = *(_QWORD *)v20;
      if (*(_QWORD *)v20)
      {
        v22 = (uint64_t *)(v21 - 16);
        v23 = *(_QWORD *)(((v21 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v24 = *(uint64_t **)(v21 - 8);
        if (v24)
        {
          v25 = *v22;
          *v24 = *v22;
          *(_QWORD *)(v25 + 8) = v24;
          *v22 = 0;
          v22[1] = 0;
        }
        *v22 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;
        *(_QWORD *)v20 = 0;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v19 -= 8;
    }
    while (v19);
  }
  if (v18)
    WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::ConsoleClient::assertion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9, 2, a2, a3);
}

void WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::add<JSC::SourceCodeValue const&>(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v11 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    || (WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::rehash(a2, 8u, 0), (v11 = *(_QWORD *)a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a3 + 32);
  for (i = 1; ; ++i)
  {
    v16 = v14 & v12;
    v17 = v11 + 56 * (v14 & v12);
    if (!*(_QWORD *)v17)
    {
      if (v13)
      {
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        --*(_DWORD *)(*(_QWORD *)a2 - 16);
        v17 = v13;
      }
      v18 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        ++*(_DWORD *)(v18 + 8);
      *(_QWORD *)v17 = v18;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(a3 + 8);
      v19 = *(_DWORD **)(a3 + 16);
      if (v19)
        *v19 += 2;
      v20 = *(WTF::StringImpl **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v21 = *(_QWORD *)(a3 + 24);
      *(_DWORD *)(v17 + 32) = *(_DWORD *)(a3 + 32);
      *(_QWORD *)(v17 + 24) = v21;
      v22 = (_QWORD **)(v17 + 40);
      v23 = *a4;
      if (*a4)
      {
        v26 = *v23;
        v25 = (unint64_t)(v23 - 2);
        v24 = v26;
        v27 = *v22;
        if (!*v22)
        {
          v28 = *(uint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
          v29 = *v28;
          v30 = *(_QWORD **)(*v28 + 712);
          if (!v30)
          {
            v55 = v24;
            JSC::HandleSet::grow((JSC::HandleSet *)(v29 + 672), (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            v24 = v55;
            v30 = *(_QWORD **)(v29 + 712);
          }
          *(_QWORD *)(v29 + 712) = *v30;
          v30[2] = 0;
          v27 = v30 + 2;
          *v30 = 0;
          v30[1] = 0;
          *v22 = v30 + 2;
        }
        v31 = (unint64_t)(v27 - 2);
        if ((v24 != 0) != (*v27 != 0))
        {
          if (v24)
          {
            v32 = *(unint64_t **)((v31 & 0xFFFFFFFFFFFFF000) + 0x10);
            v33 = v32[3];
            v32 += 3;
            *(_QWORD *)v31 = v33;
            *(v27 - 1) = v32;
            *v32 = v31;
            *(_QWORD *)(v33 + 8) = v31;
          }
          else
          {
            v54 = *(_QWORD *)v31;
            v53 = (_QWORD *)*(v27 - 1);
            *v53 = *(_QWORD *)v31;
            *(_QWORD *)(v54 + 8) = v53;
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
            v27 = *v22;
          }
        }
        *v27 = v24;
      }
      else
      {
        JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear((uint64_t *)(v17 + 40));
      }
      *(_QWORD *)(v17 + 48) = a4[1];
      v34 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v35 = *(_DWORD *)(v34 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v34 - 12) = v35;
      v36 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v37 = *(_DWORD *)(v36 - 12);
      else
        v37 = 0;
      v38 = (*(_DWORD *)(v36 - 16) + v37);
      v39 = *(unsigned int *)(v36 - 4);
      if (v39 > 0x400)
      {
        if (v39 > 2 * v38)
          goto LABEL_34;
      }
      else if (3 * v39 > 4 * v38)
      {
LABEL_34:
        v40 = a1;
        v41 = v36 + 56 * v39;
        v42 = 1;
        goto LABEL_35;
      }
      v17 = WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::expand((uint64_t *)a2, v17);
      v36 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        LODWORD(v39) = *(_DWORD *)(v36 - 4);
      else
        LODWORD(v39) = 0;
      goto LABEL_34;
    }
    if (*(_QWORD *)v17 != -1)
      break;
    v13 = v11 + 56 * v16;
LABEL_8:
    v14 = i + v16;
  }
  if (!JSC::SourceCodeKey::operator==((_QWORD *)(v11 + 56 * v16), a3, (const WTF::StringImpl *)a3))
    goto LABEL_8;
  v51 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v52 = *(_DWORD *)(v51 - 4);
  else
    v52 = 0;
  v40 = a1;
  v42 = 0;
  v41 = v51 + 56 * v52;
LABEL_35:
  *(_QWORD *)v40 = v17;
  *(_QWORD *)(v40 + 8) = v41;
  *(_BYTE *)(v40 + 16) = v42;
}

uint64_t WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::rehash(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;

  v4 = a1;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  if (a2)
  {
    v16 = a2;
    v17 = (_QWORD *)(v8 + 56);
    do
    {
      *(v17 - 5) = 0;
      *(v17 - 4) = 0;
      *((_DWORD *)v17 - 4) = 0;
      *(v17 - 3) = 0;
      *v17 = 0;
      v17 += 7;
      --v16;
    }
    while (v16);
  }
  *v4 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*v4 - 8) = a2 - 1;
  *(_DWORD *)(*v4 - 16) = 0;
  *(_DWORD *)(*v4 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6;
    v98 = v6;
    v99 = v5;
    v100 = v4;
    do
    {
      v21 = v5 + 56 * v18;
      if (*(_QWORD *)v21)
      {
        if (*(_QWORD *)v21 != -1)
        {
          v22 = *v4;
          if (*v4)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = 0;
          v25 = *(_DWORD *)(v21 + 32);
          do
          {
            v26 = v25 & v23;
            v27 = v22 + 56 * (v25 & v23);
            v25 = ++v24 + (v25 & v23);
          }
          while (*(_QWORD *)v27);
          v28 = v22 + 56 * v26;
          v31 = *(_QWORD *)(v28 + 40);
          v30 = (_QWORD *)(v28 + 40);
          v29 = v31;
          if (v31)
          {
            v59 = (uint64_t *)(v29 - 16);
            v60 = *(_QWORD *)(((v29 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v61 = *(uint64_t **)(v29 - 8);
            if (v61)
            {
              v62 = *v59;
              *v61 = *v59;
              *(_QWORD *)(v62 + 8) = v61;
              *v59 = 0;
              v59[1] = 0;
            }
            *v59 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v60 + 40) = v59;
            *v30 = 0;
          }
          v32 = *(WTF::StringImpl **)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
              v20 = v98;
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          v33 = *(_DWORD **)v27;
          *(_QWORD *)v27 = 0;
          if (v33)
          {
            if (v33[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
              v20 = v98;
            }
            else
            {
              --v33[2];
            }
          }
          v34 = *(_DWORD **)v21;
          *(_QWORD *)v21 = 0;
          *(_QWORD *)v27 = v34;
          *(_QWORD *)(v27 + 8) = *(_QWORD *)(v21 + 8);
          v35 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v27 + 16) = v35;
          v36 = *(_QWORD *)(v21 + 24);
          *(_DWORD *)(v27 + 32) = *(_DWORD *)(v21 + 32);
          *(_QWORD *)(v27 + 24) = v36;
          v37 = v5 + 56 * v18;
          *v30 = 0;
          v40 = *(_QWORD *)(v37 + 40);
          v39 = (_QWORD **)(v37 + 40);
          v38 = v40;
          if (v40)
          {
            v41 = v19;
            v42 = (v38 - 16) & 0xFFFFFFFFFFFFF000;
            v43 = *(_QWORD *)(v42 + 16);
            v44 = *(_QWORD **)(v43 + 40);
            if (!v44)
            {
              JSC::HandleSet::grow(*(JSC::HandleSet **)(v42 + 16), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
              v20 = v98;
              v44 = *(_QWORD **)(v43 + 40);
            }
            *(_QWORD *)(v43 + 40) = *v44;
            v44[2] = 0;
            v45 = v44 + 2;
            *v44 = 0;
            v44[1] = 0;
            *v30 = v44 + 2;
            v46 = *v39;
            if (*v39)
              v46 = (_QWORD *)*v46;
            v19 = v41;
            v47 = (unint64_t)(v45 - 2);
            v5 = v99;
            if ((v46 != 0) != (*v45 != 0))
            {
              if (v46)
              {
                v48 = *(unint64_t **)((v47 & 0xFFFFFFFFFFFFF000) + 0x10);
                v49 = v48[3];
                v48 += 3;
                *(_QWORD *)v47 = v49;
                *(v45 - 1) = v48;
                *v48 = v47;
                *(_QWORD *)(v49 + 8) = v47;
              }
              else
              {
                v97 = *(_QWORD *)v47;
                v96 = (_QWORD *)*(v45 - 1);
                *v96 = *(_QWORD *)v47;
                *(_QWORD *)(v97 + 8) = v96;
                *(_QWORD *)v47 = 0;
                *(_QWORD *)(v47 + 8) = 0;
                v45 = (_QWORD *)*v30;
              }
            }
            v4 = v100;
            *v45 = v46;
            v50 = *v39;
            *(_QWORD *)(v22 + 56 * v26 + 48) = *(_QWORD *)(v99 + 56 * v18 + 48);
            if (v50)
            {
              v63 = v50 - 2;
              v64 = *(_QWORD *)(((unint64_t)(v50 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v65 = (uint64_t *)*(v50 - 1);
              if (v65)
              {
                v66 = *v63;
                *v65 = *v63;
                *(_QWORD *)(v66 + 8) = v65;
                *v63 = 0;
                v63[1] = 0;
              }
              *v63 = *(_QWORD *)(v64 + 40);
              *(_QWORD *)(v64 + 40) = v63;
              *v39 = 0;
            }
          }
          else
          {
            *(_QWORD *)(v22 + 56 * v26 + 48) = *(_QWORD *)(v5 + 56 * v18 + 48);
            v4 = v100;
          }
          v51 = *(WTF::StringImpl **)(v21 + 16);
          *(_QWORD *)(v21 + 16) = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
              v20 = v98;
            }
            else
            {
              *(_DWORD *)v51 -= 2;
            }
          }
          v52 = *(_DWORD **)v21;
          *(_QWORD *)v21 = 0;
          if (v52)
          {
            if (v52[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
              v20 = v98;
            }
            else
            {
              --v52[2];
            }
          }
          if (v21 == a3)
            v19 = v22 + 56 * v26;
        }
      }
      else
      {
        v53 = v5 + 56 * v18;
        v56 = *(_QWORD *)(v53 + 40);
        v54 = (_QWORD *)(v53 + 40);
        v55 = v56;
        if (v56)
        {
          v67 = (uint64_t *)(v55 - 16);
          v68 = *(_QWORD *)(((v55 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v69 = *(uint64_t **)(v55 - 8);
          if (v69)
          {
            v70 = *v67;
            *v69 = *v67;
            *(_QWORD *)(v70 + 8) = v69;
            *v67 = 0;
            v67[1] = 0;
          }
          *v67 = *(_QWORD *)(v68 + 40);
          *(_QWORD *)(v68 + 40) = v67;
          *v54 = 0;
        }
        v57 = *(WTF::StringImpl **)(v21 + 16);
        *(_QWORD *)(v21 + 16) = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::~StringImpl(v57, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
            v20 = v98;
          }
          else
          {
            *(_DWORD *)v57 -= 2;
          }
        }
        v58 = *(_DWORD **)v21;
        *(_QWORD *)v21 = 0;
        if (v58)
        {
          if (v58[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
            v20 = v98;
          }
          else
          {
            --v58[2];
          }
        }
      }
      ++v18;
    }
    while (v18 != v20);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

void JSC::BuiltinNames::~BuiltinNames(JSC::BuiltinNames *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t StatusReg;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  WTF::StringImpl *v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  WTF::StringImpl *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  WTF::StringImpl *v408;
  WTF::StringImpl *v409;
  WTF::StringImpl *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  WTF::StringImpl *v423;
  WTF::StringImpl *v424;
  WTF::StringImpl *v425;
  WTF::StringImpl *v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  WTF::StringImpl *v430;
  WTF::StringImpl *v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  WTF::StringImpl *v457;
  WTF::StringImpl *v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  WTF::StringImpl *v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  WTF::StringImpl *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  WTF::StringImpl *v494;
  WTF::StringImpl *v495;
  WTF::StringImpl *v496;
  WTF::StringImpl *v497;
  WTF::StringImpl *v498;
  WTF::StringImpl *v499;
  WTF::StringImpl *v500;
  WTF::StringImpl *v501;
  WTF::StringImpl *v502;
  WTF::StringImpl *v503;
  WTF::StringImpl *v504;
  WTF::StringImpl *v505;
  WTF::StringImpl *v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  WTF::StringImpl *v509;
  WTF::StringImpl *v510;
  WTF::StringImpl *v511;
  WTF::StringImpl *v512;
  WTF::StringImpl *v513;
  WTF::StringImpl *v514;
  WTF::StringImpl *v515;
  WTF::StringImpl *v516;
  WTF::StringImpl *v517;
  WTF::StringImpl *v518;
  WTF::StringImpl *v519;
  WTF::StringImpl *v520;
  WTF::StringImpl *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  WTF::StringImpl *v524;
  WTF::StringImpl *v525;
  WTF::StringImpl *v526;
  WTF::StringImpl *v527;
  WTF::StringImpl *v528;
  WTF::StringImpl *v529;
  WTF::StringImpl *v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  WTF::StringImpl *v533;
  WTF::StringImpl *v534;
  WTF::StringImpl *v535;
  WTF::StringImpl *v536;
  WTF::StringImpl *v537;
  WTF::StringImpl *v538;
  WTF::StringImpl *v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  WTF::StringImpl *v542;
  WTF::StringImpl *v543;
  WTF::StringImpl *v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  WTF::StringImpl *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  WTF::StringImpl *v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF::StringImpl *v559;
  WTF::StringImpl *v560;
  WTF::StringImpl *v561;
  WTF::StringImpl *v562;
  WTF::StringImpl *v563;
  WTF::StringImpl *v564;
  WTF::StringImpl *v565;
  WTF::StringImpl *v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  WTF::StringImpl *v569;
  WTF::StringImpl *v570;
  unint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  void *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  void *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  void *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  void *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  void *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  void *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  void *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  void *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  void *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  void *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  void *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  unint64_t v747;
  void *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  void *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  void *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  void *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  void *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  void *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  void *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  void *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  void *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  void *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  void *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  void *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  unint64_t v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  void *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  void *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  void *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  unint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  void *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  void *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  void *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  void *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  void *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  void *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  unint64_t v955;
  void *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  unint64_t v963;
  void *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971;
  void *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  void *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  unint64_t v987;
  void *v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  void *v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  void *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  void *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  void *v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  unint64_t v1027;
  void *v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  void *v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  void *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  void *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  void *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  void *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  void *v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  void *v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  void *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  unint64_t v1099;
  void *v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  void *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  unint64_t v1115;
  void *v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  void *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  unint64_t v1131;
  void *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  void *v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  void *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  void *v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  void *v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  void *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  void *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  void *v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  void *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  unint64_t v1203;
  void *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  unint64_t v1211;
  void *v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  void *v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  void *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  void *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  void *v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  void *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  void *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  unint64_t v1267;
  void *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  void *v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  unint64_t v1283;
  void *v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  void *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  void *v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  unint64_t v1307;
  void *v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unint64_t v1315;
  void *v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  void *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  unint64_t v1331;
  void *v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  unint64_t v1339;
  void *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  unint64_t v1347;
  void *v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  unint64_t v1355;
  void *v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  unint64_t v1363;
  void *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  unint64_t v1371;
  void *v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  void *v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  unint64_t v1387;
  void *v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  void *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  void *v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  void *v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  void *v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  unint64_t v1427;
  void *v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  unint64_t v1435;
  void *v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  unint64_t v1443;
  void *v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  unint64_t v1451;
  void *v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  void *v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  unint64_t v1467;
  void *v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  void *v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  unint64_t v1483;
  void *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  void *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  unint64_t v1499;
  void *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t v1507;
  void *v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  unint64_t v1515;
  void *v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  unint64_t v1523;
  void *v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  void *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  unint64_t v1539;
  void *v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  void *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  void *v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  unint64_t v1563;
  void *v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  unint64_t v1571;
  void *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  unint64_t v1579;
  void *v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  unint64_t v1587;
  void *v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  void *v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  unint64_t v1603;
  void *v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  unint64_t v1611;
  void *v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  unint64_t v1619;
  void *v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  unint64_t v1627;
  void *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  void *v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  unint64_t v1643;
  void *v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  unint64_t v1651;
  void *v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  unint64_t v1659;
  void *v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  unint64_t v1667;
  void *v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  unint64_t v1675;
  void *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  void *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  unint64_t v1691;
  void *v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  unint64_t v1699;
  void *v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  unint64_t v1707;
  void *v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  void *v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  unint64_t v1723;
  void *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  unint64_t v1731;
  void *v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  unint64_t v1739;
  void *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  void *v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  void *v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  void *v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unint64_t v1771;
  void *v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  void *v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  unint64_t v1787;
  void *v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  unint64_t v1795;
  void *v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  unint64_t v1803;
  void *v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unint64_t v1811;
  void *v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  unint64_t v1819;
  void *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  unint64_t v1827;
  void *v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  void *v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  unint64_t v1843;
  void *v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  unint64_t v1851;
  void *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  unint64_t v1859;
  void *v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  unint64_t v1867;
  void *v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  unint64_t v1875;
  void *v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  unint64_t v1883;
  void *v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  unint64_t v1891;
  void *v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  void *v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  unint64_t v1907;
  void *v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  unint64_t v1915;
  void *v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  void *v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  unint64_t v1931;
  void *v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  unint64_t v1939;
  void *v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  unint64_t v1947;
  void *v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  unint64_t v1955;
  void *v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  unint64_t v1963;
  void *v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  unint64_t v1971;
  void *v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  unint64_t v1979;
  void *v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  unint64_t v1987;
  void *v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  unint64_t v1995;
  void *v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  unint64_t v2003;
  void *v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  unint64_t v2011;
  void *v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  unint64_t v2019;
  void *v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  unint64_t v2027;
  void *v2028;
  uint64_t v2029;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  unint64_t v2035;
  void *v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  unint64_t v2043;
  void *v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  unint64_t v2051;
  void *v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  void *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  unint64_t v2067;
  void *v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  unint64_t v2075;
  void *v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  unint64_t v2083;
  void *v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  unint64_t v2091;
  void *v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  unint64_t v2099;
  void *v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  unint64_t v2107;
  void *v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  void *v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  unint64_t v2123;
  void *v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  unint64_t v2131;
  void *v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  unint64_t v2139;
  void *v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  unint64_t v2147;
  void *v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  unint64_t v2155;
  void *v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  unint64_t v2163;
  void *v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  unint64_t v2171;
  void *v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  unint64_t v2179;
  void *v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  unint64_t v2187;
  void *v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  unint64_t v2195;
  void *v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  unint64_t v2203;
  void *v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  unint64_t v2211;
  void *v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  unint64_t v2219;
  void *v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  unint64_t v2227;
  void *v2228;
  uint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  unint64_t v2235;
  void *v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  unint64_t v2243;
  void *v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  unint64_t v2251;
  void *v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  unint64_t v2259;
  void *v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  unint64_t v2267;
  void *v2268;
  uint64_t v2269;
  uint64_t v2270;
  uint64_t v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  unint64_t v2275;
  void *v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  unint64_t v2283;
  void *v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  unint64_t v2291;
  void *v2292;
  uint64_t v2293;
  uint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  unint64_t v2299;
  void *v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  uint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  unint64_t v2307;
  void *v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  unint64_t v2315;
  void *v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  unint64_t v2323;
  void *v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  unint64_t v2331;
  void *v2332;
  uint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  unint64_t v2339;
  void *v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  unint64_t v2347;
  void *v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  unint64_t v2355;
  void *v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  unint64_t v2363;
  void *v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  unint64_t v2371;
  void *v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  unint64_t v2379;
  void *v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  unint64_t v2387;
  void *v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  unint64_t v2395;
  void *v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  unint64_t v2403;
  void *v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  unint64_t v2411;
  void *v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  unint64_t v2419;
  void *v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  unint64_t v2427;
  void *v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  unint64_t v2435;
  void *v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  unint64_t v2443;
  void *v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  unint64_t v2451;
  void *v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  unint64_t v2459;
  void *v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  unint64_t v2467;
  void *v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  unint64_t v2475;
  void *v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  unint64_t v2483;
  void *v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  unint64_t v2491;
  void *v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  unint64_t v2499;
  void *v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  unint64_t v2507;
  void *v2508;
  uint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  unint64_t v2515;
  void *v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  unint64_t v2523;
  void *v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  unint64_t v2531;
  void *v2532;
  uint64_t v2533;
  uint64_t v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  unint64_t v2539;
  void *v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  unint64_t v2547;
  void *v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  unint64_t v2555;
  void *v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  unint64_t v2563;
  void *v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  unint64_t v2571;
  void *v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  unint64_t v2579;
  void *v2580;
  uint64_t v2581;
  uint64_t v2582;
  uint64_t v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  unint64_t v2587;
  void *v2588;
  uint64_t v2589;
  uint64_t v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  unint64_t v2595;
  void *v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  uint64_t v2600;
  uint64_t v2601;
  uint64_t v2602;
  unint64_t v2603;
  void *v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  unint64_t v2611;
  void *v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t v2617;
  uint64_t v2618;
  unint64_t v2619;
  void *v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t v2625;
  uint64_t v2626;
  unint64_t v2627;
  void *v2628;
  uint64_t v2629;
  uint64_t v2630;
  uint64_t v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  unint64_t v2635;
  void *v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t v2639;
  uint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  unint64_t v2643;
  void *v2644;
  uint64_t v2645;
  uint64_t v2646;
  uint64_t v2647;
  uint64_t v2648;
  uint64_t v2649;
  uint64_t v2650;
  unint64_t v2651;
  void *v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  uint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  unint64_t v2659;
  void *v2660;
  uint64_t v2661;
  uint64_t v2662;
  uint64_t v2663;
  uint64_t v2664;
  uint64_t v2665;
  uint64_t v2666;
  unint64_t v2667;
  void *v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  uint64_t v2672;
  uint64_t v2673;
  uint64_t v2674;
  unint64_t v2675;
  void *v2676;
  uint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2682;
  unint64_t v2683;
  void *v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  unint64_t v2691;
  void *v2692;
  uint64_t v2693;
  uint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  unint64_t v2699;
  void *v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t v2705;
  uint64_t v2706;
  unint64_t v2707;
  void *v2708;
  uint64_t v2709;
  uint64_t v2710;
  uint64_t v2711;
  uint64_t v2712;
  uint64_t v2713;
  uint64_t v2714;
  unint64_t v2715;
  void *v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  uint64_t v2721;
  uint64_t v2722;
  unint64_t v2723;
  void *v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t v2727;
  uint64_t v2728;
  uint64_t v2729;
  uint64_t v2730;
  unint64_t v2731;
  void *v2732;
  uint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  uint64_t v2736;
  uint64_t v2737;
  uint64_t v2738;
  unint64_t v2739;
  void *v2740;
  uint64_t v2741;
  uint64_t v2742;
  uint64_t v2743;
  uint64_t v2744;
  uint64_t v2745;
  uint64_t v2746;
  unint64_t v2747;
  void *v2748;
  uint64_t v2749;
  uint64_t v2750;
  uint64_t v2751;
  uint64_t v2752;
  uint64_t v2753;
  uint64_t v2754;
  unint64_t v2755;
  void *v2756;
  uint64_t v2757;
  uint64_t v2758;
  uint64_t v2759;
  uint64_t v2760;
  uint64_t v2761;
  uint64_t v2762;
  unint64_t v2763;
  void *v2764;
  uint64_t v2765;
  uint64_t v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  unint64_t v2771;
  void *v2772;
  uint64_t v2773;
  uint64_t v2774;
  uint64_t v2775;
  uint64_t v2776;
  uint64_t v2777;
  uint64_t v2778;
  unint64_t v2779;
  void *v2780;
  uint64_t v2781;
  uint64_t v2782;
  uint64_t v2783;
  uint64_t v2784;
  uint64_t v2785;
  uint64_t v2786;
  unint64_t v2787;
  void *v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t v2793;
  uint64_t v2794;
  unint64_t v2795;
  void *v2796;
  uint64_t v2797;
  uint64_t v2798;
  uint64_t v2799;
  uint64_t v2800;
  uint64_t v2801;
  uint64_t v2802;
  unint64_t v2803;
  void *v2804;
  uint64_t v2805;
  uint64_t v2806;
  uint64_t v2807;
  uint64_t v2808;
  uint64_t v2809;
  uint64_t v2810;
  unint64_t v2811;
  void *v2812;
  uint64_t v2813;
  uint64_t v2814;
  uint64_t v2815;
  uint64_t v2816;
  uint64_t v2817;
  uint64_t v2818;
  unint64_t v2819;
  void *v2820;
  uint64_t v2821;
  uint64_t v2822;
  uint64_t v2823;
  uint64_t v2824;
  uint64_t v2825;
  uint64_t v2826;
  unint64_t v2827;
  void *v2828;
  uint64_t v2829;
  uint64_t v2830;
  uint64_t v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  unint64_t v2835;
  void *v2836;
  uint64_t v2837;
  uint64_t v2838;
  uint64_t v2839;
  uint64_t v2840;
  uint64_t v2841;
  uint64_t v2842;
  unint64_t v2843;
  void *v2844;
  uint64_t v2845;
  uint64_t v2846;
  uint64_t v2847;
  uint64_t v2848;
  uint64_t v2849;
  uint64_t v2850;
  unint64_t v2851;
  void *v2852;
  uint64_t v2853;
  uint64_t v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  unint64_t v2859;
  void *v2860;
  uint64_t v2861;
  uint64_t v2862;
  uint64_t v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  unint64_t v2867;
  void *v2868;
  uint64_t v2869;
  uint64_t v2870;
  uint64_t v2871;
  uint64_t v2872;
  uint64_t v2873;
  uint64_t v2874;
  unint64_t v2875;
  void *v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t v2881;
  uint64_t v2882;
  unint64_t v2883;
  void *v2884;
  uint64_t v2885;
  uint64_t v2886;
  uint64_t v2887;
  uint64_t v2888;
  uint64_t v2889;
  uint64_t v2890;
  unint64_t v2891;
  void *v2892;
  uint64_t v2893;
  uint64_t v2894;
  uint64_t v2895;
  uint64_t v2896;
  uint64_t v2897;
  uint64_t v2898;
  unint64_t v2899;
  void *v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t v2903;
  uint64_t v2904;
  uint64_t v2905;
  uint64_t v2906;
  unint64_t v2907;
  void *v2908;
  uint64_t v2909;
  uint64_t v2910;
  uint64_t v2911;
  uint64_t v2912;
  uint64_t v2913;
  uint64_t v2914;
  unint64_t v2915;
  void *v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  unint64_t v2923;
  void *v2924;
  uint64_t v2925;
  uint64_t v2926;
  uint64_t v2927;
  uint64_t v2928;
  uint64_t v2929;
  uint64_t v2930;
  unint64_t v2931;
  void *v2932;
  uint64_t v2933;
  uint64_t v2934;
  uint64_t v2935;
  uint64_t v2936;
  uint64_t v2937;
  uint64_t v2938;
  unint64_t v2939;
  void *v2940;
  uint64_t v2941;
  uint64_t v2942;
  uint64_t v2943;
  uint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  unint64_t v2947;
  void *v2948;
  uint64_t v2949;
  uint64_t v2950;
  uint64_t v2951;
  uint64_t v2952;
  uint64_t v2953;
  uint64_t v2954;
  unint64_t v2955;
  void *v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t v2959;
  uint64_t v2960;
  uint64_t v2961;
  uint64_t v2962;
  unint64_t v2963;
  void *v2964;
  uint64_t v2965;
  uint64_t v2966;
  uint64_t v2967;
  uint64_t v2968;
  uint64_t v2969;
  uint64_t v2970;
  unint64_t v2971;
  void *v2972;
  uint64_t v2973;
  uint64_t v2974;
  uint64_t v2975;
  uint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  unint64_t v2979;
  void *v2980;
  uint64_t v2981;
  uint64_t v2982;
  uint64_t v2983;
  uint64_t v2984;
  uint64_t v2985;
  uint64_t v2986;
  unint64_t v2987;
  void *v2988;
  uint64_t v2989;
  uint64_t v2990;
  uint64_t v2991;
  uint64_t v2992;
  uint64_t v2993;
  uint64_t v2994;
  unint64_t v2995;
  void *v2996;
  uint64_t v2997;
  uint64_t v2998;
  uint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  uint64_t v3002;
  unint64_t v3003;
  void *v3004;
  uint64_t v3005;
  uint64_t v3006;
  uint64_t v3007;
  uint64_t v3008;
  uint64_t v3009;
  uint64_t v3010;
  unint64_t v3011;
  void *v3012;
  uint64_t v3013;
  uint64_t v3014;
  uint64_t v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  unint64_t v3019;
  void *v3020;
  uint64_t v3021;
  uint64_t v3022;
  uint64_t v3023;
  uint64_t v3024;
  uint64_t v3025;
  uint64_t v3026;
  unint64_t v3027;
  void *v3028;
  uint64_t v3029;
  uint64_t v3030;
  uint64_t v3031;
  uint64_t v3032;
  uint64_t v3033;
  uint64_t v3034;
  unint64_t v3035;
  void *v3036;
  uint64_t v3037;
  uint64_t v3038;
  uint64_t v3039;
  uint64_t v3040;
  uint64_t v3041;
  uint64_t v3042;
  unint64_t v3043;
  void *v3044;
  uint64_t v3045;
  uint64_t v3046;
  uint64_t v3047;
  uint64_t v3048;
  uint64_t v3049;
  uint64_t v3050;
  unint64_t v3051;
  void *v3052;
  uint64_t v3053;
  uint64_t v3054;
  uint64_t v3055;
  uint64_t v3056;
  uint64_t v3057;
  uint64_t v3058;
  unint64_t v3059;
  void *v3060;
  uint64_t v3061;
  uint64_t v3062;
  uint64_t v3063;
  uint64_t v3064;
  uint64_t v3065;
  uint64_t v3066;
  unint64_t v3067;
  void *v3068;
  uint64_t v3069;
  uint64_t v3070;
  uint64_t v3071;
  uint64_t v3072;
  uint64_t v3073;
  uint64_t v3074;
  unint64_t v3075;
  void *v3076;
  uint64_t v3077;
  uint64_t v3078;
  uint64_t v3079;
  uint64_t v3080;
  uint64_t v3081;
  uint64_t v3082;
  unint64_t v3083;
  void *v3084;
  uint64_t v3085;
  uint64_t v3086;
  uint64_t v3087;
  uint64_t v3088;
  uint64_t v3089;
  uint64_t v3090;
  unint64_t v3091;
  void *v3092;
  uint64_t v3093;
  uint64_t v3094;
  uint64_t v3095;
  uint64_t v3096;
  uint64_t v3097;
  uint64_t v3098;
  unint64_t v3099;
  void *v3100;
  uint64_t v3101;
  uint64_t v3102;
  uint64_t v3103;
  uint64_t v3104;
  uint64_t v3105;
  uint64_t v3106;
  unint64_t v3107;
  void *v3108;
  uint64_t v3109;
  uint64_t v3110;
  uint64_t v3111;
  uint64_t v3112;
  uint64_t v3113;
  uint64_t v3114;
  unint64_t v3115;
  void *v3116;
  uint64_t v3117;
  uint64_t v3118;
  uint64_t v3119;
  uint64_t v3120;
  uint64_t v3121;
  uint64_t v3122;
  unint64_t v3123;
  void *v3124;
  uint64_t v3125;
  uint64_t v3126;
  uint64_t v3127;
  uint64_t v3128;
  uint64_t v3129;
  uint64_t v3130;
  unint64_t v3131;
  void *v3132;
  uint64_t v3133;
  uint64_t v3134;
  uint64_t v3135;
  uint64_t v3136;
  uint64_t v3137;
  uint64_t v3138;
  unint64_t v3139;
  void *v3140;
  uint64_t v3141;
  uint64_t v3142;
  uint64_t v3143;
  uint64_t v3144;
  uint64_t v3145;
  uint64_t v3146;
  unint64_t v3147;
  void *v3148;
  uint64_t v3149;
  uint64_t v3150;
  uint64_t v3151;
  uint64_t v3152;
  uint64_t v3153;
  uint64_t v3154;
  unint64_t v3155;
  void *v3156;
  uint64_t v3157;
  uint64_t v3158;
  uint64_t v3159;
  uint64_t v3160;
  uint64_t v3161;
  uint64_t v3162;
  unint64_t v3163;
  void *v3164;
  uint64_t v3165;
  uint64_t v3166;
  uint64_t v3167;
  uint64_t v3168;
  uint64_t v3169;
  uint64_t v3170;
  unint64_t v3171;
  void *v3172;
  uint64_t v3173;
  uint64_t v3174;
  uint64_t v3175;
  uint64_t v3176;
  uint64_t v3177;
  uint64_t v3178;
  unint64_t v3179;
  void *v3180;
  uint64_t v3181;
  uint64_t v3182;
  uint64_t v3183;
  uint64_t v3184;
  uint64_t v3185;
  uint64_t v3186;
  unint64_t v3187;
  void *v3188;
  uint64_t v3189;
  uint64_t v3190;
  uint64_t v3191;
  uint64_t v3192;
  uint64_t v3193;
  uint64_t v3194;
  unint64_t v3195;
  void *v3196;
  uint64_t v3197;
  uint64_t v3198;
  uint64_t v3199;
  uint64_t v3200;
  uint64_t v3201;
  uint64_t v3202;
  unint64_t v3203;
  void *v3204;
  uint64_t v3205;
  uint64_t v3206;
  uint64_t v3207;
  uint64_t v3208;
  uint64_t v3209;
  uint64_t v3210;
  unint64_t v3211;
  void *v3212;
  uint64_t v3213;
  uint64_t v3214;
  uint64_t v3215;
  uint64_t v3216;
  uint64_t v3217;
  uint64_t v3218;
  unint64_t v3219;
  void *v3220;
  uint64_t v3221;
  uint64_t v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  unint64_t v3227;
  void *v3228;
  uint64_t v3229;
  uint64_t v3230;
  uint64_t v3231;
  uint64_t v3232;
  uint64_t v3233;
  uint64_t v3234;
  unint64_t v3235;
  void *v3236;
  uint64_t v3237;
  uint64_t v3238;
  uint64_t v3239;
  uint64_t v3240;
  uint64_t v3241;
  uint64_t v3242;
  unint64_t v3243;
  void *v3244;
  uint64_t v3245;
  uint64_t v3246;
  uint64_t v3247;
  uint64_t v3248;
  uint64_t v3249;
  uint64_t v3250;
  unint64_t v3251;
  void *v3252;
  uint64_t v3253;
  uint64_t v3254;
  uint64_t v3255;
  uint64_t v3256;
  uint64_t v3257;
  uint64_t v3258;
  unint64_t v3259;
  void *v3260;
  uint64_t v3261;
  uint64_t v3262;
  uint64_t v3263;
  uint64_t v3264;
  uint64_t v3265;
  uint64_t v3266;
  unint64_t v3267;
  void *v3268;
  uint64_t v3269;
  uint64_t v3270;
  uint64_t v3271;
  uint64_t v3272;
  uint64_t v3273;
  uint64_t v3274;
  unint64_t v3275;
  void *v3276;
  uint64_t v3277;
  uint64_t v3278;
  uint64_t v3279;
  uint64_t v3280;
  uint64_t v3281;
  uint64_t v3282;
  unint64_t v3283;
  void *v3284;
  uint64_t v3285;
  uint64_t v3286;
  uint64_t v3287;
  uint64_t v3288;
  uint64_t v3289;
  uint64_t v3290;
  unint64_t v3291;
  void *v3292;
  uint64_t v3293;
  uint64_t v3294;
  uint64_t v3295;
  uint64_t v3296;
  uint64_t v3297;
  uint64_t v3298;
  unint64_t v3299;
  void *v3300;
  uint64_t v3301;
  uint64_t v3302;
  uint64_t v3303;
  uint64_t v3304;
  uint64_t v3305;
  uint64_t v3306;
  unint64_t v3307;
  void *v3308;
  uint64_t v3309;
  uint64_t v3310;
  uint64_t v3311;
  uint64_t v3312;
  uint64_t v3313;
  uint64_t v3314;
  unint64_t v3315;
  void *v3316;
  uint64_t v3317;
  uint64_t v3318;
  uint64_t v3319;
  uint64_t v3320;
  uint64_t v3321;
  uint64_t v3322;
  unint64_t v3323;
  void *v3324;
  uint64_t v3325;
  uint64_t v3326;
  uint64_t v3327;
  uint64_t v3328;
  uint64_t v3329;
  uint64_t v3330;
  unint64_t v3331;
  void *v3332;
  uint64_t v3333;
  uint64_t v3334;
  uint64_t v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t v3338;
  unint64_t v3339;
  void *v3340;
  uint64_t v3341;
  uint64_t v3342;
  uint64_t v3343;
  uint64_t v3344;
  uint64_t v3345;
  uint64_t v3346;
  unint64_t v3347;
  void *v3348;
  uint64_t v3349;
  uint64_t v3350;
  uint64_t v3351;
  uint64_t v3352;
  uint64_t v3353;
  uint64_t v3354;
  unint64_t v3355;
  void *v3356;
  uint64_t v3357;
  uint64_t v3358;
  uint64_t v3359;
  uint64_t v3360;
  uint64_t v3361;
  uint64_t v3362;
  unint64_t v3363;
  void *v3364;
  uint64_t v3365;
  uint64_t v3366;
  uint64_t v3367;
  uint64_t v3368;
  uint64_t v3369;
  uint64_t v3370;
  unint64_t v3371;
  void *v3372;
  uint64_t v3373;
  uint64_t v3374;
  uint64_t v3375;
  uint64_t v3376;
  uint64_t v3377;
  uint64_t v3378;
  unint64_t v3379;
  void *v3380;
  uint64_t v3381;
  uint64_t v3382;
  uint64_t v3383;
  uint64_t v3384;
  uint64_t v3385;
  uint64_t v3386;
  unint64_t v3387;
  void *v3388;
  uint64_t v3389;
  uint64_t v3390;
  uint64_t v3391;
  uint64_t v3392;
  uint64_t v3393;
  uint64_t v3394;
  unint64_t v3395;
  void *v3396;
  uint64_t v3397;
  uint64_t v3398;
  uint64_t v3399;
  uint64_t v3400;
  uint64_t v3401;
  uint64_t v3402;
  unint64_t v3403;
  void *v3404;
  uint64_t v3405;
  uint64_t v3406;
  uint64_t v3407;
  uint64_t v3408;
  uint64_t v3409;
  uint64_t v3410;
  unint64_t v3411;
  void *v3412;
  uint64_t v3413;
  uint64_t v3414;
  uint64_t v3415;
  uint64_t v3416;
  uint64_t v3417;
  uint64_t v3418;
  unint64_t v3419;
  void *v3420;
  uint64_t v3421;
  uint64_t v3422;
  uint64_t v3423;
  uint64_t v3424;
  uint64_t v3425;
  uint64_t v3426;
  unint64_t v3427;
  void *v3428;
  uint64_t v3429;
  uint64_t v3430;
  uint64_t v3431;
  uint64_t v3432;
  uint64_t v3433;
  uint64_t v3434;
  unint64_t v3435;
  void *v3436;
  uint64_t v3437;
  uint64_t v3438;
  uint64_t v3439;
  uint64_t v3440;
  uint64_t v3441;
  uint64_t v3442;
  unint64_t v3443;
  void *v3444;
  uint64_t v3445;
  uint64_t v3446;
  uint64_t v3447;
  uint64_t v3448;
  uint64_t v3449;
  uint64_t v3450;
  unint64_t v3451;
  void *v3452;
  uint64_t v3453;
  uint64_t v3454;
  uint64_t v3455;
  uint64_t v3456;
  uint64_t v3457;
  uint64_t v3458;
  unint64_t v3459;
  void *v3460;
  uint64_t v3461;
  uint64_t v3462;
  uint64_t v3463;
  uint64_t v3464;
  uint64_t v3465;
  uint64_t v3466;
  unint64_t v3467;
  void *v3468;
  uint64_t v3469;
  uint64_t v3470;
  uint64_t v3471;
  uint64_t v3472;
  uint64_t v3473;
  uint64_t v3474;
  unint64_t v3475;
  void *v3476;
  uint64_t v3477;
  uint64_t v3478;
  uint64_t v3479;
  uint64_t v3480;
  uint64_t v3481;
  uint64_t v3482;
  unint64_t v3483;
  void *v3484;
  uint64_t v3485;
  uint64_t v3486;
  uint64_t v3487;
  uint64_t v3488;
  uint64_t v3489;
  uint64_t v3490;
  unint64_t v3491;
  void *v3492;
  uint64_t v3493;
  uint64_t v3494;
  uint64_t v3495;
  uint64_t v3496;
  uint64_t v3497;
  uint64_t v3498;
  unint64_t v3499;
  void *v3500;
  uint64_t v3501;
  uint64_t v3502;
  uint64_t v3503;
  uint64_t v3504;
  uint64_t v3505;
  uint64_t v3506;
  unint64_t v3507;
  void *v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  uint64_t v3512;
  uint64_t v3513;
  uint64_t v3514;
  unint64_t v3515;
  void *v3516;
  uint64_t v3517;
  uint64_t v3518;
  uint64_t v3519;
  uint64_t v3520;
  uint64_t v3521;
  uint64_t v3522;
  unint64_t v3523;
  void *v3524;
  uint64_t v3525;
  uint64_t v3526;
  uint64_t v3527;
  uint64_t v3528;
  uint64_t v3529;
  uint64_t v3530;
  unint64_t v3531;
  void *v3532;
  uint64_t v3533;
  uint64_t v3534;
  uint64_t v3535;
  uint64_t v3536;
  uint64_t v3537;
  uint64_t v3538;
  unint64_t v3539;
  void *v3540;
  uint64_t v3541;
  uint64_t v3542;
  uint64_t v3543;
  uint64_t v3544;
  uint64_t v3545;
  uint64_t v3546;
  unint64_t v3547;
  void *v3548;
  uint64_t v3549;
  uint64_t v3550;
  uint64_t v3551;
  uint64_t v3552;
  uint64_t v3553;
  uint64_t v3554;
  unint64_t v3555;
  void *v3556;
  uint64_t v3557;
  uint64_t v3558;
  uint64_t v3559;
  uint64_t v3560;
  uint64_t v3561;
  uint64_t v3562;
  unint64_t v3563;
  void *v3564;
  uint64_t v3565;
  uint64_t v3566;
  uint64_t v3567;
  uint64_t v3568;
  uint64_t v3569;
  uint64_t v3570;
  unint64_t v3571;
  void *v3572;
  uint64_t v3573;
  uint64_t v3574;
  uint64_t v3575;
  uint64_t v3576;
  uint64_t v3577;
  uint64_t v3578;
  unint64_t v3579;
  void *v3580;
  uint64_t v3581;
  uint64_t v3582;
  uint64_t v3583;
  uint64_t v3584;
  uint64_t v3585;
  uint64_t v3586;
  unint64_t v3587;
  void *v3588;
  uint64_t v3589;
  uint64_t v3590;
  uint64_t v3591;
  uint64_t v3592;
  uint64_t v3593;
  uint64_t v3594;
  unint64_t v3595;
  void *v3596;
  uint64_t v3597;
  uint64_t v3598;
  uint64_t v3599;
  uint64_t v3600;
  uint64_t v3601;
  uint64_t v3602;
  unint64_t v3603;
  void *v3604;
  uint64_t v3605;
  uint64_t v3606;
  uint64_t v3607;
  uint64_t v3608;
  uint64_t v3609;
  uint64_t v3610;
  unint64_t v3611;
  void *v3612;
  uint64_t v3613;
  uint64_t v3614;
  uint64_t v3615;
  uint64_t v3616;
  uint64_t v3617;
  uint64_t v3618;
  unint64_t v3619;
  void *v3620;
  uint64_t v3621;
  uint64_t v3622;
  uint64_t v3623;
  uint64_t v3624;
  uint64_t v3625;
  uint64_t v3626;
  unint64_t v3627;
  void *v3628;
  uint64_t v3629;
  uint64_t v3630;
  uint64_t v3631;
  uint64_t v3632;
  uint64_t v3633;
  uint64_t v3634;
  unint64_t v3635;
  void *v3636;
  uint64_t v3637;
  uint64_t v3638;
  uint64_t v3639;
  uint64_t v3640;
  uint64_t v3641;
  uint64_t v3642;
  unint64_t v3643;
  void *v3644;
  uint64_t v3645;
  uint64_t v3646;
  uint64_t v3647;
  uint64_t v3648;
  uint64_t v3649;
  uint64_t v3650;
  unint64_t v3651;
  void *v3652;
  uint64_t v3653;
  uint64_t v3654;
  uint64_t v3655;
  uint64_t v3656;
  uint64_t v3657;
  uint64_t v3658;
  unint64_t v3659;
  void *v3660;
  uint64_t v3661;
  uint64_t v3662;
  uint64_t v3663;
  uint64_t v3664;
  uint64_t v3665;
  uint64_t v3666;
  unint64_t v3667;
  void *v3668;
  uint64_t v3669;
  uint64_t v3670;
  uint64_t v3671;
  uint64_t v3672;
  uint64_t v3673;
  uint64_t v3674;
  unint64_t v3675;
  void *v3676;
  uint64_t v3677;
  uint64_t v3678;
  uint64_t v3679;
  uint64_t v3680;
  uint64_t v3681;
  uint64_t v3682;
  unint64_t v3683;
  void *v3684;
  uint64_t v3685;
  uint64_t v3686;
  uint64_t v3687;
  uint64_t v3688;
  uint64_t v3689;
  uint64_t v3690;
  unint64_t v3691;
  void *v3692;
  uint64_t v3693;
  uint64_t v3694;
  uint64_t v3695;
  uint64_t v3696;
  uint64_t v3697;
  uint64_t v3698;
  unint64_t v3699;
  void *v3700;
  uint64_t v3701;
  uint64_t v3702;
  uint64_t v3703;
  uint64_t v3704;
  uint64_t v3705;
  uint64_t v3706;
  unint64_t v3707;
  void *v3708;
  uint64_t v3709;
  uint64_t v3710;
  uint64_t v3711;
  uint64_t v3712;
  uint64_t v3713;
  uint64_t v3714;
  unint64_t v3715;
  void *v3716;
  uint64_t v3717;
  uint64_t v3718;
  uint64_t v3719;
  uint64_t v3720;
  uint64_t v3721;
  uint64_t v3722;
  unint64_t v3723;
  void *v3724;
  uint64_t v3725;
  uint64_t v3726;
  uint64_t v3727;
  uint64_t v3728;
  uint64_t v3729;
  uint64_t v3730;
  unint64_t v3731;
  void *v3732;
  uint64_t v3733;
  uint64_t v3734;
  uint64_t v3735;
  uint64_t v3736;
  uint64_t v3737;
  uint64_t v3738;
  unint64_t v3739;
  void *v3740;
  uint64_t v3741;
  uint64_t v3742;
  uint64_t v3743;
  uint64_t v3744;
  uint64_t v3745;
  uint64_t v3746;
  unint64_t v3747;
  void *v3748;
  uint64_t v3749;
  uint64_t v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  uint64_t v3754;
  unint64_t v3755;
  void *v3756;
  uint64_t v3757;
  uint64_t v3758;
  uint64_t v3759;
  uint64_t v3760;
  uint64_t v3761;
  uint64_t v3762;
  unint64_t v3763;
  void *v3764;
  uint64_t v3765;
  uint64_t v3766;
  uint64_t v3767;
  uint64_t v3768;
  uint64_t v3769;
  uint64_t v3770;
  unint64_t v3771;
  void *v3772;
  uint64_t v3773;
  uint64_t v3774;
  uint64_t v3775;
  uint64_t v3776;
  uint64_t v3777;
  uint64_t v3778;
  unint64_t v3779;
  void *v3780;
  uint64_t v3781;
  uint64_t v3782;
  uint64_t v3783;
  uint64_t v3784;
  uint64_t v3785;
  uint64_t v3786;
  unint64_t v3787;
  void *v3788;
  uint64_t v3789;
  uint64_t v3790;
  uint64_t v3791;
  uint64_t v3792;
  uint64_t v3793;
  uint64_t v3794;
  unint64_t v3795;
  void *v3796;
  uint64_t v3797;
  uint64_t v3798;
  uint64_t v3799;
  uint64_t v3800;
  uint64_t v3801;
  uint64_t v3802;
  unint64_t v3803;
  void *v3804;
  uint64_t v3805;
  uint64_t v3806;
  uint64_t v3807;
  uint64_t v3808;
  uint64_t v3809;
  uint64_t v3810;
  unint64_t v3811;
  void *v3812;
  uint64_t v3813;
  uint64_t v3814;
  uint64_t v3815;
  uint64_t v3816;
  uint64_t v3817;
  uint64_t v3818;
  unint64_t v3819;
  void *v3820;
  uint64_t v3821;
  uint64_t v3822;
  uint64_t v3823;
  uint64_t v3824;
  uint64_t v3825;
  uint64_t v3826;
  unint64_t v3827;
  void *v3828;
  uint64_t v3829;
  uint64_t v3830;
  uint64_t v3831;
  uint64_t v3832;
  uint64_t v3833;
  uint64_t v3834;
  unint64_t v3835;
  void *v3836;
  uint64_t v3837;
  uint64_t v3838;
  uint64_t v3839;
  uint64_t v3840;
  uint64_t v3841;
  uint64_t v3842;
  unint64_t v3843;
  void *v3844;
  uint64_t v3845;
  uint64_t v3846;
  uint64_t v3847;
  uint64_t v3848;
  uint64_t v3849;
  uint64_t v3850;
  unint64_t v3851;
  void *v3852;
  uint64_t v3853;
  uint64_t v3854;
  uint64_t v3855;
  uint64_t v3856;
  uint64_t v3857;
  uint64_t v3858;
  unint64_t v3859;
  void *v3860;
  uint64_t v3861;
  uint64_t v3862;
  uint64_t v3863;
  uint64_t v3864;
  uint64_t v3865;
  uint64_t v3866;
  unint64_t v3867;
  void *v3868;
  uint64_t v3869;
  uint64_t v3870;
  uint64_t v3871;
  uint64_t v3872;
  uint64_t v3873;
  uint64_t v3874;
  unint64_t v3875;
  void *v3876;
  uint64_t v3877;
  uint64_t v3878;
  uint64_t v3879;
  uint64_t v3880;
  uint64_t v3881;
  uint64_t v3882;
  unint64_t v3883;
  void *v3884;
  uint64_t v3885;
  uint64_t v3886;
  uint64_t v3887;
  uint64_t v3888;
  uint64_t v3889;
  uint64_t v3890;
  unint64_t v3891;
  void *v3892;
  uint64_t v3893;
  uint64_t v3894;
  uint64_t v3895;
  uint64_t v3896;
  uint64_t v3897;
  uint64_t v3898;
  unint64_t v3899;
  void *v3900;
  uint64_t v3901;
  uint64_t v3902;
  uint64_t v3903;
  uint64_t v3904;
  uint64_t v3905;
  uint64_t v3906;
  unint64_t v3907;
  void *v3908;
  uint64_t v3909;
  uint64_t v3910;
  uint64_t v3911;
  uint64_t v3912;
  uint64_t v3913;
  uint64_t v3914;
  unint64_t v3915;
  void *v3916;
  uint64_t v3917;
  uint64_t v3918;
  uint64_t v3919;
  uint64_t v3920;
  uint64_t v3921;
  uint64_t v3922;
  unint64_t v3923;
  void *v3924;
  uint64_t v3925;
  uint64_t v3926;
  uint64_t v3927;
  uint64_t v3928;
  uint64_t v3929;
  uint64_t v3930;
  unint64_t v3931;
  void *v3932;
  uint64_t v3933;
  uint64_t v3934;
  uint64_t v3935;
  uint64_t v3936;
  uint64_t v3937;
  uint64_t v3938;
  unint64_t v3939;
  void *v3940;
  uint64_t v3941;
  uint64_t v3942;
  uint64_t v3943;
  uint64_t v3944;
  uint64_t v3945;
  uint64_t v3946;
  unint64_t v3947;
  void *v3948;
  uint64_t v3949;
  uint64_t v3950;
  uint64_t v3951;
  uint64_t v3952;
  uint64_t v3953;
  uint64_t v3954;
  unint64_t v3955;
  void *v3956;
  uint64_t v3957;
  uint64_t v3958;
  uint64_t v3959;
  uint64_t v3960;
  uint64_t v3961;
  uint64_t v3962;
  unint64_t v3963;
  void *v3964;
  uint64_t v3965;
  uint64_t v3966;
  uint64_t v3967;
  uint64_t v3968;
  uint64_t v3969;
  uint64_t v3970;
  unint64_t v3971;
  void *v3972;
  uint64_t v3973;
  uint64_t v3974;
  uint64_t v3975;
  uint64_t v3976;
  uint64_t v3977;
  uint64_t v3978;
  unint64_t v3979;
  void *v3980;
  uint64_t v3981;
  uint64_t v3982;
  uint64_t v3983;
  uint64_t v3984;
  uint64_t v3985;
  uint64_t v3986;
  unint64_t v3987;
  void *v3988;
  uint64_t v3989;
  uint64_t v3990;
  uint64_t v3991;
  uint64_t v3992;
  uint64_t v3993;
  uint64_t v3994;
  unint64_t v3995;
  void *v3996;
  uint64_t v3997;
  uint64_t v3998;
  uint64_t v3999;
  uint64_t v4000;
  uint64_t v4001;
  uint64_t v4002;
  unint64_t v4003;
  void *v4004;
  uint64_t v4005;
  uint64_t v4006;
  uint64_t v4007;
  uint64_t v4008;
  uint64_t v4009;
  uint64_t v4010;
  unint64_t v4011;
  void *v4012;
  uint64_t v4013;
  uint64_t v4014;
  uint64_t v4015;
  uint64_t v4016;
  uint64_t v4017;
  uint64_t v4018;
  unint64_t v4019;
  void *v4020;
  uint64_t v4021;
  uint64_t v4022;
  uint64_t v4023;
  uint64_t v4024;
  uint64_t v4025;
  uint64_t v4026;
  unint64_t v4027;
  void *v4028;
  uint64_t v4029;
  uint64_t v4030;
  uint64_t v4031;
  uint64_t v4032;
  uint64_t v4033;
  uint64_t v4034;
  unint64_t v4035;
  void *v4036;
  uint64_t v4037;
  uint64_t v4038;
  uint64_t v4039;
  uint64_t v4040;
  uint64_t v4041;
  uint64_t v4042;
  unint64_t v4043;
  void *v4044;
  uint64_t v4045;
  uint64_t v4046;
  uint64_t v4047;
  uint64_t v4048;
  uint64_t v4049;
  uint64_t v4050;
  unint64_t v4051;
  void *v4052;
  uint64_t v4053;
  uint64_t v4054;
  uint64_t v4055;
  uint64_t v4056;
  uint64_t v4057;
  uint64_t v4058;
  unint64_t v4059;
  void *v4060;
  uint64_t v4061;
  uint64_t v4062;
  uint64_t v4063;
  uint64_t v4064;
  uint64_t v4065;
  uint64_t v4066;
  unint64_t v4067;
  void *v4068;
  uint64_t v4069;
  uint64_t v4070;
  uint64_t v4071;
  uint64_t v4072;
  uint64_t v4073;
  uint64_t v4074;
  unint64_t v4075;
  void *v4076;
  uint64_t v4077;
  uint64_t v4078;
  uint64_t v4079;
  uint64_t v4080;
  uint64_t v4081;
  uint64_t v4082;
  unint64_t v4083;
  void *v4084;
  uint64_t v4085;
  uint64_t v4086;
  uint64_t v4087;
  uint64_t v4088;
  uint64_t v4089;
  uint64_t v4090;
  unint64_t v4091;
  void *v4092;
  uint64_t v4093;
  uint64_t v4094;
  uint64_t v4095;
  uint64_t v4096;
  uint64_t v4097;
  uint64_t v4098;
  unint64_t v4099;
  void *v4100;
  uint64_t v4101;
  uint64_t v4102;
  uint64_t v4103;
  uint64_t v4104;
  uint64_t v4105;
  uint64_t v4106;
  unint64_t v4107;
  void *v4108;
  uint64_t v4109;
  uint64_t v4110;
  uint64_t v4111;
  uint64_t v4112;
  uint64_t v4113;
  uint64_t v4114;
  unint64_t v4115;
  void *v4116;
  uint64_t v4117;
  uint64_t v4118;
  uint64_t v4119;
  uint64_t v4120;
  uint64_t v4121;
  uint64_t v4122;
  unint64_t v4123;
  void *v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  uint64_t v4128;
  uint64_t v4129;
  uint64_t v4130;
  unint64_t v4131;
  void *v4132;
  uint64_t v4133;
  uint64_t v4134;
  uint64_t v4135;
  uint64_t v4136;
  uint64_t v4137;
  uint64_t v4138;
  unint64_t v4139;
  void *v4140;
  uint64_t v4141;
  uint64_t v4142;
  uint64_t v4143;
  uint64_t v4144;
  uint64_t v4145;
  uint64_t v4146;
  unint64_t v4147;
  void *v4148;
  uint64_t v4149;
  uint64_t v4150;
  uint64_t v4151;
  uint64_t v4152;
  uint64_t v4153;
  uint64_t v4154;
  unint64_t v4155;
  void *v4156;
  uint64_t v4157;
  uint64_t v4158;
  uint64_t v4159;
  uint64_t v4160;
  uint64_t v4161;
  uint64_t v4162;
  unint64_t v4163;
  void *v4164;
  uint64_t v4165;
  uint64_t v4166;
  uint64_t v4167;
  uint64_t v4168;
  uint64_t v4169;
  uint64_t v4170;
  unint64_t v4171;
  void *v4172;
  uint64_t v4173;
  uint64_t v4174;
  uint64_t v4175;
  uint64_t v4176;
  uint64_t v4177;
  uint64_t v4178;
  unint64_t v4179;
  void *v4180;
  uint64_t v4181;
  uint64_t v4182;
  uint64_t v4183;
  uint64_t v4184;
  uint64_t v4185;
  uint64_t v4186;
  unint64_t v4187;
  void *v4188;
  uint64_t v4189;
  uint64_t v4190;
  uint64_t v4191;
  uint64_t v4192;
  uint64_t v4193;
  uint64_t v4194;
  unint64_t v4195;
  void *v4196;
  uint64_t v4197;
  uint64_t v4198;
  uint64_t v4199;
  uint64_t v4200;
  uint64_t v4201;
  uint64_t v4202;
  unint64_t v4203;
  void *v4204;
  uint64_t v4205;
  uint64_t v4206;
  uint64_t v4207;
  uint64_t v4208;
  uint64_t v4209;
  uint64_t v4210;
  unint64_t v4211;
  void *v4212;
  uint64_t v4213;
  uint64_t v4214;
  uint64_t v4215;
  uint64_t v4216;
  uint64_t v4217;
  uint64_t v4218;
  unint64_t v4219;
  void *v4220;
  uint64_t v4221;
  uint64_t v4222;
  uint64_t v4223;
  uint64_t v4224;
  uint64_t v4225;
  uint64_t v4226;
  unint64_t v4227;
  void *v4228;
  uint64_t v4229;
  uint64_t v4230;
  uint64_t v4231;
  uint64_t v4232;
  uint64_t v4233;
  uint64_t v4234;
  unint64_t v4235;
  void *v4236;
  uint64_t v4237;
  uint64_t v4238;
  uint64_t v4239;
  uint64_t v4240;
  uint64_t v4241;
  uint64_t v4242;
  unint64_t v4243;
  void *v4244;
  uint64_t v4245;
  uint64_t v4246;
  uint64_t v4247;
  uint64_t v4248;
  uint64_t v4249;
  uint64_t v4250;
  unint64_t v4251;
  void *v4252;
  uint64_t v4253;
  uint64_t v4254;
  uint64_t v4255;
  uint64_t v4256;
  uint64_t v4257;
  uint64_t v4258;
  unint64_t v4259;
  void *v4260;
  uint64_t v4261;
  uint64_t v4262;
  uint64_t v4263;
  uint64_t v4264;
  uint64_t v4265;
  uint64_t v4266;
  unint64_t v4267;
  void *v4268;
  uint64_t v4269;
  uint64_t v4270;
  uint64_t v4271;
  uint64_t v4272;
  uint64_t v4273;
  uint64_t v4274;
  unint64_t v4275;
  void *v4276;
  uint64_t v4277;
  uint64_t v4278;
  uint64_t v4279;
  uint64_t v4280;
  uint64_t v4281;
  uint64_t v4282;
  unint64_t v4283;
  void *v4284;
  uint64_t v4285;
  uint64_t v4286;
  uint64_t v4287;
  uint64_t v4288;
  uint64_t v4289;
  uint64_t v4290;
  unint64_t v4291;
  void *v4292;
  uint64_t v4293;
  uint64_t v4294;
  uint64_t v4295;
  uint64_t v4296;
  uint64_t v4297;
  uint64_t v4298;
  unint64_t v4299;
  void *v4300;
  uint64_t v4301;
  uint64_t v4302;
  uint64_t v4303;
  uint64_t v4304;
  uint64_t v4305;
  uint64_t v4306;
  unint64_t v4307;
  void *v4308;
  uint64_t v4309;
  uint64_t v4310;
  uint64_t v4311;
  uint64_t v4312;
  uint64_t v4313;
  uint64_t v4314;
  unint64_t v4315;
  void *v4316;
  uint64_t v4317;
  uint64_t v4318;
  uint64_t v4319;
  uint64_t v4320;
  uint64_t v4321;
  uint64_t v4322;
  unint64_t v4323;
  void *v4324;
  uint64_t v4325;
  uint64_t v4326;
  uint64_t v4327;
  uint64_t v4328;
  uint64_t v4329;
  uint64_t v4330;
  unint64_t v4331;
  void *v4332;
  uint64_t v4333;
  uint64_t v4334;
  uint64_t v4335;
  uint64_t v4336;
  uint64_t v4337;
  uint64_t v4338;
  unint64_t v4339;
  void *v4340;
  uint64_t v4341;
  uint64_t v4342;
  uint64_t v4343;
  uint64_t v4344;
  uint64_t v4345;
  uint64_t v4346;
  unint64_t v4347;
  void *v4348;
  uint64_t v4349;
  uint64_t v4350;
  uint64_t v4351;
  uint64_t v4352;
  uint64_t v4353;
  uint64_t v4354;
  unint64_t v4355;
  void *v4356;
  uint64_t v4357;
  uint64_t v4358;
  uint64_t v4359;
  uint64_t v4360;
  uint64_t v4361;
  uint64_t v4362;
  unint64_t v4363;
  void *v4364;
  uint64_t v4365;
  uint64_t v4366;
  uint64_t v4367;
  uint64_t v4368;
  uint64_t v4369;
  uint64_t v4370;
  unint64_t v4371;
  void *v4372;
  uint64_t v4373;
  uint64_t v4374;
  uint64_t v4375;
  uint64_t v4376;
  uint64_t v4377;
  uint64_t v4378;
  unint64_t v4379;
  void *v4380;
  uint64_t v4381;
  uint64_t v4382;
  uint64_t v4383;
  uint64_t v4384;
  uint64_t v4385;
  uint64_t v4386;
  unint64_t v4387;
  void *v4388;
  uint64_t v4389;
  uint64_t v4390;
  uint64_t v4391;
  uint64_t v4392;
  uint64_t v4393;
  uint64_t v4394;
  unint64_t v4395;
  void *v4396;
  uint64_t v4397;
  uint64_t v4398;
  uint64_t v4399;
  uint64_t v4400;
  uint64_t v4401;
  uint64_t v4402;
  unint64_t v4403;
  void *v4404;
  uint64_t v4405;
  uint64_t v4406;
  uint64_t v4407;
  uint64_t v4408;
  uint64_t v4409;
  uint64_t v4410;
  unint64_t v4411;
  void *v4412;
  uint64_t v4413;
  uint64_t v4414;
  uint64_t v4415;
  uint64_t v4416;
  uint64_t v4417;
  uint64_t v4418;
  unint64_t v4419;
  void *v4420;
  uint64_t v4421;
  uint64_t v4422;
  uint64_t v4423;
  uint64_t v4424;
  uint64_t v4425;
  uint64_t v4426;
  unint64_t v4427;
  void *v4428;
  uint64_t v4429;
  uint64_t v4430;
  uint64_t v4431;
  uint64_t v4432;
  uint64_t v4433;
  uint64_t v4434;
  unint64_t v4435;
  void *v4436;
  uint64_t v4437;
  uint64_t v4438;
  uint64_t v4439;
  uint64_t v4440;
  uint64_t v4441;
  uint64_t v4442;
  unint64_t v4443;
  void *v4444;
  uint64_t v4445;
  uint64_t v4446;
  uint64_t v4447;
  uint64_t v4448;
  uint64_t v4449;
  uint64_t v4450;
  unint64_t v4451;
  void *v4452;
  uint64_t v4453;
  uint64_t v4454;
  uint64_t v4455;
  uint64_t v4456;
  uint64_t v4457;
  uint64_t v4458;
  unint64_t v4459;
  void *v4460;
  uint64_t v4461;
  uint64_t v4462;
  uint64_t v4463;
  uint64_t v4464;
  uint64_t v4465;
  uint64_t v4466;
  unint64_t v4467;
  void *v4468;
  uint64_t v4469;
  uint64_t v4470;
  uint64_t v4471;
  uint64_t v4472;
  uint64_t v4473;
  uint64_t v4474;
  unint64_t v4475;
  void *v4476;
  uint64_t v4477;
  uint64_t v4478;
  uint64_t v4479;
  uint64_t v4480;
  uint64_t v4481;
  uint64_t v4482;
  unint64_t v4483;
  void *v4484;
  uint64_t v4485;
  uint64_t v4486;
  uint64_t v4487;
  uint64_t v4488;
  uint64_t v4489;
  uint64_t v4490;
  unint64_t v4491;
  void *v4492;
  uint64_t v4493;
  uint64_t v4494;
  uint64_t v4495;
  uint64_t v4496;
  uint64_t v4497;
  uint64_t v4498;
  unint64_t v4499;
  void *v4500;
  uint64_t v4501;
  uint64_t v4502;
  uint64_t v4503;
  uint64_t v4504;
  uint64_t v4505;
  uint64_t v4506;
  unint64_t v4507;
  void *v4508;
  uint64_t v4509;
  uint64_t v4510;
  uint64_t v4511;
  uint64_t v4512;
  uint64_t v4513;
  uint64_t v4514;
  unint64_t v4515;
  void *v4516;
  uint64_t v4517;
  uint64_t v4518;
  uint64_t v4519;
  uint64_t v4520;
  uint64_t v4521;
  uint64_t v4522;
  unint64_t v4523;
  void *v4524;
  uint64_t v4525;
  uint64_t v4526;
  uint64_t v4527;
  uint64_t v4528;
  uint64_t v4529;
  uint64_t v4530;
  unint64_t v4531;
  void *v4532;
  uint64_t v4533;
  uint64_t v4534;
  uint64_t v4535;
  uint64_t v4536;
  uint64_t v4537;
  uint64_t v4538;
  unint64_t v4539;
  void *v4540;
  uint64_t v4541;
  uint64_t v4542;
  uint64_t v4543;
  uint64_t v4544;
  uint64_t v4545;
  uint64_t v4546;
  unint64_t v4547;
  void *v4548;
  uint64_t v4549;
  uint64_t v4550;
  uint64_t v4551;
  uint64_t v4552;
  uint64_t v4553;
  uint64_t v4554;
  unint64_t v4555;
  void *v4556;
  uint64_t v4557;
  uint64_t v4558;
  uint64_t v4559;
  uint64_t v4560;
  uint64_t v4561;
  uint64_t v4562;
  unint64_t v4563;
  void *v4564;
  uint64_t v4565;
  uint64_t v4566;
  uint64_t v4567;
  uint64_t v4568;
  uint64_t v4569;
  uint64_t v4570;
  unint64_t v4571;
  void *v4572;
  uint64_t v4573;
  uint64_t v4574;
  uint64_t v4575;
  uint64_t v4576;
  uint64_t v4577;
  uint64_t v4578;
  unint64_t v4579;
  void *v4580;
  uint64_t v4581;
  uint64_t v4582;
  uint64_t v4583;
  uint64_t v4584;
  uint64_t v4585;
  uint64_t v4586;
  unint64_t v4587;
  void *v4588;
  uint64_t v4589;
  uint64_t v4590;
  uint64_t v4591;
  uint64_t v4592;
  uint64_t v4593;
  uint64_t v4594;
  unint64_t v4595;
  void *v4596;
  uint64_t v4597;
  uint64_t v4598;
  uint64_t v4599;
  uint64_t v4600;
  uint64_t v4601;
  uint64_t v4602;
  unint64_t v4603;
  void *v4604;
  uint64_t v4605;
  uint64_t v4606;
  uint64_t v4607;
  uint64_t v4608;
  uint64_t v4609;
  uint64_t v4610;
  unint64_t v4611;
  void *v4612;
  uint64_t v4613;
  uint64_t v4614;
  uint64_t v4615;
  uint64_t v4616;
  uint64_t v4617;
  uint64_t v4618;
  unint64_t v4619;
  void *v4620;
  uint64_t v4621;
  uint64_t v4622;
  uint64_t v4623;
  uint64_t v4624;
  uint64_t v4625;
  uint64_t v4626;
  unint64_t v4627;
  void *v4628;
  uint64_t v4629;
  uint64_t v4630;
  uint64_t v4631;
  uint64_t v4632;
  uint64_t v4633;
  uint64_t v4634;
  unint64_t v4635;
  void *v4636;
  uint64_t v4637;
  uint64_t v4638;
  uint64_t v4639;
  uint64_t v4640;
  uint64_t v4641;
  uint64_t v4642;
  unint64_t v4643;
  void *v4644;
  uint64_t v4645;
  uint64_t v4646;
  uint64_t v4647;
  uint64_t v4648;
  uint64_t v4649;
  uint64_t v4650;
  unint64_t v4651;
  void *v4652;
  uint64_t v4653;
  uint64_t v4654;
  uint64_t v4655;
  uint64_t v4656;
  uint64_t v4657;
  uint64_t v4658;
  unint64_t v4659;
  void *v4660;
  uint64_t v4661;
  uint64_t v4662;
  uint64_t v4663;
  uint64_t v4664;
  uint64_t v4665;
  uint64_t v4666;
  unint64_t v4667;
  void *v4668;
  uint64_t v4669;
  uint64_t v4670;
  uint64_t v4671;
  uint64_t v4672;
  uint64_t v4673;
  uint64_t v4674;
  unint64_t v4675;
  void *v4676;
  uint64_t v4677;
  uint64_t v4678;
  uint64_t v4679;
  uint64_t v4680;
  uint64_t v4681;
  uint64_t v4682;
  unint64_t v4683;
  void *v4684;
  uint64_t v4685;
  uint64_t v4686;
  uint64_t v4687;
  uint64_t v4688;
  uint64_t v4689;
  uint64_t v4690;
  unint64_t v4691;
  void *v4692;
  uint64_t v4693;
  uint64_t v4694;
  uint64_t v4695;
  uint64_t v4696;
  uint64_t v4697;
  uint64_t v4698;
  unint64_t v4699;
  void *v4700;
  uint64_t v4701;
  uint64_t v4702;
  uint64_t v4703;
  uint64_t v4704;
  uint64_t v4705;
  uint64_t v4706;
  unint64_t v4707;
  void *v4708;
  uint64_t v4709;
  uint64_t v4710;
  uint64_t v4711;
  uint64_t v4712;
  uint64_t v4713;
  uint64_t v4714;
  unint64_t v4715;
  void *v4716;
  uint64_t v4717;
  uint64_t v4718;
  uint64_t v4719;
  uint64_t v4720;
  uint64_t v4721;
  uint64_t v4722;
  unint64_t v4723;
  void *v4724;
  uint64_t v4725;
  uint64_t v4726;
  uint64_t v4727;
  uint64_t v4728;
  uint64_t v4729;
  uint64_t v4730;
  unint64_t v4731;
  void *v4732;
  uint64_t v4733;
  uint64_t v4734;
  uint64_t v4735;
  uint64_t v4736;
  uint64_t v4737;
  uint64_t v4738;
  unint64_t v4739;
  void *v4740;
  uint64_t v4741;
  uint64_t v4742;
  uint64_t v4743;
  uint64_t v4744;
  uint64_t v4745;
  uint64_t v4746;
  unint64_t v4747;
  void *v4748;
  uint64_t v4749;
  uint64_t v4750;
  uint64_t v4751;
  uint64_t v4752;
  uint64_t v4753;
  uint64_t v4754;
  unint64_t v4755;
  void *v4756;
  uint64_t v4757;
  uint64_t v4758;
  uint64_t v4759;
  uint64_t v4760;
  uint64_t v4761;
  uint64_t v4762;
  unint64_t v4763;
  void *v4764;
  uint64_t v4765;
  uint64_t v4766;
  uint64_t v4767;
  uint64_t v4768;
  uint64_t v4769;
  uint64_t v4770;
  unint64_t v4771;
  void *v4772;
  uint64_t v4773;
  uint64_t v4774;
  uint64_t v4775;
  uint64_t v4776;
  uint64_t v4777;
  uint64_t v4778;
  unint64_t v4779;
  void *v4780;
  uint64_t v4781;
  uint64_t v4782;
  uint64_t v4783;
  uint64_t v4784;
  uint64_t v4785;
  uint64_t v4786;
  unint64_t v4787;
  void *v4788;
  uint64_t v4789;
  uint64_t v4790;
  uint64_t v4791;
  uint64_t v4792;
  uint64_t v4793;
  uint64_t v4794;
  unint64_t v4795;
  void *v4796;
  uint64_t v4797;
  uint64_t v4798;
  uint64_t v4799;
  uint64_t v4800;
  uint64_t v4801;
  uint64_t v4802;
  unint64_t v4803;
  void *v4804;
  uint64_t v4805;
  uint64_t v4806;
  uint64_t v4807;
  uint64_t v4808;
  uint64_t v4809;
  uint64_t v4810;
  unint64_t v4811;
  void *v4812;
  uint64_t v4813;
  uint64_t v4814;
  uint64_t v4815;
  uint64_t v4816;
  uint64_t v4817;
  uint64_t v4818;
  unint64_t v4819;
  void *v4820;
  uint64_t v4821;
  uint64_t v4822;
  uint64_t v4823;
  uint64_t v4824;
  uint64_t v4825;
  uint64_t v4826;
  unint64_t v4827;
  void *v4828;
  uint64_t v4829;
  uint64_t v4830;
  uint64_t v4831;
  uint64_t v4832;
  uint64_t v4833;
  uint64_t v4834;
  unint64_t v4835;
  void *v4836;
  uint64_t v4837;
  uint64_t v4838;
  uint64_t v4839;
  uint64_t v4840;
  uint64_t v4841;
  uint64_t v4842;
  unint64_t v4843;
  void *v4844;
  uint64_t v4845;
  uint64_t v4846;
  uint64_t v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  unint64_t v4851;
  void *v4852;
  uint64_t v4853;
  uint64_t v4854;
  uint64_t v4855;
  uint64_t v4856;
  uint64_t v4857;
  uint64_t v4858;
  unint64_t v4859;
  void *v4860;
  uint64_t v4861;
  uint64_t v4862;
  uint64_t v4863;
  uint64_t v4864;
  uint64_t v4865;
  uint64_t v4866;
  unint64_t v4867;
  void *v4868;
  uint64_t v4869;
  uint64_t v4870;
  uint64_t v4871;
  uint64_t v4872;
  uint64_t v4873;
  uint64_t v4874;
  unint64_t v4875;
  void *v4876;
  uint64_t v4877;
  uint64_t v4878;
  uint64_t v4879;
  uint64_t v4880;
  uint64_t v4881;
  uint64_t v4882;
  unint64_t v4883;
  void *v4884;
  uint64_t v4885;
  uint64_t v4886;
  uint64_t v4887;
  uint64_t v4888;
  uint64_t v4889;
  uint64_t v4890;
  unint64_t v4891;
  void *v4892;
  uint64_t v4893;
  uint64_t v4894;
  uint64_t v4895;
  uint64_t v4896;
  uint64_t v4897;
  uint64_t v4898;
  unint64_t v4899;
  void *v4900;
  uint64_t v4901;
  uint64_t v4902;
  uint64_t v4903;
  uint64_t v4904;
  uint64_t v4905;
  uint64_t v4906;
  unint64_t v4907;
  void *v4908;
  uint64_t v4909;
  uint64_t v4910;
  uint64_t v4911;
  uint64_t v4912;
  uint64_t v4913;
  uint64_t v4914;

  v9 = *((_QWORD *)this + 546);
  if (v9)
  {
    v10 = *((unsigned int *)this + 1094);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 546);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *((_QWORD *)this + 543);
  if (v21)
  {
    v22 = *((unsigned int *)this + 1088);
    if ((_DWORD)v22)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v24 = (unint64_t *)v21;
      do
      {
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, a2, a3, a4, a5, a6, a7, a8);
            v26 = *(_QWORD *)(StatusReg + 752);
            if (v26)
            {
              if (!(v25 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v25 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v25)) & 1) != 0)
              {
LABEL_22:
                v27 = *(unsigned int *)(v26 + 8000);
                if (v27 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v26, v25, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v26 + 8 * v27) = v25 | 0x5000000000000;
                  *(_DWORD *)(v26 + 8000) = v27 + 1;
                }
                goto LABEL_17;
              }
              if (v25 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v25 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v25 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v25) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_22;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, v25, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v25, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
LABEL_17:
        ++v24;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 542);
  *((_QWORD *)this + 542) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v571, v572, v573, v574, v575, v576, v577, v578);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 541);
  *((_QWORD *)this + 541) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v579, v580, v581, v582, v583, v584, v585, v586);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 540);
  *((_QWORD *)this + 540) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v587, v588, v589, v590, v591, v592, v593, v594);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 539);
  *((_QWORD *)this + 539) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v595, v596, v597, v598, v599, v600, v601, v602);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = (WTF::StringImpl *)*((_QWORD *)this + 538);
  *((_QWORD *)this + 538) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v603, v604, v605, v606, v607, v608, v609, v610);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 537);
  *((_QWORD *)this + 537) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v611, v612, v613, v614, v615, v616, v617, v618);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 536);
  *((_QWORD *)this + 536) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v619, v620, v621, v622, v623, v624, v625, v626);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 535);
  *((_QWORD *)this + 535) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v627, v628, v629, v630, v631, v632, v633, v634);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 534);
  *((_QWORD *)this + 534) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v635, v636, v637, v638, v639, v640, v641, v642);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 533);
  *((_QWORD *)this + 533) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v643, v644, v645, v646, v647, v648, v649, v650);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 532);
  *((_QWORD *)this + 532) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v651, v652, v653, v654, v655, v656, v657, v658);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 531);
  *((_QWORD *)this + 531) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v659, v660, v661, v662, v663, v664, v665, v666);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 530);
  *((_QWORD *)this + 530) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v667, v668, v669, v670, v671, v672, v673, v674);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  v41 = (WTF::StringImpl *)*((_QWORD *)this + 529);
  *((_QWORD *)this + 529) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v675, v676, v677, v678, v679, v680, v681, v682);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 528);
  *((_QWORD *)this + 528) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v683, v684, v685, v686, v687, v688, v689, v690);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 527);
  *((_QWORD *)this + 527) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v691, v692, v693, v694, v695, v696, v697, v698);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 526);
  *((_QWORD *)this + 526) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v699, v700, v701, v702, v703, v704, v705, v706);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)this + 525);
  *((_QWORD *)this + 525) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v707, v708, v709, v710, v711, v712, v713, v714);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 524);
  *((_QWORD *)this + 524) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v715, v716, v717, v718, v719, v720, v721, v722);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 523);
  *((_QWORD *)this + 523) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v723, v724, v725, v726, v727, v728, v729, v730);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 522);
  *((_QWORD *)this + 522) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v731, v732, v733, v734, v735, v736, v737, v738);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 521);
  *((_QWORD *)this + 521) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v739, v740, v741, v742, v743, v744, v745, v746);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 520);
  *((_QWORD *)this + 520) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v747, v748, v749, v750, v751, v752, v753, v754);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 519);
  *((_QWORD *)this + 519) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v755, v756, v757, v758, v759, v760, v761, v762);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = (WTF::StringImpl *)*((_QWORD *)this + 518);
  *((_QWORD *)this + 518) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v763, v764, v765, v766, v767, v768, v769, v770);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 517);
  *((_QWORD *)this + 517) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v771, v772, v773, v774, v775, v776, v777, v778);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 516);
  *((_QWORD *)this + 516) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v779, v780, v781, v782, v783, v784, v785, v786);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 515);
  *((_QWORD *)this + 515) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v787, v788, v789, v790, v791, v792, v793, v794);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 514);
  *((_QWORD *)this + 514) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v795, v796, v797, v798, v799, v800, v801, v802);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 513);
  *((_QWORD *)this + 513) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v803, v804, v805, v806, v807, v808, v809, v810);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 512);
  *((_QWORD *)this + 512) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v811, v812, v813, v814, v815, v816, v817, v818);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 511);
  *((_QWORD *)this + 511) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v819, v820, v821, v822, v823, v824, v825, v826);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 510);
  *((_QWORD *)this + 510) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v827, v828, v829, v830, v831, v832, v833, v834);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = (WTF::StringImpl *)*((_QWORD *)this + 509);
  *((_QWORD *)this + 509) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v835, v836, v837, v838, v839, v840, v841, v842);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 508);
  *((_QWORD *)this + 508) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v843, v844, v845, v846, v847, v848, v849, v850);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = (WTF::StringImpl *)*((_QWORD *)this + 507);
  *((_QWORD *)this + 507) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v851, v852, v853, v854, v855, v856, v857, v858);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = (WTF::StringImpl *)*((_QWORD *)this + 506);
  *((_QWORD *)this + 506) = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v859, v860, v861, v862, v863, v864, v865, v866);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 505);
  *((_QWORD *)this + 505) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v867, v868, v869, v870, v871, v872, v873, v874);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 504);
  *((_QWORD *)this + 504) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v875, v876, v877, v878, v879, v880, v881, v882);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 503);
  *((_QWORD *)this + 503) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v883, v884, v885, v886, v887, v888, v889, v890);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = (WTF::StringImpl *)*((_QWORD *)this + 502);
  *((_QWORD *)this + 502) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v891, v892, v893, v894, v895, v896, v897, v898);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 501);
  *((_QWORD *)this + 501) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v899, v900, v901, v902, v903, v904, v905, v906);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 500);
  *((_QWORD *)this + 500) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v907, v908, v909, v910, v911, v912, v913, v914);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 499);
  *((_QWORD *)this + 499) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v915, v916, v917, v918, v919, v920, v921, v922);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 498);
  *((_QWORD *)this + 498) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v923, v924, v925, v926, v927, v928, v929, v930);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 497);
  *((_QWORD *)this + 497) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v931, v932, v933, v934, v935, v936, v937, v938);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 496);
  *((_QWORD *)this + 496) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v939, v940, v941, v942, v943, v944, v945, v946);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = (WTF::StringImpl *)*((_QWORD *)this + 495);
  *((_QWORD *)this + 495) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v947, v948, v949, v950, v951, v952, v953, v954);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 494);
  *((_QWORD *)this + 494) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v955, v956, v957, v958, v959, v960, v961, v962);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 493);
  *((_QWORD *)this + 493) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v963, v964, v965, v966, v967, v968, v969, v970);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 492);
  *((_QWORD *)this + 492) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v971, v972, v973, v974, v975, v976, v977, v978);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = (WTF::StringImpl *)*((_QWORD *)this + 491);
  *((_QWORD *)this + 491) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v979, v980, v981, v982, v983, v984, v985, v986);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)this + 490);
  *((_QWORD *)this + 490) = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v987, v988, v989, v990, v991, v992, v993, v994);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = (WTF::StringImpl *)*((_QWORD *)this + 489);
  *((_QWORD *)this + 489) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v995, v996, v997, v998, v999, v1000, v1001, v1002);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = (WTF::StringImpl *)*((_QWORD *)this + 488);
  *((_QWORD *)this + 488) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = (WTF::StringImpl *)*((_QWORD *)this + 487);
  *((_QWORD *)this + 487) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = (WTF::StringImpl *)*((_QWORD *)this + 486);
  *((_QWORD *)this + 486) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1019, v1020, v1021, v1022, v1023, v1024, v1025, v1026);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 485);
  *((_QWORD *)this + 485) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1027, v1028, v1029, v1030, v1031, v1032, v1033, v1034);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = (WTF::StringImpl *)*((_QWORD *)this + 484);
  *((_QWORD *)this + 484) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = (WTF::StringImpl *)*((_QWORD *)this + 483);
  *((_QWORD *)this + 483) = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1043, v1044, v1045, v1046, v1047, v1048, v1049, v1050);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = (WTF::StringImpl *)*((_QWORD *)this + 482);
  *((_QWORD *)this + 482) = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1051, v1052, v1053, v1054, v1055, v1056, v1057, v1058);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = (WTF::StringImpl *)*((_QWORD *)this + 481);
  *((_QWORD *)this + 481) = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = (WTF::StringImpl *)*((_QWORD *)this + 480);
  *((_QWORD *)this + 480) = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1067, v1068, v1069, v1070, v1071, v1072, v1073, v1074);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 479);
  *((_QWORD *)this + 479) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1075, v1076, v1077, v1078, v1079, v1080, v1081, v1082);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)this + 478);
  *((_QWORD *)this + 478) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1083, v1084, v1085, v1086, v1087, v1088, v1089, v1090);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 477);
  *((_QWORD *)this + 477) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1091, v1092, v1093, v1094, v1095, v1096, v1097, v1098);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 476);
  *((_QWORD *)this + 476) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1099, v1100, v1101, v1102, v1103, v1104, v1105, v1106);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)this + 475);
  *((_QWORD *)this + 475) = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1107, v1108, v1109, v1110, v1111, v1112, v1113, v1114);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = (WTF::StringImpl *)*((_QWORD *)this + 474);
  *((_QWORD *)this + 474) = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1115, v1116, v1117, v1118, v1119, v1120, v1121, v1122);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)this + 473);
  *((_QWORD *)this + 473) = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1123, v1124, v1125, v1126, v1127, v1128, v1129, v1130);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)this + 472);
  *((_QWORD *)this + 472) = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1131, v1132, v1133, v1134, v1135, v1136, v1137, v1138);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = (WTF::StringImpl *)*((_QWORD *)this + 471);
  *((_QWORD *)this + 471) = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1139, v1140, v1141, v1142, v1143, v1144, v1145, v1146);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = (WTF::StringImpl *)*((_QWORD *)this + 470);
  *((_QWORD *)this + 470) = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1147, v1148, v1149, v1150, v1151, v1152, v1153, v1154);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 469);
  *((_QWORD *)this + 469) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1155, v1156, v1157, v1158, v1159, v1160, v1161, v1162);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 468);
  *((_QWORD *)this + 468) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1163, v1164, v1165, v1166, v1167, v1168, v1169, v1170);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 467);
  *((_QWORD *)this + 467) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 466);
  *((_QWORD *)this + 466) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 465);
  *((_QWORD *)this + 465) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1187, v1188, v1189, v1190, v1191, v1192, v1193, v1194);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 464);
  *((_QWORD *)this + 464) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 463);
  *((_QWORD *)this + 463) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1203, v1204, v1205, v1206, v1207, v1208, v1209, v1210);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 462);
  *((_QWORD *)this + 462) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1211, v1212, v1213, v1214, v1215, v1216, v1217, v1218);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 461);
  *((_QWORD *)this + 461) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1219, v1220, v1221, v1222, v1223, v1224, v1225, v1226);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 460);
  *((_QWORD *)this + 460) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1227, v1228, v1229, v1230, v1231, v1232, v1233, v1234);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 459);
  *((_QWORD *)this + 459) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1235, v1236, v1237, v1238, v1239, v1240, v1241, v1242);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 458);
  *((_QWORD *)this + 458) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1243, v1244, v1245, v1246, v1247, v1248, v1249, v1250);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 457);
  *((_QWORD *)this + 457) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 456);
  *((_QWORD *)this + 456) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1259, v1260, v1261, v1262, v1263, v1264, v1265, v1266);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 455);
  *((_QWORD *)this + 455) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 454);
  *((_QWORD *)this + 454) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1275, v1276, v1277, v1278, v1279, v1280, v1281, v1282);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 453);
  *((_QWORD *)this + 453) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1283, v1284, v1285, v1286, v1287, v1288, v1289, v1290);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 452);
  *((_QWORD *)this + 452) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1291, v1292, v1293, v1294, v1295, v1296, v1297, v1298);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1299, v1300, v1301, v1302, v1303, v1304, v1305, v1306);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1307, v1308, v1309, v1310, v1311, v1312, v1313, v1314);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1315, v1316, v1317, v1318, v1319, v1320, v1321, v1322);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1323, v1324, v1325, v1326, v1327, v1328, v1329, v1330);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1331, v1332, v1333, v1334, v1335, v1336, v1337, v1338);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1339, v1340, v1341, v1342, v1343, v1344, v1345, v1346);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1355, v1356, v1357, v1358, v1359, v1360, v1361, v1362);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1363, v1364, v1365, v1366, v1367, v1368, v1369, v1370);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1371, v1372, v1373, v1374, v1375, v1376, v1377, v1378);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1387, v1388, v1389, v1390, v1391, v1392, v1393, v1394);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1395, v1396, v1397, v1398, v1399, v1400, v1401, v1402);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1403, v1404, v1405, v1406, v1407, v1408, v1409, v1410);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1411, v1412, v1413, v1414, v1415, v1416, v1417, v1418);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1435, v1436, v1437, v1438, v1439, v1440, v1441, v1442);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1443, v1444, v1445, v1446, v1447, v1448, v1449, v1450);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = (WTF::StringImpl *)*((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1459, v1460, v1461, v1462, v1463, v1464, v1465, v1466);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = (WTF::StringImpl *)*((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = (WTF::StringImpl *)*((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1475, v1476, v1477, v1478, v1479, v1480, v1481, v1482);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = (WTF::StringImpl *)*((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = (WTF::StringImpl *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1491, v1492, v1493, v1494, v1495, v1496, v1497, v1498);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = (WTF::StringImpl *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1499, v1500, v1501, v1502, v1503, v1504, v1505, v1506);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = (WTF::StringImpl *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1507, v1508, v1509, v1510, v1511, v1512, v1513, v1514);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = (WTF::StringImpl *)*((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1515, v1516, v1517, v1518, v1519, v1520, v1521, v1522);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = (WTF::StringImpl *)*((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1523, v1524, v1525, v1526, v1527, v1528, v1529, v1530);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = (WTF::StringImpl *)*((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1531, v1532, v1533, v1534, v1535, v1536, v1537, v1538);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1539, v1540, v1541, v1542, v1543, v1544, v1545, v1546);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = (WTF::StringImpl *)*((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
    {
      WTF::StringImpl::~StringImpl(v150, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1547, v1548, v1549, v1550, v1551, v1552, v1553, v1554);
    }
    else
    {
      *(_DWORD *)v150 -= 2;
    }
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1555, v1556, v1557, v1558, v1559, v1560, v1561, v1562);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  v152 = (WTF::StringImpl *)*((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
    {
      WTF::StringImpl::~StringImpl(v152, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1563, v1564, v1565, v1566, v1567, v1568, v1569, v1570);
    }
    else
    {
      *(_DWORD *)v152 -= 2;
    }
  }
  v153 = (WTF::StringImpl *)*((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
    {
      WTF::StringImpl::~StringImpl(v153, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1571, v1572, v1573, v1574, v1575, v1576, v1577, v1578);
    }
    else
    {
      *(_DWORD *)v153 -= 2;
    }
  }
  v154 = (WTF::StringImpl *)*((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
    {
      WTF::StringImpl::~StringImpl(v154, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1579, v1580, v1581, v1582, v1583, v1584, v1585, v1586);
    }
    else
    {
      *(_DWORD *)v154 -= 2;
    }
  }
  v155 = (WTF::StringImpl *)*((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1587, v1588, v1589, v1590, v1591, v1592, v1593, v1594);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  v156 = (WTF::StringImpl *)*((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1595, v1596, v1597, v1598, v1599, v1600, v1601, v1602);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  v157 = (WTF::StringImpl *)*((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
    {
      WTF::StringImpl::~StringImpl(v157, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1603, v1604, v1605, v1606, v1607, v1608, v1609, v1610);
    }
    else
    {
      *(_DWORD *)v157 -= 2;
    }
  }
  v158 = (WTF::StringImpl *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
    {
      WTF::StringImpl::~StringImpl(v158, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1611, v1612, v1613, v1614, v1615, v1616, v1617, v1618);
    }
    else
    {
      *(_DWORD *)v158 -= 2;
    }
  }
  v159 = (WTF::StringImpl *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1619, v1620, v1621, v1622, v1623, v1624, v1625, v1626);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
    {
      WTF::StringImpl::~StringImpl(v160, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1627, v1628, v1629, v1630, v1631, v1632, v1633, v1634);
    }
    else
    {
      *(_DWORD *)v160 -= 2;
    }
  }
  v161 = (WTF::StringImpl *)*((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
    {
      WTF::StringImpl::~StringImpl(v161, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1635, v1636, v1637, v1638, v1639, v1640, v1641, v1642);
    }
    else
    {
      *(_DWORD *)v161 -= 2;
    }
  }
  v162 = (WTF::StringImpl *)*((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
    {
      WTF::StringImpl::~StringImpl(v162, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1643, v1644, v1645, v1646, v1647, v1648, v1649, v1650);
    }
    else
    {
      *(_DWORD *)v162 -= 2;
    }
  }
  v163 = (WTF::StringImpl *)*((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
    {
      WTF::StringImpl::~StringImpl(v163, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1651, v1652, v1653, v1654, v1655, v1656, v1657, v1658);
    }
    else
    {
      *(_DWORD *)v163 -= 2;
    }
  }
  v164 = (WTF::StringImpl *)*((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
    {
      WTF::StringImpl::~StringImpl(v164, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1659, v1660, v1661, v1662, v1663, v1664, v1665, v1666);
    }
    else
    {
      *(_DWORD *)v164 -= 2;
    }
  }
  v165 = (WTF::StringImpl *)*((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::~StringImpl(v165, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1667, v1668, v1669, v1670, v1671, v1672, v1673, v1674);
    }
    else
    {
      *(_DWORD *)v165 -= 2;
    }
  }
  v166 = (WTF::StringImpl *)*((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1675, v1676, v1677, v1678, v1679, v1680, v1681, v1682);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
  }
  v167 = (WTF::StringImpl *)*((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
  v168 = (WTF::StringImpl *)*((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
    {
      WTF::StringImpl::~StringImpl(v168, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1691, v1692, v1693, v1694, v1695, v1696, v1697, v1698);
    }
    else
    {
      *(_DWORD *)v168 -= 2;
    }
  }
  v169 = (WTF::StringImpl *)*((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
    {
      WTF::StringImpl::~StringImpl(v169, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1699, v1700, v1701, v1702, v1703, v1704, v1705, v1706);
    }
    else
    {
      *(_DWORD *)v169 -= 2;
    }
  }
  v170 = (WTF::StringImpl *)*((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1707, v1708, v1709, v1710, v1711, v1712, v1713, v1714);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  v171 = (WTF::StringImpl *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1715, v1716, v1717, v1718, v1719, v1720, v1721, v1722);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v172 = (WTF::StringImpl *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1723, v1724, v1725, v1726, v1727, v1728, v1729, v1730);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1731, v1732, v1733, v1734, v1735, v1736, v1737, v1738);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
    {
      WTF::StringImpl::~StringImpl(v174, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1739, v1740, v1741, v1742, v1743, v1744, v1745, v1746);
    }
    else
    {
      *(_DWORD *)v174 -= 2;
    }
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1747, v1748, v1749, v1750, v1751, v1752, v1753, v1754);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  v176 = (WTF::StringImpl *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1755, v1756, v1757, v1758, v1759, v1760, v1761, v1762);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1770);
    }
    else
    {
      *(_DWORD *)v177 -= 2;
    }
  }
  v178 = (WTF::StringImpl *)*((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
    {
      WTF::StringImpl::~StringImpl(v178, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1771, v1772, v1773, v1774, v1775, v1776, v1777, v1778);
    }
    else
    {
      *(_DWORD *)v178 -= 2;
    }
  }
  v179 = (WTF::StringImpl *)*((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
    {
      WTF::StringImpl::~StringImpl(v179, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1779, v1780, v1781, v1782, v1783, v1784, v1785, v1786);
    }
    else
    {
      *(_DWORD *)v179 -= 2;
    }
  }
  v180 = (WTF::StringImpl *)*((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
    {
      WTF::StringImpl::~StringImpl(v180, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1787, v1788, v1789, v1790, v1791, v1792, v1793, v1794);
    }
    else
    {
      *(_DWORD *)v180 -= 2;
    }
  }
  v181 = (WTF::StringImpl *)*((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
    {
      WTF::StringImpl::~StringImpl(v181, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1795, v1796, v1797, v1798, v1799, v1800, v1801, v1802);
    }
    else
    {
      *(_DWORD *)v181 -= 2;
    }
  }
  v182 = (WTF::StringImpl *)*((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1803, v1804, v1805, v1806, v1807, v1808, v1809, v1810);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v183 = (WTF::StringImpl *)*((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1811, v1812, v1813, v1814, v1815, v1816, v1817, v1818);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  v184 = (WTF::StringImpl *)*((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
    {
      WTF::StringImpl::~StringImpl(v184, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1819, v1820, v1821, v1822, v1823, v1824, v1825, v1826);
    }
    else
    {
      *(_DWORD *)v184 -= 2;
    }
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
    {
      WTF::StringImpl::~StringImpl(v185, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1827, v1828, v1829, v1830, v1831, v1832, v1833, v1834);
    }
    else
    {
      *(_DWORD *)v185 -= 2;
    }
  }
  v186 = (WTF::StringImpl *)*((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
    {
      WTF::StringImpl::~StringImpl(v186, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1835, v1836, v1837, v1838, v1839, v1840, v1841, v1842);
    }
    else
    {
      *(_DWORD *)v186 -= 2;
    }
  }
  v187 = (WTF::StringImpl *)*((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1843, v1844, v1845, v1846, v1847, v1848, v1849, v1850);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v188 = (WTF::StringImpl *)*((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1851, v1852, v1853, v1854, v1855, v1856, v1857, v1858);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
  v189 = (WTF::StringImpl *)*((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
    {
      WTF::StringImpl::~StringImpl(v189, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1859, v1860, v1861, v1862, v1863, v1864, v1865, v1866);
    }
    else
    {
      *(_DWORD *)v189 -= 2;
    }
  }
  v190 = (WTF::StringImpl *)*((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1867, v1868, v1869, v1870, v1871, v1872, v1873, v1874);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
  v191 = (WTF::StringImpl *)*((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
    {
      WTF::StringImpl::~StringImpl(v191, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1875, v1876, v1877, v1878, v1879, v1880, v1881, v1882);
    }
    else
    {
      *(_DWORD *)v191 -= 2;
    }
  }
  v192 = (WTF::StringImpl *)*((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
    {
      WTF::StringImpl::~StringImpl(v192, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1883, v1884, v1885, v1886, v1887, v1888, v1889, v1890);
    }
    else
    {
      *(_DWORD *)v192 -= 2;
    }
  }
  v193 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1891, v1892, v1893, v1894, v1895, v1896, v1897, v1898);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  v194 = (WTF::StringImpl *)*((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
    {
      WTF::StringImpl::~StringImpl(v194, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1899, v1900, v1901, v1902, v1903, v1904, v1905, v1906);
    }
    else
    {
      *(_DWORD *)v194 -= 2;
    }
  }
  v195 = (WTF::StringImpl *)*((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
    {
      WTF::StringImpl::~StringImpl(v195, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1907, v1908, v1909, v1910, v1911, v1912, v1913, v1914);
    }
    else
    {
      *(_DWORD *)v195 -= 2;
    }
  }
  v196 = (WTF::StringImpl *)*((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1915, v1916, v1917, v1918, v1919, v1920, v1921, v1922);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  v197 = (WTF::StringImpl *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
    {
      WTF::StringImpl::~StringImpl(v197, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1923, v1924, v1925, v1926, v1927, v1928, v1929, v1930);
    }
    else
    {
      *(_DWORD *)v197 -= 2;
    }
  }
  v198 = (WTF::StringImpl *)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
    {
      WTF::StringImpl::~StringImpl(v198, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1931, v1932, v1933, v1934, v1935, v1936, v1937, v1938);
    }
    else
    {
      *(_DWORD *)v198 -= 2;
    }
  }
  v199 = (WTF::StringImpl *)*((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v199)
  {
    if (*(_DWORD *)v199 == 2)
    {
      WTF::StringImpl::~StringImpl(v199, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1939, v1940, v1941, v1942, v1943, v1944, v1945, v1946);
    }
    else
    {
      *(_DWORD *)v199 -= 2;
    }
  }
  v200 = (WTF::StringImpl *)*((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
    {
      WTF::StringImpl::~StringImpl(v200, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1947, v1948, v1949, v1950, v1951, v1952, v1953, v1954);
    }
    else
    {
      *(_DWORD *)v200 -= 2;
    }
  }
  v201 = (WTF::StringImpl *)*((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1955, v1956, v1957, v1958, v1959, v1960, v1961, v1962);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  v202 = (WTF::StringImpl *)*((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
    {
      WTF::StringImpl::~StringImpl(v202, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1963, v1964, v1965, v1966, v1967, v1968, v1969, v1970);
    }
    else
    {
      *(_DWORD *)v202 -= 2;
    }
  }
  v203 = (WTF::StringImpl *)*((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
    {
      WTF::StringImpl::~StringImpl(v203, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1971, v1972, v1973, v1974, v1975, v1976, v1977, v1978);
    }
    else
    {
      *(_DWORD *)v203 -= 2;
    }
  }
  v204 = (WTF::StringImpl *)*((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1979, v1980, v1981, v1982, v1983, v1984, v1985, v1986);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  v205 = (WTF::StringImpl *)*((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
    {
      WTF::StringImpl::~StringImpl(v205, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1987, v1988, v1989, v1990, v1991, v1992, v1993, v1994);
    }
    else
    {
      *(_DWORD *)v205 -= 2;
    }
  }
  v206 = (WTF::StringImpl *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
    {
      WTF::StringImpl::~StringImpl(v206, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v1995, v1996, v1997, v1998, v1999, v2000, v2001, v2002);
    }
    else
    {
      *(_DWORD *)v206 -= 2;
    }
  }
  v207 = (WTF::StringImpl *)*((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
    {
      WTF::StringImpl::~StringImpl(v207, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2003, v2004, v2005, v2006, v2007, v2008, v2009, v2010);
    }
    else
    {
      *(_DWORD *)v207 -= 2;
    }
  }
  v208 = (WTF::StringImpl *)*((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
    {
      WTF::StringImpl::~StringImpl(v208, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2011, v2012, v2013, v2014, v2015, v2016, v2017, v2018);
    }
    else
    {
      *(_DWORD *)v208 -= 2;
    }
  }
  v209 = (WTF::StringImpl *)*((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
    {
      WTF::StringImpl::~StringImpl(v209, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2019, v2020, v2021, v2022, v2023, v2024, v2025, v2026);
    }
    else
    {
      *(_DWORD *)v209 -= 2;
    }
  }
  v210 = (WTF::StringImpl *)*((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
    {
      WTF::StringImpl::~StringImpl(v210, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2027, v2028, v2029, v2030, v2031, v2032, v2033, v2034);
    }
    else
    {
      *(_DWORD *)v210 -= 2;
    }
  }
  v211 = (WTF::StringImpl *)*((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
    {
      WTF::StringImpl::~StringImpl(v211, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2035, v2036, v2037, v2038, v2039, v2040, v2041, v2042);
    }
    else
    {
      *(_DWORD *)v211 -= 2;
    }
  }
  v212 = (WTF::StringImpl *)*((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
    {
      WTF::StringImpl::~StringImpl(v212, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2043, v2044, v2045, v2046, v2047, v2048, v2049, v2050);
    }
    else
    {
      *(_DWORD *)v212 -= 2;
    }
  }
  v213 = (WTF::StringImpl *)*((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
    {
      WTF::StringImpl::~StringImpl(v213, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2051, v2052, v2053, v2054, v2055, v2056, v2057, v2058);
    }
    else
    {
      *(_DWORD *)v213 -= 2;
    }
  }
  v214 = (WTF::StringImpl *)*((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
    {
      WTF::StringImpl::~StringImpl(v214, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2059, v2060, v2061, v2062, v2063, v2064, v2065, v2066);
    }
    else
    {
      *(_DWORD *)v214 -= 2;
    }
  }
  v215 = (WTF::StringImpl *)*((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
    {
      WTF::StringImpl::~StringImpl(v215, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2067, v2068, v2069, v2070, v2071, v2072, v2073, v2074);
    }
    else
    {
      *(_DWORD *)v215 -= 2;
    }
  }
  v216 = (WTF::StringImpl *)*((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
    {
      WTF::StringImpl::~StringImpl(v216, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2075, v2076, v2077, v2078, v2079, v2080, v2081, v2082);
    }
    else
    {
      *(_DWORD *)v216 -= 2;
    }
  }
  v217 = (WTF::StringImpl *)*((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
    {
      WTF::StringImpl::~StringImpl(v217, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2083, v2084, v2085, v2086, v2087, v2088, v2089, v2090);
    }
    else
    {
      *(_DWORD *)v217 -= 2;
    }
  }
  v218 = (WTF::StringImpl *)*((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
    {
      WTF::StringImpl::~StringImpl(v218, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2091, v2092, v2093, v2094, v2095, v2096, v2097, v2098);
    }
    else
    {
      *(_DWORD *)v218 -= 2;
    }
  }
  v219 = (WTF::StringImpl *)*((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
    {
      WTF::StringImpl::~StringImpl(v219, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2099, v2100, v2101, v2102, v2103, v2104, v2105, v2106);
    }
    else
    {
      *(_DWORD *)v219 -= 2;
    }
  }
  v220 = (WTF::StringImpl *)*((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2107, v2108, v2109, v2110, v2111, v2112, v2113, v2114);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  v221 = (WTF::StringImpl *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2115, v2116, v2117, v2118, v2119, v2120, v2121, v2122);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
  }
  v222 = (WTF::StringImpl *)*((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
    {
      WTF::StringImpl::~StringImpl(v222, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130);
    }
    else
    {
      *(_DWORD *)v222 -= 2;
    }
  }
  v223 = (WTF::StringImpl *)*((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
    {
      WTF::StringImpl::~StringImpl(v223, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2131, v2132, v2133, v2134, v2135, v2136, v2137, v2138);
    }
    else
    {
      *(_DWORD *)v223 -= 2;
    }
  }
  v224 = (WTF::StringImpl *)*((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
    {
      WTF::StringImpl::~StringImpl(v224, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146);
    }
    else
    {
      *(_DWORD *)v224 -= 2;
    }
  }
  v225 = (WTF::StringImpl *)*((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
    {
      WTF::StringImpl::~StringImpl(v225, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2147, v2148, v2149, v2150, v2151, v2152, v2153, v2154);
    }
    else
    {
      *(_DWORD *)v225 -= 2;
    }
  }
  v226 = (WTF::StringImpl *)*((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v226)
  {
    if (*(_DWORD *)v226 == 2)
    {
      WTF::StringImpl::~StringImpl(v226, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2155, v2156, v2157, v2158, v2159, v2160, v2161, v2162);
    }
    else
    {
      *(_DWORD *)v226 -= 2;
    }
  }
  v227 = (WTF::StringImpl *)*((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
    {
      WTF::StringImpl::~StringImpl(v227, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2163, v2164, v2165, v2166, v2167, v2168, v2169, v2170);
    }
    else
    {
      *(_DWORD *)v227 -= 2;
    }
  }
  v228 = (WTF::StringImpl *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
    {
      WTF::StringImpl::~StringImpl(v228, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2171, v2172, v2173, v2174, v2175, v2176, v2177, v2178);
    }
    else
    {
      *(_DWORD *)v228 -= 2;
    }
  }
  v229 = (WTF::StringImpl *)*((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
    {
      WTF::StringImpl::~StringImpl(v229, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2179, v2180, v2181, v2182, v2183, v2184, v2185, v2186);
    }
    else
    {
      *(_DWORD *)v229 -= 2;
    }
  }
  v230 = (WTF::StringImpl *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl(v230, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2187, v2188, v2189, v2190, v2191, v2192, v2193, v2194);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
  }
  v231 = (WTF::StringImpl *)*((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
    {
      WTF::StringImpl::~StringImpl(v231, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2195, v2196, v2197, v2198, v2199, v2200, v2201, v2202);
    }
    else
    {
      *(_DWORD *)v231 -= 2;
    }
  }
  v232 = (WTF::StringImpl *)*((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
    {
      WTF::StringImpl::~StringImpl(v232, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2203, v2204, v2205, v2206, v2207, v2208, v2209, v2210);
    }
    else
    {
      *(_DWORD *)v232 -= 2;
    }
  }
  v233 = (WTF::StringImpl *)*((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
    {
      WTF::StringImpl::~StringImpl(v233, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2211, v2212, v2213, v2214, v2215, v2216, v2217, v2218);
    }
    else
    {
      *(_DWORD *)v233 -= 2;
    }
  }
  v234 = (WTF::StringImpl *)*((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
    {
      WTF::StringImpl::~StringImpl(v234, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2219, v2220, v2221, v2222, v2223, v2224, v2225, v2226);
    }
    else
    {
      *(_DWORD *)v234 -= 2;
    }
  }
  v235 = (WTF::StringImpl *)*((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
    {
      WTF::StringImpl::~StringImpl(v235, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2227, v2228, v2229, v2230, v2231, v2232, v2233, v2234);
    }
    else
    {
      *(_DWORD *)v235 -= 2;
    }
  }
  v236 = (WTF::StringImpl *)*((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
    {
      WTF::StringImpl::~StringImpl(v236, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2235, v2236, v2237, v2238, v2239, v2240, v2241, v2242);
    }
    else
    {
      *(_DWORD *)v236 -= 2;
    }
  }
  v237 = (WTF::StringImpl *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
    {
      WTF::StringImpl::~StringImpl(v237, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2243, v2244, v2245, v2246, v2247, v2248, v2249, v2250);
    }
    else
    {
      *(_DWORD *)v237 -= 2;
    }
  }
  v238 = (WTF::StringImpl *)*((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v238)
  {
    if (*(_DWORD *)v238 == 2)
    {
      WTF::StringImpl::~StringImpl(v238, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2251, v2252, v2253, v2254, v2255, v2256, v2257, v2258);
    }
    else
    {
      *(_DWORD *)v238 -= 2;
    }
  }
  v239 = (WTF::StringImpl *)*((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v239)
  {
    if (*(_DWORD *)v239 == 2)
    {
      WTF::StringImpl::~StringImpl(v239, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2259, v2260, v2261, v2262, v2263, v2264, v2265, v2266);
    }
    else
    {
      *(_DWORD *)v239 -= 2;
    }
  }
  v240 = (WTF::StringImpl *)*((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
    {
      WTF::StringImpl::~StringImpl(v240, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2267, v2268, v2269, v2270, v2271, v2272, v2273, v2274);
    }
    else
    {
      *(_DWORD *)v240 -= 2;
    }
  }
  v241 = (WTF::StringImpl *)*((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
    {
      WTF::StringImpl::~StringImpl(v241, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2275, v2276, v2277, v2278, v2279, v2280, v2281, v2282);
    }
    else
    {
      *(_DWORD *)v241 -= 2;
    }
  }
  v242 = (WTF::StringImpl *)*((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
    {
      WTF::StringImpl::~StringImpl(v242, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2283, v2284, v2285, v2286, v2287, v2288, v2289, v2290);
    }
    else
    {
      *(_DWORD *)v242 -= 2;
    }
  }
  v243 = (WTF::StringImpl *)*((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
    {
      WTF::StringImpl::~StringImpl(v243, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2291, v2292, v2293, v2294, v2295, v2296, v2297, v2298);
    }
    else
    {
      *(_DWORD *)v243 -= 2;
    }
  }
  v244 = (WTF::StringImpl *)*((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
    {
      WTF::StringImpl::~StringImpl(v244, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2299, v2300, v2301, v2302, v2303, v2304, v2305, v2306);
    }
    else
    {
      *(_DWORD *)v244 -= 2;
    }
  }
  v245 = (WTF::StringImpl *)*((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
    {
      WTF::StringImpl::~StringImpl(v245, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2307, v2308, v2309, v2310, v2311, v2312, v2313, v2314);
    }
    else
    {
      *(_DWORD *)v245 -= 2;
    }
  }
  v246 = (WTF::StringImpl *)*((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
    {
      WTF::StringImpl::~StringImpl(v246, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2315, v2316, v2317, v2318, v2319, v2320, v2321, v2322);
    }
    else
    {
      *(_DWORD *)v246 -= 2;
    }
  }
  v247 = (WTF::StringImpl *)*((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
    {
      WTF::StringImpl::~StringImpl(v247, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2323, v2324, v2325, v2326, v2327, v2328, v2329, v2330);
    }
    else
    {
      *(_DWORD *)v247 -= 2;
    }
  }
  v248 = (WTF::StringImpl *)*((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
    {
      WTF::StringImpl::~StringImpl(v248, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2331, v2332, v2333, v2334, v2335, v2336, v2337, v2338);
    }
    else
    {
      *(_DWORD *)v248 -= 2;
    }
  }
  v249 = (WTF::StringImpl *)*((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
    {
      WTF::StringImpl::~StringImpl(v249, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2339, v2340, v2341, v2342, v2343, v2344, v2345, v2346);
    }
    else
    {
      *(_DWORD *)v249 -= 2;
    }
  }
  v250 = (WTF::StringImpl *)*((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
    {
      WTF::StringImpl::~StringImpl(v250, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2347, v2348, v2349, v2350, v2351, v2352, v2353, v2354);
    }
    else
    {
      *(_DWORD *)v250 -= 2;
    }
  }
  v251 = (WTF::StringImpl *)*((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
    {
      WTF::StringImpl::~StringImpl(v251, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2355, v2356, v2357, v2358, v2359, v2360, v2361, v2362);
    }
    else
    {
      *(_DWORD *)v251 -= 2;
    }
  }
  v252 = (WTF::StringImpl *)*((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
    {
      WTF::StringImpl::~StringImpl(v252, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2363, v2364, v2365, v2366, v2367, v2368, v2369, v2370);
    }
    else
    {
      *(_DWORD *)v252 -= 2;
    }
  }
  v253 = (WTF::StringImpl *)*((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
    {
      WTF::StringImpl::~StringImpl(v253, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2371, v2372, v2373, v2374, v2375, v2376, v2377, v2378);
    }
    else
    {
      *(_DWORD *)v253 -= 2;
    }
  }
  v254 = (WTF::StringImpl *)*((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
    {
      WTF::StringImpl::~StringImpl(v254, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2379, v2380, v2381, v2382, v2383, v2384, v2385, v2386);
    }
    else
    {
      *(_DWORD *)v254 -= 2;
    }
  }
  v255 = (WTF::StringImpl *)*((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
    {
      WTF::StringImpl::~StringImpl(v255, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2387, v2388, v2389, v2390, v2391, v2392, v2393, v2394);
    }
    else
    {
      *(_DWORD *)v255 -= 2;
    }
  }
  v256 = (WTF::StringImpl *)*((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
    {
      WTF::StringImpl::~StringImpl(v256, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2395, v2396, v2397, v2398, v2399, v2400, v2401, v2402);
    }
    else
    {
      *(_DWORD *)v256 -= 2;
    }
  }
  v257 = (WTF::StringImpl *)*((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
    {
      WTF::StringImpl::~StringImpl(v257, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2403, v2404, v2405, v2406, v2407, v2408, v2409, v2410);
    }
    else
    {
      *(_DWORD *)v257 -= 2;
    }
  }
  v258 = (WTF::StringImpl *)*((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
    {
      WTF::StringImpl::~StringImpl(v258, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2411, v2412, v2413, v2414, v2415, v2416, v2417, v2418);
    }
    else
    {
      *(_DWORD *)v258 -= 2;
    }
  }
  v259 = (WTF::StringImpl *)*((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v259)
  {
    if (*(_DWORD *)v259 == 2)
    {
      WTF::StringImpl::~StringImpl(v259, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2419, v2420, v2421, v2422, v2423, v2424, v2425, v2426);
    }
    else
    {
      *(_DWORD *)v259 -= 2;
    }
  }
  v260 = (WTF::StringImpl *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
    {
      WTF::StringImpl::~StringImpl(v260, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2427, v2428, v2429, v2430, v2431, v2432, v2433, v2434);
    }
    else
    {
      *(_DWORD *)v260 -= 2;
    }
  }
  v261 = (WTF::StringImpl *)*((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
    {
      WTF::StringImpl::~StringImpl(v261, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2435, v2436, v2437, v2438, v2439, v2440, v2441, v2442);
    }
    else
    {
      *(_DWORD *)v261 -= 2;
    }
  }
  v262 = (WTF::StringImpl *)*((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
    {
      WTF::StringImpl::~StringImpl(v262, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2443, v2444, v2445, v2446, v2447, v2448, v2449, v2450);
    }
    else
    {
      *(_DWORD *)v262 -= 2;
    }
  }
  v263 = (WTF::StringImpl *)*((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
    {
      WTF::StringImpl::~StringImpl(v263, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2451, v2452, v2453, v2454, v2455, v2456, v2457, v2458);
    }
    else
    {
      *(_DWORD *)v263 -= 2;
    }
  }
  v264 = (WTF::StringImpl *)*((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
    {
      WTF::StringImpl::~StringImpl(v264, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2459, v2460, v2461, v2462, v2463, v2464, v2465, v2466);
    }
    else
    {
      *(_DWORD *)v264 -= 2;
    }
  }
  v265 = (WTF::StringImpl *)*((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
    {
      WTF::StringImpl::~StringImpl(v265, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2467, v2468, v2469, v2470, v2471, v2472, v2473, v2474);
    }
    else
    {
      *(_DWORD *)v265 -= 2;
    }
  }
  v266 = (WTF::StringImpl *)*((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
    {
      WTF::StringImpl::~StringImpl(v266, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2475, v2476, v2477, v2478, v2479, v2480, v2481, v2482);
    }
    else
    {
      *(_DWORD *)v266 -= 2;
    }
  }
  v267 = (WTF::StringImpl *)*((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
    {
      WTF::StringImpl::~StringImpl(v267, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2483, v2484, v2485, v2486, v2487, v2488, v2489, v2490);
    }
    else
    {
      *(_DWORD *)v267 -= 2;
    }
  }
  v268 = (WTF::StringImpl *)*((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 2)
    {
      WTF::StringImpl::~StringImpl(v268, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498);
    }
    else
    {
      *(_DWORD *)v268 -= 2;
    }
  }
  v269 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
    {
      WTF::StringImpl::~StringImpl(v269, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2499, v2500, v2501, v2502, v2503, v2504, v2505, v2506);
    }
    else
    {
      *(_DWORD *)v269 -= 2;
    }
  }
  v270 = (WTF::StringImpl *)*((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
    {
      WTF::StringImpl::~StringImpl(v270, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2507, v2508, v2509, v2510, v2511, v2512, v2513, v2514);
    }
    else
    {
      *(_DWORD *)v270 -= 2;
    }
  }
  v271 = (WTF::StringImpl *)*((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
    {
      WTF::StringImpl::~StringImpl(v271, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2515, v2516, v2517, v2518, v2519, v2520, v2521, v2522);
    }
    else
    {
      *(_DWORD *)v271 -= 2;
    }
  }
  v272 = (WTF::StringImpl *)*((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2523, v2524, v2525, v2526, v2527, v2528, v2529, v2530);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v273 = (WTF::StringImpl *)*((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
    {
      WTF::StringImpl::~StringImpl(v273, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2531, v2532, v2533, v2534, v2535, v2536, v2537, v2538);
    }
    else
    {
      *(_DWORD *)v273 -= 2;
    }
  }
  v274 = (WTF::StringImpl *)*((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
    {
      WTF::StringImpl::~StringImpl(v274, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2539, v2540, v2541, v2542, v2543, v2544, v2545, v2546);
    }
    else
    {
      *(_DWORD *)v274 -= 2;
    }
  }
  v275 = (WTF::StringImpl *)*((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
    {
      WTF::StringImpl::~StringImpl(v275, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2547, v2548, v2549, v2550, v2551, v2552, v2553, v2554);
    }
    else
    {
      *(_DWORD *)v275 -= 2;
    }
  }
  v276 = (WTF::StringImpl *)*((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
    {
      WTF::StringImpl::~StringImpl(v276, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2555, v2556, v2557, v2558, v2559, v2560, v2561, v2562);
    }
    else
    {
      *(_DWORD *)v276 -= 2;
    }
  }
  v277 = (WTF::StringImpl *)*((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v277)
  {
    if (*(_DWORD *)v277 == 2)
    {
      WTF::StringImpl::~StringImpl(v277, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2563, v2564, v2565, v2566, v2567, v2568, v2569, v2570);
    }
    else
    {
      *(_DWORD *)v277 -= 2;
    }
  }
  v278 = (WTF::StringImpl *)*((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
    {
      WTF::StringImpl::~StringImpl(v278, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2571, v2572, v2573, v2574, v2575, v2576, v2577, v2578);
    }
    else
    {
      *(_DWORD *)v278 -= 2;
    }
  }
  v279 = (WTF::StringImpl *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
    {
      WTF::StringImpl::~StringImpl(v279, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2579, v2580, v2581, v2582, v2583, v2584, v2585, v2586);
    }
    else
    {
      *(_DWORD *)v279 -= 2;
    }
  }
  v280 = (WTF::StringImpl *)*((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
    {
      WTF::StringImpl::~StringImpl(v280, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2587, v2588, v2589, v2590, v2591, v2592, v2593, v2594);
    }
    else
    {
      *(_DWORD *)v280 -= 2;
    }
  }
  v281 = (WTF::StringImpl *)*((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
    {
      WTF::StringImpl::~StringImpl(v281, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2595, v2596, v2597, v2598, v2599, v2600, v2601, v2602);
    }
    else
    {
      *(_DWORD *)v281 -= 2;
    }
  }
  v282 = (WTF::StringImpl *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
    {
      WTF::StringImpl::~StringImpl(v282, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2603, v2604, v2605, v2606, v2607, v2608, v2609, v2610);
    }
    else
    {
      *(_DWORD *)v282 -= 2;
    }
  }
  v283 = (WTF::StringImpl *)*((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
    {
      WTF::StringImpl::~StringImpl(v283, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2611, v2612, v2613, v2614, v2615, v2616, v2617, v2618);
    }
    else
    {
      *(_DWORD *)v283 -= 2;
    }
  }
  v284 = (WTF::StringImpl *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v284)
  {
    if (*(_DWORD *)v284 == 2)
    {
      WTF::StringImpl::~StringImpl(v284, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2619, v2620, v2621, v2622, v2623, v2624, v2625, v2626);
    }
    else
    {
      *(_DWORD *)v284 -= 2;
    }
  }
  v285 = (WTF::StringImpl *)*((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
    {
      WTF::StringImpl::~StringImpl(v285, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2627, v2628, v2629, v2630, v2631, v2632, v2633, v2634);
    }
    else
    {
      *(_DWORD *)v285 -= 2;
    }
  }
  v286 = (WTF::StringImpl *)*((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v286)
  {
    if (*(_DWORD *)v286 == 2)
    {
      WTF::StringImpl::~StringImpl(v286, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2635, v2636, v2637, v2638, v2639, v2640, v2641, v2642);
    }
    else
    {
      *(_DWORD *)v286 -= 2;
    }
  }
  v287 = (WTF::StringImpl *)*((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
    {
      WTF::StringImpl::~StringImpl(v287, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2643, v2644, v2645, v2646, v2647, v2648, v2649, v2650);
    }
    else
    {
      *(_DWORD *)v287 -= 2;
    }
  }
  v288 = (WTF::StringImpl *)*((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
    {
      WTF::StringImpl::~StringImpl(v288, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2651, v2652, v2653, v2654, v2655, v2656, v2657, v2658);
    }
    else
    {
      *(_DWORD *)v288 -= 2;
    }
  }
  v289 = (WTF::StringImpl *)*((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
    {
      WTF::StringImpl::~StringImpl(v289, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2659, v2660, v2661, v2662, v2663, v2664, v2665, v2666);
    }
    else
    {
      *(_DWORD *)v289 -= 2;
    }
  }
  v290 = (WTF::StringImpl *)*((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v290)
  {
    if (*(_DWORD *)v290 == 2)
    {
      WTF::StringImpl::~StringImpl(v290, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2667, v2668, v2669, v2670, v2671, v2672, v2673, v2674);
    }
    else
    {
      *(_DWORD *)v290 -= 2;
    }
  }
  v291 = (WTF::StringImpl *)*((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
    {
      WTF::StringImpl::~StringImpl(v291, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2675, v2676, v2677, v2678, v2679, v2680, v2681, v2682);
    }
    else
    {
      *(_DWORD *)v291 -= 2;
    }
  }
  v292 = (WTF::StringImpl *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
    {
      WTF::StringImpl::~StringImpl(v292, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2683, v2684, v2685, v2686, v2687, v2688, v2689, v2690);
    }
    else
    {
      *(_DWORD *)v292 -= 2;
    }
  }
  v293 = (WTF::StringImpl *)*((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
    {
      WTF::StringImpl::~StringImpl(v293, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2691, v2692, v2693, v2694, v2695, v2696, v2697, v2698);
    }
    else
    {
      *(_DWORD *)v293 -= 2;
    }
  }
  v294 = (WTF::StringImpl *)*((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
    {
      WTF::StringImpl::~StringImpl(v294, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706);
    }
    else
    {
      *(_DWORD *)v294 -= 2;
    }
  }
  v295 = (WTF::StringImpl *)*((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v295)
  {
    if (*(_DWORD *)v295 == 2)
    {
      WTF::StringImpl::~StringImpl(v295, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2707, v2708, v2709, v2710, v2711, v2712, v2713, v2714);
    }
    else
    {
      *(_DWORD *)v295 -= 2;
    }
  }
  v296 = (WTF::StringImpl *)*((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
    {
      WTF::StringImpl::~StringImpl(v296, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2715, v2716, v2717, v2718, v2719, v2720, v2721, v2722);
    }
    else
    {
      *(_DWORD *)v296 -= 2;
    }
  }
  v297 = (WTF::StringImpl *)*((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v297)
  {
    if (*(_DWORD *)v297 == 2)
    {
      WTF::StringImpl::~StringImpl(v297, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2723, v2724, v2725, v2726, v2727, v2728, v2729, v2730);
    }
    else
    {
      *(_DWORD *)v297 -= 2;
    }
  }
  v298 = (WTF::StringImpl *)*((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
    {
      WTF::StringImpl::~StringImpl(v298, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2731, v2732, v2733, v2734, v2735, v2736, v2737, v2738);
    }
    else
    {
      *(_DWORD *)v298 -= 2;
    }
  }
  v299 = (WTF::StringImpl *)*((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
    {
      WTF::StringImpl::~StringImpl(v299, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2739, v2740, v2741, v2742, v2743, v2744, v2745, v2746);
    }
    else
    {
      *(_DWORD *)v299 -= 2;
    }
  }
  v300 = (WTF::StringImpl *)*((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
    {
      WTF::StringImpl::~StringImpl(v300, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2747, v2748, v2749, v2750, v2751, v2752, v2753, v2754);
    }
    else
    {
      *(_DWORD *)v300 -= 2;
    }
  }
  v301 = (WTF::StringImpl *)*((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2755, v2756, v2757, v2758, v2759, v2760, v2761, v2762);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
  v302 = (WTF::StringImpl *)*((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v302)
  {
    if (*(_DWORD *)v302 == 2)
    {
      WTF::StringImpl::~StringImpl(v302, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2763, v2764, v2765, v2766, v2767, v2768, v2769, v2770);
    }
    else
    {
      *(_DWORD *)v302 -= 2;
    }
  }
  v303 = (WTF::StringImpl *)*((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
    {
      WTF::StringImpl::~StringImpl(v303, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2771, v2772, v2773, v2774, v2775, v2776, v2777, v2778);
    }
    else
    {
      *(_DWORD *)v303 -= 2;
    }
  }
  v304 = (WTF::StringImpl *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
    {
      WTF::StringImpl::~StringImpl(v304, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2779, v2780, v2781, v2782, v2783, v2784, v2785, v2786);
    }
    else
    {
      *(_DWORD *)v304 -= 2;
    }
  }
  v305 = (WTF::StringImpl *)*((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
    {
      WTF::StringImpl::~StringImpl(v305, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2787, v2788, v2789, v2790, v2791, v2792, v2793, v2794);
    }
    else
    {
      *(_DWORD *)v305 -= 2;
    }
  }
  v306 = (WTF::StringImpl *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
    {
      WTF::StringImpl::~StringImpl(v306, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2795, v2796, v2797, v2798, v2799, v2800, v2801, v2802);
    }
    else
    {
      *(_DWORD *)v306 -= 2;
    }
  }
  v307 = (WTF::StringImpl *)*((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
    {
      WTF::StringImpl::~StringImpl(v307, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2803, v2804, v2805, v2806, v2807, v2808, v2809, v2810);
    }
    else
    {
      *(_DWORD *)v307 -= 2;
    }
  }
  v308 = (WTF::StringImpl *)*((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
    {
      WTF::StringImpl::~StringImpl(v308, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2811, v2812, v2813, v2814, v2815, v2816, v2817, v2818);
    }
    else
    {
      *(_DWORD *)v308 -= 2;
    }
  }
  v309 = (WTF::StringImpl *)*((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
    {
      WTF::StringImpl::~StringImpl(v309, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2819, v2820, v2821, v2822, v2823, v2824, v2825, v2826);
    }
    else
    {
      *(_DWORD *)v309 -= 2;
    }
  }
  v310 = (WTF::StringImpl *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
    {
      WTF::StringImpl::~StringImpl(v310, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2827, v2828, v2829, v2830, v2831, v2832, v2833, v2834);
    }
    else
    {
      *(_DWORD *)v310 -= 2;
    }
  }
  v311 = (WTF::StringImpl *)*((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
    {
      WTF::StringImpl::~StringImpl(v311, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2835, v2836, v2837, v2838, v2839, v2840, v2841, v2842);
    }
    else
    {
      *(_DWORD *)v311 -= 2;
    }
  }
  v312 = (WTF::StringImpl *)*((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
    {
      WTF::StringImpl::~StringImpl(v312, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2843, v2844, v2845, v2846, v2847, v2848, v2849, v2850);
    }
    else
    {
      *(_DWORD *)v312 -= 2;
    }
  }
  v313 = (WTF::StringImpl *)*((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v313)
  {
    if (*(_DWORD *)v313 == 2)
    {
      WTF::StringImpl::~StringImpl(v313, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2851, v2852, v2853, v2854, v2855, v2856, v2857, v2858);
    }
    else
    {
      *(_DWORD *)v313 -= 2;
    }
  }
  v314 = (WTF::StringImpl *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
    {
      WTF::StringImpl::~StringImpl(v314, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2859, v2860, v2861, v2862, v2863, v2864, v2865, v2866);
    }
    else
    {
      *(_DWORD *)v314 -= 2;
    }
  }
  v315 = (WTF::StringImpl *)*((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
    {
      WTF::StringImpl::~StringImpl(v315, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2867, v2868, v2869, v2870, v2871, v2872, v2873, v2874);
    }
    else
    {
      *(_DWORD *)v315 -= 2;
    }
  }
  v316 = (WTF::StringImpl *)*((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
    {
      WTF::StringImpl::~StringImpl(v316, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2875, v2876, v2877, v2878, v2879, v2880, v2881, v2882);
    }
    else
    {
      *(_DWORD *)v316 -= 2;
    }
  }
  v317 = (WTF::StringImpl *)*((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
    {
      WTF::StringImpl::~StringImpl(v317, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2883, v2884, v2885, v2886, v2887, v2888, v2889, v2890);
    }
    else
    {
      *(_DWORD *)v317 -= 2;
    }
  }
  v318 = (WTF::StringImpl *)*((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
    {
      WTF::StringImpl::~StringImpl(v318, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2891, v2892, v2893, v2894, v2895, v2896, v2897, v2898);
    }
    else
    {
      *(_DWORD *)v318 -= 2;
    }
  }
  v319 = (WTF::StringImpl *)*((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v319)
  {
    if (*(_DWORD *)v319 == 2)
    {
      WTF::StringImpl::~StringImpl(v319, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2899, v2900, v2901, v2902, v2903, v2904, v2905, v2906);
    }
    else
    {
      *(_DWORD *)v319 -= 2;
    }
  }
  v320 = (WTF::StringImpl *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
    {
      WTF::StringImpl::~StringImpl(v320, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2907, v2908, v2909, v2910, v2911, v2912, v2913, v2914);
    }
    else
    {
      *(_DWORD *)v320 -= 2;
    }
  }
  v321 = (WTF::StringImpl *)*((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
    {
      WTF::StringImpl::~StringImpl(v321, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2915, v2916, v2917, v2918, v2919, v2920, v2921, v2922);
    }
    else
    {
      *(_DWORD *)v321 -= 2;
    }
  }
  v322 = (WTF::StringImpl *)*((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v322)
  {
    if (*(_DWORD *)v322 == 2)
    {
      WTF::StringImpl::~StringImpl(v322, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2923, v2924, v2925, v2926, v2927, v2928, v2929, v2930);
    }
    else
    {
      *(_DWORD *)v322 -= 2;
    }
  }
  v323 = (WTF::StringImpl *)*((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2)
    {
      WTF::StringImpl::~StringImpl(v323, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2931, v2932, v2933, v2934, v2935, v2936, v2937, v2938);
    }
    else
    {
      *(_DWORD *)v323 -= 2;
    }
  }
  v324 = (WTF::StringImpl *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v324)
  {
    if (*(_DWORD *)v324 == 2)
    {
      WTF::StringImpl::~StringImpl(v324, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2939, v2940, v2941, v2942, v2943, v2944, v2945, v2946);
    }
    else
    {
      *(_DWORD *)v324 -= 2;
    }
  }
  v325 = (WTF::StringImpl *)*((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v325)
  {
    if (*(_DWORD *)v325 == 2)
    {
      WTF::StringImpl::~StringImpl(v325, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2947, v2948, v2949, v2950, v2951, v2952, v2953, v2954);
    }
    else
    {
      *(_DWORD *)v325 -= 2;
    }
  }
  v326 = (WTF::StringImpl *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 2)
    {
      WTF::StringImpl::~StringImpl(v326, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2955, v2956, v2957, v2958, v2959, v2960, v2961, v2962);
    }
    else
    {
      *(_DWORD *)v326 -= 2;
    }
  }
  v327 = (WTF::StringImpl *)*((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v327)
  {
    if (*(_DWORD *)v327 == 2)
    {
      WTF::StringImpl::~StringImpl(v327, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2963, v2964, v2965, v2966, v2967, v2968, v2969, v2970);
    }
    else
    {
      *(_DWORD *)v327 -= 2;
    }
  }
  v328 = (WTF::StringImpl *)*((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v328)
  {
    if (*(_DWORD *)v328 == 2)
    {
      WTF::StringImpl::~StringImpl(v328, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2971, v2972, v2973, v2974, v2975, v2976, v2977, v2978);
    }
    else
    {
      *(_DWORD *)v328 -= 2;
    }
  }
  v329 = (WTF::StringImpl *)*((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v329)
  {
    if (*(_DWORD *)v329 == 2)
    {
      WTF::StringImpl::~StringImpl(v329, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2979, v2980, v2981, v2982, v2983, v2984, v2985, v2986);
    }
    else
    {
      *(_DWORD *)v329 -= 2;
    }
  }
  v330 = (WTF::StringImpl *)*((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v330)
  {
    if (*(_DWORD *)v330 == 2)
    {
      WTF::StringImpl::~StringImpl(v330, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2987, v2988, v2989, v2990, v2991, v2992, v2993, v2994);
    }
    else
    {
      *(_DWORD *)v330 -= 2;
    }
  }
  v331 = (WTF::StringImpl *)*((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      WTF::StringImpl::~StringImpl(v331, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2995, v2996, v2997, v2998, v2999, v3000, v3001, v3002);
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  v332 = (WTF::StringImpl *)*((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
    {
      WTF::StringImpl::~StringImpl(v332, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3003, v3004, v3005, v3006, v3007, v3008, v3009, v3010);
    }
    else
    {
      *(_DWORD *)v332 -= 2;
    }
  }
  v333 = (WTF::StringImpl *)*((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 2)
    {
      WTF::StringImpl::~StringImpl(v333, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3011, v3012, v3013, v3014, v3015, v3016, v3017, v3018);
    }
    else
    {
      *(_DWORD *)v333 -= 2;
    }
  }
  v334 = (WTF::StringImpl *)*((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
    {
      WTF::StringImpl::~StringImpl(v334, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3019, v3020, v3021, v3022, v3023, v3024, v3025, v3026);
    }
    else
    {
      *(_DWORD *)v334 -= 2;
    }
  }
  v335 = (WTF::StringImpl *)*((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v335)
  {
    if (*(_DWORD *)v335 == 2)
    {
      WTF::StringImpl::~StringImpl(v335, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3027, v3028, v3029, v3030, v3031, v3032, v3033, v3034);
    }
    else
    {
      *(_DWORD *)v335 -= 2;
    }
  }
  v336 = (WTF::StringImpl *)*((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v336)
  {
    if (*(_DWORD *)v336 == 2)
    {
      WTF::StringImpl::~StringImpl(v336, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3035, v3036, v3037, v3038, v3039, v3040, v3041, v3042);
    }
    else
    {
      *(_DWORD *)v336 -= 2;
    }
  }
  v337 = (WTF::StringImpl *)*((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v337)
  {
    if (*(_DWORD *)v337 == 2)
    {
      WTF::StringImpl::~StringImpl(v337, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3043, v3044, v3045, v3046, v3047, v3048, v3049, v3050);
    }
    else
    {
      *(_DWORD *)v337 -= 2;
    }
  }
  v338 = (WTF::StringImpl *)*((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v338)
  {
    if (*(_DWORD *)v338 == 2)
    {
      WTF::StringImpl::~StringImpl(v338, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3051, v3052, v3053, v3054, v3055, v3056, v3057, v3058);
    }
    else
    {
      *(_DWORD *)v338 -= 2;
    }
  }
  v339 = (WTF::StringImpl *)*((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
    {
      WTF::StringImpl::~StringImpl(v339, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3059, v3060, v3061, v3062, v3063, v3064, v3065, v3066);
    }
    else
    {
      *(_DWORD *)v339 -= 2;
    }
  }
  v340 = (WTF::StringImpl *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v340)
  {
    if (*(_DWORD *)v340 == 2)
    {
      WTF::StringImpl::~StringImpl(v340, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3067, v3068, v3069, v3070, v3071, v3072, v3073, v3074);
    }
    else
    {
      *(_DWORD *)v340 -= 2;
    }
  }
  v341 = (WTF::StringImpl *)*((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v341)
  {
    if (*(_DWORD *)v341 == 2)
    {
      WTF::StringImpl::~StringImpl(v341, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3075, v3076, v3077, v3078, v3079, v3080, v3081, v3082);
    }
    else
    {
      *(_DWORD *)v341 -= 2;
    }
  }
  v342 = (WTF::StringImpl *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v342)
  {
    if (*(_DWORD *)v342 == 2)
    {
      WTF::StringImpl::~StringImpl(v342, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3083, v3084, v3085, v3086, v3087, v3088, v3089, v3090);
    }
    else
    {
      *(_DWORD *)v342 -= 2;
    }
  }
  v343 = (WTF::StringImpl *)*((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v343)
  {
    if (*(_DWORD *)v343 == 2)
    {
      WTF::StringImpl::~StringImpl(v343, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3091, v3092, v3093, v3094, v3095, v3096, v3097, v3098);
    }
    else
    {
      *(_DWORD *)v343 -= 2;
    }
  }
  v344 = (WTF::StringImpl *)*((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v344)
  {
    if (*(_DWORD *)v344 == 2)
    {
      WTF::StringImpl::~StringImpl(v344, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3099, v3100, v3101, v3102, v3103, v3104, v3105, v3106);
    }
    else
    {
      *(_DWORD *)v344 -= 2;
    }
  }
  v345 = (WTF::StringImpl *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v345)
  {
    if (*(_DWORD *)v345 == 2)
    {
      WTF::StringImpl::~StringImpl(v345, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3107, v3108, v3109, v3110, v3111, v3112, v3113, v3114);
    }
    else
    {
      *(_DWORD *)v345 -= 2;
    }
  }
  v346 = (WTF::StringImpl *)*((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v346)
  {
    if (*(_DWORD *)v346 == 2)
    {
      WTF::StringImpl::~StringImpl(v346, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3115, v3116, v3117, v3118, v3119, v3120, v3121, v3122);
    }
    else
    {
      *(_DWORD *)v346 -= 2;
    }
  }
  v347 = (WTF::StringImpl *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v347)
  {
    if (*(_DWORD *)v347 == 2)
    {
      WTF::StringImpl::~StringImpl(v347, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3123, v3124, v3125, v3126, v3127, v3128, v3129, v3130);
    }
    else
    {
      *(_DWORD *)v347 -= 2;
    }
  }
  v348 = (WTF::StringImpl *)*((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
    {
      WTF::StringImpl::~StringImpl(v348, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3131, v3132, v3133, v3134, v3135, v3136, v3137, v3138);
    }
    else
    {
      *(_DWORD *)v348 -= 2;
    }
  }
  v349 = (WTF::StringImpl *)*((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v349)
  {
    if (*(_DWORD *)v349 == 2)
    {
      WTF::StringImpl::~StringImpl(v349, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3139, v3140, v3141, v3142, v3143, v3144, v3145, v3146);
    }
    else
    {
      *(_DWORD *)v349 -= 2;
    }
  }
  v350 = (WTF::StringImpl *)*((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
    {
      WTF::StringImpl::~StringImpl(v350, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3147, v3148, v3149, v3150, v3151, v3152, v3153, v3154);
    }
    else
    {
      *(_DWORD *)v350 -= 2;
    }
  }
  v351 = (WTF::StringImpl *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v351)
  {
    if (*(_DWORD *)v351 == 2)
    {
      WTF::StringImpl::~StringImpl(v351, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3155, v3156, v3157, v3158, v3159, v3160, v3161, v3162);
    }
    else
    {
      *(_DWORD *)v351 -= 2;
    }
  }
  v352 = (WTF::StringImpl *)*((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
    {
      WTF::StringImpl::~StringImpl(v352, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3163, v3164, v3165, v3166, v3167, v3168, v3169, v3170);
    }
    else
    {
      *(_DWORD *)v352 -= 2;
    }
  }
  v353 = (WTF::StringImpl *)*((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v353)
  {
    if (*(_DWORD *)v353 == 2)
    {
      WTF::StringImpl::~StringImpl(v353, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3171, v3172, v3173, v3174, v3175, v3176, v3177, v3178);
    }
    else
    {
      *(_DWORD *)v353 -= 2;
    }
  }
  v354 = (WTF::StringImpl *)*((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v354)
  {
    if (*(_DWORD *)v354 == 2)
    {
      WTF::StringImpl::~StringImpl(v354, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3179, v3180, v3181, v3182, v3183, v3184, v3185, v3186);
    }
    else
    {
      *(_DWORD *)v354 -= 2;
    }
  }
  v355 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v355)
  {
    if (*(_DWORD *)v355 == 2)
    {
      WTF::StringImpl::~StringImpl(v355, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3187, v3188, v3189, v3190, v3191, v3192, v3193, v3194);
    }
    else
    {
      *(_DWORD *)v355 -= 2;
    }
  }
  v356 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v356)
  {
    if (*(_DWORD *)v356 == 2)
    {
      WTF::StringImpl::~StringImpl(v356, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3195, v3196, v3197, v3198, v3199, v3200, v3201, v3202);
    }
    else
    {
      *(_DWORD *)v356 -= 2;
    }
  }
  v357 = (WTF::StringImpl *)*((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v357)
  {
    if (*(_DWORD *)v357 == 2)
    {
      WTF::StringImpl::~StringImpl(v357, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3203, v3204, v3205, v3206, v3207, v3208, v3209, v3210);
    }
    else
    {
      *(_DWORD *)v357 -= 2;
    }
  }
  v358 = (WTF::StringImpl *)*((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v358)
  {
    if (*(_DWORD *)v358 == 2)
    {
      WTF::StringImpl::~StringImpl(v358, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3211, v3212, v3213, v3214, v3215, v3216, v3217, v3218);
    }
    else
    {
      *(_DWORD *)v358 -= 2;
    }
  }
  v359 = (WTF::StringImpl *)*((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2)
    {
      WTF::StringImpl::~StringImpl(v359, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3219, v3220, v3221, v3222, v3223, v3224, v3225, v3226);
    }
    else
    {
      *(_DWORD *)v359 -= 2;
    }
  }
  v360 = (WTF::StringImpl *)*((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v360)
  {
    if (*(_DWORD *)v360 == 2)
    {
      WTF::StringImpl::~StringImpl(v360, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3227, v3228, v3229, v3230, v3231, v3232, v3233, v3234);
    }
    else
    {
      *(_DWORD *)v360 -= 2;
    }
  }
  v361 = (WTF::StringImpl *)*((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v361)
  {
    if (*(_DWORD *)v361 == 2)
    {
      WTF::StringImpl::~StringImpl(v361, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3235, v3236, v3237, v3238, v3239, v3240, v3241, v3242);
    }
    else
    {
      *(_DWORD *)v361 -= 2;
    }
  }
  v362 = (WTF::StringImpl *)*((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v362)
  {
    if (*(_DWORD *)v362 == 2)
    {
      WTF::StringImpl::~StringImpl(v362, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3243, v3244, v3245, v3246, v3247, v3248, v3249, v3250);
    }
    else
    {
      *(_DWORD *)v362 -= 2;
    }
  }
  v363 = (WTF::StringImpl *)*((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v363)
  {
    if (*(_DWORD *)v363 == 2)
    {
      WTF::StringImpl::~StringImpl(v363, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3251, v3252, v3253, v3254, v3255, v3256, v3257, v3258);
    }
    else
    {
      *(_DWORD *)v363 -= 2;
    }
  }
  v364 = (WTF::StringImpl *)*((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
    {
      WTF::StringImpl::~StringImpl(v364, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3259, v3260, v3261, v3262, v3263, v3264, v3265, v3266);
    }
    else
    {
      *(_DWORD *)v364 -= 2;
    }
  }
  v365 = (WTF::StringImpl *)*((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v365)
  {
    if (*(_DWORD *)v365 == 2)
    {
      WTF::StringImpl::~StringImpl(v365, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3267, v3268, v3269, v3270, v3271, v3272, v3273, v3274);
    }
    else
    {
      *(_DWORD *)v365 -= 2;
    }
  }
  v366 = (WTF::StringImpl *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v366)
  {
    if (*(_DWORD *)v366 == 2)
    {
      WTF::StringImpl::~StringImpl(v366, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3275, v3276, v3277, v3278, v3279, v3280, v3281, v3282);
    }
    else
    {
      *(_DWORD *)v366 -= 2;
    }
  }
  v367 = (WTF::StringImpl *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v367)
  {
    if (*(_DWORD *)v367 == 2)
    {
      WTF::StringImpl::~StringImpl(v367, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3283, v3284, v3285, v3286, v3287, v3288, v3289, v3290);
    }
    else
    {
      *(_DWORD *)v367 -= 2;
    }
  }
  v368 = (WTF::StringImpl *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
    {
      WTF::StringImpl::~StringImpl(v368, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3291, v3292, v3293, v3294, v3295, v3296, v3297, v3298);
    }
    else
    {
      *(_DWORD *)v368 -= 2;
    }
  }
  v369 = (WTF::StringImpl *)*((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
    {
      WTF::StringImpl::~StringImpl(v369, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3299, v3300, v3301, v3302, v3303, v3304, v3305, v3306);
    }
    else
    {
      *(_DWORD *)v369 -= 2;
    }
  }
  v370 = (WTF::StringImpl *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v370)
  {
    if (*(_DWORD *)v370 == 2)
    {
      WTF::StringImpl::~StringImpl(v370, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3307, v3308, v3309, v3310, v3311, v3312, v3313, v3314);
    }
    else
    {
      *(_DWORD *)v370 -= 2;
    }
  }
  v371 = (WTF::StringImpl *)*((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v371)
  {
    if (*(_DWORD *)v371 == 2)
    {
      WTF::StringImpl::~StringImpl(v371, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3315, v3316, v3317, v3318, v3319, v3320, v3321, v3322);
    }
    else
    {
      *(_DWORD *)v371 -= 2;
    }
  }
  v372 = (WTF::StringImpl *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v372)
  {
    if (*(_DWORD *)v372 == 2)
    {
      WTF::StringImpl::~StringImpl(v372, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3323, v3324, v3325, v3326, v3327, v3328, v3329, v3330);
    }
    else
    {
      *(_DWORD *)v372 -= 2;
    }
  }
  v373 = (WTF::StringImpl *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v373)
  {
    if (*(_DWORD *)v373 == 2)
    {
      WTF::StringImpl::~StringImpl(v373, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3331, v3332, v3333, v3334, v3335, v3336, v3337, v3338);
    }
    else
    {
      *(_DWORD *)v373 -= 2;
    }
  }
  v374 = (WTF::StringImpl *)*((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v374)
  {
    if (*(_DWORD *)v374 == 2)
    {
      WTF::StringImpl::~StringImpl(v374, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3339, v3340, v3341, v3342, v3343, v3344, v3345, v3346);
    }
    else
    {
      *(_DWORD *)v374 -= 2;
    }
  }
  v375 = (WTF::StringImpl *)*((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
    {
      WTF::StringImpl::~StringImpl(v375, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3347, v3348, v3349, v3350, v3351, v3352, v3353, v3354);
    }
    else
    {
      *(_DWORD *)v375 -= 2;
    }
  }
  v376 = (WTF::StringImpl *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v376)
  {
    if (*(_DWORD *)v376 == 2)
    {
      WTF::StringImpl::~StringImpl(v376, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3355, v3356, v3357, v3358, v3359, v3360, v3361, v3362);
    }
    else
    {
      *(_DWORD *)v376 -= 2;
    }
  }
  v377 = (WTF::StringImpl *)*((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
    {
      WTF::StringImpl::~StringImpl(v377, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3363, v3364, v3365, v3366, v3367, v3368, v3369, v3370);
    }
    else
    {
      *(_DWORD *)v377 -= 2;
    }
  }
  v378 = (WTF::StringImpl *)*((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v378)
  {
    if (*(_DWORD *)v378 == 2)
    {
      WTF::StringImpl::~StringImpl(v378, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3371, v3372, v3373, v3374, v3375, v3376, v3377, v3378);
    }
    else
    {
      *(_DWORD *)v378 -= 2;
    }
  }
  v379 = (WTF::StringImpl *)*((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v379)
  {
    if (*(_DWORD *)v379 == 2)
    {
      WTF::StringImpl::~StringImpl(v379, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3379, v3380, v3381, v3382, v3383, v3384, v3385, v3386);
    }
    else
    {
      *(_DWORD *)v379 -= 2;
    }
  }
  v380 = (WTF::StringImpl *)*((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v380)
  {
    if (*(_DWORD *)v380 == 2)
    {
      WTF::StringImpl::~StringImpl(v380, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3387, v3388, v3389, v3390, v3391, v3392, v3393, v3394);
    }
    else
    {
      *(_DWORD *)v380 -= 2;
    }
  }
  v381 = (WTF::StringImpl *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v381)
  {
    if (*(_DWORD *)v381 == 2)
    {
      WTF::StringImpl::~StringImpl(v381, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3395, v3396, v3397, v3398, v3399, v3400, v3401, v3402);
    }
    else
    {
      *(_DWORD *)v381 -= 2;
    }
  }
  v382 = (WTF::StringImpl *)*((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v382)
  {
    if (*(_DWORD *)v382 == 2)
    {
      WTF::StringImpl::~StringImpl(v382, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3403, v3404, v3405, v3406, v3407, v3408, v3409, v3410);
    }
    else
    {
      *(_DWORD *)v382 -= 2;
    }
  }
  v383 = (WTF::StringImpl *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v383)
  {
    if (*(_DWORD *)v383 == 2)
    {
      WTF::StringImpl::~StringImpl(v383, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3411, v3412, v3413, v3414, v3415, v3416, v3417, v3418);
    }
    else
    {
      *(_DWORD *)v383 -= 2;
    }
  }
  v384 = (WTF::StringImpl *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
    {
      WTF::StringImpl::~StringImpl(v384, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3419, v3420, v3421, v3422, v3423, v3424, v3425, v3426);
    }
    else
    {
      *(_DWORD *)v384 -= 2;
    }
  }
  v385 = (WTF::StringImpl *)*((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v385)
  {
    if (*(_DWORD *)v385 == 2)
    {
      WTF::StringImpl::~StringImpl(v385, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3427, v3428, v3429, v3430, v3431, v3432, v3433, v3434);
    }
    else
    {
      *(_DWORD *)v385 -= 2;
    }
  }
  v386 = (WTF::StringImpl *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v386)
  {
    if (*(_DWORD *)v386 == 2)
    {
      WTF::StringImpl::~StringImpl(v386, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3435, v3436, v3437, v3438, v3439, v3440, v3441, v3442);
    }
    else
    {
      *(_DWORD *)v386 -= 2;
    }
  }
  v387 = (WTF::StringImpl *)*((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v387)
  {
    if (*(_DWORD *)v387 == 2)
    {
      WTF::StringImpl::~StringImpl(v387, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3443, v3444, v3445, v3446, v3447, v3448, v3449, v3450);
    }
    else
    {
      *(_DWORD *)v387 -= 2;
    }
  }
  v388 = (WTF::StringImpl *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v388)
  {
    if (*(_DWORD *)v388 == 2)
    {
      WTF::StringImpl::~StringImpl(v388, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3451, v3452, v3453, v3454, v3455, v3456, v3457, v3458);
    }
    else
    {
      *(_DWORD *)v388 -= 2;
    }
  }
  v389 = (WTF::StringImpl *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v389)
  {
    if (*(_DWORD *)v389 == 2)
    {
      WTF::StringImpl::~StringImpl(v389, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3459, v3460, v3461, v3462, v3463, v3464, v3465, v3466);
    }
    else
    {
      *(_DWORD *)v389 -= 2;
    }
  }
  v390 = (WTF::StringImpl *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v390)
  {
    if (*(_DWORD *)v390 == 2)
    {
      WTF::StringImpl::~StringImpl(v390, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3467, v3468, v3469, v3470, v3471, v3472, v3473, v3474);
    }
    else
    {
      *(_DWORD *)v390 -= 2;
    }
  }
  v391 = (WTF::StringImpl *)*((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v391)
  {
    if (*(_DWORD *)v391 == 2)
    {
      WTF::StringImpl::~StringImpl(v391, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3475, v3476, v3477, v3478, v3479, v3480, v3481, v3482);
    }
    else
    {
      *(_DWORD *)v391 -= 2;
    }
  }
  v392 = (WTF::StringImpl *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v392)
  {
    if (*(_DWORD *)v392 == 2)
    {
      WTF::StringImpl::~StringImpl(v392, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3483, v3484, v3485, v3486, v3487, v3488, v3489, v3490);
    }
    else
    {
      *(_DWORD *)v392 -= 2;
    }
  }
  v393 = (WTF::StringImpl *)*((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v393)
  {
    if (*(_DWORD *)v393 == 2)
    {
      WTF::StringImpl::~StringImpl(v393, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3491, v3492, v3493, v3494, v3495, v3496, v3497, v3498);
    }
    else
    {
      *(_DWORD *)v393 -= 2;
    }
  }
  v394 = (WTF::StringImpl *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v394)
  {
    if (*(_DWORD *)v394 == 2)
    {
      WTF::StringImpl::~StringImpl(v394, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3499, v3500, v3501, v3502, v3503, v3504, v3505, v3506);
    }
    else
    {
      *(_DWORD *)v394 -= 2;
    }
  }
  v395 = (WTF::StringImpl *)*((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v395)
  {
    if (*(_DWORD *)v395 == 2)
    {
      WTF::StringImpl::~StringImpl(v395, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3507, v3508, v3509, v3510, v3511, v3512, v3513, v3514);
    }
    else
    {
      *(_DWORD *)v395 -= 2;
    }
  }
  v396 = (WTF::StringImpl *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
    {
      WTF::StringImpl::~StringImpl(v396, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3515, v3516, v3517, v3518, v3519, v3520, v3521, v3522);
    }
    else
    {
      *(_DWORD *)v396 -= 2;
    }
  }
  v397 = (WTF::StringImpl *)*((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v397)
  {
    if (*(_DWORD *)v397 == 2)
    {
      WTF::StringImpl::~StringImpl(v397, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3523, v3524, v3525, v3526, v3527, v3528, v3529, v3530);
    }
    else
    {
      *(_DWORD *)v397 -= 2;
    }
  }
  v398 = (WTF::StringImpl *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v398)
  {
    if (*(_DWORD *)v398 == 2)
    {
      WTF::StringImpl::~StringImpl(v398, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3531, v3532, v3533, v3534, v3535, v3536, v3537, v3538);
    }
    else
    {
      *(_DWORD *)v398 -= 2;
    }
  }
  v399 = (WTF::StringImpl *)*((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v399)
  {
    if (*(_DWORD *)v399 == 2)
    {
      WTF::StringImpl::~StringImpl(v399, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3539, v3540, v3541, v3542, v3543, v3544, v3545, v3546);
    }
    else
    {
      *(_DWORD *)v399 -= 2;
    }
  }
  v400 = (WTF::StringImpl *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v400)
  {
    if (*(_DWORD *)v400 == 2)
    {
      WTF::StringImpl::~StringImpl(v400, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3547, v3548, v3549, v3550, v3551, v3552, v3553, v3554);
    }
    else
    {
      *(_DWORD *)v400 -= 2;
    }
  }
  v401 = (WTF::StringImpl *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v401)
  {
    if (*(_DWORD *)v401 == 2)
    {
      WTF::StringImpl::~StringImpl(v401, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3555, v3556, v3557, v3558, v3559, v3560, v3561, v3562);
    }
    else
    {
      *(_DWORD *)v401 -= 2;
    }
  }
  v402 = (WTF::StringImpl *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v402)
  {
    if (*(_DWORD *)v402 == 2)
    {
      WTF::StringImpl::~StringImpl(v402, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3563, v3564, v3565, v3566, v3567, v3568, v3569, v3570);
    }
    else
    {
      *(_DWORD *)v402 -= 2;
    }
  }
  v403 = (WTF::StringImpl *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v403)
  {
    if (*(_DWORD *)v403 == 2)
    {
      WTF::StringImpl::~StringImpl(v403, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3571, v3572, v3573, v3574, v3575, v3576, v3577, v3578);
    }
    else
    {
      *(_DWORD *)v403 -= 2;
    }
  }
  v404 = (WTF::StringImpl *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v404)
  {
    if (*(_DWORD *)v404 == 2)
    {
      WTF::StringImpl::~StringImpl(v404, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3579, v3580, v3581, v3582, v3583, v3584, v3585, v3586);
    }
    else
    {
      *(_DWORD *)v404 -= 2;
    }
  }
  v405 = (WTF::StringImpl *)*((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v405)
  {
    if (*(_DWORD *)v405 == 2)
    {
      WTF::StringImpl::~StringImpl(v405, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3587, v3588, v3589, v3590, v3591, v3592, v3593, v3594);
    }
    else
    {
      *(_DWORD *)v405 -= 2;
    }
  }
  v406 = (WTF::StringImpl *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v406)
  {
    if (*(_DWORD *)v406 == 2)
    {
      WTF::StringImpl::~StringImpl(v406, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3595, v3596, v3597, v3598, v3599, v3600, v3601, v3602);
    }
    else
    {
      *(_DWORD *)v406 -= 2;
    }
  }
  v407 = (WTF::StringImpl *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v407)
  {
    if (*(_DWORD *)v407 == 2)
    {
      WTF::StringImpl::~StringImpl(v407, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3603, v3604, v3605, v3606, v3607, v3608, v3609, v3610);
    }
    else
    {
      *(_DWORD *)v407 -= 2;
    }
  }
  v408 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v408)
  {
    if (*(_DWORD *)v408 == 2)
    {
      WTF::StringImpl::~StringImpl(v408, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3611, v3612, v3613, v3614, v3615, v3616, v3617, v3618);
    }
    else
    {
      *(_DWORD *)v408 -= 2;
    }
  }
  v409 = (WTF::StringImpl *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v409)
  {
    if (*(_DWORD *)v409 == 2)
    {
      WTF::StringImpl::~StringImpl(v409, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3619, v3620, v3621, v3622, v3623, v3624, v3625, v3626);
    }
    else
    {
      *(_DWORD *)v409 -= 2;
    }
  }
  v410 = (WTF::StringImpl *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v410)
  {
    if (*(_DWORD *)v410 == 2)
    {
      WTF::StringImpl::~StringImpl(v410, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3627, v3628, v3629, v3630, v3631, v3632, v3633, v3634);
    }
    else
    {
      *(_DWORD *)v410 -= 2;
    }
  }
  v411 = (WTF::StringImpl *)*((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v411)
  {
    if (*(_DWORD *)v411 == 2)
    {
      WTF::StringImpl::~StringImpl(v411, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3635, v3636, v3637, v3638, v3639, v3640, v3641, v3642);
    }
    else
    {
      *(_DWORD *)v411 -= 2;
    }
  }
  v412 = (WTF::StringImpl *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v412)
  {
    if (*(_DWORD *)v412 == 2)
    {
      WTF::StringImpl::~StringImpl(v412, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3643, v3644, v3645, v3646, v3647, v3648, v3649, v3650);
    }
    else
    {
      *(_DWORD *)v412 -= 2;
    }
  }
  v413 = (WTF::StringImpl *)*((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
    {
      WTF::StringImpl::~StringImpl(v413, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3651, v3652, v3653, v3654, v3655, v3656, v3657, v3658);
    }
    else
    {
      *(_DWORD *)v413 -= 2;
    }
  }
  v414 = (WTF::StringImpl *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v414)
  {
    if (*(_DWORD *)v414 == 2)
    {
      WTF::StringImpl::~StringImpl(v414, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3659, v3660, v3661, v3662, v3663, v3664, v3665, v3666);
    }
    else
    {
      *(_DWORD *)v414 -= 2;
    }
  }
  v415 = (WTF::StringImpl *)*((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
    {
      WTF::StringImpl::~StringImpl(v415, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3667, v3668, v3669, v3670, v3671, v3672, v3673, v3674);
    }
    else
    {
      *(_DWORD *)v415 -= 2;
    }
  }
  v416 = (WTF::StringImpl *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v416)
  {
    if (*(_DWORD *)v416 == 2)
    {
      WTF::StringImpl::~StringImpl(v416, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3675, v3676, v3677, v3678, v3679, v3680, v3681, v3682);
    }
    else
    {
      *(_DWORD *)v416 -= 2;
    }
  }
  v417 = (WTF::StringImpl *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v417)
  {
    if (*(_DWORD *)v417 == 2)
    {
      WTF::StringImpl::~StringImpl(v417, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3683, v3684, v3685, v3686, v3687, v3688, v3689, v3690);
    }
    else
    {
      *(_DWORD *)v417 -= 2;
    }
  }
  v418 = (WTF::StringImpl *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v418)
  {
    if (*(_DWORD *)v418 == 2)
    {
      WTF::StringImpl::~StringImpl(v418, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3691, v3692, v3693, v3694, v3695, v3696, v3697, v3698);
    }
    else
    {
      *(_DWORD *)v418 -= 2;
    }
  }
  v419 = (WTF::StringImpl *)*((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v419)
  {
    if (*(_DWORD *)v419 == 2)
    {
      WTF::StringImpl::~StringImpl(v419, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3699, v3700, v3701, v3702, v3703, v3704, v3705, v3706);
    }
    else
    {
      *(_DWORD *)v419 -= 2;
    }
  }
  v420 = (WTF::StringImpl *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v420)
  {
    if (*(_DWORD *)v420 == 2)
    {
      WTF::StringImpl::~StringImpl(v420, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3707, v3708, v3709, v3710, v3711, v3712, v3713, v3714);
    }
    else
    {
      *(_DWORD *)v420 -= 2;
    }
  }
  v421 = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v421)
  {
    if (*(_DWORD *)v421 == 2)
    {
      WTF::StringImpl::~StringImpl(v421, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3715, v3716, v3717, v3718, v3719, v3720, v3721, v3722);
    }
    else
    {
      *(_DWORD *)v421 -= 2;
    }
  }
  v422 = (WTF::StringImpl *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v422)
  {
    if (*(_DWORD *)v422 == 2)
    {
      WTF::StringImpl::~StringImpl(v422, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3723, v3724, v3725, v3726, v3727, v3728, v3729, v3730);
    }
    else
    {
      *(_DWORD *)v422 -= 2;
    }
  }
  v423 = (WTF::StringImpl *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v423)
  {
    if (*(_DWORD *)v423 == 2)
    {
      WTF::StringImpl::~StringImpl(v423, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3731, v3732, v3733, v3734, v3735, v3736, v3737, v3738);
    }
    else
    {
      *(_DWORD *)v423 -= 2;
    }
  }
  v424 = (WTF::StringImpl *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v424)
  {
    if (*(_DWORD *)v424 == 2)
    {
      WTF::StringImpl::~StringImpl(v424, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3739, v3740, v3741, v3742, v3743, v3744, v3745, v3746);
    }
    else
    {
      *(_DWORD *)v424 -= 2;
    }
  }
  v425 = (WTF::StringImpl *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v425)
  {
    if (*(_DWORD *)v425 == 2)
    {
      WTF::StringImpl::~StringImpl(v425, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3747, v3748, v3749, v3750, v3751, v3752, v3753, v3754);
    }
    else
    {
      *(_DWORD *)v425 -= 2;
    }
  }
  v426 = (WTF::StringImpl *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v426)
  {
    if (*(_DWORD *)v426 == 2)
    {
      WTF::StringImpl::~StringImpl(v426, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3755, v3756, v3757, v3758, v3759, v3760, v3761, v3762);
    }
    else
    {
      *(_DWORD *)v426 -= 2;
    }
  }
  v427 = (WTF::StringImpl *)*((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v427)
  {
    if (*(_DWORD *)v427 == 2)
    {
      WTF::StringImpl::~StringImpl(v427, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3763, v3764, v3765, v3766, v3767, v3768, v3769, v3770);
    }
    else
    {
      *(_DWORD *)v427 -= 2;
    }
  }
  v428 = (WTF::StringImpl *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v428)
  {
    if (*(_DWORD *)v428 == 2)
    {
      WTF::StringImpl::~StringImpl(v428, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3771, v3772, v3773, v3774, v3775, v3776, v3777, v3778);
    }
    else
    {
      *(_DWORD *)v428 -= 2;
    }
  }
  v429 = (WTF::StringImpl *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v429)
  {
    if (*(_DWORD *)v429 == 2)
    {
      WTF::StringImpl::~StringImpl(v429, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3779, v3780, v3781, v3782, v3783, v3784, v3785, v3786);
    }
    else
    {
      *(_DWORD *)v429 -= 2;
    }
  }
  v430 = (WTF::StringImpl *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v430)
  {
    if (*(_DWORD *)v430 == 2)
    {
      WTF::StringImpl::~StringImpl(v430, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3787, v3788, v3789, v3790, v3791, v3792, v3793, v3794);
    }
    else
    {
      *(_DWORD *)v430 -= 2;
    }
  }
  v431 = (WTF::StringImpl *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v431)
  {
    if (*(_DWORD *)v431 == 2)
    {
      WTF::StringImpl::~StringImpl(v431, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3795, v3796, v3797, v3798, v3799, v3800, v3801, v3802);
    }
    else
    {
      *(_DWORD *)v431 -= 2;
    }
  }
  v432 = (WTF::StringImpl *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v432)
  {
    if (*(_DWORD *)v432 == 2)
    {
      WTF::StringImpl::~StringImpl(v432, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3803, v3804, v3805, v3806, v3807, v3808, v3809, v3810);
    }
    else
    {
      *(_DWORD *)v432 -= 2;
    }
  }
  v433 = (WTF::StringImpl *)*((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v433)
  {
    if (*(_DWORD *)v433 == 2)
    {
      WTF::StringImpl::~StringImpl(v433, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3811, v3812, v3813, v3814, v3815, v3816, v3817, v3818);
    }
    else
    {
      *(_DWORD *)v433 -= 2;
    }
  }
  v434 = (WTF::StringImpl *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
    {
      WTF::StringImpl::~StringImpl(v434, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3819, v3820, v3821, v3822, v3823, v3824, v3825, v3826);
    }
    else
    {
      *(_DWORD *)v434 -= 2;
    }
  }
  v435 = (WTF::StringImpl *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v435)
  {
    if (*(_DWORD *)v435 == 2)
    {
      WTF::StringImpl::~StringImpl(v435, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3827, v3828, v3829, v3830, v3831, v3832, v3833, v3834);
    }
    else
    {
      *(_DWORD *)v435 -= 2;
    }
  }
  v436 = (WTF::StringImpl *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v436)
  {
    if (*(_DWORD *)v436 == 2)
    {
      WTF::StringImpl::~StringImpl(v436, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3835, v3836, v3837, v3838, v3839, v3840, v3841, v3842);
    }
    else
    {
      *(_DWORD *)v436 -= 2;
    }
  }
  v437 = (WTF::StringImpl *)*((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v437)
  {
    if (*(_DWORD *)v437 == 2)
    {
      WTF::StringImpl::~StringImpl(v437, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3843, v3844, v3845, v3846, v3847, v3848, v3849, v3850);
    }
    else
    {
      *(_DWORD *)v437 -= 2;
    }
  }
  v438 = (WTF::StringImpl *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v438)
  {
    if (*(_DWORD *)v438 == 2)
    {
      WTF::StringImpl::~StringImpl(v438, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3851, v3852, v3853, v3854, v3855, v3856, v3857, v3858);
    }
    else
    {
      *(_DWORD *)v438 -= 2;
    }
  }
  v439 = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v439)
  {
    if (*(_DWORD *)v439 == 2)
    {
      WTF::StringImpl::~StringImpl(v439, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3859, v3860, v3861, v3862, v3863, v3864, v3865, v3866);
    }
    else
    {
      *(_DWORD *)v439 -= 2;
    }
  }
  v440 = (WTF::StringImpl *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v440)
  {
    if (*(_DWORD *)v440 == 2)
    {
      WTF::StringImpl::~StringImpl(v440, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3867, v3868, v3869, v3870, v3871, v3872, v3873, v3874);
    }
    else
    {
      *(_DWORD *)v440 -= 2;
    }
  }
  v441 = (WTF::StringImpl *)*((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v441)
  {
    if (*(_DWORD *)v441 == 2)
    {
      WTF::StringImpl::~StringImpl(v441, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3875, v3876, v3877, v3878, v3879, v3880, v3881, v3882);
    }
    else
    {
      *(_DWORD *)v441 -= 2;
    }
  }
  v442 = (WTF::StringImpl *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v442)
  {
    if (*(_DWORD *)v442 == 2)
    {
      WTF::StringImpl::~StringImpl(v442, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3883, v3884, v3885, v3886, v3887, v3888, v3889, v3890);
    }
    else
    {
      *(_DWORD *)v442 -= 2;
    }
  }
  v443 = (WTF::StringImpl *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v443)
  {
    if (*(_DWORD *)v443 == 2)
    {
      WTF::StringImpl::~StringImpl(v443, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3891, v3892, v3893, v3894, v3895, v3896, v3897, v3898);
    }
    else
    {
      *(_DWORD *)v443 -= 2;
    }
  }
  v444 = (WTF::StringImpl *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v444)
  {
    if (*(_DWORD *)v444 == 2)
    {
      WTF::StringImpl::~StringImpl(v444, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3899, v3900, v3901, v3902, v3903, v3904, v3905, v3906);
    }
    else
    {
      *(_DWORD *)v444 -= 2;
    }
  }
  v445 = (WTF::StringImpl *)*((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v445)
  {
    if (*(_DWORD *)v445 == 2)
    {
      WTF::StringImpl::~StringImpl(v445, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3907, v3908, v3909, v3910, v3911, v3912, v3913, v3914);
    }
    else
    {
      *(_DWORD *)v445 -= 2;
    }
  }
  v446 = (WTF::StringImpl *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v446)
  {
    if (*(_DWORD *)v446 == 2)
    {
      WTF::StringImpl::~StringImpl(v446, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3915, v3916, v3917, v3918, v3919, v3920, v3921, v3922);
    }
    else
    {
      *(_DWORD *)v446 -= 2;
    }
  }
  v447 = (WTF::StringImpl *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v447)
  {
    if (*(_DWORD *)v447 == 2)
    {
      WTF::StringImpl::~StringImpl(v447, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3923, v3924, v3925, v3926, v3927, v3928, v3929, v3930);
    }
    else
    {
      *(_DWORD *)v447 -= 2;
    }
  }
  v448 = (WTF::StringImpl *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v448)
  {
    if (*(_DWORD *)v448 == 2)
    {
      WTF::StringImpl::~StringImpl(v448, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3931, v3932, v3933, v3934, v3935, v3936, v3937, v3938);
    }
    else
    {
      *(_DWORD *)v448 -= 2;
    }
  }
  v449 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v449)
  {
    if (*(_DWORD *)v449 == 2)
    {
      WTF::StringImpl::~StringImpl(v449, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3939, v3940, v3941, v3942, v3943, v3944, v3945, v3946);
    }
    else
    {
      *(_DWORD *)v449 -= 2;
    }
  }
  v450 = (WTF::StringImpl *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v450)
  {
    if (*(_DWORD *)v450 == 2)
    {
      WTF::StringImpl::~StringImpl(v450, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3947, v3948, v3949, v3950, v3951, v3952, v3953, v3954);
    }
    else
    {
      *(_DWORD *)v450 -= 2;
    }
  }
  v451 = (WTF::StringImpl *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v451)
  {
    if (*(_DWORD *)v451 == 2)
    {
      WTF::StringImpl::~StringImpl(v451, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3955, v3956, v3957, v3958, v3959, v3960, v3961, v3962);
    }
    else
    {
      *(_DWORD *)v451 -= 2;
    }
  }
  v452 = (WTF::StringImpl *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v452)
  {
    if (*(_DWORD *)v452 == 2)
    {
      WTF::StringImpl::~StringImpl(v452, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3963, v3964, v3965, v3966, v3967, v3968, v3969, v3970);
    }
    else
    {
      *(_DWORD *)v452 -= 2;
    }
  }
  v453 = (WTF::StringImpl *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v453)
  {
    if (*(_DWORD *)v453 == 2)
    {
      WTF::StringImpl::~StringImpl(v453, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3971, v3972, v3973, v3974, v3975, v3976, v3977, v3978);
    }
    else
    {
      *(_DWORD *)v453 -= 2;
    }
  }
  v454 = (WTF::StringImpl *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v454)
  {
    if (*(_DWORD *)v454 == 2)
    {
      WTF::StringImpl::~StringImpl(v454, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3979, v3980, v3981, v3982, v3983, v3984, v3985, v3986);
    }
    else
    {
      *(_DWORD *)v454 -= 2;
    }
  }
  v455 = (WTF::StringImpl *)*((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v455)
  {
    if (*(_DWORD *)v455 == 2)
    {
      WTF::StringImpl::~StringImpl(v455, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3987, v3988, v3989, v3990, v3991, v3992, v3993, v3994);
    }
    else
    {
      *(_DWORD *)v455 -= 2;
    }
  }
  v456 = (WTF::StringImpl *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v456)
  {
    if (*(_DWORD *)v456 == 2)
    {
      WTF::StringImpl::~StringImpl(v456, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v3995, v3996, v3997, v3998, v3999, v4000, v4001, v4002);
    }
    else
    {
      *(_DWORD *)v456 -= 2;
    }
  }
  v457 = (WTF::StringImpl *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v457)
  {
    if (*(_DWORD *)v457 == 2)
    {
      WTF::StringImpl::~StringImpl(v457, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4003, v4004, v4005, v4006, v4007, v4008, v4009, v4010);
    }
    else
    {
      *(_DWORD *)v457 -= 2;
    }
  }
  v458 = (WTF::StringImpl *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v458)
  {
    if (*(_DWORD *)v458 == 2)
    {
      WTF::StringImpl::~StringImpl(v458, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4011, v4012, v4013, v4014, v4015, v4016, v4017, v4018);
    }
    else
    {
      *(_DWORD *)v458 -= 2;
    }
  }
  v459 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v459)
  {
    if (*(_DWORD *)v459 == 2)
    {
      WTF::StringImpl::~StringImpl(v459, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4019, v4020, v4021, v4022, v4023, v4024, v4025, v4026);
    }
    else
    {
      *(_DWORD *)v459 -= 2;
    }
  }
  v460 = (WTF::StringImpl *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v460)
  {
    if (*(_DWORD *)v460 == 2)
    {
      WTF::StringImpl::~StringImpl(v460, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4027, v4028, v4029, v4030, v4031, v4032, v4033, v4034);
    }
    else
    {
      *(_DWORD *)v460 -= 2;
    }
  }
  v461 = (WTF::StringImpl *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v461)
  {
    if (*(_DWORD *)v461 == 2)
    {
      WTF::StringImpl::~StringImpl(v461, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4035, v4036, v4037, v4038, v4039, v4040, v4041, v4042);
    }
    else
    {
      *(_DWORD *)v461 -= 2;
    }
  }
  v462 = (WTF::StringImpl *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v462)
  {
    if (*(_DWORD *)v462 == 2)
    {
      WTF::StringImpl::~StringImpl(v462, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4043, v4044, v4045, v4046, v4047, v4048, v4049, v4050);
    }
    else
    {
      *(_DWORD *)v462 -= 2;
    }
  }
  v463 = (WTF::StringImpl *)*((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v463)
  {
    if (*(_DWORD *)v463 == 2)
    {
      WTF::StringImpl::~StringImpl(v463, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4051, v4052, v4053, v4054, v4055, v4056, v4057, v4058);
    }
    else
    {
      *(_DWORD *)v463 -= 2;
    }
  }
  v464 = (WTF::StringImpl *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v464)
  {
    if (*(_DWORD *)v464 == 2)
    {
      WTF::StringImpl::~StringImpl(v464, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4059, v4060, v4061, v4062, v4063, v4064, v4065, v4066);
    }
    else
    {
      *(_DWORD *)v464 -= 2;
    }
  }
  v465 = (WTF::StringImpl *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v465)
  {
    if (*(_DWORD *)v465 == 2)
    {
      WTF::StringImpl::~StringImpl(v465, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4067, v4068, v4069, v4070, v4071, v4072, v4073, v4074);
    }
    else
    {
      *(_DWORD *)v465 -= 2;
    }
  }
  v466 = (WTF::StringImpl *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v466)
  {
    if (*(_DWORD *)v466 == 2)
    {
      WTF::StringImpl::~StringImpl(v466, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4075, v4076, v4077, v4078, v4079, v4080, v4081, v4082);
    }
    else
    {
      *(_DWORD *)v466 -= 2;
    }
  }
  v467 = (WTF::StringImpl *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v467)
  {
    if (*(_DWORD *)v467 == 2)
    {
      WTF::StringImpl::~StringImpl(v467, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4083, v4084, v4085, v4086, v4087, v4088, v4089, v4090);
    }
    else
    {
      *(_DWORD *)v467 -= 2;
    }
  }
  v468 = (WTF::StringImpl *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v468)
  {
    if (*(_DWORD *)v468 == 2)
    {
      WTF::StringImpl::~StringImpl(v468, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4091, v4092, v4093, v4094, v4095, v4096, v4097, v4098);
    }
    else
    {
      *(_DWORD *)v468 -= 2;
    }
  }
  v469 = (WTF::StringImpl *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v469)
  {
    if (*(_DWORD *)v469 == 2)
    {
      WTF::StringImpl::~StringImpl(v469, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4099, v4100, v4101, v4102, v4103, v4104, v4105, v4106);
    }
    else
    {
      *(_DWORD *)v469 -= 2;
    }
  }
  v470 = (WTF::StringImpl *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v470)
  {
    if (*(_DWORD *)v470 == 2)
    {
      WTF::StringImpl::~StringImpl(v470, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4107, v4108, v4109, v4110, v4111, v4112, v4113, v4114);
    }
    else
    {
      *(_DWORD *)v470 -= 2;
    }
  }
  v471 = (WTF::StringImpl *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v471)
  {
    if (*(_DWORD *)v471 == 2)
    {
      WTF::StringImpl::~StringImpl(v471, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4115, v4116, v4117, v4118, v4119, v4120, v4121, v4122);
    }
    else
    {
      *(_DWORD *)v471 -= 2;
    }
  }
  v472 = (WTF::StringImpl *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v472)
  {
    if (*(_DWORD *)v472 == 2)
    {
      WTF::StringImpl::~StringImpl(v472, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4123, v4124, v4125, v4126, v4127, v4128, v4129, v4130);
    }
    else
    {
      *(_DWORD *)v472 -= 2;
    }
  }
  v473 = (WTF::StringImpl *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v473)
  {
    if (*(_DWORD *)v473 == 2)
    {
      WTF::StringImpl::~StringImpl(v473, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4131, v4132, v4133, v4134, v4135, v4136, v4137, v4138);
    }
    else
    {
      *(_DWORD *)v473 -= 2;
    }
  }
  v474 = (WTF::StringImpl *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v474)
  {
    if (*(_DWORD *)v474 == 2)
    {
      WTF::StringImpl::~StringImpl(v474, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4139, v4140, v4141, v4142, v4143, v4144, v4145, v4146);
    }
    else
    {
      *(_DWORD *)v474 -= 2;
    }
  }
  v475 = (WTF::StringImpl *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v475)
  {
    if (*(_DWORD *)v475 == 2)
    {
      WTF::StringImpl::~StringImpl(v475, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4147, v4148, v4149, v4150, v4151, v4152, v4153, v4154);
    }
    else
    {
      *(_DWORD *)v475 -= 2;
    }
  }
  v476 = (WTF::StringImpl *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v476)
  {
    if (*(_DWORD *)v476 == 2)
    {
      WTF::StringImpl::~StringImpl(v476, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4155, v4156, v4157, v4158, v4159, v4160, v4161, v4162);
    }
    else
    {
      *(_DWORD *)v476 -= 2;
    }
  }
  v477 = (WTF::StringImpl *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v477)
  {
    if (*(_DWORD *)v477 == 2)
    {
      WTF::StringImpl::~StringImpl(v477, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4163, v4164, v4165, v4166, v4167, v4168, v4169, v4170);
    }
    else
    {
      *(_DWORD *)v477 -= 2;
    }
  }
  v478 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v478)
  {
    if (*(_DWORD *)v478 == 2)
    {
      WTF::StringImpl::~StringImpl(v478, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4171, v4172, v4173, v4174, v4175, v4176, v4177, v4178);
    }
    else
    {
      *(_DWORD *)v478 -= 2;
    }
  }
  v479 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v479)
  {
    if (*(_DWORD *)v479 == 2)
    {
      WTF::StringImpl::~StringImpl(v479, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4179, v4180, v4181, v4182, v4183, v4184, v4185, v4186);
    }
    else
    {
      *(_DWORD *)v479 -= 2;
    }
  }
  v480 = (WTF::StringImpl *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v480)
  {
    if (*(_DWORD *)v480 == 2)
    {
      WTF::StringImpl::~StringImpl(v480, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4187, v4188, v4189, v4190, v4191, v4192, v4193, v4194);
    }
    else
    {
      *(_DWORD *)v480 -= 2;
    }
  }
  v481 = (WTF::StringImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v481)
  {
    if (*(_DWORD *)v481 == 2)
    {
      WTF::StringImpl::~StringImpl(v481, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4195, v4196, v4197, v4198, v4199, v4200, v4201, v4202);
    }
    else
    {
      *(_DWORD *)v481 -= 2;
    }
  }
  v482 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v482)
  {
    if (*(_DWORD *)v482 == 2)
    {
      WTF::StringImpl::~StringImpl(v482, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4203, v4204, v4205, v4206, v4207, v4208, v4209, v4210);
    }
    else
    {
      *(_DWORD *)v482 -= 2;
    }
  }
  v483 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v483)
  {
    if (*(_DWORD *)v483 == 2)
    {
      WTF::StringImpl::~StringImpl(v483, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4211, v4212, v4213, v4214, v4215, v4216, v4217, v4218);
    }
    else
    {
      *(_DWORD *)v483 -= 2;
    }
  }
  v484 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v484)
  {
    if (*(_DWORD *)v484 == 2)
    {
      WTF::StringImpl::~StringImpl(v484, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4219, v4220, v4221, v4222, v4223, v4224, v4225, v4226);
    }
    else
    {
      *(_DWORD *)v484 -= 2;
    }
  }
  v485 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v485)
  {
    if (*(_DWORD *)v485 == 2)
    {
      WTF::StringImpl::~StringImpl(v485, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4227, v4228, v4229, v4230, v4231, v4232, v4233, v4234);
    }
    else
    {
      *(_DWORD *)v485 -= 2;
    }
  }
  v486 = (WTF::StringImpl *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v486)
  {
    if (*(_DWORD *)v486 == 2)
    {
      WTF::StringImpl::~StringImpl(v486, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4235, v4236, v4237, v4238, v4239, v4240, v4241, v4242);
    }
    else
    {
      *(_DWORD *)v486 -= 2;
    }
  }
  v487 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v487)
  {
    if (*(_DWORD *)v487 == 2)
    {
      WTF::StringImpl::~StringImpl(v487, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4243, v4244, v4245, v4246, v4247, v4248, v4249, v4250);
    }
    else
    {
      *(_DWORD *)v487 -= 2;
    }
  }
  v488 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v488)
  {
    if (*(_DWORD *)v488 == 2)
    {
      WTF::StringImpl::~StringImpl(v488, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4251, v4252, v4253, v4254, v4255, v4256, v4257, v4258);
    }
    else
    {
      *(_DWORD *)v488 -= 2;
    }
  }
  v489 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v489)
  {
    if (*(_DWORD *)v489 == 2)
    {
      WTF::StringImpl::~StringImpl(v489, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4259, v4260, v4261, v4262, v4263, v4264, v4265, v4266);
    }
    else
    {
      *(_DWORD *)v489 -= 2;
    }
  }
  v490 = (WTF::StringImpl *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v490)
  {
    if (*(_DWORD *)v490 == 2)
    {
      WTF::StringImpl::~StringImpl(v490, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4267, v4268, v4269, v4270, v4271, v4272, v4273, v4274);
    }
    else
    {
      *(_DWORD *)v490 -= 2;
    }
  }
  v491 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v491)
  {
    if (*(_DWORD *)v491 == 2)
    {
      WTF::StringImpl::~StringImpl(v491, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4275, v4276, v4277, v4278, v4279, v4280, v4281, v4282);
    }
    else
    {
      *(_DWORD *)v491 -= 2;
    }
  }
  v492 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v492)
  {
    if (*(_DWORD *)v492 == 2)
    {
      WTF::StringImpl::~StringImpl(v492, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4283, v4284, v4285, v4286, v4287, v4288, v4289, v4290);
    }
    else
    {
      *(_DWORD *)v492 -= 2;
    }
  }
  v493 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v493)
  {
    if (*(_DWORD *)v493 == 2)
    {
      WTF::StringImpl::~StringImpl(v493, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4291, v4292, v4293, v4294, v4295, v4296, v4297, v4298);
    }
    else
    {
      *(_DWORD *)v493 -= 2;
    }
  }
  v494 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v494)
  {
    if (*(_DWORD *)v494 == 2)
    {
      WTF::StringImpl::~StringImpl(v494, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4299, v4300, v4301, v4302, v4303, v4304, v4305, v4306);
    }
    else
    {
      *(_DWORD *)v494 -= 2;
    }
  }
  v495 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v495)
  {
    if (*(_DWORD *)v495 == 2)
    {
      WTF::StringImpl::~StringImpl(v495, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4307, v4308, v4309, v4310, v4311, v4312, v4313, v4314);
    }
    else
    {
      *(_DWORD *)v495 -= 2;
    }
  }
  v496 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v496)
  {
    if (*(_DWORD *)v496 == 2)
    {
      WTF::StringImpl::~StringImpl(v496, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4315, v4316, v4317, v4318, v4319, v4320, v4321, v4322);
    }
    else
    {
      *(_DWORD *)v496 -= 2;
    }
  }
  v497 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v497)
  {
    if (*(_DWORD *)v497 == 2)
    {
      WTF::StringImpl::~StringImpl(v497, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4323, v4324, v4325, v4326, v4327, v4328, v4329, v4330);
    }
    else
    {
      *(_DWORD *)v497 -= 2;
    }
  }
  v498 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v498)
  {
    if (*(_DWORD *)v498 == 2)
    {
      WTF::StringImpl::~StringImpl(v498, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4331, v4332, v4333, v4334, v4335, v4336, v4337, v4338);
    }
    else
    {
      *(_DWORD *)v498 -= 2;
    }
  }
  v499 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v499)
  {
    if (*(_DWORD *)v499 == 2)
    {
      WTF::StringImpl::~StringImpl(v499, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4339, v4340, v4341, v4342, v4343, v4344, v4345, v4346);
    }
    else
    {
      *(_DWORD *)v499 -= 2;
    }
  }
  v500 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v500)
  {
    if (*(_DWORD *)v500 == 2)
    {
      WTF::StringImpl::~StringImpl(v500, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4347, v4348, v4349, v4350, v4351, v4352, v4353, v4354);
    }
    else
    {
      *(_DWORD *)v500 -= 2;
    }
  }
  v501 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v501)
  {
    if (*(_DWORD *)v501 == 2)
    {
      WTF::StringImpl::~StringImpl(v501, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4355, v4356, v4357, v4358, v4359, v4360, v4361, v4362);
    }
    else
    {
      *(_DWORD *)v501 -= 2;
    }
  }
  v502 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v502)
  {
    if (*(_DWORD *)v502 == 2)
    {
      WTF::StringImpl::~StringImpl(v502, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4363, v4364, v4365, v4366, v4367, v4368, v4369, v4370);
    }
    else
    {
      *(_DWORD *)v502 -= 2;
    }
  }
  v503 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v503)
  {
    if (*(_DWORD *)v503 == 2)
    {
      WTF::StringImpl::~StringImpl(v503, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4371, v4372, v4373, v4374, v4375, v4376, v4377, v4378);
    }
    else
    {
      *(_DWORD *)v503 -= 2;
    }
  }
  v504 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v504)
  {
    if (*(_DWORD *)v504 == 2)
    {
      WTF::StringImpl::~StringImpl(v504, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4379, v4380, v4381, v4382, v4383, v4384, v4385, v4386);
    }
    else
    {
      *(_DWORD *)v504 -= 2;
    }
  }
  v505 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v505)
  {
    if (*(_DWORD *)v505 == 2)
    {
      WTF::StringImpl::~StringImpl(v505, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4387, v4388, v4389, v4390, v4391, v4392, v4393, v4394);
    }
    else
    {
      *(_DWORD *)v505 -= 2;
    }
  }
  v506 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v506)
  {
    if (*(_DWORD *)v506 == 2)
    {
      WTF::StringImpl::~StringImpl(v506, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4395, v4396, v4397, v4398, v4399, v4400, v4401, v4402);
    }
    else
    {
      *(_DWORD *)v506 -= 2;
    }
  }
  v507 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v507)
  {
    if (*(_DWORD *)v507 == 2)
    {
      WTF::StringImpl::~StringImpl(v507, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4403, v4404, v4405, v4406, v4407, v4408, v4409, v4410);
    }
    else
    {
      *(_DWORD *)v507 -= 2;
    }
  }
  v508 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
    {
      WTF::StringImpl::~StringImpl(v508, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4411, v4412, v4413, v4414, v4415, v4416, v4417, v4418);
    }
    else
    {
      *(_DWORD *)v508 -= 2;
    }
  }
  v509 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v509)
  {
    if (*(_DWORD *)v509 == 2)
    {
      WTF::StringImpl::~StringImpl(v509, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4419, v4420, v4421, v4422, v4423, v4424, v4425, v4426);
    }
    else
    {
      *(_DWORD *)v509 -= 2;
    }
  }
  v510 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v510)
  {
    if (*(_DWORD *)v510 == 2)
    {
      WTF::StringImpl::~StringImpl(v510, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4427, v4428, v4429, v4430, v4431, v4432, v4433, v4434);
    }
    else
    {
      *(_DWORD *)v510 -= 2;
    }
  }
  v511 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v511)
  {
    if (*(_DWORD *)v511 == 2)
    {
      WTF::StringImpl::~StringImpl(v511, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4435, v4436, v4437, v4438, v4439, v4440, v4441, v4442);
    }
    else
    {
      *(_DWORD *)v511 -= 2;
    }
  }
  v512 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v512)
  {
    if (*(_DWORD *)v512 == 2)
    {
      WTF::StringImpl::~StringImpl(v512, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4443, v4444, v4445, v4446, v4447, v4448, v4449, v4450);
    }
    else
    {
      *(_DWORD *)v512 -= 2;
    }
  }
  v513 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v513)
  {
    if (*(_DWORD *)v513 == 2)
    {
      WTF::StringImpl::~StringImpl(v513, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4451, v4452, v4453, v4454, v4455, v4456, v4457, v4458);
    }
    else
    {
      *(_DWORD *)v513 -= 2;
    }
  }
  v514 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v514)
  {
    if (*(_DWORD *)v514 == 2)
    {
      WTF::StringImpl::~StringImpl(v514, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4459, v4460, v4461, v4462, v4463, v4464, v4465, v4466);
    }
    else
    {
      *(_DWORD *)v514 -= 2;
    }
  }
  v515 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v515)
  {
    if (*(_DWORD *)v515 == 2)
    {
      WTF::StringImpl::~StringImpl(v515, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4467, v4468, v4469, v4470, v4471, v4472, v4473, v4474);
    }
    else
    {
      *(_DWORD *)v515 -= 2;
    }
  }
  v516 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v516)
  {
    if (*(_DWORD *)v516 == 2)
    {
      WTF::StringImpl::~StringImpl(v516, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4475, v4476, v4477, v4478, v4479, v4480, v4481, v4482);
    }
    else
    {
      *(_DWORD *)v516 -= 2;
    }
  }
  v517 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v517)
  {
    if (*(_DWORD *)v517 == 2)
    {
      WTF::StringImpl::~StringImpl(v517, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4483, v4484, v4485, v4486, v4487, v4488, v4489, v4490);
    }
    else
    {
      *(_DWORD *)v517 -= 2;
    }
  }
  v518 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v518)
  {
    if (*(_DWORD *)v518 == 2)
    {
      WTF::StringImpl::~StringImpl(v518, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4491, v4492, v4493, v4494, v4495, v4496, v4497, v4498);
    }
    else
    {
      *(_DWORD *)v518 -= 2;
    }
  }
  v519 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
    {
      WTF::StringImpl::~StringImpl(v519, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4499, v4500, v4501, v4502, v4503, v4504, v4505, v4506);
    }
    else
    {
      *(_DWORD *)v519 -= 2;
    }
  }
  v520 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v520)
  {
    if (*(_DWORD *)v520 == 2)
    {
      WTF::StringImpl::~StringImpl(v520, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4507, v4508, v4509, v4510, v4511, v4512, v4513, v4514);
    }
    else
    {
      *(_DWORD *)v520 -= 2;
    }
  }
  v521 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v521)
  {
    if (*(_DWORD *)v521 == 2)
    {
      WTF::StringImpl::~StringImpl(v521, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4515, v4516, v4517, v4518, v4519, v4520, v4521, v4522);
    }
    else
    {
      *(_DWORD *)v521 -= 2;
    }
  }
  v522 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v522)
  {
    if (*(_DWORD *)v522 == 2)
    {
      WTF::StringImpl::~StringImpl(v522, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4523, v4524, v4525, v4526, v4527, v4528, v4529, v4530);
    }
    else
    {
      *(_DWORD *)v522 -= 2;
    }
  }
  v523 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v523)
  {
    if (*(_DWORD *)v523 == 2)
    {
      WTF::StringImpl::~StringImpl(v523, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4531, v4532, v4533, v4534, v4535, v4536, v4537, v4538);
    }
    else
    {
      *(_DWORD *)v523 -= 2;
    }
  }
  v524 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v524)
  {
    if (*(_DWORD *)v524 == 2)
    {
      WTF::StringImpl::~StringImpl(v524, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4539, v4540, v4541, v4542, v4543, v4544, v4545, v4546);
    }
    else
    {
      *(_DWORD *)v524 -= 2;
    }
  }
  v525 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v525)
  {
    if (*(_DWORD *)v525 == 2)
    {
      WTF::StringImpl::~StringImpl(v525, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4547, v4548, v4549, v4550, v4551, v4552, v4553, v4554);
    }
    else
    {
      *(_DWORD *)v525 -= 2;
    }
  }
  v526 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v526)
  {
    if (*(_DWORD *)v526 == 2)
    {
      WTF::StringImpl::~StringImpl(v526, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4555, v4556, v4557, v4558, v4559, v4560, v4561, v4562);
    }
    else
    {
      *(_DWORD *)v526 -= 2;
    }
  }
  v527 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v527)
  {
    if (*(_DWORD *)v527 == 2)
    {
      WTF::StringImpl::~StringImpl(v527, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4563, v4564, v4565, v4566, v4567, v4568, v4569, v4570);
    }
    else
    {
      *(_DWORD *)v527 -= 2;
    }
  }
  v528 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v528)
  {
    if (*(_DWORD *)v528 == 2)
    {
      WTF::StringImpl::~StringImpl(v528, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4571, v4572, v4573, v4574, v4575, v4576, v4577, v4578);
    }
    else
    {
      *(_DWORD *)v528 -= 2;
    }
  }
  v529 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v529)
  {
    if (*(_DWORD *)v529 == 2)
    {
      WTF::StringImpl::~StringImpl(v529, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4579, v4580, v4581, v4582, v4583, v4584, v4585, v4586);
    }
    else
    {
      *(_DWORD *)v529 -= 2;
    }
  }
  v530 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v530)
  {
    if (*(_DWORD *)v530 == 2)
    {
      WTF::StringImpl::~StringImpl(v530, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4587, v4588, v4589, v4590, v4591, v4592, v4593, v4594);
    }
    else
    {
      *(_DWORD *)v530 -= 2;
    }
  }
  v531 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v531)
  {
    if (*(_DWORD *)v531 == 2)
    {
      WTF::StringImpl::~StringImpl(v531, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4595, v4596, v4597, v4598, v4599, v4600, v4601, v4602);
    }
    else
    {
      *(_DWORD *)v531 -= 2;
    }
  }
  v532 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v532)
  {
    if (*(_DWORD *)v532 == 2)
    {
      WTF::StringImpl::~StringImpl(v532, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4603, v4604, v4605, v4606, v4607, v4608, v4609, v4610);
    }
    else
    {
      *(_DWORD *)v532 -= 2;
    }
  }
  v533 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v533)
  {
    if (*(_DWORD *)v533 == 2)
    {
      WTF::StringImpl::~StringImpl(v533, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4611, v4612, v4613, v4614, v4615, v4616, v4617, v4618);
    }
    else
    {
      *(_DWORD *)v533 -= 2;
    }
  }
  v534 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v534)
  {
    if (*(_DWORD *)v534 == 2)
    {
      WTF::StringImpl::~StringImpl(v534, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4619, v4620, v4621, v4622, v4623, v4624, v4625, v4626);
    }
    else
    {
      *(_DWORD *)v534 -= 2;
    }
  }
  v535 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v535)
  {
    if (*(_DWORD *)v535 == 2)
    {
      WTF::StringImpl::~StringImpl(v535, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4627, v4628, v4629, v4630, v4631, v4632, v4633, v4634);
    }
    else
    {
      *(_DWORD *)v535 -= 2;
    }
  }
  v536 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v536)
  {
    if (*(_DWORD *)v536 == 2)
    {
      WTF::StringImpl::~StringImpl(v536, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4635, v4636, v4637, v4638, v4639, v4640, v4641, v4642);
    }
    else
    {
      *(_DWORD *)v536 -= 2;
    }
  }
  v537 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v537)
  {
    if (*(_DWORD *)v537 == 2)
    {
      WTF::StringImpl::~StringImpl(v537, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4643, v4644, v4645, v4646, v4647, v4648, v4649, v4650);
    }
    else
    {
      *(_DWORD *)v537 -= 2;
    }
  }
  v538 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v538)
  {
    if (*(_DWORD *)v538 == 2)
    {
      WTF::StringImpl::~StringImpl(v538, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4651, v4652, v4653, v4654, v4655, v4656, v4657, v4658);
    }
    else
    {
      *(_DWORD *)v538 -= 2;
    }
  }
  v539 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v539)
  {
    if (*(_DWORD *)v539 == 2)
    {
      WTF::StringImpl::~StringImpl(v539, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4659, v4660, v4661, v4662, v4663, v4664, v4665, v4666);
    }
    else
    {
      *(_DWORD *)v539 -= 2;
    }
  }
  v540 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v540)
  {
    if (*(_DWORD *)v540 == 2)
    {
      WTF::StringImpl::~StringImpl(v540, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4667, v4668, v4669, v4670, v4671, v4672, v4673, v4674);
    }
    else
    {
      *(_DWORD *)v540 -= 2;
    }
  }
  v541 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v541)
  {
    if (*(_DWORD *)v541 == 2)
    {
      WTF::StringImpl::~StringImpl(v541, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4675, v4676, v4677, v4678, v4679, v4680, v4681, v4682);
    }
    else
    {
      *(_DWORD *)v541 -= 2;
    }
  }
  v542 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v542)
  {
    if (*(_DWORD *)v542 == 2)
    {
      WTF::StringImpl::~StringImpl(v542, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4683, v4684, v4685, v4686, v4687, v4688, v4689, v4690);
    }
    else
    {
      *(_DWORD *)v542 -= 2;
    }
  }
  v543 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v543)
  {
    if (*(_DWORD *)v543 == 2)
    {
      WTF::StringImpl::~StringImpl(v543, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4691, v4692, v4693, v4694, v4695, v4696, v4697, v4698);
    }
    else
    {
      *(_DWORD *)v543 -= 2;
    }
  }
  v544 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v544)
  {
    if (*(_DWORD *)v544 == 2)
    {
      WTF::StringImpl::~StringImpl(v544, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4699, v4700, v4701, v4702, v4703, v4704, v4705, v4706);
    }
    else
    {
      *(_DWORD *)v544 -= 2;
    }
  }
  v545 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v545)
  {
    if (*(_DWORD *)v545 == 2)
    {
      WTF::StringImpl::~StringImpl(v545, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4707, v4708, v4709, v4710, v4711, v4712, v4713, v4714);
    }
    else
    {
      *(_DWORD *)v545 -= 2;
    }
  }
  v546 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v546)
  {
    if (*(_DWORD *)v546 == 2)
    {
      WTF::StringImpl::~StringImpl(v546, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4715, v4716, v4717, v4718, v4719, v4720, v4721, v4722);
    }
    else
    {
      *(_DWORD *)v546 -= 2;
    }
  }
  v547 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v547)
  {
    if (*(_DWORD *)v547 == 2)
    {
      WTF::StringImpl::~StringImpl(v547, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4723, v4724, v4725, v4726, v4727, v4728, v4729, v4730);
    }
    else
    {
      *(_DWORD *)v547 -= 2;
    }
  }
  v548 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v548)
  {
    if (*(_DWORD *)v548 == 2)
    {
      WTF::StringImpl::~StringImpl(v548, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4731, v4732, v4733, v4734, v4735, v4736, v4737, v4738);
    }
    else
    {
      *(_DWORD *)v548 -= 2;
    }
  }
  v549 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v549)
  {
    if (*(_DWORD *)v549 == 2)
    {
      WTF::StringImpl::~StringImpl(v549, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4739, v4740, v4741, v4742, v4743, v4744, v4745, v4746);
    }
    else
    {
      *(_DWORD *)v549 -= 2;
    }
  }
  v550 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v550)
  {
    if (*(_DWORD *)v550 == 2)
    {
      WTF::StringImpl::~StringImpl(v550, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4747, v4748, v4749, v4750, v4751, v4752, v4753, v4754);
    }
    else
    {
      *(_DWORD *)v550 -= 2;
    }
  }
  v551 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v551)
  {
    if (*(_DWORD *)v551 == 2)
    {
      WTF::StringImpl::~StringImpl(v551, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4755, v4756, v4757, v4758, v4759, v4760, v4761, v4762);
    }
    else
    {
      *(_DWORD *)v551 -= 2;
    }
  }
  v552 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v552)
  {
    if (*(_DWORD *)v552 == 2)
    {
      WTF::StringImpl::~StringImpl(v552, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4763, v4764, v4765, v4766, v4767, v4768, v4769, v4770);
    }
    else
    {
      *(_DWORD *)v552 -= 2;
    }
  }
  v553 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v553)
  {
    if (*(_DWORD *)v553 == 2)
    {
      WTF::StringImpl::~StringImpl(v553, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4771, v4772, v4773, v4774, v4775, v4776, v4777, v4778);
    }
    else
    {
      *(_DWORD *)v553 -= 2;
    }
  }
  v554 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v554)
  {
    if (*(_DWORD *)v554 == 2)
    {
      WTF::StringImpl::~StringImpl(v554, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4779, v4780, v4781, v4782, v4783, v4784, v4785, v4786);
    }
    else
    {
      *(_DWORD *)v554 -= 2;
    }
  }
  v555 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
    {
      WTF::StringImpl::~StringImpl(v555, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4787, v4788, v4789, v4790, v4791, v4792, v4793, v4794);
    }
    else
    {
      *(_DWORD *)v555 -= 2;
    }
  }
  v556 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v556)
  {
    if (*(_DWORD *)v556 == 2)
    {
      WTF::StringImpl::~StringImpl(v556, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4795, v4796, v4797, v4798, v4799, v4800, v4801, v4802);
    }
    else
    {
      *(_DWORD *)v556 -= 2;
    }
  }
  v557 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v557)
  {
    if (*(_DWORD *)v557 == 2)
    {
      WTF::StringImpl::~StringImpl(v557, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4803, v4804, v4805, v4806, v4807, v4808, v4809, v4810);
    }
    else
    {
      *(_DWORD *)v557 -= 2;
    }
  }
  v558 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v558)
  {
    if (*(_DWORD *)v558 == 2)
    {
      WTF::StringImpl::~StringImpl(v558, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4811, v4812, v4813, v4814, v4815, v4816, v4817, v4818);
    }
    else
    {
      *(_DWORD *)v558 -= 2;
    }
  }
  v559 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v559)
  {
    if (*(_DWORD *)v559 == 2)
    {
      WTF::StringImpl::~StringImpl(v559, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4819, v4820, v4821, v4822, v4823, v4824, v4825, v4826);
    }
    else
    {
      *(_DWORD *)v559 -= 2;
    }
  }
  v560 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v560)
  {
    if (*(_DWORD *)v560 == 2)
    {
      WTF::StringImpl::~StringImpl(v560, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4827, v4828, v4829, v4830, v4831, v4832, v4833, v4834);
    }
    else
    {
      *(_DWORD *)v560 -= 2;
    }
  }
  v561 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v561)
  {
    if (*(_DWORD *)v561 == 2)
    {
      WTF::StringImpl::~StringImpl(v561, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4835, v4836, v4837, v4838, v4839, v4840, v4841, v4842);
    }
    else
    {
      *(_DWORD *)v561 -= 2;
    }
  }
  v562 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v562)
  {
    if (*(_DWORD *)v562 == 2)
    {
      WTF::StringImpl::~StringImpl(v562, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4843, v4844, v4845, v4846, v4847, v4848, v4849, v4850);
    }
    else
    {
      *(_DWORD *)v562 -= 2;
    }
  }
  v563 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v563)
  {
    if (*(_DWORD *)v563 == 2)
    {
      WTF::StringImpl::~StringImpl(v563, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4851, v4852, v4853, v4854, v4855, v4856, v4857, v4858);
    }
    else
    {
      *(_DWORD *)v563 -= 2;
    }
  }
  v564 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v564)
  {
    if (*(_DWORD *)v564 == 2)
    {
      WTF::StringImpl::~StringImpl(v564, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4859, v4860, v4861, v4862, v4863, v4864, v4865, v4866);
    }
    else
    {
      *(_DWORD *)v564 -= 2;
    }
  }
  v565 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v565)
  {
    if (*(_DWORD *)v565 == 2)
    {
      WTF::StringImpl::~StringImpl(v565, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4867, v4868, v4869, v4870, v4871, v4872, v4873, v4874);
    }
    else
    {
      *(_DWORD *)v565 -= 2;
    }
  }
  v566 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v566)
  {
    if (*(_DWORD *)v566 == 2)
    {
      WTF::StringImpl::~StringImpl(v566, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4875, v4876, v4877, v4878, v4879, v4880, v4881, v4882);
    }
    else
    {
      *(_DWORD *)v566 -= 2;
    }
  }
  v567 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v567)
  {
    if (*(_DWORD *)v567 == 2)
    {
      WTF::StringImpl::~StringImpl(v567, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4883, v4884, v4885, v4886, v4887, v4888, v4889, v4890);
    }
    else
    {
      *(_DWORD *)v567 -= 2;
    }
  }
  v568 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v568)
  {
    if (*(_DWORD *)v568 == 2)
    {
      WTF::StringImpl::~StringImpl(v568, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4891, v4892, v4893, v4894, v4895, v4896, v4897, v4898);
    }
    else
    {
      *(_DWORD *)v568 -= 2;
    }
  }
  v569 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v569)
  {
    if (*(_DWORD *)v569 == 2)
    {
      WTF::StringImpl::~StringImpl(v569, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4899, v4900, v4901, v4902, v4903, v4904, v4905, v4906);
    }
    else
    {
      *(_DWORD *)v569 -= 2;
    }
  }
  v570 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v570)
  {
    if (*(_DWORD *)v570 == 2)
    {
      WTF::StringImpl::~StringImpl(v570, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v4907, v4908, v4909, v4910, v4911, v4912, v4913, v4914);
    }
    else
    {
      *(_DWORD *)v570 -= 2;
    }
  }
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(char *result, uint64_t a2)
{
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16x2_t v15;
  int8x16x2_t v16;
  int8x16x2_t v17;

  if (a2)
  {
    v3 = *(int8x16_t **)(a2 + 8);
    v4 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v5 = &result[2 * v4];
      if (v4 >= 0x40)
      {
        v6 = &result[2 * (v4 & 0xFFFFFFC0)];
        v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          v8 = v3[1];
          v16.val[0] = v3[2];
          v9 = v3[3];
          v3 += 4;
          v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          v11 = result;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          v12 = result + 64;
          vst2q_s8(v12, v16);
          v13 = result + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          result += 128;
        }
        while (result != v6);
        result = v6;
      }
      while (result != v5)
      {
        v14 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)result = v14;
        result += 2;
      }
    }
    else if ((_DWORD)v4 == 1)
    {
      *(_WORD *)result = v3->i16[0];
    }
    else if ((_DWORD)v4)
    {
      return (char *)memcpy(result, v3, 2 * v4);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN3JSC14JSModuleRecordENS_5tupleIJNS8_9ErrorTypeEN3WTF6StringEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSA_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t JSC::ConfigFileScanner::fillBufferIfNeeded(JSC::ConfigFileScanner *this)
{
  const char *v1;
  char *v3;
  const char *v4;
  int v5;
  int64_t v6;
  char *v7;
  char *v8;

  v1 = (const char *)*((_QWORD *)this + 131);
  if (v1)
  {
    v3 = (char *)this + 24;
    v4 = (const char *)*((_QWORD *)this + 132);
LABEL_3:
    while (v1 != v4)
    {
      v5 = *(unsigned __int8 *)v1;
      if ((v5 - 9) >= 5 && v5 != 32)
        return 1;
      *((_QWORD *)this + 131) = ++v1;
    }
    while (1)
    {
      v8 = fgets(v3, 1024, *((FILE **)this + 2));
      *((_QWORD *)this + 131) = v8;
      if (!v8)
      {
        fclose(*((FILE **)this + 2));
        return 0;
      }
      v1 = v8;
      ++*((_DWORD *)this + 2);
      v7 = strchr(v8, 35);
      *((_QWORD *)this + 132) = v7;
      if (!v7)
      {
        v6 = strlen(v1);
        v4 = &v1[v6];
        *((_QWORD *)this + 132) = &v1[v6];
        if (v6 < 1)
          goto LABEL_12;
        v7 = (char *)(v4 - 1);
        if (*(v4 - 1) != 10)
          goto LABEL_12;
        *((_QWORD *)this + 132) = v7;
      }
      *v7 = 0;
      v4 = (const char *)*((_QWORD *)this + 132);
      v1 = (const char *)*((_QWORD *)this + 131);
LABEL_12:
      if (v4 != v1)
        goto LABEL_3;
    }
  }
  return 0;
}

uint64_t JSC::ConfigFile::parse(void)::$_1::operator()(JSC::ConfigFileScanner **a1, int a2)
{
  JSC::ConfigFileScanner *v4;
  _BYTE *v5;
  uint64_t v6;
  JSC::ConfigFileScanner *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *k;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *i;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  __int16 v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  char *j;
  int v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  size_t v49;
  unsigned int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int8x16_t *v54;
  char *v55;
  __int16 v56;
  char *v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  char v88;
  int8x16_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;

  v4 = *a1;
  if (!JSC::ConfigFileScanner::fillBufferIfNeeded(*a1))
    return 1;
  v5 = (_BYTE *)*((_QWORD *)v4 + 131);
  v6 = 1;
  if (*v5 == 123)
  {
    *((_QWORD *)v4 + 131) = v5 + 1;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 1;
LABEL_4:
    v7 = *a1;
    if (JSC::ConfigFileScanner::fillBufferIfNeeded(*a1))
    {
      k = (char *)*((_QWORD *)v7 + 131);
      v16 = strchr(k, 125);
      v17 = v16;
      if (v16)
      {
        *v16 = 0;
        v18 = v16 + 1;
      }
      else
      {
        v18 = (char *)*((_QWORD *)v7 + 132);
      }
      *((_QWORD *)v7 + 131) = v18;
      if (k)
      {
LABEL_9:
        if (!v17 || *k)
        {
          v19 = 0;
          v20 = 0;
          for (i = k; ; ++i)
          {
            v22 = k[v20];
            v23 = v22 > 0x3D;
            v24 = (1 << v22) & 0x2000000100003E01;
            if (!v23 && v24 != 0)
              break;
            ++v20;
            v19 -= 2;
          }
          if ((v20 & 0x8000000000000000) != 0)
          {
LABEL_110:
            __break(1u);
LABEL_111:
            __break(0xC471u);
            JUMPOUT(0x19890E924);
          }
          if (v20 >> 31)
            goto LABEL_111;
          if (v87 + v20 >= v87)
            v26 = v87 + v20;
          else
            v26 = 0xFFFFFFFFLL;
          v27 = v86;
          if ((v86 || (v27 = v85) != 0) && (*((_BYTE *)v27 + 16) & 4) == 0)
          {
            v28 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v85, (WTF::AtomStringImpl *)v26, v9, v10, v11, v12, v13, v14);
            if (v28)
            {
              if ((v20 & 0xFFFFFFC0) != 0)
              {
                v30 = (char *)(v28 + 2 * (v20 & 0xFFFFFFC0));
                v29 = (int8x16_t *)k;
                v32 = (char *)v28;
                do
                {
                  v90.val[0] = *v29;
                  v33 = v29[1];
                  v92.val[0] = v29[2];
                  v34 = v29[3];
                  v29 += 4;
                  v96.val[1] = 0u;
                  v96.val[0] = v34;
                  v92.val[1] = 0u;
                  v94.val[0] = v33;
                  v90.val[1] = 0u;
                  v35 = v32;
                  vst2q_s8(v35, v90);
                  v35 += 32;
                  v94.val[1] = 0u;
                  vst2q_s8(v35, v94);
                  v36 = v32 + 64;
                  vst2q_s8(v36, v92);
                  v37 = v32 + 96;
                  vst2q_s8(v37, v96);
                  v32 += 128;
                }
                while (v32 != v30);
              }
              else
              {
                v29 = (int8x16_t *)k;
                v30 = (char *)v28;
              }
              if ((char *)(v28 - v19) != v30)
              {
                do
                {
                  v31 = v29->u8[0];
                  v29 = (int8x16_t *)((char *)v29 + 1);
                  *(_WORD *)v30 = v31;
                  v30 += 2;
                }
                while (v30 != (char *)(v28 - v19));
              }
            }
          }
          else
          {
            v38 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v85, (WTF::AtomStringImpl *)v26, v9, v10, v11, v12, v13, v14);
            if (v38)
            {
              if ((_DWORD)v20 == 1)
              {
                *v38 = *k;
              }
              else if ((_DWORD)v20)
              {
                memcpy(v38, k, v20);
              }
            }
          }
          for (j = &k[v20]; ; ++j)
          {
            v40 = *j;
            if ((v40 - 9) >= 5 && v40 != 32)
              break;
            ++i;
          }
          if (!*j)
          {
LABEL_100:
            v6 = 1;
            goto LABEL_101;
          }
          v89.i8[0] = 61;
          if (v86 && ((v41 = v87, v87 < *((_DWORD *)v86 + 1)) ? (v42 = v85 == 0) : (v42 = 0), v42))
          {
            v43 = *((_DWORD *)v86 + 4);
            v44 = *((_QWORD *)v86 + 1);
            ++v87;
            if ((v43 & 4) != 0)
              *(_BYTE *)(v44 + v41) = 61;
            else
              *(_WORD *)(v44 + 2 * v41) = 61;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v85, &v89, 1uLL, v10, v11, v12, v13, v14);
          }
          while (1)
          {
            v46 = *++j;
            v45 = v46;
            if (v46 <= 0x20)
            {
              if (((1 << v45) & 0x100003600) != 0)
              {
                v47 = 1;
                goto LABEL_56;
              }
              if (!v45)
                goto LABEL_100;
            }
            v47 = 0;
LABEL_56:
            ++i;
            if ((_DWORD)v45 != 11 && (v47 & 1) == 0)
            {
              v48 = 0;
              v49 = 0;
              while (v45 > 0x20 || ((1 << v45) & 0x100003E01) == 0)
              {
                LODWORD(v45) = j[++v49];
                v48 -= 2;
              }
              if ((v49 & 0x8000000000000000) != 0)
                goto LABEL_110;
              if (v49 >> 31)
                goto LABEL_111;
              v50 = v87 + v49 + 1;
              if (v50 >= v87)
                v51 = v50;
              else
                v51 = 0xFFFFFFFFLL;
              v52 = v86;
              if ((v86 || (v52 = v85) != 0) && (*((_BYTE *)v52 + 16) & 4) == 0)
              {
                v53 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v85, (WTF::AtomStringImpl *)v51, v9, v10, v11, v12, v13, v14);
                if (v53)
                {
                  if ((v49 & 0xFFFFFFC0) != 0)
                  {
                    v55 = (char *)(v53 + 2 * (v49 & 0xFFFFFFC0));
                    v54 = (int8x16_t *)j;
                    v57 = (char *)v53;
                    do
                    {
                      v91.val[0] = *v54;
                      v58 = v54[1];
                      v93.val[0] = v54[2];
                      v59 = v54[3];
                      v54 += 4;
                      v95.val[0] = v59;
                      v93.val[1] = 0u;
                      v97.val[0] = v58;
                      v91.val[1] = 0u;
                      v60 = v57;
                      vst2q_s8(v60, v91);
                      v60 += 32;
                      v95.val[1] = 0u;
                      v97.val[1] = 0u;
                      vst2q_s8(v60, v97);
                      v61 = v57 + 64;
                      vst2q_s8(v61, v93);
                      v62 = v57 + 96;
                      v57 += 128;
                      vst2q_s8(v62, v95);
                    }
                    while (v57 != v55);
                  }
                  else
                  {
                    v54 = (int8x16_t *)j;
                    v55 = (char *)v53;
                  }
                  if ((char *)(v53 - v48) != v55)
                  {
                    do
                    {
                      v56 = v54->u8[0];
                      v54 = (int8x16_t *)((char *)v54 + 1);
                      *(_WORD *)v55 = v56;
                      v55 += 2;
                    }
                    while (v55 != (char *)(v53 - v48));
                  }
                  *(_WORD *)(v53 + 2 * v49) = 10;
                }
              }
              else
              {
                v63 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v85, (WTF::AtomStringImpl *)v51, v9, v10, v11, v12, v13, v14);
                if (v63)
                {
                  v64 = v63;
                  if ((_DWORD)v49 == 1)
                  {
                    *v63 = *j;
                  }
                  else if ((_DWORD)v49)
                  {
                    memcpy(v63, j, v49);
                  }
                  v64[v49] = 10;
                }
              }
              for (k = &j[v49]; ; ++k)
              {
                v65 = *k;
                if ((v65 - 9) >= 5 && v65 != 32)
                  break;
              }
              if (!*k)
              {
                if (v17)
                  break;
                goto LABEL_4;
              }
              goto LABEL_9;
            }
          }
        }
      }
    }
    if (a2 != 2)
      WTF::StringBuilder::append(a1[1], (const WTF::StringBuilder *)&v85, v9, v10, v11, v12, v13, v14);
    v6 = 0;
LABEL_101:
    v66 = v86;
    v86 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
    v67 = v85;
    v85 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
  }
  return v6;
}

uint64_t JSC::generateUnlinkedCodeBlockImpl<JSC::UnlinkedEvalCodeBlock,JSC::DirectEvalExecutable>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7, uint64_t a8, char a9, WTF::StringImpl ***a10, uint64_t *a11, uint64_t a12)
{
  char v12;
  char v16;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  WTF::AtomStringImpl *v69;
  __int128 v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  int v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  int v120;
  int v121;
  _QWORD *v122;
  WTF::StringImpl *v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  int v129;
  __int16 v130;
  __int128 v131;
  _DWORD *v132;
  _BYTE v133[4];
  unint64_t v134;

  v12 = a8;
  v16 = a4;
  if (a12)
    v19 = (*(unsigned __int16 *)(a12 + 70) >> 7) & 1;
  else
    LOBYTE(v19) = 0;
  v123[0] = 0;
  JSC::parse<JSC::EvalNode>((uint64_t)&v134, a1, a2, (uint64_t)v123, a3, a4, a6, a8, a7, a11, v19);
  v27 = v123[0];
  v123[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v134;
  if (!v134)
    return 0;
  v29 = *(_DWORD *)(v134 + 28);
  v30 = *(_DWORD *)(v134 + 8);
  v31 = *(_DWORD *)(v134 + 232);
  if (a12)
  {
    v32 = *(_BYTE *)(v134 + 166);
    v33 = *(_QWORD *)(v134 + 192);
    if (*(_BYTE *)(v134 + 200))
    {
      if (v33)
        v121 = *(_DWORD *)(v33 - 12);
      else
        v121 = 0;
      v122 = *(_QWORD **)(v134 + 208);
      if (v122)
      {
        v122 = (_QWORD *)*v122;
        if (v122)
          LODWORD(v122) = *((_DWORD *)v122 - 3);
      }
      LOWORD(v39) = v121 + (_DWORD)v122 != 0;
LABEL_26:
      *(_WORD *)(a12 + 66) = *(_WORD *)(v134 + 164);
      *(_BYTE *)(a12 + 68) = *(_BYTE *)(a12 + 68) & 0xFC | v32 & 3;
      *(_WORD *)(a12 + 70) = *(_WORD *)(a12 + 70) & 0xFFFE | v39;
      *(_DWORD *)(a12 + 88) = v29;
      *(_DWORD *)(a12 + 92) = v31 + 1;
      v41 = a12 + 96;
      goto LABEL_27;
    }
    if (v33)
    {
      v34 = *(unsigned int *)(v33 - 4);
      v35 = v33 + 16 * v34;
      if (*(_DWORD *)(v33 - 12))
      {
        v36 = *(_QWORD *)(v134 + 192);
        if ((_DWORD)v34)
        {
          v37 = 16 * v34;
          v36 = *(_QWORD *)(v134 + 192);
          while ((unint64_t)(*(_QWORD *)v36 + 1) <= 1)
          {
            v36 += 16;
            v37 -= 16;
            if (!v37)
            {
              v36 = v35;
              goto LABEL_16;
            }
          }
        }
        goto LABEL_16;
      }
      v36 = v33 + 16 * v34;
    }
    else
    {
      v36 = 0;
      v34 = 0;
    }
    v35 = v33 + 16 * v34;
LABEL_16:
    if (v33)
      v38 = v33 + 16 * *(unsigned int *)(v33 - 4);
    else
      v38 = 0;
    if (v38 == v36)
    {
      LOWORD(v39) = 0;
    }
    else
    {
      do
      {
        v39 = *(_WORD *)(v36 + 8) & 1;
        if (v39)
          break;
        v40 = v36 + 16;
        v36 = v35;
        if (v40 != v35)
        {
          v36 = v40;
          while ((unint64_t)(*(_QWORD *)v36 + 1) <= 1)
          {
            v36 += 16;
            if (v36 == v35)
            {
              v36 = v35;
              break;
            }
          }
        }
      }
      while (v36 != v38);
    }
    goto LABEL_26;
  }
  v41 = 96;
LABEL_27:
  v42 = v29 - v30;
  v43 = *(_BYTE *)v41;
  v133[0] = *(_BYTE *)v41 & 2 | ((v16 & 1) << 6) | 0x20;
  v133[1] = 12;
  if (a9)
    v44 = 8;
  else
    v44 = 0;
  v133[2] = v12 & 3 | (32 * (a7 & 3)) | v44 & 0xFB | (4 * (v43 & 1));
  v45 = a5;
  v46 = JSC::UnlinkedEvalCodeBlock::create(a1, (JSC::VM *)v133, a5, v22, v23, v24, v25, v26);
  v53 = v46;
  v54 = *(_WORD *)(v28 + 164);
  v55 = *(_BYTE *)(v28 + 166);
  v56 = *(_QWORD *)(v28 + 192);
  if (!*(_BYTE *)(v28 + 200))
  {
    if (v56)
    {
      v57 = *(unsigned int *)(v56 - 4);
      v58 = v56 + 16 * v57;
      if (*(_DWORD *)(v56 - 12))
      {
        v59 = *(_QWORD *)(v28 + 192);
        if ((_DWORD)v57)
        {
          v60 = 16 * v57;
          v59 = *(_QWORD *)(v28 + 192);
          while ((unint64_t)(*(_QWORD *)v59 + 1) <= 1)
          {
            v59 += 16;
            v60 -= 16;
            if (!v60)
            {
              v59 = v58;
              goto LABEL_38;
            }
          }
        }
        goto LABEL_38;
      }
      v59 = v56 + 16 * v57;
    }
    else
    {
      v59 = 0;
      v57 = 0;
    }
    v58 = v56 + 16 * v57;
LABEL_38:
    if (v56)
      v56 += 16 * *(unsigned int *)(v56 - 4);
    if (v56 == v59)
    {
LABEL_48:
      v62 = 0;
      *(_WORD *)(v46 + 40) = v54;
      v63 = v55 & 3;
      v64 = *(_QWORD *)(v46 + 20) & 0x7FFFFFFFFFFFFFFFLL;
      v65 = (*(unsigned __int16 *)(v46 + 28) | (*(unsigned __int8 *)(v46 + 30) << 16)) & 0xFFF3FFFF | (v63 << 18);
      goto LABEL_49;
    }
    while ((*(_WORD *)(v59 + 8) & 1) == 0)
    {
      v61 = v59 + 16;
      v59 = v58;
      if (v61 != v58)
      {
        v59 = v61;
        while ((unint64_t)(*(_QWORD *)v59 + 1) <= 1)
        {
          v59 += 16;
          if (v59 == v58)
          {
            v59 = v58;
            break;
          }
        }
      }
      if (v59 == v56)
        goto LABEL_48;
    }
    *(_WORD *)(v46 + 40) = v54;
    v109 = v55 & 3;
    v64 = *(_QWORD *)(v46 + 20) & 0x7FFFFFFFFFFFFFFFLL;
    v65 = (*(unsigned __int16 *)(v46 + 28) | (*(unsigned __int8 *)(v46 + 30) << 16)) & 0xFFF3FFFF | (v109 << 18);
    goto LABEL_79;
  }
  if (v56)
    v118 = *(_DWORD *)(v56 - 12);
  else
    v118 = 0;
  v119 = *(_QWORD **)(v28 + 208);
  if (v119)
  {
    v119 = (_QWORD *)*v119;
    if (v119)
      LODWORD(v119) = *((_DWORD *)v119 - 3);
  }
  *(_WORD *)(v46 + 40) = v54;
  v120 = v55 & 3;
  v64 = *(_QWORD *)(v46 + 20) & 0x7FFFFFFFFFFFFFFFLL;
  v65 = (*(unsigned __int16 *)(v46 + 28) | (*(unsigned __int8 *)(v46 + 30) << 16)) & 0xFFF3FFFF | (v120 << 18);
  if (v118 + (_DWORD)v119)
  {
LABEL_79:
    v62 = 0x8000000000000000;
    goto LABEL_49;
  }
  v62 = 0;
LABEL_49:
  *(_QWORD *)(v46 + 20) = v62 | v64;
  *(_WORD *)(v46 + 28) = v65;
  *(_BYTE *)(v46 + 30) = BYTE2(v65);
  *(_DWORD *)(v46 + 44) = v42;
  *(_DWORD *)(v46 + 48) = v31;
  v66 = *(_QWORD *)a2;
  v67 = *(WTF::AtomStringImpl **)(*(_QWORD *)a2 + 88);
  if (v67)
  {
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v46 + 52), v67, v47, v48, v49, v50, v51, v52);
    v66 = *(_QWORD *)a2;
  }
  v68 = (uint64_t)a10;
  v69 = *(WTF::AtomStringImpl **)(v66 + 96);
  if (v69)
    WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((unsigned int *)(v53 + 57), v69, v47, v48, v49, v50, v51, v52);
  v132 = 0;
  if (a10)
  {
    JSC::CompactTDZEnvironmentMap::get(*(_QWORD *)(a1 + 93064), a10, &v131);
    v68 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v68 = 1;
    v70 = v131;
    v131 = 0u;
    *(_OWORD *)(v68 + 8) = v70;
    *(_OWORD *)v123 = 0u;
    *(_QWORD *)(v68 + 24) = 0;
    JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)v123);
    v132 = (_DWORD *)v68;
    JSC::CompactTDZEnvironmentMap::Handle::~Handle((JSC::CompactTDZEnvironmentMap::Handle *)&v131);
  }
  JSC::BytecodeGenerator::generate<JSC::EvalNode,JSC::UnlinkedEvalCodeBlock>((WTF::MonotonicTime *)v123, a1, v28, a2, v53, v45, &v132, a11);
  v78 = v126;
  *(_OWORD *)(a6 + 32) = v125;
  *(_OWORD *)(a6 + 48) = v78;
  v79 = v124;
  *(_OWORD *)a6 = *(_OWORD *)v123;
  *(_OWORD *)(a6 + 16) = v79;
  v80 = v128;
  v128 = 0;
  v81 = *(WTF::StringImpl **)(a6 + 72);
  *(_QWORD *)(a6 + 64) = v127;
  *(_QWORD *)(a6 + 72) = v80;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      v108 = v128;
      *(_DWORD *)(a6 + 80) = v129;
      *(_WORD *)(a6 + 84) = v130;
      v128 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
        {
          WTF::StringImpl::~StringImpl(v108, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v108 -= 2;
        }
      }
      goto LABEL_59;
    }
    *(_DWORD *)v81 -= 2;
  }
  *(_DWORD *)(a6 + 80) = v129;
  *(_WORD *)(a6 + 84) = v130;
LABEL_59:
  if (*(_BYTE *)(a6 + 84))
    v82 = 0;
  else
    v82 = v53;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink((JSC::TDZEnvironmentLink *)v68);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      --*(_DWORD *)v68;
    }
  }
  std::default_delete<JSC::EvalNode>::operator()[abi:sn180100](v28, v71, v72, v73, v74, v75, v76, v77);
  return v82;
}

WTF::MonotonicTime *JSC::parse<JSC::EvalNode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, char a11)
{
  WTF::MonotonicTime *v11;
  char v12;
  char v13;
  WTF::StringImpl **v14;
  int v15;
  int v16;
  int v17;
  int v18;
  WTF::AtomStringImpl *v19;
  WTF::AtomStringImpl *v20;
  int *v21;
  int *v22;
  JSC::VM *v23;
  JSC::VM *v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::MonotonicTime *result;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  double v143;
  const char *v144;
  char v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v156;
  SourceCode *v157;
  WTF::StringImpl **v158;
  _QWORD *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  int v178;
  __int16 v179;
  WTF::StringImpl *v180;
  const char *v181[2];
  uint64_t v182;
  uint64_t v183[3];
  uint64_t v184[3];
  __int16 v185;
  int v186;
  int v187;
  __int128 v188;
  unint64_t v189[3];

  v11 = (WTF::MonotonicTime *)MEMORY[0x1E0C80A78](a1, a2);
  v13 = v12;
  v158 = v14;
  v159 = v11;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = 0.0;
  if (unk_1ECF4C33E)
    v25 = WTF::MonotonicTime::now(v11);
  *v159 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 24))(*(_QWORD *)v22);
  v157 = (SourceCode *)v22;
  if ((v26 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)&v160, v24, v22, 0, 0, v18, v16, 12, 0, 1, 0, v13, 1, a9, 0, a11);
    v27 = v171;
    v189[0] = 0;
    v188 = v168;
    JSC::Parser<JSC::Lexer<unsigned char>>::parseInner((uint64_t)&v160, v20, 0, 0, 0, a10, v28, v29, (uint64_t)v181);
    v37 = 0;
    v38 = v164;
    v39 = *(_DWORD *)v164;
    v40 = *(unsigned __int8 *)(v164 + 150);
    if (*(_BYTE *)(v164 + 150))
    {
      v37 = *(WTF::StringImpl **)(v164 + 152);
      if (v37)
        *(_DWORD *)v37 += 2;
    }
    v180 = v37;
    *(_QWORD *)(v38 + 184) = 0;
    v41 = *(_QWORD *)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = 0;
    v42 = *(_QWORD *)(v38 + 24);
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    v43 = *(_QWORD *)(v38 + 40);
    *(_BYTE *)(v38 + 148) = 0;
    *(_QWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 48) = 0;
    if (v43)
      WTF::fastFree(v43, v30, v31, v32, v33, v34, v35, v36);
    if (v42)
      WTF::fastFree(v42, v30, v31, v32, v33, v34, v35, v36);
    if (v41)
      WTF::fastFree(v41, v30, v31, v32, v33, v34, v35, v36);
    if (!v40 && !v187)
      goto LABEL_13;
    if (v180)
    {
      v124 = (WTF::AtomStringImpl *)&v180;
    }
    else
    {
      if (v187 != 1)
      {
        v156 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::MonotonicTime *)JSC::UnlinkedEvalCodeBlock::create(v156);
      }
      v124 = (WTF::AtomStringImpl *)v181;
    }
    WTF::String::operator=(v189, v124, v31, v32, v33, v34, v35, v36);
    if (v187)
    {
      if (v165)
      {
        v174 = v168;
        v175 = v169;
        v172 = v166;
        v173 = v167;
        v176 = v170;
        v177 = 0;
        v178 = -1;
        v179 = 1;
      }
      else
      {
        if ((_DWORD)v166 == 20)
        {
          v145 = 3;
        }
        else if ((v166 & 0x200000) != 0)
        {
          if ((_DWORD)v166 == 3145741 || (_DWORD)v166 == 3145732)
            v145 = 3;
          else
            v145 = 2;
        }
        else
        {
          v145 = 1;
        }
        v174 = v168;
        v175 = v169;
        v176 = v170;
        v172 = v166;
        v173 = v167;
        v146 = (WTF::StringImpl *)v189[0];
        if (v189[0])
          *(_DWORD *)v189[0] += 2;
        v177 = v146;
        v178 = v39;
        LOBYTE(v179) = 2;
        HIBYTE(v179) = v145;
      }
      JSC::ParserError::operator=((uint64_t)v158, (uint64_t)&v172, v125, v126, v127, v128, v129, v130);
      v131 = v177;
      v177 = 0;
      if (v131)
      {
        if (*(_DWORD *)v131 == 2)
        {
          WTF::StringImpl::~StringImpl(v131, v54, v55, v56, v57, v58, v59, v60);
          WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        }
        else
        {
          *(_DWORD *)v131 -= 2;
        }
      }
      v52 = 0;
    }
    else
    {
LABEL_13:
      v44 = *(_DWORD *)(v164 + 88);
      v45 = *(_DWORD *)(v164 + 112) - v44;
      LODWORD(v172) = *(_DWORD *)v164;
      DWORD1(v172) = v45;
      v46 = *(_DWORD *)(v164 + 80) - v44;
      *((_QWORD *)&v172 + 1) = v46;
      if (!v161)
      {
        __break(0xC471u);
        JUMPOUT(0x19890F5D8);
      }
      v47 = v46 - v45;
      v48 = (uint64_t *)v162;
      v49 = v160 + 720 * (v161 - 1);
      v50 = *(_BYTE *)(v49 + 9);
      v51 = *(_BYTE *)(v49 + 32);
      v52 = WTF::fastMalloc((WTF *)0xF0);
      v53 = JSC::ScopeNode::ScopeNode(v52, (uint64_t)&v163, (int *)&v188, (uint64_t)&v172, v48, (uint64_t)v181[1], v183, &v182, v184, v185, v50, v51, v186);
      *(_QWORD *)v53 = off_1E358BBC0;
      *(_QWORD *)(v53 + 40) = &unk_1E358BC60;
      *(_QWORD *)(v53 + 104) = &unk_1E358BC80;
      *(_DWORD *)(v53 + 232) = v47;
      v61 = (uint64_t *)v162;
      v62 = v164;
      v63 = *(_DWORD *)(v164 + 88);
      v64 = *(_DWORD *)(v162 + 16) + 1;
      v65 = *(_DWORD *)(v164 + 80) - v63;
      v66 = *(_DWORD *)(v164 + 112) - v63;
      *(_DWORD *)(v53 + 28) = *(_DWORD *)v164;
      *(_DWORD *)(v53 + 8) = v64;
      *(_DWORD *)(v53 + 12) = v65;
      *(_DWORD *)(v53 + 16) = v66;
      *(_DWORD *)(v53 + 20) = v65;
      if (((1 << v27) & 0x1F8FFF) == 0)
      {
        v67 = *v61;
        v68 = *(WTF::StringImpl **)(v62 + 160);
        if (v68)
          *(_DWORD *)v68 += 4;
        v69 = *(WTF::StringImpl **)(v67 + 88);
        *(_QWORD *)(v67 + 88) = v68;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            WTF::StringImpl::~StringImpl(v69, v54, v55, v56, v57, v58, v59, v60);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v69 -= 2;
          }
        }
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
          {
            WTF::StringImpl::~StringImpl(v68, v54, v55, v56, v57, v58, v59, v60);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v68 -= 2;
          }
        }
        v70 = *(_QWORD *)v162;
        v71 = *(WTF::StringImpl **)(v164 + 168);
        if (v71)
          *(_DWORD *)v71 += 4;
        v72 = *(WTF::StringImpl **)(v70 + 96);
        *(_QWORD *)(v70 + 96) = v71;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, v54, v55, v56, v57, v58, v59, v60);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::~StringImpl(v71, v54, v55, v56, v57, v58, v59, v60);
            WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
          }
          else
          {
            *(_DWORD *)v71 -= 2;
          }
        }
      }
    }
    v73 = v180;
    v180 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
    if (v187 != -1)
      ((void (*)(__int128 *, const char **))off_1E35988F8[v187])(&v172, v181);
    v74 = (WTF::StringImpl *)v189[0];
    v189[0] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    *v159 = v52;
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)&v160, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)&v160, v24, v22, 0, 0, v18, v16, 12, 0, 1, 0, v13, 1, a9, 0, a11);
    JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::EvalNode>((uint64_t *)v181, (uint64_t)&v160, v158, v20, (uint64_t)a10, v132, v133, v134);
    *v159 = v181[0];
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)&v160, v135, v136, v137, v138, v139, v140, v141);
  }
  if (byte_1ECF4C340)
  {
    do
      v142 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v142 + 1, &JSC::globalParseCount));
  }
  if (unk_1ECF4C33E)
  {
    v143 = WTF::MonotonicTime::now(result);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)&v160, v157);
    if (*v159)
      v144 = "Parsed #";
    else
      v144 = "Failed to parse #";
    v181[0] = v144;
    LODWORD(v189[0]) = HIDWORD(v160);
    LODWORD(v188) = v160;
    *(double *)&v172 = (v143 - v25) * 1000.0;
    return (WTF::MonotonicTime *)WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>(v181, (unsigned int *)&v188, "/#", (unsigned int *)v189, " in ", (double *)&v172, " ms.", "\n");
  }
  return result;
}

uint64_t JSC::UnlinkedEvalCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  _QWORD *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;

  v8 = a3;
  v11 = a1 + 40896;
  v12 = *(_QWORD **)(a1 + 40896);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::unlinkedEvalCodeBlockSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = v12[3];
  if (SlowCase < v12[4])
    goto LABEL_4;
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v15);
    v12[5] = SlowCase + (int)v15;
LABEL_4:
    v12[3] = SlowCase + 240;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, a1 + 192, 240, 0, 0);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  result = JSC::UnlinkedCodeBlock::UnlinkedCodeBlock(SlowCase, a1, *(_QWORD *)(v11 + 832), 1, (unsigned __int8 *)a2, v8);
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::BytecodeGenerator::generate<JSC::EvalNode,JSC::UnlinkedEvalCodeBlock>(WTF::MonotonicTime *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _DWORD **a7, _QWORD *a8)
{
  double v16;
  JSC::BytecodeGenerator *v17;
  uint64_t v18;
  JSC::BytecodeGenerator *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::MonotonicTime *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  double v44;
  const char *v45;
  double v46;
  int v47;
  const char *v48;
  unsigned int v49;

  v16 = 0.0;
  if (unk_1ECF4C33F)
    v16 = WTF::MonotonicTime::now(a1);
  ++*(_DWORD *)(a2 + 916);
  v17 = (JSC::BytecodeGenerator *)WTF::fastMalloc((WTF *)0x2F0);
  v19 = (JSC::BytecodeGenerator *)JSC::BytecodeGenerator::BytecodeGenerator((uint64_t)v17, a2, a3, a5, a6, a7, v18, a8);
  v49 = 0;
  JSC::BytecodeGenerator::generate(v19, &v49, v20, v21, v22, v23, v24, v25, (uint64_t)a1);
  if (unk_1ECF4C33F)
  {
    v44 = WTF::MonotonicTime::now(v26);
    v45 = "Failed to compile #";
    if (!*((_BYTE *)a1 + 84))
      v45 = "Compiled #";
    v48 = v45;
    JSC::CodeBlockHash::CodeBlockHash(&v47, a4, *(_DWORD *)(a5 + 20) >> 31);
    v46 = (v44 - v16) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [16],unsigned int,char [18],double,char [5],char [2]>(&v48, &v47, " into bytecode ", &v49, " instructions in ", &v46, " ms.", "\n");
  }
  JSC::BytecodeGenerator::~BytecodeGenerator(v17, v27, v28, v29, v30, v31, v32, v33);
  WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
  v42 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v42;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v43 = v42 == 0;
  else
    v43 = 0;
  if (v43)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::EvalNode>(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  char v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;
  __int128 v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  char v131;
  WTF::StringImpl *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  WTF::StringImpl *v137;
  _QWORD v138[2];
  uint64_t v139;
  uint64_t v140[3];
  uint64_t v141[3];
  __int16 v142;
  int v143;
  int v144;
  __int128 v145;

  v11 = (_BYTE *)(a2 + 7352);
  v12 = *(_BYTE *)(a2 + 7474);
  v145 = *(_OWORD *)(a2 + 7400);
  JSC::Parser<JSC::Lexer<char16_t>>::parseInner(a2, a4, 0, 0, 0, a5, a7, a8, (uint64_t)v138);
  v20 = *(int **)(a2 + 7288);
  v21 = *v20;
  v22 = *((unsigned __int8 *)v20 + 150);
  if (*((_BYTE *)v20 + 150))
  {
    v23 = (WTF::StringImpl *)*((_QWORD *)v20 + 19);
    if (v23)
      *(_DWORD *)v23 += 2;
  }
  else
  {
    v23 = 0;
  }
  *((_QWORD *)v20 + 23) = 0;
  v24 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  v25 = *((_QWORD *)v20 + 3);
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = 0;
  v26 = *((_QWORD *)v20 + 5);
  *((_BYTE *)v20 + 148) = 0;
  *((_QWORD *)v20 + 5) = 0;
  *((_QWORD *)v20 + 6) = 0;
  if (v26)
    WTF::fastFree(v26, v13, v14, v15, v16, v17, v18, v19);
  if (v25)
    WTF::fastFree(v25, v13, v14, v15, v16, v17, v18, v19);
  if (v24)
    WTF::fastFree(v24, v13, v14, v15, v16, v17, v18, v19);
  v27 = v144;
  if (!v22 && !v144)
  {
    v28 = 0;
    *a1 = 0;
    goto LABEL_14;
  }
  if (!v23)
  {
    if (v144 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_82;
    }
    v28 = (WTF::StringImpl *)v138[0];
    if (v138[0])
      *(_DWORD *)v138[0] += 2;
    *a1 = 0;
LABEL_41:
    v43 = (WTF::StringImpl **)(a2 + 7368);
    if (*v11)
    {
      memmove(a3, v43, 0x48uLL);
      v56 = a3[9];
      a3[9] = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      *((_DWORD *)a3 + 20) = -1;
      *((_WORD *)a3 + 42) = 1;
      if (!v23)
        goto LABEL_66;
    }
    else
    {
      v57 = *(_DWORD *)v43;
      if (*(_DWORD *)v43 == 20)
      {
        v58 = 3;
      }
      else if ((v57 & 0x200000) != 0)
      {
        if (v57 == 3145741 || v57 == 3145732)
          v58 = 3;
        else
          v58 = 2;
      }
      else
      {
        v58 = 1;
      }
      v68 = *((_OWORD *)v43 + 3);
      v135 = *((_OWORD *)v43 + 2);
      v136 = v68;
      v137 = v43[8];
      v69 = *((_OWORD *)v43 + 1);
      v133 = *(_OWORD *)v43;
      v134 = v69;
      if (v28)
        *(_DWORD *)v28 += 2;
      v70 = v136;
      *((_OWORD *)a3 + 2) = v135;
      *((_OWORD *)a3 + 3) = v70;
      v71 = v137;
      v72 = v134;
      *(_OWORD *)a3 = v133;
      *((_OWORD *)a3 + 1) = v72;
      v73 = a3[9];
      a3[8] = v71;
      a3[9] = v28;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
      *((_DWORD *)a3 + 20) = v21;
      *((_BYTE *)a3 + 84) = 2;
      *((_BYTE *)a3 + 85) = v58;
      if (!v23)
        goto LABEL_66;
    }
    goto LABEL_64;
  }
  *(_DWORD *)v23 += 2;
  *a1 = 0;
  v28 = v23;
  if (v27)
    goto LABEL_41;
LABEL_14:
  v130 = a1;
  v131 = v12;
  v132 = v28;
  v29 = *(unsigned int **)(a2 + 7288);
  v30 = *v29;
  v32 = *((_QWORD *)v29 + 10);
  v31 = *((_QWORD *)v29 + 11);
  v33 = (unint64_t)(*((_QWORD *)v29 + 14) - v31) >> 1;
  *(_QWORD *)&v133 = __PAIR64__(v33, v30);
  v34 = (unint64_t)(v32 - v31) >> 1;
  *((_QWORD *)&v133 + 1) = v34;
  v35 = *(_DWORD *)(a2 + 12);
  if (!v35)
  {
LABEL_82:
    __break(0xC471u);
    return;
  }
  v36 = *(uint64_t **)(a2 + 7224);
  v37 = v34 - v33;
  v38 = *(_QWORD *)a2 + 720 * (v35 - 1);
  v39 = *(_BYTE *)(v38 + 9);
  v40 = *(_BYTE *)(v38 + 32);
  v41 = WTF::fastMalloc((WTF *)0xF0);
  v42 = JSC::ScopeNode::ScopeNode(v41, a2 + 7232, (int *)&v145, (uint64_t)&v133, v36, v138[1], v140, &v139, v141, v142, v39, v40, v143);
  *(_QWORD *)v42 = off_1E358BBC0;
  *(_QWORD *)(v42 + 40) = &unk_1E358BC60;
  *(_QWORD *)(v42 + 104) = &unk_1E358BC80;
  *(_DWORD *)(v42 + 232) = v37;
  *v130 = v42;
  v44 = *(uint64_t **)(a2 + 7224);
  v45 = *(_QWORD *)(a2 + 7288);
  v46 = *(_QWORD *)(v45 + 88);
  v47 = *((_DWORD *)v44 + 4) + 1;
  v48 = (unint64_t)(*(_QWORD *)(v45 + 80) - v46) >> 1;
  v49 = (unint64_t)(*(_QWORD *)(v45 + 112) - v46) >> 1;
  *(_DWORD *)(v42 + 28) = *(_DWORD *)v45;
  *(_DWORD *)(v42 + 8) = v47;
  *(_DWORD *)(v42 + 12) = v48;
  *(_DWORD *)(v42 + 16) = v49;
  *(_DWORD *)(v42 + 20) = v48;
  if (((1 << v131) & 0x1F8FFF) != 0)
    goto LABEL_32;
  v50 = *v44;
  v51 = *(WTF::StringImpl **)(v45 + 160);
  if (v51)
    *(_DWORD *)v51 += 4;
  v52 = *(WTF::StringImpl **)(v50 + 88);
  *(_QWORD *)(v50 + 88) = v51;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      if (!v51)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v52 -= 2;
  }
  if (!v51)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v51 == 2)
  {
    WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *(_DWORD *)v51 -= 2;
  }
LABEL_24:
  v53 = **(_QWORD **)(a2 + 7224);
  v54 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 7288) + 168);
  if (v54)
    *(_DWORD *)v54 += 4;
  v55 = *(WTF::StringImpl **)(v53 + 96);
  *(_QWORD *)(v53 + 96) = v54;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
      if (!v54)
        goto LABEL_32;
      goto LABEL_30;
    }
    *(_DWORD *)v55 -= 2;
  }
  if (!v54)
    goto LABEL_32;
LABEL_30:
  if (*(_DWORD *)v54 == 2)
  {
    WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
  }
  else
  {
    *(_DWORD *)v54 -= 2;
  }
LABEL_32:
  v28 = v132;
  if (v23)
  {
LABEL_64:
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
LABEL_66:
  if (v144 != -1)
    ((void (*)(__int128 *, _QWORD *))off_1E3598908[v144])(&v133, v138);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)v43, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
}

void std::default_delete<JSC::EvalNode>::operator()[abi:sn180100](unint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = off_1E3596CB0;
  *(_QWORD *)(a1 + 40) = &unk_1E3596D50;
  *(_QWORD *)(a1 + 104) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a1 + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_DWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  *(_QWORD *)(a1 + 104) = &off_1E357CA78;
  v17 = *(_QWORD *)(a1 + 136);
  if (v17)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a1 + 112), (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ParserArena *)(a1 + 48), v18, v19, v20, v21, v22, v23, v24);
  WTF::fastFree(a1, v25, v26, v27, v28, v29, v30, v31);
}

unsigned int *WTF::RefPtr<WTF::StringImpl,WTF::PackedPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a2 += 2;
  v9 = (WTF::StringImpl *)(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
  *a1 = a2;
  *((_BYTE *)a1 + 4) = BYTE4(a2);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

SourceProvider *JSC::generateUnlinkedCodeBlockForFunctions(SourceProvider *result, uint64_t a2, const SourceCode *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  JSC::UnlinkedFunctionExecutable *v11;
  unint64_t v12;
  unint64_t v13;
  JSC::UnlinkedFunctionExecutable *v14;
  unint64_t v15;
  SourceCode v16;

  v7 = (uint64_t)result;
  v8 = *(unsigned int **)(a2 + 128);
  if (v8)
  {
    v10 = 0;
    do
    {
      if (v10 >= *v8)
        break;
      v11 = *(JSC::UnlinkedFunctionExecutable **)&v8[2 * v10 + 2];
      JSC::UnlinkedFunctionExecutable::linkedSourceCode(v11, a3, (int32x2_t *)&v16);
      v12 = JSC::UnlinkedFunctionExecutable::unlinkedCodeBlockFor((uint64_t)v11, v7);
      if (v12)
        JSC::generateUnlinkedCodeBlockForFunctions(v7, v12, &v16, a4);
      result = v16.var0.var0;
      v16.var0.var0 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (SourceProvider *)(*(uint64_t (**)(SourceProvider *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      ++v10;
      v8 = *(unsigned int **)(a2 + 128);
    }
    while (v8);
  }
  v9 = *(unsigned int **)(a2 + 136);
  if (v9)
  {
    v13 = 0;
    do
    {
      if (v13 >= *v9)
        break;
      v14 = *(JSC::UnlinkedFunctionExecutable **)&v9[2 * v13 + 2];
      JSC::UnlinkedFunctionExecutable::linkedSourceCode(v14, a3, (int32x2_t *)&v16);
      v15 = JSC::UnlinkedFunctionExecutable::unlinkedCodeBlockFor((uint64_t)v14, v7);
      if (v15)
        JSC::generateUnlinkedCodeBlockForFunctions(v7, v15, &v16, a4);
      result = v16.var0.var0;
      v16.var0.var0 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (SourceProvider *)(*(uint64_t (**)(SourceProvider *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      ++v13;
      v9 = *(unsigned int **)(a2 + 136);
    }
    while (v9);
  }
  return result;
}

WTF::MonotonicTime *JSC::parse<JSC::ProgramNode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  WTF::MonotonicTime *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  WTF::AtomStringImpl *v19;
  WTF::AtomStringImpl *v20;
  int *v21;
  int *v22;
  JSC::VM *v23;
  JSC::VM *v24;
  WTF::AtomStringImpl **v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  WTF::AtomStringImpl *v36;
  WTF::MonotonicTime *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  WTF::AtomStringImpl *v46;
  unsigned int v47;
  double v48;
  const char *v49;
  double v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  _DWORD v54[1888];

  v10 = (WTF::MonotonicTime *)MEMORY[0x1E0C80A78](a1, a2);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = (WTF::AtomStringImpl **)v10;
  v26 = 0.0;
  if (unk_1ECF4C33E)
    v26 = WTF::MonotonicTime::now(v10);
  *v25 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 24))(*(_QWORD *)v22);
  if ((v27 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v54, v24, v22, 0, 0, v18, v16, 12, 0, 1, 0, v12, 0, a9, 0, a10);
    JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ProgramNode>((uint64_t)v54, v14, v20, 0, 0, 0, 0, v28, (uint64_t *)&v53);
    v35 = v53;
    v53 = 0;
    v36 = *v25;
    *v25 = (WTF::AtomStringImpl *)v35;
    if (v36)
    {
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v36, v29, v30, v31, v32, v33, v34);
      v36 = (WTF::AtomStringImpl *)v53;
      v53 = 0;
      if (v36)
        std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v53, (unint64_t)v36, v29, v30, v31, v32, v33, v34);
    }
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)v54, v36, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v54, v24, v22, 0, 0, v18, v16, 12, 0, 1, 0, v12, 0, a9, 0, a10);
    JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ProgramNode>((uint64_t)v54, v14, v20, 0, 0, 0, 0, v38, (uint64_t *)&v53);
    v45 = v53;
    v53 = 0;
    v46 = *v25;
    *v25 = (WTF::AtomStringImpl *)v45;
    if (v46)
    {
      std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v46, v39, v40, v41, v42, v43, v44);
      v46 = (WTF::AtomStringImpl *)v53;
      v53 = 0;
      if (v46)
        std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v53, (unint64_t)v46, v39, v40, v41, v42, v43, v44);
    }
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)v54, v46, v39, v40, v41, v42, v43, v44);
  }
  if (byte_1ECF4C340)
  {
    do
      v47 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v47 + 1, &JSC::globalParseCount));
  }
  if (unk_1ECF4C33E)
  {
    v48 = WTF::MonotonicTime::now(result);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)v54, (const SourceCode *)v22);
    if (*v25)
      v49 = "Parsed #";
    else
      v49 = "Failed to parse #";
    v53 = (char *)v49;
    v51 = v54[1];
    v52 = v54[0];
    v50 = (v48 - v26) * 1000.0;
    return (WTF::MonotonicTime *)WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>((const char **)&v53, &v52, "/#", &v51, " in ", &v50, " ms.", "\n");
  }
  return result;
}

uint64_t JSC::UnlinkedProgramCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  _QWORD *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a3;
  v11 = a1 + 40920;
  v12 = *(_QWORD **)(a1 + 40920);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::unlinkedProgramCodeBlockSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = v12[3];
  if (SlowCase < v12[4])
    goto LABEL_4;
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v15);
    v12[5] = SlowCase + (int)v15;
LABEL_4:
    v12[3] = SlowCase + 272;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, a1 + 192, 272, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  result = JSC::UnlinkedCodeBlock::UnlinkedCodeBlock(SlowCase, a1, *(_QWORD *)(v11 + 800), 0, (unsigned __int8 *)a2, v8);
  *(_QWORD *)(result + 216) = 0;
  *(_BYTE *)(result + 224) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_BYTE *)(result + 248) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::BytecodeGenerator::generate<JSC::ProgramNode,JSC::UnlinkedProgramCodeBlock>(WTF::MonotonicTime *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double v12;
  JSC::BytecodeGenerator *v13;
  JSC::BytecodeGenerator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::MonotonicTime *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  double v39;
  const char *v40;
  double v41;
  int v42;
  const char *v43;
  unsigned int v44;

  v12 = 0.0;
  if (unk_1ECF4C33F)
    v12 = WTF::MonotonicTime::now(a1);
  ++*(_DWORD *)(a2 + 916);
  v13 = (JSC::BytecodeGenerator *)WTF::fastMalloc((WTF *)0x2F0);
  v14 = (JSC::BytecodeGenerator *)JSC::BytecodeGenerator::BytecodeGenerator((uint64_t)v13, a2, a3, a5, a6);
  v44 = 0;
  JSC::BytecodeGenerator::generate(v14, &v44, v15, v16, v17, v18, v19, v20, (uint64_t)a1);
  if (unk_1ECF4C33F)
  {
    v39 = WTF::MonotonicTime::now(v21);
    v40 = "Failed to compile #";
    if (!*((_BYTE *)a1 + 84))
      v40 = "Compiled #";
    v43 = v40;
    JSC::CodeBlockHash::CodeBlockHash(&v42, a4, *(_DWORD *)(a5 + 20) >> 31);
    v41 = (v39 - v12) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [16],unsigned int,char [18],double,char [5],char [2]>(&v43, &v42, " into bytecode ", &v44, " instructions in ", &v41, " ms.", "\n");
  }
  JSC::BytecodeGenerator::~BytecodeGenerator(v13, v22, v23, v24, v25, v26, v27, v28);
  WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  v37 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v37;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v38 = v37 == 0;
  else
    v38 = 0;
  if (v38)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
}

WTF::MonotonicTime *JSC::parse<JSC::ModuleProgramNode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  WTF::MonotonicTime *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  WTF::AtomStringImpl *v19;
  WTF::AtomStringImpl *v20;
  int *v21;
  int *v22;
  JSC::VM *v23;
  JSC::VM *v24;
  WTF::AtomStringImpl **v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  WTF::AtomStringImpl *v36;
  WTF::MonotonicTime *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  WTF::AtomStringImpl *v46;
  unsigned int v47;
  double v48;
  const char *v49;
  double v50;
  unsigned int v51;
  unsigned int v52;
  WTF::AtomStringImpl *v53;
  _DWORD v54[1888];

  v10 = (WTF::MonotonicTime *)MEMORY[0x1E0C80A78](a1, a2);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = (WTF::AtomStringImpl **)v10;
  v26 = 0.0;
  if (unk_1ECF4C33E)
    v26 = WTF::MonotonicTime::now(v10);
  *v25 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)v22 + 24))(*(_QWORD *)v22);
  if ((v27 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v54, v24, v22, 0, 0, v18, v16, 14, 0, 1, 0, v12, 0, a9, 0, a10);
    JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ModuleProgramNode>((uint64_t)v54, v14, v20, 0, 0, 0, 0, v28, &v53);
    v35 = v53;
    v53 = 0;
    v36 = *v25;
    *v25 = v35;
    if (v36)
    {
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v36, v29, v30, v31, v32, v33, v34);
      v36 = v53;
      v53 = 0;
      if (v36)
        std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v53, (unint64_t)v36, v29, v30, v31, v32, v33, v34);
    }
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)v54, v36, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v54, v24, v22, 0, 0, v18, v16, 14, 0, 1, 0, v12, 0, a9, 0, a10);
    JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ModuleProgramNode>((uint64_t)v54, v14, v20, 0, 0, 0, 0, v38, &v53);
    v45 = v53;
    v53 = 0;
    v46 = *v25;
    *v25 = v45;
    if (v46)
    {
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v25, (unint64_t)v46, v39, v40, v41, v42, v43, v44);
      v46 = v53;
      v53 = 0;
      if (v46)
        std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v53, (unint64_t)v46, v39, v40, v41, v42, v43, v44);
    }
    result = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)v54, v46, v39, v40, v41, v42, v43, v44);
  }
  if (byte_1ECF4C340)
  {
    do
      v47 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v47 + 1, &JSC::globalParseCount));
  }
  if (unk_1ECF4C33E)
  {
    v48 = WTF::MonotonicTime::now(result);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)v54, (const SourceCode *)v22);
    if (*v25)
      v49 = "Parsed #";
    else
      v49 = "Failed to parse #";
    v53 = (WTF::AtomStringImpl *)v49;
    v51 = v54[1];
    v52 = v54[0];
    v50 = (v48 - v26) * 1000.0;
    return (WTF::MonotonicTime *)WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>((const char **)&v53, &v52, "/#", &v51, " in ", &v50, " ms.", "\n");
  }
  return result;
}

uint64_t JSC::UnlinkedModuleProgramCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  JSC::Heap *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;

  v8 = a3;
  v11 = a1 + 40912;
  v12 = *(JSC::Heap **)(a1 + 40912);
  if (!v12)
    v12 = JSC::GCClient::Heap::unlinkedModuleProgramCodeBlockSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v12 + 3);
  if (SlowCase < *((_QWORD *)v12 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v12 + 5);
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v12 + 6);
    *((_QWORD *)v12 + 4) = SlowCase + HIDWORD(v15);
    *((_QWORD *)v12 + 5) = SlowCase + (int)v15;
LABEL_4:
    *((_QWORD *)v12 + 3) = SlowCase + 224;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, a1 + 192, 224, 0, 0);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  result = JSC::UnlinkedCodeBlock::UnlinkedCodeBlock(SlowCase, a1, *(_QWORD *)(v11 + 832), 3, (unsigned __int8 *)a2, v8);
  *(_DWORD *)(result + 216) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::BytecodeGenerator::generate<JSC::ModuleProgramNode,JSC::UnlinkedModuleProgramCodeBlock>(WTF::MonotonicTime *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double v12;
  JSC::BytecodeGenerator *v13;
  JSC::BytecodeGenerator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::MonotonicTime *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  double v39;
  const char *v40;
  double v41;
  int v42;
  const char *v43;
  unsigned int v44;

  v12 = 0.0;
  if (unk_1ECF4C33F)
    v12 = WTF::MonotonicTime::now(a1);
  ++*(_DWORD *)(a2 + 916);
  v13 = (JSC::BytecodeGenerator *)WTF::fastMalloc((WTF *)0x2F0);
  v14 = (JSC::BytecodeGenerator *)JSC::BytecodeGenerator::BytecodeGenerator((uint64_t)v13, a2, a3, a5, a6);
  v44 = 0;
  JSC::BytecodeGenerator::generate(v14, &v44, v15, v16, v17, v18, v19, v20, (uint64_t)a1);
  if (unk_1ECF4C33F)
  {
    v39 = WTF::MonotonicTime::now(v21);
    v40 = "Failed to compile #";
    if (!*((_BYTE *)a1 + 84))
      v40 = "Compiled #";
    v43 = v40;
    JSC::CodeBlockHash::CodeBlockHash(&v42, a4, *(_DWORD *)(a5 + 20) >> 31);
    v41 = (v39 - v12) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [16],unsigned int,char [18],double,char [5],char [2]>(&v43, &v42, " into bytecode ", &v44, " instructions in ", &v41, " ms.", "\n");
  }
  JSC::BytecodeGenerator::~BytecodeGenerator(v13, v22, v23, v24, v25, v26, v27, v28);
  WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
  v37 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v37;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v38 = v37 == 0;
  else
    v38 = 0;
  if (v38)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
}

_QWORD *WTF::HashTable<JSC::SourceCodeKey,WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::SourceCodeKey,JSC::SourceCodeValue>>,JSC::SourceCodeKey::Hash,WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::HashTraits>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::SourceCodeKey,JSC::SourceCodeValue,JSC::SourceCodeKey::Hash,JSC::SourceCodeKey::HashTraits,WTF::HashTraits<JSC::SourceCodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::SourceCodeKey::Hash>,JSC::SourceCodeKey>(uint64_t a1, _DWORD *a2, const WTF::StringImpl *a3)
{
  int v5;
  unsigned int v6;
  int i;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  WTF *v11;
  const WTF::StringImpl *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;

  if (a1)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 - 8);
    for (i = a2[8]; ; i = v5 + v8)
    {
      v8 = i & v6;
      v9 = (_QWORD *)(a1 + 56 * (i & v6));
      v10 = *v9;
      if (!*v9)
        return 0;
      if (v10 != -1
        && *((_DWORD *)v9 + 8) == a2[8]
        && *((_DWORD *)v9 + 3) - *((_DWORD *)v9 + 2) == a2[3] - a2[2]
        && *((_DWORD *)v9 + 6) == a2[6]
        && *((_DWORD *)v9 + 7) == a2[7])
      {
        v11 = (WTF *)v9[2];
        v12 = (const WTF::StringImpl *)*((_QWORD *)a2 + 2);
        if (v11 != v12)
        {
          if (!v11 || !v12 || !WTF::equal(v11, v12, a3))
            goto LABEL_6;
          v10 = *v9;
        }
        if ((*(_BYTE *)(v10 + 24) & 1) == 0)
        {
          v13 = 0;
          v14 = 0x100000000;
LABEL_17:
          v15 = *(_QWORD *)a2;
          if ((*(_BYTE *)(*(_QWORD *)a2 + 24) & 1) != 0)
          {
            LODWORD(v31) = *(_DWORD *)(v15 + 36);
            if ((_DWORD)v31 == *(_DWORD *)(v15 + 28))
              v31 = v31;
            else
              v31 = (v31 + 1);
            v32 = *(_QWORD *)(v15 + 16);
            if (v32)
            {
              v16 = *(unsigned __int8 **)(v32 + 8);
              v33 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v16 = 0;
              v33 = 0x100000000;
            }
            if (v33 <= v31)
            {
              v17 = 0x100000000;
              v16 = "";
            }
            else
            {
              v34 = *(_DWORD *)(v15 + 40) - v31;
              if ((int)v33 - (int)v31 > v34 || (v34 = v33 - v31, (_DWORD)v31))
              {
                v17 = v34;
                v35 = v33 - (unint64_t)v31;
                if ((v33 & 0x100000000) != 0)
                {
                  if (v35 < v17)
                    goto LABEL_80;
                  v16 += v31;
                  v17 |= 0x100000000uLL;
                }
                else
                {
                  if (v35 < v17)
                    goto LABEL_80;
                  v16 += 2 * v31;
                }
              }
              else
              {
                v17 = v33;
              }
            }
          }
          else
          {
            v16 = 0;
            v17 = 0x100000000;
          }
          if (WTF::operator==(v13, v14, v16, v17))
          {
            if (*v9)
            {
              v19 = *((unsigned int *)v9 + 2);
              v18 = *((_DWORD *)v9 + 3);
              v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9);
              if (v21 <= v19)
              {
                v24 = 0x100000000;
                v22 = "";
                goto LABEL_46;
              }
              v22 = (unsigned __int8 *)v20;
              v23 = v18 - v19;
              if ((int)v21 - (int)v19 > (v18 - v19) || (v23 = v21 - v19, (_DWORD)v19))
              {
                v24 = v23;
                v25 = v21 - v19;
                if ((v21 & 0xFF00000000) != 0)
                {
                  if (v25 >= v24)
                  {
                    v22 = (unsigned __int8 *)(v20 + v19);
                    v24 |= 0x100000000uLL;
                    goto LABEL_46;
                  }
                  goto LABEL_80;
                }
                if (v25 >= v24)
                {
                  v22 = (unsigned __int8 *)(v20 + 2 * v19);
                  goto LABEL_46;
                }
                goto LABEL_80;
              }
              v24 = v21;
              goto LABEL_46;
            }
            goto LABEL_81;
          }
          goto LABEL_6;
        }
        LODWORD(v26) = *(_DWORD *)(v10 + 36);
        if ((_DWORD)v26 == *(_DWORD *)(v10 + 28))
          v26 = v26;
        else
          v26 = (v26 + 1);
        v27 = *(_QWORD *)(v10 + 16);
        if (v27)
        {
          v13 = *(unsigned __int8 **)(v27 + 8);
          v28 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v13 = 0;
          v28 = 0x100000000;
        }
        if (v28 <= v26)
        {
          v14 = 0x100000000;
          v13 = "";
          goto LABEL_17;
        }
        v29 = *(_DWORD *)(v10 + 40) - v26;
        if ((int)v28 - (int)v26 <= v29)
        {
          v29 = v28 - v26;
          if (!(_DWORD)v26)
          {
            v14 = v28;
            goto LABEL_17;
          }
        }
        v14 = v29;
        v30 = v28 - (unint64_t)v26;
        if ((v28 & 0x100000000) == 0)
        {
          if (v30 < v14)
            goto LABEL_80;
          v13 += 2 * v26;
          goto LABEL_17;
        }
        if (v30 >= v14)
        {
          v13 += v26;
          v14 |= 0x100000000uLL;
          goto LABEL_17;
        }
LABEL_80:
        while (1)
        {
          __break(1u);
LABEL_81:
          v22 = 0;
          v24 = 0x100000000;
LABEL_46:
          if (!*(_QWORD *)a2)
            break;
          v37 = a2[2];
          v36 = a2[3];
          v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
          if (v39 <= v37)
          {
            v42 = 0x100000000;
            v40 = "";
            goto LABEL_54;
          }
          v40 = (unsigned __int8 *)v38;
          v41 = v36 - v37;
          if ((int)v39 - (int)v37 <= (v36 - v37))
          {
            v41 = v39 - v37;
            if (!(_DWORD)v37)
            {
              v42 = v39;
              goto LABEL_54;
            }
          }
          v42 = v41;
          v43 = v39 - v37;
          if ((v39 & 0xFF00000000) != 0)
          {
            if (v43 >= v42)
            {
              v40 = (unsigned __int8 *)(v38 + v37);
              v42 |= 0x100000000uLL;
              goto LABEL_54;
            }
          }
          else if (v43 >= v42)
          {
            v40 = (unsigned __int8 *)(v38 + 2 * v37);
            goto LABEL_54;
          }
        }
        v40 = 0;
        v42 = 0x100000000;
LABEL_54:
        if (WTF::operator==(v22, v24, v40, v42))
          return v9;
      }
LABEL_6:
      ++v5;
    }
  }
  return 0;
}

unint64_t JSC::decodeCodeBlock<JSC::UnlinkedProgramCodeBlock>(_QWORD *a1, uint64_t a2, WTF **a3)
{
  WTF *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  WTF *v14;

  v3 = *a3;
  *a3 = 0;
  v14 = v3;
  v11 = JSC::decodeCodeBlockImpl(a1, a2, (uint64_t)&v14);
  v12 = v14;
  v14 = 0;
  if (v12)
    WTF::RefCounted<JSC::CachedBytecode>::deref(v12, v4, v5, v6, v7, v8, v9, v10);
  return v11;
}

void WTF::Detail::CallableWrapper<JSC::UnlinkedProgramCodeBlock * JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedProgramCodeBlock,JSC::ProgramExecutable>(JSC::VM &,JSC::ProgramExecutable *,JSC::SourceCode const&,JSC::JSParserStrictMode,JSC::JSParserScriptMode,WTF::OptionSet<JSC::CodeGenerationMode>,JSC::ParserError &,JSC::EvalContextType)::{lambda(void)#1},WTF::RefPtr<JSC::CachedBytecode,WTF::RawPtrTraits<JSC::CachedBytecode>,WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>>::call(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = **(_DWORD ***)(a1 + 24);
  v6 = 0x100000;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = -1;
  v11 = -1;
  v12 = -1;
  v13 = 0;
  v14 = -1;
  v15 = 0;
  v16 = 0;
  JSC::encodeCodeBlock(v3, v2, v4, -1, (JSC::BytecodeCacheError *)&v6, a2);
  if (v16 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix_0[v16])(&v5, &v6);
}

void WTF::Detail::CallableWrapper<JSC::UnlinkedEvalCodeBlock * JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedEvalCodeBlock,JSC::IndirectEvalExecutable>(JSC::VM &,JSC::IndirectEvalExecutable *,JSC::SourceCode const&,JSC::JSParserStrictMode,JSC::JSParserScriptMode,WTF::OptionSet<JSC::CodeGenerationMode>,JSC::ParserError &,JSC::EvalContextType)::{lambda(void)#1},WTF::RefPtr<JSC::CachedBytecode,WTF::RawPtrTraits<JSC::CachedBytecode>,WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>>::call(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = **(_DWORD ***)(a1 + 24);
  v6 = 0x100000;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = -1;
  v11 = -1;
  v12 = -1;
  v13 = 0;
  v14 = -1;
  v15 = 0;
  v16 = 0;
  JSC::encodeCodeBlock(v3, v2, v4, -1, (JSC::BytecodeCacheError *)&v6, a2);
  if (v16 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix_0[v16])(&v5, &v6);
}

void WTF::Detail::CallableWrapper<JSC::UnlinkedModuleProgramCodeBlock * JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedModuleProgramCodeBlock,JSC::ModuleProgramExecutable>(JSC::VM &,JSC::ModuleProgramExecutable *,JSC::SourceCode const&,JSC::JSParserStrictMode,JSC::JSParserScriptMode,WTF::OptionSet<JSC::CodeGenerationMode>,JSC::ParserError &,JSC::EvalContextType)::{lambda(void)#1},WTF::RefPtr<JSC::CachedBytecode,WTF::RawPtrTraits<JSC::CachedBytecode>,WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>>::call(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = **(_DWORD ***)(a1 + 24);
  v6 = 0x100000;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = -1;
  v11 = -1;
  v12 = -1;
  v13 = 0;
  v14 = -1;
  v15 = 0;
  v16 = 0;
  JSC::encodeCodeBlock(v3, v2, v4, -1, (JSC::BytecodeCacheError *)&v6, a2);
  if (v16 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC11ParserErrorENS6_18BytecodeCacheError13StandardErrorENS8_10WriteErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix_0[v16])(&v5, &v6);
}

void WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (WTF::StringImpl **)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 == (WTF::StringImpl *)-1)
        goto LABEL_29;
      if (v23)
        break;
      v24 = v10 + 16 * v21;
      v25 = *(WTF::StringImpl **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          v23 = *v22;
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      *v22 = 0;
      if (!v23)
        goto LABEL_29;
      if (*(_DWORD *)v23 == 2)
      {
LABEL_32:
        WTF::StringImpl::~StringImpl(v23, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        goto LABEL_29;
      }
      *(_DWORD *)v23 -= 2;
LABEL_29:
      if (++v21 == v11)
        goto LABEL_40;
    }
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 8);
    else
      v27 = 0;
    v28 = ((unint64_t)v23 + ~((_QWORD)v23 << 32)) ^ (((unint64_t)v23 + ~((_QWORD)v23 << 32)) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = 1;
    do
    {
      v33 = v31;
      v34 = *(_QWORD *)(v26 + 16 * v31);
      v31 = (v31 + v32++) & v27;
    }
    while (v34);
    v35 = (WTF::StringImpl **)(v26 + 16 * v33);
    v36 = v35[1];
    v35[1] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        v65 = *v35;
        *v35 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
          {
            WTF::StringImpl::~StringImpl(v65, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
          }
          else
          {
            *(_DWORD *)v65 -= 2;
          }
        }
        goto LABEL_23;
      }
      *(_DWORD *)v36 -= 2;
    }
    *v35 = 0;
LABEL_23:
    v37 = *v22;
    *v22 = 0;
    *v35 = v37;
    v38 = v10 + 16 * v21;
    v39 = *(WTF::StringImpl **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    v35[1] = v39;
    v40 = *(WTF::StringImpl **)(v38 + 8);
    *(_QWORD *)(v38 + 8) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    v23 = *v22;
    *v22 = 0;
    if (!v23)
      goto LABEL_29;
    if (*(_DWORD *)v23 == 2)
      goto LABEL_32;
    *(_DWORD *)v23 -= 2;
    goto LABEL_29;
  }
  if (v10)
LABEL_40:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::processConfigFile(char const*,char const*,char const*)::$_0 &&>>(const char *****a1)
{
  const char ***v1;
  const char *v2;
  const char *v3;
  char __dst[1024];
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = **v1;
  if (v2)
  {
    strncpy(__dst, v2, 0x400uLL);
    v5 = 0;
    strncpy(_MergedGlobals_42, *v1[1], 0x80uLL);
    v3 = *v1[2];
    if (v3)
      strncpy(byte_1ECF58E31, v3, 0x80uLL);
    JSC::ConfigFile::parse((JSC::ConfigFile *)__dst);
  }
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned __int128 v25;
  char v26;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *a3;
  if (*a3)
  {
    v12 = *(_DWORD *)(v11 + 4);
    v13 = __CFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      v14 = -1;
  }
  else
  {
    v14 = 1;
  }
  v13 = __CFADD__(v14, v10);
  v15 = v14 + v10;
  if (v13)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if ((v17 || (v17 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v17 + 16) & 4) == 0 || v11 && (*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v22 = *a3;
      *(_WORD *)result = *a2;
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(result + 2, v22);
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v19 = *a3;
      *result++ = *a2;
      if (v19)
      {
        v20 = *(char **)(v19 + 8);
        v21 = *(unsigned int *)(v19 + 4);
        if ((*(_BYTE *)(v19 + 16) & 4) != 0)
        {
          if ((_DWORD)v21 == 1)
          {
            *result = *v20;
          }
          else if ((_DWORD)v21)
          {
            return (char *)memcpy(result, v20, v21);
          }
        }
        else
        {
          v23 = &result[v21];
          if (v21 >= 0x10)
          {
            v24 = &result[v21 & 0xFFFFFFF0];
            do
            {
              v25 = (unsigned __int128)vld2q_s8(v20);
              v20 += 32;
              *(_OWORD *)result = v25;
              result += 16;
            }
            while (result != v24);
            result = v24;
          }
          while (result != v23)
          {
            v26 = *v20;
            v20 += 2;
            *result++ = v26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, char a5)
{
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v6 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v7 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v8 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v9 = a2[1];
      v20.val[0] = a2[2];
      v10 = a2[3];
      a2 += 4;
      v11 = v10;
      v20.val[1] = 0uLL;
      v21.val[0] = v9;
      v19.val[1] = 0uLL;
      v12 = a1;
      vst2q_s8(v12, v19);
      v12 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v12, v21);
      v13 = a1 + 64;
      vst2q_s8(v13, v20);
      v14 = a1 + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      a1 += 128;
    }
    while (a1 != v7);
    a1 = v7;
  }
  while (a1 != v6)
  {
    v15 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v15;
    a1 += 2;
  }
  v18 = a4;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v18, v6);
  v17 = v18;
  if (v18)
    v17 = *(unsigned int *)(v18 + 4);
  *(_WORD *)&v6[2 * v17] = a5;
  return result;
}

void JSC::ConsoleObject::finishCreation(JSC::ConsoleObject *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  WTF::StringImpl *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  WTF::StringImpl *v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  WTF::StringImpl *v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::AtomStringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  WTF::StringImpl *v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  WTF::StringImpl *v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  WTF::StringImpl *v158;
  WTF::AtomStringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __n128 v176;
  WTF::StringImpl *v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __n128 v195;
  WTF::StringImpl *v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  WTF::StringImpl *v215;
  WTF::AtomStringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  int v225;
  WTF::StringImpl *v226;
  WTF::AtomStringImpl *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __n128 v235;
  WTF::StringImpl *v236;
  WTF::AtomStringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::AtomStringImpl *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __n128 v254;
  WTF::StringImpl *v255;
  WTF::AtomStringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::AtomStringImpl *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __n128 v273;
  WTF::StringImpl *v274;
  WTF::AtomStringImpl *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::AtomStringImpl *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __n128 v292;
  WTF::StringImpl *v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::AtomStringImpl *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __n128 v311;
  WTF::StringImpl *v312;
  WTF::AtomStringImpl *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::AtomStringImpl *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __n128 v330;
  WTF::StringImpl *v331;
  WTF::AtomStringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::AtomStringImpl *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __n128 v349;
  WTF::StringImpl *v350;
  WTF::AtomStringImpl *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  WTF::AtomStringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  __n128 v368;
  WTF::StringImpl *v369;
  WTF::AtomStringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::AtomStringImpl *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  __n128 v387;
  WTF::StringImpl *v388;
  WTF::AtomStringImpl *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  WTF::AtomStringImpl *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __n128 v406;
  WTF::StringImpl *v407;
  WTF::AtomStringImpl *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::AtomStringImpl *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __n128 v425;
  WTF::StringImpl *v426;
  WTF::AtomStringImpl *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::AtomStringImpl *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  __n128 v444;
  WTF::StringImpl *v445;
  WTF::AtomStringImpl *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  WTF::AtomStringImpl *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __n128 v463;
  WTF::StringImpl *v464;
  WTF::AtomStringImpl *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  WTF::AtomStringImpl *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  __n128 v482;
  WTF::StringImpl *v483;
  WTF::AtomStringImpl *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  WTF::AtomStringImpl *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  __n128 v501;
  WTF::StringImpl *v502;
  WTF::AtomStringImpl *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  __n128 v522;
  WTF::AtomStringImpl *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  WTF::StringImpl *v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  void *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  void *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  void *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  void *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  void *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  void *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  void *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  void *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  void *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  void *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  void *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  void *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  void *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  void *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  void *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  unint64_t v747;
  void *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  void *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  void *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  void *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  void *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  void *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  void *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  void *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  void *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  void *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  void *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  void *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  void *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  unint64_t v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  void *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  void *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  void *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  unint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  void *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  void *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  void *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  void *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  void *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  void *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  WTF::StringImpl *v955;
  WTF::StringImpl *v956;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"debug", 5uLL, a4, a5, a6, a7, a8, &v956);
  v11 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v12 = v956;
LABEL_6:
    *(_DWORD *)v12 += 2;
    goto LABEL_7;
  }
  v12 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v12)
    goto LABEL_6;
LABEL_7:
  v956 = v12;
  v20 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncDebug, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v956;
  v956 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v11, v20, 0, v17, v18, v19, v21);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v539, v540, v541, v542, v543, v544, v545, v546);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"error", 5uLL, v25, v26, v27, v28, v29, &v956);
  v30 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v31 = v956;
LABEL_16:
    *(_DWORD *)v31 += 2;
    goto LABEL_17;
  }
  v31 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v31)
    goto LABEL_16;
LABEL_17:
  v956 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncError, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v956;
  v956 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v547, v548, v549, v550, v551, v552, v553, v554);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v30, v39, 0, v36, v37, v38, v40);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v555, v556, v557, v558, v559, v560, v561, v562);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"log", 3uLL, v44, v45, v46, v47, v48, &v956);
  v49 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v50 = v956;
LABEL_26:
    *(_DWORD *)v50 += 2;
    goto LABEL_27;
  }
  v50 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v50)
    goto LABEL_26;
LABEL_27:
  v956 = v50;
  v58 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncLog, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v60 = v956;
  v956 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v563, v564, v565, v566, v567, v568, v569, v570);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v49, v58, 0, v55, v56, v57, v59);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v571, v572, v573, v574, v575, v576, v577, v578);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"info", 4uLL, v63, v64, v65, v66, v67, &v956);
  v68 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v69 = v956;
LABEL_36:
    *(_DWORD *)v69 += 2;
    goto LABEL_37;
  }
  v69 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v69)
    goto LABEL_36;
LABEL_37:
  v956 = v69;
  v77 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncInfo, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v79 = v956;
  v956 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v579, v580, v581, v582, v583, v584, v585, v586);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v68, v77, 0, v74, v75, v76, v78);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v587, v588, v589, v590, v591, v592, v593, v594);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"warn", 4uLL, v82, v83, v84, v85, v86, &v956);
  v87 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v88 = v956;
LABEL_46:
    *(_DWORD *)v88 += 2;
    goto LABEL_47;
  }
  v88 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v88)
    goto LABEL_46;
LABEL_47:
  v956 = v88;
  v96 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncWarn, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v98 = v956;
  v956 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v595, v596, v597, v598, v599, v600, v601, v602);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v87, v96, 0, v93, v94, v95, v97);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v603, v604, v605, v606, v607, v608, v609, v610);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v106 = (char *)a2 + 41952;
  v107 = *((_QWORD *)a2 + 5244);
  v108 = *(WTF::StringImpl **)(v107 + 1016);
  if (!v108)
  {
    v955 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v955, 0, (uint64_t)JSC::consoleProtoFuncClear, 0, 0, 0);
    goto LABEL_62;
  }
  v109 = *(_DWORD *)v108 + 2;
  *(_DWORD *)v108 = v109;
  v955 = v108;
  if ((*((_BYTE *)v108 + 16) & 0x20) != 0)
  {
    v110 = *(WTF::StringImpl **)(v107 + 872);
    if (!v110)
      goto LABEL_57;
    v109 = *(_DWORD *)v110;
  }
  else
  {
    v110 = v108;
  }
  *(_DWORD *)v110 = v109 + 2;
LABEL_57:
  v956 = v110;
  v118 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncClear, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v120 = v956;
  v956 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v111, v112, v113, v114, v115, v116, v117);
      WTF::fastFree(v939, v940, v941, v942, v943, v944, v945, v946);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v108, v118, 0, v115, v116, v117, v119);
  if (*(_DWORD *)v108 == 2)
  {
    WTF::StringImpl::~StringImpl(v108, v121, v122, v123, v124, v125, v126, v127);
    WTF::fastFree(v611, v612, v613, v614, v615, v616, v617, v618);
  }
  else
  {
    *(_DWORD *)v108 -= 2;
  }
LABEL_62:
  WTF::AtomStringImpl::addLiteral((uint64_t)"dir", 3uLL, v123, v124, v125, v126, v127, &v956);
  v128 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v129 = v956;
LABEL_65:
    *(_DWORD *)v129 += 2;
    goto LABEL_66;
  }
  v129 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v129)
    goto LABEL_65;
LABEL_66:
  v956 = v129;
  v137 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncDir, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v139 = v956;
  v956 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v619, v620, v621, v622, v623, v624, v625, v626);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v128, v137, 0, v134, v135, v136, v138);
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v140, v141, v142, v143, v144, v145, v146);
      WTF::fastFree(v627, v628, v629, v630, v631, v632, v633, v634);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"dirxml", 6uLL, v142, v143, v144, v145, v146, &v956);
  v147 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v148 = v956;
LABEL_75:
    *(_DWORD *)v148 += 2;
    goto LABEL_76;
  }
  v148 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v148)
    goto LABEL_75;
LABEL_76:
  v956 = v148;
  v156 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncDirXML, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v158 = v956;
  v956 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
    {
      WTF::StringImpl::~StringImpl(v158, v149, v150, v151, v152, v153, v154, v155);
      WTF::fastFree(v635, v636, v637, v638, v639, v640, v641, v642);
    }
    else
    {
      *(_DWORD *)v158 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v147, v156, 0, v153, v154, v155, v157);
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v159, v160, v161, v162, v163, v164, v165);
      WTF::fastFree(v643, v644, v645, v646, v647, v648, v649, v650);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"table", 5uLL, v161, v162, v163, v164, v165, &v956);
  v166 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v167 = v956;
LABEL_85:
    *(_DWORD *)v167 += 2;
    goto LABEL_86;
  }
  v167 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v167)
    goto LABEL_85;
LABEL_86:
  v956 = v167;
  v175 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTable, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v177 = v956;
  v956 = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, v168, v169, v170, v171, v172, v173, v174);
      WTF::fastFree(v651, v652, v653, v654, v655, v656, v657, v658);
    }
    else
    {
      *(_DWORD *)v177 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v166, v175, 0, v172, v173, v174, v176);
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v659, v660, v661, v662, v663, v664, v665, v666);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trace", 5uLL, v180, v181, v182, v183, v184, &v956);
  v185 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v186 = v956;
LABEL_95:
    *(_DWORD *)v186 += 2;
    goto LABEL_96;
  }
  v186 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v186)
    goto LABEL_95;
LABEL_96:
  v956 = v186;
  v194 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTrace, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v196 = v956;
  v956 = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v187, v188, v189, v190, v191, v192, v193);
      WTF::fastFree(v667, v668, v669, v670, v671, v672, v673, v674);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v185, v194, 0, v191, v192, v193, v195);
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
    {
      WTF::StringImpl::~StringImpl(v185, v197, v198, v199, v200, v201, v202, v203);
      WTF::fastFree(v675, v676, v677, v678, v679, v680, v681, v682);
    }
    else
    {
      *(_DWORD *)v185 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"assert", 6uLL, v199, v200, v201, v202, v203, &v956);
  v204 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v205 = v956;
LABEL_105:
    *(_DWORD *)v205 += 2;
    goto LABEL_106;
  }
  v205 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v205)
    goto LABEL_105;
LABEL_106:
  v956 = v205;
  v213 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncAssert, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v215 = v956;
  v956 = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
    {
      WTF::StringImpl::~StringImpl(v215, v206, v207, v208, v209, v210, v211, v212);
      WTF::fastFree(v683, v684, v685, v686, v687, v688, v689, v690);
    }
    else
    {
      *(_DWORD *)v215 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v204, v213, 0, v210, v211, v212, v214);
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, v216, v217, v218, v219, v220, v221, v222);
      WTF::fastFree(v691, v692, v693, v694, v695, v696, v697, v698);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  v223 = *(_QWORD *)v106;
  v224 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 1088);
  if (!v224)
  {
    v955 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v955, 0, (uint64_t)JSC::consoleProtoFuncCount, 0, 0, 0);
    goto LABEL_121;
  }
  v225 = *(_DWORD *)v224 + 2;
  *(_DWORD *)v224 = v225;
  v955 = v224;
  if ((*((_BYTE *)v224 + 16) & 0x20) != 0)
  {
    v226 = *(WTF::StringImpl **)(v223 + 872);
    if (!v226)
      goto LABEL_116;
    v225 = *(_DWORD *)v226;
  }
  else
  {
    v226 = v224;
  }
  *(_DWORD *)v226 = v225 + 2;
LABEL_116:
  v956 = v226;
  v234 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncCount, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v236 = v956;
  v956 = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
    {
      WTF::StringImpl::~StringImpl(v236, v227, v228, v229, v230, v231, v232, v233);
      WTF::fastFree(v947, v948, v949, v950, v951, v952, v953, v954);
    }
    else
    {
      *(_DWORD *)v236 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v224, v234, 0, v231, v232, v233, v235);
  if (*(_DWORD *)v224 == 2)
  {
    WTF::StringImpl::~StringImpl(v224, v237, v238, v239, v240, v241, v242, v243);
    WTF::fastFree(v699, v700, v701, v702, v703, v704, v705, v706);
  }
  else
  {
    *(_DWORD *)v224 -= 2;
  }
LABEL_121:
  WTF::AtomStringImpl::addLiteral((uint64_t)"countReset", 0xAuLL, v239, v240, v241, v242, v243, &v956);
  v244 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v245 = v956;
LABEL_124:
    *(_DWORD *)v245 += 2;
    goto LABEL_125;
  }
  v245 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v245)
    goto LABEL_124;
LABEL_125:
  v956 = v245;
  v253 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncCountReset, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v255 = v956;
  v956 = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
    {
      WTF::StringImpl::~StringImpl(v255, v246, v247, v248, v249, v250, v251, v252);
      WTF::fastFree(v707, v708, v709, v710, v711, v712, v713, v714);
    }
    else
    {
      *(_DWORD *)v255 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v244, v253, 0, v250, v251, v252, v254);
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
    {
      WTF::StringImpl::~StringImpl(v244, v256, v257, v258, v259, v260, v261, v262);
      WTF::fastFree(v715, v716, v717, v718, v719, v720, v721, v722);
    }
    else
    {
      *(_DWORD *)v244 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"profile", 7uLL, v258, v259, v260, v261, v262, &v956);
  v263 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v264 = v956;
LABEL_134:
    *(_DWORD *)v264 += 2;
    goto LABEL_135;
  }
  v264 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v264)
    goto LABEL_134;
LABEL_135:
  v956 = v264;
  v272 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncProfile, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v274 = v956;
  v956 = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
    {
      WTF::StringImpl::~StringImpl(v274, v265, v266, v267, v268, v269, v270, v271);
      WTF::fastFree(v723, v724, v725, v726, v727, v728, v729, v730);
    }
    else
    {
      *(_DWORD *)v274 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v263, v272, 0, v269, v270, v271, v273);
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
    {
      WTF::StringImpl::~StringImpl(v263, v275, v276, v277, v278, v279, v280, v281);
      WTF::fastFree(v731, v732, v733, v734, v735, v736, v737, v738);
    }
    else
    {
      *(_DWORD *)v263 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"profileEnd", 0xAuLL, v277, v278, v279, v280, v281, &v956);
  v282 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v283 = v956;
LABEL_144:
    *(_DWORD *)v283 += 2;
    goto LABEL_145;
  }
  v283 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v283)
    goto LABEL_144;
LABEL_145:
  v956 = v283;
  v291 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncProfileEnd, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v293 = v956;
  v956 = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
    {
      WTF::StringImpl::~StringImpl(v293, v284, v285, v286, v287, v288, v289, v290);
      WTF::fastFree(v739, v740, v741, v742, v743, v744, v745, v746);
    }
    else
    {
      *(_DWORD *)v293 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v282, v291, 0, v288, v289, v290, v292);
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
    {
      WTF::StringImpl::~StringImpl(v282, v294, v295, v296, v297, v298, v299, v300);
      WTF::fastFree(v747, v748, v749, v750, v751, v752, v753, v754);
    }
    else
    {
      *(_DWORD *)v282 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"time", 4uLL, v296, v297, v298, v299, v300, &v956);
  v301 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v302 = v956;
LABEL_154:
    *(_DWORD *)v302 += 2;
    goto LABEL_155;
  }
  v302 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v302)
    goto LABEL_154;
LABEL_155:
  v956 = v302;
  v310 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTime, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v312 = v956;
  v956 = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
    {
      WTF::StringImpl::~StringImpl(v312, v303, v304, v305, v306, v307, v308, v309);
      WTF::fastFree(v755, v756, v757, v758, v759, v760, v761, v762);
    }
    else
    {
      *(_DWORD *)v312 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v301, v310, 0, v307, v308, v309, v311);
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, v313, v314, v315, v316, v317, v318, v319);
      WTF::fastFree(v763, v764, v765, v766, v767, v768, v769, v770);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeLog", 7uLL, v315, v316, v317, v318, v319, &v956);
  v320 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v321 = v956;
LABEL_164:
    *(_DWORD *)v321 += 2;
    goto LABEL_165;
  }
  v321 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v321)
    goto LABEL_164;
LABEL_165:
  v956 = v321;
  v329 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTimeLog, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v331 = v956;
  v956 = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      WTF::StringImpl::~StringImpl(v331, v322, v323, v324, v325, v326, v327, v328);
      WTF::fastFree(v771, v772, v773, v774, v775, v776, v777, v778);
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v320, v329, 0, v326, v327, v328, v330);
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
    {
      WTF::StringImpl::~StringImpl(v320, v332, v333, v334, v335, v336, v337, v338);
      WTF::fastFree(v779, v780, v781, v782, v783, v784, v785, v786);
    }
    else
    {
      *(_DWORD *)v320 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeEnd", 7uLL, v334, v335, v336, v337, v338, &v956);
  v339 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v340 = v956;
LABEL_174:
    *(_DWORD *)v340 += 2;
    goto LABEL_175;
  }
  v340 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v340)
    goto LABEL_174;
LABEL_175:
  v956 = v340;
  v348 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTimeEnd, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v350 = v956;
  v956 = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
    {
      WTF::StringImpl::~StringImpl(v350, v341, v342, v343, v344, v345, v346, v347);
      WTF::fastFree(v787, v788, v789, v790, v791, v792, v793, v794);
    }
    else
    {
      *(_DWORD *)v350 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v339, v348, 0, v345, v346, v347, v349);
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
    {
      WTF::StringImpl::~StringImpl(v339, v351, v352, v353, v354, v355, v356, v357);
      WTF::fastFree(v795, v796, v797, v798, v799, v800, v801, v802);
    }
    else
    {
      *(_DWORD *)v339 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"timeStamp", 9uLL, v353, v354, v355, v356, v357, &v956);
  v358 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v359 = v956;
LABEL_184:
    *(_DWORD *)v359 += 2;
    goto LABEL_185;
  }
  v359 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v359)
    goto LABEL_184;
LABEL_185:
  v956 = v359;
  v367 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTimeStamp, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v369 = v956;
  v956 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
    {
      WTF::StringImpl::~StringImpl(v369, v360, v361, v362, v363, v364, v365, v366);
      WTF::fastFree(v803, v804, v805, v806, v807, v808, v809, v810);
    }
    else
    {
      *(_DWORD *)v369 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v358, v367, 0, v364, v365, v366, v368);
  if (v358)
  {
    if (*(_DWORD *)v358 == 2)
    {
      WTF::StringImpl::~StringImpl(v358, v370, v371, v372, v373, v374, v375, v376);
      WTF::fastFree(v811, v812, v813, v814, v815, v816, v817, v818);
    }
    else
    {
      *(_DWORD *)v358 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"takeHeapSnapshot", 0x10uLL, v372, v373, v374, v375, v376, &v956);
  v377 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v378 = v956;
LABEL_194:
    *(_DWORD *)v378 += 2;
    goto LABEL_195;
  }
  v378 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v378)
    goto LABEL_194;
LABEL_195:
  v956 = v378;
  v386 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncTakeHeapSnapshot, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v388 = v956;
  v956 = 0;
  if (v388)
  {
    if (*(_DWORD *)v388 == 2)
    {
      WTF::StringImpl::~StringImpl(v388, v379, v380, v381, v382, v383, v384, v385);
      WTF::fastFree(v819, v820, v821, v822, v823, v824, v825, v826);
    }
    else
    {
      *(_DWORD *)v388 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v377, v386, 0, v383, v384, v385, v387);
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
    {
      WTF::StringImpl::~StringImpl(v377, v389, v390, v391, v392, v393, v394, v395);
      WTF::fastFree(v827, v828, v829, v830, v831, v832, v833, v834);
    }
    else
    {
      *(_DWORD *)v377 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"group", 5uLL, v391, v392, v393, v394, v395, &v956);
  v396 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v397 = v956;
LABEL_204:
    *(_DWORD *)v397 += 2;
    goto LABEL_205;
  }
  v397 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v397)
    goto LABEL_204;
LABEL_205:
  v956 = v397;
  v405 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncGroup, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v407 = v956;
  v956 = 0;
  if (v407)
  {
    if (*(_DWORD *)v407 == 2)
    {
      WTF::StringImpl::~StringImpl(v407, v398, v399, v400, v401, v402, v403, v404);
      WTF::fastFree(v835, v836, v837, v838, v839, v840, v841, v842);
    }
    else
    {
      *(_DWORD *)v407 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v396, v405, 0, v402, v403, v404, v406);
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
    {
      WTF::StringImpl::~StringImpl(v396, v408, v409, v410, v411, v412, v413, v414);
      WTF::fastFree(v843, v844, v845, v846, v847, v848, v849, v850);
    }
    else
    {
      *(_DWORD *)v396 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"groupCollapsed", 0xEuLL, v410, v411, v412, v413, v414, &v956);
  v415 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v416 = v956;
LABEL_214:
    *(_DWORD *)v416 += 2;
    goto LABEL_215;
  }
  v416 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v416)
    goto LABEL_214;
LABEL_215:
  v956 = v416;
  v424 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncGroupCollapsed, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v426 = v956;
  v956 = 0;
  if (v426)
  {
    if (*(_DWORD *)v426 == 2)
    {
      WTF::StringImpl::~StringImpl(v426, v417, v418, v419, v420, v421, v422, v423);
      WTF::fastFree(v851, v852, v853, v854, v855, v856, v857, v858);
    }
    else
    {
      *(_DWORD *)v426 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v415, v424, 0, v421, v422, v423, v425);
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
    {
      WTF::StringImpl::~StringImpl(v415, v427, v428, v429, v430, v431, v432, v433);
      WTF::fastFree(v859, v860, v861, v862, v863, v864, v865, v866);
    }
    else
    {
      *(_DWORD *)v415 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"groupEnd", 8uLL, v429, v430, v431, v432, v433, &v956);
  v434 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v435 = v956;
LABEL_224:
    *(_DWORD *)v435 += 2;
    goto LABEL_225;
  }
  v435 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v435)
    goto LABEL_224;
LABEL_225:
  v956 = v435;
  v443 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncGroupEnd, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v445 = v956;
  v956 = 0;
  if (v445)
  {
    if (*(_DWORD *)v445 == 2)
    {
      WTF::StringImpl::~StringImpl(v445, v436, v437, v438, v439, v440, v441, v442);
      WTF::fastFree(v867, v868, v869, v870, v871, v872, v873, v874);
    }
    else
    {
      *(_DWORD *)v445 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v434, v443, 0, v440, v441, v442, v444);
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
    {
      WTF::StringImpl::~StringImpl(v434, v446, v447, v448, v449, v450, v451, v452);
      WTF::fastFree(v875, v876, v877, v878, v879, v880, v881, v882);
    }
    else
    {
      *(_DWORD *)v434 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"record", 6uLL, v448, v449, v450, v451, v452, &v956);
  v453 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v454 = v956;
LABEL_234:
    *(_DWORD *)v454 += 2;
    goto LABEL_235;
  }
  v454 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v454)
    goto LABEL_234;
LABEL_235:
  v956 = v454;
  v462 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncRecord, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v464 = v956;
  v956 = 0;
  if (v464)
  {
    if (*(_DWORD *)v464 == 2)
    {
      WTF::StringImpl::~StringImpl(v464, v455, v456, v457, v458, v459, v460, v461);
      WTF::fastFree(v883, v884, v885, v886, v887, v888, v889, v890);
    }
    else
    {
      *(_DWORD *)v464 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v453, v462, 0, v459, v460, v461, v463);
  if (v453)
  {
    if (*(_DWORD *)v453 == 2)
    {
      WTF::StringImpl::~StringImpl(v453, v465, v466, v467, v468, v469, v470, v471);
      WTF::fastFree(v891, v892, v893, v894, v895, v896, v897, v898);
    }
    else
    {
      *(_DWORD *)v453 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"recordEnd", 9uLL, v467, v468, v469, v470, v471, &v956);
  v472 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v473 = v956;
LABEL_244:
    *(_DWORD *)v473 += 2;
    goto LABEL_245;
  }
  v473 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v473)
    goto LABEL_244;
LABEL_245:
  v956 = v473;
  v481 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncRecordEnd, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v483 = v956;
  v956 = 0;
  if (v483)
  {
    if (*(_DWORD *)v483 == 2)
    {
      WTF::StringImpl::~StringImpl(v483, v474, v475, v476, v477, v478, v479, v480);
      WTF::fastFree(v899, v900, v901, v902, v903, v904, v905, v906);
    }
    else
    {
      *(_DWORD *)v483 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v472, v481, 0, v478, v479, v480, v482);
  if (v472)
  {
    if (*(_DWORD *)v472 == 2)
    {
      WTF::StringImpl::~StringImpl(v472, v484, v485, v486, v487, v488, v489, v490);
      WTF::fastFree(v907, v908, v909, v910, v911, v912, v913, v914);
    }
    else
    {
      *(_DWORD *)v472 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"screenshot", 0xAuLL, v486, v487, v488, v489, v490, &v956);
  v491 = v956;
  if (v956 && (*((_BYTE *)v956 + 16) & 0x20) == 0)
  {
    v492 = v956;
LABEL_254:
    *(_DWORD *)v492 += 2;
    goto LABEL_255;
  }
  v492 = *(WTF::StringImpl **)(*(_QWORD *)v106 + 872);
  if (v492)
    goto LABEL_254;
LABEL_255:
  v956 = v492;
  v500 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v956, (uint64_t)JSC::consoleProtoFuncScreenshot, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v502 = v956;
  v956 = 0;
  if (v502)
  {
    if (*(_DWORD *)v502 == 2)
    {
      WTF::StringImpl::~StringImpl(v502, v493, v494, v495, v496, v497, v498, v499);
      WTF::fastFree(v915, v916, v917, v918, v919, v920, v921, v922);
    }
    else
    {
      *(_DWORD *)v502 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v491, v500, 0, v497, v498, v499, v501);
  if (v491)
  {
    if (*(_DWORD *)v491 == 2)
    {
      WTF::StringImpl::~StringImpl(v491, v503, v504, v505, v506, v507, v508, v509);
      WTF::fastFree(v923, v924, v925, v926, v927, v928, v929, v930);
    }
    else
    {
      *(_DWORD *)v491 -= 2;
    }
  }
  v510 = *(_QWORD *)(*(_QWORD *)v106 + 2776);
  v511 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v511 = 0x700000002;
  *(_QWORD *)(v511 + 8) = "console";
  *(_DWORD *)(v511 + 16) = 4;
  v956 = (WTF::StringImpl *)v511;
  v518 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v956, v512, v513, v514, v515, v516, v517);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v510, v518, 6, v519, v520, v521, v522);
  v530 = v956;
  v956 = 0;
  if (v530)
  {
    if (*(_DWORD *)v530 == 2)
    {
      WTF::StringImpl::~StringImpl(v530, v523, v524, v525, v526, v527, v528, v529);
      WTF::fastFree(v931, v932, v933, v934, v935, v936, v937, v938);
    }
    else
    {
      *(_DWORD *)v530 -= 2;
    }
  }
}

uint64_t JSC::consoleProtoFuncDebug(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::consoleLogWithLevel(this, a2, 3, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::consoleProtoFuncError(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::consoleLogWithLevel(this, a2, 2, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::consoleProtoFuncLog(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::consoleLogWithLevel(this, a2, 0, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::consoleProtoFuncInfo(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::consoleLogWithLevel(this, a2, 4, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::consoleProtoFuncWarn(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::consoleLogWithLevel(this, a2, 1, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::consoleProtoFuncClear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::JSGlobalObject *v9;
  unsigned int v10;
  JSC::ConsoleClient *v11;
  unsigned int v12;
  unsigned int v13;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    v9 = this;
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(JSC::ConsoleClient **)(v8 + 8);
    if (v11)
      JSC::ConsoleClient::clear(v11, v9);
    do
    {
      v12 = __ldaxr((unsigned int *)v8);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v8));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, v9, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncDir(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (!v8)
    return 10;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v11 = *(_QWORD *)(v8 + 8);
  if (v11)
  {
    Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
    v12 = v16;
    if (*((_DWORD *)v16 + 7))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 1, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (!v12)
        goto LABEL_9;
    }
    else
    {
      v16 = 0;
    }
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  do
  {
LABEL_9:
    v13 = __ldaxr((unsigned int *)v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v8));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncDirXML(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (!v8)
    return 10;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v11 = *(_QWORD *)(v8 + 8);
  if (v11)
  {
    Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
    v12 = v16;
    if (*((_DWORD *)v16 + 7))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 2, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (!v12)
        goto LABEL_9;
    }
    else
    {
      v16 = 0;
    }
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  do
  {
LABEL_9:
    v13 = __ldaxr((unsigned int *)v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v8));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncTable(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (!v8)
    return 10;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v11 = *(_QWORD *)(v8 + 8);
  if (v11)
  {
    Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
    v12 = v16;
    if (*((_DWORD *)v16 + 7))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 3, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (!v12)
        goto LABEL_9;
    }
    else
    {
      v16 = 0;
    }
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  do
  {
LABEL_9:
    v13 = __ldaxr((unsigned int *)v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v8));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)v8);
    WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncTrace(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 4, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncAssert(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  double v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int *v23;
  int v24;
  BOOL v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  Inspector *v31;
  uint64_t v32;
  Inspector::ScriptArguments *v33;
  JSC *v34;
  JSC::JSGlobalObject *v35;
  unint64_t v36;
  unint64_t v37;
  Inspector::ScriptArguments *v38;

  v8 = this;
  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v10 = *((_QWORD *)v8 + 7);
  do
    v11 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v11 + 1, (unsigned int *)v9));
  if (!*(_QWORD *)(v9 + 8))
    goto LABEL_12;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
    goto LABEL_9;
  }
  v12 = *((_QWORD *)a2 + 6);
  if (v12 >= 0xFFFE000000000000)
  {
    v21 = (_DWORD)v12 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v12 & 0xFFFE000000000002) != 0)
    {
LABEL_9:
      v14 = v12 == 7;
      goto LABEL_10;
    }
    v19 = *(unsigned __int8 *)(v12 + 5);
    if (v19 == 2)
    {
      v22 = *(_QWORD *)(v12 + 8);
      v23 = (int *)(v12 + 16);
      if ((v22 & 1) == 0)
        v23 = (int *)(v22 + 4);
      v24 = *v23;
    }
    else
    {
      if (v19 != 3)
      {
        v20 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v20 + 10) & 1) == 0)
        {
          v14 = 1;
          goto LABEL_10;
        }
        v21 = *(_QWORD *)(v20 + 40) == (_QWORD)v8;
        goto LABEL_22;
      }
      v24 = *(_DWORD *)(v12 + 8);
    }
    v21 = v24 == 0;
LABEL_22:
    v14 = !v21;
    goto LABEL_10;
  }
  v25 = v13 <= 0.0;
  v26 = v13 < 0.0;
  v14 = !v25 || v26;
LABEL_10:
  if (*(_DWORD *)(v10 + 80))
  {
    v27 = *(_DWORD *)(v10 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
    {
      v35 = a2;
      v37 = v9;
      v34 = v8;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v8 = v34;
      a2 = v35;
      v9 = v37;
    }
    v28 = *(_QWORD *)(v10 + 16);
    v29 = v28 == 0;
    if (v28)
      v30 = 1;
    else
      v30 = v14;
    if (v29)
      v15 = 10;
    else
      v15 = 0;
    if ((v30 & 1) != 0)
      goto LABEL_13;
    v31 = v8;
    v36 = v9;
    v32 = *(_QWORD *)(v9 + 8);
    goto LABEL_44;
  }
  if (!v14)
  {
    v32 = *(_QWORD *)(v9 + 8);
    v31 = v8;
    v36 = v9;
LABEL_44:
    Inspector::createScriptArguments(v31, a2, (JSC::CallFrame *)1, a4, a5, a6, a7, a8, (uint64_t *)&v38);
    JSC::ConsoleClient::assertion(v32, (uint64_t)v31, (uint64_t)&v38);
    v33 = v38;
    v38 = 0;
    if (v33)
      WTF::RefCounted<Inspector::ScriptArguments>::deref(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v15 = 10;
    v9 = v36;
    goto LABEL_13;
  }
LABEL_12:
  v15 = 10;
  do
  {
LABEL_13:
    v16 = __ldaxr((unsigned int *)v9);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v9));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v15;
}

uint64_t JSC::consoleProtoFuncCount(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  WTF::StringImpl *v28;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v10 = a2;
  v12 = *((_QWORD *)this + 7);
  do
    v13 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v13 + 1, (unsigned int *)v9));
  if (*(_QWORD *)(v9 + 8))
  {
    JSC::valueOrDefaultLabelString((int **)&v28, this, a2, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_6;
    v27 = *(_DWORD *)(v12 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v10, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v14 = 0;
    }
    else
    {
LABEL_6:
      (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 24))(*(_QWORD *)(v9 + 8), this, &v28);
      v14 = 10;
    }
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v14 = 10;
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v9);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v9));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
  return v14;
}

uint64_t JSC::consoleProtoFuncCountReset(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  WTF::StringImpl *v28;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v10 = a2;
  v12 = *((_QWORD *)this + 7);
  do
    v13 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v13 + 1, (unsigned int *)v9));
  if (*(_QWORD *)(v9 + 8))
  {
    JSC::valueOrDefaultLabelString((int **)&v28, this, a2, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_6;
    v27 = *(_DWORD *)(v12 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v10, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v14 = 0;
    }
    else
    {
LABEL_6:
      (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 32))(*(_QWORD *)(v9 + 8), this, &v28);
      v14 = 10;
    }
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v14 = 10;
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v9);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v9));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
  return v14;
}

uint64_t JSC::consoleProtoFuncProfile(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v11 = *((_QWORD *)this + 7);
  do
    v12 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v12 + 1, (unsigned int *)v9));
  v13 = *(_QWORD *)(v9 + 8);
  if (!v13)
    goto LABEL_9;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *((_QWORD *)a2 + 6);
    v40 = (WTF::StringImpl *)v16;
    if ((v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v39 = 0;
      goto LABEL_18;
    }
    if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this, a3, a4, a5, a6, a7, a8, (int **)&v39);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_19;
LABEL_18:
      v38 = *(_DWORD *)(v11 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v15 = 0;
      }
      else
      {
LABEL_19:
        (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 40))(*(_QWORD *)(v9 + 8), this, &v39);
        v15 = 10;
      }
      v18 = v39;
      v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      goto LABEL_23;
    }
    v17 = *(int **)(v16 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_17;
    }
    else if (!v17)
    {
LABEL_17:
      v39 = (WTF::StringImpl *)v17;
      goto LABEL_18;
    }
    *v17 += 2;
    goto LABEL_17;
  }
  v40 = 0;
  (*(void (**)(uint64_t, JSC *, WTF::StringImpl **))(*(_QWORD *)v13 + 40))(v13, this, &v40);
  v14 = v40;
  v40 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_9:
  v15 = 10;
  do
  {
LABEL_23:
    v19 = __ldaxr((unsigned int *)v9);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v9));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v15;
}

uint64_t JSC::consoleProtoFuncProfileEnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v11 = *((_QWORD *)this + 7);
  do
    v12 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v12 + 1, (unsigned int *)v9));
  v13 = *(_QWORD *)(v9 + 8);
  if (!v13)
    goto LABEL_9;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *((_QWORD *)a2 + 6);
    v40 = (WTF::StringImpl *)v16;
    if ((v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v39 = 0;
      goto LABEL_18;
    }
    if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this, a3, a4, a5, a6, a7, a8, (int **)&v39);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_19;
LABEL_18:
      v38 = *(_DWORD *)(v11 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v15 = 0;
      }
      else
      {
LABEL_19:
        (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 48))(*(_QWORD *)(v9 + 8), this, &v39);
        v15 = 10;
      }
      v18 = v39;
      v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      goto LABEL_23;
    }
    v17 = *(int **)(v16 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_17;
    }
    else if (!v17)
    {
LABEL_17:
      v39 = (WTF::StringImpl *)v17;
      goto LABEL_18;
    }
    *v17 += 2;
    goto LABEL_17;
  }
  v40 = 0;
  (*(void (**)(uint64_t, JSC *, WTF::StringImpl **))(*(_QWORD *)v13 + 48))(v13, this, &v40);
  v14 = v40;
  v40 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_9:
  v15 = 10;
  do
  {
LABEL_23:
    v19 = __ldaxr((unsigned int *)v9);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v9));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v15;
}

uint64_t JSC::consoleProtoFuncTime(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  WTF::StringImpl *v28;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v10 = a2;
  v12 = *((_QWORD *)this + 7);
  do
    v13 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v13 + 1, (unsigned int *)v9));
  if (*(_QWORD *)(v9 + 8))
  {
    JSC::valueOrDefaultLabelString((int **)&v28, this, a2, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_6;
    v27 = *(_DWORD *)(v12 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v10, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v14 = 0;
    }
    else
    {
LABEL_6:
      (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 64))(*(_QWORD *)(v9 + 8), this, &v28);
      v14 = 10;
    }
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v14 = 10;
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v9);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v9));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
  return v14;
}

uint64_t JSC::consoleProtoFuncTimeLog(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  Inspector::ScriptArguments *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v29;
  Inspector::ScriptArguments *v30;
  WTF::StringImpl *v31;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v12 = *((_QWORD *)this + 7);
  do
    v13 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v13 + 1, (unsigned int *)v9));
  if (*(_QWORD *)(v9 + 8))
  {
    JSC::valueOrDefaultLabelString((int **)&v31, this, a2, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_6;
    v29 = *(_DWORD *)(v12 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v16 = 0;
    }
    else
    {
LABEL_6:
      v14 = *(_QWORD *)(v9 + 8);
      Inspector::createScriptArguments(this, a2, (JSC::CallFrame *)1, a4, a5, a6, a7, a8, (uint64_t *)&v30);
      (*(void (**)(uint64_t, JSC *, WTF::StringImpl **, Inspector::ScriptArguments **))(*(_QWORD *)v14 + 72))(v14, this, &v31, &v30);
      v15 = v30;
      v30 = 0;
      if (v15)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = 10;
    }
    v17 = v31;
    v31 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  else
  {
    v16 = 10;
  }
  do
  {
    v26 = __ldaxr((unsigned int *)v9);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)v9));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v16;
}

uint64_t JSC::consoleProtoFuncTimeEnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  WTF::StringImpl *v28;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v10 = a2;
  v12 = *((_QWORD *)this + 7);
  do
    v13 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v13 + 1, (unsigned int *)v9));
  if (*(_QWORD *)(v9 + 8))
  {
    JSC::valueOrDefaultLabelString((int **)&v28, this, a2, a4, a5, a6, a7, a8, a9);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_6;
    v27 = *(_DWORD *)(v12 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v10, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      v14 = 0;
    }
    else
    {
LABEL_6:
      (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 80))(*(_QWORD *)(v9 + 8), this, &v28);
      v14 = 10;
    }
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    v14 = 10;
  }
  do
  {
    v24 = __ldaxr((unsigned int *)v9);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v9));
  if (!v25)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
  return v14;
}

uint64_t JSC::consoleProtoFuncTimeStamp(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 88))(v11, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncTakeHeapSnapshot(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v9 = *((_QWORD *)this + 401);
  if (!v9)
    return 10;
  v11 = *((_QWORD *)this + 7);
  do
    v12 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v12 + 1, (unsigned int *)v9));
  v13 = *(_QWORD *)(v9 + 8);
  if (!v13)
    goto LABEL_9;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *((_QWORD *)a2 + 6);
    v40 = (WTF::StringImpl *)v16;
    if ((v16 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v39 = 0;
      goto LABEL_18;
    }
    if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this, a3, a4, a5, a6, a7, a8, (int **)&v39);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_19;
LABEL_18:
      v38 = *(_DWORD *)(v11 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v15 = 0;
      }
      else
      {
LABEL_19:
        (*(void (**)(_QWORD, JSC *, WTF::StringImpl **))(**(_QWORD **)(v9 + 8) + 56))(*(_QWORD *)(v9 + 8), this, &v39);
        v15 = 10;
      }
      v18 = v39;
      v39 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      goto LABEL_23;
    }
    v17 = *(int **)(v16 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_17;
    }
    else if (!v17)
    {
LABEL_17:
      v39 = (WTF::StringImpl *)v17;
      goto LABEL_18;
    }
    *v17 += 2;
    goto LABEL_17;
  }
  v40 = 0;
  (*(void (**)(uint64_t, JSC *, WTF::StringImpl **))(*(_QWORD *)v13 + 56))(v13, this, &v40);
  v14 = v40;
  v40 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_9:
  v15 = 10;
  do
  {
LABEL_23:
    v19 = __ldaxr((unsigned int *)v9);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v9));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return v15;
}

uint64_t JSC::consoleProtoFuncGroup(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 5, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncGroupCollapsed(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 6, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncGroupEnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, uint64_t, _QWORD, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 16))(v11, 7, 0, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncRecord(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 96))(v11, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncRecordEnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 104))(v11, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::consoleProtoFuncScreenshot(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  Inspector::ScriptArguments *v12;
  unsigned int v13;
  unsigned int v14;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v10 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v10 + 1, (unsigned int *)v8));
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      (*(void (**)(uint64_t, JSC *, Inspector::ScriptArguments **))(*(_QWORD *)v11 + 112))(v11, this, &v16);
      v12 = v16;
      v16 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v13 = __ldaxr((unsigned int *)v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v8));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return 10;
}

uint64_t JSC::construct(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[3];
  JSC::VM *v15;

  v15 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v14[0]) = 0;
LABEL_9:
    JSC::throwTypeError(a1, &v15, a4, a5);
    return 0;
  }
  if (*(_BYTE *)(a2 + 5) == 26)
    JSC::JSFunction::getConstructData(v14, (uint64_t *)a2, (JSC::JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                           + 0x40))(v14, a2);
  if (!LOBYTE(v14[0]))
    goto LABEL_9;
  return JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)a2, (unsigned __int8 *)v14, a3, (WTF *)a2, v10, v11, v12);
}

uint64_t JSC::construct(unint64_t a1, uint64_t a2, WTF *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  JSC::VM *v17;

  v17 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v16[0]) = 0;
LABEL_9:
    JSC::throwTypeError(a1, &v17, a5, a6);
    return 0;
  }
  if (*(_BYTE *)(a2 + 5) == 26)
    JSC::JSFunction::getConstructData(v16, (uint64_t *)a2, (JSC::JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                           + 0x40))(v16, a2);
  if (!LOBYTE(v16[0]))
    goto LABEL_9;
  return JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)a2, (unsigned __int8 *)v16, a4, a3, v12, v13, v14);
}

uint64_t JSC::construct(uint64_t a1, WTF::Thread *a2, unsigned __int8 *a3, uint64_t a4, WTF *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::profiledConstruct(uint64_t a1, unsigned int a2, WTF::Thread *a3, unsigned __int8 *a4, uint64_t a5, WTF *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::Thread *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  WTF *v26;

  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 90568);
  v10 = a1;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      return JSC::Interpreter::executeConstruct((JSC::VM *)(v8 + 90560), a3, a4, a5, a6, (uint64_t)a6, a7, a8);
  }
  v11 = *(_QWORD *)(v10 + 2016);
  if (!v11)
    return JSC::Interpreter::executeConstruct((JSC::VM *)(v8 + 90560), a3, a4, a5, a6, (uint64_t)a6, a7, a8);
  v13 = *(_QWORD *)(v11 + 208);
  if (!v13)
    return JSC::Interpreter::executeConstruct((JSC::VM *)(v8 + 90560), a3, a4, a5, a6, (uint64_t)a6, a7, a8);
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
  {
    v8 = *(_QWORD *)(a1 + 56);
    a5 = v25;
    a6 = v26;
    a3 = v23;
    a4 = v24;
    return JSC::Interpreter::executeConstruct((JSC::VM *)(v8 + 90560), a3, a4, a5, a6, (uint64_t)a6, a7, a8);
  }
  v14 = v10;
  JSC::Debugger::willEvaluateScript(*(JSC::Debugger **)(v10 + 2016));
  v16 = v15;
  v20 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), v23, v24, v25, v26, v17, v18, v19);
  v21 = *(_QWORD *)(v14 + 2016);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 208);
    if (v22)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v22 + 32))(v22, a2, v16);
  }
  return v20;
}

void JSC::ControlFlowProfiler::~ControlFlowProfiler(JSC::ControlFlowProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 16 * v9;
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = *(_QWORD *)this;
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = *(_QWORD *)this;
        while ((*(_DWORD *)v11 + 1) <= 1)
        {
          v11 += 16;
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            break;
          }
        }
      }
      if (v8)
        goto LABEL_9;
      goto LABEL_13;
    }
    v11 = v8 + 16 * v9;
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = v8 + 16 * v9;
  if (v8)
  {
LABEL_9:
    v13 = v8 + 16 * *(unsigned int *)(v8 - 4);
    goto LABEL_14;
  }
LABEL_13:
  v13 = 0;
LABEL_14:
  if (v13 != v11)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v15 = *(_QWORD *)(v11 + 8);
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        v17 = v15 + 16 * v16;
        if (*(_DWORD *)(v15 - 12))
        {
          v18 = *(_QWORD *)(v11 + 8);
          if ((_DWORD)v16)
          {
            v19 = 16 * v16;
            v18 = *(_QWORD *)(v11 + 8);
            while (1)
            {
              v20 = *(_DWORD *)(v18 + 4);
              if ((*(_DWORD *)v18 != -3 || v20 != -3) && (*(_DWORD *)v18 != -2 || v20 != -2))
                break;
              v18 += 16;
              v19 -= 16;
              if (!v19)
              {
                v18 = v17;
                goto LABEL_31;
              }
            }
          }
          goto LABEL_31;
        }
        v18 = v15 + 16 * v16;
      }
      else
      {
        v18 = 0;
        v16 = 0;
      }
      v17 = v15 + 16 * v16;
      if (!v15)
      {
        v23 = 0;
        goto LABEL_36;
      }
LABEL_31:
      v23 = v15 + 16 * *(unsigned int *)(v15 - 4);
LABEL_36:
      while (v18 != v23)
      {
        v24 = *(_QWORD *)(v18 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v25)
          {
            *(_QWORD *)(v24 + 8) = 0;
            *(_DWORD *)(v24 + 16) = 0;
            WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
          }
          v26 = *(_QWORD *)(StatusReg + 752);
          if (v26)
          {
            if (!(v24 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v24 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v24)) & 1) != 0)
            {
LABEL_43:
              v27 = *(unsigned int *)(v26 + 8000);
              if (v27 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v26, v24, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v26 + 8 * v27) = v24 | 0x5000000000000;
                *(_DWORD *)(v26 + 8000) = v27 + 1;
              }
              goto LABEL_45;
            }
            if (v24 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v24 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v24 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_43;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, v24, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v24, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_45:
        v28 = v18 + 16;
        v18 = v17;
        if (v28 != v17)
        {
          v18 = v28;
          while (1)
          {
            v29 = *(_DWORD *)(v18 + 4);
            if ((*(_DWORD *)v18 != -3 || v29 != -3) && (*(_DWORD *)v18 != -2 || v29 != -2))
              break;
            v18 += 16;
            if (v18 == v17)
            {
              v18 = v17;
              break;
            }
          }
        }
      }
      v32 = v11 + 16;
      v11 = v10;
      if (v32 != v10)
      {
        v11 = v32;
        while ((*(_DWORD *)v11 + 1) <= 1)
        {
          v11 += 16;
          if (v11 == v10)
          {
            v11 = v10;
            break;
          }
        }
      }
    }
    while (v11 != v13);
  }
  v33 = *((_QWORD *)this + 2);
  if (v33)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (_QWORD *)(v34 + 8);
      do
      {
        if (*((_DWORD *)v36 - 2) != -1)
        {
          if (*v36)
            WTF::fastFree(*v36 - 16, a2, a3, a4, a5, a6, a7, a8);
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashMap<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v16)
      {
        if ((v14 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v13 - 4);
        v34 = 0;
        v35 = v13 + 16 * v28;
        goto LABEL_34;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v15;
      v20 = v13 + 16 * v19;
      v21 = *(_DWORD *)v20;
      ++v23;
    }
    while (*(_DWORD *)v20);
    if (v22)
    {
      *(_DWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v20 = v22;
    }
  }
  *(_DWORD *)v20 = v16;
  v24 = *a3;
  *a3 = 0;
  v25 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v24;
  if (v25)
    WTF::fastFree(v25 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_25;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_30:
      v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v33, (int *)v20);
      v29 = *a1;
      if (*a1)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_33;
    }
LABEL_25:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_30;
  }
LABEL_33:
  v35 = v29 + 16 * v32;
  v34 = 1;
LABEL_34:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v34;
}

uint64_t *WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t *v15;
  int v16;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::BasicBlockKey,WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>>,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BasicBlockKey>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = a2[1];
  v10 = (*a2 + v9 + 1) & v8;
  v11 = (uint64_t *)(v6 + 16 * v10);
  v12 = *(_DWORD *)v11;
  v13 = *((_DWORD *)v11 + 1);
  if (*(_DWORD *)v11 != -3 || v13 != -3)
  {
    v15 = 0;
    v16 = 1;
    result = (uint64_t *)4294967294;
    do
    {
      if (v12 == *a2 && v13 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v27 = v6 + 16 * v26;
        goto LABEL_43;
      }
      if (v13 == -2 && v12 == -2)
        v15 = v11;
      v10 = (v10 + v16) & v8;
      v11 = (uint64_t *)(v6 + 16 * v10);
      v12 = *(_DWORD *)v11;
      v13 = *((_DWORD *)v11 + 1);
      ++v16;
    }
    while (*(_DWORD *)v11 != -3 || v13 != -3);
    if (v15)
    {
      *v15 = 0xFFFFFFFDFFFFFFFDLL;
      v15[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v11 = v15;
    }
  }
  *v11 = *(_QWORD *)a2;
  v11[1] = 0;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_32;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_37:
      result = (uint64_t *)WTF::HashTable<JSC::BasicBlockKey,WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>>,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BasicBlockKey>>::rehash(v4, v25, (int *)v11);
      v11 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_40;
    }
LABEL_32:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_37;
  }
LABEL_40:
  v27 = v21 + 16 * v24;
  v28 = 1;
LABEL_43:
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

void JSC::ControlFlowProfiler::dumpData(JSC::ControlFlowProfiler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  const void **v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t StatusReg;
  void *ptr;
  int v39;
  unsigned int v40;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = v1 + 16 * v2;
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = v1 + 16 * v2;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)this;
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = *(_QWORD *)this;
    while ((*(_DWORD *)v4 + 1) <= 1)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += 16 * *(unsigned int *)(v1 - 4);
  if (v1 != v4)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v34 = v1;
    v35 = v3;
    do
    {
      WTF::dataLog<char [11],unsigned int,char [2]>((_DWORD *)v4);
      v6 = *(_QWORD *)(v4 + 8);
      v36 = v4;
      if (v6)
      {
        v7 = *(unsigned int *)(v6 - 4);
        v8 = v6 + 16 * v7;
        if (*(_DWORD *)(v6 - 12))
        {
          v9 = *(_QWORD *)(v4 + 8);
          if ((_DWORD)v7)
          {
            v10 = 16 * v7;
            v9 = *(_QWORD *)(v4 + 8);
            while (1)
            {
              v11 = *(_DWORD *)(v9 + 4);
              if ((*(_DWORD *)v9 != -3 || v11 != -3) && (*(_DWORD *)v9 != -2 || v11 != -2))
                break;
              v9 += 16;
              v10 -= 16;
              if (!v10)
              {
                v9 = v8;
                goto LABEL_30;
              }
            }
          }
          goto LABEL_30;
        }
        v9 = v6 + 16 * v7;
      }
      else
      {
        v9 = 0;
        v7 = 0;
      }
      v8 = v6 + 16 * v7;
      if (!v6)
      {
        v14 = 0;
        goto LABEL_35;
      }
LABEL_30:
      v14 = v6 + 16 * *(unsigned int *)(v6 - 4);
LABEL_35:
      while (v9 != v14)
      {
        v15 = *(const void ***)(v9 + 8);
        JSC::BasicBlockLocation::getExecutedRanges(v15, (uint64_t)&ptr);
        v22 = (unint64_t)ptr;
        if (v40)
        {
          v23 = (char *)ptr + 8 * v40;
          v24 = v15 + 3;
          do
          {
            if (*v24)
              v25 = "true";
            else
              v25 = "false";
            v26 = *(unsigned int *)v22;
            v27 = *(unsigned int *)(v22 + 4);
            v22 += 8;
            WTF::dataLogF((WTF *)"\tBasicBlock: [%d, %d] hasExecuted: %s, executionCount:", v16, v26, v27, v25);
            WTF::dataLog<unsigned long long,char [2]>(v24, "\n");
          }
          while ((char *)v22 != v23);
          v22 = (unint64_t)ptr;
        }
        if (!v22)
          goto LABEL_49;
        ptr = 0;
        v39 = 0;
        v28 = *(_QWORD *)(StatusReg + 752);
        if (v28)
        {
          if (!(v22 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v22 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v22)) & 1) != 0)
          {
LABEL_47:
            v29 = *(unsigned int *)(v28 + 8000);
            if (v29 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v28, v22, (os_unfair_lock_s *)5, v17, v18, v19, v20, v21);
            }
            else
            {
              *(_QWORD *)(v28 + 8 * v29) = v22 | 0x5000000000000;
              *(_DWORD *)(v28 + 8000) = v29 + 1;
            }
            goto LABEL_49;
          }
          if (v22 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v22 >> 24)
          {
            v17 = 0;
          }
          else
          {
            v17 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v22 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v22) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v17 == 1)
              goto LABEL_47;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v28, v22, 1, v17, v18, v19, v20, v21);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v22, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_49:
        v30 = v9 + 16;
        v9 = v8;
        if (v30 != v8)
        {
          v9 = v30;
          while (1)
          {
            v31 = *(_DWORD *)(v9 + 4);
            if ((*(_DWORD *)v9 != -3 || v31 != -3) && (*(_DWORD *)v9 != -2 || v31 != -2))
              break;
            v9 += 16;
            if (v9 == v8)
            {
              v9 = v8;
              break;
            }
          }
        }
      }
      v4 = v35;
      if (v36 + 16 != v35)
      {
        v4 = v36 + 16;
        while ((*(_DWORD *)v4 + 1) <= 1)
        {
          v4 += 16;
          if (v4 == v35)
          {
            v4 = v35;
            break;
          }
        }
      }
    }
    while (v4 != v34);
  }
}

uint64_t WTF::dataLog<char [11],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "SourceID: ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::ControlFlowProfiler::getBasicBlocksForSourceID(JSC::ControlFlowProfiler *this@<X0>, JSC::VM *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  WTF *v63;
  int v64;
  unsigned int v65;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
    v9 = v6 & (v8 ^ HIWORD(v8));
    v10 = *(_DWORD *)(v5 + 16 * v9);
    if (v10 != a3)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v6;
        v10 = *(_DWORD *)(v5 + 16 * v9);
        ++v11;
        if (v10 == a3)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v5 - 4))
    {
      v12 = *(_QWORD *)(v5 + 16 * v9 + 8);
      if (v12)
      {
        v13 = *(unsigned int *)(v12 - 4);
        v14 = v12 + 16 * v13;
        if (*(_DWORD *)(v12 - 12))
        {
          v15 = v12;
          if ((_DWORD)v13)
          {
            v16 = 16 * v13;
            v15 = v12;
            while (1)
            {
              v17 = *(_DWORD *)(v15 + 4);
              if ((*(_DWORD *)v15 != -3 || v17 != -3) && (*(_DWORD *)v15 != -2 || v17 != -2))
                break;
              v15 += 16;
              v16 -= 16;
              if (!v16)
              {
                v15 = v14;
                goto LABEL_24;
              }
            }
          }
          goto LABEL_24;
        }
        v15 = v12 + 16 * v13;
      }
      else
      {
        v15 = 0;
        v13 = 0;
      }
      v14 = v12 + 16 * v13;
      if (!v12)
      {
        v20 = 0;
        goto LABEL_29;
      }
LABEL_24:
      v20 = v12 + 16 * *(unsigned int *)(v12 - 4);
LABEL_29:
      v21 = 0;
      v22 = 0;
      if (v20 != v15)
      {
        v60 = v20;
        do
        {
          v23 = *(_QWORD *)(v15 + 8);
          v24 = *(_QWORD *)(v23 + 24);
          JSC::BasicBlockLocation::getExecutedRanges((const void **)v23, (uint64_t)&v63);
          v32 = v63;
          if (v65)
          {
            v33 = 8 * v65;
            do
            {
              v34 = *(_QWORD *)v32;
              BYTE8(v61) = v24 != 0;
              v62 = v24;
              *(_QWORD *)&v61 = v34;
              if (v22 == *(_DWORD *)(a4 + 8))
              {
                v35 = WTF::Vector<JSC::BasicBlockRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v22 + 1, (unint64_t)&v61);
                v22 = *(_DWORD *)(a4 + 12);
                v21 = *(char **)a4;
                v36 = *(_QWORD *)a4 + 24 * v22;
                v37 = *((_QWORD *)v35 + 2);
                *(_OWORD *)v36 = *(_OWORD *)v35;
                *(_QWORD *)(v36 + 16) = v37;
              }
              else
              {
                v38 = v61;
                v39 = &v21[24 * v22];
                *((_QWORD *)v39 + 2) = v62;
                *(_OWORD *)v39 = v38;
              }
              *(_DWORD *)(a4 + 12) = ++v22;
              v32 = (WTF *)((char *)v32 + 8);
              v33 -= 8;
            }
            while (v33);
            v32 = v63;
            v20 = v60;
          }
          if (v32)
          {
            v63 = 0;
            v64 = 0;
            WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
          }
          v40 = v15 + 16;
          v15 = v14;
          if (v40 != v14)
          {
            v15 = v40;
            while (1)
            {
              v41 = *(_DWORD *)(v15 + 4);
              if ((*(_DWORD *)v15 != -3 || v41 != -3) && (*(_DWORD *)v15 != -2 || v41 != -2))
                break;
              v15 += 16;
              if (v15 == v14)
              {
                v15 = v14;
                break;
              }
            }
          }
        }
        while (v15 != v20);
      }
      JSC::FunctionHasExecutedCache::getFunctionRanges((unint64_t)a2 + 93272, a3, (uint64_t)&v63);
      v51 = v63;
      if (v65)
      {
        v52 = (WTF *)((char *)v63 + 12 * v65);
        do
        {
          BYTE8(v61) = *(_BYTE *)v51;
          *(_QWORD *)&v61 = *(_QWORD *)((char *)v51 + 4);
          v62 = BYTE8(v61);
          if (v22 == *(_DWORD *)(a4 + 8))
          {
            v53 = WTF::Vector<JSC::BasicBlockRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v22 + 1, (unint64_t)&v61);
            v22 = *(_DWORD *)(a4 + 12);
            v21 = *(char **)a4;
            v54 = *(_QWORD *)a4 + 24 * v22;
            v55 = *((_QWORD *)v53 + 2);
            *(_OWORD *)v54 = *(_OWORD *)v53;
            *(_QWORD *)(v54 + 16) = v55;
          }
          else
          {
            v56 = v61;
            v57 = &v21[24 * v22];
            *((_QWORD *)v57 + 2) = v62;
            *(_OWORD *)v57 = v56;
          }
          *(_DWORD *)(a4 + 12) = ++v22;
          v51 = (WTF *)((char *)v51 + 12);
        }
        while (v51 != v52);
        v51 = v63;
      }
      if (v51)
      {
        v63 = 0;
        v64 = 0;
        WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
      }
    }
  }
}

BOOL JSC::ControlFlowProfiler::hasBasicBlockAtTextOffsetBeenExecuted(JSC::ControlFlowProfiler *this, int a2, unsigned int a3, JSC::VM *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  BOOL v20;
  WTF *v22;
  unsigned int v23;

  JSC::ControlFlowProfiler::getBasicBlocksForSourceID(this, a4, a3, (uint64_t)&v22);
  if (!v23)
    goto LABEL_16;
  v12 = 0;
  v13 = (unsigned __int8 *)v22 + 8;
  v14 = 0x7FFFFFFF;
  v15 = -1;
  v16 = -1;
  do
  {
    v18 = *((_DWORD *)v13 - 2);
    v19 = *((_DWORD *)v13 - 1);
    v17 = v13 - 8;
    v20 = v18 > a2 || v19 < a2;
    if (!v20 && v19 - v18 < v14)
    {
      if (v19 - v18 < 0)
        goto LABEL_16;
      v12 = *v13;
      v15 = *((_DWORD *)v13 - 1);
      v16 = *((_DWORD *)v13 - 2);
      v14 = v19 - v18;
    }
    v13 += 24;
  }
  while (v17 + 24 != (unsigned __int8 *)((char *)v22 + 24 * v23));
  if (v16 == -1 || v15 == -1)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1989155FCLL);
  }
  if (v22)
    WTF::fastFree((unint64_t)v22, v5, v6, v7, v8, v9, v10, v11);
  return v12 != 0;
}

uint64_t JSC::ControlFlowProfiler::basicBlockExecutionCountAtTextOffset(JSC::ControlFlowProfiler *this, int a2, unsigned int a3, JSC::VM *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  BOOL v20;
  WTF *v22;
  unsigned int v23;

  JSC::ControlFlowProfiler::getBasicBlocksForSourceID(this, a4, a3, (uint64_t)&v22);
  if (!v23)
    goto LABEL_16;
  v12 = 0;
  v13 = (_QWORD *)((char *)v22 + 16);
  v14 = 0x7FFFFFFF;
  v15 = -1;
  v16 = -1;
  do
  {
    v18 = *((_DWORD *)v13 - 4);
    v19 = *((_DWORD *)v13 - 3);
    v17 = v13 - 2;
    v20 = v18 > a2 || v19 < a2;
    if (!v20 && v19 - v18 < v14)
    {
      if (v19 - v18 < 0)
        goto LABEL_16;
      v12 = *v13;
      v15 = *((_DWORD *)v13 - 3);
      v16 = *((_DWORD *)v13 - 4);
      v14 = v19 - v18;
    }
    v13 += 3;
  }
  while (v17 + 3 != (_QWORD *)((char *)v22 + 24 * v23));
  if (v16 == -1 || v15 == -1)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1989156F8);
  }
  if (v22)
    WTF::fastFree((unint64_t)v22, v5, v6, v7, v8, v9, v10, v11);
  return v12;
}

void JSC::CustomGetterSetter::put()
{
  __break(0xC471u);
}

void JSC::CustomGetterSetter::putByIndex()
{
  __break(0xC471u);
}

void JSC::CustomGetterSetter::deleteProperty()
{
  __break(0xC471u);
}

void JSC::CustomGetterSetter::getOwnPropertySlot()
{
  __break(0xC471u);
}

void JSC::CustomGetterSetter::defineOwnProperty()
{
  __break(0xC471u);
}

void JSC::CustomGetterSetter::setPrototype()
{
  __break(0xC471u);
}

uint64_t JSC::DataView::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0x28);
  result = JSC::ArrayBufferView::ArrayBufferView(v10, 12, a1, a2, a3, a4);
  *a5 = result;
  return result;
}

void JSC::DataView::wrappedAs(JSC::ArrayBuffer **a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::ArrayBuffer *v24;
  BOOL v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::ArrayBuffer *v34;

  v10 = *a1;
  if (*((_BYTE *)*a1 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_16;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  if (a4)
    v13 = a3 > v12 - a2;
  else
    v13 = 0;
  v14 = !v13;
  if (v12 < a2 || (v14 & 1) == 0)
  {
    *a5 = 0;
    return;
  }
LABEL_16:
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a1;
  *a1 = 0;
  v34 = v16;
  *a5 = JSC::ArrayBufferView::ArrayBufferView(v15, 12, (uint64_t *)&v34, a2, a3, a4);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    v25 = *(_DWORD *)v24 == 2;
    *(_DWORD *)v24 -= 2;
    if (v25)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
}

unint64_t JSC::DataView::wrapImpl(JSC::DataView *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::ArrayBuffer *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::ArrayBuffer *v23;
  BOOL v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v34)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v35;
  JSC::ArrayBuffer *v36;
  JSC::ArrayBuffer *v37;
  JSC::ArrayBuffer **v38;
  JSC::ArrayBuffer *v39[3];

  if ((*((_BYTE *)this + 6) & 3) == 0)
  {
    v10 = *(_QWORD *)(a3 + 1928);
    if ((v10 & 1) == 0)
      goto LABEL_3;
    v34 = *(uint64_t (**)(JSC::ArrayBuffer **))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v35 = (JSC::ArrayBuffer **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v35 = (JSC::ArrayBuffer **)(a3 - 16);
    v36 = *v35;
    v37 = (JSC::ArrayBuffer *)(a3 + 1928);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(a3 + 1944);
  if ((v10 & 1) != 0)
  {
    v34 = *(uint64_t (**)(JSC::ArrayBuffer **))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v38 = (JSC::ArrayBuffer **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v38 = (JSC::ArrayBuffer **)(a3 - 16);
    v36 = *v38;
    v37 = (JSC::ArrayBuffer *)(a3 + 1944);
LABEL_20:
    v39[0] = v36;
    v39[1] = (JSC::ArrayBuffer *)a3;
    v39[2] = v37;
    v10 = v34(v39);
  }
LABEL_3:
  v11 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *((_QWORD *)v11 + 2);
    if (v12
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      *(_DWORD *)v11 += 2;
    }
    else
    {
      v11 = 0;
    }
  }
  v39[0] = v11;
  if ((*((_BYTE *)this + 6) & 4) != 0)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    v13 = *((_QWORD *)this + 2);
    v14 = 1;
  }
  v22 = JSC::JSDataView::create(a2, v10, (uint64_t)v39, *((_QWORD *)this + 1), v13, v14, a7, a8);
  v23 = v39[0];
  v39[0] = 0;
  if (v23)
  {
    v24 = *(_DWORD *)v23 == 2;
    *(_DWORD *)v23 -= 2;
    if (v24)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return v22;
}

uint64_t JSC::callDate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *tv_sec;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  timespec __tp;

  v3 = *((_QWORD *)this + 7);
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  JSC::DateCache::msToGregorianDateTime(v3 + 90592, 1, (uint64_t)v37, v4, v5, v6, v7, v8, ((double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec) * 1000.0);
  JSC::formatDateTime((int *)v37, 3, 0, (JSC::DateCache *)(v3 + 90592), v9, v10, v11, v12, (WTF::StringImpl **)&__tp);
  v26 = JSC::jsNontrivialString(v3, (JSC::VM *)&__tp, v13, v14, v15, v16, v17, v18);
  tv_sec = (WTF::StringImpl *)__tp.tv_sec;
  __tp.tv_sec = 0;
  if (tv_sec)
  {
    if (*(_DWORD *)tv_sec == 2)
    {
      WTF::StringImpl::~StringImpl(tv_sec, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)tv_sec -= 2;
    }
  }
  return v26;
}

unint64_t JSC::constructWithDateConstructor(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t *v10;
  int v11;
  uint64_t v12;
  __darwin_time_t v13;
  unint64_t v14;
  double v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t SlowCase;
  int v20;
  double v21;
  double v22;
  double v24;
  void (*v25)(timespec *);
  __darwin_time_t *v26;
  int v27;
  uint64_t (*v28)(timespec *);
  __darwin_time_t *v29;
  unint64_t v30;
  int **v31;
  int **v32;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  timespec __tp;
  char *v44;

  v10 = (unint64_t *)((char *)a2 + 48);
  v39 = (char *)a2 + 48;
  v11 = *((_DWORD *)a2 + 8);
  v40 = v11 - 1;
  v12 = *((_QWORD *)a2 + 5);
  v41 = this;
  v42 = v12;
  v13 = *(_QWORD *)(this + 56);
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      v15 = floor(((double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec) * 1000.0);
      goto LABEL_5;
    }
    JSC::millisecondsFromComponents((JSC::JSGlobalObject *)this, (uint64_t)&v39, 1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_20;
  }
  v14 = *v10;
  if ((*v10 & 0xFFFE000000000002) == 0)
  {
    if (&JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v15 = *(double *)(v14 + 16);
      goto LABEL_5;
    }
    v14 = JSC::JSCell::toPrimitive(v14, (JSC::VM **)this, 0, (uint64_t)a4, a5, a6, a7, a8);
  }
  __tp.tv_sec = v14;
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((v14 & 0xFFFE000000000002) != 0)
  {
    if (v14 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v14;
      goto LABEL_21;
    }
    if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v15 = v14 - 0x2000000000000;
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  if (*(_BYTE *)(v14 + 5) != 2)
  {
LABEL_49:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&__tp, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_20:
    v15 = v24;
LABEL_21:
    if (!*(_DWORD *)(v13 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_5;
    }
    return 0;
  }
  v31 = (int **)(v14 + 8);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    v31 = JSC::JSRopeString::resolveRope(v14, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)v31, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v32 = v31;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)v31, a5, a6, a7, a8);
    v31 = v32;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v15 = JSC::DateCache::parseDate((JSC::DateCache *)(v13 + 90592), (JSC::JSGlobalObject *)this, (JSC::VM *)v13, (WTF **)v31);
  if (*(_DWORD *)(v13 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      return 0;
  }
LABEL_5:
  if (v12)
  {
    v16 = (unint64_t *)(this + 1488);
    v17 = *(_QWORD *)(this + 1488);
    if ((v17 & 1) != 0)
    {
      v25 = *(void (**)(timespec *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v26 = (__darwin_time_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v26 = (__darwin_time_t *)(this - 16);
      __tp.tv_sec = *v26;
      __tp.tv_nsec = this;
      v44 = (char *)(this + 1488);
      v25(&__tp);
    }
    if (*(_QWORD *)(this + 1496) == v12)
    {
      v18 = *v16;
      if ((*v16 & 1) != 0)
      {
        v28 = *(uint64_t (**)(timespec *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
        v29 = (__darwin_time_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
        if ((this & 8) != 0)
          v29 = (__darwin_time_t *)(this - 16);
        __tp.tv_sec = *v29;
        __tp.tv_nsec = this;
        v44 = (char *)(this + 1488);
        v18 = v28(&__tp);
      }
    }
    else
    {
      __tp.tv_sec = v13;
      __tp.tv_nsec = (uint64_t)&v41;
      v44 = (char *)&v42;
      v18 = (unint64_t)JSC::constructDate(JSC::JSGlobalObject *,JSC::JSValue,JSC::ArgList const&)::$_0::operator()(&__tp.tv_sec, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v27 = *(_DWORD *)(v13 + 80);
      if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      {
        v38 = v18;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v18 = v38;
      }
      if (*(_QWORD *)(v13 + 16))
        return 0;
    }
  }
  else
  {
    v18 = JSC::JSGlobalObject::dateStructure(this);
  }
  SlowCase = *(_QWORD *)(v13 + 38024);
  if (SlowCase >= *(_QWORD *)(v13 + 38032))
  {
    SlowCase = *(_QWORD *)(v13 + 38040);
    if ((SlowCase & 1) != 0)
    {
      v34 = v18;
      JSC::sanitizeStackForVM((JSC *)v13, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13 + 38000, v13 + 192, 32, 0, 0, v35, v36, v37);
      v18 = v34;
      goto LABEL_12;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v13 + 38048);
    *(_QWORD *)(v13 + 38032) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v13 + 38040) = SlowCase + (int)v30;
  }
  *(_QWORD *)(v13 + 38024) = SlowCase + 32;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v18 + 8);
  *(_DWORD *)SlowCase = v18 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0x7FF8000000000000;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v13 + 755))
    __dmb(0xAu);
  v21 = trunc(v15) + 0.0;
  v22 = NAN;
  if (fabs(v15) <= 8.64e15)
    v22 = v21;
  *(double *)(SlowCase + 16) = v22;
  return SlowCase;
}

unint64_t JSC::constructDate(unint64_t a1, JSC::VM *a2, uint64_t **a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  double v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t result;
  int v19;
  double v20;
  double v21;
  double v22;
  void (*v23)(JSC::JSObject **);
  JSC::JSObject **v24;
  uint64_t (*v25)(JSC::JSObject **);
  JSC::JSObject **v26;
  JSC::JSObject *v27;
  unint64_t v28;
  int **v29;
  int **v30;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  JSC::VM *v36;
  JSC::JSObject *v37;
  unint64_t *v38;
  JSC::VM **v39;

  v35 = a1;
  v36 = a2;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *((_DWORD *)a3 + 2);
  if (v12 == 1)
  {
    v13 = **a3;
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      if (&JSC::DateInstance::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
      {
        v14 = *(double *)(v13 + 16);
        goto LABEL_5;
      }
      v13 = JSC::JSCell::toPrimitive(**a3, (JSC::VM **)a1, 0, (uint64_t)a4, a5, a6, a7, a8);
    }
    v37 = (JSC::JSObject *)v13;
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      if (v13 >= 0xFFFE000000000000)
      {
        v14 = (double)(int)v13;
        goto LABEL_20;
      }
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v14 = v13 - 0x2000000000000;
        goto LABEL_20;
      }
    }
    else if (*(_BYTE *)(v13 + 5) == 2)
    {
      v29 = (int **)(v13 + 8);
      if ((*(_BYTE *)(v13 + 8) & 1) != 0)
        v29 = JSC::JSRopeString::resolveRope(v13, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)v29, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v11 + 80))
      {
        v30 = v29;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)v29, a5, a6, a7, a8);
        v29 = v30;
        if (hasExceptionsAfterHandlingTraps)
          return 0;
      }
      v14 = JSC::DateCache::parseDate((JSC::DateCache *)(v11 + 90592), (JSC::JSGlobalObject *)a1, (JSC::VM *)v11, (WTF **)v29);
      if (*(_DWORD *)(v11 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          return 0;
        }
      }
      goto LABEL_5;
    }
    JSC::JSValue::toNumberSlowCase(&v37, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
  else
  {
    if (!v12)
    {
      v14 = floor(WTF::WallTime::now((WTF::WallTime *)a1) * 1000.0);
      goto LABEL_5;
    }
    JSC::millisecondsFromComponents((JSC::JSGlobalObject *)a1, (uint64_t)a3, 1, (uint64_t)a4, a5, a6, a7, a8);
  }
  v14 = v22;
LABEL_20:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
LABEL_5:
  if (!a2)
  {
    v17 = JSC::JSGlobalObject::dateStructure(a1);
    goto LABEL_10;
  }
  v15 = (unint64_t *)(a1 + 1488);
  v16 = *(_QWORD *)(a1 + 1488);
  if ((v16 & 1) != 0)
  {
    v23 = *(void (**)(JSC::JSObject **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (JSC::JSObject **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v24 = (JSC::JSObject **)(a1 - 16);
    v37 = *v24;
    v38 = (unint64_t *)a1;
    v39 = (JSC::VM **)(a1 + 1488);
    v23(&v37);
  }
  if (*(JSC::VM **)(a1 + 1496) != a2)
  {
    v37 = (JSC::JSObject *)v11;
    v38 = &v35;
    v39 = &v36;
    v27 = JSC::constructDate(JSC::JSGlobalObject *,JSC::JSValue,JSC::ArgList const&)::$_0::operator()((uint64_t *)&v37, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_30:
    v17 = (unint64_t)v27;
    goto LABEL_9;
  }
  v17 = *v15;
  if ((*v15 & 1) != 0)
  {
    v25 = *(uint64_t (**)(JSC::JSObject **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::JSObject **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v26 = (JSC::JSObject **)(a1 - 16);
    v37 = *v26;
    v38 = (unint64_t *)a1;
    v39 = (JSC::VM **)(a1 + 1488);
    v27 = (JSC::JSObject *)v25(&v37);
    goto LABEL_30;
  }
LABEL_9:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
LABEL_10:
  result = *(_QWORD *)(v11 + 38024);
  if (result >= *(_QWORD *)(v11 + 38032))
  {
    result = *(_QWORD *)(v11 + 38040);
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v11 + 38000, v11 + 192, 32, 0, 0, v32, v33, v34);
      goto LABEL_12;
    }
    v28 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v11 + 38048);
    *(_QWORD *)(v11 + 38032) = result + HIDWORD(v28);
    *(_QWORD *)(v11 + 38040) = result + (int)v28;
  }
  *(_QWORD *)(v11 + 38024) = result + 32;
LABEL_12:
  *(_DWORD *)result = 0;
  v19 = *(_DWORD *)(v17 + 8);
  *(_DWORD *)result = v17 >> 4;
  *(_DWORD *)(result + 4) = v19;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0x7FF8000000000000;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  v20 = trunc(v14) + 0.0;
  v21 = NAN;
  if (fabs(v14) <= 8.64e15)
    v21 = v20;
  *(double *)(result + 16) = v21;
  return result;
}

void JSC::millisecondsFromComponents(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;
  JSC::JSObject *v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  _BOOL4 v37;
  double v38;
  double v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  uint64_t v46;

  v8 = a3;
  v11 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a1 + 7);
  v13 = 0uLL;
  v45 = 0.0;
  v43 = 0u;
  v44 = 0u;
  v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= 7)
    v14 = 7;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0x3FF0000000000000;
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  do
  {
    if (v11 >= *(unsigned int *)(a2 + 8))
    {
      v41 = 10;
LABEL_14:
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v41, a1, a3, a4, a5, a6, a7, a8, v13);
      goto LABEL_10;
    }
    v16 = *(JSC::JSObject **)(*(_QWORD *)a2 + 8 * v11);
    v41 = (uint64_t)v16;
    if ((unint64_t)v16 >= 0xFFFE000000000000)
    {
      *(double *)v13.i64 = (double)(int)v16;
    }
    else
    {
      v17 = (unint64_t)v16 - 0x2000000000000;
      if (v17 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_14;
      v13.i64[0] = v17;
    }
LABEL_10:
    *((_QWORD *)&v42 + v11) = v13.i64[0];
    if (*(_DWORD *)(v12 + 80))
    {
      v40 = *(_DWORD *)(v12 + 80);
      if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return;
    }
    ++v11;
  }
  while (v15 != v11);
  v18 = 0;
  while ((*(_QWORD *)((_BYTE *)&v42 + v18) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    *(double *)((char *)&v42 + v18) = trunc(*(double *)((char *)&v42 + v18) + 0.0);
    v18 += 8;
    if (8 * v15 == v18)
    {
      v19 = *(double *)&v42;
      if (*(double *)&v42 >= 0.0 && *(double *)&v42 <= 99.0)
        v19 = *(double *)&v42 + 1900.0;
      v20 = floor(*((double *)&v42 + 1) / 12.0);
      v21 = v19 + v20;
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_61;
      v22 = *((double *)&v42 + 1) + v20 * -12.0;
      v23 = (*(_QWORD *)&v21 >> 52) & 0x7FFLL;
      if ((v23 - 1023) <= 0x53)
      {
        v25 = *(_QWORD *)&v21 >> (51 - (*(_QWORD *)&v21 >> 52));
        if (v23 > 0x433)
          LODWORD(v25) = *(_QWORD *)&v21 << ((*(_QWORD *)&v21 >> 52) - 51);
        v26 = v23 >= 0x41F
            ? v25
            : (((1 << ((*(_QWORD *)&v21 >> 52) + 1)) - 1) & v25) + (1 << ((*(_QWORD *)&v21 >> 52) + 1));
        v24 = v21 >= 0.0 ? v26 : -v26;
      }
      else
      {
        v24 = 0;
      }
      v27 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
      if ((v27 - 1023) <= 0x53)
      {
        v29 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
        if (v27 > 0x433)
          LODWORD(v29) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
        v30 = v27 >= 0x41F
            ? v29
            : (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v29) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
        v28 = v22 >= 0.0 ? v30 : -v30;
      }
      else
      {
        v28 = 0;
      }
      if (v21 == (double)v24 && v22 == (double)v28)
      {
        v32 = v28 / 12 + v24;
        v33 = v28 % 12;
        if (v33 < 0)
        {
          v33 += 12;
          --v32;
        }
        v34 = 1;
        HIDWORD(v36) = -1030792151 * v32 + 85899344;
        LODWORD(v36) = HIDWORD(v36);
        v35 = v36 >> 4;
        LODWORD(v36) = HIDWORD(v36);
        v37 = (v36 >> 2) > 0x28F5C28;
        if (v35 >= 0xA3D70B)
          v34 = v37;
        if ((v32 & 3) != 0)
          v34 = 0;
        v38 = (*(double *)&v43
             + floor(floor(((double)v32 + -1.0) / 400.0)+ -4.0+ floor(((double)v32 + -1.0) * 0.25)+ -492.0+ ((double)v32 + -1970.0) * 365.0- (floor(((double)v32 + -1.0) / 100.0)+ -19.0))+ (double)WTF::firstDayOfMonth[12 * v34 + v33]+ -1.0)* 86400000.0;
      }
      else
      {
LABEL_61:
        v38 = NAN;
      }
      v39 = v38 + v45 + *((double *)&v43 + 1) * 3600000.0 + *(double *)&v44 * 60000.0 + *((double *)&v44 + 1) * 1000.0;
      if (COERCE__INT64(fabs(v39)) <= 0x7FEFFFFFFFFFFFFFLL && v8 == 1)
        JSC::DateCache::localTimeOffset((uint64_t **)(v12 + 90592), (WTF *)(uint64_t)v39, 1, a4, a5, a6, a7, a8);
      return;
    }
  }
}

uint64_t JSC::JSGlobalObject::dateStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 1488);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 1488;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructDate(JSC::JSGlobalObject *,JSC::JSValue,JSC::ArgList const&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[186];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 186);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

void JSC::consoleLogWithLevel(Inspector *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v11;
  uint64_t v12;
  Inspector::ScriptArguments *v13;
  unsigned int v14;
  unsigned int v15;
  Inspector::ScriptArguments *v16;

  v8 = *((_QWORD *)this + 401);
  if (v8)
  {
    do
      v11 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v11 + 1, (unsigned int *)v8));
    v12 = *(_QWORD *)(v8 + 8);
    if (v12)
    {
      Inspector::createScriptArguments(this, a2, 0, a4, a5, a6, a7, a8, (uint64_t *)&v16);
      JSC::ConsoleClient::logWithLevel(v12, (uint64_t)this, (uint64_t)&v16, a3);
      v13 = v16;
      v16 = 0;
      if (v13)
        WTF::RefCounted<Inspector::ScriptArguments>::deref(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    do
    {
      v14 = __ldaxr((unsigned int *)v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v8));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::valueOrDefaultLabelString(int **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;

  if (*((_DWORD *)a3 + 8) == 1 || (v10 = *((_QWORD *)a3 + 6), v13 = v10, v10 == 10))
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x700000002;
    *(_QWORD *)(v11 + 8) = "default";
    *(_DWORD *)(v11 + 16) = 4;
    *this = (int *)v11;
    return;
  }
  if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
  {
    v12 = *(int **)(v10 + 8);
    if ((v12 & 1) != 0)
    {
      v12 = *JSC::JSRopeString::resolveRope(v10, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v12)
        goto LABEL_9;
    }
    else if (!v12)
    {
LABEL_9:
      *this = v12;
      return;
    }
    *v12 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v13, a2, a3, a4, a5, a6, a7, a8, this);
}

unint64_t JSC::dateParse(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29 = 10;
LABEL_25:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this, a3, a4, a5, a6, a7, a8, (int **)&v30);
    goto LABEL_8;
  }
  v11 = *((_QWORD *)a2 + 6);
  v29 = v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_25;
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v12)
LABEL_6:
    *(_DWORD *)v12 += 2;
LABEL_7:
  v30 = v12;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_9;
LABEL_8:
  v28 = *(_DWORD *)(v10 + 80);
  if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v17 = 0;
  }
  else
  {
LABEL_9:
    v13 = JSC::DateCache::parseDate((JSC::DateCache *)(v10 + 90592), this, (JSC::VM *)v10, &v30);
    v14 = fabs(v13);
    v15 = trunc(v13) + 0.0;
    if (v14 > 8.64e15)
      v15 = NAN;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      v17 = v16 | 0xFFFE000000000000;
    }
    else
    {
      v17 = *(_QWORD *)&v15 + 0x2000000000000;
    }
  }
  v18 = v30;
  v30 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v17;
}

unint64_t JSC::dateUTC(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  uint64_t v9;
  char *v11;
  int v12;

  v11 = (char *)a2 + 48;
  v12 = *((_DWORD *)a2 + 8) - 1;
  JSC::millisecondsFromComponents(this, (uint64_t)&v11, 0, a4, a5, a6, a7, a8);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v9 = (int)v8, v8 == (double)(int)v9)
    && ((_DWORD)v9 || (*(_QWORD *)&v8 & 0x8000000000000000) == 0))
  {
    return v9 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v8 + 0x2000000000000;
  }
}

unint64_t JSC::dateNow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  uint64_t v4;
  timespec v6;

  v6.tv_sec = 0;
  v6.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v6);
  v3 = floor(((double)v6.tv_nsec / 1000000000.0 + (double)v6.tv_sec) * 1000.0);
  if (fabs(v3) == INFINITY)
    return *(_QWORD *)&v3 + 0x2000000000000;
  v4 = (int)v3;
  if (v3 != (double)(int)v4 || !(_DWORD)v4 && (*(_QWORD *)&v3 & 0x8000000000000000) != 0)
    return *(_QWORD *)&v3 + 0x2000000000000;
  else
    return v4 | 0xFFFE000000000000;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -1)
      {
        if (v22)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = 0;
          v27 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
          do
          {
            v29 = v28 & v25;
            v28 = ++v26 + v29;
          }
          while (*(_DWORD *)(v24 + 16 * v29));
          v30 = v24 + 16 * v29;
          v32 = (_QWORD *)(v30 + 8);
          v31 = *(_QWORD *)(v30 + 8);
          if (v31)
          {
            WTF::fastFree(v31 - 16, v10, v11, v12, v13, v14, v15, v16);
            v22 = *v21;
          }
          *(_DWORD *)v30 = v22;
          v33 = v6 + 16 * v19;
          *v32 = 0;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *v32 = v34;
          v35 = *(_QWORD *)(v33 + 8);
          if (v35)
            WTF::fastFree(v35 - 16, v10, v11, v12, v13, v14, v15, v16);
          if (v21 == a3)
            v20 = v30;
        }
        else
        {
          v23 = *(_QWORD *)(v6 + 16 * v19 + 8);
          if (v23)
            WTF::fastFree(v23 - 16, v10, v11, v12, v13, v14, v15, v16);
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

_DWORD *WTF::HashTable<JSC::BasicBlockKey,WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BasicBlockKey,JSC::BasicBlockLocation *>>,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BasicBlockKey>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *(v18 - 1) = 0xFFFFFFFDFFFFFFFDLL;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      v23 = v21[1];
      if ((*v21 != -2 || v23 != -2) && (v22 != -3 || v23 != -3))
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = 0;
        v29 = v22 + v23 + 1;
        do
        {
          v30 = v29 & v27;
          v31 = (_DWORD *)(v26 + 16 * v30);
          v29 = ++v28 + v30;
        }
        while (*v31 != -3 || v31[1] != -3);
        *(_OWORD *)v31 = *(_OWORD *)v21;
        if (v21 == a3)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

char *WTF::Vector<JSC::BasicBlockRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[24 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = (char *)WTF::fastMalloc((WTF *)(24 * v9));
        *((_DWORD *)a1 + 2) = (v10 & 0xFFFFFFF8) / 0x18;
        *a1 = v11;
        memcpy(v11, v5, 24 * v6);
        v19 = *a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x19891728CLL);
    }
  }
  v20 = *((unsigned int *)a1 + 2);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v22 = a2;
  if (v22 > v20)
  {
    if (v22 >= 0xAAAAAAB)
      goto LABEL_28;
    v23 = *((unsigned int *)a1 + 3);
    v24 = 24 * v22;
    v25 = (char *)WTF::fastMalloc((WTF *)(24 * v22));
    *((_DWORD *)a1 + 2) = (v24 & 0xFFFFFFF8) / 0x18;
    *a1 = v25;
    memcpy(v25, v5, 24 * v23);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (char *)v3;
}

void JSC::formatDateTime(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, JSC::DateCache *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  int v10;
  char v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _QWORD *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  int v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  int8x16_t *v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  int8x16_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  unsigned int v164;
  char v165;

  v10 = a3;
  v11 = a2;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 1;
  if ((a2 & 1) != 0)
  {
    WTF::StringBuilder::append((uint64_t)&v162, (int8x16_t *)(&WTF::weekdayName)[2 * ((a1[4] + 6) % 7)], 3uLL, (uint64_t)a4, a5, a6, a7, a8);
    if (v10)
    {
      if ((v164 & 0x80000000) == 0)
      {
        v20 = v163;
        if ((v163 || (v20 = v162) != 0) && (*((_BYTE *)v20 + 16) & 4) == 0)
        {
          v21 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v162, (WTF::AtomStringImpl *)(v164 + 2), v14, v15, v16, v17, v18, v19);
          if (v21)
            *v21 = 2097196;
        }
        else
        {
          v22 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v162, (WTF::AtomStringImpl *)(v164 + 2), v14, v15, v16, v17, v18, v19);
          if (v22)
            *v22 = 8236;
        }
      }
      JSC::appendNumber<2>((uint64_t)&v162, a1[3], v14, v15, v16, v17, v18, v19);
      v29 = (int8x16_t *)(&WTF::monthName)[2 * a1[1]];
      if (v164 >= 0xFFFFFFFC)
        v30 = 0xFFFFFFFFLL;
      else
        v30 = v164 + 4;
      v31 = v163;
      if ((v163 || (v31 = v162) != 0) && (*((_BYTE *)v31 + 16) & 4) == 0)
      {
        v148 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v162, (WTF::AtomStringImpl *)v30, v23, v24, v25, v26, v27, v28);
        if (v148)
        {
          *(_WORD *)v148 = 32;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v148 + 2), v29, 3);
        }
      }
      else
      {
        v32 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v162, (WTF::AtomStringImpl *)v30, v23, v24, v25, v26, v27, v28);
        if (v32)
        {
          *(_BYTE *)v32 = 32;
          v39 = v29->i16[0];
          *(_BYTE *)(v32 + 3) = v29->i8[2];
          *(_WORD *)(v32 + 1) = v39;
        }
      }
    }
    else
    {
      WTF::StringBuilder::append<char,WTF::ASCIILiteral,char>((uint64_t)&v162, 32, (uint64_t)(&WTF::monthName)[2 * a1[1]], 4, 32, v17, v18, v19);
      JSC::appendNumber<2>((uint64_t)&v162, a1[3], v120, v121, v122, v123, v124, v125);
    }
    v160.i8[0] = 32;
    if (!v163 || (v40 = v164, v164 >= *((_DWORD *)v163 + 1)) || v162)
    {
      WTF::StringBuilder::append((uint64_t)&v162, &v160, 1uLL, v34, v35, v36, v37, v38);
    }
    else
    {
      v41 = *((_DWORD *)v163 + 4);
      v42 = *((_QWORD *)v163 + 1);
      ++v164;
      if ((v41 & 4) != 0)
        *(_BYTE *)(v42 + v40) = 32;
      else
        *(_WORD *)(v42 + 2 * v40) = 32;
    }
    v43 = *a1;
    if ((v43 & 0x80000000) != 0)
    {
      WTF::StringBuilder::append((uint64_t)&v162, 0x2Du, v33, v34, v35, v36, v37, v38);
      v43 = -(int)v43;
    }
    WTF::String::number(v43, v160.i64);
    v44 = v160.i64[0];
    v45 = 4;
    if (!v160.i64[0] || (v45 = 4 - *(_DWORD *)(v160.i64[0] + 4), v45 >= 1))
    {
      do
      {
        WTF::StringBuilder::append((uint64_t)&v162, 0x30u, a3, (uint64_t)a4, a5, a6, a7, a8);
        --v45;
      }
      while (v45);
      v44 = v160.i64[0];
    }
    if (v164)
      v46 = 0;
    else
      v46 = v163 == 0;
    if (v46)
    {
      if (v44)
        *(_DWORD *)v44 += 2;
      v47 = v162;
      v162 = (WTF::StringImpl *)v44;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
          v44 = v160.i64[0];
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
      if (v44)
        LODWORD(v44) = *(_DWORD *)(v44 + 4);
      v164 = v44;
      goto LABEL_40;
    }
    if (v44)
    {
      v149 = *(int8x16_t **)(v44 + 8);
      v150 = *(unsigned int *)(v44 + 4);
      if ((*(_BYTE *)(v44 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append((uint64_t)&v162, v149, v150, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_40;
      }
    }
    else
    {
      v149 = 0;
      v150 = 0;
    }
    WTF::StringBuilder::append((uint64_t)&v162, v149, v150, (uint64_t)a4, a5, a6, a7, a8);
LABEL_40:
    v48 = (WTF::StringImpl *)v160.i64[0];
    v160.i64[0] = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if ((v11 & 2) == 0)
      goto LABEL_74;
    v160.i8[0] = 32;
    if (!v163 || (v49 = v164, v164 >= *((_DWORD *)v163 + 1)) || v162)
    {
      WTF::StringBuilder::append((uint64_t)&v162, &v160, 1uLL, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      v50 = *((_DWORD *)v163 + 4);
      v51 = *((_QWORD *)v163 + 1);
      ++v164;
      if ((v50 & 4) != 0)
        *(_BYTE *)(v51 + v49) = 32;
      else
        *(_WORD *)(v51 + 2 * v49) = 32;
    }
LABEL_49:
    JSC::appendNumber<2>((uint64_t)&v162, a1[5], a3, (uint64_t)a4, a5, a6, a7, a8);
    v160.i8[0] = 58;
    if (v163 && ((v58 = v164, v164 < *((_DWORD *)v163 + 1)) ? (v59 = v162 == 0) : (v59 = 0), v59))
    {
      v60 = *((_DWORD *)v163 + 4);
      v61 = *((_QWORD *)v163 + 1);
      ++v164;
      if ((v60 & 4) != 0)
        *(_BYTE *)(v61 + v58) = 58;
      else
        *(_WORD *)(v61 + 2 * v58) = 58;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)&v162, &v160, 1uLL, v53, v54, v55, v56, v57);
    }
    JSC::appendNumber<2>((uint64_t)&v162, a1[6], v52, v53, v54, v55, v56, v57);
    v160.i8[0] = 58;
    if (v163 && ((v68 = v164, v164 < *((_DWORD *)v163 + 1)) ? (v69 = v162 == 0) : (v69 = 0), v69))
    {
      v70 = *((_DWORD *)v163 + 4);
      v71 = *((_QWORD *)v163 + 1);
      ++v164;
      if ((v70 & 4) != 0)
        *(_BYTE *)(v71 + v68) = 58;
      else
        *(_WORD *)(v71 + 2 * v68) = 58;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)&v162, &v160, 1uLL, v63, v64, v65, v66, v67);
    }
    JSC::appendNumber<2>((uint64_t)&v162, a1[7], v62, v63, v64, v65, v66, v67);
    if ((v164 & 0x80000000) == 0)
    {
      v72 = v163;
      if ((v163 || (v72 = v162) != 0) && (*((_BYTE *)v72 + 16) & 4) == 0)
      {
        v73 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v162, (WTF::AtomStringImpl *)(v164 + 4), a3, (uint64_t)a4, a5, a6, a7, a8);
        if (v73)
          *v73 = 0x54004D00470020;
      }
      else
      {
        v74 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v162, (WTF::AtomStringImpl *)(v164 + 4), a3, (uint64_t)a4, a5, a6, a7, a8);
        if (v74)
          *v74 = 1414350624;
      }
    }
    if ((v10 & 1) == 0)
    {
      v126 = a1[8];
      v127 = v126 >= 0 ? a1[8] : -v126;
      v128 = v126 >= 0 ? 43 : 45;
      WTF::StringBuilder::append((uint64_t)&v162, v128, a3, (uint64_t)a4, a5, a6, a7, a8);
      JSC::appendNumber<2>((uint64_t)&v162, v127 / 0x3C, v129, v130, v131, v132, v133, v134);
      JSC::appendNumber<2>((uint64_t)&v162, v127 % 0x3C, v135, v136, v137, v138, v139, v140);
      JSC::DateCache::timeZoneDisplayName(a4, a1[9] != 0, v141, v142, v143, v144, v145, v146, &v161);
      v147 = v161;
      if (v161)
      {
        if (*((_DWORD *)v161 + 1))
        {
          v160.i64[0] = (uint64_t)" (";
          v160.i64[1] = 3;
          v159 = 41;
          WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>((uint64_t)&v162, (uint64_t)&v160, (uint64_t *)&v161, &v159, a5, a6, a7, a8);
          v147 = v161;
          v161 = 0;
          if (!v147)
            goto LABEL_74;
        }
        else
        {
          v161 = 0;
        }
        if (*(_DWORD *)v147 == 2)
        {
          WTF::StringImpl::~StringImpl(v147, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        }
        else
        {
          *(_DWORD *)v147 -= 2;
        }
      }
    }
LABEL_74:
    v75 = v162;
    if (v162)
      goto LABEL_75;
    goto LABEL_104;
  }
  if ((a2 & 2) != 0)
    goto LABEL_49;
LABEL_104:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v162, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v162);
  v75 = v162;
  if (!v162)
  {
    *a9 = 0;
    goto LABEL_77;
  }
LABEL_75:
  v76 = *(_DWORD *)v75;
  *(_DWORD *)v75 += 4;
  *a9 = v75;
  v77 = v76 + 2;
  if (v77)
  {
    *(_DWORD *)v75 = v77;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v75, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
LABEL_77:
  v78 = v163;
  v163 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = v162;
  v162 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
}

uint64_t JSC::appendNumber<2>(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int8x16_t v21;

  v8 = a2;
  v9 = result;
  v10 = a2 / 10;
  v21.i8[0] = a2 / 10 + 48;
  v11 = *(_QWORD *)(result + 8);
  if (v11
    && ((v12 = *(unsigned int *)(result + 16), v12 < *(_DWORD *)(v11 + 4))
      ? (v13 = *(_QWORD *)result == 0)
      : (v13 = 0),
        v13))
  {
    v14 = *(_DWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 8);
    *(_DWORD *)(result + 16) = v12 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v12) = a2 / 10 + 48;
    else
      *(_WORD *)(v15 + 2 * v12) = (a2 / 10 + 48);
  }
  else
  {
    result = WTF::StringBuilder::append(result, &v21, 1uLL, a4, a5, a6, a7, a8);
  }
  v21.i8[1] = v8 - 10 * v10 + 48;
  v16 = *(_QWORD *)(v9 + 8);
  if (!v16)
    return WTF::StringBuilder::append(v9, (int8x16_t *)&v21.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v17 = *(unsigned int *)(v9 + 16);
  if (v17 >= *(_DWORD *)(v16 + 4) || *(_QWORD *)v9 != 0)
    return WTF::StringBuilder::append(v9, (int8x16_t *)&v21.i8[1], 1uLL, a4, a5, a6, a7, a8);
  v19 = *(_DWORD *)(v16 + 16);
  v20 = *(_QWORD *)(v16 + 8);
  *(_DWORD *)(v9 + 16) = v17 + 1;
  if ((v19 & 4) != 0)
    *(_BYTE *)(v20 + v17) = v8 - 10 * v10 + 48;
  else
    *(_WORD *)(v20 + 2 * v17) = (v8 - 10 * v10 + 48);
  return result;
}

uint64_t WTF::StringBuilder::append<char,WTF::ASCIILiteral,char>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  int v12;
  char v13;

  v13 = a2;
  if (!a4)
  {
    v8 = 0;
    v11 = a3;
LABEL_3:
    v12 = v8;
    v10 = a5;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(a1, &v13, (uint64_t)&v11, &v10, a5, a6, a7, a8);
  }
  v8 = a4 - 1;
  v11 = a3;
  if (!((unint64_t)(a4 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String,char>(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;

  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    v12 = *(_BYTE **)a2;
LABEL_3:
    v13 = v8;
    v11 = *a3;
    v10 = *a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(a1, &v12, &v11, &v10, a5, a6, a7, a8);
  }
  --v8;
  v12 = *(_BYTE **)a2;
  if (!(v8 >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DateInstance::DateInstance(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0x7FF8000000000000;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0x7FF8000000000000;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t JSC::DateInstance::finishCreation(uint64_t result, uint64_t a2, double a3)
{
  double v3;
  double v4;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v3 = fabs(a3);
  v4 = trunc(a3) + 0.0;
  if (v3 > 8.64e15)
    v4 = NAN;
  *(double *)(result + 16) = v4;
  return result;
}

double *JSC::DateInstance::calculateGregorianDateTime(JSC::DateInstance *this, JSC::DateCache *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v8 = *((double *)this + 2);
  v11 = (double *)*((_QWORD *)this + 3);
  if (!v11)
  {
    v13 = (~(*(_QWORD *)&v8 << 32) + *(_QWORD *)&v8) ^ ((~(*(_QWORD *)&v8 << 32) + *(_QWORD *)&v8) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = (char *)a2 + 16 * (((v15 >> 31) ^ v15) & 0xF) + 2144;
    if (*(double *)v16 == v8)
    {
      v17 = (uint64_t *)(v16 + 8);
    }
    else
    {
      *(double *)v16 = v8;
      v19 = WTF::fastMalloc((WTF *)0x68);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
      *(_QWORD *)(v19 + 96) = 0;
      v21 = (_DWORD *)*((_QWORD *)v16 + 1);
      v17 = (uint64_t *)(v16 + 8);
      v20 = v21;
      *v17 = v19;
      if (v21)
      {
        if (*v20 == 1)
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v20;
      }
    }
    v11 = (double *)*v17;
    *(_DWORD *)v11 = *(_DWORD *)*v17 + 1;
    v18 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (v18)
    {
      if (*v18 == 1)
      {
        WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
        v11 = (double *)*((_QWORD *)this + 3);
      }
      else
      {
        --*v18;
      }
    }
  }
  if (v11[1] != v8)
  {
    JSC::DateCache::msToGregorianDateTime((uint64_t)a2, 1, (uint64_t)(v11 + 2), a4, a5, a6, a7, a8, v8);
    v11 = (double *)*((_QWORD *)this + 3);
    v11[1] = v8;
  }
  return v11 + 2;
}

double *JSC::DateInstance::calculateGregorianDateTimeUTC(JSC::DateInstance *this, JSC::DateCache *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v8 = *((double *)this + 2);
  v11 = (double *)*((_QWORD *)this + 3);
  if (!v11)
  {
    v13 = (~(*(_QWORD *)&v8 << 32) + *(_QWORD *)&v8) ^ ((~(*(_QWORD *)&v8 << 32) + *(_QWORD *)&v8) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = (char *)a2 + 16 * (((v15 >> 31) ^ v15) & 0xF) + 2144;
    if (*(double *)v16 == v8)
    {
      v17 = (uint64_t *)(v16 + 8);
    }
    else
    {
      *(double *)v16 = v8;
      v19 = WTF::fastMalloc((WTF *)0x68);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0x7FF8000000000000;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
      *(_QWORD *)(v19 + 96) = 0;
      v21 = (_DWORD *)*((_QWORD *)v16 + 1);
      v17 = (uint64_t *)(v16 + 8);
      v20 = v21;
      *v17 = v19;
      if (v21)
      {
        if (*v20 == 1)
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v20;
      }
    }
    v11 = (double *)*v17;
    *(_DWORD *)v11 = *(_DWORD *)*v17 + 1;
    v18 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (v18)
    {
      if (*v18 == 1)
      {
        WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
        v11 = (double *)*((_QWORD *)this + 3);
      }
      else
      {
        --*v18;
      }
    }
  }
  if (v11[7] != v8)
  {
    JSC::DateCache::msToGregorianDateTime((uint64_t)a2, 0, (uint64_t)(v11 + 8), a4, a5, a6, a7, a8, v8);
    v11 = (double *)*((_QWORD *)this + 3);
    v11[7] = v8;
  }
  return v11 + 8;
}

void JSC::DatePrototype::finishCreation(JSC::DatePrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  WTF::StringImpl *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"toUTCString", 0xBuLL, a4, a5, a6, a7, a8, &v90);
  v11 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v90, (uint64_t)JSC::dateProtoFuncToUTCString, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v90, v11, 4, v12, v13, v14, v15);
  WTF::AtomStringImpl::addLiteral((uint64_t)"toGMTString", 0xBuLL, v16, v17, v18, v19, v20, &v91);
  v21 = v91;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v91, v11, 4, v22, v23, v24, v25);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x1400000002;
  *(_QWORD *)(v33 + 8) = "[Symbol.toPrimitive]";
  *(_DWORD *)(v33 + 16) = 4;
  v91 = (WTF::StringImpl *)v33;
  v41 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v91, (uint64_t)JSC::dateProtoFuncToPrimitiveSymbol, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v43 = v91;
  v91 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2768), v41, 6, v38, v39, v40, v42);
  if (BYTE6(qword_1ECF4C7A8))
  {
    JSC::Identifier::add((uint64_t)a2, "toTemporalInstant", 18, v46, v47, v48, v49, v50, &v91);
    v76 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v91, (uint64_t)JSC::dateProtoFuncToTemporalInstant, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v91, v76, 4, v77, v78, v79, v80);
    v81 = v91;
    v91 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl(v81, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)v81 -= 2;
      }
    }
  }
  v51 = v90;
  v90 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
}

uint64_t JSC::dateProtoFuncToUTCString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::formateDateInstance(this, *((_QWORD *)a2 + 5), 3, 1, a5, a6, a7, a8);
}

uint64_t JSC::dateProtoFuncToPrimitiveSymbol(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  JSC::Structure *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  const char *v24;
  uint64_t v25;
  JSC::VM *v26;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v10;
  v11 = (JSC::Structure *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || ((v12 = *((unsigned __int8 *)v11 + 5), v12 >= 0x17) ? (v13 = v12 - 57 >= 0xFFFFFFFA) : (v13 = 1), v13))
  {
    v24 = "Date.prototype[Symbol.toPrimitive] expected |this| to be an object.";
    v25 = 68;
    return JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v24, v25);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24 = "Date.prototype[Symbol.toPrimitive] expected a first argument.";
    v25 = 62;
    return JSC::throwTypeError((unint64_t)this, &v26, (uint64_t)v24, v25);
  }
  v21 = JSC::toPreferredPrimitiveType(this, *((_QWORD *)a2 + 6), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  if (v21)
    v22 = v21;
  else
    v22 = 2;
  return JSC::JSObject::ordinaryToPrimitive(v11, this, (JSC::Structure *)v22, v16, v17, v18, v19, v20);
}

unint64_t JSC::dateProtoFuncToTemporalInstant(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v14;
  unint64_t v15;
  JSC::Heap **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  JSC::Exception *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Exception *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t *);
  uint64_t *v48;
  uint64_t (*v49)(uint64_t *);
  uint64_t *v50;
  WTF::StringImpl *v51;
  JSC::VM *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;

  v9 = *(JSC::VM **)(this + 56);
  v52 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::DateInstance::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v52);
  }
  v11 = *(double *)(v10 + 16);
  v12 = trunc(v11);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v12 == v11)
  {
    v34 = (unsigned __int128)((uint64_t)v11 * (__int128)1000000) >> 64;
    v35 = 1000000 * (uint64_t)v11;
    v36 = *(_QWORD *)(this + 432);
    if ((v36 & 1) != 0)
    {
      v49 = *(uint64_t (**)(uint64_t *))(v36 & 0xFFFFFFFFFFFFFFFCLL);
      v50 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v50 = (uint64_t *)(this - 16);
      v53 = *v50;
      v54 = this;
      v55 = (char *)(this + 432);
      v36 = v49(&v53);
    }
    return JSC::TemporalInstant::create((uint64_t)v9, (JSC::VM *)v36, v35, v34, a5, a6, a7, a8);
  }
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x2B00000002;
  *(_QWORD *)(v14 + 8) = "Invalid integer number of Epoch Millseconds";
  *(_DWORD *)(v14 + 16) = 4;
  v51 = (WTF::StringImpl *)v14;
  v15 = *(_QWORD *)(this + 128);
  v16 = *(JSC::Heap ***)(this + 56);
  if ((v15 & 1) != 0)
  {
    v47 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v48 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v48 = (uint64_t *)(this - 16);
    v53 = *v48;
    v54 = this;
    v55 = (char *)(this + 128);
    v15 = v47(&v53);
  }
  v17 = JSC::ErrorInstance::create(v16, v15, &v51, 0, 0, 0, 2, 1);
  v24 = (JSC::Exception *)v17;
  if ((v17 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C)))
  {
    v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v17, 0, v18, v19, v20, v21, v22);
  }
  v32 = JSC::VM::throwException(v9, (JSC::JSGlobalObject *)this, v24, v23, v18, v19, v20, v21, v22);
  v33 = v51;
  v51 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  return (unint64_t)v32;
}

void JSC::DeferredWorkTimer::doWork(JSC::DeferredWorkTimer *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::RunLoop *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  CFRunLoopRef *v67;
  uint64_t *v68;
  int v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;

  v10 = (unsigned __int8 *)this + 35;
  if (__ldaxr((unsigned __int8 *)this + 35))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 35);
LABEL_4:
  JSC::JSRunLoopTimer::cancelTimer(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!*((_BYTE *)this + 36))
    goto LABEL_10;
  v77 = 0;
  v78 = 0;
  v19 = (uint64_t *)((char *)this + 40);
  if (*((_QWORD *)this + 5) == *((_QWORD *)this + 6))
    goto LABEL_6;
  v30 = (uint64_t *)((char *)this + 72);
  do
  {
    WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::takeFirst(&v75, (uint64_t *)this + 5);
    v31 = v75;
    v73 = v75;
    v32 = WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>,JSC::DeferredWorkTimer::TicketData const*>((uint64_t *)this + 9, (uint64_t *)&v73);
    v33 = (uint64_t **)v32;
    v34 = (uint64_t)v12;
    v35 = *v30;
    if (*v30)
      v35 += 8 * *(unsigned int *)(v35 - 4);
    if (v35 != v32)
    {
      if (JSC::DeferredWorkTimer::TicketData::isCancelled((JSC::DeferredWorkTimer::TicketData *)v31)
        || ((v36 = (_DWORD *)JSC::DeferredWorkTimer::TicketData::target((JSC::DeferredWorkTimer::TicketData *)v31),
             (v37 = v31[2]) == 0)
         || (*(_BYTE *)(v37 + 8) & 3) != 0
          ? (v38 = 0)
          : (v38 = *(_QWORD *)v37),
            v39 = *(_QWORD *)(16 * (*v36 & 0xFFFFFFFE) + 0x28),
            v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 + 3280) + 104))(v39, v38),
            v40 == 2))
      {
        WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 9, v33, v34, v14, v15, v16, v17, v18);
        goto LABEL_40;
      }
      if (v40 != 1)
      {
        WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::take(&v73, (uint64_t *)this + 9, v33, v34, v15, v16, v17, v18);
        *((_BYTE *)this + 38) = 1;
        v47 = __ldxr(v10);
        if (v47 == 1)
        {
          if (!__stlxr(0, v10))
          {
LABEL_30:
            ++*((_QWORD *)a2 + 11679);
            *((_BYTE *)a2 + 41452) = 0;
            (*(void (**)(uint64_t *, uint64_t *))(*v76 + 16))(v76, v75);
            v55 = v73;
            v73 = 0;
            if (v55)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v55, v48, v49, v50, v51, v52, v53, v54);
            v56 = *((_QWORD *)a2 + 2);
            if (v56 && *((_QWORD *)a2 + 3) != v56)
            {
              JSC::VM::clearException((uint64_t)a2);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 + 3280) + 88))(v39, v56);
            }
            JSC::VM::drainMicrotasks(a2, v48, v49, v50, v51, v52, v53, v54);
            if (__ldaxr(v10))
            {
              __clrex();
              goto LABEL_37;
            }
            if (__stxr(1u, v10))
LABEL_37:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
            *((_BYTE *)this + 38) = 0;
            if (v73)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v73, v12, v13, v14, v15, v16, v17, v18);
            goto LABEL_40;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v41, v42, v43, v44, v45, v46);
        goto LABEL_30;
      }
      v68 = v76;
      v76 = 0;
      v73 = v31;
      v74 = v68;
      if (HIDWORD(v78) == (_DWORD)v78)
      {
        WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>>((uint64_t)&v77, (unint64_t)&v73);
      }
      else
      {
        v69 = HIDWORD(v78) + 1;
        v70 = (uint64_t **)(v77 + 16 * HIDWORD(v78));
        *v70 = v31;
        v71 = v74;
        v74 = 0;
        v70[1] = v71;
        HIDWORD(v78) = v69;
      }
      v72 = v74;
      v74 = 0;
      if (v72)
        (*(void (**)(uint64_t *))(*v72 + 8))(v72);
    }
LABEL_40:
    if (v76)
      (*(void (**)(uint64_t *))(*v76 + 8))(v76);
  }
  while (*((_QWORD *)this + 5) != *((_QWORD *)this + 6));
  v58 = HIDWORD(v78);
  if (HIDWORD(v78))
  {
    v59 = v77;
    do
    {
      v60 = v58 - 1;
      v61 = (uint64_t *)(v59 + 16 * v60);
      v62 = *v61;
      v63 = v61[1];
      v61[1] = 0;
      HIDWORD(v78) = v58 - 1;
      WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::expandCapacityIfNeeded((uint64_t *)this + 5);
      v64 = *v19;
      if (!*v19)
        v64 = *((unsigned int *)this + 16);
      v65 = v64 - 1;
      *((_QWORD *)this + 5) = v65;
      v66 = (_QWORD *)(*((_QWORD *)this + 7) + 16 * v65);
      *v66 = v62;
      v66[1] = v63;
      --v58;
    }
    while ((_DWORD)v60);
  }
LABEL_6:
  WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::removeIf<JSC::DeferredWorkTimer::doWork(JSC::VM &)::$_0>((uint64_t *)this + 9, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  v28 = *((_QWORD *)this + 9);
  if (!v28 || !*(_DWORD *)(v28 - 12))
  {
    if (*((_BYTE *)this + 37))
    {
      v67 = (CFRunLoopRef *)WTF::RunLoop::current(v20);
      WTF::RunLoop::stop(v67);
    }
  }
  WTF::Vector<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v77, v21, v22, v23, v24, v25, v26, v27);
LABEL_10:
  v29 = __ldxr(v10);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v10))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v13, v14, v15, v16, v17, v18);
}

uint64_t WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::takeFirst(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*a2 == a2[1])
  {
    result = 80;
    __break(0xC471u);
  }
  else
  {
    v2 = (uint64_t *)(a2[2] + 16 * *a2);
    v3 = *v2;
    v4 = v2[1];
    v2[1] = 0;
    *a1 = v3;
    a1[1] = v4;
    return WTF::Deque<std::tuple<JSC::DeferredWorkTimer::TicketData *,WTF::Function<void ()(JSC::DeferredWorkTimer::TicketData *)>>,0ul>::removeFirst(a2);
  }
  return result;
}

uint64_t JSC::DeferredWorkTimer::TicketData::isCancelled(JSC::DeferredWorkTimer::TicketData *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1
    && (*(_BYTE *)(v1 + 8) & 3) == 0
    && *(_QWORD *)v1
    && (v2 = *((_QWORD *)this + 3)) != 0
    && (*(_BYTE *)(v2 + 8) & 3) == 0
    && *(_QWORD *)v2)
  {
    return JSC::DeferredWorkTimer::TicketData::hasValidTarget(this) ^ 1;
  }
  else
  {
    return 1;
  }
}

void WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;

  if (*a1)
  {
    v8 = (uint64_t **)(*a1 + 8 * *(unsigned int *)(*a1 - 4));
    if (v8 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v8 = 0;
  }
  if (v8 != a2)
    WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::remove(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DeferredWorkTimer::TicketData::target(JSC::DeferredWorkTimer::TicketData *this)
{
  _DWORD *v1;
  _BYTE *v2;
  uint64_t result;

  v1 = (_DWORD *)*((_QWORD *)this + 1);
  if (*v1 < (*v1 - 1))
  {
    result = 146;
    __break(0xC471u);
  }
  else
  {
    v2 = *(_BYTE **)&v1[2 * (*v1 - 1) + 2];
    if (!v2 || (v2[8] & 3) != 0)
      return 0;
    else
      return *(_QWORD *)v2;
  }
  return result;
}

void WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::take(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;

  v8 = *a2;
  if (*a2)
    v8 += 8 * *(unsigned int *)(v8 - 4);
  if ((uint64_t **)v8 == a3)
  {
    *a1 = 0;
  }
  else
  {
    v9 = *a3;
    if (*a3)
      *a3 = 0;
    *a1 = v9;
    WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::remove(a2, a3, a4, a4, a5, a6, a7, a8);
  }
}

void WTF::HashSet<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTableTraits>::removeIf<JSC::DeferredWorkTimer::doWork(JSC::VM &)::$_0>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  JSC::DeferredWorkTimer::TicketData *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        v13 = v12;
        v14 = *(JSC::DeferredWorkTimer::TicketData **)(v8 + 8 * v12);
        if ((unint64_t)v14 + 1 >= 2 && JSC::DeferredWorkTimer::TicketData::isCancelled(v14))
        {
          v17 = *(uint64_t **)(v8 + 8 * v12);
          *(_QWORD *)(v8 + 8 * v12) = 0;
          if (v17)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v17, v15, v16, a4, a5, a6, a7, a8);
          *(_QWORD *)(v8 + 8 * v12) = -1;
          ++v11;
        }
        --v12;
      }
      while (v13);
      v18 = *a1;
      if (v11)
      {
        *(_DWORD *)(v18 - 16) += v11;
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v11;
        v18 = *a1;
      }
      if (v18)
      {
        v21 = *(_DWORD *)(v18 - 4);
        v22 = *(unsigned int *)(v18 - 12);
        if (v21 >= 9 && 6 * (int)v22 < v21)
        {
          v24 = (v22 - 1) | ((v22 - 1) >> 1) | ((((_DWORD)v22 - 1) | ((v22 - 1) >> 1)) >> 2);
          v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
          v26 = (v25 | HIWORD(v25)) + 1;
          if (v26 > 0x400)
          {
            if (v26 > 2 * v22)
              goto LABEL_27;
          }
          else if (3 * v26 > 4 * v22)
          {
LABEL_25:
            v27 = (double)v22;
            v28 = (double)v26;
            v29 = 0.604166667;
LABEL_28:
            if (v28 * v29 <= v27)
              LODWORD(v26) = 2 * v26;
            if (v26 <= 8)
              v30 = 8;
            else
              v30 = v26;
            WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::rehash(a1, v30, 0, a4, a5, a6, a7, a8);
            return;
          }
          LODWORD(v26) = 2 * v26;
          if (v26 <= 0x400)
            goto LABEL_25;
LABEL_27:
          v27 = (double)v22;
          v28 = (double)v26;
          v29 = 0.416666667;
          goto LABEL_28;
        }
      }
    }
  }
}

void JSC::DeferredWorkTimer::runRunLoop(JSC::DeferredWorkTimer *this)
{
  uint64_t v1;
  void *v2;

  *((_BYTE *)this + 37) = 1;
  v1 = *((_QWORD *)this + 9);
  if (v1)
  {
    if (*(_DWORD *)(v1 - 12))
    {
      v2 = (void *)MEMORY[0x19AEBB88C]();
      CFRunLoopRun();
      objc_autoreleasePoolPop(v2);
    }
  }
}

uint64_t JSC::DeferredWorkTimer::addPendingWork(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t result;
  _QWORD v28[2];
  char v29;
  uint64_t *v30;

  v7 = *(JSC::JSGlobalObject **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v8 = (*(uint64_t (**)(JSC::JSGlobalObject *))(*((_QWORD *)v7 + 410) + 96))(v7);
  JSC::Weak<JSC::JSCell>::Weak(v28, (uint64_t)a3, 0, 0);
  v9 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v9 == *(_DWORD *)(a4 + 8))
  {
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>(a4, (unint64_t)v28);
  }
  else
  {
    v10 = *(_QWORD *)a4;
    v11 = v28[0];
    v28[0] = 0;
    *(_QWORD *)(v10 + 8 * v9) = v11;
    *(_DWORD *)(a4 + 12) = v9 + 1;
  }
  if (v28[0])
    *(_QWORD *)(v28[0] + 8) = 3;
  v12 = WTF::fastMalloc((WTF *)0x20);
  v30 = (uint64_t *)JSC::DeferredWorkTimer::TicketData::TicketData(v12, v7, v8, (uint64_t *)a4);
  WTF::HashTable<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>,WTF::HashTraits<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>>::add((uint64_t *)(a1 + 72), (uint64_t *)&v30, v13, v14, v15, v16, v17, v18, (uint64_t)v28);
  if (v29)
  {
    v26 = v30;
    v30 = 0;
    if (v26)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v26, v19, v20, v21, v22, v23, v24, v25);
    return v12;
  }
  else
  {
    result = 180;
    __break(0xC471u);
  }
  return result;
}

_QWORD *JSC::Weak<JSC::JSCell>::Weak(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    if ((a2 & 8) != 0)
      v5 = (a2 - 112) | 1;
    else
      v5 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v5 & 1) != 0)
      v6 = (_QWORD *)(v5 + 47);
    else
      v6 = (_QWORD *)(*(_QWORD *)v5 + 32);
    v4 = (_QWORD *)v6[2];
    if (!v4)
    {
      v21 = v5;
      v25 = a2;
      v23 = a4;
      v24 = a3;
      v22 = result;
      while (1)
      {
        v7 = v6;
        v8 = (_QWORD *)v6[3];
        if (!v8)
          break;
        v6[3] = v8[2];
        v4 = (_QWORD *)v8[4];
        v8[3] = 257;
        v8[4] = 0;
        if (v4)
          goto LABEL_10;
      }
      v9 = v6[1];
      v10 = v6[6];
      if (!v9)
      {
        v11 = *(_QWORD **)(v10 + 488);
        *v7 = v10 + 480;
        v7[1] = v11;
        *v11 = v7;
        *(_QWORD *)(v10 + 488) = v7;
      }
      *(_QWORD *)(v10 + 1072) += 1024;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v12, v21);
      JSC::Heap::didAllocate((JSC::Heap *)(v7[6] + 192), 0x400uLL, v13, v14, v15, v16, v17, v18);
      v6 = v7;
      v19 = v7 + 4;
      v20 = v7[5];
      if (v20)
        v19 = (_QWORD *)(v20 + 16);
      *v19 = v12;
      v7[5] = v12;
      v12[1] = v20;
      v12[2] = 0;
      v4 = (_QWORD *)v12[4];
      v12[3] = 257;
      v12[4] = 0;
      result = v22;
      a4 = v23;
      a3 = v24;
      a2 = v25;
    }
LABEL_10:
    v6[2] = *v4;
    *v4 = a2;
    v4[1] = a3;
    v4[2] = a4;
  }
  else
  {
    v4 = 0;
  }
  *result = v4;
  return result;
}

