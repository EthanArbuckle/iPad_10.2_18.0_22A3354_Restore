void Inspector::CanvasFrontendDispatcher::programDeleted(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "Canvas.programDeleted";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "programId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::ConsoleFrontendDispatcher::messageAdded(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "Console.messageAdded";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "message";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::ConsoleFrontendDispatcher::messageRepeatCountUpdated(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2100000002;
  *(_QWORD *)(v8 + 8) = "Console.messageRepeatCountUpdated";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x500000002;
  *(_QWORD *)(v29 + 8) = "count";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 8))
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0x900000002;
    *(_QWORD *)(v49 + 8) = "timestamp";
    *(_DWORD *)(v49 + 16) = 4;
    v162 = (WTF *)v49;
    if (!*((_BYTE *)a3 + 8))
    {
      __break(1u);
      return;
    }
    v50 = *a3;
    v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v51 = 0x200000001;
    *((_QWORD *)v51 + 1) = v50;
    v163 = v51;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v52, v53, v54, v55, v56, (uint64_t)v164);
    if (v165)
    {
      v64 = (uint64_t *)(v28 + 24);
      v65 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
      {
        v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
        v65 = *(unsigned int *)(v28 + 36);
        v160 = *(_QWORD *)(v28 + 24);
        v161 = *v159;
        if (*v159)
          *v161 += 2;
        *(_QWORD *)(v160 + 8 * v65) = v161;
      }
      else
      {
        v66 = *v64;
        v67 = v162;
        if (v162)
          *(_DWORD *)v162 += 2;
        *(_QWORD *)(v66 + 8 * v65) = v67;
      }
      *(_DWORD *)(v28 + 36) = v65 + 1;
    }
    v68 = v163;
    v163 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
      else
        --*(_DWORD *)v68;
    }
    v69 = v162;
    v162 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v157 = *(_QWORD *)(v6 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v84) = v158;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::ConsoleFrontendDispatcher::messagesCleared(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  char *v29;
  int v30;
  char *v31;
  int *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD **v132;
  uint64_t v133;
  _DWORD *v134;
  _DWORD **v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD **v138;
  uint64_t v139;
  _DWORD *v140;
  WTF *v141;
  WTF *v142;
  WTF::StringImpl *v143[2];
  char v144;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v141 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Console.messagesCleared";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v142 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v141, (const WTF::StringImpl *)&v142, v8, v9, v10, v11, v12, (uint64_t)v143);
  if (v144)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v132 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v141);
      v21 = *(unsigned int *)(v4 + 36);
      v133 = *(_QWORD *)(v4 + 24);
      v134 = *v132;
      if (*v132)
        *v134 += 2;
      *(_QWORD *)(v133 + 8 * v21) = v134;
    }
    else
    {
      v22 = *v20;
      v23 = v141;
      if (v141)
        *(_DWORD *)v141 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v142;
  v142 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v141;
  v141 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "reason";
  *(_DWORD *)(v27 + 16) = 4;
  v141 = (WTF *)v27;
  v28 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * a2];
  v29 = v28[1];
  if (v29)
  {
    v30 = (_DWORD)v29 - 1;
    if (v29 == (char *)1)
    {
      v32 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v31 = *v28;
      v32 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v32 = 2;
      v32[1] = v30;
      *((_QWORD *)v32 + 1) = v31;
      v32[4] = 4;
    }
  }
  else
  {
    v32 = 0;
  }
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  *((_QWORD *)v33 + 1) = v32;
  if (v32)
    *v32 += 2;
  v142 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v141, (const WTF::StringImpl *)&v142, v34, v35, v36, v37, v38, (uint64_t)v143);
  if (v144)
  {
    v46 = (uint64_t *)(v26 + 24);
    v47 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v26 + 32))
    {
      v135 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v141);
      v47 = *(unsigned int *)(v26 + 36);
      v136 = *(_QWORD *)(v26 + 24);
      v137 = *v135;
      if (*v135)
        *v137 += 2;
      *(_QWORD *)(v136 + 8 * v47) = v137;
    }
    else
    {
      v48 = *v46;
      v49 = v141;
      if (v141)
        *(_DWORD *)v141 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v26 + 36) = v47 + 1;
  }
  v50 = v142;
  v142 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
      if (!v32)
        goto LABEL_32;
      goto LABEL_30;
    }
    --*(_DWORD *)v50;
  }
  if (!v32)
    goto LABEL_32;
LABEL_30:
  if (*v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
  }
  else
  {
    *v32 -= 2;
  }
LABEL_32:
  v51 = v141;
  v141 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x600000002;
  *(_QWORD *)(v52 + 8) = "params";
  *(_DWORD *)(v52 + 16) = 4;
  v141 = (WTF *)v26;
  v142 = (WTF *)v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v142, (const WTF::StringImpl *)&v141, v53, v54, v55, v56, v57, (uint64_t)v143);
  if (v144)
  {
    v65 = (uint64_t *)(v4 + 24);
    v66 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v4 + 32))
    {
      v138 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v142);
      v66 = *(unsigned int *)(v4 + 36);
      v139 = *(_QWORD *)(v4 + 24);
      v140 = *v138;
      if (*v138)
        *v140 += 2;
      *(_QWORD *)(v139 + 8 * v66) = v140;
    }
    else
    {
      v67 = *v65;
      v68 = v142;
      if (v142)
        *(_DWORD *)v142 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v4 + 36) = v66 + 1;
  }
  v69 = v141;
  v141 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v142;
  v142 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v59, v60, v61, v62, v63, v64, v143);
  v79 = *(unsigned int *)(v71 + 20);
  if ((_DWORD)v79)
  {
    v80 = *(uint64_t **)(v71 + 8);
    v81 = 8 * v79;
    do
    {
      v82 = *v80++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v82 + 24))(v82, v143);
      v81 -= 8;
    }
    while (v81);
  }
  v83 = v143[0];
  v143[0] = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v72, v73, v74, v75, v76, v77, v78);
  else
    --*(_DWORD *)v4;
}

void Inspector::ConsoleFrontendDispatcher::heapSnapshot(Inspector::ConsoleFrontendDispatcher *this, double a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199[2];
  char v200;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v197 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1400000002;
  *(_QWORD *)(v10 + 8) = "Console.heapSnapshot";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v198 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v12, v13, v14, v15, v16, (uint64_t)v199);
  if (v200)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v182 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v197);
      v25 = *(unsigned int *)(v8 + 36);
      v183 = *(_QWORD *)(v8 + 24);
      v184 = *v182;
      if (*v182)
        *v184 += 2;
      *(_QWORD *)(v183 + 8 * v25) = v184;
    }
    else
    {
      v26 = *v24;
      v27 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v198;
  v198 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v197;
  v197 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "timestamp";
  *(_DWORD *)(v32 + 16) = 4;
  v197 = (WTF *)v32;
  v33 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x200000001;
  v33[1] = a2;
  v198 = (WTF *)v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v34, v35, v36, v37, v38, (uint64_t)v199);
  if (v200)
  {
    v46 = (uint64_t *)(v30 + 24);
    v47 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v30 + 32))
    {
      v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v197);
      v47 = *(unsigned int *)(v30 + 36);
      v186 = *(_QWORD *)(v30 + 24);
      v187 = *v185;
      if (*v185)
        *v187 += 2;
      *(_QWORD *)(v186 + 8 * v47) = v187;
    }
    else
    {
      v48 = *v46;
      v49 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v30 + 36) = v47 + 1;
  }
  v50 = v198;
  v198 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0xC00000002;
  *(_QWORD *)(v52 + 8) = "snapshotData";
  *(_DWORD *)(v52 + 16) = 4;
  v197 = (WTF *)v52;
  v53 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x400000001;
  v59 = *(_DWORD **)a3;
  *((_QWORD *)v53 + 1) = *(_QWORD *)a3;
  if (v59)
    *v59 += 2;
  v198 = v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v54, v55, v56, v57, v58, (uint64_t)v199);
  if (v200)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v197);
      v68 = *(unsigned int *)(v30 + 36);
      v189 = *(_QWORD *)(v30 + 24);
      v190 = *v188;
      if (*v188)
        *v190 += 2;
      *(_QWORD *)(v189 + 8 * v68) = v190;
    }
    else
    {
      v69 = *v67;
      v70 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v198;
  v198 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v197;
  v197 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  if (*(_QWORD *)a4)
  {
    v73 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v73 = 0x500000002;
    *(_QWORD *)(v73 + 8) = "title";
    *(_DWORD *)(v73 + 16) = 4;
    v197 = (WTF *)v73;
    v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = 0x400000001;
    v80 = *(_DWORD **)a4;
    *((_QWORD *)v74 + 1) = *(_QWORD *)a4;
    if (v80)
      *v80 += 2;
    v198 = v74;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v75, v76, v77, v78, v79, (uint64_t)v199);
    if (v200)
    {
      v88 = (uint64_t *)(v30 + 24);
      v89 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v89 == *(_DWORD *)(v30 + 32))
      {
        v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v197);
        v89 = *(unsigned int *)(v30 + 36);
        v195 = *(_QWORD *)(v30 + 24);
        v196 = *v194;
        if (*v194)
          *v196 += 2;
        *(_QWORD *)(v195 + 8 * v89) = v196;
      }
      else
      {
        v90 = *v88;
        v91 = v197;
        if (v197)
          *(_DWORD *)v197 += 2;
        *(_QWORD *)(v90 + 8 * v89) = v91;
      }
      *(_DWORD *)(v30 + 36) = v89 + 1;
    }
    v92 = v198;
    v198 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 1)
        WTF::JSONImpl::Value::operator delete(v92, v81, v82, v83, v84, v85, v86, v87);
      else
        --*(_DWORD *)v92;
    }
    v93 = v197;
    v197 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
      {
        WTF::StringImpl::~StringImpl(v93, v81, v82, v83, v84, v85, v86, v87);
        WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
      }
      else
      {
        *(_DWORD *)v93 -= 2;
      }
    }
  }
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x600000002;
  *(_QWORD *)(v94 + 8) = "params";
  *(_DWORD *)(v94 + 16) = 4;
  v197 = (WTF *)v30;
  v198 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v95, v96, v97, v98, v99, (uint64_t)v199);
  if (v200)
  {
    v107 = (uint64_t *)(v8 + 24);
    v108 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v8 + 32))
    {
      v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v198);
      v108 = *(unsigned int *)(v8 + 36);
      v192 = *(_QWORD *)(v8 + 24);
      v193 = *v191;
      if (*v191)
        *v193 += 2;
      *(_QWORD *)(v192 + 8 * v108) = v193;
    }
    else
    {
      v109 = *v107;
      v110 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v8 + 36) = v108 + 1;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v101, v102, v103, v104, v105, v106, v199);
  v121 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v121)
  {
    v122 = *(uint64_t **)(v113 + 8);
    v123 = 8 * v121;
    do
    {
      v124 = *v122++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v124 + 24))(v124, v199);
      v123 -= 8;
    }
    while (v123);
  }
  v125 = v199[0];
  v199[0] = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v114, v115, v116, v117, v118, v119, v120);
  else
    --*(_DWORD *)v8;
}

void Inspector::DOMFrontendDispatcher::documentUpdated(Inspector::DOMFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1300000002;
  *(_QWORD *)(v4 + 8) = "DOM.documentUpdated";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::DOMFrontendDispatcher::inspect(Inspector::DOMFrontendDispatcher *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xB00000002;
  *(_QWORD *)(v6 + 8) = "DOM.inspect";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "nodeId";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMFrontendDispatcher::setChildNodes(uint64_t *a1, int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1100000002;
  *(_QWORD *)(v8 + 8) = "DOM.setChildNodes";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x800000002;
  *(_QWORD *)(v29 + 8) = "parentId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x500000002;
  *(_QWORD *)(v49 + 8) = "nodes";
  *(_DWORD *)(v49 + 16) = 4;
  v50 = *a3;
  *a3 = 0;
  v161 = v50;
  v162 = (WTF *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v28 + 16), &v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v161;
  v161 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v162;
  v162 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::attributeModified(Inspector::DOMFrontendDispatcher *this, int a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199[2];
  char v200;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v197 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1500000002;
  *(_QWORD *)(v10 + 8) = "DOM.attributeModified";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v198 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v12, v13, v14, v15, v16, (uint64_t)v199);
  if (v200)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v182 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v197);
      v25 = *(unsigned int *)(v8 + 36);
      v183 = *(_QWORD *)(v8 + 24);
      v184 = *v182;
      if (*v182)
        *v184 += 2;
      *(_QWORD *)(v183 + 8 * v25) = v184;
    }
    else
    {
      v26 = *v24;
      v27 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v198;
  v198 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v197;
  v197 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x600000002;
  *(_QWORD *)(v32 + 8) = "nodeId";
  *(_DWORD *)(v32 + 16) = 4;
  v197 = (WTF *)v32;
  v33 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x300000001;
  v33[1] = (double)a2;
  v198 = (WTF *)v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v34, v35, v36, v37, v38, (uint64_t)v199);
  if (v200)
  {
    v46 = (uint64_t *)(v30 + 24);
    v47 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v30 + 32))
    {
      v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v197);
      v47 = *(unsigned int *)(v30 + 36);
      v186 = *(_QWORD *)(v30 + 24);
      v187 = *v185;
      if (*v185)
        *v187 += 2;
      *(_QWORD *)(v186 + 8 * v47) = v187;
    }
    else
    {
      v48 = *v46;
      v49 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v30 + 36) = v47 + 1;
  }
  v50 = v198;
  v198 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x400000002;
  *(_QWORD *)(v52 + 8) = "name";
  *(_DWORD *)(v52 + 16) = 4;
  v197 = (WTF *)v52;
  v53 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x400000001;
  v59 = *(_DWORD **)a3;
  *((_QWORD *)v53 + 1) = *(_QWORD *)a3;
  if (v59)
    *v59 += 2;
  v198 = v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v54, v55, v56, v57, v58, (uint64_t)v199);
  if (v200)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v197);
      v68 = *(unsigned int *)(v30 + 36);
      v189 = *(_QWORD *)(v30 + 24);
      v190 = *v188;
      if (*v188)
        *v190 += 2;
      *(_QWORD *)(v189 + 8 * v68) = v190;
    }
    else
    {
      v69 = *v67;
      v70 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v198;
  v198 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v197;
  v197 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x500000002;
  *(_QWORD *)(v73 + 8) = "value";
  *(_DWORD *)(v73 + 16) = 4;
  v197 = (WTF *)v73;
  v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v74 = 0x400000001;
  v80 = *(_DWORD **)a4;
  *((_QWORD *)v74 + 1) = *(_QWORD *)a4;
  if (v80)
    *v80 += 2;
  v198 = v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v75, v76, v77, v78, v79, (uint64_t)v199);
  if (v200)
  {
    v88 = (uint64_t *)(v30 + 24);
    v89 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v30 + 32))
    {
      v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v197);
      v89 = *(unsigned int *)(v30 + 36);
      v192 = *(_QWORD *)(v30 + 24);
      v193 = *v191;
      if (*v191)
        *v193 += 2;
      *(_QWORD *)(v192 + 8 * v89) = v193;
    }
    else
    {
      v90 = *v88;
      v91 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v30 + 36) = v89 + 1;
  }
  v92 = v198;
  v198 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::JSONImpl::Value::operator delete(v92, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v92;
  }
  v93 = v197;
  v197 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x600000002;
  *(_QWORD *)(v94 + 8) = "params";
  *(_DWORD *)(v94 + 16) = 4;
  v197 = (WTF *)v30;
  v198 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v95, v96, v97, v98, v99, (uint64_t)v199);
  if (v200)
  {
    v107 = (uint64_t *)(v8 + 24);
    v108 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v8 + 32))
    {
      v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v198);
      v108 = *(unsigned int *)(v8 + 36);
      v195 = *(_QWORD *)(v8 + 24);
      v196 = *v194;
      if (*v194)
        *v196 += 2;
      *(_QWORD *)(v195 + 8 * v108) = v196;
    }
    else
    {
      v109 = *v107;
      v110 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v8 + 36) = v108 + 1;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v101, v102, v103, v104, v105, v106, v199);
  v121 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v121)
  {
    v122 = *(uint64_t **)(v113 + 8);
    v123 = 8 * v121;
    do
    {
      v124 = *v122++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v124 + 24))(v124, v199);
      v123 -= 8;
    }
    while (v123);
  }
  v125 = v199[0];
  v199[0] = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v114, v115, v116, v117, v118, v119, v120);
  else
    --*(_DWORD *)v8;
}

void Inspector::DOMFrontendDispatcher::attributeRemoved(Inspector::DOMFrontendDispatcher *this, int a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1400000002;
  *(_QWORD *)(v8 + 8) = "DOM.attributeRemoved";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "nodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x400000002;
  *(_QWORD *)(v49 + 8) = "name";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *(_DWORD **)a3;
  *((_QWORD *)v50 + 1) = *(_QWORD *)a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::inlineStyleInvalidated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1A00000002;
  *(_QWORD *)(v6 + 8) = "DOM.inlineStyleInvalidated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "nodeIds";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v26 + 16), &v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMFrontendDispatcher::characterDataModified(Inspector::DOMFrontendDispatcher *this, int a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1900000002;
  *(_QWORD *)(v8 + 8) = "DOM.characterDataModified";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "nodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xD00000002;
  *(_QWORD *)(v49 + 8) = "characterData";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *(_DWORD **)a3;
  *((_QWORD *)v50 + 1) = *(_QWORD *)a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::childNodeCountUpdated(Inspector::DOMFrontendDispatcher *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1900000002;
  *(_QWORD *)(v8 + 8) = "DOM.childNodeCountUpdated";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "nodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xE00000002;
  *(_QWORD *)(v49 + 8) = "childNodeCount";
  *(_DWORD *)(v49 + 16) = 4;
  v161 = (WTF *)v49;
  v50 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x300000001;
  v50[1] = (double)a3;
  v162 = (WTF *)v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v161);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v162;
  v162 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v161;
  v161 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::childNodeInserted(uint64_t *a1, int a2, int a3, WTF **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD **v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  WTF *v195;
  WTF *v196;
  WTF::StringImpl *v197[2];
  char v198;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v195 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1500000002;
  *(_QWORD *)(v10 + 8) = "DOM.childNodeInserted";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v196 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v12, v13, v14, v15, v16, (uint64_t)v197);
  if (v198)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v180 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v195);
      v25 = *(unsigned int *)(v8 + 36);
      v181 = *(_QWORD *)(v8 + 24);
      v182 = *v180;
      if (*v180)
        *v182 += 2;
      *(_QWORD *)(v181 + 8 * v25) = v182;
    }
    else
    {
      v26 = *v24;
      v27 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v196;
  v196 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v195;
  v195 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xC00000002;
  *(_QWORD *)(v32 + 8) = "parentNodeId";
  *(_DWORD *)(v32 + 16) = 4;
  v195 = (WTF *)v32;
  v33 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x300000001;
  v33[1] = (double)a2;
  v196 = (WTF *)v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v34, v35, v36, v37, v38, (uint64_t)v197);
  if (v198)
  {
    v46 = (uint64_t *)(v30 + 24);
    v47 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v30 + 32))
    {
      v183 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v195);
      v47 = *(unsigned int *)(v30 + 36);
      v184 = *(_QWORD *)(v30 + 24);
      v185 = *v183;
      if (*v183)
        *v185 += 2;
      *(_QWORD *)(v184 + 8 * v47) = v185;
    }
    else
    {
      v48 = *v46;
      v49 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v30 + 36) = v47 + 1;
  }
  v50 = v196;
  v196 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v195;
  v195 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0xE00000002;
  *(_QWORD *)(v52 + 8) = "previousNodeId";
  *(_DWORD *)(v52 + 16) = 4;
  v195 = (WTF *)v52;
  v53 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x300000001;
  v53[1] = (double)a3;
  v196 = (WTF *)v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v54, v55, v56, v57, v58, (uint64_t)v197);
  if (v198)
  {
    v66 = (uint64_t *)(v30 + 24);
    v67 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v30 + 32))
    {
      v186 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v195);
      v67 = *(unsigned int *)(v30 + 36);
      v187 = *(_QWORD *)(v30 + 24);
      v188 = *v186;
      if (*v186)
        *v188 += 2;
      *(_QWORD *)(v187 + 8 * v67) = v188;
    }
    else
    {
      v68 = *v66;
      v69 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v30 + 36) = v67 + 1;
  }
  v70 = v196;
  v196 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v195;
  v195 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x400000002;
  *(_QWORD *)(v72 + 8) = "node";
  *(_DWORD *)(v72 + 16) = 4;
  v73 = *a4;
  *a4 = 0;
  v195 = v73;
  v196 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v195, v74, v75, v76, v77, v78, (uint64_t)v197);
  if (v198)
  {
    v86 = (uint64_t *)(v30 + 24);
    v87 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v87 == *(_DWORD *)(v30 + 32))
    {
      v189 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v196);
      v87 = *(unsigned int *)(v30 + 36);
      v190 = *(_QWORD *)(v30 + 24);
      v191 = *v189;
      if (*v189)
        *v191 += 2;
      *(_QWORD *)(v190 + 8 * v87) = v191;
    }
    else
    {
      v88 = *v86;
      v89 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v88 + 8 * v87) = v89;
    }
    *(_DWORD *)(v30 + 36) = v87 + 1;
  }
  v90 = v195;
  v195 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 1)
      WTF::JSONImpl::Value::operator delete(v90, v79, v80, v81, v82, v83, v84, v85);
    else
      --*(_DWORD *)v90;
  }
  v91 = v196;
  v196 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x600000002;
  *(_QWORD *)(v92 + 8) = "params";
  *(_DWORD *)(v92 + 16) = 4;
  v195 = (WTF *)v30;
  v196 = (WTF *)v92;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v195, v93, v94, v95, v96, v97, (uint64_t)v197);
  if (v198)
  {
    v105 = (uint64_t *)(v8 + 24);
    v106 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v106 == *(_DWORD *)(v8 + 32))
    {
      v192 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v196);
      v106 = *(unsigned int *)(v8 + 36);
      v193 = *(_QWORD *)(v8 + 24);
      v194 = *v192;
      if (*v192)
        *v194 += 2;
      *(_QWORD *)(v193 + 8 * v106) = v194;
    }
    else
    {
      v107 = *v105;
      v108 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v107 + 8 * v106) = v108;
    }
    *(_DWORD *)(v8 + 36) = v106 + 1;
  }
  v109 = v195;
  v195 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::JSONImpl::Value::operator delete(v109, v98, v99, v100, v101, v102, v103, v104);
    else
      --*(_DWORD *)v109;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v111 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v99, v100, v101, v102, v103, v104, v197);
  v119 = *(unsigned int *)(v111 + 20);
  if ((_DWORD)v119)
  {
    v120 = *(uint64_t **)(v111 + 8);
    v121 = 8 * v119;
    do
    {
      v122 = *v120++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v122 + 24))(v122, v197);
      v121 -= 8;
    }
    while (v121);
  }
  v123 = v197[0];
  v197[0] = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v112, v113, v114, v115, v116, v117, v118);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v112, v113, v114, v115, v116, v117, v118);
  else
    --*(_DWORD *)v8;
}

void Inspector::DOMFrontendDispatcher::childNodeRemoved(Inspector::DOMFrontendDispatcher *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1400000002;
  *(_QWORD *)(v8 + 8) = "DOM.childNodeRemoved";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0xC00000002;
  *(_QWORD *)(v29 + 8) = "parentNodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x600000002;
  *(_QWORD *)(v49 + 8) = "nodeId";
  *(_DWORD *)(v49 + 16) = 4;
  v161 = (WTF *)v49;
  v50 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x300000001;
  v50[1] = (double)a3;
  v162 = (WTF *)v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v161);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v162;
  v162 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v161;
  v161 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::willDestroyDOMNode(Inspector::DOMFrontendDispatcher *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1600000002;
  *(_QWORD *)(v6 + 8) = "DOM.willDestroyDOMNode";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "nodeId";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMFrontendDispatcher::shadowRootPushed(uint64_t *a1, int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1400000002;
  *(_QWORD *)(v8 + 8) = "DOM.shadowRootPushed";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "hostId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x400000002;
  *(_QWORD *)(v49 + 8) = "root";
  *(_DWORD *)(v49 + 16) = 4;
  v50 = *a3;
  *a3 = 0;
  v161 = v50;
  v162 = (WTF *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v161;
  v161 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v162;
  v162 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::shadowRootPopped(Inspector::DOMFrontendDispatcher *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1400000002;
  *(_QWORD *)(v8 + 8) = "DOM.shadowRootPopped";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "hostId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x600000002;
  *(_QWORD *)(v49 + 8) = "rootId";
  *(_DWORD *)(v49 + 16) = 4;
  v161 = (WTF *)v49;
  v50 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x300000001;
  v50[1] = (double)a3;
  v162 = (WTF *)v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v161);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v162;
  v162 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v161;
  v161 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::customElementStateChanged(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  int v52;
  char *v53;
  int *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD **v162;
  uint64_t v163;
  _DWORD *v164;
  _DWORD **v165;
  uint64_t v166;
  _DWORD *v167;
  _DWORD **v168;
  uint64_t v169;
  _DWORD *v170;
  _DWORD **v171;
  uint64_t v172;
  _DWORD *v173;
  WTF *v174;
  WTF *v175;
  WTF::StringImpl *v176[2];
  char v177;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v174 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1D00000002;
  *(_QWORD *)(v8 + 8) = "DOM.customElementStateChanged";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v175 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v174, (const WTF::StringImpl *)&v175, v10, v11, v12, v13, v14, (uint64_t)v176);
  if (v177)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v162 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v174);
      v23 = *(unsigned int *)(v6 + 36);
      v163 = *(_QWORD *)(v6 + 24);
      v164 = *v162;
      if (*v162)
        *v164 += 2;
      *(_QWORD *)(v163 + 8 * v23) = v164;
    }
    else
    {
      v24 = *v22;
      v25 = v174;
      if (v174)
        *(_DWORD *)v174 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v175;
  v175 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v174;
  v174 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "nodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v174 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v175 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v174, (const WTF::StringImpl *)&v175, v31, v32, v33, v34, v35, (uint64_t)v176);
  if (v177)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v165 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v174);
      v44 = *(unsigned int *)(v28 + 36);
      v166 = *(_QWORD *)(v28 + 24);
      v167 = *v165;
      if (*v165)
        *v167 += 2;
      *(_QWORD *)(v166 + 8 * v44) = v167;
    }
    else
    {
      v45 = *v43;
      v46 = v174;
      if (v174)
        *(_DWORD *)v174 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v175;
  v175 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v174;
  v174 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x1200000002;
  *(_QWORD *)(v49 + 8) = "customElementState";
  *(_DWORD *)(v49 + 16) = 4;
  v174 = (WTF *)v49;
  v50 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * a3];
  v51 = v50[1];
  if (v51)
  {
    v52 = (_DWORD)v51 - 1;
    if (v51 == (char *)1)
    {
      v54 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v53 = *v50;
      v54 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v54 = 2;
      v54[1] = v52;
      *((_QWORD *)v54 + 1) = v53;
      v54[4] = 4;
    }
  }
  else
  {
    v54 = 0;
  }
  v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v55 = 0x400000001;
  *((_QWORD *)v55 + 1) = v54;
  if (v54)
    *v54 += 2;
  v175 = v55;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v174, (const WTF::StringImpl *)&v175, v56, v57, v58, v59, v60, (uint64_t)v176);
  if (v177)
  {
    v68 = (uint64_t *)(v28 + 24);
    v69 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v69 == *(_DWORD *)(v28 + 32))
    {
      v168 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v174);
      v69 = *(unsigned int *)(v28 + 36);
      v169 = *(_QWORD *)(v28 + 24);
      v170 = *v168;
      if (*v168)
        *v170 += 2;
      *(_QWORD *)(v169 + 8 * v69) = v170;
    }
    else
    {
      v70 = *v68;
      v71 = v174;
      if (v174)
        *(_DWORD *)v174 += 2;
      *(_QWORD *)(v70 + 8 * v69) = v71;
    }
    *(_DWORD *)(v28 + 36) = v69 + 1;
  }
  v72 = v175;
  v175 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v72, v61, v62, v63, v64, v65, v66, v67);
      if (!v54)
        goto LABEL_44;
      goto LABEL_42;
    }
    --*(_DWORD *)v72;
  }
  if (!v54)
    goto LABEL_44;
LABEL_42:
  if (*v54 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v54, v61, v62, v63, v64, v65, v66, v67);
    WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
  }
  else
  {
    *v54 -= 2;
  }
LABEL_44:
  v73 = v174;
  v174 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v74 = 0x600000002;
  *(_QWORD *)(v74 + 8) = "params";
  *(_DWORD *)(v74 + 16) = 4;
  v174 = (WTF *)v28;
  v175 = (WTF *)v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v175, (const WTF::StringImpl *)&v174, v75, v76, v77, v78, v79, (uint64_t)v176);
  if (v177)
  {
    v87 = (uint64_t *)(v6 + 24);
    v88 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v6 + 32))
    {
      v171 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v175);
      v88 = *(unsigned int *)(v6 + 36);
      v172 = *(_QWORD *)(v6 + 24);
      v173 = *v171;
      if (*v171)
        *v173 += 2;
      *(_QWORD *)(v172 + 8 * v88) = v173;
    }
    else
    {
      v89 = *v87;
      v90 = v175;
      if (v175)
        *(_DWORD *)v175 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v6 + 36) = v88 + 1;
  }
  v91 = v174;
  v174 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v175;
  v175 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v81, v82, v83, v84, v85, v86, v176);
  v101 = *(unsigned int *)(v93 + 20);
  if ((_DWORD)v101)
  {
    v102 = *(uint64_t **)(v93 + 8);
    v103 = 8 * v101;
    do
    {
      v104 = *v102++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v104 + 24))(v104, v176);
      v103 -= 8;
    }
    while (v103);
  }
  v105 = v176[0];
  v176[0] = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v94, v95, v96, v97, v98, v99, v100);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::pseudoElementAdded(uint64_t *a1, int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1600000002;
  *(_QWORD *)(v8 + 8) = "DOM.pseudoElementAdded";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x800000002;
  *(_QWORD *)(v29 + 8) = "parentId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xD00000002;
  *(_QWORD *)(v49 + 8) = "pseudoElement";
  *(_DWORD *)(v49 + 16) = 4;
  v50 = *a3;
  *a3 = 0;
  v161 = v50;
  v162 = (WTF *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v161;
  v161 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v162;
  v162 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::pseudoElementRemoved(Inspector::DOMFrontendDispatcher *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1800000002;
  *(_QWORD *)(v8 + 8) = "DOM.pseudoElementRemoved";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x800000002;
  *(_QWORD *)(v29 + 8) = "parentId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xF00000002;
  *(_QWORD *)(v49 + 8) = "pseudoElementId";
  *(_DWORD *)(v49 + 16) = 4;
  v161 = (WTF *)v49;
  v50 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x300000001;
  v50[1] = (double)a3;
  v162 = (WTF *)v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v161);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v162;
  v162 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v161;
  v161 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMFrontendDispatcher::didAddEventListener(Inspector::DOMFrontendDispatcher *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "DOM.didAddEventListener";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "nodeId";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMFrontendDispatcher::willRemoveEventListener(Inspector::DOMFrontendDispatcher *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1B00000002;
  *(_QWORD *)(v6 + 8) = "DOM.willRemoveEventListener";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "nodeId";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMFrontendDispatcher::didFireEvent(uint64_t *a1, int a2, _DWORD **a3, WTF **a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD **v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD **v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD **v226;
  uint64_t v227;
  _DWORD *v228;
  WTF *v229;
  WTF *v230;
  WTF::StringImpl *v231[2];
  char v232;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v229 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x1000000002;
  *(_QWORD *)(v12 + 8) = "DOM.didFireEvent";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v230 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v14, v15, v16, v17, v18, (uint64_t)v231);
  if (v232)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v211 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v229);
      v27 = *(unsigned int *)(v10 + 36);
      v212 = *(_QWORD *)(v10 + 24);
      v213 = *v211;
      if (*v211)
        *v213 += 2;
      *(_QWORD *)(v212 + 8 * v27) = v213;
    }
    else
    {
      v28 = *v26;
      v29 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v230;
  v230 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v229;
  v229 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x600000002;
  *(_QWORD *)(v34 + 8) = "nodeId";
  *(_DWORD *)(v34 + 16) = 4;
  v229 = (WTF *)v34;
  v35 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x300000001;
  v35[1] = (double)a2;
  v230 = (WTF *)v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v32 + 16), (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v36, v37, v38, v39, v40, (uint64_t)v231);
  if (v232)
  {
    v48 = (uint64_t *)(v32 + 24);
    v49 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v32 + 32))
    {
      v214 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v229);
      v49 = *(unsigned int *)(v32 + 36);
      v215 = *(_QWORD *)(v32 + 24);
      v216 = *v214;
      if (*v214)
        *v216 += 2;
      *(_QWORD *)(v215 + 8 * v49) = v216;
    }
    else
    {
      v50 = *v48;
      v51 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *(_DWORD *)(v32 + 36) = v49 + 1;
  }
  v52 = v230;
  v230 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete(v52, v41, v42, v43, v44, v45, v46, v47);
    else
      --*(_DWORD *)v52;
  }
  v53 = v229;
  v229 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v54 = 0x900000002;
  *(_QWORD *)(v54 + 8) = "eventName";
  *(_DWORD *)(v54 + 16) = 4;
  v229 = (WTF *)v54;
  v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v55 = 0x400000001;
  v61 = *a3;
  *((_QWORD *)v55 + 1) = *a3;
  if (v61)
    *v61 += 2;
  v230 = v55;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v56, v57, v58, v59, v60, (uint64_t)v231);
  if (v232)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v217 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v229);
      v70 = *(unsigned int *)(v32 + 36);
      v218 = *(_QWORD *)(v32 + 24);
      v219 = *v217;
      if (*v217)
        *v219 += 2;
      *(_QWORD *)(v218 + 8 * v70) = v219;
    }
    else
    {
      v71 = *v69;
      v72 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v230;
  v230 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v229;
  v229 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0x900000002;
  *(_QWORD *)(v75 + 8) = "timestamp";
  *(_DWORD *)(v75 + 16) = 4;
  v229 = (WTF *)v75;
  v76 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = 0x200000001;
  v76[1] = a5;
  v230 = (WTF *)v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v77, v78, v79, v80, v81, (uint64_t)v231);
  if (v232)
  {
    v89 = (uint64_t *)(v32 + 24);
    v90 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v32 + 32))
    {
      v220 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v229);
      v90 = *(unsigned int *)(v32 + 36);
      v221 = *(_QWORD *)(v32 + 24);
      v222 = *v220;
      if (*v220)
        *v222 += 2;
      *(_QWORD *)(v221 + 8 * v90) = v222;
    }
    else
    {
      v91 = *v89;
      v92 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v91 + 8 * v90) = v92;
    }
    *(_DWORD *)(v32 + 36) = v90 + 1;
  }
  v93 = v230;
  v230 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v93;
  }
  v94 = v229;
  v229 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  if (*a4)
  {
    v95 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v95 = 0x400000002;
    *(_QWORD *)(v95 + 8) = "data";
    *(_DWORD *)(v95 + 16) = 4;
    v96 = *a4;
    *a4 = 0;
    v229 = v96;
    v230 = (WTF *)v95;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v97, v98, v99, v100, v101, (uint64_t)v231);
    if (v232)
    {
      v109 = (uint64_t *)(v32 + 24);
      v110 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v110 == *(_DWORD *)(v32 + 32))
      {
        v226 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v230);
        v110 = *(unsigned int *)(v32 + 36);
        v227 = *(_QWORD *)(v32 + 24);
        v228 = *v226;
        if (*v226)
          *v228 += 2;
        *(_QWORD *)(v227 + 8 * v110) = v228;
      }
      else
      {
        v111 = *v109;
        v112 = v230;
        if (v230)
          *(_DWORD *)v230 += 2;
        *(_QWORD *)(v111 + 8 * v110) = v112;
      }
      *(_DWORD *)(v32 + 36) = v110 + 1;
    }
    v113 = v229;
    v229 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 1)
        WTF::JSONImpl::Value::operator delete(v113, v102, v103, v104, v105, v106, v107, v108);
      else
        --*(_DWORD *)v113;
    }
    v114 = v230;
    v230 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
      {
        WTF::StringImpl::~StringImpl(v114, v102, v103, v104, v105, v106, v107, v108);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        *(_DWORD *)v114 -= 2;
      }
    }
  }
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0x600000002;
  *(_QWORD *)(v115 + 8) = "params";
  *(_DWORD *)(v115 + 16) = 4;
  v229 = (WTF *)v32;
  v230 = (WTF *)v115;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v116, v117, v118, v119, v120, (uint64_t)v231);
  if (v232)
  {
    v128 = (uint64_t *)(v10 + 24);
    v129 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v129 == *(_DWORD *)(v10 + 32))
    {
      v223 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v230);
      v129 = *(unsigned int *)(v10 + 36);
      v224 = *(_QWORD *)(v10 + 24);
      v225 = *v223;
      if (*v223)
        *v225 += 2;
      *(_QWORD *)(v224 + 8 * v129) = v225;
    }
    else
    {
      v130 = *v128;
      v131 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v130 + 8 * v129) = v131;
    }
    *(_DWORD *)(v10 + 36) = v129 + 1;
  }
  v132 = v229;
  v229 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 1)
      WTF::JSONImpl::Value::operator delete(v132, v121, v122, v123, v124, v125, v126, v127);
    else
      --*(_DWORD *)v132;
  }
  v133 = v230;
  v230 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v121, v122, v123, v124, v125, v126, v127);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v122, v123, v124, v125, v126, v127, v231);
  v142 = *(unsigned int *)(v134 + 20);
  if ((_DWORD)v142)
  {
    v143 = *(uint64_t **)(v134 + 8);
    v144 = 8 * v142;
    do
    {
      v145 = *v143++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v145 + 24))(v145, v231);
      v144 -= 8;
    }
    while (v144);
  }
  v146 = v231[0];
  v231[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v135, v136, v137, v138, v139, v140, v141);
  else
    --*(_DWORD *)v10;
}

void Inspector::DOMFrontendDispatcher::powerEfficientPlaybackStateChanged(Inspector::DOMFrontendDispatcher *this, int a2, double a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD **v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  WTF *v195;
  WTF *v196;
  WTF::StringImpl *v197[2];
  char v198;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v195 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2600000002;
  *(_QWORD *)(v10 + 8) = "DOM.powerEfficientPlaybackStateChanged";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v196 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v12, v13, v14, v15, v16, (uint64_t)v197);
  if (v198)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v180 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v195);
      v25 = *(unsigned int *)(v8 + 36);
      v181 = *(_QWORD *)(v8 + 24);
      v182 = *v180;
      if (*v180)
        *v182 += 2;
      *(_QWORD *)(v181 + 8 * v25) = v182;
    }
    else
    {
      v26 = *v24;
      v27 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v196;
  v196 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v195;
  v195 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x600000002;
  *(_QWORD *)(v32 + 8) = "nodeId";
  *(_DWORD *)(v32 + 16) = 4;
  v195 = (WTF *)v32;
  v33 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x300000001;
  v33[1] = (double)a2;
  v196 = (WTF *)v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v34, v35, v36, v37, v38, (uint64_t)v197);
  if (v198)
  {
    v46 = (uint64_t *)(v30 + 24);
    v47 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v30 + 32))
    {
      v183 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v195);
      v47 = *(unsigned int *)(v30 + 36);
      v184 = *(_QWORD *)(v30 + 24);
      v185 = *v183;
      if (*v183)
        *v185 += 2;
      *(_QWORD *)(v184 + 8 * v47) = v185;
    }
    else
    {
      v48 = *v46;
      v49 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v30 + 36) = v47 + 1;
  }
  v50 = v196;
  v196 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v195;
  v195 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x900000002;
  *(_QWORD *)(v52 + 8) = "timestamp";
  *(_DWORD *)(v52 + 16) = 4;
  v195 = (WTF *)v52;
  v53 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x200000001;
  v53[1] = a3;
  v196 = (WTF *)v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v54, v55, v56, v57, v58, (uint64_t)v197);
  if (v198)
  {
    v66 = (uint64_t *)(v30 + 24);
    v67 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v30 + 32))
    {
      v186 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v195);
      v67 = *(unsigned int *)(v30 + 36);
      v187 = *(_QWORD *)(v30 + 24);
      v188 = *v186;
      if (*v186)
        *v188 += 2;
      *(_QWORD *)(v187 + 8 * v67) = v188;
    }
    else
    {
      v68 = *v66;
      v69 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v30 + 36) = v67 + 1;
  }
  v70 = v196;
  v196 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v195;
  v195 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x1000000002;
  *(_QWORD *)(v72 + 8) = "isPowerEfficient";
  *(_DWORD *)(v72 + 16) = 4;
  v195 = (WTF *)v72;
  v73 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v73 = 0x100000001;
  *((_BYTE *)v73 + 8) = a4;
  v196 = v73;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v195, (const WTF::StringImpl *)&v196, v74, v75, v76, v77, v78, (uint64_t)v197);
  if (v198)
  {
    v86 = (uint64_t *)(v30 + 24);
    v87 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v87 == *(_DWORD *)(v30 + 32))
    {
      v189 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v195);
      v87 = *(unsigned int *)(v30 + 36);
      v190 = *(_QWORD *)(v30 + 24);
      v191 = *v189;
      if (*v189)
        *v191 += 2;
      *(_QWORD *)(v190 + 8 * v87) = v191;
    }
    else
    {
      v88 = *v86;
      v89 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      *(_QWORD *)(v88 + 8 * v87) = v89;
    }
    *(_DWORD *)(v30 + 36) = v87 + 1;
  }
  v90 = v196;
  v196 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 1)
      WTF::JSONImpl::Value::operator delete(v90, v79, v80, v81, v82, v83, v84, v85);
    else
      --*(_DWORD *)v90;
  }
  v91 = v195;
  v195 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x600000002;
  *(_QWORD *)(v92 + 8) = "params";
  *(_DWORD *)(v92 + 16) = 4;
  v195 = (WTF *)v30;
  v196 = (WTF *)v92;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v195, v93, v94, v95, v96, v97, (uint64_t)v197);
  if (v198)
  {
    v105 = (uint64_t *)(v8 + 24);
    v106 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v106 == *(_DWORD *)(v8 + 32))
    {
      v192 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v196);
      v106 = *(unsigned int *)(v8 + 36);
      v193 = *(_QWORD *)(v8 + 24);
      v194 = *v192;
      if (*v192)
        *v194 += 2;
      *(_QWORD *)(v193 + 8 * v106) = v194;
    }
    else
    {
      v107 = *v105;
      v108 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v107 + 8 * v106) = v108;
    }
    *(_DWORD *)(v8 + 36) = v106 + 1;
  }
  v109 = v195;
  v195 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::JSONImpl::Value::operator delete(v109, v98, v99, v100, v101, v102, v103, v104);
    else
      --*(_DWORD *)v109;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  v111 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v99, v100, v101, v102, v103, v104, v197);
  v119 = *(unsigned int *)(v111 + 20);
  if ((_DWORD)v119)
  {
    v120 = *(uint64_t **)(v111 + 8);
    v121 = 8 * v119;
    do
    {
      v122 = *v120++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v122 + 24))(v122, v197);
      v121 -= 8;
    }
    while (v121);
  }
  v123 = v197[0];
  v197[0] = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v112, v113, v114, v115, v116, v117, v118);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v112, v113, v114, v115, v116, v117, v118);
  else
    --*(_DWORD *)v8;
}

void Inspector::DOMStorageFrontendDispatcher::domStorageItemsCleared(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2100000002;
  *(_QWORD *)(v6 + 8) = "DOMStorage.domStorageItemsCleared";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "storageId";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DOMStorageFrontendDispatcher::domStorageItemRemoved(uint64_t *a1, WTF **a2, _DWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2000000002;
  *(_QWORD *)(v8 + 8) = "DOMStorage.domStorageItemRemoved";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "storageId";
  *(_DWORD *)(v29 + 16) = 4;
  v30 = *a2;
  *a2 = 0;
  v162 = v30;
  v163 = (WTF *)v29;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v163);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v163;
  v163 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x300000002;
  *(_QWORD *)(v49 + 8) = "key";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *a3;
  *((_QWORD *)v50 + 1) = *a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::DOMStorageFrontendDispatcher::domStorageItemAdded(uint64_t *a1, WTF **a2, _DWORD **a3, _DWORD **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199[2];
  char v200;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v197 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1E00000002;
  *(_QWORD *)(v10 + 8) = "DOMStorage.domStorageItemAdded";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v198 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v12, v13, v14, v15, v16, (uint64_t)v199);
  if (v200)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v182 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v197);
      v25 = *(unsigned int *)(v8 + 36);
      v183 = *(_QWORD *)(v8 + 24);
      v184 = *v182;
      if (*v182)
        *v184 += 2;
      *(_QWORD *)(v183 + 8 * v25) = v184;
    }
    else
    {
      v26 = *v24;
      v27 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v198;
  v198 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v197;
  v197 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "storageId";
  *(_DWORD *)(v32 + 16) = 4;
  v33 = *a2;
  *a2 = 0;
  v197 = v33;
  v198 = (WTF *)v32;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v199);
  if (v200)
  {
    v46 = (uint64_t *)(v30 + 24);
    v47 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v30 + 32))
    {
      v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v198);
      v47 = *(unsigned int *)(v30 + 36);
      v186 = *(_QWORD *)(v30 + 24);
      v187 = *v185;
      if (*v185)
        *v187 += 2;
      *(_QWORD *)(v186 + 8 * v47) = v187;
    }
    else
    {
      v48 = *v46;
      v49 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *(_DWORD *)(v30 + 36) = v47 + 1;
  }
  v50 = v197;
  v197 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v198;
  v198 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x300000002;
  *(_QWORD *)(v52 + 8) = "key";
  *(_DWORD *)(v52 + 16) = 4;
  v197 = (WTF *)v52;
  v53 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x400000001;
  v59 = *a3;
  *((_QWORD *)v53 + 1) = *a3;
  if (v59)
    *v59 += 2;
  v198 = v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v54, v55, v56, v57, v58, (uint64_t)v199);
  if (v200)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v197);
      v68 = *(unsigned int *)(v30 + 36);
      v189 = *(_QWORD *)(v30 + 24);
      v190 = *v188;
      if (*v188)
        *v190 += 2;
      *(_QWORD *)(v189 + 8 * v68) = v190;
    }
    else
    {
      v69 = *v67;
      v70 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v198;
  v198 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v197;
  v197 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x800000002;
  *(_QWORD *)(v73 + 8) = "newValue";
  *(_DWORD *)(v73 + 16) = 4;
  v197 = (WTF *)v73;
  v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v74 = 0x400000001;
  v80 = *a4;
  *((_QWORD *)v74 + 1) = *a4;
  if (v80)
    *v80 += 2;
  v198 = v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v75, v76, v77, v78, v79, (uint64_t)v199);
  if (v200)
  {
    v88 = (uint64_t *)(v30 + 24);
    v89 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v30 + 32))
    {
      v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v197);
      v89 = *(unsigned int *)(v30 + 36);
      v192 = *(_QWORD *)(v30 + 24);
      v193 = *v191;
      if (*v191)
        *v193 += 2;
      *(_QWORD *)(v192 + 8 * v89) = v193;
    }
    else
    {
      v90 = *v88;
      v91 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v30 + 36) = v89 + 1;
  }
  v92 = v198;
  v198 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::JSONImpl::Value::operator delete(v92, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v92;
  }
  v93 = v197;
  v197 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x600000002;
  *(_QWORD *)(v94 + 8) = "params";
  *(_DWORD *)(v94 + 16) = 4;
  v197 = (WTF *)v30;
  v198 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v95, v96, v97, v98, v99, (uint64_t)v199);
  if (v200)
  {
    v107 = (uint64_t *)(v8 + 24);
    v108 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v8 + 32))
    {
      v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v198);
      v108 = *(unsigned int *)(v8 + 36);
      v195 = *(_QWORD *)(v8 + 24);
      v196 = *v194;
      if (*v194)
        *v196 += 2;
      *(_QWORD *)(v195 + 8 * v108) = v196;
    }
    else
    {
      v109 = *v107;
      v110 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v8 + 36) = v108 + 1;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v101, v102, v103, v104, v105, v106, v199);
  v121 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v121)
  {
    v122 = *(uint64_t **)(v113 + 8);
    v123 = 8 * v121;
    do
    {
      v124 = *v122++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v124 + 24))(v124, v199);
      v123 -= 8;
    }
    while (v123);
  }
  v125 = v199[0];
  v199[0] = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v114, v115, v116, v117, v118, v119, v120);
  else
    --*(_DWORD *)v8;
}

void Inspector::DOMStorageFrontendDispatcher::domStorageItemUpdated(uint64_t *a1, WTF **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  WTF *v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  WTF::AtomStringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _DWORD **v213;
  uint64_t v214;
  _DWORD *v215;
  _DWORD **v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD **v222;
  uint64_t v223;
  _DWORD *v224;
  _DWORD **v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD **v228;
  uint64_t v229;
  _DWORD *v230;
  WTF *v231;
  WTF *v232;
  WTF::StringImpl *v233[2];
  char v234;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v231 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x2000000002;
  *(_QWORD *)(v12 + 8) = "DOMStorage.domStorageItemUpdated";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v232 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v14, v15, v16, v17, v18, (uint64_t)v233);
  if (v234)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v213 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v231);
      v27 = *(unsigned int *)(v10 + 36);
      v214 = *(_QWORD *)(v10 + 24);
      v215 = *v213;
      if (*v213)
        *v215 += 2;
      *(_QWORD *)(v214 + 8 * v27) = v215;
    }
    else
    {
      v28 = *v26;
      v29 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v232;
  v232 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v231;
  v231 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x900000002;
  *(_QWORD *)(v34 + 8) = "storageId";
  *(_DWORD *)(v34 + 16) = 4;
  v35 = *a2;
  *a2 = 0;
  v231 = v35;
  v232 = (WTF *)v34;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v32 + 16), (WTF::AtomStringImpl *)&v232, (const WTF::StringImpl *)&v231, v36, v37, v38, v39, v40, (uint64_t)v233);
  if (v234)
  {
    v48 = (uint64_t *)(v32 + 24);
    v49 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v32 + 32))
    {
      v216 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v232);
      v49 = *(unsigned int *)(v32 + 36);
      v217 = *(_QWORD *)(v32 + 24);
      v218 = *v216;
      if (*v216)
        *v218 += 2;
      *(_QWORD *)(v217 + 8 * v49) = v218;
    }
    else
    {
      v50 = *v48;
      v51 = v232;
      if (v232)
        *(_DWORD *)v232 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *(_DWORD *)(v32 + 36) = v49 + 1;
  }
  v52 = v231;
  v231 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete(v52, v41, v42, v43, v44, v45, v46, v47);
    else
      --*(_DWORD *)v52;
  }
  v53 = v232;
  v232 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v54 = 0x300000002;
  *(_QWORD *)(v54 + 8) = "key";
  *(_DWORD *)(v54 + 16) = 4;
  v231 = (WTF *)v54;
  v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v55 = 0x400000001;
  v61 = *a3;
  *((_QWORD *)v55 + 1) = *a3;
  if (v61)
    *v61 += 2;
  v232 = v55;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v56, v57, v58, v59, v60, (uint64_t)v233);
  if (v234)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v219 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v231);
      v70 = *(unsigned int *)(v32 + 36);
      v220 = *(_QWORD *)(v32 + 24);
      v221 = *v219;
      if (*v219)
        *v221 += 2;
      *(_QWORD *)(v220 + 8 * v70) = v221;
    }
    else
    {
      v71 = *v69;
      v72 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v232;
  v232 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v231;
  v231 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0x800000002;
  *(_QWORD *)(v75 + 8) = "oldValue";
  *(_DWORD *)(v75 + 16) = 4;
  v231 = (WTF *)v75;
  v76 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = 0x400000001;
  v82 = *a4;
  *((_QWORD *)v76 + 1) = *a4;
  if (v82)
    *v82 += 2;
  v232 = v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v77, v78, v79, v80, v81, (uint64_t)v233);
  if (v234)
  {
    v90 = (uint64_t *)(v32 + 24);
    v91 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v91 == *(_DWORD *)(v32 + 32))
    {
      v222 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v231);
      v91 = *(unsigned int *)(v32 + 36);
      v223 = *(_QWORD *)(v32 + 24);
      v224 = *v222;
      if (*v222)
        *v224 += 2;
      *(_QWORD *)(v223 + 8 * v91) = v224;
    }
    else
    {
      v92 = *v90;
      v93 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v92 + 8 * v91) = v93;
    }
    *(_DWORD *)(v32 + 36) = v91 + 1;
  }
  v94 = v232;
  v232 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 1)
      WTF::JSONImpl::Value::operator delete(v94, v83, v84, v85, v86, v87, v88, v89);
    else
      --*(_DWORD *)v94;
  }
  v95 = v231;
  v231 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v83, v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0x800000002;
  *(_QWORD *)(v96 + 8) = "newValue";
  *(_DWORD *)(v96 + 16) = 4;
  v231 = (WTF *)v96;
  v97 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v97 = 0x400000001;
  v103 = *a5;
  *((_QWORD *)v97 + 1) = *a5;
  if (v103)
    *v103 += 2;
  v232 = v97;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v98, v99, v100, v101, v102, (uint64_t)v233);
  if (v234)
  {
    v111 = (uint64_t *)(v32 + 24);
    v112 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v112 == *(_DWORD *)(v32 + 32))
    {
      v225 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v112 + 1, (unint64_t)&v231);
      v112 = *(unsigned int *)(v32 + 36);
      v226 = *(_QWORD *)(v32 + 24);
      v227 = *v225;
      if (*v225)
        *v227 += 2;
      *(_QWORD *)(v226 + 8 * v112) = v227;
    }
    else
    {
      v113 = *v111;
      v114 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v113 + 8 * v112) = v114;
    }
    *(_DWORD *)(v32 + 36) = v112 + 1;
  }
  v115 = v232;
  v232 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 1)
      WTF::JSONImpl::Value::operator delete(v115, v104, v105, v106, v107, v108, v109, v110);
    else
      --*(_DWORD *)v115;
  }
  v116 = v231;
  v231 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v104, v105, v106, v107, v108, v109, v110);
      WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v117 = 0x600000002;
  *(_QWORD *)(v117 + 8) = "params";
  *(_DWORD *)(v117 + 16) = 4;
  v231 = (WTF *)v32;
  v232 = (WTF *)v117;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v232, (const WTF::StringImpl *)&v231, v118, v119, v120, v121, v122, (uint64_t)v233);
  if (v234)
  {
    v130 = (uint64_t *)(v10 + 24);
    v131 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(v10 + 32))
    {
      v228 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v232);
      v131 = *(unsigned int *)(v10 + 36);
      v229 = *(_QWORD *)(v10 + 24);
      v230 = *v228;
      if (*v228)
        *v230 += 2;
      *(_QWORD *)(v229 + 8 * v131) = v230;
    }
    else
    {
      v132 = *v130;
      v133 = v232;
      if (v232)
        *(_DWORD *)v232 += 2;
      *(_QWORD *)(v132 + 8 * v131) = v133;
    }
    *(_DWORD *)(v10 + 36) = v131 + 1;
  }
  v134 = v231;
  v231 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 1)
      WTF::JSONImpl::Value::operator delete(v134, v123, v124, v125, v126, v127, v128, v129);
    else
      --*(_DWORD *)v134;
  }
  v135 = v232;
  v232 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v124, v125, v126, v127, v128, v129, v233);
  v144 = *(unsigned int *)(v136 + 20);
  if ((_DWORD)v144)
  {
    v145 = *(uint64_t **)(v136 + 8);
    v146 = 8 * v144;
    do
    {
      v147 = *v145++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v147 + 24))(v147, v233);
      v146 -= 8;
    }
    while (v146);
  }
  v148 = v233[0];
  v233[0] = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v137, v138, v139, v140, v141, v142, v143);
      WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v137, v138, v139, v140, v141, v142, v143);
  else
    --*(_DWORD *)v10;
}

void Inspector::DatabaseFrontendDispatcher::addDatabase(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "Database.addDatabase";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x800000002;
  *(_QWORD *)(v27 + 8) = "database";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DebuggerFrontendDispatcher::globalObjectCleared(Inspector::DebuggerFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1C00000002;
  *(_QWORD *)(v4 + 8) = "Debugger.globalObjectCleared";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::DebuggerFrontendDispatcher::scriptParsed(uint64_t *a1, _DWORD **a2, _DWORD **a3, int a4, int a5, int a6, int a7, char *a8, _DWORD **a9, _DWORD **a10, char *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  WTF *v141;
  WTF *v142;
  uint64_t v143;
  double *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  uint64_t v163;
  char v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  WTF *v182;
  WTF *v183;
  uint64_t v184;
  WTF *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  WTF::AtomStringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  WTF *v202;
  WTF *v203;
  WTF *v204;
  uint64_t v205;
  WTF *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _DWORD *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  uint64_t v226;
  char v227;
  WTF *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::AtomStringImpl *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  WTF *v244;
  WTF *v245;
  WTF *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF::AtomStringImpl *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  WTF *v263;
  WTF *v264;
  WTF *v265;
  uint64_t v266;
  WTF::AtomStringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _DWORD **v391;
  uint64_t v392;
  _DWORD *v393;
  _DWORD **v394;
  uint64_t v395;
  _DWORD *v396;
  _DWORD **v397;
  uint64_t v398;
  _DWORD *v399;
  _DWORD **v400;
  uint64_t v401;
  _DWORD *v402;
  _DWORD **v403;
  uint64_t v404;
  _DWORD *v405;
  _DWORD **v406;
  uint64_t v407;
  _DWORD *v408;
  _DWORD **v409;
  uint64_t v410;
  _DWORD *v411;
  _DWORD **v412;
  uint64_t v413;
  _DWORD *v414;
  _DWORD **v415;
  uint64_t v416;
  _DWORD *v417;
  _DWORD **v418;
  uint64_t v419;
  _DWORD *v420;
  _DWORD **v421;
  uint64_t v422;
  _DWORD *v423;
  _DWORD **v424;
  uint64_t v425;
  _DWORD *v426;
  WTF *v429;
  WTF *v430;
  WTF::StringImpl *v431[2];
  char v432;

  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v17 = 0x500000001;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x600000002;
  *(_QWORD *)(v18 + 8) = "method";
  *(_DWORD *)(v18 + 16) = 4;
  v429 = (WTF *)v18;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x1500000002;
  *(_QWORD *)(v19 + 8) = "Debugger.scriptParsed";
  *(_DWORD *)(v19 + 16) = 4;
  v20 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v20 = 0x400000001;
  *((_QWORD *)v20 + 1) = v19;
  *(_DWORD *)v19 += 2;
  v430 = v20;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v21, v22, v23, v24, v25, (uint64_t)v431);
  if (v432)
  {
    v33 = (uint64_t *)(v17 + 24);
    v34 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v34 == *(_DWORD *)(v17 + 32))
    {
      v391 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v429);
      v34 = *(unsigned int *)(v17 + 36);
      v392 = *(_QWORD *)(v17 + 24);
      v393 = *v391;
      if (*v391)
        *v393 += 2;
      *(_QWORD *)(v392 + 8 * v34) = v393;
    }
    else
    {
      v35 = *v33;
      v36 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v35 + 8 * v34) = v36;
    }
    *(_DWORD *)(v17 + 36) = v34 + 1;
  }
  v37 = v430;
  v430 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
      WTF::JSONImpl::Value::operator delete(v37, v26, v27, v28, v29, v30, v31, v32);
    else
      --*(_DWORD *)v37;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v26, v27, v28, v29, v30, v31, v32);
    WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v38 = v429;
  v429 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v39 = 0x500000001;
  *(_QWORD *)(v39 + 16) = 0;
  v40 = (uint64_t *)(v39 + 16);
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = 0;
  v41 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v41 = 0x800000002;
  *(_QWORD *)(v41 + 8) = "scriptId";
  *(_DWORD *)(v41 + 16) = 4;
  v429 = (WTF *)v41;
  v42 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v42 = 0x400000001;
  v48 = *a2;
  *((_QWORD *)v42 + 1) = *a2;
  if (v48)
    *v48 += 2;
  v430 = v42;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v43, v44, v45, v46, v47, (uint64_t)v431);
  if (v432)
  {
    v56 = (uint64_t *)(v39 + 24);
    v57 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v57 == *(_DWORD *)(v39 + 32))
    {
      v394 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v429);
      v57 = *(unsigned int *)(v39 + 36);
      v395 = *(_QWORD *)(v39 + 24);
      v396 = *v394;
      if (*v394)
        *v396 += 2;
      *(_QWORD *)(v395 + 8 * v57) = v396;
    }
    else
    {
      v58 = *v56;
      v59 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v58 + 8 * v57) = v59;
    }
    *(_DWORD *)(v39 + 36) = v57 + 1;
  }
  v60 = v430;
  v430 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1)
      WTF::JSONImpl::Value::operator delete(v60, v49, v50, v51, v52, v53, v54, v55);
    else
      --*(_DWORD *)v60;
  }
  v61 = v429;
  v429 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v62 = 0x300000002;
  *(_QWORD *)(v62 + 8) = "url";
  *(_DWORD *)(v62 + 16) = 4;
  v429 = (WTF *)v62;
  v63 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v63 = 0x400000001;
  v69 = *a3;
  *((_QWORD *)v63 + 1) = *a3;
  if (v69)
    *v69 += 2;
  v430 = v63;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v64, v65, v66, v67, v68, (uint64_t)v431);
  if (v432)
  {
    v77 = (uint64_t *)(v39 + 24);
    v78 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v78 == *(_DWORD *)(v39 + 32))
    {
      v397 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v429);
      v78 = *(unsigned int *)(v39 + 36);
      v398 = *(_QWORD *)(v39 + 24);
      v399 = *v397;
      if (*v397)
        *v399 += 2;
      *(_QWORD *)(v398 + 8 * v78) = v399;
    }
    else
    {
      v79 = *v77;
      v80 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v79 + 8 * v78) = v80;
    }
    *(_DWORD *)(v39 + 36) = v78 + 1;
  }
  v81 = v430;
  v430 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 1)
      WTF::JSONImpl::Value::operator delete(v81, v70, v71, v72, v73, v74, v75, v76);
    else
      --*(_DWORD *)v81;
  }
  v82 = v429;
  v429 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v83 = 0x900000002;
  *(_QWORD *)(v83 + 8) = "startLine";
  *(_DWORD *)(v83 + 16) = 4;
  v429 = (WTF *)v83;
  v84 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v84 = 0x300000001;
  v84[1] = (double)a4;
  v430 = (WTF *)v84;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v85, v86, v87, v88, v89, (uint64_t)v431);
  if (v432)
  {
    v97 = (uint64_t *)(v39 + 24);
    v98 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v98 == *(_DWORD *)(v39 + 32))
    {
      v400 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)&v429);
      v98 = *(unsigned int *)(v39 + 36);
      v401 = *(_QWORD *)(v39 + 24);
      v402 = *v400;
      if (*v400)
        *v402 += 2;
      *(_QWORD *)(v401 + 8 * v98) = v402;
    }
    else
    {
      v99 = *v97;
      v100 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v99 + 8 * v98) = v100;
    }
    *(_DWORD *)(v39 + 36) = v98 + 1;
  }
  v101 = v430;
  v430 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 1)
      WTF::JSONImpl::Value::operator delete(v101, v90, v91, v92, v93, v94, v95, v96);
    else
      --*(_DWORD *)v101;
  }
  v102 = v429;
  v429 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0xB00000002;
  *(_QWORD *)(v103 + 8) = "startColumn";
  *(_DWORD *)(v103 + 16) = 4;
  v429 = (WTF *)v103;
  v104 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v104 = 0x300000001;
  v104[1] = (double)a5;
  v430 = (WTF *)v104;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v105, v106, v107, v108, v109, (uint64_t)v431);
  if (v432)
  {
    v117 = (uint64_t *)(v39 + 24);
    v118 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v118 == *(_DWORD *)(v39 + 32))
    {
      v403 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v429);
      v118 = *(unsigned int *)(v39 + 36);
      v404 = *(_QWORD *)(v39 + 24);
      v405 = *v403;
      if (*v403)
        *v405 += 2;
      *(_QWORD *)(v404 + 8 * v118) = v405;
    }
    else
    {
      v119 = *v117;
      v120 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v119 + 8 * v118) = v120;
    }
    *(_DWORD *)(v39 + 36) = v118 + 1;
  }
  v121 = v430;
  v430 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
      WTF::JSONImpl::Value::operator delete(v121, v110, v111, v112, v113, v114, v115, v116);
    else
      --*(_DWORD *)v121;
  }
  v122 = v429;
  v429 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v110, v111, v112, v113, v114, v115, v116);
      WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v123 = 0x700000002;
  *(_QWORD *)(v123 + 8) = "endLine";
  *(_DWORD *)(v123 + 16) = 4;
  v429 = (WTF *)v123;
  v124 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v124 = 0x300000001;
  v124[1] = (double)a6;
  v430 = (WTF *)v124;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v125, v126, v127, v128, v129, (uint64_t)v431);
  if (v432)
  {
    v137 = (uint64_t *)(v39 + 24);
    v138 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v138 == *(_DWORD *)(v39 + 32))
    {
      v406 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v429);
      v138 = *(unsigned int *)(v39 + 36);
      v407 = *(_QWORD *)(v39 + 24);
      v408 = *v406;
      if (*v406)
        *v408 += 2;
      *(_QWORD *)(v407 + 8 * v138) = v408;
    }
    else
    {
      v139 = *v137;
      v140 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v139 + 8 * v138) = v140;
    }
    *(_DWORD *)(v39 + 36) = v138 + 1;
  }
  v141 = v430;
  v430 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 1)
      WTF::JSONImpl::Value::operator delete(v141, v130, v131, v132, v133, v134, v135, v136);
    else
      --*(_DWORD *)v141;
  }
  v142 = v429;
  v429 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v143 = 0x900000002;
  *(_QWORD *)(v143 + 8) = "endColumn";
  *(_DWORD *)(v143 + 16) = 4;
  v429 = (WTF *)v143;
  v144 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v144 = 0x300000001;
  v144[1] = (double)a7;
  v430 = (WTF *)v144;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v145, v146, v147, v148, v149, (uint64_t)v431);
  if (v432)
  {
    v157 = (uint64_t *)(v39 + 24);
    v158 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v158 == *(_DWORD *)(v39 + 32))
    {
      v409 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)&v429);
      v158 = *(unsigned int *)(v39 + 36);
      v410 = *(_QWORD *)(v39 + 24);
      v411 = *v409;
      if (*v409)
        *v411 += 2;
      *(_QWORD *)(v410 + 8 * v158) = v411;
    }
    else
    {
      v159 = *v157;
      v160 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v159 + 8 * v158) = v160;
    }
    *(_DWORD *)(v39 + 36) = v158 + 1;
  }
  v161 = v430;
  v430 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 1)
      WTF::JSONImpl::Value::operator delete(v161, v150, v151, v152, v153, v154, v155, v156);
    else
      --*(_DWORD *)v161;
  }
  v162 = v429;
  v429 = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
    {
      WTF::StringImpl::~StringImpl(v162, v150, v151, v152, v153, v154, v155, v156);
      WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
    }
    else
    {
      *(_DWORD *)v162 -= 2;
    }
  }
  if (a8[1])
  {
    v163 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v163 = 0xF00000002;
    *(_QWORD *)(v163 + 8) = "isContentScript";
    *(_DWORD *)(v163 + 16) = 4;
    v429 = (WTF *)v163;
    if (!a8[1])
      goto LABEL_232;
    v164 = *a8;
    v165 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v165 = 0x100000001;
    *((_BYTE *)v165 + 8) = v164;
    v430 = v165;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v166, v167, v168, v169, v170, (uint64_t)v431);
    if (v432)
    {
      v178 = (uint64_t *)(v39 + 24);
      v179 = *(unsigned int *)(v39 + 36);
      if ((_DWORD)v179 == *(_DWORD *)(v39 + 32))
      {
        v415 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)&v429);
        v179 = *(unsigned int *)(v39 + 36);
        v416 = *(_QWORD *)(v39 + 24);
        v417 = *v415;
        if (*v415)
          *v417 += 2;
        *(_QWORD *)(v416 + 8 * v179) = v417;
      }
      else
      {
        v180 = *v178;
        v181 = v429;
        if (v429)
          *(_DWORD *)v429 += 2;
        *(_QWORD *)(v180 + 8 * v179) = v181;
      }
      *(_DWORD *)(v39 + 36) = v179 + 1;
    }
    v182 = v430;
    v430 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 1)
        WTF::JSONImpl::Value::operator delete(v182, v171, v172, v173, v174, v175, v176, v177);
      else
        --*(_DWORD *)v182;
    }
    v183 = v429;
    v429 = 0;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
      {
        WTF::StringImpl::~StringImpl(v183, v171, v172, v173, v174, v175, v176, v177);
        WTF::fastFree(v359, v360, v361, v362, v363, v364, v365, v366);
      }
      else
      {
        *(_DWORD *)v183 -= 2;
      }
    }
  }
  if (*a9)
  {
    v184 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v184 = 0x900000002;
    *(_QWORD *)(v184 + 8) = "sourceURL";
    *(_DWORD *)(v184 + 16) = 4;
    v429 = (WTF *)v184;
    v185 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v185 = 0x400000001;
    v191 = *a9;
    *((_QWORD *)v185 + 1) = *a9;
    if (v191)
      *v191 += 2;
    v430 = v185;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v186, v187, v188, v189, v190, (uint64_t)v431);
    if (v432)
    {
      v199 = (uint64_t *)(v39 + 24);
      v200 = *(unsigned int *)(v39 + 36);
      if ((_DWORD)v200 == *(_DWORD *)(v39 + 32))
      {
        v418 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v199, v200 + 1, (unint64_t)&v429);
        v200 = *(unsigned int *)(v39 + 36);
        v419 = *(_QWORD *)(v39 + 24);
        v420 = *v418;
        if (*v418)
          *v420 += 2;
        *(_QWORD *)(v419 + 8 * v200) = v420;
      }
      else
      {
        v201 = *v199;
        v202 = v429;
        if (v429)
          *(_DWORD *)v429 += 2;
        *(_QWORD *)(v201 + 8 * v200) = v202;
      }
      *(_DWORD *)(v39 + 36) = v200 + 1;
    }
    v203 = v430;
    v430 = 0;
    if (v203)
    {
      if (*(_DWORD *)v203 == 1)
        WTF::JSONImpl::Value::operator delete(v203, v192, v193, v194, v195, v196, v197, v198);
      else
        --*(_DWORD *)v203;
    }
    v204 = v429;
    v429 = 0;
    if (v204)
    {
      if (*(_DWORD *)v204 == 2)
      {
        WTF::StringImpl::~StringImpl(v204, v192, v193, v194, v195, v196, v197, v198);
        WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
      }
      else
      {
        *(_DWORD *)v204 -= 2;
      }
    }
  }
  if (*a10)
  {
    v205 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v205 = 0xC00000002;
    *(_QWORD *)(v205 + 8) = "sourceMapURL";
    *(_DWORD *)(v205 + 16) = 4;
    v429 = (WTF *)v205;
    v206 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v206 = 0x400000001;
    v212 = *a10;
    *((_QWORD *)v206 + 1) = *a10;
    if (v212)
      *v212 += 2;
    v430 = v206;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v207, v208, v209, v210, v211, (uint64_t)v431);
    if (v432)
    {
      v220 = (uint64_t *)(v39 + 24);
      v221 = *(unsigned int *)(v39 + 36);
      if ((_DWORD)v221 == *(_DWORD *)(v39 + 32))
      {
        v421 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v220, v221 + 1, (unint64_t)&v429);
        v221 = *(unsigned int *)(v39 + 36);
        v422 = *(_QWORD *)(v39 + 24);
        v423 = *v421;
        if (*v421)
          *v423 += 2;
        *(_QWORD *)(v422 + 8 * v221) = v423;
      }
      else
      {
        v222 = *v220;
        v223 = v429;
        if (v429)
          *(_DWORD *)v429 += 2;
        *(_QWORD *)(v222 + 8 * v221) = v223;
      }
      *(_DWORD *)(v39 + 36) = v221 + 1;
    }
    v224 = v430;
    v430 = 0;
    if (v224)
    {
      if (*(_DWORD *)v224 == 1)
        WTF::JSONImpl::Value::operator delete(v224, v213, v214, v215, v216, v217, v218, v219);
      else
        --*(_DWORD *)v224;
    }
    v225 = v429;
    v429 = 0;
    if (v225)
    {
      if (*(_DWORD *)v225 == 2)
      {
        WTF::StringImpl::~StringImpl(v225, v213, v214, v215, v216, v217, v218, v219);
        WTF::fastFree(v375, v376, v377, v378, v379, v380, v381, v382);
      }
      else
      {
        *(_DWORD *)v225 -= 2;
      }
    }
  }
  if (!a11[1])
    goto LABEL_149;
  v226 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v226 = 0x600000002;
  *(_QWORD *)(v226 + 8) = "module";
  *(_DWORD *)(v226 + 16) = 4;
  v429 = (WTF *)v226;
  if (!a11[1])
  {
LABEL_232:
    __break(1u);
    return;
  }
  v227 = *a11;
  v228 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v228 = 0x100000001;
  *((_BYTE *)v228 + 8) = v227;
  v430 = v228;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v40, (WTF::AtomStringImpl *)&v429, (const WTF::StringImpl *)&v430, v229, v230, v231, v232, v233, (uint64_t)v431);
  if (v432)
  {
    v241 = (uint64_t *)(v39 + 24);
    v242 = *(unsigned int *)(v39 + 36);
    if ((_DWORD)v242 == *(_DWORD *)(v39 + 32))
    {
      v424 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v241, v242 + 1, (unint64_t)&v429);
      v242 = *(unsigned int *)(v39 + 36);
      v425 = *(_QWORD *)(v39 + 24);
      v426 = *v424;
      if (*v424)
        *v426 += 2;
      *(_QWORD *)(v425 + 8 * v242) = v426;
    }
    else
    {
      v243 = *v241;
      v244 = v429;
      if (v429)
        *(_DWORD *)v429 += 2;
      *(_QWORD *)(v243 + 8 * v242) = v244;
    }
    *(_DWORD *)(v39 + 36) = v242 + 1;
  }
  v245 = v430;
  v430 = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 1)
      WTF::JSONImpl::Value::operator delete(v245, v234, v235, v236, v237, v238, v239, v240);
    else
      --*(_DWORD *)v245;
  }
  v246 = v429;
  v429 = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
    {
      WTF::StringImpl::~StringImpl(v246, v234, v235, v236, v237, v238, v239, v240);
      WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
    }
    else
    {
      *(_DWORD *)v246 -= 2;
    }
  }
LABEL_149:
  v247 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v247 = 0x600000002;
  *(_QWORD *)(v247 + 8) = "params";
  *(_DWORD *)(v247 + 16) = 4;
  v429 = (WTF *)v39;
  v430 = (WTF *)v247;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v17 + 16), (WTF::AtomStringImpl *)&v430, (const WTF::StringImpl *)&v429, v248, v249, v250, v251, v252, (uint64_t)v431);
  if (v432)
  {
    v260 = (uint64_t *)(v17 + 24);
    v261 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v261 == *(_DWORD *)(v17 + 32))
    {
      v412 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v260, v261 + 1, (unint64_t)&v430);
      v261 = *(unsigned int *)(v17 + 36);
      v413 = *(_QWORD *)(v17 + 24);
      v414 = *v412;
      if (*v412)
        *v414 += 2;
      *(_QWORD *)(v413 + 8 * v261) = v414;
    }
    else
    {
      v262 = *v260;
      v263 = v430;
      if (v430)
        *(_DWORD *)v430 += 2;
      *(_QWORD *)(v262 + 8 * v261) = v263;
    }
    *(_DWORD *)(v17 + 36) = v261 + 1;
  }
  v264 = v429;
  v429 = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 1)
      WTF::JSONImpl::Value::operator delete(v264, v253, v254, v255, v256, v257, v258, v259);
    else
      --*(_DWORD *)v264;
  }
  v265 = v430;
  v430 = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
    {
      WTF::StringImpl::~StringImpl(v265, v253, v254, v255, v256, v257, v258, v259);
      WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
    }
    else
    {
      *(_DWORD *)v265 -= 2;
    }
  }
  v266 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v17, v254, v255, v256, v257, v258, v259, v431);
  v274 = *(unsigned int *)(v266 + 20);
  if ((_DWORD)v274)
  {
    v275 = *(uint64_t **)(v266 + 8);
    v276 = 8 * v274;
    do
    {
      v277 = *v275++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v277 + 24))(v277, v431);
      v276 -= 8;
    }
    while (v276);
  }
  v278 = v431[0];
  v431[0] = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
    {
      WTF::StringImpl::~StringImpl(v278, v267, v268, v269, v270, v271, v272, v273);
      WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
    }
    else
    {
      *(_DWORD *)v278 -= 2;
    }
  }
  if (*(_DWORD *)v17 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v17, v267, v268, v269, v270, v271, v272, v273);
  else
    --*(_DWORD *)v17;
}

void Inspector::DebuggerFrontendDispatcher::scriptFailedToParse(Inspector::DebuggerFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3, int a4, int a5, const WTF::String *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  WTF::AtomStringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  WTF *v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  uint64_t v158;
  WTF::AtomStringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD **v243;
  uint64_t v244;
  _DWORD *v245;
  _DWORD **v246;
  uint64_t v247;
  _DWORD *v248;
  _DWORD **v249;
  uint64_t v250;
  _DWORD *v251;
  _DWORD **v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD **v255;
  uint64_t v256;
  _DWORD *v257;
  _DWORD **v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD **v261;
  uint64_t v262;
  _DWORD *v263;
  WTF *v264;
  WTF *v265;
  WTF::StringImpl *v266[2];
  char v267;

  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = 0x500000001;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x600000002;
  *(_QWORD *)(v13 + 8) = "method";
  *(_DWORD *)(v13 + 16) = 4;
  v264 = (WTF *)v13;
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x1C00000002;
  *(_QWORD *)(v14 + 8) = "Debugger.scriptFailedToParse";
  *(_DWORD *)(v14 + 16) = 4;
  v15 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v15 = 0x400000001;
  *((_QWORD *)v15 + 1) = v14;
  *(_DWORD *)v14 += 2;
  v265 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v12 + 16), (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v16, v17, v18, v19, v20, (uint64_t)v266);
  if (v267)
  {
    v28 = (uint64_t *)(v12 + 24);
    v29 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v12 + 32))
    {
      v243 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v264);
      v29 = *(unsigned int *)(v12 + 36);
      v244 = *(_QWORD *)(v12 + 24);
      v245 = *v243;
      if (*v243)
        *v245 += 2;
      *(_QWORD *)(v244 + 8 * v29) = v245;
    }
    else
    {
      v30 = *v28;
      v31 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *(_DWORD *)(v12 + 36) = v29 + 1;
  }
  v32 = v265;
  v265 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete(v32, v21, v22, v23, v24, v25, v26, v27);
    else
      --*(_DWORD *)v32;
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
  v33 = v264;
  v264 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v34 = 0x500000001;
  *(_QWORD *)(v34 + 16) = 0;
  v35 = (uint64_t *)(v34 + 16);
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  v36 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v36 = 0x300000002;
  *(_QWORD *)(v36 + 8) = "url";
  *(_DWORD *)(v36 + 16) = 4;
  v264 = (WTF *)v36;
  v37 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v37 = 0x400000001;
  v43 = *(_DWORD **)a2;
  *((_QWORD *)v37 + 1) = *(_QWORD *)a2;
  if (v43)
    *v43 += 2;
  v265 = v37;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v35, (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v38, v39, v40, v41, v42, (uint64_t)v266);
  if (v267)
  {
    v51 = (uint64_t *)(v34 + 24);
    v52 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v52 == *(_DWORD *)(v34 + 32))
    {
      v246 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v264);
      v52 = *(unsigned int *)(v34 + 36);
      v247 = *(_QWORD *)(v34 + 24);
      v248 = *v246;
      if (*v246)
        *v248 += 2;
      *(_QWORD *)(v247 + 8 * v52) = v248;
    }
    else
    {
      v53 = *v51;
      v54 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v53 + 8 * v52) = v54;
    }
    *(_DWORD *)(v34 + 36) = v52 + 1;
  }
  v55 = v265;
  v265 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete(v55, v44, v45, v46, v47, v48, v49, v50);
    else
      --*(_DWORD *)v55;
  }
  v56 = v264;
  v264 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v57 = 0xC00000002;
  *(_QWORD *)(v57 + 8) = "scriptSource";
  *(_DWORD *)(v57 + 16) = 4;
  v264 = (WTF *)v57;
  v58 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v58 = 0x400000001;
  v64 = *(_DWORD **)a3;
  *((_QWORD *)v58 + 1) = *(_QWORD *)a3;
  if (v64)
    *v64 += 2;
  v265 = v58;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v35, (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v59, v60, v61, v62, v63, (uint64_t)v266);
  if (v267)
  {
    v72 = (uint64_t *)(v34 + 24);
    v73 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v73 == *(_DWORD *)(v34 + 32))
    {
      v249 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v264);
      v73 = *(unsigned int *)(v34 + 36);
      v250 = *(_QWORD *)(v34 + 24);
      v251 = *v249;
      if (*v249)
        *v251 += 2;
      *(_QWORD *)(v250 + 8 * v73) = v251;
    }
    else
    {
      v74 = *v72;
      v75 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v74 + 8 * v73) = v75;
    }
    *(_DWORD *)(v34 + 36) = v73 + 1;
  }
  v76 = v265;
  v265 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 1)
      WTF::JSONImpl::Value::operator delete(v76, v65, v66, v67, v68, v69, v70, v71);
    else
      --*(_DWORD *)v76;
  }
  v77 = v264;
  v264 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v78 = 0x900000002;
  *(_QWORD *)(v78 + 8) = "startLine";
  *(_DWORD *)(v78 + 16) = 4;
  v264 = (WTF *)v78;
  v79 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v79 = 0x300000001;
  v79[1] = (double)a4;
  v265 = (WTF *)v79;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v35, (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v80, v81, v82, v83, v84, (uint64_t)v266);
  if (v267)
  {
    v92 = (uint64_t *)(v34 + 24);
    v93 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v93 == *(_DWORD *)(v34 + 32))
    {
      v252 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v264);
      v93 = *(unsigned int *)(v34 + 36);
      v253 = *(_QWORD *)(v34 + 24);
      v254 = *v252;
      if (*v252)
        *v254 += 2;
      *(_QWORD *)(v253 + 8 * v93) = v254;
    }
    else
    {
      v94 = *v92;
      v95 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v94 + 8 * v93) = v95;
    }
    *(_DWORD *)(v34 + 36) = v93 + 1;
  }
  v96 = v265;
  v265 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 1)
      WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
    else
      --*(_DWORD *)v96;
  }
  v97 = v264;
  v264 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x900000002;
  *(_QWORD *)(v98 + 8) = "errorLine";
  *(_DWORD *)(v98 + 16) = 4;
  v264 = (WTF *)v98;
  v99 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v99 = 0x300000001;
  v99[1] = (double)a5;
  v265 = (WTF *)v99;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v35, (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v100, v101, v102, v103, v104, (uint64_t)v266);
  if (v267)
  {
    v112 = (uint64_t *)(v34 + 24);
    v113 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v113 == *(_DWORD *)(v34 + 32))
    {
      v255 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v264);
      v113 = *(unsigned int *)(v34 + 36);
      v256 = *(_QWORD *)(v34 + 24);
      v257 = *v255;
      if (*v255)
        *v257 += 2;
      *(_QWORD *)(v256 + 8 * v113) = v257;
    }
    else
    {
      v114 = *v112;
      v115 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v114 + 8 * v113) = v115;
    }
    *(_DWORD *)(v34 + 36) = v113 + 1;
  }
  v116 = v265;
  v265 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 1)
      WTF::JSONImpl::Value::operator delete(v116, v105, v106, v107, v108, v109, v110, v111);
    else
      --*(_DWORD *)v116;
  }
  v117 = v264;
  v264 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v105, v106, v107, v108, v109, v110, v111);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v118 = 0xC00000002;
  *(_QWORD *)(v118 + 8) = "errorMessage";
  *(_DWORD *)(v118 + 16) = 4;
  v264 = (WTF *)v118;
  v119 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v119 = 0x400000001;
  v125 = *(_DWORD **)a6;
  *((_QWORD *)v119 + 1) = *(_QWORD *)a6;
  if (v125)
    *v125 += 2;
  v265 = v119;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v35, (WTF::AtomStringImpl *)&v264, (const WTF::StringImpl *)&v265, v120, v121, v122, v123, v124, (uint64_t)v266);
  if (v267)
  {
    v133 = (uint64_t *)(v34 + 24);
    v134 = *(unsigned int *)(v34 + 36);
    if ((_DWORD)v134 == *(_DWORD *)(v34 + 32))
    {
      v258 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v133, v134 + 1, (unint64_t)&v264);
      v134 = *(unsigned int *)(v34 + 36);
      v259 = *(_QWORD *)(v34 + 24);
      v260 = *v258;
      if (*v258)
        *v260 += 2;
      *(_QWORD *)(v259 + 8 * v134) = v260;
    }
    else
    {
      v135 = *v133;
      v136 = v264;
      if (v264)
        *(_DWORD *)v264 += 2;
      *(_QWORD *)(v135 + 8 * v134) = v136;
    }
    *(_DWORD *)(v34 + 36) = v134 + 1;
  }
  v137 = v265;
  v265 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 1)
      WTF::JSONImpl::Value::operator delete(v137, v126, v127, v128, v129, v130, v131, v132);
    else
      --*(_DWORD *)v137;
  }
  v138 = v264;
  v264 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v126, v127, v128, v129, v130, v131, v132);
      WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v139 = 0x600000002;
  *(_QWORD *)(v139 + 8) = "params";
  *(_DWORD *)(v139 + 16) = 4;
  v264 = (WTF *)v34;
  v265 = (WTF *)v139;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v12 + 16), (WTF::AtomStringImpl *)&v265, (const WTF::StringImpl *)&v264, v140, v141, v142, v143, v144, (uint64_t)v266);
  if (v267)
  {
    v152 = (uint64_t *)(v12 + 24);
    v153 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v153 == *(_DWORD *)(v12 + 32))
    {
      v261 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v152, v153 + 1, (unint64_t)&v265);
      v153 = *(unsigned int *)(v12 + 36);
      v262 = *(_QWORD *)(v12 + 24);
      v263 = *v261;
      if (*v261)
        *v263 += 2;
      *(_QWORD *)(v262 + 8 * v153) = v263;
    }
    else
    {
      v154 = *v152;
      v155 = v265;
      if (v265)
        *(_DWORD *)v265 += 2;
      *(_QWORD *)(v154 + 8 * v153) = v155;
    }
    *(_DWORD *)(v12 + 36) = v153 + 1;
  }
  v156 = v264;
  v264 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 1)
      WTF::JSONImpl::Value::operator delete(v156, v145, v146, v147, v148, v149, v150, v151);
    else
      --*(_DWORD *)v156;
  }
  v157 = v265;
  v265 = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
    {
      WTF::StringImpl::~StringImpl(v157, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
    }
    else
    {
      *(_DWORD *)v157 -= 2;
    }
  }
  v158 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v12, v146, v147, v148, v149, v150, v151, v266);
  v166 = *(unsigned int *)(v158 + 20);
  if ((_DWORD)v166)
  {
    v167 = *(uint64_t **)(v158 + 8);
    v168 = 8 * v166;
    do
    {
      v169 = *v167++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v169 + 24))(v169, v266);
      v168 -= 8;
    }
    while (v168);
  }
  v170 = v266[0];
  v266[0] = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v159, v160, v161, v162, v163, v164, v165);
      WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  if (*(_DWORD *)v12 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v12, v159, v160, v161, v162, v163, v164, v165);
  else
    --*(_DWORD *)v12;
}

void Inspector::DebuggerFrontendDispatcher::breakpointResolved(uint64_t *a1, _DWORD **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1B00000002;
  *(_QWORD *)(v8 + 8) = "Debugger.breakpointResolved";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0xC00000002;
  *(_QWORD *)(v30 + 8) = "breakpointId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x800000002;
  *(_QWORD *)(v51 + 8) = "location";
  *(_DWORD *)(v51 + 16) = 4;
  v52 = *a3;
  *a3 = 0;
  v163 = v52;
  v164 = (WTF *)v51;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v164);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v163;
  v163 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v164;
  v164 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::DebuggerFrontendDispatcher::paused(uint64_t *a1, WTF **a2, _DWORD **a3, WTF **a4, WTF **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD **v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD **v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD **v226;
  uint64_t v227;
  _DWORD *v228;
  WTF *v229;
  WTF *v230;
  WTF::StringImpl *v231[2];
  char v232;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v229 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0xF00000002;
  *(_QWORD *)(v12 + 8) = "Debugger.paused";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v230 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v14, v15, v16, v17, v18, (uint64_t)v231);
  if (v232)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v211 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v229);
      v27 = *(unsigned int *)(v10 + 36);
      v212 = *(_QWORD *)(v10 + 24);
      v213 = *v211;
      if (*v211)
        *v213 += 2;
      *(_QWORD *)(v212 + 8 * v27) = v213;
    }
    else
    {
      v28 = *v26;
      v29 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v230;
  v230 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v229;
  v229 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0xA00000002;
  *(_QWORD *)(v34 + 8) = "callFrames";
  *(_DWORD *)(v34 + 16) = 4;
  v35 = *a2;
  *a2 = 0;
  v229 = v35;
  v230 = (WTF *)v34;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v32 + 16), &v230, (const WTF::StringImpl *)&v229, v36, v37, v38, v39, v40, (uint64_t)v231);
  if (v232)
  {
    v48 = (uint64_t *)(v32 + 24);
    v49 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v32 + 32))
    {
      v214 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v230);
      v49 = *(unsigned int *)(v32 + 36);
      v215 = *(_QWORD *)(v32 + 24);
      v216 = *v214;
      if (*v214)
        *v216 += 2;
      *(_QWORD *)(v215 + 8 * v49) = v216;
    }
    else
    {
      v50 = *v48;
      v51 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *(_DWORD *)(v32 + 36) = v49 + 1;
  }
  v52 = v229;
  v229 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete(v52, v41, v42, v43, v44, v45, v46, v47);
    else
      --*(_DWORD *)v52;
  }
  v53 = v230;
  v230 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v54 = 0x600000002;
  *(_QWORD *)(v54 + 8) = "reason";
  *(_DWORD *)(v54 + 16) = 4;
  v229 = (WTF *)v54;
  v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v55 = 0x400000001;
  v61 = *a3;
  *((_QWORD *)v55 + 1) = *a3;
  if (v61)
    *v61 += 2;
  v230 = v55;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v56, v57, v58, v59, v60, (uint64_t)v231);
  if (v232)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v217 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v229);
      v70 = *(unsigned int *)(v32 + 36);
      v218 = *(_QWORD *)(v32 + 24);
      v219 = *v217;
      if (*v217)
        *v219 += 2;
      *(_QWORD *)(v218 + 8 * v70) = v219;
    }
    else
    {
      v71 = *v69;
      v72 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v230;
  v230 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v229;
  v229 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  if (*a4)
  {
    v75 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v75 = 0x400000002;
    *(_QWORD *)(v75 + 8) = "data";
    *(_DWORD *)(v75 + 16) = 4;
    v76 = *a4;
    *a4 = 0;
    v229 = v76;
    v230 = (WTF *)v75;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v77, v78, v79, v80, v81, (uint64_t)v231);
    if (v232)
    {
      v89 = (uint64_t *)(v32 + 24);
      v90 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v90 == *(_DWORD *)(v32 + 32))
      {
        v223 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v230);
        v90 = *(unsigned int *)(v32 + 36);
        v224 = *(_QWORD *)(v32 + 24);
        v225 = *v223;
        if (*v223)
          *v225 += 2;
        *(_QWORD *)(v224 + 8 * v90) = v225;
      }
      else
      {
        v91 = *v89;
        v92 = v230;
        if (v230)
          *(_DWORD *)v230 += 2;
        *(_QWORD *)(v91 + 8 * v90) = v92;
      }
      *(_DWORD *)(v32 + 36) = v90 + 1;
    }
    v93 = v229;
    v229 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 1)
        WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
      else
        --*(_DWORD *)v93;
    }
    v94 = v230;
    v230 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
      {
        WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
      }
      else
      {
        *(_DWORD *)v94 -= 2;
      }
    }
  }
  if (*a5)
  {
    v95 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v95 = 0xF00000002;
    *(_QWORD *)(v95 + 8) = "asyncStackTrace";
    *(_DWORD *)(v95 + 16) = 4;
    v96 = *a5;
    *a5 = 0;
    v229 = v96;
    v230 = (WTF *)v95;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v97, v98, v99, v100, v101, (uint64_t)v231);
    if (v232)
    {
      v109 = (uint64_t *)(v32 + 24);
      v110 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v110 == *(_DWORD *)(v32 + 32))
      {
        v226 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v230);
        v110 = *(unsigned int *)(v32 + 36);
        v227 = *(_QWORD *)(v32 + 24);
        v228 = *v226;
        if (*v226)
          *v228 += 2;
        *(_QWORD *)(v227 + 8 * v110) = v228;
      }
      else
      {
        v111 = *v109;
        v112 = v230;
        if (v230)
          *(_DWORD *)v230 += 2;
        *(_QWORD *)(v111 + 8 * v110) = v112;
      }
      *(_DWORD *)(v32 + 36) = v110 + 1;
    }
    v113 = v229;
    v229 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 1)
        WTF::JSONImpl::Value::operator delete(v113, v102, v103, v104, v105, v106, v107, v108);
      else
        --*(_DWORD *)v113;
    }
    v114 = v230;
    v230 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
      {
        WTF::StringImpl::~StringImpl(v114, v102, v103, v104, v105, v106, v107, v108);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        *(_DWORD *)v114 -= 2;
      }
    }
  }
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0x600000002;
  *(_QWORD *)(v115 + 8) = "params";
  *(_DWORD *)(v115 + 16) = 4;
  v229 = (WTF *)v32;
  v230 = (WTF *)v115;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v116, v117, v118, v119, v120, (uint64_t)v231);
  if (v232)
  {
    v128 = (uint64_t *)(v10 + 24);
    v129 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v129 == *(_DWORD *)(v10 + 32))
    {
      v220 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v230);
      v129 = *(unsigned int *)(v10 + 36);
      v221 = *(_QWORD *)(v10 + 24);
      v222 = *v220;
      if (*v220)
        *v222 += 2;
      *(_QWORD *)(v221 + 8 * v129) = v222;
    }
    else
    {
      v130 = *v128;
      v131 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v130 + 8 * v129) = v131;
    }
    *(_DWORD *)(v10 + 36) = v129 + 1;
  }
  v132 = v229;
  v229 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 1)
      WTF::JSONImpl::Value::operator delete(v132, v121, v122, v123, v124, v125, v126, v127);
    else
      --*(_DWORD *)v132;
  }
  v133 = v230;
  v230 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v121, v122, v123, v124, v125, v126, v127);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v122, v123, v124, v125, v126, v127, v231);
  v142 = *(unsigned int *)(v134 + 20);
  if ((_DWORD)v142)
  {
    v143 = *(uint64_t **)(v134 + 8);
    v144 = 8 * v142;
    do
    {
      v145 = *v143++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v145 + 24))(v145, v231);
      v144 -= 8;
    }
    while (v144);
  }
  v146 = v231[0];
  v231[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v135, v136, v137, v138, v139, v140, v141);
  else
    --*(_DWORD *)v10;
}

void Inspector::DebuggerFrontendDispatcher::resumed(Inspector::DebuggerFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1000000002;
  *(_QWORD *)(v4 + 8) = "Debugger.resumed";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::DebuggerFrontendDispatcher::didSampleProbe(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Debugger.didSampleProbe";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "sample";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::DebuggerFrontendDispatcher::playBreakpointActionSound(Inspector::DebuggerFrontendDispatcher *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2200000002;
  *(_QWORD *)(v6 + 8) = "Debugger.playBreakpointActionSound";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x1200000002;
  *(_QWORD *)(v27 + 8) = "breakpointActionId";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::HeapFrontendDispatcher::garbageCollected(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "Heap.garbageCollected";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xA00000002;
  *(_QWORD *)(v27 + 8) = "collection";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::HeapFrontendDispatcher::trackingStart(Inspector::HeapFrontendDispatcher *this, double a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1200000002;
  *(_QWORD *)(v8 + 8) = "Heap.trackingStart";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "timestamp";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x200000001;
  v30[1] = a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xC00000002;
  *(_QWORD *)(v49 + 8) = "snapshotData";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *(_DWORD **)a3;
  *((_QWORD *)v50 + 1) = *(_QWORD *)a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::HeapFrontendDispatcher::trackingComplete(Inspector::HeapFrontendDispatcher *this, double a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1500000002;
  *(_QWORD *)(v8 + 8) = "Heap.trackingComplete";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "timestamp";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x200000001;
  v30[1] = a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0xC00000002;
  *(_QWORD *)(v49 + 8) = "snapshotData";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *(_DWORD **)a3;
  *((_QWORD *)v50 + 1) = *(_QWORD *)a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::InspectorFrontendDispatcher::evaluateForTestInFrontend(Inspector::InspectorFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2300000002;
  *(_QWORD *)(v6 + 8) = "Inspector.evaluateForTestInFrontend";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "script";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::InspectorFrontendDispatcher::inspect(uint64_t *a1, WTF **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1100000002;
  *(_QWORD *)(v8 + 8) = "Inspector.inspect";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "object";
  *(_DWORD *)(v29 + 16) = 4;
  v30 = *a2;
  *a2 = 0;
  v161 = v30;
  v162 = (WTF *)v29;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v161;
  v161 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x500000002;
  *(_QWORD *)(v49 + 8) = "hints";
  *(_DWORD *)(v49 + 16) = 4;
  v50 = *a3;
  *a3 = 0;
  v161 = v50;
  v162 = (WTF *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v161;
  v161 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v162;
  v162 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::LayerTreeFrontendDispatcher::layerTreeDidChange(Inspector::LayerTreeFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1C00000002;
  *(_QWORD *)(v4 + 8) = "LayerTree.layerTreeDidChange";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::MemoryFrontendDispatcher::memoryPressure(Inspector::MemoryFrontendDispatcher *this, double a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  WTF *v162;
  WTF *v163;
  WTF::StringImpl *v164[2];
  char v165;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v162 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1500000002;
  *(_QWORD *)(v8 + 8) = "Memory.memoryPressure";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v163 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v10, v11, v12, v13, v14, (uint64_t)v164);
  if (v165)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v162);
      v23 = *(unsigned int *)(v6 + 36);
      v151 = *(_QWORD *)(v6 + 24);
      v152 = *v150;
      if (*v150)
        *v152 += 2;
      *(_QWORD *)(v151 + 8 * v23) = v152;
    }
    else
    {
      v24 = *v22;
      v25 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v163;
  v163 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v162;
  v162 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "timestamp";
  *(_DWORD *)(v29 + 16) = 4;
  v162 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x200000001;
  v30[1] = a2;
  v163 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v31, v32, v33, v34, v35, (uint64_t)v164);
  if (v165)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v162);
      v44 = *(unsigned int *)(v28 + 36);
      v154 = *(_QWORD *)(v28 + 24);
      v155 = *v153;
      if (*v153)
        *v155 += 2;
      *(_QWORD *)(v154 + 8 * v44) = v155;
    }
    else
    {
      v45 = *v43;
      v46 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v163;
  v163 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v162;
  v162 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x800000002;
  *(_QWORD *)(v49 + 8) = "severity";
  *(_DWORD *)(v49 + 16) = 4;
  v162 = (WTF *)v49;
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = 0x400000001;
  v56 = *(_DWORD **)a3;
  *((_QWORD *)v50 + 1) = *(_QWORD *)a3;
  if (v56)
    *v56 += 2;
  v163 = v50;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v163, v51, v52, v53, v54, v55, (uint64_t)v164);
  if (v165)
  {
    v64 = (uint64_t *)(v28 + 24);
    v65 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v28 + 32))
    {
      v156 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)&v162);
      v65 = *(unsigned int *)(v28 + 36);
      v157 = *(_QWORD *)(v28 + 24);
      v158 = *v156;
      if (*v156)
        *v158 += 2;
      *(_QWORD *)(v157 + 8 * v65) = v158;
    }
    else
    {
      v66 = *v64;
      v67 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v66 + 8 * v65) = v67;
    }
    *(_DWORD *)(v28 + 36) = v65 + 1;
  }
  v68 = v163;
  v163 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 1)
      WTF::JSONImpl::Value::operator delete(v68, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v68;
  }
  v69 = v162;
  v162 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x600000002;
  *(_QWORD *)(v70 + 8) = "params";
  *(_DWORD *)(v70 + 16) = 4;
  v162 = (WTF *)v28;
  v163 = (WTF *)v70;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v162, v71, v72, v73, v74, v75, (uint64_t)v164);
  if (v165)
  {
    v83 = (uint64_t *)(v6 + 24);
    v84 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v84 == *(_DWORD *)(v6 + 32))
    {
      v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v163);
      v84 = *(unsigned int *)(v6 + 36);
      v160 = *(_QWORD *)(v6 + 24);
      v161 = *v159;
      if (*v159)
        *v161 += 2;
      *(_QWORD *)(v160 + 8 * v84) = v161;
    }
    else
    {
      v85 = *v83;
      v86 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v85 + 8 * v84) = v86;
    }
    *(_DWORD *)(v6 + 36) = v84 + 1;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v87;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v77, v78, v79, v80, v81, v82, v164);
  v97 = *(unsigned int *)(v89 + 20);
  if ((_DWORD)v97)
  {
    v98 = *(uint64_t **)(v89 + 8);
    v99 = 8 * v97;
    do
    {
      v100 = *v98++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 24))(v100, v164);
      v99 -= 8;
    }
    while (v99);
  }
  v101 = v164[0];
  v164[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v90, v91, v92, v93, v94, v95, v96);
  else
    --*(_DWORD *)v6;
}

void Inspector::MemoryFrontendDispatcher::trackingStart(Inspector::MemoryFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "Memory.trackingStart";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::MemoryFrontendDispatcher::trackingUpdate(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "Memory.trackingUpdate";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x500000002;
  *(_QWORD *)(v27 + 8) = "event";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::MemoryFrontendDispatcher::trackingComplete(Inspector::MemoryFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Memory.trackingComplete";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::NetworkFrontendDispatcher::requestWillBeSent(uint64_t *a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, WTF **a6, WTF **a7, WTF **a8, double a9, double a10, int *a11, _DWORD **a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  WTF *v146;
  WTF *v147;
  uint64_t v148;
  double *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::AtomStringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  uint64_t v168;
  double *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::AtomStringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  WTF *v186;
  WTF *v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF::AtomStringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  WTF *v206;
  WTF *v207;
  uint64_t v208;
  WTF *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WTF::AtomStringImpl *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  WTF *v225;
  WTF *v226;
  WTF *v227;
  uint64_t v228;
  char **v229;
  char *v230;
  int v231;
  char *v232;
  int *v233;
  WTF *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  WTF::AtomStringImpl *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  WTF *v250;
  WTF *v251;
  WTF *v252;
  uint64_t v253;
  WTF *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _DWORD *v260;
  WTF::AtomStringImpl *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  WTF *v271;
  WTF *v272;
  WTF *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF::AtomStringImpl *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  WTF *v290;
  WTF *v291;
  WTF *v292;
  uint64_t v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  WTF::StringImpl *v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  void *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  _DWORD **v434;
  uint64_t v435;
  _DWORD *v436;
  _DWORD **v437;
  uint64_t v438;
  _DWORD *v439;
  _DWORD **v440;
  uint64_t v441;
  _DWORD *v442;
  _DWORD **v443;
  uint64_t v444;
  _DWORD *v445;
  _DWORD **v446;
  uint64_t v447;
  _DWORD *v448;
  _DWORD **v449;
  uint64_t v450;
  _DWORD *v451;
  _DWORD **v452;
  uint64_t v453;
  _DWORD *v454;
  _DWORD **v455;
  uint64_t v456;
  _DWORD *v457;
  _DWORD **v458;
  uint64_t v459;
  _DWORD *v460;
  _DWORD **v461;
  uint64_t v462;
  _DWORD *v463;
  _DWORD **v464;
  uint64_t v465;
  _DWORD *v466;
  _DWORD **v467;
  uint64_t v468;
  _DWORD *v469;
  _DWORD **v470;
  uint64_t v471;
  _DWORD *v472;
  WTF *v475;
  WTF *v476;
  WTF::StringImpl *v477[2];
  char v478;

  v20 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v20 = 0x500000001;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x600000002;
  *(_QWORD *)(v21 + 8) = "method";
  *(_DWORD *)(v21 + 16) = 4;
  v475 = (WTF *)v21;
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x1900000002;
  *(_QWORD *)(v22 + 8) = "Network.requestWillBeSent";
  *(_DWORD *)(v22 + 16) = 4;
  v23 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v23 = 0x400000001;
  *((_QWORD *)v23 + 1) = v22;
  *(_DWORD *)v22 += 2;
  v476 = v23;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v20 + 16), (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v24, v25, v26, v27, v28, (uint64_t)v477);
  if (v478)
  {
    v36 = (uint64_t *)(v20 + 24);
    v37 = *(unsigned int *)(v20 + 36);
    if ((_DWORD)v37 == *(_DWORD *)(v20 + 32))
    {
      v434 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v475);
      v37 = *(unsigned int *)(v20 + 36);
      v435 = *(_QWORD *)(v20 + 24);
      v436 = *v434;
      if (*v434)
        *v436 += 2;
      *(_QWORD *)(v435 + 8 * v37) = v436;
    }
    else
    {
      v38 = *v36;
      v39 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v38 + 8 * v37) = v39;
    }
    *(_DWORD *)(v20 + 36) = v37 + 1;
  }
  v40 = v476;
  v476 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::JSONImpl::Value::operator delete(v40, v29, v30, v31, v32, v33, v34, v35);
    else
      --*(_DWORD *)v40;
  }
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
  v41 = v475;
  v475 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v314, v315, v316, v317, v318, v319, v320, v321);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v42 = 0x500000001;
  *(_QWORD *)(v42 + 16) = 0;
  v43 = (uint64_t *)(v42 + 16);
  *(_QWORD *)(v42 + 24) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x900000002;
  *(_QWORD *)(v44 + 8) = "requestId";
  *(_DWORD *)(v44 + 16) = 4;
  v475 = (WTF *)v44;
  v45 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v45 = 0x400000001;
  v51 = *a2;
  *((_QWORD *)v45 + 1) = *a2;
  if (v51)
    *v51 += 2;
  v476 = v45;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v46, v47, v48, v49, v50, (uint64_t)v477);
  if (v478)
  {
    v59 = (uint64_t *)(v42 + 24);
    v60 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v60 == *(_DWORD *)(v42 + 32))
    {
      v437 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v475);
      v60 = *(unsigned int *)(v42 + 36);
      v438 = *(_QWORD *)(v42 + 24);
      v439 = *v437;
      if (*v437)
        *v439 += 2;
      *(_QWORD *)(v438 + 8 * v60) = v439;
    }
    else
    {
      v61 = *v59;
      v62 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v61 + 8 * v60) = v62;
    }
    *(_DWORD *)(v42 + 36) = v60 + 1;
  }
  v63 = v476;
  v476 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
      WTF::JSONImpl::Value::operator delete(v63, v52, v53, v54, v55, v56, v57, v58);
    else
      --*(_DWORD *)v63;
  }
  v64 = v475;
  v475 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v65 = 0x700000002;
  *(_QWORD *)(v65 + 8) = "frameId";
  *(_DWORD *)(v65 + 16) = 4;
  v475 = (WTF *)v65;
  v66 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v66 = 0x400000001;
  v72 = *a3;
  *((_QWORD *)v66 + 1) = *a3;
  if (v72)
    *v72 += 2;
  v476 = v66;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v67, v68, v69, v70, v71, (uint64_t)v477);
  if (v478)
  {
    v80 = (uint64_t *)(v42 + 24);
    v81 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v81 == *(_DWORD *)(v42 + 32))
    {
      v440 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v475);
      v81 = *(unsigned int *)(v42 + 36);
      v441 = *(_QWORD *)(v42 + 24);
      v442 = *v440;
      if (*v440)
        *v442 += 2;
      *(_QWORD *)(v441 + 8 * v81) = v442;
    }
    else
    {
      v82 = *v80;
      v83 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v82 + 8 * v81) = v83;
    }
    *(_DWORD *)(v42 + 36) = v81 + 1;
  }
  v84 = v476;
  v476 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 1)
      WTF::JSONImpl::Value::operator delete(v84, v73, v74, v75, v76, v77, v78, v79);
    else
      --*(_DWORD *)v84;
  }
  v85 = v475;
  v475 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x800000002;
  *(_QWORD *)(v86 + 8) = "loaderId";
  *(_DWORD *)(v86 + 16) = 4;
  v475 = (WTF *)v86;
  v87 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v87 = 0x400000001;
  v93 = *a4;
  *((_QWORD *)v87 + 1) = *a4;
  if (v93)
    *v93 += 2;
  v476 = v87;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v88, v89, v90, v91, v92, (uint64_t)v477);
  if (v478)
  {
    v101 = (uint64_t *)(v42 + 24);
    v102 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v102 == *(_DWORD *)(v42 + 32))
    {
      v443 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v475);
      v102 = *(unsigned int *)(v42 + 36);
      v444 = *(_QWORD *)(v42 + 24);
      v445 = *v443;
      if (*v443)
        *v445 += 2;
      *(_QWORD *)(v444 + 8 * v102) = v445;
    }
    else
    {
      v103 = *v101;
      v104 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v103 + 8 * v102) = v104;
    }
    *(_DWORD *)(v42 + 36) = v102 + 1;
  }
  v105 = v476;
  v476 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 1)
      WTF::JSONImpl::Value::operator delete(v105, v94, v95, v96, v97, v98, v99, v100);
    else
      --*(_DWORD *)v105;
  }
  v106 = v475;
  v475 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v107 = 0xB00000002;
  *(_QWORD *)(v107 + 8) = "documentURL";
  *(_DWORD *)(v107 + 16) = 4;
  v475 = (WTF *)v107;
  v108 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v108 = 0x400000001;
  v114 = *a5;
  *((_QWORD *)v108 + 1) = *a5;
  if (v114)
    *v114 += 2;
  v476 = v108;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v109, v110, v111, v112, v113, (uint64_t)v477);
  if (v478)
  {
    v122 = (uint64_t *)(v42 + 24);
    v123 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v123 == *(_DWORD *)(v42 + 32))
    {
      v446 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v122, v123 + 1, (unint64_t)&v475);
      v123 = *(unsigned int *)(v42 + 36);
      v447 = *(_QWORD *)(v42 + 24);
      v448 = *v446;
      if (*v446)
        *v448 += 2;
      *(_QWORD *)(v447 + 8 * v123) = v448;
    }
    else
    {
      v124 = *v122;
      v125 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v124 + 8 * v123) = v125;
    }
    *(_DWORD *)(v42 + 36) = v123 + 1;
  }
  v126 = v476;
  v476 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 1)
      WTF::JSONImpl::Value::operator delete(v126, v115, v116, v117, v118, v119, v120, v121);
    else
      --*(_DWORD *)v126;
  }
  v127 = v475;
  v475 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v128 = 0x700000002;
  *(_QWORD *)(v128 + 8) = "request";
  *(_DWORD *)(v128 + 16) = 4;
  v129 = *a6;
  *a6 = 0;
  v475 = v129;
  v476 = (WTF *)v128;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v43, (WTF::AtomStringImpl *)&v476, (const WTF::StringImpl *)&v475, v130, v131, v132, v133, v134, (uint64_t)v477);
  if (v478)
  {
    v142 = (uint64_t *)(v42 + 24);
    v143 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v143 == *(_DWORD *)(v42 + 32))
    {
      v449 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v142, v143 + 1, (unint64_t)&v476);
      v143 = *(unsigned int *)(v42 + 36);
      v450 = *(_QWORD *)(v42 + 24);
      v451 = *v449;
      if (*v449)
        *v451 += 2;
      *(_QWORD *)(v450 + 8 * v143) = v451;
    }
    else
    {
      v144 = *v142;
      v145 = v476;
      if (v476)
        *(_DWORD *)v476 += 2;
      *(_QWORD *)(v144 + 8 * v143) = v145;
    }
    *(_DWORD *)(v42 + 36) = v143 + 1;
  }
  v146 = v475;
  v475 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 1)
      WTF::JSONImpl::Value::operator delete(v146, v135, v136, v137, v138, v139, v140, v141);
    else
      --*(_DWORD *)v146;
  }
  v147 = v476;
  v476 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v354, v355, v356, v357, v358, v359, v360, v361);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v148 = 0x900000002;
  *(_QWORD *)(v148 + 8) = "timestamp";
  *(_DWORD *)(v148 + 16) = 4;
  v475 = (WTF *)v148;
  v149 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v149 = 0x200000001;
  v149[1] = a9;
  v476 = (WTF *)v149;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v150, v151, v152, v153, v154, (uint64_t)v477);
  if (v478)
  {
    v162 = (uint64_t *)(v42 + 24);
    v163 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v163 == *(_DWORD *)(v42 + 32))
    {
      v452 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v162, v163 + 1, (unint64_t)&v475);
      v163 = *(unsigned int *)(v42 + 36);
      v453 = *(_QWORD *)(v42 + 24);
      v454 = *v452;
      if (*v452)
        *v454 += 2;
      *(_QWORD *)(v453 + 8 * v163) = v454;
    }
    else
    {
      v164 = *v162;
      v165 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v164 + 8 * v163) = v165;
    }
    *(_DWORD *)(v42 + 36) = v163 + 1;
  }
  v166 = v476;
  v476 = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 1)
      WTF::JSONImpl::Value::operator delete(v166, v155, v156, v157, v158, v159, v160, v161);
    else
      --*(_DWORD *)v166;
  }
  v167 = v475;
  v475 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, v155, v156, v157, v158, v159, v160, v161);
      WTF::fastFree(v362, v363, v364, v365, v366, v367, v368, v369);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
  v168 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v168 = 0x800000002;
  *(_QWORD *)(v168 + 8) = "walltime";
  *(_DWORD *)(v168 + 16) = 4;
  v475 = (WTF *)v168;
  v169 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v169 = 0x200000001;
  v169[1] = a10;
  v476 = (WTF *)v169;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v170, v171, v172, v173, v174, (uint64_t)v477);
  if (v478)
  {
    v182 = (uint64_t *)(v42 + 24);
    v183 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v183 == *(_DWORD *)(v42 + 32))
    {
      v455 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v182, v183 + 1, (unint64_t)&v475);
      v183 = *(unsigned int *)(v42 + 36);
      v456 = *(_QWORD *)(v42 + 24);
      v457 = *v455;
      if (*v455)
        *v457 += 2;
      *(_QWORD *)(v456 + 8 * v183) = v457;
    }
    else
    {
      v184 = *v182;
      v185 = v475;
      if (v475)
        *(_DWORD *)v475 += 2;
      *(_QWORD *)(v184 + 8 * v183) = v185;
    }
    *(_DWORD *)(v42 + 36) = v183 + 1;
  }
  v186 = v476;
  v476 = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 1)
      WTF::JSONImpl::Value::operator delete(v186, v175, v176, v177, v178, v179, v180, v181);
    else
      --*(_DWORD *)v186;
  }
  v187 = v475;
  v475 = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, v175, v176, v177, v178, v179, v180, v181);
      WTF::fastFree(v370, v371, v372, v373, v374, v375, v376, v377);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v188 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v188 = 0x900000002;
  *(_QWORD *)(v188 + 8) = "initiator";
  *(_DWORD *)(v188 + 16) = 4;
  v189 = *a7;
  *a7 = 0;
  v475 = v189;
  v476 = (WTF *)v188;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v43, (WTF::AtomStringImpl *)&v476, (const WTF::StringImpl *)&v475, v190, v191, v192, v193, v194, (uint64_t)v477);
  if (v478)
  {
    v202 = (uint64_t *)(v42 + 24);
    v203 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v203 == *(_DWORD *)(v42 + 32))
    {
      v458 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v202, v203 + 1, (unint64_t)&v476);
      v203 = *(unsigned int *)(v42 + 36);
      v459 = *(_QWORD *)(v42 + 24);
      v460 = *v458;
      if (*v458)
        *v460 += 2;
      *(_QWORD *)(v459 + 8 * v203) = v460;
    }
    else
    {
      v204 = *v202;
      v205 = v476;
      if (v476)
        *(_DWORD *)v476 += 2;
      *(_QWORD *)(v204 + 8 * v203) = v205;
    }
    *(_DWORD *)(v42 + 36) = v203 + 1;
  }
  v206 = v475;
  v475 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 1)
      WTF::JSONImpl::Value::operator delete(v206, v195, v196, v197, v198, v199, v200, v201);
    else
      --*(_DWORD *)v206;
  }
  v207 = v476;
  v476 = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
    {
      WTF::StringImpl::~StringImpl(v207, v195, v196, v197, v198, v199, v200, v201);
      WTF::fastFree(v378, v379, v380, v381, v382, v383, v384, v385);
    }
    else
    {
      *(_DWORD *)v207 -= 2;
    }
  }
  if (*a8)
  {
    v208 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v208 = 0x1000000002;
    *(_QWORD *)(v208 + 8) = "redirectResponse";
    *(_DWORD *)(v208 + 16) = 4;
    v209 = *a8;
    *a8 = 0;
    v475 = v209;
    v476 = (WTF *)v208;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v43, (WTF::AtomStringImpl *)&v476, (const WTF::StringImpl *)&v475, v210, v211, v212, v213, v214, (uint64_t)v477);
    if (v478)
    {
      v222 = (uint64_t *)(v42 + 24);
      v223 = *(unsigned int *)(v42 + 36);
      if ((_DWORD)v223 == *(_DWORD *)(v42 + 32))
      {
        v464 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v222, v223 + 1, (unint64_t)&v476);
        v223 = *(unsigned int *)(v42 + 36);
        v465 = *(_QWORD *)(v42 + 24);
        v466 = *v464;
        if (*v464)
          *v466 += 2;
        *(_QWORD *)(v465 + 8 * v223) = v466;
      }
      else
      {
        v224 = *v222;
        v225 = v476;
        if (v476)
          *(_DWORD *)v476 += 2;
        *(_QWORD *)(v224 + 8 * v223) = v225;
      }
      *(_DWORD *)(v42 + 36) = v223 + 1;
    }
    v226 = v475;
    v475 = 0;
    if (v226)
    {
      if (*(_DWORD *)v226 == 1)
        WTF::JSONImpl::Value::operator delete(v226, v215, v216, v217, v218, v219, v220, v221);
      else
        --*(_DWORD *)v226;
    }
    v227 = v476;
    v476 = 0;
    if (v227)
    {
      if (*(_DWORD *)v227 == 2)
      {
        WTF::StringImpl::~StringImpl(v227, v215, v216, v217, v218, v219, v220, v221);
        WTF::fastFree(v402, v403, v404, v405, v406, v407, v408, v409);
      }
      else
      {
        *(_DWORD *)v227 -= 2;
      }
    }
  }
  if (*((_BYTE *)a11 + 4))
  {
    v228 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v228 = 0x400000002;
    *(_QWORD *)(v228 + 8) = "type";
    *(_DWORD *)(v228 + 16) = 4;
    v475 = (WTF *)v228;
    if (*((_BYTE *)a11 + 4))
    {
      v229 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * *a11];
      v230 = v229[1];
      if (v230)
      {
        v231 = (_DWORD)v230 - 1;
        if (v230 == (char *)1)
        {
          v233 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        else
        {
          v232 = *v229;
          v233 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
          *v233 = 2;
          v233[1] = v231;
          *((_QWORD *)v233 + 1) = v232;
          v233[4] = 4;
        }
LABEL_137:
        v234 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v234 = 0x400000001;
        *((_QWORD *)v234 + 1) = v233;
        if (v233)
          *v233 += 2;
        v476 = v234;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v235, v236, v237, v238, v239, (uint64_t)v477);
        if (v478)
        {
          v247 = (uint64_t *)(v42 + 24);
          v248 = *(unsigned int *)(v42 + 36);
          if ((_DWORD)v248 == *(_DWORD *)(v42 + 32))
          {
            v470 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v247, v248 + 1, (unint64_t)&v475);
            v248 = *(unsigned int *)(v42 + 36);
            v471 = *(_QWORD *)(v42 + 24);
            v472 = *v470;
            if (*v470)
              *v472 += 2;
            *(_QWORD *)(v471 + 8 * v248) = v472;
          }
          else
          {
            v249 = *v247;
            v250 = v475;
            if (v475)
              *(_DWORD *)v475 += 2;
            *(_QWORD *)(v249 + 8 * v248) = v250;
          }
          *(_DWORD *)(v42 + 36) = v248 + 1;
        }
        v251 = v476;
        v476 = 0;
        if (v251)
        {
          if (*(_DWORD *)v251 == 1)
          {
            WTF::JSONImpl::Value::operator delete(v251, v240, v241, v242, v243, v244, v245, v246);
            if (!v233)
              goto LABEL_151;
            goto LABEL_149;
          }
          --*(_DWORD *)v251;
        }
        if (!v233)
          goto LABEL_151;
LABEL_149:
        if (*v233 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v233, v240, v241, v242, v243, v244, v245, v246);
          WTF::fastFree(v418, v419, v420, v421, v422, v423, v424, v425);
        }
        else
        {
          *v233 -= 2;
        }
LABEL_151:
        v252 = v475;
        v475 = 0;
        if (v252)
        {
          if (*(_DWORD *)v252 == 2)
          {
            WTF::StringImpl::~StringImpl(v252, v240, v241, v242, v243, v244, v245, v246);
            WTF::fastFree(v426, v427, v428, v429, v430, v431, v432, v433);
          }
          else
          {
            *(_DWORD *)v252 -= 2;
          }
        }
        goto LABEL_154;
      }
    }
    else
    {
      __break(1u);
    }
    v233 = 0;
    goto LABEL_137;
  }
LABEL_154:
  if (*a12)
  {
    v253 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v253 = 0x800000002;
    *(_QWORD *)(v253 + 8) = "targetId";
    *(_DWORD *)(v253 + 16) = 4;
    v475 = (WTF *)v253;
    v254 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v254 = 0x400000001;
    v260 = *a12;
    *((_QWORD *)v254 + 1) = *a12;
    if (v260)
      *v260 += 2;
    v476 = v254;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v43, (WTF::AtomStringImpl *)&v475, (const WTF::StringImpl *)&v476, v255, v256, v257, v258, v259, (uint64_t)v477);
    if (v478)
    {
      v268 = (uint64_t *)(v42 + 24);
      v269 = *(unsigned int *)(v42 + 36);
      if ((_DWORD)v269 == *(_DWORD *)(v42 + 32))
      {
        v467 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v268, v269 + 1, (unint64_t)&v475);
        v269 = *(unsigned int *)(v42 + 36);
        v468 = *(_QWORD *)(v42 + 24);
        v469 = *v467;
        if (*v467)
          *v469 += 2;
        *(_QWORD *)(v468 + 8 * v269) = v469;
      }
      else
      {
        v270 = *v268;
        v271 = v475;
        if (v475)
          *(_DWORD *)v475 += 2;
        *(_QWORD *)(v270 + 8 * v269) = v271;
      }
      *(_DWORD *)(v42 + 36) = v269 + 1;
    }
    v272 = v476;
    v476 = 0;
    if (v272)
    {
      if (*(_DWORD *)v272 == 1)
        WTF::JSONImpl::Value::operator delete(v272, v261, v262, v263, v264, v265, v266, v267);
      else
        --*(_DWORD *)v272;
    }
    v273 = v475;
    v475 = 0;
    if (v273)
    {
      if (*(_DWORD *)v273 == 2)
      {
        WTF::StringImpl::~StringImpl(v273, v261, v262, v263, v264, v265, v266, v267);
        WTF::fastFree(v410, v411, v412, v413, v414, v415, v416, v417);
      }
      else
      {
        *(_DWORD *)v273 -= 2;
      }
    }
  }
  v274 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v274 = 0x600000002;
  *(_QWORD *)(v274 + 8) = "params";
  *(_DWORD *)(v274 + 16) = 4;
  v475 = (WTF *)v42;
  v476 = (WTF *)v274;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v20 + 16), (WTF::AtomStringImpl *)&v476, (const WTF::StringImpl *)&v475, v275, v276, v277, v278, v279, (uint64_t)v477);
  if (v478)
  {
    v287 = (uint64_t *)(v20 + 24);
    v288 = *(unsigned int *)(v20 + 36);
    if ((_DWORD)v288 == *(_DWORD *)(v20 + 32))
    {
      v461 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v287, v288 + 1, (unint64_t)&v476);
      v288 = *(unsigned int *)(v20 + 36);
      v462 = *(_QWORD *)(v20 + 24);
      v463 = *v461;
      if (*v461)
        *v463 += 2;
      *(_QWORD *)(v462 + 8 * v288) = v463;
    }
    else
    {
      v289 = *v287;
      v290 = v476;
      if (v476)
        *(_DWORD *)v476 += 2;
      *(_QWORD *)(v289 + 8 * v288) = v290;
    }
    *(_DWORD *)(v20 + 36) = v288 + 1;
  }
  v291 = v475;
  v475 = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 1)
      WTF::JSONImpl::Value::operator delete(v291, v280, v281, v282, v283, v284, v285, v286);
    else
      --*(_DWORD *)v291;
  }
  v292 = v476;
  v476 = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
    {
      WTF::StringImpl::~StringImpl(v292, v280, v281, v282, v283, v284, v285, v286);
      WTF::fastFree(v386, v387, v388, v389, v390, v391, v392, v393);
    }
    else
    {
      *(_DWORD *)v292 -= 2;
    }
  }
  v293 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v20, v281, v282, v283, v284, v285, v286, v477);
  v301 = *(unsigned int *)(v293 + 20);
  if ((_DWORD)v301)
  {
    v302 = *(uint64_t **)(v293 + 8);
    v303 = 8 * v301;
    do
    {
      v304 = *v302++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v304 + 24))(v304, v477);
      v303 -= 8;
    }
    while (v303);
  }
  v305 = v477[0];
  v477[0] = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
    {
      WTF::StringImpl::~StringImpl(v305, v294, v295, v296, v297, v298, v299, v300);
      WTF::fastFree(v394, v395, v396, v397, v398, v399, v400, v401);
    }
    else
    {
      *(_DWORD *)v305 -= 2;
    }
  }
  if (*(_DWORD *)v20 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v20, v294, v295, v296, v297, v298, v299, v300);
  else
    --*(_DWORD *)v20;
}

void Inspector::NetworkFrontendDispatcher::responseReceived(uint64_t *a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, int a5, WTF **a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  WTF::AtomStringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  uint64_t v121;
  char **v122;
  char *v123;
  int v124;
  char *v125;
  int *v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  WTF *v144;
  WTF *v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  WTF *v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::AtomStringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  uint64_t v185;
  WTF::AtomStringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _DWORD **v286;
  uint64_t v287;
  _DWORD *v288;
  _DWORD **v289;
  uint64_t v290;
  _DWORD *v291;
  _DWORD **v292;
  uint64_t v293;
  _DWORD *v294;
  _DWORD **v295;
  uint64_t v296;
  _DWORD *v297;
  _DWORD **v298;
  uint64_t v299;
  _DWORD *v300;
  _DWORD **v301;
  uint64_t v302;
  _DWORD *v303;
  _DWORD **v304;
  uint64_t v305;
  _DWORD *v306;
  _DWORD **v307;
  uint64_t v308;
  _DWORD *v309;
  WTF *v310;
  WTF *v311;
  WTF::StringImpl *v312[2];
  char v313;

  v14 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v14 = 0x500000001;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x600000002;
  *(_QWORD *)(v15 + 8) = "method";
  *(_DWORD *)(v15 + 16) = 4;
  v310 = (WTF *)v15;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x1800000002;
  *(_QWORD *)(v16 + 8) = "Network.responseReceived";
  *(_DWORD *)(v16 + 16) = 4;
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = 0x400000001;
  *((_QWORD *)v17 + 1) = v16;
  *(_DWORD *)v16 += 2;
  v311 = v17;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v18, v19, v20, v21, v22, (uint64_t)v312);
  if (v313)
  {
    v30 = (uint64_t *)(v14 + 24);
    v31 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v31 == *(_DWORD *)(v14 + 32))
    {
      v286 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v310);
      v31 = *(unsigned int *)(v14 + 36);
      v287 = *(_QWORD *)(v14 + 24);
      v288 = *v286;
      if (*v286)
        *v288 += 2;
      *(_QWORD *)(v287 + 8 * v31) = v288;
    }
    else
    {
      v32 = *v30;
      v33 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v32 + 8 * v31) = v33;
    }
    *(_DWORD *)(v14 + 36) = v31 + 1;
  }
  v34 = v311;
  v311 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::JSONImpl::Value::operator delete(v34, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v34;
  }
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
  }
  else
  {
    *(_DWORD *)v16 -= 2;
  }
  v35 = v310;
  v310 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  v36 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v36 = 0x500000001;
  *(_QWORD *)(v36 + 16) = 0;
  v37 = (uint64_t *)(v36 + 16);
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  v38 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v38 = 0x900000002;
  *(_QWORD *)(v38 + 8) = "requestId";
  *(_DWORD *)(v38 + 16) = 4;
  v310 = (WTF *)v38;
  v39 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v39 = 0x400000001;
  v45 = *a2;
  *((_QWORD *)v39 + 1) = *a2;
  if (v45)
    *v45 += 2;
  v311 = v39;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v37, (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v40, v41, v42, v43, v44, (uint64_t)v312);
  if (v313)
  {
    v53 = (uint64_t *)(v36 + 24);
    v54 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v54 == *(_DWORD *)(v36 + 32))
    {
      v289 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v54 + 1, (unint64_t)&v310);
      v54 = *(unsigned int *)(v36 + 36);
      v290 = *(_QWORD *)(v36 + 24);
      v291 = *v289;
      if (*v289)
        *v291 += 2;
      *(_QWORD *)(v290 + 8 * v54) = v291;
    }
    else
    {
      v55 = *v53;
      v56 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v55 + 8 * v54) = v56;
    }
    *(_DWORD *)(v36 + 36) = v54 + 1;
  }
  v57 = v311;
  v311 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
      WTF::JSONImpl::Value::operator delete(v57, v46, v47, v48, v49, v50, v51, v52);
    else
      --*(_DWORD *)v57;
  }
  v58 = v310;
  v310 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v59 = 0x700000002;
  *(_QWORD *)(v59 + 8) = "frameId";
  *(_DWORD *)(v59 + 16) = 4;
  v310 = (WTF *)v59;
  v60 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v60 = 0x400000001;
  v66 = *a3;
  *((_QWORD *)v60 + 1) = *a3;
  if (v66)
    *v66 += 2;
  v311 = v60;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v37, (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v61, v62, v63, v64, v65, (uint64_t)v312);
  if (v313)
  {
    v74 = (uint64_t *)(v36 + 24);
    v75 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v75 == *(_DWORD *)(v36 + 32))
    {
      v292 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v75 + 1, (unint64_t)&v310);
      v75 = *(unsigned int *)(v36 + 36);
      v293 = *(_QWORD *)(v36 + 24);
      v294 = *v292;
      if (*v292)
        *v294 += 2;
      *(_QWORD *)(v293 + 8 * v75) = v294;
    }
    else
    {
      v76 = *v74;
      v77 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v76 + 8 * v75) = v77;
    }
    *(_DWORD *)(v36 + 36) = v75 + 1;
  }
  v78 = v311;
  v311 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 1)
      WTF::JSONImpl::Value::operator delete(v78, v67, v68, v69, v70, v71, v72, v73);
    else
      --*(_DWORD *)v78;
  }
  v79 = v310;
  v310 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v80 = 0x800000002;
  *(_QWORD *)(v80 + 8) = "loaderId";
  *(_DWORD *)(v80 + 16) = 4;
  v310 = (WTF *)v80;
  v81 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v81 = 0x400000001;
  v87 = *a4;
  *((_QWORD *)v81 + 1) = *a4;
  if (v87)
    *v87 += 2;
  v311 = v81;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v37, (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v82, v83, v84, v85, v86, (uint64_t)v312);
  if (v313)
  {
    v95 = (uint64_t *)(v36 + 24);
    v96 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v96 == *(_DWORD *)(v36 + 32))
    {
      v295 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)&v310);
      v96 = *(unsigned int *)(v36 + 36);
      v296 = *(_QWORD *)(v36 + 24);
      v297 = *v295;
      if (*v295)
        *v297 += 2;
      *(_QWORD *)(v296 + 8 * v96) = v297;
    }
    else
    {
      v97 = *v95;
      v98 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v97 + 8 * v96) = v98;
    }
    *(_DWORD *)(v36 + 36) = v96 + 1;
  }
  v99 = v311;
  v311 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 1)
      WTF::JSONImpl::Value::operator delete(v99, v88, v89, v90, v91, v92, v93, v94);
    else
      --*(_DWORD *)v99;
  }
  v100 = v310;
  v310 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v88, v89, v90, v91, v92, v93, v94);
      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x900000002;
  *(_QWORD *)(v101 + 8) = "timestamp";
  *(_DWORD *)(v101 + 16) = 4;
  v310 = (WTF *)v101;
  v102 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v102 = 0x200000001;
  v102[1] = a7;
  v311 = (WTF *)v102;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v37, (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v103, v104, v105, v106, v107, (uint64_t)v312);
  if (v313)
  {
    v115 = (uint64_t *)(v36 + 24);
    v116 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v116 == *(_DWORD *)(v36 + 32))
    {
      v298 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v310);
      v116 = *(unsigned int *)(v36 + 36);
      v299 = *(_QWORD *)(v36 + 24);
      v300 = *v298;
      if (*v298)
        *v300 += 2;
      *(_QWORD *)(v299 + 8 * v116) = v300;
    }
    else
    {
      v117 = *v115;
      v118 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v117 + 8 * v116) = v118;
    }
    *(_DWORD *)(v36 + 36) = v116 + 1;
  }
  v119 = v311;
  v311 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 1)
      WTF::JSONImpl::Value::operator delete(v119, v108, v109, v110, v111, v112, v113, v114);
    else
      --*(_DWORD *)v119;
  }
  v120 = v310;
  v310 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v121 = 0x400000002;
  *(_QWORD *)(v121 + 8) = "type";
  *(_DWORD *)(v121 + 16) = 4;
  v310 = (WTF *)v121;
  v122 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * a5];
  v123 = v122[1];
  if (v123)
  {
    v124 = (_DWORD)v123 - 1;
    if (v123 == (char *)1)
    {
      v126 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v125 = *v122;
      v126 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v126 = 2;
      v126[1] = v124;
      *((_QWORD *)v126 + 1) = v125;
      v126[4] = 4;
    }
  }
  else
  {
    v126 = 0;
  }
  v127 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v127 = 0x400000001;
  *((_QWORD *)v127 + 1) = v126;
  if (v126)
    *v126 += 2;
  v311 = v127;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v37, (WTF::AtomStringImpl *)&v310, (const WTF::StringImpl *)&v311, v128, v129, v130, v131, v132, (uint64_t)v312);
  if (v313)
  {
    v140 = (uint64_t *)(v36 + 24);
    v141 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v141 == *(_DWORD *)(v36 + 32))
    {
      v301 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v140, v141 + 1, (unint64_t)&v310);
      v141 = *(unsigned int *)(v36 + 36);
      v302 = *(_QWORD *)(v36 + 24);
      v303 = *v301;
      if (*v301)
        *v303 += 2;
      *(_QWORD *)(v302 + 8 * v141) = v303;
    }
    else
    {
      v142 = *v140;
      v143 = v310;
      if (v310)
        *(_DWORD *)v310 += 2;
      *(_QWORD *)(v142 + 8 * v141) = v143;
    }
    *(_DWORD *)(v36 + 36) = v141 + 1;
  }
  v144 = v311;
  v311 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v144, v133, v134, v135, v136, v137, v138, v139);
      if (!v126)
        goto LABEL_86;
      goto LABEL_84;
    }
    --*(_DWORD *)v144;
  }
  if (!v126)
    goto LABEL_86;
LABEL_84:
  if (*v126 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v126, v133, v134, v135, v136, v137, v138, v139);
    WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
  }
  else
  {
    *v126 -= 2;
  }
LABEL_86:
  v145 = v310;
  v310 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v133, v134, v135, v136, v137, v138, v139);
      WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v146 = 0x800000002;
  *(_QWORD *)(v146 + 8) = "response";
  *(_DWORD *)(v146 + 16) = 4;
  v147 = *a6;
  *a6 = 0;
  v310 = v147;
  v311 = (WTF *)v146;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v37, (WTF::AtomStringImpl *)&v311, (const WTF::StringImpl *)&v310, v148, v149, v150, v151, v152, (uint64_t)v312);
  if (v313)
  {
    v160 = (uint64_t *)(v36 + 24);
    v161 = *(unsigned int *)(v36 + 36);
    if ((_DWORD)v161 == *(_DWORD *)(v36 + 32))
    {
      v304 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v160, v161 + 1, (unint64_t)&v311);
      v161 = *(unsigned int *)(v36 + 36);
      v305 = *(_QWORD *)(v36 + 24);
      v306 = *v304;
      if (*v304)
        *v306 += 2;
      *(_QWORD *)(v305 + 8 * v161) = v306;
    }
    else
    {
      v162 = *v160;
      v163 = v311;
      if (v311)
        *(_DWORD *)v311 += 2;
      *(_QWORD *)(v162 + 8 * v161) = v163;
    }
    *(_DWORD *)(v36 + 36) = v161 + 1;
  }
  v164 = v310;
  v310 = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 1)
      WTF::JSONImpl::Value::operator delete(v164, v153, v154, v155, v156, v157, v158, v159);
    else
      --*(_DWORD *)v164;
  }
  v165 = v311;
  v311 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::~StringImpl(v165, v153, v154, v155, v156, v157, v158, v159);
      WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
    }
    else
    {
      *(_DWORD *)v165 -= 2;
    }
  }
  v166 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v166 = 0x600000002;
  *(_QWORD *)(v166 + 8) = "params";
  *(_DWORD *)(v166 + 16) = 4;
  v310 = (WTF *)v36;
  v311 = (WTF *)v166;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v14 + 16), (WTF::AtomStringImpl *)&v311, (const WTF::StringImpl *)&v310, v167, v168, v169, v170, v171, (uint64_t)v312);
  if (v313)
  {
    v179 = (uint64_t *)(v14 + 24);
    v180 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v180 == *(_DWORD *)(v14 + 32))
    {
      v307 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v179, v180 + 1, (unint64_t)&v311);
      v180 = *(unsigned int *)(v14 + 36);
      v308 = *(_QWORD *)(v14 + 24);
      v309 = *v307;
      if (*v307)
        *v309 += 2;
      *(_QWORD *)(v308 + 8 * v180) = v309;
    }
    else
    {
      v181 = *v179;
      v182 = v311;
      if (v311)
        *(_DWORD *)v311 += 2;
      *(_QWORD *)(v181 + 8 * v180) = v182;
    }
    *(_DWORD *)(v14 + 36) = v180 + 1;
  }
  v183 = v310;
  v310 = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 1)
      WTF::JSONImpl::Value::operator delete(v183, v172, v173, v174, v175, v176, v177, v178);
    else
      --*(_DWORD *)v183;
  }
  v184 = v311;
  v311 = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
    {
      WTF::StringImpl::~StringImpl(v184, v172, v173, v174, v175, v176, v177, v178);
      WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
    }
    else
    {
      *(_DWORD *)v184 -= 2;
    }
  }
  v185 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v14, v173, v174, v175, v176, v177, v178, v312);
  v193 = *(unsigned int *)(v185 + 20);
  if ((_DWORD)v193)
  {
    v194 = *(uint64_t **)(v185 + 8);
    v195 = 8 * v193;
    do
    {
      v196 = *v194++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v196 + 24))(v196, v312);
      v195 -= 8;
    }
    while (v195);
  }
  v197 = v312[0];
  v312[0] = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
    {
      WTF::StringImpl::~StringImpl(v197, v186, v187, v188, v189, v190, v191, v192);
      WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
    }
    else
    {
      *(_DWORD *)v197 -= 2;
    }
  }
  if (*(_DWORD *)v14 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v14, v186, v187, v188, v189, v190, v191, v192);
  else
    --*(_DWORD *)v14;
}

void Inspector::NetworkFrontendDispatcher::dataReceived(Inspector::NetworkFrontendDispatcher *this, const WTF::String *a2, double a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD **v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD **v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD **v226;
  uint64_t v227;
  _DWORD *v228;
  WTF *v229;
  WTF *v230;
  WTF::StringImpl *v231[2];
  char v232;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v229 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x1400000002;
  *(_QWORD *)(v12 + 8) = "Network.dataReceived";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v230 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v14, v15, v16, v17, v18, (uint64_t)v231);
  if (v232)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v211 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v229);
      v27 = *(unsigned int *)(v10 + 36);
      v212 = *(_QWORD *)(v10 + 24);
      v213 = *v211;
      if (*v211)
        *v213 += 2;
      *(_QWORD *)(v212 + 8 * v27) = v213;
    }
    else
    {
      v28 = *v26;
      v29 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v230;
  v230 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v229;
  v229 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x900000002;
  *(_QWORD *)(v34 + 8) = "requestId";
  *(_DWORD *)(v34 + 16) = 4;
  v229 = (WTF *)v34;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x400000001;
  v41 = *(_DWORD **)a2;
  *((_QWORD *)v35 + 1) = *(_QWORD *)a2;
  if (v41)
    *v41 += 2;
  v230 = v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v36, v37, v38, v39, v40, (uint64_t)v231);
  if (v232)
  {
    v49 = (uint64_t *)(v32 + 24);
    v50 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v32 + 32))
    {
      v214 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v229);
      v50 = *(unsigned int *)(v32 + 36);
      v215 = *(_QWORD *)(v32 + 24);
      v216 = *v214;
      if (*v214)
        *v216 += 2;
      *(_QWORD *)(v215 + 8 * v50) = v216;
    }
    else
    {
      v51 = *v49;
      v52 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v32 + 36) = v50 + 1;
  }
  v53 = v230;
  v230 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
    else
      --*(_DWORD *)v53;
  }
  v54 = v229;
  v229 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x900000002;
  *(_QWORD *)(v55 + 8) = "timestamp";
  *(_DWORD *)(v55 + 16) = 4;
  v229 = (WTF *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x200000001;
  v56[1] = a3;
  v230 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v57, v58, v59, v60, v61, (uint64_t)v231);
  if (v232)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v217 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v229);
      v70 = *(unsigned int *)(v32 + 36);
      v218 = *(_QWORD *)(v32 + 24);
      v219 = *v217;
      if (*v217)
        *v219 += 2;
      *(_QWORD *)(v218 + 8 * v70) = v219;
    }
    else
    {
      v71 = *v69;
      v72 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v230;
  v230 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v229;
  v229 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0xA00000002;
  *(_QWORD *)(v75 + 8) = "dataLength";
  *(_DWORD *)(v75 + 16) = 4;
  v229 = (WTF *)v75;
  v76 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = 0x300000001;
  v76[1] = (double)a4;
  v230 = (WTF *)v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v77, v78, v79, v80, v81, (uint64_t)v231);
  if (v232)
  {
    v89 = (uint64_t *)(v32 + 24);
    v90 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v32 + 32))
    {
      v220 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v229);
      v90 = *(unsigned int *)(v32 + 36);
      v221 = *(_QWORD *)(v32 + 24);
      v222 = *v220;
      if (*v220)
        *v222 += 2;
      *(_QWORD *)(v221 + 8 * v90) = v222;
    }
    else
    {
      v91 = *v89;
      v92 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v91 + 8 * v90) = v92;
    }
    *(_DWORD *)(v32 + 36) = v90 + 1;
  }
  v93 = v230;
  v230 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v93;
  }
  v94 = v229;
  v229 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x1100000002;
  *(_QWORD *)(v95 + 8) = "encodedDataLength";
  *(_DWORD *)(v95 + 16) = 4;
  v229 = (WTF *)v95;
  v96 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v96 = 0x300000001;
  v96[1] = (double)a5;
  v230 = (WTF *)v96;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v97, v98, v99, v100, v101, (uint64_t)v231);
  if (v232)
  {
    v109 = (uint64_t *)(v32 + 24);
    v110 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v110 == *(_DWORD *)(v32 + 32))
    {
      v223 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v229);
      v110 = *(unsigned int *)(v32 + 36);
      v224 = *(_QWORD *)(v32 + 24);
      v225 = *v223;
      if (*v223)
        *v225 += 2;
      *(_QWORD *)(v224 + 8 * v110) = v225;
    }
    else
    {
      v111 = *v109;
      v112 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v111 + 8 * v110) = v112;
    }
    *(_DWORD *)(v32 + 36) = v110 + 1;
  }
  v113 = v230;
  v230 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 1)
      WTF::JSONImpl::Value::operator delete(v113, v102, v103, v104, v105, v106, v107, v108);
    else
      --*(_DWORD *)v113;
  }
  v114 = v229;
  v229 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v102, v103, v104, v105, v106, v107, v108);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0x600000002;
  *(_QWORD *)(v115 + 8) = "params";
  *(_DWORD *)(v115 + 16) = 4;
  v229 = (WTF *)v32;
  v230 = (WTF *)v115;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v116, v117, v118, v119, v120, (uint64_t)v231);
  if (v232)
  {
    v128 = (uint64_t *)(v10 + 24);
    v129 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v129 == *(_DWORD *)(v10 + 32))
    {
      v226 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v230);
      v129 = *(unsigned int *)(v10 + 36);
      v227 = *(_QWORD *)(v10 + 24);
      v228 = *v226;
      if (*v226)
        *v228 += 2;
      *(_QWORD *)(v227 + 8 * v129) = v228;
    }
    else
    {
      v130 = *v128;
      v131 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v130 + 8 * v129) = v131;
    }
    *(_DWORD *)(v10 + 36) = v129 + 1;
  }
  v132 = v229;
  v229 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 1)
      WTF::JSONImpl::Value::operator delete(v132, v121, v122, v123, v124, v125, v126, v127);
    else
      --*(_DWORD *)v132;
  }
  v133 = v230;
  v230 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v121, v122, v123, v124, v125, v126, v127);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v122, v123, v124, v125, v126, v127, v231);
  v142 = *(unsigned int *)(v134 + 20);
  if ((_DWORD)v142)
  {
    v143 = *(uint64_t **)(v134 + 8);
    v144 = 8 * v142;
    do
    {
      v145 = *v143++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v145 + 24))(v145, v231);
      v144 -= 8;
    }
    while (v144);
  }
  v146 = v231[0];
  v231[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v135, v136, v137, v138, v139, v140, v141);
  else
    --*(_DWORD *)v10;
}

void Inspector::NetworkFrontendDispatcher::loadingFinished(uint64_t *a1, _DWORD **a2, _DWORD **a3, WTF **a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::AtomStringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  WTF *v133;
  WTF *v134;
  uint64_t v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _DWORD **v212;
  uint64_t v213;
  _DWORD *v214;
  _DWORD **v215;
  uint64_t v216;
  _DWORD *v217;
  _DWORD **v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD **v221;
  uint64_t v222;
  _DWORD *v223;
  _DWORD **v224;
  uint64_t v225;
  _DWORD *v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  WTF *v230;
  WTF *v231;
  WTF::StringImpl *v232[2];
  char v233;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v230 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x1700000002;
  *(_QWORD *)(v12 + 8) = "Network.loadingFinished";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v231 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v231, v14, v15, v16, v17, v18, (uint64_t)v232);
  if (v233)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v212 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v230);
      v27 = *(unsigned int *)(v10 + 36);
      v213 = *(_QWORD *)(v10 + 24);
      v214 = *v212;
      if (*v212)
        *v214 += 2;
      *(_QWORD *)(v213 + 8 * v27) = v214;
    }
    else
    {
      v28 = *v26;
      v29 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v231;
  v231 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v230;
  v230 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x900000002;
  *(_QWORD *)(v34 + 8) = "requestId";
  *(_DWORD *)(v34 + 16) = 4;
  v230 = (WTF *)v34;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x400000001;
  v41 = *a2;
  *((_QWORD *)v35 + 1) = *a2;
  if (v41)
    *v41 += 2;
  v231 = v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v231, v36, v37, v38, v39, v40, (uint64_t)v232);
  if (v233)
  {
    v49 = (uint64_t *)(v32 + 24);
    v50 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v32 + 32))
    {
      v215 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v230);
      v50 = *(unsigned int *)(v32 + 36);
      v216 = *(_QWORD *)(v32 + 24);
      v217 = *v215;
      if (*v215)
        *v217 += 2;
      *(_QWORD *)(v216 + 8 * v50) = v217;
    }
    else
    {
      v51 = *v49;
      v52 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v32 + 36) = v50 + 1;
  }
  v53 = v231;
  v231 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
    else
      --*(_DWORD *)v53;
  }
  v54 = v230;
  v230 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x900000002;
  *(_QWORD *)(v55 + 8) = "timestamp";
  *(_DWORD *)(v55 + 16) = 4;
  v230 = (WTF *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x200000001;
  v56[1] = a5;
  v231 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v231, v57, v58, v59, v60, v61, (uint64_t)v232);
  if (v233)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v218 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v230);
      v70 = *(unsigned int *)(v32 + 36);
      v219 = *(_QWORD *)(v32 + 24);
      v220 = *v218;
      if (*v218)
        *v220 += 2;
      *(_QWORD *)(v219 + 8 * v70) = v220;
    }
    else
    {
      v71 = *v69;
      v72 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v231;
  v231 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v230;
  v230 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  if (*a3)
  {
    v75 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v75 = 0xC00000002;
    *(_QWORD *)(v75 + 8) = "sourceMapURL";
    *(_DWORD *)(v75 + 16) = 4;
    v230 = (WTF *)v75;
    v76 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v76 = 0x400000001;
    v82 = *a3;
    *((_QWORD *)v76 + 1) = *a3;
    if (v82)
      *v82 += 2;
    v231 = v76;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v231, v77, v78, v79, v80, v81, (uint64_t)v232);
    if (v233)
    {
      v90 = (uint64_t *)(v32 + 24);
      v91 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v91 == *(_DWORD *)(v32 + 32))
      {
        v224 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v230);
        v91 = *(unsigned int *)(v32 + 36);
        v225 = *(_QWORD *)(v32 + 24);
        v226 = *v224;
        if (*v224)
          *v226 += 2;
        *(_QWORD *)(v225 + 8 * v91) = v226;
      }
      else
      {
        v92 = *v90;
        v93 = v230;
        if (v230)
          *(_DWORD *)v230 += 2;
        *(_QWORD *)(v92 + 8 * v91) = v93;
      }
      *(_DWORD *)(v32 + 36) = v91 + 1;
    }
    v94 = v231;
    v231 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 1)
        WTF::JSONImpl::Value::operator delete(v94, v83, v84, v85, v86, v87, v88, v89);
      else
        --*(_DWORD *)v94;
    }
    v95 = v230;
    v230 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, v83, v84, v85, v86, v87, v88, v89);
        WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
  }
  if (*a4)
  {
    v96 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v96 = 0x700000002;
    *(_QWORD *)(v96 + 8) = "metrics";
    *(_DWORD *)(v96 + 16) = 4;
    v97 = *a4;
    *a4 = 0;
    v230 = v97;
    v231 = (WTF *)v96;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v230, v98, v99, v100, v101, v102, (uint64_t)v232);
    if (v233)
    {
      v110 = (uint64_t *)(v32 + 24);
      v111 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v111 == *(_DWORD *)(v32 + 32))
      {
        v227 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v110, v111 + 1, (unint64_t)&v231);
        v111 = *(unsigned int *)(v32 + 36);
        v228 = *(_QWORD *)(v32 + 24);
        v229 = *v227;
        if (*v227)
          *v229 += 2;
        *(_QWORD *)(v228 + 8 * v111) = v229;
      }
      else
      {
        v112 = *v110;
        v113 = v231;
        if (v231)
          *(_DWORD *)v231 += 2;
        *(_QWORD *)(v112 + 8 * v111) = v113;
      }
      *(_DWORD *)(v32 + 36) = v111 + 1;
    }
    v114 = v230;
    v230 = 0;
    if (v114)
    {
      if (*(_DWORD *)v114 == 1)
        WTF::JSONImpl::Value::operator delete(v114, v103, v104, v105, v106, v107, v108, v109);
      else
        --*(_DWORD *)v114;
    }
    v115 = v231;
    v231 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
      {
        WTF::StringImpl::~StringImpl(v115, v103, v104, v105, v106, v107, v108, v109);
        WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
      }
      else
      {
        *(_DWORD *)v115 -= 2;
      }
    }
  }
  v116 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v116 = 0x600000002;
  *(_QWORD *)(v116 + 8) = "params";
  *(_DWORD *)(v116 + 16) = 4;
  v230 = (WTF *)v32;
  v231 = (WTF *)v116;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v230, v117, v118, v119, v120, v121, (uint64_t)v232);
  if (v233)
  {
    v129 = (uint64_t *)(v10 + 24);
    v130 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v130 == *(_DWORD *)(v10 + 32))
    {
      v221 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v129, v130 + 1, (unint64_t)&v231);
      v130 = *(unsigned int *)(v10 + 36);
      v222 = *(_QWORD *)(v10 + 24);
      v223 = *v221;
      if (*v221)
        *v223 += 2;
      *(_QWORD *)(v222 + 8 * v130) = v223;
    }
    else
    {
      v131 = *v129;
      v132 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v131 + 8 * v130) = v132;
    }
    *(_DWORD *)(v10 + 36) = v130 + 1;
  }
  v133 = v230;
  v230 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 1)
      WTF::JSONImpl::Value::operator delete(v133, v122, v123, v124, v125, v126, v127, v128);
    else
      --*(_DWORD *)v133;
  }
  v134 = v231;
  v231 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v123, v124, v125, v126, v127, v128, v232);
  v143 = *(unsigned int *)(v135 + 20);
  if ((_DWORD)v143)
  {
    v144 = *(uint64_t **)(v135 + 8);
    v145 = 8 * v143;
    do
    {
      v146 = *v144++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v146 + 24))(v146, v232);
      v145 -= 8;
    }
    while (v145);
  }
  v147 = v232[0];
  v232[0] = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v136, v137, v138, v139, v140, v141, v142);
  else
    --*(_DWORD *)v10;
}

void Inspector::NetworkFrontendDispatcher::loadingFailed(uint64_t *a1, _DWORD **a2, _DWORD **a3, char *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  char v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  WTF *v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  WTF::AtomStringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _DWORD **v213;
  uint64_t v214;
  _DWORD *v215;
  _DWORD **v216;
  uint64_t v217;
  _DWORD *v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD **v222;
  uint64_t v223;
  _DWORD *v224;
  _DWORD **v225;
  uint64_t v226;
  _DWORD *v227;
  _DWORD **v228;
  uint64_t v229;
  _DWORD *v230;
  WTF *v231;
  WTF *v232;
  WTF::StringImpl *v233[2];
  char v234;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v231 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x1500000002;
  *(_QWORD *)(v12 + 8) = "Network.loadingFailed";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v232 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v14, v15, v16, v17, v18, (uint64_t)v233);
  if (v234)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v213 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v231);
      v27 = *(unsigned int *)(v10 + 36);
      v214 = *(_QWORD *)(v10 + 24);
      v215 = *v213;
      if (*v213)
        *v215 += 2;
      *(_QWORD *)(v214 + 8 * v27) = v215;
    }
    else
    {
      v28 = *v26;
      v29 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v232;
  v232 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v231;
  v231 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x900000002;
  *(_QWORD *)(v34 + 8) = "requestId";
  *(_DWORD *)(v34 + 16) = 4;
  v231 = (WTF *)v34;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x400000001;
  v41 = *a2;
  *((_QWORD *)v35 + 1) = *a2;
  if (v41)
    *v41 += 2;
  v232 = v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v36, v37, v38, v39, v40, (uint64_t)v233);
  if (v234)
  {
    v49 = (uint64_t *)(v32 + 24);
    v50 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v32 + 32))
    {
      v216 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v231);
      v50 = *(unsigned int *)(v32 + 36);
      v217 = *(_QWORD *)(v32 + 24);
      v218 = *v216;
      if (*v216)
        *v218 += 2;
      *(_QWORD *)(v217 + 8 * v50) = v218;
    }
    else
    {
      v51 = *v49;
      v52 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v32 + 36) = v50 + 1;
  }
  v53 = v232;
  v232 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
    else
      --*(_DWORD *)v53;
  }
  v54 = v231;
  v231 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x900000002;
  *(_QWORD *)(v55 + 8) = "timestamp";
  *(_DWORD *)(v55 + 16) = 4;
  v231 = (WTF *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x200000001;
  v56[1] = a5;
  v232 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v57, v58, v59, v60, v61, (uint64_t)v233);
  if (v234)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v219 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v231);
      v70 = *(unsigned int *)(v32 + 36);
      v220 = *(_QWORD *)(v32 + 24);
      v221 = *v219;
      if (*v219)
        *v221 += 2;
      *(_QWORD *)(v220 + 8 * v70) = v221;
    }
    else
    {
      v71 = *v69;
      v72 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v232;
  v232 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v231;
  v231 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0x900000002;
  *(_QWORD *)(v75 + 8) = "errorText";
  *(_DWORD *)(v75 + 16) = 4;
  v231 = (WTF *)v75;
  v76 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = 0x400000001;
  v82 = *a3;
  *((_QWORD *)v76 + 1) = *a3;
  if (v82)
    *v82 += 2;
  v232 = v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v77, v78, v79, v80, v81, (uint64_t)v233);
  if (v234)
  {
    v90 = (uint64_t *)(v32 + 24);
    v91 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v91 == *(_DWORD *)(v32 + 32))
    {
      v222 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v231);
      v91 = *(unsigned int *)(v32 + 36);
      v223 = *(_QWORD *)(v32 + 24);
      v224 = *v222;
      if (*v222)
        *v224 += 2;
      *(_QWORD *)(v223 + 8 * v91) = v224;
    }
    else
    {
      v92 = *v90;
      v93 = v231;
      if (v231)
        *(_DWORD *)v231 += 2;
      *(_QWORD *)(v92 + 8 * v91) = v93;
    }
    *(_DWORD *)(v32 + 36) = v91 + 1;
  }
  v94 = v232;
  v232 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 1)
      WTF::JSONImpl::Value::operator delete(v94, v83, v84, v85, v86, v87, v88, v89);
    else
      --*(_DWORD *)v94;
  }
  v95 = v231;
  v231 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v83, v84, v85, v86, v87, v88, v89);
      WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  if (a4[1])
  {
    v96 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v96 = 0x800000002;
    *(_QWORD *)(v96 + 8) = "canceled";
    *(_DWORD *)(v96 + 16) = 4;
    v231 = (WTF *)v96;
    if (!a4[1])
    {
      __break(1u);
      return;
    }
    v97 = *a4;
    v98 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v98 = 0x100000001;
    *((_BYTE *)v98 + 8) = v97;
    v232 = v98;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v231, (const WTF::StringImpl *)&v232, v99, v100, v101, v102, v103, (uint64_t)v233);
    if (v234)
    {
      v111 = (uint64_t *)(v32 + 24);
      v112 = *(unsigned int *)(v32 + 36);
      if ((_DWORD)v112 == *(_DWORD *)(v32 + 32))
      {
        v228 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v111, v112 + 1, (unint64_t)&v231);
        v112 = *(unsigned int *)(v32 + 36);
        v229 = *(_QWORD *)(v32 + 24);
        v230 = *v228;
        if (*v228)
          *v230 += 2;
        *(_QWORD *)(v229 + 8 * v112) = v230;
      }
      else
      {
        v113 = *v111;
        v114 = v231;
        if (v231)
          *(_DWORD *)v231 += 2;
        *(_QWORD *)(v113 + 8 * v112) = v114;
      }
      *(_DWORD *)(v32 + 36) = v112 + 1;
    }
    v115 = v232;
    v232 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 1)
        WTF::JSONImpl::Value::operator delete(v115, v104, v105, v106, v107, v108, v109, v110);
      else
        --*(_DWORD *)v115;
    }
    v116 = v231;
    v231 = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2)
      {
        WTF::StringImpl::~StringImpl(v116, v104, v105, v106, v107, v108, v109, v110);
        WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
      }
      else
      {
        *(_DWORD *)v116 -= 2;
      }
    }
  }
  v117 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v117 = 0x600000002;
  *(_QWORD *)(v117 + 8) = "params";
  *(_DWORD *)(v117 + 16) = 4;
  v231 = (WTF *)v32;
  v232 = (WTF *)v117;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v232, (const WTF::StringImpl *)&v231, v118, v119, v120, v121, v122, (uint64_t)v233);
  if (v234)
  {
    v130 = (uint64_t *)(v10 + 24);
    v131 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(v10 + 32))
    {
      v225 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v232);
      v131 = *(unsigned int *)(v10 + 36);
      v226 = *(_QWORD *)(v10 + 24);
      v227 = *v225;
      if (*v225)
        *v227 += 2;
      *(_QWORD *)(v226 + 8 * v131) = v227;
    }
    else
    {
      v132 = *v130;
      v133 = v232;
      if (v232)
        *(_DWORD *)v232 += 2;
      *(_QWORD *)(v132 + 8 * v131) = v133;
    }
    *(_DWORD *)(v10 + 36) = v131 + 1;
  }
  v134 = v231;
  v231 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 1)
      WTF::JSONImpl::Value::operator delete(v134, v123, v124, v125, v126, v127, v128, v129);
    else
      --*(_DWORD *)v134;
  }
  v135 = v232;
  v232 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v124, v125, v126, v127, v128, v129, v233);
  v144 = *(unsigned int *)(v136 + 20);
  if ((_DWORD)v144)
  {
    v145 = *(uint64_t **)(v136 + 8);
    v146 = 8 * v144;
    do
    {
      v147 = *v145++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v147 + 24))(v147, v233);
      v146 -= 8;
    }
    while (v146);
  }
  v148 = v233[0];
  v233[0] = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v137, v138, v139, v140, v141, v142, v143);
      WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v137, v138, v139, v140, v141, v142, v143);
  else
    --*(_DWORD *)v10;
}

void Inspector::NetworkFrontendDispatcher::requestServedFromMemoryCache(uint64_t *a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, WTF **a6, WTF **a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  WTF *v141;
  WTF *v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  uint64_t v163;
  WTF *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::AtomStringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  WTF *v181;
  WTF *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  WTF *v199;
  WTF *v200;
  WTF *v201;
  uint64_t v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _DWORD **v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD **v306;
  uint64_t v307;
  _DWORD *v308;
  _DWORD **v309;
  uint64_t v310;
  _DWORD *v311;
  _DWORD **v312;
  uint64_t v313;
  _DWORD *v314;
  _DWORD **v315;
  uint64_t v316;
  _DWORD *v317;
  _DWORD **v318;
  uint64_t v319;
  _DWORD *v320;
  _DWORD **v321;
  uint64_t v322;
  _DWORD *v323;
  _DWORD **v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD **v327;
  uint64_t v328;
  _DWORD *v329;
  WTF *v331;
  WTF *v332;
  WTF::StringImpl *v333[2];
  char v334;

  v15 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v15 = 0x500000001;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x600000002;
  *(_QWORD *)(v16 + 8) = "method";
  *(_DWORD *)(v16 + 16) = 4;
  v331 = (WTF *)v16;
  v17 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v17 = 0x2400000002;
  *(_QWORD *)(v17 + 8) = "Network.requestServedFromMemoryCache";
  *(_DWORD *)(v17 + 16) = 4;
  v18 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = 0x400000001;
  *((_QWORD *)v18 + 1) = v17;
  *(_DWORD *)v17 += 2;
  v332 = v18;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v15 + 16), (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v19, v20, v21, v22, v23, (uint64_t)v333);
  if (v334)
  {
    v31 = (uint64_t *)(v15 + 24);
    v32 = *(unsigned int *)(v15 + 36);
    if ((_DWORD)v32 == *(_DWORD *)(v15 + 32))
    {
      v303 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v331);
      v32 = *(unsigned int *)(v15 + 36);
      v304 = *(_QWORD *)(v15 + 24);
      v305 = *v303;
      if (*v303)
        *v305 += 2;
      *(_QWORD *)(v304 + 8 * v32) = v305;
    }
    else
    {
      v33 = *v31;
      v34 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v33 + 8 * v32) = v34;
    }
    *(_DWORD *)(v15 + 36) = v32 + 1;
  }
  v35 = v332;
  v332 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::JSONImpl::Value::operator delete(v35, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v35;
  }
  if (*(_DWORD *)v17 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v17, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
  }
  else
  {
    *(_DWORD *)v17 -= 2;
  }
  v36 = v331;
  v331 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v37 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v37 = 0x500000001;
  *(_QWORD *)(v37 + 16) = 0;
  v38 = (uint64_t *)(v37 + 16);
  *(_QWORD *)(v37 + 24) = 0;
  *(_QWORD *)(v37 + 32) = 0;
  v39 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v39 = 0x900000002;
  *(_QWORD *)(v39 + 8) = "requestId";
  *(_DWORD *)(v39 + 16) = 4;
  v331 = (WTF *)v39;
  v40 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v40 = 0x400000001;
  v46 = *a2;
  *((_QWORD *)v40 + 1) = *a2;
  if (v46)
    *v46 += 2;
  v332 = v40;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v38, (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v41, v42, v43, v44, v45, (uint64_t)v333);
  if (v334)
  {
    v54 = (uint64_t *)(v37 + 24);
    v55 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v37 + 32))
    {
      v306 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v331);
      v55 = *(unsigned int *)(v37 + 36);
      v307 = *(_QWORD *)(v37 + 24);
      v308 = *v306;
      if (*v306)
        *v308 += 2;
      *(_QWORD *)(v307 + 8 * v55) = v308;
    }
    else
    {
      v56 = *v54;
      v57 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v56 + 8 * v55) = v57;
    }
    *(_DWORD *)(v37 + 36) = v55 + 1;
  }
  v58 = v332;
  v332 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
      WTF::JSONImpl::Value::operator delete(v58, v47, v48, v49, v50, v51, v52, v53);
    else
      --*(_DWORD *)v58;
  }
  v59 = v331;
  v331 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v60 = 0x700000002;
  *(_QWORD *)(v60 + 8) = "frameId";
  *(_DWORD *)(v60 + 16) = 4;
  v331 = (WTF *)v60;
  v61 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v61 = 0x400000001;
  v67 = *a3;
  *((_QWORD *)v61 + 1) = *a3;
  if (v67)
    *v67 += 2;
  v332 = v61;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v38, (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v62, v63, v64, v65, v66, (uint64_t)v333);
  if (v334)
  {
    v75 = (uint64_t *)(v37 + 24);
    v76 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v76 == *(_DWORD *)(v37 + 32))
    {
      v309 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)&v331);
      v76 = *(unsigned int *)(v37 + 36);
      v310 = *(_QWORD *)(v37 + 24);
      v311 = *v309;
      if (*v309)
        *v311 += 2;
      *(_QWORD *)(v310 + 8 * v76) = v311;
    }
    else
    {
      v77 = *v75;
      v78 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v77 + 8 * v76) = v78;
    }
    *(_DWORD *)(v37 + 36) = v76 + 1;
  }
  v79 = v332;
  v332 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 1)
      WTF::JSONImpl::Value::operator delete(v79, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v79;
  }
  v80 = v331;
  v331 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v81 = 0x800000002;
  *(_QWORD *)(v81 + 8) = "loaderId";
  *(_DWORD *)(v81 + 16) = 4;
  v331 = (WTF *)v81;
  v82 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v82 = 0x400000001;
  v88 = *a4;
  *((_QWORD *)v82 + 1) = *a4;
  if (v88)
    *v88 += 2;
  v332 = v82;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v38, (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v83, v84, v85, v86, v87, (uint64_t)v333);
  if (v334)
  {
    v96 = (uint64_t *)(v37 + 24);
    v97 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v97 == *(_DWORD *)(v37 + 32))
    {
      v312 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v331);
      v97 = *(unsigned int *)(v37 + 36);
      v313 = *(_QWORD *)(v37 + 24);
      v314 = *v312;
      if (*v312)
        *v314 += 2;
      *(_QWORD *)(v313 + 8 * v97) = v314;
    }
    else
    {
      v98 = *v96;
      v99 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v98 + 8 * v97) = v99;
    }
    *(_DWORD *)(v37 + 36) = v97 + 1;
  }
  v100 = v332;
  v332 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 1)
      WTF::JSONImpl::Value::operator delete(v100, v89, v90, v91, v92, v93, v94, v95);
    else
      --*(_DWORD *)v100;
  }
  v101 = v331;
  v331 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0xB00000002;
  *(_QWORD *)(v102 + 8) = "documentURL";
  *(_DWORD *)(v102 + 16) = 4;
  v331 = (WTF *)v102;
  v103 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v103 = 0x400000001;
  v109 = *a5;
  *((_QWORD *)v103 + 1) = *a5;
  if (v109)
    *v109 += 2;
  v332 = v103;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v38, (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v104, v105, v106, v107, v108, (uint64_t)v333);
  if (v334)
  {
    v117 = (uint64_t *)(v37 + 24);
    v118 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v118 == *(_DWORD *)(v37 + 32))
    {
      v315 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v331);
      v118 = *(unsigned int *)(v37 + 36);
      v316 = *(_QWORD *)(v37 + 24);
      v317 = *v315;
      if (*v315)
        *v317 += 2;
      *(_QWORD *)(v316 + 8 * v118) = v317;
    }
    else
    {
      v119 = *v117;
      v120 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v119 + 8 * v118) = v120;
    }
    *(_DWORD *)(v37 + 36) = v118 + 1;
  }
  v121 = v332;
  v332 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
      WTF::JSONImpl::Value::operator delete(v121, v110, v111, v112, v113, v114, v115, v116);
    else
      --*(_DWORD *)v121;
  }
  v122 = v331;
  v331 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v110, v111, v112, v113, v114, v115, v116);
      WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v123 = 0x900000002;
  *(_QWORD *)(v123 + 8) = "timestamp";
  *(_DWORD *)(v123 + 16) = 4;
  v331 = (WTF *)v123;
  v124 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v124 = 0x200000001;
  v124[1] = a8;
  v332 = (WTF *)v124;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v38, (WTF::AtomStringImpl *)&v331, (const WTF::StringImpl *)&v332, v125, v126, v127, v128, v129, (uint64_t)v333);
  if (v334)
  {
    v137 = (uint64_t *)(v37 + 24);
    v138 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v138 == *(_DWORD *)(v37 + 32))
    {
      v318 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v331);
      v138 = *(unsigned int *)(v37 + 36);
      v319 = *(_QWORD *)(v37 + 24);
      v320 = *v318;
      if (*v318)
        *v320 += 2;
      *(_QWORD *)(v319 + 8 * v138) = v320;
    }
    else
    {
      v139 = *v137;
      v140 = v331;
      if (v331)
        *(_DWORD *)v331 += 2;
      *(_QWORD *)(v139 + 8 * v138) = v140;
    }
    *(_DWORD *)(v37 + 36) = v138 + 1;
  }
  v141 = v332;
  v332 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 1)
      WTF::JSONImpl::Value::operator delete(v141, v130, v131, v132, v133, v134, v135, v136);
    else
      --*(_DWORD *)v141;
  }
  v142 = v331;
  v331 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v263, v264, v265, v266, v267, v268, v269, v270);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v143 = 0x900000002;
  *(_QWORD *)(v143 + 8) = "initiator";
  *(_DWORD *)(v143 + 16) = 4;
  v144 = *a6;
  *a6 = 0;
  v331 = v144;
  v332 = (WTF *)v143;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v38, (WTF::AtomStringImpl *)&v332, (const WTF::StringImpl *)&v331, v145, v146, v147, v148, v149, (uint64_t)v333);
  if (v334)
  {
    v157 = (uint64_t *)(v37 + 24);
    v158 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v158 == *(_DWORD *)(v37 + 32))
    {
      v321 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)&v332);
      v158 = *(unsigned int *)(v37 + 36);
      v322 = *(_QWORD *)(v37 + 24);
      v323 = *v321;
      if (*v321)
        *v323 += 2;
      *(_QWORD *)(v322 + 8 * v158) = v323;
    }
    else
    {
      v159 = *v157;
      v160 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v159 + 8 * v158) = v160;
    }
    *(_DWORD *)(v37 + 36) = v158 + 1;
  }
  v161 = v331;
  v331 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 1)
      WTF::JSONImpl::Value::operator delete(v161, v150, v151, v152, v153, v154, v155, v156);
    else
      --*(_DWORD *)v161;
  }
  v162 = v332;
  v332 = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
    {
      WTF::StringImpl::~StringImpl(v162, v150, v151, v152, v153, v154, v155, v156);
      WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
    }
    else
    {
      *(_DWORD *)v162 -= 2;
    }
  }
  v163 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v163 = 0x800000002;
  *(_QWORD *)(v163 + 8) = "resource";
  *(_DWORD *)(v163 + 16) = 4;
  v164 = *a7;
  *a7 = 0;
  v331 = v164;
  v332 = (WTF *)v163;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v38, (WTF::AtomStringImpl *)&v332, (const WTF::StringImpl *)&v331, v165, v166, v167, v168, v169, (uint64_t)v333);
  if (v334)
  {
    v177 = (uint64_t *)(v37 + 24);
    v178 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v178 == *(_DWORD *)(v37 + 32))
    {
      v324 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, v178 + 1, (unint64_t)&v332);
      v178 = *(unsigned int *)(v37 + 36);
      v325 = *(_QWORD *)(v37 + 24);
      v326 = *v324;
      if (*v324)
        *v326 += 2;
      *(_QWORD *)(v325 + 8 * v178) = v326;
    }
    else
    {
      v179 = *v177;
      v180 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v179 + 8 * v178) = v180;
    }
    *(_DWORD *)(v37 + 36) = v178 + 1;
  }
  v181 = v331;
  v331 = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 1)
      WTF::JSONImpl::Value::operator delete(v181, v170, v171, v172, v173, v174, v175, v176);
    else
      --*(_DWORD *)v181;
  }
  v182 = v332;
  v332 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, v170, v171, v172, v173, v174, v175, v176);
      WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v183 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v183 = 0x600000002;
  *(_QWORD *)(v183 + 8) = "params";
  *(_DWORD *)(v183 + 16) = 4;
  v331 = (WTF *)v37;
  v332 = (WTF *)v183;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v15 + 16), (WTF::AtomStringImpl *)&v332, (const WTF::StringImpl *)&v331, v184, v185, v186, v187, v188, (uint64_t)v333);
  if (v334)
  {
    v196 = (uint64_t *)(v15 + 24);
    v197 = *(unsigned int *)(v15 + 36);
    if ((_DWORD)v197 == *(_DWORD *)(v15 + 32))
    {
      v327 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v196, v197 + 1, (unint64_t)&v332);
      v197 = *(unsigned int *)(v15 + 36);
      v328 = *(_QWORD *)(v15 + 24);
      v329 = *v327;
      if (*v327)
        *v329 += 2;
      *(_QWORD *)(v328 + 8 * v197) = v329;
    }
    else
    {
      v198 = *v196;
      v199 = v332;
      if (v332)
        *(_DWORD *)v332 += 2;
      *(_QWORD *)(v198 + 8 * v197) = v199;
    }
    *(_DWORD *)(v15 + 36) = v197 + 1;
  }
  v200 = v331;
  v331 = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 1)
      WTF::JSONImpl::Value::operator delete(v200, v189, v190, v191, v192, v193, v194, v195);
    else
      --*(_DWORD *)v200;
  }
  v201 = v332;
  v332 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, v189, v190, v191, v192, v193, v194, v195);
      WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  v202 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v15, v190, v191, v192, v193, v194, v195, v333);
  v210 = *(unsigned int *)(v202 + 20);
  if ((_DWORD)v210)
  {
    v211 = *(uint64_t **)(v202 + 8);
    v212 = 8 * v210;
    do
    {
      v213 = *v211++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v213 + 24))(v213, v333);
      v212 -= 8;
    }
    while (v212);
  }
  v214 = v333[0];
  v333[0] = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
    {
      WTF::StringImpl::~StringImpl(v214, v203, v204, v205, v206, v207, v208, v209);
      WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
    }
    else
    {
      *(_DWORD *)v214 -= 2;
    }
  }
  if (*(_DWORD *)v15 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v15, v203, v204, v205, v206, v207, v208, v209);
  else
    --*(_DWORD *)v15;
}

void Inspector::NetworkFrontendDispatcher::requestIntercepted(uint64_t *a1, _DWORD **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1A00000002;
  *(_QWORD *)(v8 + 8) = "Network.requestIntercepted";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x900000002;
  *(_QWORD *)(v30 + 8) = "requestId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x700000002;
  *(_QWORD *)(v51 + 8) = "request";
  *(_DWORD *)(v51 + 16) = 4;
  v52 = *a3;
  *a3 = 0;
  v163 = v52;
  v164 = (WTF *)v51;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v164);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v163;
  v163 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v164;
  v164 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::NetworkFrontendDispatcher::responseIntercepted(uint64_t *a1, _DWORD **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1B00000002;
  *(_QWORD *)(v8 + 8) = "Network.responseIntercepted";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x900000002;
  *(_QWORD *)(v30 + 8) = "requestId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x800000002;
  *(_QWORD *)(v51 + 8) = "response";
  *(_DWORD *)(v51 + 16) = 4;
  v52 = *a3;
  *a3 = 0;
  v163 = v52;
  v164 = (WTF *)v51;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v164);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v163;
  v163 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v164;
  v164 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::NetworkFrontendDispatcher::webSocketWillSendHandshakeRequest(uint64_t *a1, _DWORD **a2, WTF **a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  WTF *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD **v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD **v217;
  uint64_t v218;
  _DWORD *v219;
  _DWORD **v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD **v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD **v226;
  uint64_t v227;
  _DWORD *v228;
  WTF *v229;
  WTF *v230;
  WTF::StringImpl *v231[2];
  char v232;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = 0x500000001;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "method";
  *(_DWORD *)(v11 + 16) = 4;
  v229 = (WTF *)v11;
  v12 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0x2900000002;
  *(_QWORD *)(v12 + 8) = "Network.webSocketWillSendHandshakeRequest";
  *(_DWORD *)(v12 + 16) = 4;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = 0x400000001;
  *((_QWORD *)v13 + 1) = v12;
  *(_DWORD *)v12 += 2;
  v230 = v13;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v14, v15, v16, v17, v18, (uint64_t)v231);
  if (v232)
  {
    v26 = (uint64_t *)(v10 + 24);
    v27 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v27 == *(_DWORD *)(v10 + 32))
    {
      v211 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v229);
      v27 = *(unsigned int *)(v10 + 36);
      v212 = *(_QWORD *)(v10 + 24);
      v213 = *v211;
      if (*v211)
        *v213 += 2;
      *(_QWORD *)(v212 + 8 * v27) = v213;
    }
    else
    {
      v28 = *v26;
      v29 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v28 + 8 * v27) = v29;
    }
    *(_DWORD *)(v10 + 36) = v27 + 1;
  }
  v30 = v230;
  v230 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete(v30, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v30;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  v31 = v229;
  v229 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v32 = 0x500000001;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (uint64_t *)(v32 + 16);
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0x900000002;
  *(_QWORD *)(v34 + 8) = "requestId";
  *(_DWORD *)(v34 + 16) = 4;
  v229 = (WTF *)v34;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x400000001;
  v41 = *a2;
  *((_QWORD *)v35 + 1) = *a2;
  if (v41)
    *v41 += 2;
  v230 = v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v36, v37, v38, v39, v40, (uint64_t)v231);
  if (v232)
  {
    v49 = (uint64_t *)(v32 + 24);
    v50 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v32 + 32))
    {
      v214 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v229);
      v50 = *(unsigned int *)(v32 + 36);
      v215 = *(_QWORD *)(v32 + 24);
      v216 = *v214;
      if (*v214)
        *v216 += 2;
      *(_QWORD *)(v215 + 8 * v50) = v216;
    }
    else
    {
      v51 = *v49;
      v52 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v32 + 36) = v50 + 1;
  }
  v53 = v230;
  v230 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
    else
      --*(_DWORD *)v53;
  }
  v54 = v229;
  v229 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x900000002;
  *(_QWORD *)(v55 + 8) = "timestamp";
  *(_DWORD *)(v55 + 16) = 4;
  v229 = (WTF *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x200000001;
  v56[1] = a4;
  v230 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v57, v58, v59, v60, v61, (uint64_t)v231);
  if (v232)
  {
    v69 = (uint64_t *)(v32 + 24);
    v70 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v32 + 32))
    {
      v217 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v229);
      v70 = *(unsigned int *)(v32 + 36);
      v218 = *(_QWORD *)(v32 + 24);
      v219 = *v217;
      if (*v217)
        *v219 += 2;
      *(_QWORD *)(v218 + 8 * v70) = v219;
    }
    else
    {
      v71 = *v69;
      v72 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v32 + 36) = v70 + 1;
  }
  v73 = v230;
  v230 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v229;
  v229 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0x800000002;
  *(_QWORD *)(v75 + 8) = "walltime";
  *(_DWORD *)(v75 + 16) = 4;
  v229 = (WTF *)v75;
  v76 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v76 = 0x200000001;
  v76[1] = a5;
  v230 = (WTF *)v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v33, (WTF::AtomStringImpl *)&v229, (const WTF::StringImpl *)&v230, v77, v78, v79, v80, v81, (uint64_t)v231);
  if (v232)
  {
    v89 = (uint64_t *)(v32 + 24);
    v90 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v32 + 32))
    {
      v220 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v229);
      v90 = *(unsigned int *)(v32 + 36);
      v221 = *(_QWORD *)(v32 + 24);
      v222 = *v220;
      if (*v220)
        *v222 += 2;
      *(_QWORD *)(v221 + 8 * v90) = v222;
    }
    else
    {
      v91 = *v89;
      v92 = v229;
      if (v229)
        *(_DWORD *)v229 += 2;
      *(_QWORD *)(v91 + 8 * v90) = v92;
    }
    *(_DWORD *)(v32 + 36) = v90 + 1;
  }
  v93 = v230;
  v230 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v93;
  }
  v94 = v229;
  v229 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x700000002;
  *(_QWORD *)(v95 + 8) = "request";
  *(_DWORD *)(v95 + 16) = 4;
  v96 = *a3;
  *a3 = 0;
  v229 = v96;
  v230 = (WTF *)v95;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v33, (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v97, v98, v99, v100, v101, (uint64_t)v231);
  if (v232)
  {
    v109 = (uint64_t *)(v32 + 24);
    v110 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v110 == *(_DWORD *)(v32 + 32))
    {
      v223 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v109, v110 + 1, (unint64_t)&v230);
      v110 = *(unsigned int *)(v32 + 36);
      v224 = *(_QWORD *)(v32 + 24);
      v225 = *v223;
      if (*v223)
        *v225 += 2;
      *(_QWORD *)(v224 + 8 * v110) = v225;
    }
    else
    {
      v111 = *v109;
      v112 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v111 + 8 * v110) = v112;
    }
    *(_DWORD *)(v32 + 36) = v110 + 1;
  }
  v113 = v229;
  v229 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 1)
      WTF::JSONImpl::Value::operator delete(v113, v102, v103, v104, v105, v106, v107, v108);
    else
      --*(_DWORD *)v113;
  }
  v114 = v230;
  v230 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v102, v103, v104, v105, v106, v107, v108);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0x600000002;
  *(_QWORD *)(v115 + 8) = "params";
  *(_DWORD *)(v115 + 16) = 4;
  v229 = (WTF *)v32;
  v230 = (WTF *)v115;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v10 + 16), (WTF::AtomStringImpl *)&v230, (const WTF::StringImpl *)&v229, v116, v117, v118, v119, v120, (uint64_t)v231);
  if (v232)
  {
    v128 = (uint64_t *)(v10 + 24);
    v129 = *(unsigned int *)(v10 + 36);
    if ((_DWORD)v129 == *(_DWORD *)(v10 + 32))
    {
      v226 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v230);
      v129 = *(unsigned int *)(v10 + 36);
      v227 = *(_QWORD *)(v10 + 24);
      v228 = *v226;
      if (*v226)
        *v228 += 2;
      *(_QWORD *)(v227 + 8 * v129) = v228;
    }
    else
    {
      v130 = *v128;
      v131 = v230;
      if (v230)
        *(_DWORD *)v230 += 2;
      *(_QWORD *)(v130 + 8 * v129) = v131;
    }
    *(_DWORD *)(v10 + 36) = v129 + 1;
  }
  v132 = v229;
  v229 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 1)
      WTF::JSONImpl::Value::operator delete(v132, v121, v122, v123, v124, v125, v126, v127);
    else
      --*(_DWORD *)v132;
  }
  v133 = v230;
  v230 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v121, v122, v123, v124, v125, v126, v127);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v10, v122, v123, v124, v125, v126, v127, v231);
  v142 = *(unsigned int *)(v134 + 20);
  if ((_DWORD)v142)
  {
    v143 = *(uint64_t **)(v134 + 8);
    v144 = 8 * v142;
    do
    {
      v145 = *v143++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v145 + 24))(v145, v231);
      v144 -= 8;
    }
    while (v144);
  }
  v146 = v231[0];
  v231[0] = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  if (*(_DWORD *)v10 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v10, v135, v136, v137, v138, v139, v140, v141);
  else
    --*(_DWORD *)v10;
}

void Inspector::NetworkFrontendDispatcher::webSocketHandshakeResponseReceived(uint64_t *a1, _DWORD **a2, WTF **a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198[2];
  char v199;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v196 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2A00000002;
  *(_QWORD *)(v10 + 8) = "Network.webSocketHandshakeResponseReceived";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v197 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v12, v13, v14, v15, v16, (uint64_t)v198);
  if (v199)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v181 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v196);
      v25 = *(unsigned int *)(v8 + 36);
      v182 = *(_QWORD *)(v8 + 24);
      v183 = *v181;
      if (*v181)
        *v183 += 2;
      *(_QWORD *)(v182 + 8 * v25) = v183;
    }
    else
    {
      v26 = *v24;
      v27 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v197;
  v197 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v196;
  v196 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "requestId";
  *(_DWORD *)(v32 + 16) = 4;
  v196 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *a2;
  *((_QWORD *)v33 + 1) = *a2;
  if (v39)
    *v39 += 2;
  v197 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v198);
  if (v199)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v196);
      v48 = *(unsigned int *)(v30 + 36);
      v185 = *(_QWORD *)(v30 + 24);
      v186 = *v184;
      if (*v184)
        *v186 += 2;
      *(_QWORD *)(v185 + 8 * v48) = v186;
    }
    else
    {
      v49 = *v47;
      v50 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v196;
  v196 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x900000002;
  *(_QWORD *)(v53 + 8) = "timestamp";
  *(_DWORD *)(v53 + 16) = 4;
  v196 = (WTF *)v53;
  v54 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x200000001;
  v54[1] = a4;
  v197 = (WTF *)v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v55, v56, v57, v58, v59, (uint64_t)v198);
  if (v199)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v196);
      v68 = *(unsigned int *)(v30 + 36);
      v188 = *(_QWORD *)(v30 + 24);
      v189 = *v187;
      if (*v187)
        *v189 += 2;
      *(_QWORD *)(v188 + 8 * v68) = v189;
    }
    else
    {
      v69 = *v67;
      v70 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v197;
  v197 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v196;
  v196 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x800000002;
  *(_QWORD *)(v73 + 8) = "response";
  *(_DWORD *)(v73 + 16) = 4;
  v74 = *a3;
  *a3 = 0;
  v196 = v74;
  v197 = (WTF *)v73;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v75, v76, v77, v78, v79, (uint64_t)v198);
  if (v199)
  {
    v87 = (uint64_t *)(v30 + 24);
    v88 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v30 + 32))
    {
      v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v197);
      v88 = *(unsigned int *)(v30 + 36);
      v191 = *(_QWORD *)(v30 + 24);
      v192 = *v190;
      if (*v190)
        *v192 += 2;
      *(_QWORD *)(v191 + 8 * v88) = v192;
    }
    else
    {
      v89 = *v87;
      v90 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v30 + 36) = v88 + 1;
  }
  v91 = v196;
  v196 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v197;
  v197 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x600000002;
  *(_QWORD *)(v93 + 8) = "params";
  *(_DWORD *)(v93 + 16) = 4;
  v196 = (WTF *)v30;
  v197 = (WTF *)v93;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v94, v95, v96, v97, v98, (uint64_t)v198);
  if (v199)
  {
    v106 = (uint64_t *)(v8 + 24);
    v107 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v8 + 32))
    {
      v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v197);
      v107 = *(unsigned int *)(v8 + 36);
      v194 = *(_QWORD *)(v8 + 24);
      v195 = *v193;
      if (*v193)
        *v195 += 2;
      *(_QWORD *)(v194 + 8 * v107) = v195;
    }
    else
    {
      v108 = *v106;
      v109 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v8 + 36) = v107 + 1;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v100, v101, v102, v103, v104, v105, v198);
  v120 = *(unsigned int *)(v112 + 20);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)(v112 + 8);
    v122 = 8 * v120;
    do
    {
      v123 = *v121++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 24))(v123, v198);
      v122 -= 8;
    }
    while (v122);
  }
  v124 = v198[0];
  v198[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v113, v114, v115, v116, v117, v118, v119);
  else
    --*(_DWORD *)v8;
}

void Inspector::NetworkFrontendDispatcher::webSocketCreated(Inspector::NetworkFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1800000002;
  *(_QWORD *)(v8 + 8) = "Network.webSocketCreated";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x900000002;
  *(_QWORD *)(v30 + 8) = "requestId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x300000002;
  *(_QWORD *)(v51 + 8) = "url";
  *(_DWORD *)(v51 + 16) = 4;
  v164 = (WTF *)v51;
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x400000001;
  v58 = *(_DWORD **)a3;
  *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
  if (v58)
    *v58 += 2;
  v165 = v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
  if (v167)
  {
    v66 = (uint64_t *)(v28 + 24);
    v67 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
      v67 = *(unsigned int *)(v28 + 36);
      v159 = *(_QWORD *)(v28 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v67) = v160;
    }
    else
    {
      v68 = *v66;
      v69 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v28 + 36) = v67 + 1;
  }
  v70 = v165;
  v165 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v164;
  v164 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v162 = *(_QWORD *)(v6 + 24);
      v163 = *v161;
      if (*v161)
        *v163 += 2;
      *(_QWORD *)(v162 + 8 * v86) = v163;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

void Inspector::NetworkFrontendDispatcher::webSocketClosed(Inspector::NetworkFrontendDispatcher *this, const WTF::String *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1700000002;
  *(_QWORD *)(v8 + 8) = "Network.webSocketClosed";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x900000002;
  *(_QWORD *)(v30 + 8) = "requestId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x900000002;
  *(_QWORD *)(v51 + 8) = "timestamp";
  *(_DWORD *)(v51 + 16) = 4;
  v163 = (WTF *)v51;
  v52 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x200000001;
  v52[1] = a3;
  v164 = (WTF *)v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v163);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v164;
  v164 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v163;
  v163 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::NetworkFrontendDispatcher::webSocketFrameReceived(uint64_t *a1, _DWORD **a2, WTF **a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198[2];
  char v199;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v196 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1E00000002;
  *(_QWORD *)(v10 + 8) = "Network.webSocketFrameReceived";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v197 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v12, v13, v14, v15, v16, (uint64_t)v198);
  if (v199)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v181 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v196);
      v25 = *(unsigned int *)(v8 + 36);
      v182 = *(_QWORD *)(v8 + 24);
      v183 = *v181;
      if (*v181)
        *v183 += 2;
      *(_QWORD *)(v182 + 8 * v25) = v183;
    }
    else
    {
      v26 = *v24;
      v27 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v197;
  v197 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v196;
  v196 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "requestId";
  *(_DWORD *)(v32 + 16) = 4;
  v196 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *a2;
  *((_QWORD *)v33 + 1) = *a2;
  if (v39)
    *v39 += 2;
  v197 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v198);
  if (v199)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v196);
      v48 = *(unsigned int *)(v30 + 36);
      v185 = *(_QWORD *)(v30 + 24);
      v186 = *v184;
      if (*v184)
        *v186 += 2;
      *(_QWORD *)(v185 + 8 * v48) = v186;
    }
    else
    {
      v49 = *v47;
      v50 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v196;
  v196 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x900000002;
  *(_QWORD *)(v53 + 8) = "timestamp";
  *(_DWORD *)(v53 + 16) = 4;
  v196 = (WTF *)v53;
  v54 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x200000001;
  v54[1] = a4;
  v197 = (WTF *)v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v55, v56, v57, v58, v59, (uint64_t)v198);
  if (v199)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v196);
      v68 = *(unsigned int *)(v30 + 36);
      v188 = *(_QWORD *)(v30 + 24);
      v189 = *v187;
      if (*v187)
        *v189 += 2;
      *(_QWORD *)(v188 + 8 * v68) = v189;
    }
    else
    {
      v69 = *v67;
      v70 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v197;
  v197 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v196;
  v196 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x800000002;
  *(_QWORD *)(v73 + 8) = "response";
  *(_DWORD *)(v73 + 16) = 4;
  v74 = *a3;
  *a3 = 0;
  v196 = v74;
  v197 = (WTF *)v73;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v75, v76, v77, v78, v79, (uint64_t)v198);
  if (v199)
  {
    v87 = (uint64_t *)(v30 + 24);
    v88 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v30 + 32))
    {
      v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v197);
      v88 = *(unsigned int *)(v30 + 36);
      v191 = *(_QWORD *)(v30 + 24);
      v192 = *v190;
      if (*v190)
        *v192 += 2;
      *(_QWORD *)(v191 + 8 * v88) = v192;
    }
    else
    {
      v89 = *v87;
      v90 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v30 + 36) = v88 + 1;
  }
  v91 = v196;
  v196 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v197;
  v197 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x600000002;
  *(_QWORD *)(v93 + 8) = "params";
  *(_DWORD *)(v93 + 16) = 4;
  v196 = (WTF *)v30;
  v197 = (WTF *)v93;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v94, v95, v96, v97, v98, (uint64_t)v198);
  if (v199)
  {
    v106 = (uint64_t *)(v8 + 24);
    v107 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v8 + 32))
    {
      v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v197);
      v107 = *(unsigned int *)(v8 + 36);
      v194 = *(_QWORD *)(v8 + 24);
      v195 = *v193;
      if (*v193)
        *v195 += 2;
      *(_QWORD *)(v194 + 8 * v107) = v195;
    }
    else
    {
      v108 = *v106;
      v109 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v8 + 36) = v107 + 1;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v100, v101, v102, v103, v104, v105, v198);
  v120 = *(unsigned int *)(v112 + 20);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)(v112 + 8);
    v122 = 8 * v120;
    do
    {
      v123 = *v121++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 24))(v123, v198);
      v122 -= 8;
    }
    while (v122);
  }
  v124 = v198[0];
  v198[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v113, v114, v115, v116, v117, v118, v119);
  else
    --*(_DWORD *)v8;
}

void Inspector::NetworkFrontendDispatcher::webSocketFrameError(Inspector::NetworkFrontendDispatcher *this, const WTF::String *a2, double a3, const WTF::String *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199[2];
  char v200;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v197 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1B00000002;
  *(_QWORD *)(v10 + 8) = "Network.webSocketFrameError";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v198 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v12, v13, v14, v15, v16, (uint64_t)v199);
  if (v200)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v182 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v197);
      v25 = *(unsigned int *)(v8 + 36);
      v183 = *(_QWORD *)(v8 + 24);
      v184 = *v182;
      if (*v182)
        *v184 += 2;
      *(_QWORD *)(v183 + 8 * v25) = v184;
    }
    else
    {
      v26 = *v24;
      v27 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v198;
  v198 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v197;
  v197 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "requestId";
  *(_DWORD *)(v32 + 16) = 4;
  v197 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *(_DWORD **)a2;
  *((_QWORD *)v33 + 1) = *(_QWORD *)a2;
  if (v39)
    *v39 += 2;
  v198 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v34, v35, v36, v37, v38, (uint64_t)v199);
  if (v200)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v197);
      v48 = *(unsigned int *)(v30 + 36);
      v186 = *(_QWORD *)(v30 + 24);
      v187 = *v185;
      if (*v185)
        *v187 += 2;
      *(_QWORD *)(v186 + 8 * v48) = v187;
    }
    else
    {
      v49 = *v47;
      v50 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v198;
  v198 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v197;
  v197 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x900000002;
  *(_QWORD *)(v53 + 8) = "timestamp";
  *(_DWORD *)(v53 + 16) = 4;
  v197 = (WTF *)v53;
  v54 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x200000001;
  v54[1] = a3;
  v198 = (WTF *)v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v55, v56, v57, v58, v59, (uint64_t)v199);
  if (v200)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v197);
      v68 = *(unsigned int *)(v30 + 36);
      v189 = *(_QWORD *)(v30 + 24);
      v190 = *v188;
      if (*v188)
        *v190 += 2;
      *(_QWORD *)(v189 + 8 * v68) = v190;
    }
    else
    {
      v69 = *v67;
      v70 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v198;
  v198 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v197;
  v197 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0xC00000002;
  *(_QWORD *)(v73 + 8) = "errorMessage";
  *(_DWORD *)(v73 + 16) = 4;
  v197 = (WTF *)v73;
  v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v74 = 0x400000001;
  v80 = *(_DWORD **)a4;
  *((_QWORD *)v74 + 1) = *(_QWORD *)a4;
  if (v80)
    *v80 += 2;
  v198 = v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v75, v76, v77, v78, v79, (uint64_t)v199);
  if (v200)
  {
    v88 = (uint64_t *)(v30 + 24);
    v89 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v30 + 32))
    {
      v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v197);
      v89 = *(unsigned int *)(v30 + 36);
      v192 = *(_QWORD *)(v30 + 24);
      v193 = *v191;
      if (*v191)
        *v193 += 2;
      *(_QWORD *)(v192 + 8 * v89) = v193;
    }
    else
    {
      v90 = *v88;
      v91 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v30 + 36) = v89 + 1;
  }
  v92 = v198;
  v198 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::JSONImpl::Value::operator delete(v92, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v92;
  }
  v93 = v197;
  v197 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x600000002;
  *(_QWORD *)(v94 + 8) = "params";
  *(_DWORD *)(v94 + 16) = 4;
  v197 = (WTF *)v30;
  v198 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v95, v96, v97, v98, v99, (uint64_t)v199);
  if (v200)
  {
    v107 = (uint64_t *)(v8 + 24);
    v108 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v8 + 32))
    {
      v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v198);
      v108 = *(unsigned int *)(v8 + 36);
      v195 = *(_QWORD *)(v8 + 24);
      v196 = *v194;
      if (*v194)
        *v196 += 2;
      *(_QWORD *)(v195 + 8 * v108) = v196;
    }
    else
    {
      v109 = *v107;
      v110 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v8 + 36) = v108 + 1;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v101, v102, v103, v104, v105, v106, v199);
  v121 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v121)
  {
    v122 = *(uint64_t **)(v113 + 8);
    v123 = 8 * v121;
    do
    {
      v124 = *v122++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v124 + 24))(v124, v199);
      v123 -= 8;
    }
    while (v123);
  }
  v125 = v199[0];
  v199[0] = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v114, v115, v116, v117, v118, v119, v120);
  else
    --*(_DWORD *)v8;
}

void Inspector::NetworkFrontendDispatcher::webSocketFrameSent(uint64_t *a1, _DWORD **a2, WTF **a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198[2];
  char v199;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v196 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1A00000002;
  *(_QWORD *)(v10 + 8) = "Network.webSocketFrameSent";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v197 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v12, v13, v14, v15, v16, (uint64_t)v198);
  if (v199)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v181 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v196);
      v25 = *(unsigned int *)(v8 + 36);
      v182 = *(_QWORD *)(v8 + 24);
      v183 = *v181;
      if (*v181)
        *v183 += 2;
      *(_QWORD *)(v182 + 8 * v25) = v183;
    }
    else
    {
      v26 = *v24;
      v27 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v197;
  v197 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v196;
  v196 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "requestId";
  *(_DWORD *)(v32 + 16) = 4;
  v196 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *a2;
  *((_QWORD *)v33 + 1) = *a2;
  if (v39)
    *v39 += 2;
  v197 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v198);
  if (v199)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v196);
      v48 = *(unsigned int *)(v30 + 36);
      v185 = *(_QWORD *)(v30 + 24);
      v186 = *v184;
      if (*v184)
        *v186 += 2;
      *(_QWORD *)(v185 + 8 * v48) = v186;
    }
    else
    {
      v49 = *v47;
      v50 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v196;
  v196 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x900000002;
  *(_QWORD *)(v53 + 8) = "timestamp";
  *(_DWORD *)(v53 + 16) = 4;
  v196 = (WTF *)v53;
  v54 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x200000001;
  v54[1] = a4;
  v197 = (WTF *)v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v55, v56, v57, v58, v59, (uint64_t)v198);
  if (v199)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v196);
      v68 = *(unsigned int *)(v30 + 36);
      v188 = *(_QWORD *)(v30 + 24);
      v189 = *v187;
      if (*v187)
        *v189 += 2;
      *(_QWORD *)(v188 + 8 * v68) = v189;
    }
    else
    {
      v69 = *v67;
      v70 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v197;
  v197 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v196;
  v196 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x800000002;
  *(_QWORD *)(v73 + 8) = "response";
  *(_DWORD *)(v73 + 16) = 4;
  v74 = *a3;
  *a3 = 0;
  v196 = v74;
  v197 = (WTF *)v73;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v75, v76, v77, v78, v79, (uint64_t)v198);
  if (v199)
  {
    v87 = (uint64_t *)(v30 + 24);
    v88 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v30 + 32))
    {
      v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v197);
      v88 = *(unsigned int *)(v30 + 36);
      v191 = *(_QWORD *)(v30 + 24);
      v192 = *v190;
      if (*v190)
        *v192 += 2;
      *(_QWORD *)(v191 + 8 * v88) = v192;
    }
    else
    {
      v89 = *v87;
      v90 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v30 + 36) = v88 + 1;
  }
  v91 = v196;
  v196 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v197;
  v197 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x600000002;
  *(_QWORD *)(v93 + 8) = "params";
  *(_DWORD *)(v93 + 16) = 4;
  v196 = (WTF *)v30;
  v197 = (WTF *)v93;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v94, v95, v96, v97, v98, (uint64_t)v198);
  if (v199)
  {
    v106 = (uint64_t *)(v8 + 24);
    v107 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v8 + 32))
    {
      v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v197);
      v107 = *(unsigned int *)(v8 + 36);
      v194 = *(_QWORD *)(v8 + 24);
      v195 = *v193;
      if (*v193)
        *v195 += 2;
      *(_QWORD *)(v194 + 8 * v107) = v195;
    }
    else
    {
      v108 = *v106;
      v109 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v8 + 36) = v107 + 1;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v100, v101, v102, v103, v104, v105, v198);
  v120 = *(unsigned int *)(v112 + 20);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)(v112 + 8);
    v122 = 8 * v120;
    do
    {
      v123 = *v121++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 24))(v123, v198);
      v122 -= 8;
    }
    while (v122);
  }
  v124 = v198[0];
  v198[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v113, v114, v115, v116, v117, v118, v119);
  else
    --*(_DWORD *)v8;
}

void Inspector::PageFrontendDispatcher::domContentEventFired(Inspector::PageFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "Page.domContentEventFired";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::loadEventFired(Inspector::PageFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1300000002;
  *(_QWORD *)(v6 + 8) = "Page.loadEventFired";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::frameNavigated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1300000002;
  *(_QWORD *)(v6 + 8) = "Page.frameNavigated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x500000002;
  *(_QWORD *)(v27 + 8) = "frame";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::frameDetached(Inspector::PageFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1200000002;
  *(_QWORD *)(v6 + 8) = "Page.frameDetached";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "frameId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::frameStartedLoading(Inspector::PageFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1800000002;
  *(_QWORD *)(v6 + 8) = "Page.frameStartedLoading";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "frameId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::frameStoppedLoading(Inspector::PageFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1800000002;
  *(_QWORD *)(v6 + 8) = "Page.frameStoppedLoading";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "frameId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::frameScheduledNavigation(Inspector::PageFrontendDispatcher *this, const WTF::String *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1D00000002;
  *(_QWORD *)(v8 + 8) = "Page.frameScheduledNavigation";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x700000002;
  *(_QWORD *)(v30 + 8) = "frameId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x500000002;
  *(_QWORD *)(v51 + 8) = "delay";
  *(_DWORD *)(v51 + 16) = 4;
  v163 = (WTF *)v51;
  v52 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x200000001;
  v52[1] = a3;
  v164 = (WTF *)v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v163);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v164;
  v164 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v163;
  v163 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::PageFrontendDispatcher::frameClearedScheduledNavigation(Inspector::PageFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2400000002;
  *(_QWORD *)(v6 + 8) = "Page.frameClearedScheduledNavigation";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "frameId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::PageFrontendDispatcher::defaultUserPreferencesDidChange(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2400000002;
  *(_QWORD *)(v6 + 8) = "Page.defaultUserPreferencesDidChange";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xB00000002;
  *(_QWORD *)(v27 + 8) = "preferences";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v26 + 16), &v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::RuntimeFrontendDispatcher::executionContextCreated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1F00000002;
  *(_QWORD *)(v6 + 8) = "Runtime.executionContextCreated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "context";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::ScriptProfilerFrontendDispatcher::trackingStart(Inspector::ScriptProfilerFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1C00000002;
  *(_QWORD *)(v6 + 8) = "ScriptProfiler.trackingStart";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::ScriptProfilerFrontendDispatcher::trackingUpdate(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1D00000002;
  *(_QWORD *)(v6 + 8) = "ScriptProfiler.trackingUpdate";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x500000002;
  *(_QWORD *)(v27 + 8) = "event";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::ScriptProfilerFrontendDispatcher::trackingComplete(uint64_t *a1, WTF **a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1F00000002;
  *(_QWORD *)(v8 + 8) = "ScriptProfiler.trackingComplete";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "timestamp";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x200000001;
  v30[1] = a3;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (*a2)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0x700000002;
    *(_QWORD *)(v49 + 8) = "samples";
    *(_DWORD *)(v49 + 16) = 4;
    v50 = *a2;
    *a2 = 0;
    v161 = v50;
    v162 = (WTF *)v49;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
    if (v164)
    {
      v63 = (uint64_t *)(v28 + 24);
      v64 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
      {
        v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
        v64 = *(unsigned int *)(v28 + 36);
        v159 = *(_QWORD *)(v28 + 24);
        v160 = *v158;
        if (*v158)
          *v160 += 2;
        *(_QWORD *)(v159 + 8 * v64) = v160;
      }
      else
      {
        v65 = *v63;
        v66 = v162;
        if (v162)
          *(_DWORD *)v162 += 2;
        *(_QWORD *)(v65 + 8 * v64) = v66;
      }
      *(_DWORD *)(v28 + 36) = v64 + 1;
    }
    v67 = v161;
    v161 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
      else
        --*(_DWORD *)v67;
    }
    v68 = v162;
    v162 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v156 = *(_QWORD *)(v6 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v83) = v157;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::TargetFrontendDispatcher::targetCreated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "Target.targetCreated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xA00000002;
  *(_QWORD *)(v27 + 8) = "targetInfo";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::TargetFrontendDispatcher::targetDestroyed(Inspector::TargetFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1600000002;
  *(_QWORD *)(v6 + 8) = "Target.targetDestroyed";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x800000002;
  *(_QWORD *)(v27 + 8) = "targetId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::TargetFrontendDispatcher::didCommitProvisionalTarget(Inspector::TargetFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2100000002;
  *(_QWORD *)(v8 + 8) = "Target.didCommitProvisionalTarget";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0xB00000002;
  *(_QWORD *)(v30 + 8) = "oldTargetId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0xB00000002;
  *(_QWORD *)(v51 + 8) = "newTargetId";
  *(_DWORD *)(v51 + 16) = 4;
  v164 = (WTF *)v51;
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x400000001;
  v58 = *(_DWORD **)a3;
  *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
  if (v58)
    *v58 += 2;
  v165 = v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
  if (v167)
  {
    v66 = (uint64_t *)(v28 + 24);
    v67 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
      v67 = *(unsigned int *)(v28 + 36);
      v159 = *(_QWORD *)(v28 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v67) = v160;
    }
    else
    {
      v68 = *v66;
      v69 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v28 + 36) = v67 + 1;
  }
  v70 = v165;
  v165 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v164;
  v164 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v162 = *(_QWORD *)(v6 + 24);
      v163 = *v161;
      if (*v161)
        *v163 += 2;
      *(_QWORD *)(v162 + 8 * v86) = v163;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

void Inspector::TargetFrontendDispatcher::dispatchMessageFromTarget(Inspector::TargetFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2000000002;
  *(_QWORD *)(v8 + 8) = "Target.dispatchMessageFromTarget";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "targetId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x700000002;
  *(_QWORD *)(v51 + 8) = "message";
  *(_DWORD *)(v51 + 16) = 4;
  v164 = (WTF *)v51;
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x400000001;
  v58 = *(_DWORD **)a3;
  *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
  if (v58)
    *v58 += 2;
  v165 = v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
  if (v167)
  {
    v66 = (uint64_t *)(v28 + 24);
    v67 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
      v67 = *(unsigned int *)(v28 + 36);
      v159 = *(_QWORD *)(v28 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v67) = v160;
    }
    else
    {
      v68 = *v66;
      v69 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v28 + 36) = v67 + 1;
  }
  v70 = v165;
  v165 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v164;
  v164 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v162 = *(_QWORD *)(v6 + 24);
      v163 = *v161;
      if (*v161)
        *v163 += 2;
      *(_QWORD *)(v162 + 8 * v86) = v163;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

void Inspector::TimelineFrontendDispatcher::eventRecorded(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1600000002;
  *(_QWORD *)(v6 + 8) = "Timeline.eventRecorded";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "record";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::TimelineFrontendDispatcher::recordingStarted(Inspector::TimelineFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "Timeline.recordingStarted";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "startTime";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::TimelineFrontendDispatcher::recordingStopped(Inspector::TimelineFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "Timeline.recordingStopped";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "endTime";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::TimelineFrontendDispatcher::autoCaptureStarted(Inspector::TimelineFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1B00000002;
  *(_QWORD *)(v4 + 8) = "Timeline.autoCaptureStarted";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::WorkerFrontendDispatcher::workerCreated(Inspector::WorkerFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  WTF *v112;
  WTF *v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD **v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  _DWORD **v195;
  uint64_t v196;
  _DWORD *v197;
  WTF *v198;
  WTF *v199;
  WTF::StringImpl *v200[2];
  char v201;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v198 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1400000002;
  *(_QWORD *)(v10 + 8) = "Worker.workerCreated";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v199 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v199, v12, v13, v14, v15, v16, (uint64_t)v200);
  if (v201)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v183 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v198);
      v25 = *(unsigned int *)(v8 + 36);
      v184 = *(_QWORD *)(v8 + 24);
      v185 = *v183;
      if (*v183)
        *v185 += 2;
      *(_QWORD *)(v184 + 8 * v25) = v185;
    }
    else
    {
      v26 = *v24;
      v27 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v199;
  v199 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v198;
  v198 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x800000002;
  *(_QWORD *)(v32 + 8) = "workerId";
  *(_DWORD *)(v32 + 16) = 4;
  v198 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *(_DWORD **)a2;
  *((_QWORD *)v33 + 1) = *(_QWORD *)a2;
  if (v39)
    *v39 += 2;
  v199 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v199, v34, v35, v36, v37, v38, (uint64_t)v200);
  if (v201)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v186 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v198);
      v48 = *(unsigned int *)(v30 + 36);
      v187 = *(_QWORD *)(v30 + 24);
      v188 = *v186;
      if (*v186)
        *v188 += 2;
      *(_QWORD *)(v187 + 8 * v48) = v188;
    }
    else
    {
      v49 = *v47;
      v50 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v199;
  v199 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v198;
  v198 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x300000002;
  *(_QWORD *)(v53 + 8) = "url";
  *(_DWORD *)(v53 + 16) = 4;
  v198 = (WTF *)v53;
  v54 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x400000001;
  v60 = *(_DWORD **)a3;
  *((_QWORD *)v54 + 1) = *(_QWORD *)a3;
  if (v60)
    *v60 += 2;
  v199 = v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v199, v55, v56, v57, v58, v59, (uint64_t)v200);
  if (v201)
  {
    v68 = (uint64_t *)(v30 + 24);
    v69 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v69 == *(_DWORD *)(v30 + 32))
    {
      v189 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v198);
      v69 = *(unsigned int *)(v30 + 36);
      v190 = *(_QWORD *)(v30 + 24);
      v191 = *v189;
      if (*v189)
        *v191 += 2;
      *(_QWORD *)(v190 + 8 * v69) = v191;
    }
    else
    {
      v70 = *v68;
      v71 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v70 + 8 * v69) = v71;
    }
    *(_DWORD *)(v30 + 36) = v69 + 1;
  }
  v72 = v199;
  v199 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v61, v62, v63, v64, v65, v66, v67);
    else
      --*(_DWORD *)v72;
  }
  v73 = v198;
  v198 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v74 = 0x400000002;
  *(_QWORD *)(v74 + 8) = "name";
  *(_DWORD *)(v74 + 16) = 4;
  v198 = (WTF *)v74;
  v75 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v75 = 0x400000001;
  v81 = *(_DWORD **)a4;
  *((_QWORD *)v75 + 1) = *(_QWORD *)a4;
  if (v81)
    *v81 += 2;
  v199 = v75;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v199, v76, v77, v78, v79, v80, (uint64_t)v200);
  if (v201)
  {
    v89 = (uint64_t *)(v30 + 24);
    v90 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v30 + 32))
    {
      v192 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v198);
      v90 = *(unsigned int *)(v30 + 36);
      v193 = *(_QWORD *)(v30 + 24);
      v194 = *v192;
      if (*v192)
        *v194 += 2;
      *(_QWORD *)(v193 + 8 * v90) = v194;
    }
    else
    {
      v91 = *v89;
      v92 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v91 + 8 * v90) = v92;
    }
    *(_DWORD *)(v30 + 36) = v90 + 1;
  }
  v93 = v199;
  v199 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v93;
  }
  v94 = v198;
  v198 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x600000002;
  *(_QWORD *)(v95 + 8) = "params";
  *(_DWORD *)(v95 + 16) = 4;
  v198 = (WTF *)v30;
  v199 = (WTF *)v95;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v199, (const WTF::StringImpl *)&v198, v96, v97, v98, v99, v100, (uint64_t)v200);
  if (v201)
  {
    v108 = (uint64_t *)(v8 + 24);
    v109 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v109 == *(_DWORD *)(v8 + 32))
    {
      v195 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v109 + 1, (unint64_t)&v199);
      v109 = *(unsigned int *)(v8 + 36);
      v196 = *(_QWORD *)(v8 + 24);
      v197 = *v195;
      if (*v195)
        *v197 += 2;
      *(_QWORD *)(v196 + 8 * v109) = v197;
    }
    else
    {
      v110 = *v108;
      v111 = v199;
      if (v199)
        *(_DWORD *)v199 += 2;
      *(_QWORD *)(v110 + 8 * v109) = v111;
    }
    *(_DWORD *)(v8 + 36) = v109 + 1;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 1)
      WTF::JSONImpl::Value::operator delete(v112, v101, v102, v103, v104, v105, v106, v107);
    else
      --*(_DWORD *)v112;
  }
  v113 = v199;
  v199 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v114 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v102, v103, v104, v105, v106, v107, v200);
  v122 = *(unsigned int *)(v114 + 20);
  if ((_DWORD)v122)
  {
    v123 = *(uint64_t **)(v114 + 8);
    v124 = 8 * v122;
    do
    {
      v125 = *v123++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v125 + 24))(v125, v200);
      v124 -= 8;
    }
    while (v124);
  }
  v126 = v200[0];
  v200[0] = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v115, v116, v117, v118, v119, v120, v121);
  else
    --*(_DWORD *)v8;
}

void Inspector::WorkerFrontendDispatcher::workerTerminated(Inspector::WorkerFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Worker.workerTerminated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x800000002;
  *(_QWORD *)(v27 + 8) = "workerId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::WorkerFrontendDispatcher::dispatchMessageFromWorker(Inspector::WorkerFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2000000002;
  *(_QWORD *)(v8 + 8) = "Worker.dispatchMessageFromWorker";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "workerId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x700000002;
  *(_QWORD *)(v51 + 8) = "message";
  *(_DWORD *)(v51 + 16) = 4;
  v164 = (WTF *)v51;
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x400000001;
  v58 = *(_DWORD **)a3;
  *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
  if (v58)
    *v58 += 2;
  v165 = v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
  if (v167)
  {
    v66 = (uint64_t *)(v28 + 24);
    v67 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
      v67 = *(unsigned int *)(v28 + 36);
      v159 = *(_QWORD *)(v28 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v67) = v160;
    }
    else
    {
      v68 = *v66;
      v69 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v28 + 36) = v67 + 1;
  }
  v70 = v165;
  v165 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v164;
  v164 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v162 = *(_QWORD *)(v6 + 24);
      v163 = *v161;
      if (*v161)
        *v163 += 2;
      *(_QWORD *)(v162 + 8 * v86) = v163;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

double Inspector::FrontendRouter::create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v3 + 24;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v3 + 16) = 2;
  *a1 = v3;
  return result;
}

_QWORD *Inspector::FrontendRouter::connectFrontend(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*result;
    v6 = *(unsigned int *)(a1 + 20);
    while (*v5 != a2)
    {
      ++v5;
      if (!--v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v7 = a2;
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
    {
      result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v7);
      v4 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = *result;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v4) = a2;
    }
    *(_DWORD *)(a1 + 20) = v4 + 1;
  }
  return result;
}

_QWORD *Inspector::FrontendRouter::disconnectFrontend(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)result + 5);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = 0;
    v5 = (_QWORD *)result[1];
    while (v5[v4] != a2)
    {
      if (v2 == ++v4)
        return result;
    }
    if (*v5 == a2)
    {
      v6 = 0;
LABEL_12:
      result = memmove(&v5[v6], &v5[v6 + 1], 8 * v2 - (8 * v6 + 8));
      --*((_DWORD *)v3 + 5);
    }
    else
    {
      v6 = 0;
      while (v2 - 1 != v6)
      {
        v7 = v5[++v6];
        if (v7 == a2)
          goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t Inspector::FrontendRouter::disconnectAllFrontends(uint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(this + 16))
  {
    if (*(_DWORD *)(this + 20))
      *(_DWORD *)(this + 20) = 0;
    v8 = *(_QWORD *)(this + 8);
    v9 = this + 24;
    if (this + 24 == v8)
    {
      if (v8)
        return this;
      goto LABEL_6;
    }
    if (!v8
      || (*(_QWORD *)(this + 8) = 0,
          *(_DWORD *)(this + 16) = 0,
          v10 = this + 24,
          v11 = this,
          WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8),
          v9 = v10,
          this = v11,
          !*(_QWORD *)(v11 + 8)))
    {
LABEL_6:
      *(_QWORD *)(this + 8) = v9;
      *(_DWORD *)(this + 16) = 2;
    }
  }
  return this;
}

uint64_t Inspector::FrontendRouter::hasLocalFrontend(Inspector::FrontendRouter *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t Inspector::FrontendRouter::hasRemoteFrontend(Inspector::FrontendRouter *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if (v5)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return v5 ^ 1u;
}

int *Inspector::Protocol::Helpers::getEnumConstantValue@<X0>(Inspector::Protocol::Helpers *this@<X0>, int **a2@<X8>)
{
  char **v3;
  char *v4;
  int v5;
  char *v6;
  int *result;

  v3 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * (int)this];
  v4 = v3[1];
  if (v4)
  {
    v5 = (_DWORD)v4 - 1;
    if (v4 == (char *)1)
    {
      result = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v6 = *v3;
      result = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *result = 2;
      result[1] = v5;
      *((_QWORD *)result + 1) = v6;
      result[4] = 4;
    }
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Animation::AnimationState>(uint64_t *a1)
{
  uint64_t v2;

  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ready", 5))
    return 0x100000000;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"delayed", 7))
    return 0x100000001;
  v2 = 0x100000002;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"active", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canceled", 8))
    {
      return 0x100000003;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"done", 4))
    {
      return 0x100000004;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Animation::PlaybackDirection>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000005;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"normal", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"reverse", 7))
    {
      return 0x100000006;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"alternate", 9))
    {
      return 0x100000007;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"alternate-reverse", 17))
    {
      return 0x100000008;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Animation::FillMode>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000009;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"none", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"forwards", 8))
    {
      return 0x10000000ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"backwards", 9))
    {
      return 0x10000000BLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"both", 4))
    {
      return 0x10000000CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"auto", 4))
    {
      return 0x10000000DLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CPUProfiler::ThreadInfo::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000000ELL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"main", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"webkit", 6))
      return 0x10000000FLL;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::StyleSheetOrigin>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000010;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"user", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"user-agent", 10))
    {
      return 0x100000011;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"author", 6))
    {
      return 0x100000012;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"inspector", 9))
    {
      return 0x100000013;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::PseudoId>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::PseudoId>(WTF::String const&)::constantValues[v2];
    v4 = (unint64_t *)&(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 ? v6 - 1 : 0;
    if (WTF::equalInternal<unsigned char>(*a1, v5, v7))
      break;
    if (++v2 == 22)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::ForceablePseudoClass>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000002;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"active", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"focus", 5))
    {
      return 0x10000002ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"focus-visible", 13))
    {
      return 0x10000002BLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"focus-within", 12))
    {
      return 0x10000002CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"hover", 5))
    {
      return 0x10000002DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"target", 6))
    {
      return 0x10000002ELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"visited", 7))
    {
      return 0x10000002FLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::CSSPropertyStatus>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000002;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"active", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"inactive", 8))
    {
      return 0x100000030;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"disabled", 8))
    {
      return 0x100000031;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"style", 5))
    {
      return 0x100000032;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::LayoutFlag>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000003CLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"rendered", 8))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"scrollable", 10))
    {
      return 0x10000003DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"flex", 4))
    {
      return 0x10000003ELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"grid", 4))
    {
      return 0x10000003FLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"event", 5))
    {
      return 0x100000040;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::Grouping::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000033;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"media-rule", 10))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"media-import-rule", 17))
    {
      return 0x100000034;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"media-link-node", 15))
    {
      return 0x100000035;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"media-style-node", 16))
    {
      return 0x100000036;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"supports-rule", 13))
    {
      return 0x100000037;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"layer-rule", 10))
    {
      return 0x100000038;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"layer-import-rule", 17))
    {
      return 0x100000039;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"container-rule", 14))
    {
      return 0x10000003ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"style-rule", 10))
    {
      return 0x10000003BLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Canvas::ColorSpace>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000043;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"srgb", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"display-p3", 10))
      return 0x100000044;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Canvas::ContextType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000045;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canvas-2d", 9))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-canvas-2d", 19))
    {
      return 0x100000046;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"bitmaprenderer", 14))
    {
      return 0x100000047;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-bitmaprenderer", 24))
    {
      return 0x100000048;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"webgl", 5))
    {
      return 0x100000049;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-webgl", 15))
    {
      return 0x10000004ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"webgl2", 6))
    {
      return 0x10000004BLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-webgl2", 16))
    {
      return 0x10000004CLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Canvas::ProgramType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000004DLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"compute", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"render", 6))
      return 0x10000004ELL;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ClearReason>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000054;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"console-api", 11))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"frontend", 8))
    {
      return 0x100000065;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"main-frame-navigation", 21))
    {
      return 0x100000066;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ConsoleMessage::Level>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000067;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"log", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"info", 4))
    {
      return 0x100000068;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"warning", 7))
    {
      return 0x100000069;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"error", 5))
    {
      return 0x10000006ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"debug", 5))
    {
      return 0x10000006BLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ConsoleMessage::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000067;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"log", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"dir", 3))
    {
      return 0x10000006CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"dirxml", 6))
    {
      return 0x10000006DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"table", 5))
    {
      return 0x10000006ELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"trace", 5))
    {
      return 0x10000006FLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"clear", 5))
    {
      return 0x100000070;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"startGroup", 10))
    {
      return 0x100000071;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"startGroupCollapsed", 19))
    {
      return 0x100000072;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"endGroup", 8))
    {
      return 0x100000073;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"assert", 6))
    {
      return 0x100000074;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"timing", 6))
    {
      return 0x100000075;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"profile", 7))
    {
      return 0x100000076;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"profileEnd", 10))
    {
      return 0x100000077;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"image", 5))
    {
      return 0x100000078;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::PseudoType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000019;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"before", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"after", 5))
      return 0x10000001ALL;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::ShadowRootType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000011;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"user-agent", 10))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"open", 4))
    {
      return 0x100000079;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"closed", 6))
    {
      return 0x10000007ALL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::CustomElementState>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000007BLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"builtin", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"custom", 6))
    {
      return 0x10000007CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"waiting", 7))
    {
      return 0x10000007DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"failed", 6))
    {
      return 0x10000007ELL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::LiveRegionRelevant>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000007FLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"additions", 9))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"removals", 8))
    {
      return 0x100000080;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"text", 4))
    {
      return 0x100000081;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::AccessibilityProperties::Checked>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000082;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"true", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"false", 5))
    {
      return 0x100000083;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"mixed", 5))
    {
      return 0x100000084;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::AccessibilityProperties::Current>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000082;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"true", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"false", 5))
    {
      return 0x100000083;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"page", 4))
    {
      return 0x100000085;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"step", 4))
    {
      return 0x100000086;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"location", 8))
    {
      return 0x100000087;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"date", 4))
    {
      return 0x100000088;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"time", 4))
    {
      return 0x100000089;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::AccessibilityProperties::Invalid>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000082;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"true", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"false", 5))
    {
      return 0x100000083;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"grammar", 7))
    {
      return 0x10000008ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"spelling", 8))
    {
      return 0x10000008BLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::AccessibilityProperties::LiveRegionStatus>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000062;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"assertive", 9))
    return 0x10000008CLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"polite", 6))
    return 0x10000008DLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"off", 3))
    return 0;
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOM::AccessibilityProperties::SwitchState>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000062;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"off", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"on", 2))
      return 0x10000008ELL;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Debugger::BreakpointAction::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000067;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"log", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"evaluate", 8))
    {
      return 0x100000096;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"sound", 5))
    {
      return 0x100000097;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"probe", 5))
    {
      return 0x100000098;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Debugger::Scope::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000099;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"global", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"with", 4))
    {
      return 0x10000009ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"closure", 7))
    {
      return 0x10000009BLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"catch", 5))
    {
      return 0x10000009CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"functionName", 12))
    {
      return 0x10000009DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"globalLexicalEnvironment", 24))
    {
      return 0x10000009ELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"nestedLexical", 13))
    {
      return 0x10000009FLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Heap::GarbageCollection::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A0;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"full", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"partial", 7))
      return 0x1000000A1;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::IndexedDB::Key::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000088;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"number", 6))
    return 0x1000000A2;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"string", 6))
    return 0x1000000A3;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"date", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"array", 5))
      return 0x1000000A4;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::IndexedDB::KeyPath::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A3;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"null", 4))
    return 0x1000000A5;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"string", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"array", 5))
      return 0x1000000A4;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Memory::CategoryData::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000052;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"javascript", 10))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"jit", 3))
    {
      return 0x1000000A6;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"images", 6))
    {
      return 0x1000000A7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"layers", 6))
    {
      return 0x1000000A8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"page", 4))
    {
      return 0x100000085;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"other", 5))
    {
      return 0x100000061;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::ReferrerPolicy>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A9;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"empty-string", 12))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"no-referrer", 11))
    {
      return 0x1000000AALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"no-referrer-when-downgrade", 26))
    {
      return 0x1000000ABLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"same-origin", 11))
    {
      return 0x1000000ACLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"origin", 6))
    {
      return 0x1000000ADLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"strict-origin", 13))
    {
      return 0x1000000AELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"origin-when-cross-origin", 24))
    {
      return 0x1000000AFLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"strict-origin-when-cross-origin", 31))
    {
      return 0x1000000B0;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"unsafe-url", 10))
    {
      return 0x1000000B1;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::Response::Source>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000053;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"unknown", 7))
    return 0x1000000B2;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"network", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"memory-cache", 12))
    {
      return 0x1000000B3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"disk-cache", 10))
    {
      return 0x1000000B4;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"service-worker", 14))
    {
      return 0x1000000B5;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"inspector-override", 18))
    {
      return 0x1000000B6;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::Metrics::Priority>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000B7;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"low", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"medium", 6))
    {
      return 0x1000000B8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"high", 4))
    {
      return 0x1000000B9;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::Initiator::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000061;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"parser", 6))
    return 0x1000000C6;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"script", 6))
    return 0x1000000C7;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"other", 5))
    return 0;
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::ResourceType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000BALL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Document", 8))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"StyleSheet", 10))
    {
      return 0x1000000BBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Image", 5))
    {
      return 0x1000000BCLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Font", 4))
    {
      return 0x1000000BDLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Script", 6))
    {
      return 0x1000000BELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"XHR", 3))
    {
      return 0x1000000BFLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Fetch", 5))
    {
      return 0x1000000C0;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Ping", 4))
    {
      return 0x1000000C1;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Beacon", 6))
    {
      return 0x1000000C2;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"WebSocket", 9))
    {
      return 0x1000000C3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"EventSource", 11))
    {
      return 0x1000000C4;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Other", 5))
    {
      return 0x1000000C5;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::CookieSameSitePolicy>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000E4;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"None", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Lax", 3))
    {
      return 0x1000000E5;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Strict", 6))
    {
      return 0x1000000E6;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Recording::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000045;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canvas-2d", 9))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-canvas-2d", 19))
    {
      return 0x100000046;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canvas-bitmaprenderer", 21))
    {
      return 0x1000000E7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-canvas-bitmaprenderer", 31))
    {
      return 0x1000000E8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canvas-webgl", 12))
    {
      return 0x1000000E9;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-canvas-webgl", 22))
    {
      return 0x1000000EALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"canvas-webgl2", 13))
    {
      return 0x1000000EBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"offscreen-canvas-webgl2", 23))
    {
      return 0x1000000ECLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Recording::Initiator>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000065;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"frontend", 8))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"console", 7))
    {
      return 0x1000000EDLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"auto-capture", 12))
    {
      return 0x1000000EELL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::ExecutionContextType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000005;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"normal", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"user", 4))
    {
      return 0x100000010;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"internal", 8))
    {
      return 0x100000100;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::SyntaxErrorType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000009;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"none", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"irrecoverable", 13))
    {
      return 0x100000101;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"unterminated-literal", 20))
    {
      return 0x100000102;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"recoverable", 11))
    {
      return 0x100000103;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::RemoteObject::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A2;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"object", 6))
    return 0x1000000EFLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"function", 8))
    return 0x1000000F0;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"undefined", 9))
    return 0x1000000F1;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"string", 6))
    return 0x1000000A3;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"number", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"BOOLean", 7))
    {
      return 0x1000000F2;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"symbol", 6))
    {
      return 0x1000000F3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"bigint", 6))
    {
      return 0x1000000F4;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::RemoteObject::Subtype>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000006ALL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"array", 5))
    return 0x1000000A4;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"null", 4))
    return 0x1000000A5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"node", 4))
    return 0x1000000F5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"regexp", 6))
    return 0x1000000F6;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"date", 4))
    return 0x100000088;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"error", 5))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"map", 3))
    {
      return 0x1000000F7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"set", 3))
    {
      return 0x1000000F8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakmap", 7))
    {
      return 0x1000000F9;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakset", 7))
    {
      return 0x1000000FALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"iterator", 8))
    {
      return 0x1000000FBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"class", 5))
    {
      return 0x1000000FCLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"proxy", 5))
    {
      return 0x1000000FDLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakref", 7))
    {
      return 0x1000000FELL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::ObjectPreview::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A2;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"object", 6))
    return 0x1000000EFLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"function", 8))
    return 0x1000000F0;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"undefined", 9))
    return 0x1000000F1;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"string", 6))
    return 0x1000000A3;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"number", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"BOOLean", 7))
    {
      return 0x1000000F2;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"symbol", 6))
    {
      return 0x1000000F3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"bigint", 6))
    {
      return 0x1000000F4;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::ObjectPreview::Subtype>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000006ALL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"array", 5))
    return 0x1000000A4;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"null", 4))
    return 0x1000000A5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"node", 4))
    return 0x1000000F5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"regexp", 6))
    return 0x1000000F6;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"date", 4))
    return 0x100000088;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"error", 5))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"map", 3))
    {
      return 0x1000000F7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"set", 3))
    {
      return 0x1000000F8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakmap", 7))
    {
      return 0x1000000F9;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakset", 7))
    {
      return 0x1000000FALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"iterator", 8))
    {
      return 0x1000000FBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"class", 5))
    {
      return 0x1000000FCLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"proxy", 5))
    {
      return 0x1000000FDLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakref", 7))
    {
      return 0x1000000FELL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::PropertyPreview::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000A2;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"object", 6))
    return 0x1000000EFLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"function", 8))
    return 0x1000000F0;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"undefined", 9))
    return 0x1000000F1;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"string", 6))
    return 0x1000000A3;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"number", 6))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"BOOLean", 7))
    {
      return 0x1000000F2;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"symbol", 6))
    {
      return 0x1000000F3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"bigint", 6))
    {
      return 0x1000000F4;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"accessor", 8))
    {
      return 0x1000000FFLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Runtime::PropertyPreview::Subtype>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000006ALL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"array", 5))
    return 0x1000000A4;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"null", 4))
    return 0x1000000A5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"node", 4))
    return 0x1000000F5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"regexp", 6))
    return 0x1000000F6;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"date", 4))
    return 0x100000088;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"error", 5))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"map", 3))
    {
      return 0x1000000F7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"set", 3))
    {
      return 0x1000000F8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakmap", 7))
    {
      return 0x1000000F9;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakset", 7))
    {
      return 0x1000000FALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"iterator", 8))
    {
      return 0x1000000FBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"class", 5))
    {
      return 0x1000000FCLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"proxy", 5))
    {
      return 0x1000000FDLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"weakref", 7))
    {
      return 0x1000000FELL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::ScriptProfiler::EventType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000C5;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"API", 3))
    return 0x100000104;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Microtask", 9))
    return 0x100000105;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Other", 5))
    return 0;
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Target::TargetInfo::Type>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000085;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"page", 4))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"service-worker", 14))
    {
      return 0x1000000B5;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"worker", 6))
    {
      return 0x100000106;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Timeline::EventType>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Timeline::EventType>(WTF::String const&)::constantValues[v2];
    v4 = (unint64_t *)&(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 ? v6 - 1 : 0;
    if (WTF::equalInternal<unsigned char>(*a1, v5, v7))
      break;
    if (++v2 == 23)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Timeline::Instrument>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000011DLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ScriptProfiler", 14))
    return 0x10000011ELL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Timeline", 8))
    return 0x10000011FLL;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"CPU", 3))
    return 0x100000120;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Memory", 6))
    return 0x100000121;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Heap", 4))
    return 0x100000122;
  if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Animation", 9))
    return 0x100000123;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Screenshot", 10))
    return 0;
  return v2;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Debugger::FunctionDetails>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Debugger::CallFrame>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::RemoteObject>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::ObjectPreview>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::CollectionEntry>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::PropertyDescriptor>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::InternalPropertyDescriptor>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::Protocol::BindingTraits<Inspector::Protocol::Timeline::TimelineEvent>::runtimeCast@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = *(_DWORD **)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 4);
  if (v3 < 5 || v3 == 6)
  {
    v2 = 0;
LABEL_7:
    *a2 = v2;
    return result;
  }
  if (v3 == 5)
  {
    ++*v2;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

uint64_t Inspector::InspectorTarget::pause(uint64_t this)
{
  *(_BYTE *)(this + 24) = 1;
  return this;
}

uint64_t Inspector::InspectorTarget::resume(Inspector::InspectorTarget *this)
{
  uint64_t result;

  *((_BYTE *)this + 24) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t Inspector::InspectorTarget::setResumeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void Inspector::AnimationBackendDispatcher::~AnimationBackendDispatcher(Inspector::AnimationBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::ApplicationCacheBackendDispatcher::~ApplicationCacheBackendDispatcher(Inspector::ApplicationCacheBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::AuditBackendDispatcher::~AuditBackendDispatcher(Inspector::AuditBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::BrowserBackendDispatcher::~BrowserBackendDispatcher(Inspector::BrowserBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::CPUProfilerBackendDispatcher::~CPUProfilerBackendDispatcher(Inspector::CPUProfilerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::CSSBackendDispatcher::~CSSBackendDispatcher(Inspector::CSSBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::CanvasBackendDispatcher::~CanvasBackendDispatcher(Inspector::CanvasBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::ConsoleBackendDispatcher::~ConsoleBackendDispatcher(Inspector::ConsoleBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DOMBackendDispatcher::~DOMBackendDispatcher(Inspector::DOMBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DOMDebuggerBackendDispatcher::~DOMDebuggerBackendDispatcher(Inspector::DOMDebuggerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DOMStorageBackendDispatcher::~DOMStorageBackendDispatcher(Inspector::DOMStorageBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DatabaseBackendDispatcher::~DatabaseBackendDispatcher(Inspector::DatabaseBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DebuggerBackendDispatcher::~DebuggerBackendDispatcher(Inspector::DebuggerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::HeapBackendDispatcher::~HeapBackendDispatcher(Inspector::HeapBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::IndexedDBBackendDispatcher::~IndexedDBBackendDispatcher(Inspector::IndexedDBBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorBackendDispatcher::~InspectorBackendDispatcher(Inspector::InspectorBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::LayerTreeBackendDispatcher::~LayerTreeBackendDispatcher(Inspector::LayerTreeBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::MemoryBackendDispatcher::~MemoryBackendDispatcher(Inspector::MemoryBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::NetworkBackendDispatcher::~NetworkBackendDispatcher(Inspector::NetworkBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::PageBackendDispatcher::~PageBackendDispatcher(Inspector::PageBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::RuntimeBackendDispatcher::~RuntimeBackendDispatcher(Inspector::RuntimeBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::ScriptProfilerBackendDispatcher::~ScriptProfilerBackendDispatcher(Inspector::ScriptProfilerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::ServiceWorkerBackendDispatcher::~ServiceWorkerBackendDispatcher(Inspector::ServiceWorkerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::TargetBackendDispatcher::~TargetBackendDispatcher(Inspector::TargetBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::TimelineBackendDispatcher::~TimelineBackendDispatcher(Inspector::TimelineBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::WorkerBackendDispatcher::~WorkerBackendDispatcher(Inspector::WorkerBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::BackendDispatcher::CallbackBase::~CallbackBase(Inspector::BackendDispatcher::CallbackBase *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback::~ExecuteSQLCallback(Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback::~RequestDatabaseNamesCallback(Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseCallback::~RequestDatabaseCallback(Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback::~RequestDataCallback(Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback::~ClearObjectStoreCallback(Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback::~LoadResourceCallback(Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback::~AwaitPromiseCallback(Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback::~CallFunctionOnCallback(Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591468;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM9StyleableENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM9StyleableENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol16ApplicationCache17FrameWithManifestEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol16ApplicationCache17FrameWithManifestEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol16ApplicationCache16ApplicationCacheENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol16ApplicationCache16ApplicationCacheENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS_8optionalIbEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS_8optionalIbEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6RefPtrINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS9RuleMatchEEENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEENSA_INSC_INSF_15PseudoIdMatchesEEENSI_ISO_EENSK_ISO_EEEENSA_INSC_INSF_19InheritedStyleEntryEEENSI_IST_EENSK_IST_EEEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS10_1EJSX_SY_EEEEEEDcS12_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v10;
  WTF *v11;

  v9 = (WTF *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v10;
  }
  v11 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete(v11, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v11;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6RefPtrINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS9RuleMatchEEENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEENSA_INSC_INSF_15PseudoIdMatchesEEENSI_ISO_EENSK_ISO_EEEENSA_INSC_INSF_19InheritedStyleEntryEEENSI_IST_EENSK_IST_EEEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS10_1EJSX_SY_EEEEEEDcS12_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6RefPtrIN9Inspector8Protocol3CSS8CSSStyleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEESJ_EEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v10;

  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v10;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6RefPtrIN9Inspector8Protocol3CSS8CSSStyleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEESJ_EEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS24CSSComputedStylePropertyEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS24CSSComputedStylePropertyEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS19CSSStyleSheetHeaderEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS19CSSStyleSheetHeaderEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS17CSSStyleSheetBodyENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS17CSSStyleSheetBodyENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS8CSSStyleENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS8CSSStyleENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS7CSSRuleENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS7CSSRuleENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS8GroupingENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3CSS8GroupingENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS15CSSPropertyInfoEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3CSS15CSSPropertyInfoEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfINS8_6StringEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEESC_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSI_SC_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfINS8_6StringEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEESC_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSI_SC_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJiN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJiS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIiEENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIiEENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Console7ChannelEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Console7ChannelEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM4NodeENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM4NodeENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIiEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3DOM11DataBindingEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3DOM11DataBindingEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3DOM13EventListenerEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol3DOM13EventListenerEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM23AccessibilityPropertiesENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM23AccessibilityPropertiesENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringEiEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringEiEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM10MediaStatsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol3DOM10MediaStatsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfINSB_INS8_6StringEEEEENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEESC_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSJ_SC_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfINSB_INS8_6StringEEEEENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEESC_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSJ_SC_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_3RefINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol8Debugger8LocationEEENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSO_SA_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_3RefINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol8Debugger8LocationEEENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSO_SA_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_3RefIN9Inspector8Protocol8Debugger8LocationENS9_12RawPtrTraitsISF_EENS9_21DefaultRefDerefTraitsISF_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSL_SA_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_3RefIN9Inspector8Protocol8Debugger8LocationENS9_12RawPtrTraitsISF_EENS9_21DefaultRefDerefTraitsISF_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSL_SA_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol12GenericTypes11SearchMatchEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol12GenericTypes11SearchMatchEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol8Debugger15FunctionDetailsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol8Debugger15FunctionDetailsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol8Debugger8LocationEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol8Debugger8LocationEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS_8optionalIbEENSK_IiEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefIN9Inspector8Protocol7Runtime12RemoteObjectENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS_8optionalIbEENSK_IiEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJdN3WTF6StringEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJdN3WTF6StringEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_6RefPtrIN9Inspector8Protocol8Debugger15FunctionDetailsENS9_12RawPtrTraitsISF_EENS9_21DefaultRefDerefTraitsISF_EEEENSB_INSD_7Runtime13ObjectPreviewENSG_ISM_EENSI_ISM_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSQ_SA_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (WTF *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v10;
  }
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringENS9_6RefPtrIN9Inspector8Protocol8Debugger15FunctionDetailsENS9_12RawPtrTraitsISF_EENS9_21DefaultRefDerefTraitsISF_EEEENSB_INSD_7Runtime13ObjectPreviewENSG_ISM_EENSI_ISM_EEEEEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSQ_SA_EEEEEEDcSU_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol9LayerTree5LayerEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol9LayerTree5LayerEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol9LayerTree18CompositingReasonsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol9LayerTree18CompositingReasonsENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringEbEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF6StringEbEEESA_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_SA_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol4Page6CookieEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol4Page6CookieEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol4Page17FrameResourceTreeENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol4Page17FrameResourceTreeENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol4Page12SearchResultEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol4Page12SearchResultEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN9Inspector8Protocol7Runtime15SyntaxErrorTypeEN3WTF6StringENSD_6RefPtrINSB_10ErrorRangeENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSM_SE_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN9Inspector8Protocol7Runtime15SyntaxErrorTypeEN3WTF6StringENSD_6RefPtrINSB_10ErrorRangeENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSM_SE_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol7Runtime13ObjectPreviewENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol7Runtime13ObjectPreviewENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime18PropertyDescriptorEEENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEENS9_6RefPtrINSC_INSF_26InternalPropertyDescriptorEEENSI_ISP_EENSK_ISP_EEEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJST_SU_EEEEEEDcSY_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v10;

  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v10;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJN3WTF3RefINS9_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime18PropertyDescriptorEEENS9_12RawPtrTraitsISH_EENS9_21DefaultRefDerefTraitsISH_EEEENS9_6RefPtrINSC_INSF_26InternalPropertyDescriptorEEENSI_ISP_EENSK_ISP_EEEEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJST_SU_EEEEEEDcSY_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime15CollectionEntryEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime15CollectionEntryEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime15TypeDescriptionEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime15TypeDescriptionEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime10BasicBlockEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol7Runtime10BasicBlockEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol13ServiceWorker13ConfigurationENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;

  v8 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN9Inspector8Protocol13ServiceWorker13ConfigurationENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void Inspector::BackendDispatcher::~BackendDispatcher(Inspector::BackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9)
  {
    v26 = 16 * v9;
    v27 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v23 + 24 != v24 && v24 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        v37 = v23;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
        v23 = v37;
      }
      WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
}

void WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WTF **v17;
  int i;
  uint64_t v19;
  WTF **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF **v33;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_DWORD *)*a2 + 4);
  if (v15 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v16 = v15 >> 8;
  v17 = 0;
  for (i = 1; ; ++i)
  {
    v19 = v16 & v14;
    v20 = (WTF **)(v13 + 16 * v19);
    v21 = *v20;
    if (!*v20)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v20 = v17;
      }
      v22 = *a2;
      if (*a2)
        *(_DWORD *)v22 += 2;
      *v20 = v22;
      v20[1] = *(WTF **)a3;
      v23 = *a1;
      if (*a1)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *a1;
      if (*a1)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_18;
      }
      else if (3 * v28 > 4 * v27)
      {
LABEL_18:
        *(_QWORD *)a9 = v20;
        *(_QWORD *)(a9 + 8) = v25 + 16 * v28;
        *(_BYTE *)(a9 + 16) = 1;
        return;
      }
      v20 = (WTF **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v20, (uint64_t)a3, a4, a5, a6, a7, a8);
      v25 = *a1;
      if (*a1)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_18;
    }
    v33 = v17;
    if (v21 == (WTF *)-1)
    {
      v17 = (WTF **)(v13 + 16 * v19);
      goto LABEL_29;
    }
    v32 = v19;
    v29 = WTF::equal(v21, *a2, a3);
    LODWORD(v19) = v32;
    v17 = v33;
    if (v29)
      break;
LABEL_29:
    v16 = i + v19;
  }
  v30 = *a1;
  if (*a1)
    v31 = *(unsigned int *)(v30 - 4);
  else
    v31 = 0;
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v30 + 16 * v31;
  *(_BYTE *)(a9 + 16) = 0;
  *(_QWORD *)(v13 + 16 * v32 + 8) = *(_QWORD *)a3;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (WTF::StringImpl **)v11;
    do
    {
      if (*v25 != (WTF::StringImpl *)-1)
      {
        v39 = v24;
        v26 = v22;
        v27 = v11;
        if (*v25)
        {
          v29 = v25;
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v25);
          v31 = v30;
          JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition(v29, v32, v33, v34, v35, v36, v37, v38);
          v25 = v29;
          if (v29 == (WTF::StringImpl **)a3)
            v22 = v31;
          else
            v22 = v26;
          v11 = v27;
        }
        else
        {
          v28 = v25;
          JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition(v25, v15, v16, v17, v18, v19, v20, v21);
          v25 = v28;
          v22 = v26;
        }
        v24 = v39;
      }
      v25 += 2;
      --v24;
    }
    while (v24);
    goto LABEL_17;
  }
  result = 0;
  if (v11)
  {
LABEL_17:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  __n128 *v9;
  __n128 result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = *((_DWORD *)*a2 + 4);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 16 * v8));
  v9 = (__n128 *)(a1 + 16 * v8);
  v9->n128_u64[0] = 0;
  result = *(__n128 *)a2;
  *a2 = 0;
  *v9 = result;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, int **a7@<X8>)
{
  int v11;
  int *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  unsigned __int128 *v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  char v21;
  int *v22;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v22);
        v13 = v22;
        if (v22)
        {
          *v22 = 2;
          v13[1] = v11;
          *((_BYTE *)v13 + 20) = a3;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          v14 = (char *)v13 + 21;
          if (a4)
          {
            v15 = *(_BYTE **)(a4 + 8);
            v16 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v16 == 1)
              {
                *v14 = *v15;
              }
              else if ((_DWORD)v16)
              {
                memcpy((char *)v13 + 21, v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v18 = (unsigned __int128 *)((char *)v13 + 21);
              }
              else
              {
                v18 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v19 = (unsigned __int128 *)((char *)v13 + 21);
                do
                {
                  v20 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v19++ = v20;
                }
                while (v19 != v18);
              }
              while (v18 != (unsigned __int128 *)&v14[v16])
              {
                v21 = *v15;
                v15 += 2;
                *(_BYTE *)v18 = v21;
                v18 = (unsigned __int128 *)((char *)v18 + 1);
              }
            }
            v17 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v17 = 0;
          }
          result = (uint64_t)&v14[v17];
          if (a6 == 1)
          {
            *(_BYTE *)result = a5->i8[0];
          }
          else if (a6)
          {
            result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_20;
      }
LABEL_22:
      v13 = 0;
      goto LABEL_20;
    }
LABEL_21:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_21;
  if (result > 0x7FFFFFEF)
    goto LABEL_22;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v22);
  v13 = v22;
  if (v22)
  {
    *v22 = 2;
    v13[1] = v11;
    *((_WORD *)v13 + 10) = a3;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)v13 + 22, a4, a5, a6);
  }
LABEL_20:
  *a7 = v13;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v9, __dst);
  v7 = v9;
  if (v9)
    v7 = *(unsigned int *)(v9 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v7], a3, a4);
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16x2_t v15;
  int8x16x2_t v16;
  int8x16x2_t v17;

  v2 = *result;
  if (*result)
  {
    v3 = *(int8x16_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v5 = &__dst[2 * v4];
      if (v4 >= 0x40)
      {
        v6 = &__dst[2 * (v4 & 0xFFFFFFC0)];
        v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          v8 = v3[1];
          v16.val[0] = v3[2];
          v9 = v3[3];
          v3 += 4;
          v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          v11 = __dst;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          v12 = __dst + 64;
          vst2q_s8(v12, v16);
          v13 = __dst + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          __dst += 128;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v14 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)__dst = v14;
        __dst += 2;
      }
    }
    else if ((_DWORD)v4 == 1)
    {
      *(_WORD *)__dst = v3->i16[0];
    }
    else if ((_DWORD)v4)
    {
      return (uint64_t *)memcpy(__dst, v3, 2 * v4);
    }
  }
  return result;
}

_BYTE *WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, int8x16_t *a9, uint64_t a10)
{
  int **v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int *v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  int8x16_t *v36;
  uint64_t v37;
  _BYTE *v38;
  size_t i;
  _BYTE *v40;
  _BYTE *v41;
  size_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int16 v67;
  char *v68;
  char *v69;
  __int128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int16 v77;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  char v82;
  int **v83;
  size_t __n;
  _DWORD *v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;
  int8x16x2_t v92;
  int8x16x2_t v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;

  v14 = (int **)result;
  if (a3)
  {
    v15 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_100;
  }
  else
  {
    v15 = 0;
  }
  if (a6)
  {
    v16 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19869895CLL);
    }
  }
  else
  {
    v16 = 0;
  }
  if (a8)
  {
    __n = a8 - 1;
    if ((unint64_t)(a8 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19869898CLL);
    }
  }
  else
  {
    __n = 0;
  }
  if (a10)
  {
    v17 = a10 - 1;
    if (!((unint64_t)(a10 - 1) >> 31))
      goto LABEL_9;
LABEL_100:
    __break(0xC471u);
    JUMPOUT(0x198698930);
  }
  v17 = 0;
LABEL_9:
  if (a4)
    v18 = *(_DWORD *)(a4 + 4);
  else
    v18 = 0;
  v19 = __n + v17;
  if (__OFADD__((_DWORD)__n, (_DWORD)v17))
    goto LABEL_80;
  v20 = 0;
  v21 = __OFADD__((_DWORD)v16, v19);
  v22 = v16 + v19;
  if (v21 || v18 < 0)
    goto LABEL_79;
  v21 = __OFADD__(v18, v22);
  v23 = v18 + v22;
  if (v21)
    goto LABEL_80;
  v24 = (v15 + v23);
  if (__OFADD__((_DWORD)v15, v23))
    goto LABEL_80;
  v83 = (int **)result;
  if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if ((_DWORD)v24)
    {
      if (v24 <= 0x7FFFFFEF)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20), &v85);
        v20 = v85;
        if (v85)
        {
          v25 = (char *)(v85 + 5);
          *v85 = 2;
          v20[1] = v24;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 0;
          v26 = (char *)v20 + 2 * v15 + 20;
          if ((v15 & 0x7FFFFFC0) != 0)
          {
            v27 = &v25[2 * (v15 & 0x7FFFFFC0)];
            v28 = 0uLL;
            do
            {
              v86.val[0] = *a2;
              v29 = a2[1];
              v90.val[0] = a2[2];
              v30 = a2[3];
              a2 += 4;
              v31 = v30;
              v90.val[1] = 0uLL;
              v94.val[0] = v29;
              v86.val[1] = 0uLL;
              v32 = v25;
              vst2q_s8(v32, v86);
              v32 += 32;
              v94.val[1] = 0uLL;
              vst2q_s8(v32, v94);
              v33 = v25 + 64;
              vst2q_s8(v33, v90);
              v34 = v25 + 96;
              vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
              v25 += 128;
            }
            while (v25 != v27);
            v25 = v27;
          }
          while (v25 != v26)
          {
            v35 = a2->u8[0];
            a2 = (int8x16_t *)((char *)a2 + 1);
            *(_WORD *)v25 = v35;
            v25 += 2;
          }
          v36 = *(int8x16_t **)(a4 + 8);
          v37 = *(unsigned int *)(a4 + 4);
          if ((*(_BYTE *)(a4 + 16) & 4) != 0)
          {
            v46 = &v26[2 * v37];
            if (v37 >= 0x40)
            {
              v47 = &v26[2 * (v37 & 0xFFFFFFC0)];
              v48 = 0uLL;
              v49 = (uint64_t)v20 + 2 * v15 + 20;
              do
              {
                v87.val[0] = *v36;
                v50 = v36[1];
                v91.val[0] = v36[2];
                v51 = v36[3];
                v36 += 4;
                v52 = v51;
                v91.val[1] = 0uLL;
                v95.val[0] = v50;
                v87.val[1] = 0uLL;
                v53 = (char *)v49;
                vst2q_s8(v53, v87);
                v53 += 32;
                v95.val[1] = 0uLL;
                vst2q_s8(v53, v95);
                v54 = (char *)(v49 + 64);
                vst2q_s8(v54, v91);
                v55 = (char *)(v49 + 96);
                vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
                v49 += 128;
              }
              while ((char *)v49 != v47);
            }
            else
            {
              v47 = (char *)v20 + 2 * v15 + 20;
            }
            while (v47 != v46)
            {
              v56 = v36->u8[0];
              v36 = (int8x16_t *)((char *)v36 + 1);
              *(_WORD *)v47 = v56;
              v47 += 2;
            }
          }
          else if ((_DWORD)v37 == 1)
          {
            *(_WORD *)v26 = v36->i16[0];
          }
          else if ((_DWORD)v37)
          {
            memcpy((char *)v20 + 2 * v15 + 20, v36, 2 * v37);
          }
          v57 = &v26[2 * *(unsigned int *)(a4 + 4)];
          v58 = &v57[2 * v16];
          if ((v16 & 0x7FFFFFC0) != 0)
          {
            v59 = &v57[2 * (v16 & 0x7FFFFFC0)];
            v60 = 0uLL;
            v14 = v83;
            do
            {
              v88.val[0] = *a5;
              v61 = a5[1];
              v92.val[0] = a5[2];
              v62 = a5[3];
              a5 += 4;
              v63 = v62;
              v92.val[1] = 0uLL;
              v96.val[0] = v61;
              v88.val[1] = 0uLL;
              v64 = v57;
              vst2q_s8(v64, v88);
              v64 += 32;
              v96.val[1] = 0uLL;
              vst2q_s8(v64, v96);
              v65 = v57 + 64;
              vst2q_s8(v65, v92);
              v66 = v57 + 96;
              vst2q_s8(v66, *(int8x16x2_t *)(&v60 - 1));
              v57 += 128;
            }
            while (v57 != v59);
            v57 = v59;
          }
          else
          {
            v14 = v83;
          }
          while (v57 != v58)
          {
            v67 = a5->u8[0];
            a5 = (int8x16_t *)((char *)a5 + 1);
            *(_WORD *)v57 = v67;
            v57 += 2;
          }
          v68 = &v58[2 * __n];
          if ((__n & 0x7FFFFFC0) != 0)
          {
            v69 = &v58[2 * (__n & 0x7FFFFFC0)];
            v70 = 0uLL;
            do
            {
              v89.val[0] = *a7;
              v71 = a7[1];
              v93.val[0] = a7[2];
              v72 = a7[3];
              a7 += 4;
              v73 = v72;
              v93.val[1] = 0uLL;
              v97.val[0] = v71;
              v89.val[1] = 0uLL;
              v74 = v58;
              vst2q_s8(v74, v89);
              v74 += 32;
              v97.val[1] = 0uLL;
              vst2q_s8(v74, v97);
              v75 = v58 + 64;
              vst2q_s8(v75, v93);
              v76 = v58 + 96;
              vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
              v58 += 128;
            }
            while (v58 != v69);
            v58 = v69;
          }
          while (v58 != v68)
          {
            v77 = a7->u8[0];
            a7 = (int8x16_t *)((char *)a7 + 1);
            *(_WORD *)v58 = v77;
            v58 += 2;
          }
          result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v68, a9, v17);
          goto LABEL_79;
        }
LABEL_55:
        v14 = v83;
        goto LABEL_79;
      }
LABEL_80:
      v20 = 0;
      goto LABEL_79;
    }
LABEL_83:
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_79;
  }
  if (!(_DWORD)v24)
    goto LABEL_83;
  if ((v24 & 0x80000000) != 0)
    goto LABEL_80;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v24 + 20), &v85);
  v20 = v85;
  if (!v85)
    goto LABEL_55;
  v38 = v85 + 5;
  *v85 = 2;
  v20[1] = v24;
  *((_QWORD *)v20 + 1) = v20 + 5;
  v20[4] = 4;
  if ((_DWORD)v15 == 1)
  {
    *v38 = a2->i8[0];
    i = v17;
  }
  else
  {
    i = v17;
    if ((_DWORD)v15)
      memcpy(v20 + 5, a2, v15);
  }
  v40 = &v38[v15];
  if (a4)
  {
    v41 = *(_BYTE **)(a4 + 8);
    v42 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v42 == 1)
      {
        *v40 = *v41;
      }
      else if ((_DWORD)v42)
      {
        memcpy(v40, v41, v42);
      }
    }
    else
    {
      v78 = (unsigned __int128 *)&v40[v42];
      if (v42 < 0x10)
      {
        v79 = (unsigned __int128 *)v40;
      }
      else
      {
        v79 = (unsigned __int128 *)&v40[v42 & 0xFFFFFFF0];
        v80 = (unsigned __int128 *)v40;
        do
        {
          v81 = (unsigned __int128)vld2q_s8(v41);
          v41 += 32;
          *v80++ = v81;
        }
        while (v80 != v79);
      }
      for (i = v17; v79 != v78; v79 = (unsigned __int128 *)((char *)v79 + 1))
      {
        v82 = *v41;
        v41 += 2;
        *(_BYTE *)v79 = v82;
      }
    }
    v43 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v43 = 0;
  }
  v44 = &v40[v43];
  if ((_DWORD)v16 == 1)
  {
    *v44 = a5->i8[0];
  }
  else if ((_DWORD)v16)
  {
    memcpy(v44, a5, v16);
  }
  v45 = &v44[v16];
  if ((_DWORD)__n == 1)
  {
    *v45 = a7->i8[0];
  }
  else if ((_DWORD)__n)
  {
    memcpy(v45, a7, __n);
  }
  result = &v45[__n];
  if ((_DWORD)i == 1)
  {
    *result = a9->i8[0];
    goto LABEL_55;
  }
  v14 = v83;
  if ((_DWORD)i)
    result = memcpy(result, a9, i);
LABEL_79:
  *v14 = v20;
  return result;
}

void std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x1986989D4);
}

void std::__function::__func<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const>,std::optional<BOOL> ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const>,std::optional<BOOL> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E3593AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const>,std::optional<BOOL> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E3593AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<BOOL> (WTF::JSONImpl::Value::*)(void)const>,std::optional<BOOL> ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void std::__function::__func<std::optional<int> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<int> (WTF::JSONImpl::Value::*)(void)const>,std::optional<int> ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<std::optional<int> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<int> (WTF::JSONImpl::Value::*)(void)const>,std::optional<int> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3593B00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<int> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<int> (WTF::JSONImpl::Value::*)(void)const>,std::optional<int> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3593B00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<int> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<int> (WTF::JSONImpl::Value::*)(void)const>,std::optional<int> ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void std::__function::__func<std::optional<double> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<double> (WTF::JSONImpl::Value::*)(void)const>,std::optional<double> ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<std::optional<double> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<double> (WTF::JSONImpl::Value::*)(void)const>,std::optional<double> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3593B48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<double> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<double> (WTF::JSONImpl::Value::*)(void)const>,std::optional<double> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3593B48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<double> (WTF::JSONImpl::Value::*)(void)const,std::allocator<std::optional<double> (WTF::JSONImpl::Value::*)(void)const>,std::optional<double> ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void std::__function::__func<WTF::String (WTF::JSONImpl::Value::*)(void)const,std::allocator<WTF::String (WTF::JSONImpl::Value::*)(void)const>,WTF::String ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<WTF::String (WTF::JSONImpl::Value::*)(void)const,std::allocator<WTF::String (WTF::JSONImpl::Value::*)(void)const>,WTF::String ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3593B90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WTF::String (WTF::JSONImpl::Value::*)(void)const,std::allocator<WTF::String (WTF::JSONImpl::Value::*)(void)const>,WTF::String ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3593B90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WTF::String (WTF::JSONImpl::Value::*)(void)const,std::allocator<WTF::String (WTF::JSONImpl::Value::*)(void)const>,WTF::String ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3593BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3593BD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>> ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void std::__function::__func<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0,std::allocator<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0>,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> ()(WTF::JSONImpl::Value &)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

_QWORD *std::__function::__func<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0,std::allocator<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0>,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> ()(WTF::JSONImpl::Value &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3593C20;
  return result;
}

void std::__function::__func<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0,std::allocator<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0>,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> ()(WTF::JSONImpl::Value &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3593C20;
}

uint64_t std::__function::__func<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0,std::allocator<Inspector::BackendDispatcher::getObject(WTF::JSONImpl::Object *,WTF::String const&,BOOL)::$_0>,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> ()(WTF::JSONImpl::Value &)>::operator()@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  uint64_t result;

  v2 = a1[1];
  if (v2 < 5 || v2 == 6)
  {
    a1 = 0;
LABEL_7:
    *a2 = a1;
    return result;
  }
  if (v2 == 5)
  {
    ++*a1;
    goto LABEL_7;
  }
  result = 490;
  __break(0xC471u);
  return result;
}

void std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> ()(WTF::JSONImpl::Value&)>::~__func()
{
  JUMPOUT(0x19AEBAEF0);
}

__n128 std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3593C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> ()(WTF::JSONImpl::Value&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3593C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void),std::allocator<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> (WTF::JSONImpl::Value::*)(void)>,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> ()(WTF::JSONImpl::Value&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, int **a8@<X8>)
{
  int v13;
  int *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  char v25;
  _DWORD *v26;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v26);
        v15 = v26;
        if (v26)
        {
          v16 = v26 + 5;
          *v26 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (a4 == 1)
          {
            *v16 = a3->i8[0];
          }
          else if (a4)
          {
            memcpy(v15 + 5, a3, a4);
          }
          v17 = &v16[a4];
          if (a5)
          {
            v18 = *(_BYTE **)(a5 + 8);
            v19 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v19 == 1)
              {
                *v17 = *v18;
              }
              else if ((_DWORD)v19)
              {
                memcpy(v17, v18, v19);
              }
            }
            else
            {
              if (v19 < 0x10)
              {
                v22 = (unsigned __int128 *)v17;
              }
              else
              {
                v22 = (unsigned __int128 *)&v17[v19 & 0xFFFFFFF0];
                v23 = (unsigned __int128 *)v17;
                do
                {
                  v24 = (unsigned __int128)vld2q_s8(v18);
                  v18 += 32;
                  *v23++ = v24;
                }
                while (v23 != v22);
              }
              while (v22 != (unsigned __int128 *)&v17[v19])
              {
                v25 = *v18;
                v18 += 2;
                *(_BYTE *)v22 = v25;
                v22 = (unsigned __int128 *)((char *)v22 + 1);
              }
            }
            v20 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v20 = 0;
          }
          result = (uint64_t)&v17[v20];
          if (a7 == 1)
          {
            *(_BYTE *)result = a6->i8[0];
          }
          else if (a7)
          {
            result = (uint64_t)memcpy((void *)result, a6, a7);
          }
        }
        goto LABEL_14;
      }
LABEL_27:
      v15 = 0;
      goto LABEL_14;
    }
LABEL_26:
    v15 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_26;
  if (result > 0x7FFFFFEF)
    goto LABEL_27;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v26);
  v15 = v26;
  if (v26)
  {
    v21 = (char *)(v26 + 5);
    *v26 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v21, a3, a4, a5, a6, a7);
  }
LABEL_14:
  *a8 = v15;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16x2_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;

  v6 = a1;
  v7 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &v6[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v18.val[0] = *a2;
      v10 = a2[1];
      v19.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v19.val[1] = 0uLL;
      v20.val[0] = v10;
      v18.val[1] = 0uLL;
      v13 = v6;
      vst2q_s8(v13, v18);
      v13 += 32;
      v20.val[1] = 0uLL;
      vst2q_s8(v13, v20);
      v14 = v6 + 64;
      vst2q_s8(v14, v19);
      v15 = v6 + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      v6 += 128;
    }
    while (v6 != v8);
    v6 = v8;
  }
  while (v6 != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v6 = v16;
    v6 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, a4, a5, a6);
}

void Inspector::JSGlobalObjectConsoleClient::messageWithTypeAndLevel(uint64_t a1, uint64_t a2, uint64_t a3, JSC::VM **a4, Inspector::ScriptArguments **a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  Inspector::ConsoleMessage *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Inspector::ConsoleMessage *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  uint64_t v31;
  Inspector::ConsoleMessage *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Inspector::ConsoleMessage *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Inspector::InspectorDebuggerAgent *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  Inspector::ConsoleMessage *v67;

  if (Inspector::sLogToSystemConsole)
  {
    v14 = *a5;
    *(_DWORD *)v14 = *(_DWORD *)*a5 + 1;
    v67 = v14;
    JSC::ConsoleClient::printConsoleMessageWithArguments((WTF::AtomStringImpl *)3, a2, a3, a4, (uint64_t)&v67, a6, a7, a8, a9);
    v22 = v67;
    v67 = 0;
    if (v22)
      WTF::RefCounted<Inspector::ScriptArguments>::deref(v22, v15, v16, v17, v18, v19, v20, v21);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
  {
    v66 = 0;
    Inspector::ScriptArguments::getFirstArgumentAsString(*a5, &v66, v30, v24, v25, v26, v27, v28, v29);
    v31 = *(_QWORD *)(a1 + 16);
    v32 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
    if (*((_BYTE *)Inspector::ConsoleMessage::ConsoleMessage(v32, 3, a2, a3, &v66, (uint64_t *)a5, a4, 0, 0.0) + 1) == 8)
      Inspector::InspectorConsoleAgent::clearMessages(v31, (WTF::AtomStringImpl *)0x54, (uint64_t)v33, v34, v35, v36, v37, v38);
    v67 = v32;
    Inspector::InspectorConsoleAgent::addConsoleMessage(v31, (WTF::AtomStringImpl *)&v67, v33, v34, v35, v36, v37, v38, v39);
    v47 = v67;
    v67 = 0;
    if (v47)
    {
      Inspector::ConsoleMessage::~ConsoleMessage(v47, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    if ((_DWORD)a2 == 9)
    {
      v56 = *(Inspector::InspectorDebuggerAgent **)(a1 + 24);
      if (v56)
        Inspector::InspectorDebuggerAgent::handleConsoleAssert(v56, (const WTF::String *)&v66);
    }
    v57 = v66;
    v66 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
}

void Inspector::JSGlobalObjectConsoleClient::count(Inspector::JSGlobalObjectConsoleClient *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
    Inspector::InspectorConsoleAgent::count(*((Inspector::InspectorConsoleAgent **)this + 2), a2, a3, v7, v8, v9, v10, v11);
}

void Inspector::JSGlobalObjectConsoleClient::countReset(Inspector::JSGlobalObjectConsoleClient *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
    Inspector::InspectorConsoleAgent::countReset(*((Inspector::InspectorConsoleAgent **)this + 2), a2, a3);
}

void Inspector::JSGlobalObjectConsoleClient::profile(Inspector::JSGlobalObjectConsoleClient *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  __int16 v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *tv_sec;
  uint64_t v20;
  WTF **v21;
  uint64_t v22;
  WTF *v23;
  BOOL v24;
  _BOOL4 v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __darwin_time_t v40;
  int *v41;
  const WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  Inspector::ConsoleMessage *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  unsigned int v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const WTF::String *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  int *v81;
  timespec __tp;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 96))
    return;
  if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4) || (v20 = *((unsigned int *)this + 13), !(_DWORD)v20))
  {
LABEL_4:
    v4 = (uint64_t *)((char *)this + 40);
    v5 = *((unsigned int *)this + 13);
    if ((_DWORD)v5 == *((_DWORD *)this + 12))
    {
      v26 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)a3);
      v5 = *((unsigned int *)this + 13);
      v27 = *((_QWORD *)this + 5);
      v28 = *v26;
      if (*v26)
        *v28 += 2;
      *(_QWORD *)(v27 + 8 * v5) = v28;
    }
    else
    {
      v6 = *v4;
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      *(_QWORD *)(v6 + 8 * v5) = v7;
    }
    *((_DWORD *)this + 13) = v5 + 1;
    v8 = *((_QWORD *)this + 3);
    if (v8)
    {
      v9 = *(_BYTE **)(v8 + 56);
      *((_BYTE *)this + 56) = (v9[48] & 0x40) != 0;
      v10 = *((_WORD *)v9 + 24);
      if ((v10 & 0x40) != 0)
      {
        *((_WORD *)v9 + 24) = v10 & 0xFFBF;
        (*(void (**)(_BYTE *, JSC::JSGlobalObject *))(*(_QWORD *)v9 + 40))(v9, a2);
      }
    }
    v11 = *((_QWORD *)this + 4);
    if (!v11)
      return;
    LOWORD(v81) = 257;
    Inspector::InspectorScriptProfilerAgent::startTracking(v11, &v81, &__tp);
    if (!LOBYTE(__tp.tv_nsec))
      return;
    tv_sec = (WTF::StringImpl *)__tp.tv_sec;
    __tp.tv_sec = 0;
    if (!tv_sec)
      return;
LABEL_14:
    if (*(_DWORD *)tv_sec == 2)
    {
      WTF::StringImpl::~StringImpl(tv_sec, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)tv_sec -= 2;
    }
    return;
  }
  v21 = (WTF **)*((_QWORD *)this + 5);
  v22 = 8 * v20;
  v78 = a3;
  while (1)
  {
    v23 = *v21;
    a2 = *(JSC::JSGlobalObject **)a3;
    if (*v21 == *(WTF **)a3)
      break;
    if (v23)
      v24 = a2 == 0;
    else
      v24 = 1;
    if (!v24)
    {
      v79 = v22;
      v25 = WTF::equal(*v21, a2, a3);
      a3 = v78;
      v22 = v79;
      if (v25)
      {
        v23 = *(WTF **)v78;
        break;
      }
    }
    ++v21;
    v22 -= 8;
    if (!v22)
      goto LABEL_4;
  }
  if (!v23 || (v58 = *((_DWORD *)v23 + 1)) == 0)
  {
    v37 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v37 = 0x1E00000002;
    *(_QWORD *)(v37 + 8) = "Unnamed Profile already exists";
    *(_DWORD *)(v37 + 16) = 4;
    v81 = (int *)v37;
    goto LABEL_34;
  }
  if (v58 > 0x2710)
  {
    if ((*((_DWORD *)v23 + 4) & 4) != 0)
      v59 = 0x100002710;
    else
      v59 = 10000;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v23 + 4) & 4u) >> 2, *((_BYTE **)v23 + 1), v59, (int8x16_t *)"...", 3u, (int **)&v80);
    v23 = v80;
    if (!v80)
    {
LABEL_58:
      __break(0xC471u);
      JUMPOUT(0x1986995B8);
    }
    v58 = *((_DWORD *)v80 + 1);
    if ((v58 & 0x80000000) != 0)
    {
LABEL_57:
      v81 = 0;
      goto LABEL_58;
    }
  }
  else
  {
    *(_DWORD *)v23 += 2;
    v80 = v23;
  }
  v60 = __OFADD__(v58, 16);
  v61 = v58 + 16;
  if (v60 || __OFADD__(v61, 9))
    goto LABEL_57;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v61 + 9, (*((_DWORD *)v23 + 4) >> 2) & 1, (int8x16_t *)"Profile \"", 9u, (uint64_t)v23, (int8x16_t *)"\" already exists", 0x10u, &v81);
  if (!v81)
    goto LABEL_58;
  v69 = v80;
  v80 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
LABEL_34:
  v38 = *((_QWORD *)this + 2);
  v39 = WTF::fastMalloc((WTF *)0x60);
  v40 = v39;
  *(_WORD *)v39 = 2819;
  *(_BYTE *)(v39 + 2) = 1;
  v41 = v81;
  if (v81)
    *v81 += 2;
  *(_QWORD *)(v39 + 8) = v41;
  *(_OWORD *)(v39 + 16) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_QWORD *)(v39 + 64) = 0;
  *(_DWORD *)(v39 + 72) = 1;
  *(_QWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = 0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)v48.i64 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  *(_QWORD *)(v40 + 88) = v48.i64[0];
  if (*(_BYTE *)(v40 + 1) == 8)
    Inspector::InspectorConsoleAgent::clearMessages(v38, (WTF::AtomStringImpl *)0x54, (uint64_t)v42, v43, v44, v45, v46, v47);
  __tp.tv_sec = v40;
  Inspector::InspectorConsoleAgent::addConsoleMessage(v38, (WTF::AtomStringImpl *)&__tp, v42, v43, v44, v45, v46, v47, v48);
  v49 = (Inspector::ConsoleMessage *)__tp.tv_sec;
  __tp.tv_sec = 0;
  if (v49)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v49, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  tv_sec = (WTF::StringImpl *)v81;
  v81 = 0;
  if (tv_sec)
    goto LABEL_14;
}

void Inspector::JSGlobalObjectConsoleClient::profileEnd(Inspector::JSGlobalObjectConsoleClient *this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  BOOL v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __darwin_time_t v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Inspector::ConsoleMessage *tv_sec;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  const void *v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  __int16 v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WTF::StringImpl *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  timespec __tp;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 96))
    return;
  v9 = *((unsigned int *)this + 13);
  if (!(_DWORD)v9)
  {
LABEL_12:
    v15 = *a3;
    if (*a3)
    {
      v71 = *((_DWORD *)v15 + 1);
      if (v71)
      {
        *(_DWORD *)v15 += 2;
        if (v71 < 0 || (v72 = v15, __OFADD__(v71, 16)) || __OFADD__(v71 + 16, 9))
        {
          v92 = 0;
        }
        else
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v71 + 25), (*((_DWORD *)v15 + 4) >> 2) & 1, (int8x16_t *)"Profile \"", 9u, (uint64_t)v15, (int8x16_t *)"\" does not exist", 0x10u, (int **)&v92);
          if (v92)
          {
            if (*(_DWORD *)v72 == 2)
            {
              WTF::StringImpl::~StringImpl(v72, v73, v74, v75, v76, v77, v78, v79);
              WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
            }
            else
            {
              *(_DWORD *)v72 -= 2;
            }
            goto LABEL_14;
          }
        }
        __break(0xC471u);
LABEL_46:
        JUMPOUT(0x198699918);
      }
    }
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v16 = 0x1100000002;
    *(_QWORD *)(v16 + 8) = "No profiles exist";
    *(_DWORD *)(v16 + 16) = 4;
    v92 = (WTF::StringImpl *)v16;
LABEL_14:
    v17 = *((_QWORD *)this + 2);
    v18 = WTF::fastMalloc((WTF *)0x60);
    v19 = v18;
    *(_WORD *)v18 = 3075;
    *(_BYTE *)(v18 + 2) = 1;
    v20 = v92;
    if (v92)
      *(_DWORD *)v92 += 2;
    *(_QWORD *)(v18 + 8) = v20;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_QWORD *)(v18 + 64) = 0;
    *(_DWORD *)(v18 + 72) = 1;
    *(_QWORD *)(v18 + 80) = 0;
    *(_QWORD *)(v18 + 88) = 0;
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)v27.i64 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
    *(_QWORD *)(v19 + 88) = v27.i64[0];
    if (*(_BYTE *)(v19 + 1) == 8)
      Inspector::InspectorConsoleAgent::clearMessages(v17, (WTF::AtomStringImpl *)0x54, (uint64_t)v21, v22, v23, v24, v25, v26);
    __tp.tv_sec = v19;
    Inspector::InspectorConsoleAgent::addConsoleMessage(v17, (WTF::AtomStringImpl *)&__tp, v21, v22, v23, v24, v25, v26, v27);
    tv_sec = (Inspector::ConsoleMessage *)__tp.tv_sec;
    __tp.tv_sec = 0;
    if (tv_sec)
    {
      Inspector::ConsoleMessage::~ConsoleMessage(tv_sec, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    v44 = v92;
    v92 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    return;
  }
  v10 = 8 * v9;
  v11 = v9 + 1;
  while (1)
  {
    v12 = *a3;
    if (!*a3 || !*((_DWORD *)v12 + 1))
      break;
    v90 = (WTF::StringImpl *)a3;
    if (v11 - 2 >= (unint64_t)*((unsigned int *)this + 13))
    {
      __break(0xC471u);
      goto LABEL_46;
    }
    v13 = *(WTF **)(*((_QWORD *)this + 5) + v10 - 8);
    if (v13 == v12)
      break;
    if (v13)
    {
      v14 = WTF::equal(v13, v12, (const WTF::StringImpl *)a3);
      a3 = (WTF::StringImpl **)v90;
      if (v14)
        break;
    }
    v10 -= 8;
    if ((unint64_t)--v11 <= 1)
      goto LABEL_12;
  }
  v45 = *((_QWORD *)this + 5);
  v46 = (const void *)(v45 + v10);
  v47 = (WTF::StringImpl **)(v45 + v10 - 8);
  v48 = *v47;
  *v47 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      v89 = v45;
      v91 = (WTF::StringImpl *)(v45 + v10 - 8);
      v88 = v10;
      v54 = v48;
      WTF::StringImpl::~StringImpl(v48, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
      v55 = (unint64_t)v54;
      v10 = v88;
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      v45 = v89;
      v47 = (WTF::StringImpl **)v91;
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  memmove(v47, v46, *((_QWORD *)this + 5) + 8 * *((unsigned int *)this + 13) - v45 - v10);
  v49 = *((_DWORD *)this + 13) - 1;
  *((_DWORD *)this + 13) = v49;
  if (!v49)
  {
    v50 = *((_QWORD *)this + 4);
    if (v50 && *(_BYTE *)(v50 + 56))
    {
      *(_BYTE *)(v50 + 56) = 0;
      *(_BYTE *)(v50 + 58) = 0;
      *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v50 + 48) + 64))(*(_QWORD *)(v50 + 48)) + 208) = 0;
      Inspector::InspectorScriptProfilerAgent::trackingComplete((Inspector::InspectorScriptProfilerAgent *)v50);
    }
    v51 = *((_QWORD *)this + 3);
    if (v51)
    {
      v52 = *(_WORD **)(v51 + 56);
      v53 = v52[24];
      if ((*((_BYTE *)this + 56) != 0) == ((v53 & 0x40) == 0))
      {
        v52[24] = v53 & 0xFFBF | ((*((_BYTE *)this + 56) != 0) << 6);
        (*(void (**)(_WORD *))(*(_QWORD *)v52 + 40))(v52);
      }
    }
  }
}

void Inspector::JSGlobalObjectConsoleClient::takeHeapSnapshot(Inspector::JSGlobalObjectConsoleClient *this, JSC::JSGlobalObject *a2, const WTF::String *a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t, JSC::JSGlobalObject *))(*(_QWORD *)v5 + 16))(v5, a2))
    Inspector::InspectorConsoleAgent::takeHeapSnapshot(*((Inspector::InspectorConsoleAgent **)this + 2), a3);
}

void Inspector::JSGlobalObjectConsoleClient::time(Inspector::JSGlobalObjectConsoleClient *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
    Inspector::InspectorConsoleAgent::startTiming(*((Inspector::InspectorConsoleAgent **)this + 2), a2, a3);
}

void Inspector::JSGlobalObjectConsoleClient::timeLog(uint64_t a1, JSC::VM **a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
    Inspector::InspectorConsoleAgent::logTiming(*(_QWORD *)(a1 + 16), a2, a3, a4, v9, v10, v11, v12, v13);
}

void Inspector::JSGlobalObjectConsoleClient::timeEnd(Inspector::JSGlobalObjectConsoleClient *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
    Inspector::InspectorConsoleAgent::stopTiming(*((Inspector::InspectorConsoleAgent **)this + 2), a2, a3, v7, v8, v9, v10, v11, v12);
}

void Inspector::JSGlobalObjectConsoleClient::timeStamp(Inspector::JSGlobalObjectConsoleClient *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3 = 0x1100000002;
    *(_QWORD *)(v3 + 8) = "console.timeStamp";
    *(_DWORD *)(v3 + 16) = 4;
    Inspector::JSGlobalObjectConsoleClient::warnUnimplemented(a1, (const WTF::String *)v3);
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void Inspector::JSGlobalObjectConsoleClient::warnUnimplemented(Inspector::JSGlobalObjectConsoleClient *this, const WTF::String *a2)
{
  int v4;
  uint64_t v5;
  __darwin_time_t tv_sec;
  char *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __darwin_time_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Inspector::ConsoleMessage *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int128 *v57;
  unsigned __int128 *v58;
  unsigned __int128 v59;
  char v60;
  timespec v61;

  if (!a2)
  {
    WTF::tryFastCompactMalloc((WTF *)0x4B, &v61);
    tv_sec = v61.tv_sec;
    if (v61.tv_sec)
    {
      *(_QWORD *)v61.tv_sec = 0x3700000002;
      qmemcpy((void *)(tv_sec + 20), " is currently ignored in JavaScript context inspection.", 55);
      *(_QWORD *)(tv_sec + 8) = tv_sec + 20;
      *(_DWORD *)(tv_sec + 16) = 4;
      goto LABEL_17;
    }
    goto LABEL_32;
  }
  v4 = *((_DWORD *)a2 + 1);
  *(_DWORD *)a2 += 2;
  if (v4 < 0)
    goto LABEL_32;
  v5 = (v4 + 55);
  if (__OFADD__(v4, 55))
    goto LABEL_32;
  if ((*((_BYTE *)a2 + 16) & 4) != 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v5 + 20), &v61);
    tv_sec = v61.tv_sec;
    if (v61.tv_sec)
    {
      v15 = (_BYTE *)(v61.tv_sec + 20);
      *(_DWORD *)v61.tv_sec = 2;
      *(_DWORD *)(tv_sec + 4) = v5;
      *(_QWORD *)(tv_sec + 8) = tv_sec + 20;
      *(_DWORD *)(tv_sec + 16) = 4;
      v8 = (_BYTE *)*((_QWORD *)a2 + 1);
      v9 = *((unsigned int *)a2 + 1);
      if ((*((_BYTE *)a2 + 16) & 4) != 0)
      {
        if ((_DWORD)v9 == 1)
        {
          *v15 = *v8;
        }
        else if ((_DWORD)v9)
        {
          memcpy((void *)(tv_sec + 20), v8, v9);
        }
      }
      else
      {
        if (v9 < 0x10)
        {
          v57 = (unsigned __int128 *)(tv_sec + 20);
        }
        else
        {
          v57 = (unsigned __int128 *)&v15[v9 & 0xFFFFFFF0];
          v58 = (unsigned __int128 *)(tv_sec + 20);
          do
          {
            v59 = (unsigned __int128)vld2q_s8(v8);
            v8 += 32;
            *v58++ = v59;
          }
          while (v58 != v57);
        }
        while (v57 != (unsigned __int128 *)&v15[v9])
        {
          v60 = *v8;
          v8 += 2;
          *(_BYTE *)v57 = v60;
          v57 = (unsigned __int128 *)((char *)v57 + 1);
        }
      }
      qmemcpy(&v15[*((unsigned int *)a2 + 1)], " is currently ignored in JavaScript context inspection.", 55);
      goto LABEL_15;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198699DF4);
  }
  if (v5 > 0x7FFFFFEF)
    goto LABEL_32;
  WTF::tryFastCompactMalloc((WTF *)(2 * (v4 + 55) + 20), &v61);
  tv_sec = v61.tv_sec;
  if (!v61.tv_sec)
    goto LABEL_32;
  v7 = (char *)(v61.tv_sec + 20);
  *(_DWORD *)v61.tv_sec = 2;
  *(_DWORD *)(tv_sec + 4) = v5;
  *(_QWORD *)(tv_sec + 8) = tv_sec + 20;
  *(_DWORD *)(tv_sec + 16) = 0;
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, (uint64_t)a2, (int8x16_t *)" is currently ignored in JavaScript context inspection.", 55);
LABEL_15:
  if (*(_DWORD *)a2 == 2)
  {
    WTF::StringImpl::~StringImpl(a2, (WTF::AtomStringImpl *)v8, v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    *(_DWORD *)a2 -= 2;
  }
LABEL_17:
  v16 = *((_QWORD *)this + 2);
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_WORD *)v17 = 3;
  *(_BYTE *)(v17 + 2) = 1;
  *(_DWORD *)tv_sec += 2;
  *(_QWORD *)(v17 + 8) = tv_sec;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_QWORD *)(v17 + 64) = 0;
  *(_DWORD *)(v17 + 72) = 1;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  v61.tv_sec = 0;
  v61.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v61);
  *(double *)v24.i64 = (double)v61.tv_nsec / 1000000000.0 + (double)v61.tv_sec;
  *(_QWORD *)(v17 + 88) = v24.i64[0];
  if (*(_BYTE *)(v17 + 1) == 8)
    Inspector::InspectorConsoleAgent::clearMessages(v16, (WTF::AtomStringImpl *)0x54, (uint64_t)v18, v19, v20, v21, v22, v23);
  v61.tv_sec = v17;
  Inspector::InspectorConsoleAgent::addConsoleMessage(v16, (WTF::AtomStringImpl *)&v61, v18, v19, v20, v21, v22, v23, v24);
  v32 = (Inspector::ConsoleMessage *)v61.tv_sec;
  v61.tv_sec = 0;
  if (v32)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v32, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  if (*(_DWORD *)tv_sec == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)tv_sec, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  else
  {
    *(_DWORD *)tv_sec -= 2;
  }
}

void Inspector::JSGlobalObjectConsoleClient::record(Inspector::JSGlobalObjectConsoleClient *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3 = 0xE00000002;
    *(_QWORD *)(v3 + 8) = "console.record";
    *(_DWORD *)(v3 + 16) = 4;
    Inspector::JSGlobalObjectConsoleClient::warnUnimplemented(a1, (const WTF::String *)v3);
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void Inspector::JSGlobalObjectConsoleClient::recordEnd(Inspector::JSGlobalObjectConsoleClient *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3 = 0x1100000002;
    *(_QWORD *)(v3 + 8) = "console.recordEnd";
    *(_DWORD *)(v3 + 16) = 4;
    Inspector::JSGlobalObjectConsoleClient::warnUnimplemented(a1, (const WTF::String *)v3);
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void Inspector::JSGlobalObjectConsoleClient::screenshot(Inspector::JSGlobalObjectConsoleClient *a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24) + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3 = 0x1200000002;
    *(_QWORD *)(v3 + 8) = "console.screenshot";
    *(_DWORD *)(v3 + 16) = 4;
    Inspector::JSGlobalObjectConsoleClient::warnUnimplemented(a1, (const WTF::String *)v3);
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void Inspector::JSGlobalObjectDebugger::attachDebugger(JSC::JSGlobalObject **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Debugger::attach((JSC::Debugger *)this, this[29], a3, a4, a5, a6, a7, a8);
}

void Inspector::JSGlobalObjectDebugger::detachDebugger(Inspector::JSGlobalObjectDebugger *this, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;

  v9 = a2;
  JSC::Debugger::detach((uint64_t)this, *((_QWORD *)this + 29), a2, a5, a6, a7, a8, a9, a3);
  if ((v9 & 1) == 0)
    JSC::VM::deleteAllCode(*((_QWORD *)this + 2), 0);
}

void Inspector::JSGlobalObjectDebugger::runEventLoopWhilePaused(Inspector::JSGlobalObjectDebugger *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;

  JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v22, *(JSC::VM **)(*((_QWORD *)this + 29) + 56), a3, a4, a5, a6, a7, a8);
  while (!*((_BYTE *)this + 8))
    CFRunLoopRunInMode(CFSTR("com.apple.JavaScriptCore.remote-inspector-runloop-mode"), 0.05, 1u);
  if (v23)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v23 + 112), (uint64_t)&v22, v22, v9, v10, v11, v12, v13);
    v21 = (unsigned int *)v23;
    v23 = 0;
    if (v21)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v21, v14, v15, v16, v17, v18, v19, v20);
  }
}

const __CFString *Inspector::JSGlobalObjectDebugger::runLoopMode(Inspector::JSGlobalObjectDebugger *this)
{
  return CFSTR("com.apple.JavaScriptCore.remote-inspector-runloop-mode");
}

Inspector::JSGlobalObjectInspectorController *Inspector::JSGlobalObjectInspectorController::JSGlobalObjectInspectorController(Inspector::JSGlobalObjectInspectorController *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  char v33;
  char **v34;
  char *v35;

  *(_QWORD *)this = off_1E3593DA8;
  *((_QWORD *)this + 1) = &unk_1E3593E30;
  *((_QWORD *)this + 2) = a2;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = off_1E35913D8;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v4 = off_1E3591370;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)(v4 + 32) = v3;
  *(_DWORD *)(v4 + 40) = 1;
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 4) = 0;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v5 = 1;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(v5 + 16) = 0x7FF8000000000000;
  *((_QWORD *)this + 5) = v5;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 2;
  *((_QWORD *)this + 12) = v6;
  *(_DWORD *)v6 = 2;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 0;
  *((_QWORD *)this + 13) = v7;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 1;
  *((_QWORD *)this + 17) = 0;
  v8 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 12);
  v10 = WTF::fastMalloc((WTF *)0x68);
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v11 + 8) = "Console";
  *(_DWORD *)(v11 + 16) = 4;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)v11 = 0x700000002;
  *(_QWORD *)v10 = off_1E3594460;
  *(_QWORD *)(v10 + 16) = &unk_1E35944D0;
  *(_QWORD *)(v10 + 24) = v8;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v12 = v9;
  *(_QWORD *)(v10 + 32) = v12;
  Inspector::ConsoleBackendDispatcher::create((Inspector::ConsoleBackendDispatcher *)v7, (Inspector::BackendDispatcher *)(v10 + 16), (uint64_t *)&v35);
  *(_QWORD *)(v10 + 40) = v35;
  *(_QWORD *)(v10 + 48) = 0;
  *(_DWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_WORD *)(v10 + 96) = 0;
  *(_BYTE *)(v10 + 98) = 1;
  *((_QWORD *)this + 9) = v10;
  v32 = v10;
  v13 = *((unsigned int *)this + 17);
  if ((_DWORD)v13 == *((_DWORD *)this + 16))
  {
    v14 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 56, v13 + 1, (unint64_t)&v32);
    v13 = *((unsigned int *)this + 17);
    v15 = (uint64_t *)(*((_QWORD *)this + 7) + 8 * v13);
    v10 = *v14;
  }
  else
  {
    v15 = (uint64_t *)(*((_QWORD *)this + 7) + 8 * v13);
    v14 = &v32;
  }
  *v14 = 0;
  *v15 = v10;
  *((_DWORD *)this + 17) = v13 + 1;
  v16 = v32;
  v32 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v24 = WTF::fastMalloc((WTF *)0x40);
  v25 = *((_QWORD *)this + 9);
  *(_QWORD *)v24 = off_1E3593CB0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = v25;
  *(_BYTE *)(v24 + 56) = 0;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v26 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v24;
  if (v26)
    std::default_delete<Inspector::JSGlobalObjectConsoleClient>::operator()[abi:sn180100](v26, v17, v18, v19, v20, v21, v22, v23);
  v27 = *((_QWORD *)this + 5);
  v28 = mach_absolute_time();
  v30 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v30 != -1)
  {
    v35 = &v33;
    v34 = &v35;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v29) = dword_1ECF4400C;
  *(double *)(v27 + 16) = (double)(v28 * WTF::machTimebaseInfo(void)::timebaseInfo)
                        / ((double)v29
                         * 1000000000.0);
  return this;
}

void Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController(Inspector::JSGlobalObjectInspectorController *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  Inspector::BackendDispatcher *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Debugger *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  WTF *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v9 = *((_QWORD *)this + 17);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      JSC::VM::~VM((JSC::VM *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  v13 = *((_QWORD *)this + 14);
  if (v13)
  {
    v46 = (uint64_t *)(v13 - 16);
    v47 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v48 = *(uint64_t **)(v13 - 8);
    if (v48)
    {
      v49 = *v46;
      *v48 = *v46;
      *(_QWORD *)(v49 + 8) = v48;
      *v46 = 0;
      v46[1] = 0;
    }
    *v46 = *(_QWORD *)(v47 + 40);
    *(_QWORD *)(v47 + 40) = v46;
    *((_QWORD *)this + 14) = 0;
  }
  v14 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v44 = *(_QWORD *)(v15 + 8);
      if (v15 + 24 != v44 && v44 != 0)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (uint64_t *)*((_QWORD *)this + 7);
  v17 = *((unsigned int *)this + 17);
  if ((_DWORD)v17)
  {
    v18 = 8 * v17;
    do
    {
      v19 = *v16++;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      v18 -= 8;
    }
    while (v18);
    v20 = *((unsigned int *)this + 17);
    v16 = (uint64_t *)*((_QWORD *)this + 7);
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      do
      {
        v22 = *v16;
        *v16 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        ++v16;
        v21 -= 8;
      }
      while (v21);
      v16 = (uint64_t *)*((_QWORD *)this + 7);
    }
  }
  if (v16)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = (JSC::Debugger *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
  {
    JSC::Debugger::~Debugger(v23, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  v32 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      v43 = *(_QWORD *)(v32 + 24);
      if (v43)
      {
        *(_QWORD *)(v32 + 24) = 0;
        *(_DWORD *)(v32 + 32) = 0;
        WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  v33 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v33)
    std::default_delete<Inspector::JSGlobalObjectConsoleClient>::operator()[abi:sn180100](v33, a2, a3, a4, a5, a6, a7, a8);
  v34 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController(Inspector::JSGlobalObjectInspectorController *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController((Inspector::JSGlobalObjectInspectorController *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController((Inspector::JSGlobalObjectInspectorController *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t Inspector::JSGlobalObjectInspectorController::connectFrontend(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_BYTE *)(a1 + 129) = a3;
  *(_BYTE *)(a1 + 130) = a4;
  Inspector::JSGlobalObjectInspectorController::createLazyAgents(a1);
  v13 = *(_QWORD *)(a1 + 96);
  result = v13 + 8;
  v15 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD **)result;
    v17 = *(unsigned int *)(v13 + 20);
    while (*v16 != a2)
    {
      ++v16;
      if (!--v17)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v42 = a2;
    if ((_DWORD)v15 == *(_DWORD *)(v13 + 16))
    {
      result = WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v15 + 1, (unint64_t)&v42);
      v18 = *(unsigned int *)(v13 + 20);
      *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v18) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v15) = a2;
      LODWORD(v18) = v15;
    }
    *(_DWORD *)(v13 + 20) = v18 + 1;
  }
  if (!(_DWORD)v15)
  {
    v19 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 56);
    if (v19)
    {
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    v21 = *(unsigned int **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v19;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        JSC::VM::~VM((JSC::VM *)v21, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD **)(a1 + 112);
    if (!v25)
    {
      v26 = *(_QWORD *)(v24 + 56);
      v27 = *(_QWORD **)(v26 + 712);
      if (!v27)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v26 + 672), v6, v7, v8, v9, v10, v11, v12);
        v27 = *(_QWORD **)(v26 + 712);
      }
      *(_QWORD *)(v26 + 712) = *v27;
      v27[2] = 0;
      v25 = v27 + 2;
      *v27 = 0;
      v27[1] = 0;
      *(_QWORD *)(a1 + 112) = v27 + 2;
    }
    if (!*v25)
    {
      v28 = *(_QWORD **)(((unint64_t)(v25 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(v25 - 2) = v29;
      *(v25 - 1) = v28;
      *v28 = v25 - 2;
      *(_QWORD *)(v29 + 8) = v25 - 2;
    }
    *v25 = v24;
    v30 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v30)
    {
      v31 = *(uint64_t **)(a1 + 56);
      v32 = 8 * v30;
      do
      {
        v33 = *v31++;
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 16))(v33, 0, 0);
        v32 -= 8;
      }
      while (v32);
    }
    result = *(_QWORD *)(a1 + 136);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

uint64_t Inspector::JSGlobalObjectInspectorController::createLazyAgents(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  JSC::Debugger *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Inspector::InspectorBackendDispatcher *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79[2];
  __int128 v80;
  uint64_t v81;

  if (!*(_BYTE *)(this + 131))
  {
    v1 = this;
    *(_BYTE *)(this + 131) = 1;
    v2 = *(_QWORD *)(this + 16);
    v3 = WTF::fastMalloc((WTF *)0xF0);
    v11 = v3;
    v12 = *(_QWORD *)(v2 + 56);
    v13 = (uint64_t *)(v12 + 93504);
    *(_QWORD *)(v3 + 216) = 0;
    *(_QWORD *)(v3 + 224) = 0;
    *(_BYTE *)(v3 + 8) = 1;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 16) = v12;
    *(_QWORD *)(v3 + 24) = 0;
    *(_WORD *)(v3 + 48) &= 0xFC0Cu;
    *(_DWORD *)(v3 + 76) = 0;
    *(_QWORD *)(v3 + 60) = 0;
    *(_QWORD *)(v3 + 68) = 0;
    *(_QWORD *)(v3 + 52) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_BYTE *)(v3 + 88) = 0;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_DWORD *)(v3 + 176) = 1;
    *(_OWORD *)(v3 + 180) = 0u;
    *(_OWORD *)(v3 + 196) = 0u;
    *(_DWORD *)(v3 + 212) = 0;
    v14 = *(_QWORD *)(v12 + 93512);
    v15 = (uint64_t *)(v14 + 224);
    if (!v14)
      v15 = v13;
    *v15 = v3;
    v13[1] = v3;
    *(_QWORD *)(v3 + 216) = v14;
    *(_QWORD *)(v3 + 224) = 0;
    *(_QWORD *)v3 = off_1E3593D38;
    *(_QWORD *)(v3 + 232) = v2;
    v16 = *(JSC::Debugger **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v11;
    if (v16)
    {
      JSC::Debugger::~Debugger(v16, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    v26 = *(_QWORD *)(v1 + 96);
    v25 = *(Inspector::InspectorBackendDispatcher **)(v1 + 104);
    v27 = *(_QWORD *)(v1 + 16);
    v28 = *(_QWORD *)(v1 + 24);
    if (!*(_QWORD *)(v1 + 80))
    {
      v29 = WTF::fastMalloc((WTF *)0x58);
      v30 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)(v30 + 8) = "Inspector";
      *(_DWORD *)(v30 + 16) = 4;
      *(_QWORD *)(v29 + 8) = v30;
      *(_QWORD *)v30 = 0x900000002;
      *(_QWORD *)v29 = off_1E35942E0;
      *(_QWORD *)(v29 + 16) = &unk_1E3594338;
      *(_QWORD *)(v29 + 24) = v1;
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v31 = v26;
      *(_QWORD *)(v29 + 32) = v31;
      Inspector::InspectorBackendDispatcher::create(v25, (Inspector::BackendDispatcher *)(v29 + 16), (uint64_t *)(v29 + 40));
      *(_BYTE *)(v29 + 80) = 0;
      *(_OWORD *)(v29 + 48) = 0u;
      *(_OWORD *)(v29 + 64) = 0u;
      *(_QWORD *)(v1 + 80) = v29;
      v32 = (_QWORD *)(v1 + 56);
      v79[0] = v29;
      v33 = *(unsigned int *)(v1 + 68);
      if ((_DWORD)v33 == *(_DWORD *)(v1 + 64))
      {
        v34 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v79);
        v33 = *(unsigned int *)(v1 + 68);
        v35 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 8 * v33);
        v29 = *v34;
      }
      else
      {
        v35 = (uint64_t *)(*v32 + 8 * v33);
        v34 = v79;
      }
      *v34 = 0;
      *v35 = v29;
      *(_DWORD *)(v1 + 68) = v33 + 1;
      v36 = v79[0];
      v79[0] = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    v37 = (_QWORD *)(v1 + 56);
    v38 = WTF::fastMalloc((WTF *)0x50);
    v39 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v39 + 8) = "Runtime";
    *(_DWORD *)(v39 + 16) = 4;
    *(_QWORD *)(v38 + 8) = v39;
    *(_QWORD *)v39 = 0x700000002;
    *(_QWORD *)v38 = off_1E3594A20;
    *(_QWORD *)(v38 + 16) = &unk_1E3594B18;
    *(_QWORD *)(v38 + 24) = v28;
    *(_QWORD *)(v38 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
    *(_QWORD *)(v38 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
    *(_WORD *)(v38 + 48) = 0;
    *(_BYTE *)(v38 + 50) = 0;
    *(_QWORD *)v38 = off_1E35953A8;
    *(_QWORD *)(v38 + 16) = &unk_1E35954A0;
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v40 = v26;
    *(_QWORD *)(v38 + 56) = v40;
    Inspector::RuntimeBackendDispatcher::create(v25, (Inspector::BackendDispatcher *)(v38 + 16), v79);
    *(_QWORD *)(v38 + 64) = v79[0];
    *(_QWORD *)(v38 + 72) = v27;
    v77 = v38;
    v41 = *(unsigned int *)(v1 + 68);
    if ((_DWORD)v41 == *(_DWORD *)(v1 + 64))
    {
      v42 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 56, v41 + 1, (unint64_t)&v77);
      v41 = *(unsigned int *)(v1 + 68);
      v43 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 8 * v41);
      v38 = *v42;
    }
    else
    {
      v43 = (uint64_t *)(*v37 + 8 * v41);
      v42 = &v77;
    }
    *v42 = 0;
    *v43 = v38;
    *(_DWORD *)(v1 + 68) = v41 + 1;
    v44 = v77;
    v77 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    if (!*(_QWORD *)(v1 + 88))
    {
      v46 = *(_QWORD *)(v1 + 16);
      v45 = *(_QWORD *)(v1 + 24);
      v79[0] = v1;
      v79[1] = v45;
      v80 = *(_OWORD *)(v1 + 96);
      v81 = v46;
      v47 = WTF::fastMalloc((WTF *)0x108);
      v48 = *(_QWORD *)(v1 + 72);
      v49 = (_QWORD *)Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent(v47, v79);
      *v49 = off_1E3594DE8;
      v49[2] = &unk_1E3594FD8;
      v49[3] = &unk_1E35950E0;
      v49[4] = &unk_1E3595120;
      v49[32] = v48;
      *(_QWORD *)(v1 + 88) = v49;
      *(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) = v49;
      v78 = v49;
      v50 = *(unsigned int *)(v1 + 68);
      if ((_DWORD)v50 == *(_DWORD *)(v1 + 64))
      {
        v51 = (_QWORD **)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 56, v50 + 1, (unint64_t)&v78);
        v50 = *(unsigned int *)(v1 + 68);
        v52 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v50);
        v49 = *v51;
      }
      else
      {
        v52 = (_QWORD *)(*v37 + 8 * v50);
        v51 = &v78;
      }
      *v51 = 0;
      *v52 = v49;
      *(_DWORD *)(v1 + 68) = v50 + 1;
      v53 = v78;
      v78 = 0;
      if (v53)
        (*(void (**)(_QWORD *))(*v53 + 8))(v53);
    }
    v54 = WTF::fastMalloc((WTF *)0x40);
    v55 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v55 + 8) = "ScriptProfiler";
    *(_DWORD *)(v55 + 16) = 4;
    *(_QWORD *)(v54 + 8) = v55;
    *(_QWORD *)v55 = 0xE00000002;
    *(_QWORD *)v54 = off_1E3594BD8;
    *(_QWORD *)(v54 + 16) = &unk_1E3594C40;
    *(_QWORD *)(v54 + 24) = &unk_1E3594C70;
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v56 = v26;
    *(_QWORD *)(v54 + 32) = v56;
    Inspector::ScriptProfilerBackendDispatcher::create(v25, (Inspector::BackendDispatcher *)(v54 + 16), v79);
    *(_QWORD *)(v54 + 40) = v79[0];
    *(_QWORD *)(v54 + 48) = v1;
    *(_WORD *)(v54 + 56) = 0;
    *(_BYTE *)(v54 + 58) = 0;
    *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32) = v54;
    v76 = v54;
    v57 = *(unsigned int *)(v1 + 68);
    if ((_DWORD)v57 == *(_DWORD *)(v1 + 64))
    {
      v58 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 56, v57 + 1, (unint64_t)&v76);
      v57 = *(unsigned int *)(v1 + 68);
      v59 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 8 * v57);
      v54 = *v58;
    }
    else
    {
      v59 = (uint64_t *)(*v37 + 8 * v57);
      v58 = &v76;
    }
    *v58 = 0;
    *v59 = v54;
    *(_DWORD *)(v1 + 68) = v57 + 1;
    v60 = v76;
    v76 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    v61 = WTF::fastMalloc((WTF *)0x50);
    v62 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v62 + 8) = "Heap";
    *(_DWORD *)(v62 + 16) = 4;
    *(_QWORD *)(v61 + 8) = v62;
    *(_QWORD *)v62 = 0x400000002;
    *(_QWORD *)v61 = off_1E35948F8;
    *(_QWORD *)(v61 + 16) = &unk_1E3594990;
    *(_QWORD *)(v61 + 24) = &unk_1E35949F0;
    *(_QWORD *)(v61 + 32) = v28;
    v63 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v63 = v26;
    *(_QWORD *)(v61 + 40) = v63;
    Inspector::HeapBackendDispatcher::create(v25, (Inspector::BackendDispatcher *)(v61 + 16), v79);
    *(_QWORD *)(v61 + 48) = v79[0];
    *(_QWORD *)(v61 + 56) = v1;
    *(_WORD *)(v61 + 64) = 0;
    *(_QWORD *)(v61 + 72) = 0x7FF8000000000000;
    v64 = *(_QWORD *)(v1 + 72);
    if (v64)
      *(_QWORD *)(v64 + 48) = v61;
    v75 = v61;
    v65 = *(unsigned int *)(v1 + 68);
    if ((_DWORD)v65 == *(_DWORD *)(v1 + 64))
    {
      v66 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 56, v65 + 1, (unint64_t)&v75);
      v65 = *(unsigned int *)(v1 + 68);
      v67 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 8 * v65);
      v61 = *v66;
    }
    else
    {
      v67 = (uint64_t *)(*v37 + 8 * v65);
      v66 = &v75;
    }
    *v66 = 0;
    *v67 = v61;
    *(_DWORD *)(v1 + 68) = v65 + 1;
    v68 = v75;
    v75 = 0;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    v70 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v70 + 8) = "Audit";
    *(_DWORD *)(v70 + 16) = 4;
    v69[1] = v70;
    *(_QWORD *)v70 = 0x500000002;
    *v69 = off_1E3594370;
    v69[2] = &unk_1E35943E8;
    Inspector::AuditBackendDispatcher::create(v25, (Inspector::BackendDispatcher *)(v69 + 2), v79);
    v69[3] = v79[0];
    v69[4] = v28;
    v69[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
    v69[6] = 0;
    *v69 = off_1E3594D38;
    v69[2] = &unk_1E3594DB0;
    v69[7] = v27;
    v74 = (uint64_t)v69;
    v71 = *(unsigned int *)(v1 + 68);
    if ((_DWORD)v71 == *(_DWORD *)(v1 + 64))
    {
      v72 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 56, v71 + 1, (unint64_t)&v74);
      v71 = *(unsigned int *)(v1 + 68);
      v73 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v71);
      v69 = (_QWORD *)*v72;
    }
    else
    {
      v73 = (_QWORD *)(*v37 + 8 * v71);
      v72 = &v74;
    }
    *v72 = 0;
    *v73 = v69;
    *(_DWORD *)(v1 + 68) = v71 + 1;
    this = v74;
    v74 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void Inspector::JSGlobalObjectInspectorController::disconnectFrontend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a1 + 56);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, 1);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(_QWORD **)(v8 + 8);
    while (v11[v10] != a2)
    {
      if (v9 == ++v10)
        goto LABEL_16;
    }
    if (*v11 == a2)
    {
      v12 = 0;
LABEL_15:
      memmove(&v11[v12], &v11[v12 + 1], 8 * v9 - (8 * v12 + 8));
      --*(_DWORD *)(v8 + 20);
      v8 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v12 = 0;
      while (v9 - 1 != v12)
      {
        v13 = v11[++v12];
        if (v13 == a2)
          goto LABEL_15;
      }
    }
  }
LABEL_16:
  *(_WORD *)(a1 + 129) = 0;
  if (!*(_DWORD *)(v8 + 20))
  {
    v14 = *(_QWORD *)(a1 + 136);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear((uint64_t *)(a1 + 112));
    v22 = *(unsigned int **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        JSC::VM::~VM((JSC::VM *)v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
}

void Inspector::JSGlobalObjectInspectorController::reportAPIException(Inspector::JSGlobalObjectInspectorController *this, JSC::JSGlobalObject *a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  Inspector::ScriptCallStack *v25;
  const void **v26;
  uint64_t v27;
  int v28;
  const char *dli_sname;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  char *v41;
  char *v42;
  const char *v43;
  size_t v44;
  size_t v45;
  int *v46;
  char *v47;
  _QWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  unsigned int *v91;
  unsigned int v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  const WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Inspector::ConsoleMessage *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *dli_fname;
  Inspector::ScriptCallStack *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  Inspector::JSGlobalObjectInspectorController *v144;
  uint64_t v145;
  uint64_t v146;
  Dl_info v147;
  int v148;
  int v149;
  int status;
  WTF::StringImpl *v151[2];
  _OWORD v152[16];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 7);
  if (*(JSC::Exception **)(v8 + 24) == a3)
    return;
  v9 = (_QWORD *)(v8 + 93088);
  if (!*(_QWORD *)(v8 + 93088))
  {
    __break(0xC471u);
    goto LABEL_71;
  }
  v13 = *(_QWORD *)(v8 + 93096);
  *(_QWORD *)(v8 + 93096) = dword_1ECF4C250;
  JSC::VM::updateStackLimits((JSC::VM *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  Inspector::createScriptCallStackFromException(a2, a3, (JSC::Exception *)0xC8, v14, v15, v16, v17, &v146);
  if (*((_BYTE *)this + 128))
  {
    v144 = this;
    v145 = v13;
    v25 = (Inspector::ScriptCallStack *)v146;
    memset(v152, 0, sizeof(v152));
    *(_OWORD *)v151 = 0u;
    v149 = 34;
    WTFGetBacktrace((void **)v151, &v149);
    if (v149 >= 4)
    {
      v26 = (const void **)v152 + 1;
      v27 = (v149 - 3);
      while (1)
      {
        v28 = dladdr(*v26, &v147);
        dli_sname = v147.dli_sname;
        if (v28)
          v30 = v147.dli_sname == 0;
        else
          v30 = 1;
        if (v30)
        {
          v31 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v31 = 0x100000002;
          *(_QWORD *)(v31 + 8) = "?";
          *(_DWORD *)(v31 + 16) = 4;
          v32 = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x20);
          *v32 = 0xD00000002;
          v32[1] = "[native code]";
          *((_DWORD *)v32 + 4) = 4;
          *(_DWORD *)v31 += 2;
          v147.dli_fname = (const char *)v31;
          *(_DWORD *)v32 += 2;
          v147.dli_fbase = v32;
          v147.dli_sname = 0;
          v147.dli_saddr = 0;
          v148 = 0;
          Inspector::ScriptCallStack::append(v25, (const Inspector::ScriptCallFrame *)&v147);
          Inspector::ScriptCallFrame::~ScriptCallFrame((Inspector::ScriptCallFrame *)&v147, v33, v34, v35, v36, v37, v38, v39);
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v40, (uint64_t)v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v40, (uint64_t)v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
          goto LABEL_29;
        }
        status = 0;
        v41 = __cxa_demangle(v147.dli_sname, 0, 0, &status);
        v42 = v41;
        v43 = v41 ? v41 : dli_sname;
        v44 = strlen(v43);
        if (v44)
        {
          v45 = v44;
          if (v44 >> 31)
          {
            __break(0xC471u);
LABEL_71:
            JUMPOUT(0x19869B590);
          }
          v46 = (int *)WTF::fastCompactMalloc((WTF *)(v44 + 20));
          v47 = (char *)(v46 + 5);
          *v46 = 2;
          v46[1] = v45;
          *((_QWORD *)v46 + 1) = v46 + 5;
          v46[4] = 4;
          if (v45 == 1)
            *v47 = *v43;
          else
            memcpy(v47, v43, v45);
        }
        else
        {
          v46 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v48 = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x20);
        *v48 = 0xD00000002;
        v48[1] = "[native code]";
        *((_DWORD *)v48 + 4) = 4;
        *v46 += 2;
        v147.dli_fname = (const char *)v46;
        *(_DWORD *)v48 += 2;
        v147.dli_fbase = v48;
        v147.dli_sname = 0;
        v147.dli_saddr = 0;
        v148 = 0;
        Inspector::ScriptCallStack::append(v25, (const Inspector::ScriptCallFrame *)&v147);
        Inspector::ScriptCallFrame::~ScriptCallFrame((Inspector::ScriptCallFrame *)&v147, v49, v50, v51, v52, v53, v54, v55);
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v48, v56, (uint64_t)v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
        if (*v46 == 2)
          break;
        *v46 -= 2;
        if (v42)
          goto LABEL_28;
LABEL_29:
        ++v26;
        if (!--v27)
          goto LABEL_36;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v56, (uint64_t)v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      if (!v42)
        goto LABEL_29;
LABEL_28:
      free(v42);
      goto LABEL_29;
    }
LABEL_36:
    v9 = (_QWORD *)(v8 + 93088);
    this = v144;
    v13 = v145;
  }
  v89 = *((_QWORD *)a3 + 1);
  v151[0] = (WTF::StringImpl *)v89;
  if ((v89 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v89 + 5) == 2)
  {
    v90 = *(int **)(v89 + 8);
    if ((v90 & 1) != 0)
    {
      v90 = *JSC::JSRopeString::resolveRope(v89, a2, (uint64_t)v18, v19, v24, v20, v21, v22, v23);
      if (!v90)
        goto LABEL_42;
    }
    else if (!v90)
    {
LABEL_42:
      v147.dli_fname = (const char *)v90;
      goto LABEL_43;
    }
    *v90 += 2;
    goto LABEL_42;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v151, a2, v18, v19, v20, v21, v22, v23, (int **)&v147);
LABEL_43:
  *(_QWORD *)(v8 + 16) = 0;
  v91 = (unsigned int *)(v8 + 80);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 & 0xFFFFFFEF, v91));
  if (Inspector::sLogToSystemConsole)
  {
    if (*(_DWORD *)(v146 + 20))
    {
      JSC::ConsoleClient::printConsoleMessage((WTF::AtomStringImpl *)1, 0, 2, (uint64_t *)&v147, (WTF::StringBuilder *)(*(_QWORD *)(v146 + 8) + 8), (const WTF::String *)*(unsigned int *)(*(_QWORD *)(v146 + 8) + 28), *(unsigned int *)(*(_QWORD *)(v146 + 8) + 32), v23);
    }
    else
    {
      v151[0] = 0;
      JSC::ConsoleClient::printConsoleMessage((WTF::AtomStringImpl *)1, 0, 2, (uint64_t *)&v147, (WTF::StringBuilder *)v151, 0, 0, v23);
      v100 = v151[0];
      v151[0] = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::~StringImpl(v100, v93, v94, v95, v96, v97, v98, v99);
          WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
    }
  }
  v101 = *((_QWORD *)this + 9);
  v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v102, 1, 0, 2, &v147, &v146, 0, 0.0) + 1) == 8)
    Inspector::InspectorConsoleAgent::clearMessages(v101, (WTF::AtomStringImpl *)0x54, (uint64_t)v103, v104, v105, v106, v107, v108);
  v151[0] = v102;
  Inspector::InspectorConsoleAgent::addConsoleMessage(v101, (WTF::AtomStringImpl *)v151, v103, v104, v105, v106, v107, v108, v109);
  v117 = v151[0];
  v151[0] = 0;
  if (v117)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v117, v110, v111, v112, v113, v114, v115, v116);
    WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
  }
  dli_fname = (WTF::StringImpl *)v147.dli_fname;
  v147.dli_fname = 0;
  if (dli_fname)
  {
    if (*(_DWORD *)dli_fname == 2)
    {
      WTF::StringImpl::~StringImpl(dli_fname, v110, v111, v112, v113, v114, v115, v116);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)dli_fname -= 2;
    }
  }
  v127 = (Inspector::ScriptCallStack *)v146;
  v146 = 0;
  if (v127)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v127);
  if (!*v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19869B5B0);
  }
  v9[1] = v13;
  JSC::VM::updateStackLimits((JSC::VM *)v8, v110, v111, v112, v113, v114, v115, v116);
}

uint64_t Inspector::JSGlobalObjectInspectorController::developerExtrasEnabled(Inspector::JSGlobalObjectInspectorController *this)
{
  int v2;
  uint64_t v4;

  if (!*((_BYTE *)Inspector::RemoteInspector::singleton(this) + 112))
    return 0;
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 2032) + 20);
  if (v2 == 2)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 2032) + 20))
  {
    if (v2 == 1)
    {
      {
        v4 = Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies;
        if (!Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies)
          return 0;
      }
      else
      {
        v4 = os_variant_allows_internal_security_policies();
        Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies = v4;
        if (!(_DWORD)v4)
          return 0;
      }
      if (!*((_BYTE *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v4) + 129))
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t (*Inspector::JSGlobalObjectInspectorController::functionCallHandler(Inspector::JSGlobalObjectInspectorController *this))(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  return JSC::call;
}

uint64_t (*Inspector::JSGlobalObjectInspectorController::evaluateHandler(Inspector::JSGlobalObjectInspectorController *this))(JSC::JSGlobalObject *a1, SourceCode *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::evaluate;
}

void Inspector::JSGlobalObjectInspectorController::frontendInitialized(Inspector::JSGlobalObjectInspectorController *this)
{
  Inspector::JSGlobalObjectInspectorController *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Inspector::RemoteInspector *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  Inspector::RemoteInspector *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v1 = this;
  if (*((_BYTE *)this + 130))
  {
    *((_BYTE *)this + 130) = 0;
    v2 = *((_QWORD *)this + 11);
    if (!v2)
    {
      v4 = *((_QWORD *)this + 2);
      v3 = *((_QWORD *)this + 3);
      v60 = this;
      v61 = v3;
      v62 = *((_OWORD *)this + 6);
      v63 = v4;
      v5 = WTF::fastMalloc((WTF *)0x108);
      v6 = *((_QWORD *)v1 + 9);
      v7 = (_QWORD *)Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent(v5, &v60);
      *v7 = off_1E3594DE8;
      v7[2] = &unk_1E3594FD8;
      v7[3] = &unk_1E35950E0;
      v7[4] = &unk_1E3595120;
      v7[32] = v6;
      *((_QWORD *)v1 + 11) = v7;
      *(_QWORD *)(*((_QWORD *)v1 + 4) + 24) = v7;
      v59 = v7;
      v8 = *((unsigned int *)v1 + 17);
      if ((_DWORD)v8 == *((_DWORD *)v1 + 16))
      {
        v9 = (_QWORD **)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1 + 56, v8 + 1, (unint64_t)&v59);
        v8 = *((unsigned int *)v1 + 17);
        v10 = (_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v8);
        v7 = *v9;
      }
      else
      {
        v10 = (_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v8);
        v9 = &v59;
      }
      *v9 = 0;
      *v10 = v7;
      *((_DWORD *)v1 + 17) = v8 + 1;
      v11 = v59;
      v59 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      v2 = *((_QWORD *)v1 + 11);
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2) & 1) != 0)
    {
      v12 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v12 = 0x1F00000002;
      *(_QWORD *)(v12 + 8) = "Debugger domain already enabled";
      *(_DWORD *)(v12 + 16) = 4;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 416))(v2);
    }
    v34 = *((_QWORD *)v1 + 11);
    if (!v34)
    {
      v36 = *((_QWORD *)v1 + 2);
      v35 = *((_QWORD *)v1 + 3);
      v60 = v1;
      v61 = v35;
      v62 = *((_OWORD *)v1 + 6);
      v63 = v36;
      v37 = WTF::fastMalloc((WTF *)0x108);
      v38 = *((_QWORD *)v1 + 9);
      v39 = (_QWORD *)Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent(v37, &v60);
      *v39 = off_1E3594DE8;
      v39[2] = &unk_1E3594FD8;
      v39[3] = &unk_1E35950E0;
      v39[4] = &unk_1E3595120;
      v39[32] = v38;
      *((_QWORD *)v1 + 11) = v39;
      *(_QWORD *)(*((_QWORD *)v1 + 4) + 24) = v39;
      v59 = v39;
      v40 = *((unsigned int *)v1 + 17);
      if ((_DWORD)v40 == *((_DWORD *)v1 + 16))
      {
        v41 = (_QWORD **)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1 + 56, v40 + 1, (unint64_t)&v59);
        v40 = *((unsigned int *)v1 + 17);
        v42 = (_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v40);
        v39 = *v41;
      }
      else
      {
        v42 = (_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v40);
        v41 = &v59;
      }
      *v41 = 0;
      *v42 = v39;
      *((_DWORD *)v1 + 17) = v40 + 1;
      v43 = v59;
      v59 = 0;
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      v34 = *((_QWORD *)v1 + 11);
    }
    v60 = 0;
    Inspector::InspectorDebuggerAgent::schedulePauseAtNextOpportunity(v34, (WTF::AtomStringImpl *)0x12D, (uint64_t *)&v60, v28, v29, v30, v31, v32, v33);
    this = v60;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
        WTF::JSONImpl::Value::operator delete(v60, v44, v45, v46, v47, v48, v49, v50);
      else
        --*(_DWORD *)v60;
    }
  }
  if (*((_BYTE *)v1 + 129))
  {
    v51 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 2032);
    v52 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
    Inspector::RemoteInspector::setupCompleted(v52, *(_DWORD *)(v51 + 16), v53, v54, v55, v56, v57, v58);
  }
}

uint64_t Inspector::JSGlobalObjectInspectorController::executionStopwatch(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t Inspector::JSGlobalObjectInspectorController::debugger(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t Inspector::JSGlobalObjectInspectorController::vm(Inspector::JSGlobalObjectInspectorController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 56);
}

uint64_t Inspector::JSGlobalObjectInspectorController::registerAlternateAgent(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0, 0);
  v4 = (_QWORD *)(a1 + 56);
  v5 = *a2;
  *a2 = 0;
  v10 = v5;
  v6 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 64))
  {
    v7 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(a1 + 68);
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v5 = *v7;
  }
  else
  {
    v8 = (uint64_t *)(*v4 + 8 * v6);
    v7 = &v10;
  }
  *v7 = 0;
  *v8 = v5;
  *(_DWORD *)(a1 + 68) = v6 + 1;
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::registerAlternateAgent(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0, 0);
  v4 = (_QWORD *)(a1 + 48);
  v5 = *a2;
  *a2 = 0;
  v10 = v5;
  v6 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 56))
  {
    v7 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v10);
    v6 = *(unsigned int *)(a1 + 60);
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v6);
    v5 = *v7;
  }
  else
  {
    v8 = (uint64_t *)(*v4 + 8 * v6);
    v7 = &v10;
  }
  *v7 = 0;
  *v8 = v5;
  *(_DWORD *)(a1 + 60) = v6 + 1;
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_DWORD *Inspector::JSInjectedScriptHost::destroy(Inspector::JSInjectedScriptHost *this, JSC::JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unint64_t Inspector::JSInjectedScriptHostPrototype::create(Inspector::JSInjectedScriptHostPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = this;
  v10 = *((_QWORD *)this + 4863);
  if (v10 >= *((_QWORD *)this + 4864))
  {
    v10 = *((_QWORD *)this + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (char *)this + 38880;
      v15 = (char *)this + 192;
      v16 = a2;
      v18 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, (uint64_t)v15, 16, 0, 0, v19, v20, v21);
      a3 = (uint64_t)v18;
      v9 = this;
      a2 = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)this + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)this + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  Inspector::JSInjectedScriptHostPrototype::finishCreation((Inspector::JSInjectedScriptHostPrototype *)v10, v9, a2, (uint64_t)a4, a5, a6, a7, a8);
  return v10;
}

uint64_t Inspector::JSInjectedScriptHostPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 2071;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&Inspector::JSInjectedScriptHostPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t Inspector::constructInternalProperty(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  int v68;
  int v69;
  uint64_t v70;

  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(v10 + 15056);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase >= *(_QWORD *)(v11 + 32))
    {
      SlowCase = *(_QWORD *)(v11 + 40);
      if ((SlowCase & 1) != 0)
      {
        v65 = a1;
        JSC::sanitizeStackForVM((JSC *)v10, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, v10 + 192, v12, 0, 0, v61, v62, v63);
        a1 = v65;
        goto LABEL_4;
      }
      v60 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v60);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v60;
    }
    *(_QWORD *)(v11 + 24) = SlowCase + v12;
  }
  else
  {
    v64 = a1;
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, 0x40uLL, 0, a5, a6, a7, a8);
    a1 = v64;
    if (!SlowCase)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, a4, a5, a6, a7, a8, &v66);
  v14 = v66;
  v21 = JSC::jsString((JSC *)v10, a2, v15, v16, v17, v18, v19, v20);
  v66 = 0;
  v67 = SlowCase;
  v68 = -1;
  v22.n128_u64[0] = 0x100000001000000;
  v69 = 0x1000000;
  v70 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v14, v21, 0, (uint64_t)&v66, v23, v24, v22);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v27, v28, v29, v30, v31, &v66);
  v32 = v66;
  v66 = 0;
  v67 = SlowCase;
  v68 = -1;
  v33.n128_u64[0] = 0x100000001000000;
  v69 = 0x1000000;
  v70 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v32, a3, 0, (uint64_t)&v66, v34, v35, v33);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return SlowCase;
}

uint64_t Inspector::JSInjectedScriptHost::getInternalProperties(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  switch(a2)
  {
    case 2:
      v9 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v9 = 0x700000002;
      v10 = "entries";
      goto LABEL_7;
    case 1:
      v9 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v9 = 0x600000002;
      v10 = "values";
      goto LABEL_7;
    case 0:
      v9 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v9 = 0x400000002;
      v10 = "keys";
LABEL_7:
      *(_QWORD *)(v9 + 8) = v10;
      *(_DWORD *)(v9 + 16) = 4;
      v29 = (WTF::StringImpl *)v9;
      goto LABEL_9;
  }
  WTF::StringImpl::s_emptyAtomString += 2;
  v29 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_9:
  v18 = JSC::jsNontrivialString(a1, (JSC::VM *)&v29, a3, a4, a5, a6, a7, a8);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v18;
}

void Inspector::JSInjectedScriptHostPrototype::finishCreation(Inspector::JSInjectedScriptHostPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  WTF::StringImpl *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  WTF::StringImpl *v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  WTF::StringImpl *v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  WTF::StringImpl *v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::AtomStringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  WTF::StringImpl *v136;
  WTF::AtomStringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::AtomStringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  WTF::StringImpl *v155;
  WTF::AtomStringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __n128 v173;
  WTF::StringImpl *v174;
  WTF::AtomStringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  WTF::StringImpl *v193;
  WTF::AtomStringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::AtomStringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  WTF::StringImpl *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::AtomStringImpl *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __n128 v230;
  WTF::StringImpl *v231;
  WTF::AtomStringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::AtomStringImpl *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __n128 v249;
  WTF::StringImpl *v250;
  WTF::AtomStringImpl *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::AtomStringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __n128 v268;
  WTF::StringImpl *v269;
  WTF::AtomStringImpl *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::AtomStringImpl *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __n128 v287;
  WTF::StringImpl *v288;
  WTF::AtomStringImpl *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::AtomStringImpl *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __n128 v306;
  WTF::StringImpl *v307;
  WTF::AtomStringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::AtomStringImpl *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __n128 v325;
  WTF::StringImpl *v326;
  WTF::AtomStringImpl *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  WTF::StringImpl *v334;
  WTF::AtomStringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  WTF::AtomStringImpl *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  void *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  void *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  void *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  void *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  void *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  void *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  void *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  WTF::StringImpl *v640;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"subtype", 7uLL, a4, a5, a6, a7, a8, &v640);
  v11 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v12 = v640;
LABEL_6:
    *(_DWORD *)v12 += 2;
    goto LABEL_7;
  }
  v12 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v12)
    goto LABEL_6;
LABEL_7:
  v640 = v12;
  v20 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionSubtype, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v640;
  v640 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v11, v20, 4, v17, v18, v19, v21);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"functionDetails", 0xFuLL, v25, v26, v27, v28, v29, &v640);
  v30 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v31 = v640;
LABEL_16:
    *(_DWORD *)v31 += 2;
    goto LABEL_17;
  }
  v31 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v31)
    goto LABEL_16;
LABEL_17:
  v640 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionFunctionDetails, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v640;
  v640 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v30, v39, 4, v36, v37, v38, v40);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"getOwnPrivatePropertySymbols", 0x1CuLL, v44, v45, v46, v47, v48, &v640);
  v49 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v50 = v640;
LABEL_26:
    *(_DWORD *)v50 += 2;
    goto LABEL_27;
  }
  v50 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v50)
    goto LABEL_26;
LABEL_27:
  v640 = v50;
  v58 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionGetOwnPrivatePropertySymbols, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v60 = v640;
  v640 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v49, v58, 4, v55, v56, v57, v59);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"getInternalProperties", 0x15uLL, v63, v64, v65, v66, v67, &v640);
  v68 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v69 = v640;
LABEL_36:
    *(_DWORD *)v69 += 2;
    goto LABEL_37;
  }
  v69 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v69)
    goto LABEL_36;
LABEL_37:
  v640 = v69;
  v77 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionGetInternalProperties, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v79 = v640;
  v640 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v398, v399, v400, v401, v402, v403, v404, v405);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v68, v77, 4, v74, v75, v76, v78);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v406, v407, v408, v409, v410, v411, v412, v413);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"internalConstructorName", 0x17uLL, v82, v83, v84, v85, v86, &v640);
  v87 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v88 = v640;
LABEL_46:
    *(_DWORD *)v88 += 2;
    goto LABEL_47;
  }
  v88 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v88)
    goto LABEL_46;
LABEL_47:
  v640 = v88;
  v96 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionInternalConstructorName, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v98 = v640;
  v640 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v414, v415, v416, v417, v418, v419, v420, v421);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v87, v96, 4, v93, v94, v95, v97);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v422, v423, v424, v425, v426, v427, v428, v429);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"isHTMLAllCollection", 0x13uLL, v101, v102, v103, v104, v105, &v640);
  v106 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v107 = v640;
LABEL_56:
    *(_DWORD *)v107 += 2;
    goto LABEL_57;
  }
  v107 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v107)
    goto LABEL_56;
LABEL_57:
  v640 = v107;
  v115 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionIsHTMLAllCollection, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v117 = v640;
  v640 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v430, v431, v432, v433, v434, v435, v436, v437);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v106, v115, 4, v112, v113, v114, v116);
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"isPromiseRejectedWithNativeGetterTypeError", 0x2AuLL, v120, v121, v122, v123, v124, &v640);
  v125 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v126 = v640;
LABEL_66:
    *(_DWORD *)v126 += 2;
    goto LABEL_67;
  }
  v126 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v126)
    goto LABEL_66;
LABEL_67:
  v640 = v126;
  v134 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionIsPromiseRejectedWithNativeGetterTypeError, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v136 = v640;
  v640 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v127, v128, v129, v130, v131, v132, v133);
      WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v125, v134, 4, v131, v132, v133, v135);
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v137, v138, v139, v140, v141, v142, v143);
      WTF::fastFree(v454, v455, v456, v457, v458, v459, v460, v461);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"proxyTargetValue", 0x10uLL, v139, v140, v141, v142, v143, &v640);
  v144 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v145 = v640;
LABEL_76:
    *(_DWORD *)v145 += 2;
    goto LABEL_77;
  }
  v145 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v145)
    goto LABEL_76;
LABEL_77:
  v640 = v145;
  v153 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionProxyTargetValue, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v155 = v640;
  v640 = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, v146, v147, v148, v149, v150, v151, v152);
      WTF::fastFree(v462, v463, v464, v465, v466, v467, v468, v469);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v144, v153, 4, v150, v151, v152, v154);
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v156, v157, v158, v159, v160, v161, v162);
      WTF::fastFree(v470, v471, v472, v473, v474, v475, v476, v477);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weakRefTargetValue", 0x12uLL, v158, v159, v160, v161, v162, &v640);
  v163 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v164 = v640;
LABEL_86:
    *(_DWORD *)v164 += 2;
    goto LABEL_87;
  }
  v164 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v164)
    goto LABEL_86;
LABEL_87:
  v640 = v164;
  v172 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionWeakRefTargetValue, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v174 = v640;
  v640 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
    {
      WTF::StringImpl::~StringImpl(v174, v165, v166, v167, v168, v169, v170, v171);
      WTF::fastFree(v478, v479, v480, v481, v482, v483, v484, v485);
    }
    else
    {
      *(_DWORD *)v174 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v163, v172, 4, v169, v170, v171, v173);
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
    {
      WTF::StringImpl::~StringImpl(v163, v175, v176, v177, v178, v179, v180, v181);
      WTF::fastFree(v486, v487, v488, v489, v490, v491, v492, v493);
    }
    else
    {
      *(_DWORD *)v163 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weakMapSize", 0xBuLL, v177, v178, v179, v180, v181, &v640);
  v182 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v183 = v640;
LABEL_96:
    *(_DWORD *)v183 += 2;
    goto LABEL_97;
  }
  v183 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v183)
    goto LABEL_96;
LABEL_97:
  v640 = v183;
  v191 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionWeakMapSize, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v193 = v640;
  v640 = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v184, v185, v186, v187, v188, v189, v190);
      WTF::fastFree(v494, v495, v496, v497, v498, v499, v500, v501);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v182, v191, 4, v188, v189, v190, v192);
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, v194, v195, v196, v197, v198, v199, v200);
      WTF::fastFree(v502, v503, v504, v505, v506, v507, v508, v509);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weakMapEntries", 0xEuLL, v196, v197, v198, v199, v200, &v640);
  v201 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v202 = v640;
LABEL_106:
    *(_DWORD *)v202 += 2;
    goto LABEL_107;
  }
  v202 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v202)
    goto LABEL_106;
LABEL_107:
  v640 = v202;
  v210 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionWeakMapEntries, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v212 = v640;
  v640 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
    {
      WTF::StringImpl::~StringImpl(v212, v203, v204, v205, v206, v207, v208, v209);
      WTF::fastFree(v510, v511, v512, v513, v514, v515, v516, v517);
    }
    else
    {
      *(_DWORD *)v212 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v201, v210, 4, v207, v208, v209, v211);
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, v213, v214, v215, v216, v217, v218, v219);
      WTF::fastFree(v518, v519, v520, v521, v522, v523, v524, v525);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weakSetSize", 0xBuLL, v215, v216, v217, v218, v219, &v640);
  v220 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v221 = v640;
LABEL_116:
    *(_DWORD *)v221 += 2;
    goto LABEL_117;
  }
  v221 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v221)
    goto LABEL_116;
LABEL_117:
  v640 = v221;
  v229 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionWeakSetSize, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v231 = v640;
  v640 = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
    {
      WTF::StringImpl::~StringImpl(v231, v222, v223, v224, v225, v226, v227, v228);
      WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
    }
    else
    {
      *(_DWORD *)v231 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v220, v229, 4, v226, v227, v228, v230);
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, v232, v233, v234, v235, v236, v237, v238);
      WTF::fastFree(v534, v535, v536, v537, v538, v539, v540, v541);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"weakSetEntries", 0xEuLL, v234, v235, v236, v237, v238, &v640);
  v239 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v240 = v640;
LABEL_126:
    *(_DWORD *)v240 += 2;
    goto LABEL_127;
  }
  v240 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v240)
    goto LABEL_126;
LABEL_127:
  v640 = v240;
  v248 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionWeakSetEntries, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v250 = v640;
  v640 = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
    {
      WTF::StringImpl::~StringImpl(v250, v241, v242, v243, v244, v245, v246, v247);
      WTF::fastFree(v542, v543, v544, v545, v546, v547, v548, v549);
    }
    else
    {
      *(_DWORD *)v250 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v239, v248, 4, v245, v246, v247, v249);
  if (v239)
  {
    if (*(_DWORD *)v239 == 2)
    {
      WTF::StringImpl::~StringImpl(v239, v251, v252, v253, v254, v255, v256, v257);
      WTF::fastFree(v550, v551, v552, v553, v554, v555, v556, v557);
    }
    else
    {
      *(_DWORD *)v239 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"iteratorEntries", 0xFuLL, v253, v254, v255, v256, v257, &v640);
  v258 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v259 = v640;
LABEL_136:
    *(_DWORD *)v259 += 2;
    goto LABEL_137;
  }
  v259 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v259)
    goto LABEL_136;
LABEL_137:
  v640 = v259;
  v267 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionIteratorEntries, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v269 = v640;
  v640 = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
    {
      WTF::StringImpl::~StringImpl(v269, v260, v261, v262, v263, v264, v265, v266);
      WTF::fastFree(v558, v559, v560, v561, v562, v563, v564, v565);
    }
    else
    {
      *(_DWORD *)v269 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v258, v267, 4, v264, v265, v266, v268);
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
    {
      WTF::StringImpl::~StringImpl(v258, v270, v271, v272, v273, v274, v275, v276);
      WTF::fastFree(v566, v567, v568, v569, v570, v571, v572, v573);
    }
    else
    {
      *(_DWORD *)v258 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"evaluateWithScopeExtension", 0x1AuLL, v272, v273, v274, v275, v276, &v640);
  v277 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v278 = v640;
LABEL_146:
    *(_DWORD *)v278 += 2;
    goto LABEL_147;
  }
  v278 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v278)
    goto LABEL_146;
LABEL_147:
  v640 = v278;
  v286 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionEvaluateWithScopeExtension, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v288 = v640;
  v640 = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
    {
      WTF::StringImpl::~StringImpl(v288, v279, v280, v281, v282, v283, v284, v285);
      WTF::fastFree(v574, v575, v576, v577, v578, v579, v580, v581);
    }
    else
    {
      *(_DWORD *)v288 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v277, v286, 4, v283, v284, v285, v287);
  if (v277)
  {
    if (*(_DWORD *)v277 == 2)
    {
      WTF::StringImpl::~StringImpl(v277, v289, v290, v291, v292, v293, v294, v295);
      WTF::fastFree(v582, v583, v584, v585, v586, v587, v588, v589);
    }
    else
    {
      *(_DWORD *)v277 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"queryInstances", 0xEuLL, v291, v292, v293, v294, v295, &v640);
  v296 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v297 = v640;
LABEL_156:
    *(_DWORD *)v297 += 2;
    goto LABEL_157;
  }
  v297 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v297)
    goto LABEL_156;
LABEL_157:
  v640 = v297;
  v305 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionQueryInstances, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v307 = v640;
  v640 = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
    {
      WTF::StringImpl::~StringImpl(v307, v298, v299, v300, v301, v302, v303, v304);
      WTF::fastFree(v590, v591, v592, v593, v594, v595, v596, v597);
    }
    else
    {
      *(_DWORD *)v307 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v296, v305, 4, v302, v303, v304, v306);
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
    {
      WTF::StringImpl::~StringImpl(v296, v308, v309, v310, v311, v312, v313, v314);
      WTF::fastFree(v598, v599, v600, v601, v602, v603, v604, v605);
    }
    else
    {
      *(_DWORD *)v296 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"queryHolders", 0xCuLL, v310, v311, v312, v313, v314, &v640);
  v315 = v640;
  if (v640 && (*((_BYTE *)v640 + 16) & 0x20) == 0)
  {
    v316 = v640;
LABEL_166:
    *(_DWORD *)v316 += 2;
    goto LABEL_167;
  }
  v316 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v316)
    goto LABEL_166;
LABEL_167:
  v640 = v316;
  v324 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v640, (uint64_t)Inspector::jsInjectedScriptHostPrototypeFunctionQueryHolders, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v326 = v640;
  v640 = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 2)
    {
      WTF::StringImpl::~StringImpl(v326, v317, v318, v319, v320, v321, v322, v323);
      WTF::fastFree(v606, v607, v608, v609, v610, v611, v612, v613);
    }
    else
    {
      *(_DWORD *)v326 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v315, v324, 4, v321, v322, v323, v325);
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
    {
      WTF::StringImpl::~StringImpl(v315, v327, v328, v329, v330, v331, v332, v333);
      WTF::fastFree(v614, v615, v616, v617, v618, v619, v620, v621);
    }
    else
    {
      *(_DWORD *)v315 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"evaluate", 8uLL, v329, v330, v331, v332, v333, &v640);
  v334 = v640;
  v639 = v640;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v639, (uint64_t)Inspector::jsInjectedScriptHostPrototypeAttributeEvaluate, 0, (const JSC::PropertyTable *)0x14);
  if (v334)
  {
    if (*(_DWORD *)v334 == 2)
    {
      WTF::StringImpl::~StringImpl(v334, v335, v336, v337, v338, v339, v340, v341);
      WTF::fastFree(v622, v623, v624, v625, v626, v627, v628, v629);
    }
    else
    {
      *(_DWORD *)v334 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"savedResultAlias", 0x10uLL, v337, v338, v339, v340, v341, &v640);
  v342 = v640;
  v638 = v640;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v638, (uint64_t)Inspector::jsInjectedScriptHostPrototypeAttributeSavedResultAlias, 0, (const JSC::PropertyTable *)0x14);
  if (v342)
  {
    if (*(_DWORD *)v342 == 2)
    {
      WTF::StringImpl::~StringImpl(v342, v343, v344, v345, v346, v347, v348, v349);
      WTF::fastFree(v630, v631, v632, v633, v634, v635, v636, v637);
    }
    else
    {
      *(_DWORD *)v342 -= 2;
    }
  }
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionSubtype(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  char **v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v35);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v6 = *((_QWORD *)a2 + 6);
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
    return *((_QWORD *)v3 + 5255);
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) == 6)
    return *((_QWORD *)v3 + 5248);
  if (v6 >> 49)
    return *((_QWORD *)v3 + 5251);
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    v7 = *(unsigned __int8 *)(v6 + 5);
    if (v7 == 4)
      return *((_QWORD *)v3 + 5256);
    if (v7 >= 0x17)
    {
      if (v7 == 31)
      {
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x500000002;
        v15 = "error";
        goto LABEL_39;
      }
      if (v6 && v7 == 26)
      {
        v16 = *(_QWORD *)(v6 + 24);
        if ((v16 & 1) != 0)
          v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v16 + 5) != 8
          && ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v16 + 88) + 48) >> 14) - 1 <= 1)
        {
          v8 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v8 = 0x500000002;
          v15 = "class";
          goto LABEL_39;
        }
      }
      else if ((v7 & 0xFE) == 0x24 || v7 - 33 <= 1)
      {
LABEL_27:
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x500000002;
        v15 = "array";
LABEL_39:
        *(_QWORD *)(v8 + 8) = v15;
        *(_DWORD *)(v8 + 16) = 4;
        v36 = (WTF::StringImpl *)v8;
        v5 = JSC::jsNontrivialString((uint64_t)v3, (JSC::VM *)&v36, v9, v10, v11, v12, v13, v14);
        v25 = v36;
        v36 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        return v5;
      }
      v17 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C));
      if (v17 == &JSC::DateInstance::s_info)
      {
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x400000002;
        v15 = "date";
      }
      else if (v7 == 61)
      {
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x500000002;
        v15 = "proxy";
      }
      else if (v7 == 59)
      {
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x600000002;
        v15 = "regexp";
      }
      else
      {
        if (v17 != &JSC::JSWeakObjectRef::s_info)
        {
          switch(*(_BYTE *)(v6 + 5))
          {
            case '@':
            case 'C':
              goto LABEL_36;
            case 'E':
              v8 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v8 = 0x300000002;
              v15 = "map";
              goto LABEL_39;
            case 'F':
              v8 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v8 = 0x300000002;
              v15 = "set";
              goto LABEL_39;
            case 'G':
              v8 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v8 = 0x700000002;
              v15 = "weakmap";
              goto LABEL_39;
            case 'H':
              v8 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v8 = 0x700000002;
              v15 = "weakset";
              goto LABEL_39;
            default:
              if (v17 == &JSC::JSMapIterator::s_info || v17 == &JSC::JSSetIterator::s_info)
              {
LABEL_36:
                v8 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v8 = 0x800000002;
                v15 = "iterator";
                goto LABEL_39;
              }
              if (v7 - 39 > 0xA)
                return (*(uint64_t (**)(_QWORD, Inspector *))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), this);
              goto LABEL_27;
          }
        }
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v8 = 0x700000002;
        v15 = "weakref";
      }
      goto LABEL_39;
    }
  }
  return (*(uint64_t (**)(_QWORD, Inspector *))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), this);
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionFunctionDetails(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t Slow;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  const JSC::PropertyTable *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  WTF::AtomStringImpl *v92;
  int *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t SlowCase;
  JSC *v210;
  uint64_t v211;
  JSC::VM *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  unint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v212 = v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v212);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 26)
    return 10;
  v14 = *(_QWORD *)(v13 + 24);
  if ((v14 & 1) != 0)
  {
    v14 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v14 + 5) == 8 || (*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) & 0x80000000) != 0)
      return 10;
  }
  else if (*(_BYTE *)(v14 + 5) == 8 || (*(_DWORD *)(*(_QWORD *)(v14 + 88) + 16) & 0x80000000) != 0)
  {
    return 10;
  }
  v15 = *(_DWORD *)(v14 + 56);
  v16 = *(_DWORD *)(v14 + 60);
  if (v15 == -1)
    v17 = 0;
  else
    v17 = v15;
  if (v16 == -1)
    v18 = 0;
  else
    v18 = v16;
  v19 = *(_QWORD *)(v14 + 40);
  v20 = *(_DWORD *)(v19 + 112);
  if (!v20)
  {
    do
      v21 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v21 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    v20 = v21 + 1;
    *(_DWORD *)(v19 + 112) = v21 + 1;
    if (v21 == -1)
    {
      a3 = (JSC::CallFrame *)"void JSC::SourceProvider::getID()";
      a4 = 329;
      __break(0xC471u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
  }
  v22 = 0;
  do
  {
    v23 = (v20 % 0xA) | 0x30;
    *((_BYTE *)&v217 + v22-- + 4) = (v20 % 0xA) | 0x30;
    v24 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v24);
  if (v22 + 14 >= 15)
    goto LABEL_92;
  if (v22)
  {
    if ((unint64_t)-v22 >> 31)
      goto LABEL_101;
    v25 = WTF::fastCompactMalloc((WTF *)(20 - v22));
    v26 = (_BYTE *)(v25 + 20);
    *(_DWORD *)v25 = 2;
    *(_DWORD *)(v25 + 4) = -(int)v22;
    *(_QWORD *)(v25 + 8) = v25 + 20;
    *(_DWORD *)(v25 + 16) = 4;
    v215 = (WTF::StringImpl *)v25;
    if (v22 == -1)
      *v26 = v23;
    else
      memcpy(v26, (char *)&v217 + v22 + 5, -v22);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v215 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v27 = *((_QWORD *)this + 7);
  v28 = *(_QWORD *)(v27 + 15056);
  if (!v28)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v27 + 14936, *((JSC **)this + 7), 0x40uLL, 0, a5, a6, a7, a8);
    if (Slow)
      goto LABEL_34;
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x19869DBF4);
  }
  v29 = *(unsigned int *)(v28 + 60);
  Slow = *(_QWORD *)(v28 + 24);
  if (Slow < *(_QWORD *)(v28 + 32))
  {
LABEL_33:
    *(_QWORD *)(v28 + 24) = Slow + v29;
    goto LABEL_34;
  }
  Slow = *(_QWORD *)(v28 + 40);
  if ((Slow & 1) == 0)
  {
    v194 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v28 + 32) = Slow + HIDWORD(v194);
    *(_QWORD *)(v28 + 40) = Slow + (int)v194;
    goto LABEL_33;
  }
  v196 = *(_QWORD *)(v27 + 15056);
  v197 = v18;
  v198 = *(unsigned int *)(v28 + 60);
  JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v199 = v198;
  v18 = v197;
  Slow = JSC::LocalAllocator::allocateSlowCase(v196, v27 + 192, v199, 0, 0, v200, v201, v202);
LABEL_34:
  *(_DWORD *)Slow = 0;
  *(_DWORD *)Slow = *((_DWORD *)this + 212);
  *(_DWORD *)(Slow + 4) = 16783360;
  *(_OWORD *)(Slow + 8) = 0uLL;
  *(_OWORD *)(Slow + 24) = 0uLL;
  *(_OWORD *)(Slow + 40) = 0uLL;
  *(_QWORD *)(Slow + 56) = 0;
  if (*(_BYTE *)(v27 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"scriptId", 8uLL, a4, a5, a6, a7, a8, &v216);
  v31 = v216;
  v38 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v215, v32, v33, v34, v35, v36, v37);
  v216 = 0;
  v217 = Slow;
  v218 = -1;
  v39.n128_u64[0] = 0x100000001000000;
  v219 = 0x1000000;
  v220 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, (uint64_t)v11, (unint64_t)v31, v38, 0, (uint64_t)&v216, v40, v41, v39);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"lineNumber", 0xAuLL, v44, v45, v46, v47, v48, &v216);
  v49 = v216;
  v216 = 0;
  v217 = Slow;
  v218 = -1;
  v50.n128_u64[0] = 0x100000001000000;
  v219 = 0x1000000;
  v220 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, (uint64_t)v11, (unint64_t)v49, v17 | 0xFFFE000000000000, 0, (uint64_t)&v216, v51, v52, v50);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"columnNumber", 0xCuLL, v55, v56, v57, v58, v59, &v216);
  v60 = v216;
  v216 = 0;
  v217 = Slow;
  v218 = -1;
  v61.n128_u64[0] = 0x100000001000000;
  v219 = 0x1000000;
  v220 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, (uint64_t)v11, (unint64_t)v60, v18 | 0xFFFE000000000000, 0, (uint64_t)&v216, v62, v63, v61);
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v71 = (JSC *)*((_QWORD *)this + 7);
  v72 = *((_QWORD *)v71 + 1882);
  if (v72)
  {
    v73 = *(unsigned int *)(v72 + 60);
    v9 = *(_QWORD *)(v72 + 24);
    if (v9 < *(_QWORD *)(v72 + 32))
    {
LABEL_47:
      *(_QWORD *)(v72 + 24) = v9 + v73;
      goto LABEL_48;
    }
    v9 = *(_QWORD *)(v72 + 40);
    if ((v9 & 1) == 0)
    {
      v195 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(v72 + 48);
      *(_QWORD *)(v72 + 32) = v9 + HIDWORD(v195);
      *(_QWORD *)(v72 + 40) = v9 + (int)v195;
      goto LABEL_47;
    }
    v203 = (uint64_t)v71 + 192;
    v204 = *((_QWORD *)v71 + 1882);
    v205 = (JSC *)*((_QWORD *)this + 7);
    JSC::sanitizeStackForVM(v205, v64, v65, v66, v67, v68, v69, v70);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v204, v203, v73, 0, 0, v206, v207, v208);
    v71 = v205;
    v9 = SlowCase;
  }
  else
  {
    v210 = (JSC *)*((_QWORD *)this + 7);
    v211 = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v71 + 14936, v210, 0x40uLL, 0, v67, v68, v69, v70);
    v71 = v210;
    v9 = v211;
    if (!v211)
    {
      __break(0xC471u);
      JUMPOUT(0x19869DC3CLL);
    }
  }
LABEL_48:
  *(_DWORD *)v9 = 0;
  *(_DWORD *)v9 = *((_DWORD *)this + 212);
  *(_DWORD *)(v9 + 4) = 16783360;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  if (*((_BYTE *)v71 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"location", 8uLL, v66, v67, v68, v69, v70, &v216);
  v74 = v216;
  v216 = 0;
  v217 = v9;
  v218 = -1;
  v75.n128_u64[0] = 0x100000001000000;
  v219 = 0x1000000;
  v220 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v9, (uint64_t)v11, (unint64_t)v74, Slow, 0, (uint64_t)&v216, v76, v77, v75);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  JSC::JSFunction::name((JSC::JSFunction *)v13, v11, v79, v80, v81, v82, v83, v84, (int **)&v214, v85);
  if (v214)
  {
    if (*((_DWORD *)v214 + 1))
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, (uint64_t)v86, v87, v88, v89, v90, &v216);
      v157 = v216;
      v164 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v214, v158, v159, v160, v161, v162, v163);
      v216 = 0;
      v217 = v9;
      v218 = -1;
      v165.n128_u64[0] = 0x100000001000000;
      v219 = 0x1000000;
      v220 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v9, (uint64_t)v11, (unint64_t)v157, v164, 0, (uint64_t)&v216, v166, v167, v165);
      if (v157)
      {
        if (*(_DWORD *)v157 == 2)
        {
          WTF::StringImpl::~StringImpl(v157, v168, v169, (uint64_t)v86, v87, v88, v89, v90);
          WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
        }
        else
        {
          *(_DWORD *)v157 -= 2;
        }
      }
    }
  }
  JSC::JSObject::getDirect((_DWORD *)v13, v11, *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1192), v86, v87, v88, v89, v90);
  if (!v91)
    goto LABEL_66;
  v13 = v91;
  if ((v91 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v91 + 5) != 2)
    goto LABEL_66;
  v93 = *(int **)(v91 + 8);
  if ((v93 & 1) == 0)
  {
    if (v93)
      goto LABEL_59;
    goto LABEL_66;
  }
LABEL_93:
  v93 = *JSC::JSRopeString::resolveRope(v13, 0, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v93)
  {
LABEL_59:
    *v93 += 2;
    v213 = (WTF::StringImpl *)v93;
    if (v93[1])
    {
      WTF::AtomStringImpl::addLiteral((uint64_t)"displayName", 0xBuLL, a4, a5, a6, a7, a8, &v216);
      v94 = v216;
      v101 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v213, v95, v96, v97, v98, v99, v100);
      v216 = 0;
      v217 = v9;
      v218 = -1;
      v102.n128_u64[0] = 0x100000001000000;
      v219 = 0x1000000;
      v220 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v9, (uint64_t)v11, (unint64_t)v94, v101, 0, (uint64_t)&v216, v103, v104, v102);
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, v92, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
    }
    v105 = v213;
    v213 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
      {
        WTF::StringImpl::~StringImpl(v105, v92, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
      }
      else
      {
        *(_DWORD *)v105 -= 2;
      }
    }
  }
LABEL_66:
  v106 = v214;
  v214 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v92, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v215;
  v215 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v92, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  return v9;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionGetOwnPrivatePropertySymbols(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::SymbolImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  WTF *v46;
  uint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v62;
  JSC::VM *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;

  v10 = *((_QWORD *)this + 7);
  v63 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v63);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v13 = *((_QWORD *)a2 + 6);
  v12 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_7;
  v62 = *(_DWORD *)(v10 + 80);
  if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_7:
  if ((v13 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v13 + 5) > 0x16u)
  {
    v20 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = (char *)v20 + 24;
    *((_QWORD *)v20 + 2) = 20;
    v64 = v20;
    v65 = 0;
    v66 = v10;
    v67 = 3;
    JSC::JSObject::getOwnIndexedPropertyNames(v13, v21, (uint64_t)&v64, 0, v22, v23, v24, v25);
    JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)v13, (uint64_t)this, (uint64_t)&v64, 0);
    v33 = *((unsigned int *)v64 + 5);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = (uint64_t *)*((_QWORD *)v64 + 1);
      v36 = 8 * v33;
      do
      {
        v26 = *v35;
        if (*v35)
        {
          v37 = *(_DWORD *)(v26 + 16);
          if ((v37 & 0x20) != 0 && (*(_BYTE *)(v26 + 36) & 4) != 0 && *(_DWORD *)(v26 + 4))
          {
            v38 = *(unsigned __int8 **)(v26 + 8);
            v39 = (v37 & 4) != 0 ? *v38 : *(unsigned __int16 *)v38;
            if (v39 == 35)
            {
              v40 = JSC::Symbol::create((JSC::Symbol *)v10, (JSC::VM *)v26, v27, v28, v29, v30, v31, v32);
              JSC::JSObject::putDirectIndex(v12, (unint64_t)this, v34, v40, v41, v42, v43, v44, v45);
              v34 = (JSC::VM *)((_DWORD)v34 + 1);
            }
          }
        }
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
    if (v65)
      WTF::fastFree(v65 - 16, (void *)v26, (uint64_t)v27, v28, v29, v30, v31, v32);
    v46 = v64;
    v64 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        v48 = *((unsigned int *)v46 + 5);
        if ((_DWORD)v48)
        {
          v49 = (WTF::StringImpl **)*((_QWORD *)v46 + 1);
          v50 = 8 * v48;
          do
          {
            v51 = *v49;
            *v49 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
              {
                WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)v26, (uint64_t)v27, v28, v29, v30, v31, v32);
                WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
              }
              else
              {
                *(_DWORD *)v51 -= 2;
              }
            }
            ++v49;
            v50 -= 8;
          }
          while (v50);
        }
        v60 = *((_QWORD *)v46 + 1);
        if ((WTF *)((char *)v46 + 24) != (WTF *)v60 && v60 != 0)
        {
          *((_QWORD *)v46 + 1) = 0;
          *((_DWORD *)v46 + 4) = 0;
          WTF::fastFree(v60, (void *)v26, (uint64_t)v27, v28, v29, v30, v31, v32);
        }
        WTF::fastFree((unint64_t)v46, (void *)v26, (uint64_t)v27, v28, v29, v30, v31, v32);
      }
      else
      {
        --*(_DWORD *)v46;
      }
    }
  }
  return v12;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionGetInternalProperties(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int32x4_t v94;
  unint64_t v95;
  Inspector *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int32x4_t v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int32x4_t v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int32x4_t v229;
  WTF::AtomStringImpl *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  int v238;
  int v239;
  int v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int32x4_t v267;
  WTF::AtomStringImpl *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  WTF::StringImpl *v275;
  uint64_t v276;
  int v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  const char *v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int32x4_t v342;
  WTF::AtomStringImpl *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  JSC::VM *v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;

  v4 = *((_QWORD *)this + 7);
  v371 = (JSC::VM *)v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v371);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v7 = *((_QWORD *)a2 + 6);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, Inspector *, unint64_t))(**(_QWORD **)(v5 + 16) + 24))(*(_QWORD *)(v5 + 16), v4, this, v7);
  if (v6)
    return v6;
  if ((v7 & 0xFFFE000000000002) != 0)
    return 10;
  v13 = *(unsigned __int8 *)(v7 + 5);
  if (v13 == 68)
  {
    v6 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v8, v9, v10, v11, v12);
    if (*(_DWORD *)(v4 + 80))
    {
      v193 = *(_DWORD *)(v4 + 80);
      if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v14, v15, v16, v17, v18, v19);
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    v20 = *(_QWORD *)(v7 + 16);
    if (v20 < 0xFFFE000000000000 || (v20 & 0x80000000) != 0)
      LODWORD(v20) = COERCE_DOUBLE(v20 - 0x2000000000000);
    v21 = v20 & 3;
    if (v21 == 2)
    {
      v59 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v59 = 0x600000002;
      *(_QWORD *)(v59 + 8) = "status";
      *(_DWORD *)(v59 + 16) = 4;
      v373 = (WTF::StringImpl *)v59;
      v51 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v51 = 0x800000002;
      v58 = "rejected";
    }
    else
    {
      if (v21 != 1)
      {
        if (v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19869E48CLL);
        }
        v22 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v22 = 0x600000002;
        *(_QWORD *)(v22 + 8) = "status";
        *(_DWORD *)(v22 + 16) = 4;
        v373 = (WTF::StringImpl *)v22;
        v23 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v23 = 0x700000002;
        *(_QWORD *)(v23 + 8) = "pending";
        *(_DWORD *)(v23 + 16) = 4;
        v372 = (WTF::StringImpl *)v23;
        v30 = JSC::jsNontrivialString(v4, (JSC::VM *)&v372, v24, v25, v26, v27, v28, v29);
        v36 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v30, v31, v32, v33, v34, v35);
        JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v36, v37, v38, v39, v40, v41);
        v49 = v372;
        v372 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
          }
          else
          {
            *(_DWORD *)v49 -= 2;
          }
        }
        goto LABEL_33;
      }
      v50 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v50 = 0x600000002;
      *(_QWORD *)(v50 + 8) = "status";
      *(_DWORD *)(v50 + 16) = 4;
      v373 = (WTF::StringImpl *)v50;
      v51 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v51 = 0x900000002;
      v58 = "fulfilled";
    }
    *(_QWORD *)(v51 + 8) = v58;
    *(_DWORD *)(v51 + 16) = 4;
    v372 = (WTF::StringImpl *)v51;
    v60 = JSC::jsNontrivialString(v4, (JSC::VM *)&v372, v52, v53, v54, v55, v56, v57);
    v66 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v60, v61, v62, v63, v64, v65);
    JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v66, v67, v68, v69, v70, v71);
    v79 = v372;
    v372 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
    }
    v80 = v373;
    v373 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::~StringImpl(v80, v72, v73, v74, v75, v76, v77, v78);
        WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      }
      else
      {
        *(_DWORD *)v80 -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 80))
    {
      v194 = *(_DWORD *)(v4 + 80);
      if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v73, v74, v75, v76, v77, v78);
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    v81 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v81 = 0x600000002;
    *(_QWORD *)(v81 + 8) = "result";
    *(_DWORD *)(v81 + 16) = 4;
    v373 = (WTF::StringImpl *)v81;
    v87 = *(_QWORD *)(v7 + 16);
    if (v87 < 0xFFFE000000000000 || (v87 & 0x80000000) != 0)
      LODWORD(v87) = COERCE_DOUBLE(v87 - 0x2000000000000);
    if ((v87 & 3) == 0)
    {
      v88 = 10;
      goto LABEL_31;
    }
LABEL_29:
    v88 = *(_QWORD *)(v7 + 24);
LABEL_31:
    v89 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v88, v82, v83, v84, v85, v86);
    v95 = v6;
    v96 = this;
    v97 = 1;
    goto LABEL_32;
  }
  v132 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C));
  if (v132 == &JSC::JSBoundFunction::s_info)
  {
    v6 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v8, v9, v10, v11, v12);
    if (*(_DWORD *)(v4 + 80))
    {
      v239 = *(_DWORD *)(v4 + 80);
      if ((v239 & 0x27) != 0 && (v239 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v133, v134, v135, v136, v137, v138);
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    v139 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v139 = 0xE00000002;
    *(_QWORD *)(v139 + 8) = "targetFunction";
    *(_DWORD *)(v139 + 16) = 4;
    v373 = (WTF::StringImpl *)v139;
    v145 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, *(_QWORD *)(v7 + 32), v140, v141, v142, v143, v144);
    JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v145, v146, v147, v148, v149, v150);
    v158 = v373;
    v373 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
      {
        WTF::StringImpl::~StringImpl(v158, v151, v152, v153, v154, v155, v156, v157);
        WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
      }
      else
      {
        *(_DWORD *)v158 -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 80))
    {
      v240 = *(_DWORD *)(v4 + 80);
      if ((v240 & 0x27) != 0 && (v240 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v152, v153, v154, v155, v156, v157);
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    v159 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v159 = 0x900000002;
    *(_QWORD *)(v159 + 8) = "boundThis";
    *(_DWORD *)(v159 + 16) = 4;
    v373 = (WTF::StringImpl *)v159;
    v165 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, *(_QWORD *)(v7 + 40), v160, v161, v162, v163, v164);
    JSC::JSObject::putDirectIndex(v6, (unint64_t)this, (JSC::VM *)1, v165, v166, v167, v168, v169, v170);
    v178 = v373;
    v373 = 0;
    if (v178)
    {
      if (*(_DWORD *)v178 == 2)
      {
        WTF::StringImpl::~StringImpl(v178, v171, v172, v173, v174, v175, v176, v177);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        *(_DWORD *)v178 -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 80))
    {
      v241 = *(_DWORD *)(v4 + 80);
      if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v172, v173, v174, v175, v176, v177);
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    if (!*(_DWORD *)(v7 + 88))
      return v6;
    v179 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v179 = 0x900000002;
    *(_QWORD *)(v179 + 8) = "boundArgs";
    *(_DWORD *)(v179 + 16) = 4;
    v373 = (WTF::StringImpl *)v179;
    v187 = JSC::JSBoundFunction::boundArgsCopy((JSC::JSBoundFunction *)v7, this, v186, v180, v181, v182, v183, v184, v185);
    v89 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v187, v188, v189, v190, v191, v192);
    v95 = v6;
    v96 = this;
    v97 = 2;
LABEL_32:
    JSC::JSObject::putDirectIndex(v95, (unint64_t)v96, (JSC::VM *)v97, v89, v90, v91, v92, v93, v94);
LABEL_33:
    v98 = v373;
    v373 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
    return v6;
  }
  if (v132 != &JSC::JSRemoteFunction::s_info)
  {
    if (v13 == 61)
    {
      v6 = JSC::constructEmptyArray((unint64_t)this, 0, 2uLL, 0, v8, v9, v10, v11, v12);
      if (*(_DWORD *)(v4 + 80))
      {
        v295 = *(_DWORD *)(v4 + 80);
        if ((v295 & 0x27) != 0 && (v295 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v250, v251, v252, v253, v254, v255);
        if (*(_QWORD *)(v4 + 16))
          return 0;
      }
      v256 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v256 = 0x600000002;
      *(_QWORD *)(v256 + 8) = "target";
      *(_DWORD *)(v256 + 16) = 4;
      v373 = (WTF::StringImpl *)v256;
      v262 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, *(_QWORD *)(v7 + 16), v257, v258, v259, v260, v261);
      JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v262, v263, v264, v265, v266, v267);
      v275 = v373;
      v373 = 0;
      if (v275)
      {
        if (*(_DWORD *)v275 == 2)
        {
          WTF::StringImpl::~StringImpl(v275, v268, v269, v270, v271, v272, v273, v274);
          WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
        }
        else
        {
          *(_DWORD *)v275 -= 2;
        }
      }
      if (*(_DWORD *)(v4 + 80))
      {
        v296 = *(_DWORD *)(v4 + 80);
        if ((v296 & 0x27) != 0 && (v296 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v269, v270, v271, v272, v273, v274);
        if (*(_QWORD *)(v4 + 16))
          return 0;
      }
      v276 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v276 = 0x700000002;
      *(_QWORD *)(v276 + 8) = "handler";
      *(_DWORD *)(v276 + 16) = 4;
      v373 = (WTF::StringImpl *)v276;
      goto LABEL_29;
    }
    if (v132 == &JSC::JSWeakObjectRef::s_info)
    {
      v6 = JSC::constructEmptyArray((unint64_t)this, 0, 1uLL, 0, v8, v9, v10, v11, v12);
      if (*(_DWORD *)(v4 + 80))
      {
        v312 = *(_DWORD *)(v4 + 80);
        if ((v312 & 0x27) != 0 && (v312 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v286, v287, v288, v289, v290, v291);
        if (*(_QWORD *)(v4 + 16))
          return 0;
      }
      v292 = *(_QWORD *)(v7 + 24);
      if (v292)
      {
        v293 = *(_QWORD *)(v4 + 93432);
        if (v293 != *(_QWORD *)(v7 + 16))
        {
          *(_QWORD *)(v7 + 16) = v293;
          if (*(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v7 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v4 + 192, v7);
            v292 = *(_QWORD *)(v7 + 24);
          }
        }
      }
      v294 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v294 = 0x600000002;
      *(_QWORD *)(v294 + 8) = "target";
      *(_DWORD *)(v294 + 16) = 4;
      v373 = (WTF::StringImpl *)v294;
      if (v292)
        v223 = v292;
      else
        v223 = 10;
      goto LABEL_68;
    }
    if (v13 >= 0x17)
    {
      if (v13 == 64 && v7)
      {
        v297 = *(_QWORD *)(v7 + 32);
        if (v297 < 0xFFFE000000000000 || (v297 & 0x80000000) != 0)
        {
          v12.n128_u64[0] = v297 - 0x2000000000000;
          LODWORD(v297) = COERCE_DOUBLE(v297 - 0x2000000000000);
        }
        v298 = *(_QWORD *)(v7 + 24);
        v6 = JSC::constructEmptyArray((unint64_t)this, 0, 2uLL, 0, v8, v9, v10, v11, v12);
        if (*(_DWORD *)(v4 + 80))
        {
          v366 = *(_DWORD *)(v4 + 80);
          if ((v366 & 0x27) != 0 && (v366 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v299, v300, v301, v302, v303, v304);
          if (*(_QWORD *)(v4 + 16))
            return 0;
        }
        v305 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v305 = 0x500000002;
        v311 = "array";
        goto LABEL_152;
      }
      if (v132 == &JSC::JSMapIterator::s_info)
      {
        v297 = *(_QWORD *)(v7 + 40);
        if (v297 < 0xFFFE000000000000 || (v297 & 0x80000000) != 0)
        {
          v12.n128_u64[0] = v297 - 0x2000000000000;
          LODWORD(v297) = COERCE_DOUBLE(v297 - 0x2000000000000);
        }
        v298 = *(_QWORD *)(v7 + 24);
        v6 = JSC::constructEmptyArray((unint64_t)this, 0, 2uLL, 0, v8, v9, v10, v11, v12);
        if (*(_DWORD *)(v4 + 80))
        {
          v368 = *(_DWORD *)(v4 + 80);
          if ((v368 & 0x27) != 0 && (v368 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v325, v326, v327, v328, v329, v330);
          if (*(_QWORD *)(v4 + 16))
            return 0;
        }
        v305 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v305 = 0x300000002;
        v311 = "map";
      }
      else
      {
        if (v132 != &JSC::JSSetIterator::s_info)
        {
          if (v13 == 67)
          {
            v6 = JSC::constructEmptyArray((unint64_t)this, 0, 1uLL, 0, v8, v9, v10, v11, v12);
            if (*(_DWORD *)(v4 + 80))
            {
              v367 = *(_DWORD *)(v4 + 80);
              if ((v367 & 0x27) != 0 && (v367 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v313, v314, v315, v316, v317, v318);
              if (*(_QWORD *)(v4 + 16))
                return 0;
            }
            v319 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v319 = 0x600000002;
            *(_QWORD *)(v319 + 8) = "string";
            *(_DWORD *)(v319 + 16) = 4;
            v373 = (WTF::StringImpl *)v319;
            v89 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, *(_QWORD *)(v7 + 24), v320, v321, v322, v323, v324);
            v95 = v6;
            v96 = this;
            v97 = 0;
            goto LABEL_32;
          }
          return 10;
        }
        v297 = *(_QWORD *)(v7 + 40);
        if (v297 < 0xFFFE000000000000 || (v297 & 0x80000000) != 0)
        {
          v12.n128_u64[0] = v297 - 0x2000000000000;
          LODWORD(v297) = COERCE_DOUBLE(v297 - 0x2000000000000);
        }
        v298 = *(_QWORD *)(v7 + 24);
        v6 = JSC::constructEmptyArray((unint64_t)this, 0, 2uLL, 0, v8, v9, v10, v11, v12);
        if (*(_DWORD *)(v4 + 80))
        {
          v369 = *(_DWORD *)(v4 + 80);
          if ((v369 & 0x27) != 0 && (v369 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v331, v332, v333, v334, v335, v336);
          if (*(_QWORD *)(v4 + 16))
            return 0;
        }
        v305 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v305 = 0x300000002;
        v311 = "set";
      }
LABEL_152:
      *(_QWORD *)(v305 + 8) = v311;
      *(_DWORD *)(v305 + 16) = 4;
      v373 = (WTF::StringImpl *)v305;
      v337 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v298, v306, v307, v308, v309, v310);
      JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v337, v338, v339, v340, v341, v342);
      v350 = v373;
      v373 = 0;
      if (v350)
      {
        if (*(_DWORD *)v350 == 2)
        {
          WTF::StringImpl::~StringImpl(v350, v343, v344, v345, v346, v347, v348, v349);
          WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
        }
        else
        {
          *(_DWORD *)v350 -= 2;
        }
      }
      if (*(_DWORD *)(v4 + 80))
      {
        v370 = *(_DWORD *)(v4 + 80);
        if ((v370 & 0x27) != 0 && (v370 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v344, v345, v346, v347, v348, v349);
        if (*(_QWORD *)(v4 + 16))
          return 0;
      }
      v351 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v351 = 0x400000002;
      *(_QWORD *)(v351 + 8) = "kind";
      *(_DWORD *)(v351 + 16) = 4;
      v373 = (WTF::StringImpl *)v351;
      v88 = Inspector::JSInjectedScriptHost::getInternalProperties(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(v4, v297, v352, v353, v354, v355, v356, v357);
      goto LABEL_31;
    }
    return 10;
  }
  v6 = JSC::constructEmptyArray((unint64_t)this, 0, 1uLL, 0, v8, v9, v10, v11, v12);
  if (*(_DWORD *)(v4 + 80))
  {
    v277 = *(_DWORD *)(v4 + 80);
    if ((v277 & 0x27) != 0 && (v277 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v211, v212, v213, v214, v215, v216);
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  v217 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v217 = 0xE00000002;
  *(_QWORD *)(v217 + 8) = "targetFunction";
  *(_DWORD *)(v217 + 16) = 4;
  v373 = (WTF::StringImpl *)v217;
  v223 = *(_QWORD *)(v7 + 32);
LABEL_68:
  v224 = Inspector::constructInternalProperty((uint64_t)this, (JSC::VM *)&v373, v223, v218, v219, v220, v221, v222);
  JSC::JSObject::putDirectIndex(v6, (unint64_t)this, 0, v224, v225, v226, v227, v228, v229);
  v237 = v373;
  v373 = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
    {
      WTF::StringImpl::~StringImpl(v237, v230, v231, v232, v233, v234, v235, v236);
      WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
    }
    else
    {
      *(_DWORD *)v237 -= 2;
    }
  }
  if (*(_DWORD *)(v4 + 80))
  {
    v238 = *(_DWORD *)(v4 + 80);
    if ((v238 & 0x27) != 0 && (v238 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v231, v232, v233, v234, v235, v236);
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  return v6;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionInternalConstructorName(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v38);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v12 = *((_QWORD *)a2 + 6);
  v39 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(v12 + 5);
    if (v13 >= 0x17)
    {
      if (v13 - 51 > 5)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 8);
    goto LABEL_8;
  }
  if (v12 >> 49)
  {
    v37 = JSC::constructNumber((uint64_t)this, (JSC::VM *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v37 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v12, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else if ((v12 & 0xFFFE000000000002) != 0)
  {
    v37 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v39, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v12 + 5) > 0x16u)
      goto LABEL_8;
    v37 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v12 = v37;
LABEL_8:
  JSC::JSObject::calculatedClassName((JSC::JSObject *)v12, (JSC::JSObject *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, &v39, a9);
  v11 = JSC::jsString((uint64_t)v9, (JSC::VM *)&v39, v14, v15, v16, v17, v18, v19);
  v27 = v39;
  v39 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v11;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionIsHTMLAllCollection(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16)))
    return 7;
  return 6;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionIsPromiseRejectedWithNativeGetterTypeError(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  JSC::VM *v15;
  JSC::VM *v16;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v15);
  }
  v16 = v3;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError first argument must be a Promise.", 96);
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v5 + 5) != 68)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError first argument must be a Promise.", 96);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 0xFFFE000000000000 || (v6 & 0x80000000) != 0)
    LOBYTE(v6) = COERCE_DOUBLE(v6 - 0x2000000000000);
  if ((v6 & 3) == 0)
    return 6;
  v8 = *(_QWORD *)(v5 + 24);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 6;
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &JSC::ErrorInstance::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &JSC::ErrorInstance::s_info && v11 != 0);
  }
  if (!v10)
    return 6;
  if ((*(_BYTE *)(v8 + 59) & 8) != 0)
    return 7;
  return 6;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionProxyTargetValue(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t result;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  result = *((_QWORD *)a2 + 6);
  if ((result & 0xFFFE000000000002) != 0 || *(_BYTE *)(result + 5) != 61)
    return 10;
  do
    result = *(_QWORD *)(result + 16);
  while (result && *(_BYTE *)(result + 5) == 61);
  return result;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionWeakRefTargetValue(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;

  v3 = *((_QWORD *)this + 7);
  v16 = (JSC::VM *)v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v16);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v6 = *((_QWORD *)a2 + 6);
  if ((v6 & 0xFFFE000000000002) != 0
    || &JSC::JSWeakObjectRef::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C)))
  {
    return 10;
  }
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v3 + 93432);
    if (v8 != *(_QWORD *)(v6 + 16))
    {
      *(_QWORD *)(v6 + 16) = v8;
      if (*(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(v6 + 7))
      {
        v11 = v6;
        v15 = v3;
        JSC::Heap::writeBarrierSlowPath(v3 + 192, v6);
        v3 = v15;
        v7 = *(_QWORD *)(v11 + 24);
      }
    }
  }
  if (&JSC::JSWeakObjectRef::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C)))
    return v7;
  v9 = (_QWORD *)(v3 + 93432);
  v10 = v3 + 192;
  do
  {
    result = *(_QWORD *)(v7 + 24);
    if (*v9 != *(_QWORD *)(v7 + 16))
    {
      *(_QWORD *)(v7 + 16) = *v9;
      if (*(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(v7 + 7))
      {
        v13 = v10;
        v14 = v3;
        v12 = v9;
        JSC::Heap::writeBarrierSlowPath(v10, v7);
        v9 = v12;
        v10 = v13;
        v3 = v14;
        result = *(_QWORD *)(v7 + 24);
      }
    }
    v7 = result;
  }
  while (&JSC::JSWeakObjectRef::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C)));
  return result;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionWeakMapSize(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v7);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v5 + 5) != 71)
    return 10;
  v6 = *(unsigned int *)(v5 + 28);
  if ((v6 & 0x80000000) != 0)
    return COERCE__INT64((double)v6) + 0x2000000000000;
  else
    return v6 | 0xFFFE000000000000;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionWeakMapEntries(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSObject *v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  JSC *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int32x4_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  JSC *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t SlowCase;
  JSC *v85;
  uint64_t Slow;
  double v87;
  int v88;
  unint64_t v90;
  JSC::VM *v91;
  _BYTE v92[8];
  uint64_t v93;
  char *v94;
  _OWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;

  v9 = *((_QWORD *)this + 7);
  v91 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v91);
  }
  v11 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 71)
    {
      v92[0] = 0;
      v93 = 0x800000000;
      v94 = (char *)v95 + 8;
      memset(v95, 0, sizeof(v95));
      v96 = 0;
      if (v11 <= 1)
      {
        v97 = 10;
      }
      else
      {
        v13 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
        v97 = (uint64_t)v13;
        if ((unint64_t)v13 >= 0xFFFE000000000000)
        {
          v14 = (double)(int)v13;
          goto LABEL_9;
        }
        v90 = (unint64_t)v13 - 0x2000000000000;
        if (v90 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v87 = *(double *)&v90;
          goto LABEL_47;
        }
      }
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v97, this, (uint64_t)a3, a4, a5, a6, a7, a8, (int8x16_t)0);
LABEL_47:
      v14 = trunc(v87 + 0.0);
LABEL_9:
      JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::takeSnapshot((uint64_t *)v12, (uint64_t)v92, fmax(v14, 0.0), a4, a5, a6, a7, a8);
      v27 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v15, v16, v17, v18, v19);
      if (*(_DWORD *)(v9 + 80))
      {
        v88 = *(_DWORD *)(v9 + 80);
        if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
        if (*(_QWORD *)(v9 + 16))
        {
LABEL_51:
          v27 = 0;
          goto LABEL_52;
        }
      }
      if (!(_DWORD)v93)
      {
LABEL_52:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v93, v20, v21, v22, v23, v24, v25, v26);
        return v27;
      }
      v28 = 0;
      v29 = 2;
      while (1)
      {
        v30 = (JSC *)*((_QWORD *)this + 7);
        v31 = *((_QWORD *)v30 + 1882);
        if (v31)
        {
          v32 = *(unsigned int *)(v31 + 60);
          v33 = *(_QWORD *)(v31 + 24);
          if (v33 < *(_QWORD *)(v31 + 32))
            goto LABEL_14;
          v33 = *(_QWORD *)(v31 + 40);
          if ((v33 & 1) == 0)
          {
            v76 = *(_QWORD *)(v33 + 8) ^ *(_QWORD *)(v31 + 48);
            *(_QWORD *)(v31 + 32) = v33 + HIDWORD(v76);
            *(_QWORD *)(v31 + 40) = v33 + (int)v76;
LABEL_14:
            *(_QWORD *)(v31 + 24) = v33 + v32;
            goto LABEL_15;
          }
          v78 = (uint64_t)v30 + 192;
          v79 = (JSC *)*((_QWORD *)this + 7);
          v80 = *(unsigned int *)(v31 + 60);
          JSC::sanitizeStackForVM(v79, (JSC::VM *)v20, v21, v22, v23, v24, v25, v26);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v31, v78, v80, 0, 0, v81, v82, v83);
          v30 = v79;
          v33 = SlowCase;
        }
        else
        {
          v85 = (JSC *)*((_QWORD *)this + 7);
          Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v30 + 14936, v85, 0x40uLL, 0, v23, v24, v25, v26);
          v30 = v85;
          v33 = Slow;
          if (!Slow)
          {
            __break(0xC471u);
            JUMPOUT(0x19869F5A4);
          }
        }
LABEL_15:
        *(_DWORD *)v33 = 0;
        *(_DWORD *)v33 = *((_DWORD *)this + 212);
        *(_DWORD *)(v33 + 4) = 16783360;
        *(_OWORD *)(v33 + 8) = 0u;
        *(_OWORD *)(v33 + 24) = 0u;
        *(_OWORD *)(v33 + 40) = 0u;
        *(_QWORD *)(v33 + 56) = 0;
        if (*((_BYTE *)v30 + 755))
          __dmb(0xAu);
        v34 = v29 - 2;
        WTF::AtomStringImpl::addLiteral((uint64_t)"key", 3uLL, v22, v23, v24, v25, v26, &v97);
        v38 = (WTF::StringImpl *)v97;
        if (v93 <= v29 - 2)
          v39 = 10;
        else
          v39 = *(_QWORD *)&v94[8 * v28];
        v97 = 0;
        v98 = v33;
        v99 = -1;
        v37.n128_u64[0] = 0x100000001000000;
        v100 = 0x1000000;
        v101 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v33, v9, (unint64_t)v38, v39, 0, (uint64_t)&v97, v35, v36, v37);
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v42, v43, v44, v45, v46, &v97);
        v50 = (WTF::StringImpl *)v97;
        if (v93 <= v29 - 1)
          v51 = 10;
        else
          v51 = *(_QWORD *)&v94[8 * v29 - 8];
        v97 = 0;
        v98 = v33;
        v99 = -1;
        v49.n128_u64[0] = 0x100000001000000;
        v100 = 0x1000000;
        v101 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v33, v9, (unint64_t)v50, v51, 0, (uint64_t)&v97, v47, v48, v49);
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::~StringImpl(v50, v52, v53, v54, v55, v56, v57, v58);
            WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
        JSC::JSObject::putDirectIndex(v27, (unint64_t)this, (JSC::VM *)(v34 >> 1), v33, v55, v56, v57, v58, v59);
        if (*(_DWORD *)(v9 + 80))
        {
          v77 = *(_DWORD *)(v9 + 80);
          if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_51;
        }
        v28 = v29;
        v29 += 2;
        if (v93 <= v34 + 2)
          goto LABEL_52;
      }
    }
  }
  return 10;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionWeakSetSize(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v7);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v5 + 5) != 72)
    return 10;
  v6 = *(unsigned int *)(v5 + 28);
  if ((v6 & 0x80000000) != 0)
    return COERCE__INT64((double)v6) + 0x2000000000000;
  else
    return v6 | 0xFFFE000000000000;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionWeakSetEntries(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSObject *v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  JSC *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t SlowCase;
  JSC *v62;
  uint64_t Slow;
  double v64;
  int v65;
  unint64_t v67;
  JSC *v68;
  JSC::VM *v69;
  _BYTE v70[8];
  uint64_t v71;
  char *v72;
  _OWORD v73[4];
  uint64_t v74;
  JSC::JSObject *v75[2];
  int v76;
  int v77;
  uint64_t v78;

  v9 = *((_QWORD *)this + 7);
  v69 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v69);
  }
  v11 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 72)
    {
      v70[0] = 0;
      v71 = 0x800000000;
      v72 = (char *)v73 + 8;
      memset(v73, 0, sizeof(v73));
      v74 = 0;
      if (v11 <= 1)
      {
        v75[0] = (JSC::JSObject *)10;
      }
      else
      {
        v13 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
        v75[0] = v13;
        if ((unint64_t)v13 >= 0xFFFE000000000000)
        {
          v14 = (double)(int)v13;
          goto LABEL_9;
        }
        v67 = (unint64_t)v13 - 0x2000000000000;
        if (v67 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v64 = *(double *)&v67;
          goto LABEL_40;
        }
      }
      JSC::JSValue::toNumberSlowCase(v75, this, (uint64_t)a3, a4, a5, a6, a7, a8, (int8x16_t)0);
LABEL_40:
      v14 = trunc(v64 + 0.0);
LABEL_9:
      JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::takeSnapshot((uint64_t *)v12, (uint64_t)v70, fmax(v14, 0.0), a4, a5, a6, a7, a8);
      v27 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v15, v16, v17, v18, v19);
      if (*(_DWORD *)(v9 + 80))
      {
        v65 = *(_DWORD *)(v9 + 80);
        if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
        if (*(_QWORD *)(v9 + 16))
        {
LABEL_44:
          v27 = 0;
          goto LABEL_45;
        }
      }
      if (!(_DWORD)v71)
      {
LABEL_45:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v71, v20, v21, v22, v23, v24, v25, v26);
        return v27;
      }
      v28 = 0;
      while (1)
      {
        v29 = (JSC *)*((_QWORD *)this + 7);
        v30 = *((_QWORD *)v29 + 1882);
        if (v30)
        {
          v31 = *(unsigned int *)(v30 + 60);
          v32 = *(_QWORD *)(v30 + 24);
          if (v32 < *(_QWORD *)(v30 + 32))
            goto LABEL_14;
          v32 = *(_QWORD *)(v30 + 40);
          if ((v32 & 1) == 0)
          {
            v54 = *(_QWORD *)(v32 + 8) ^ *(_QWORD *)(v30 + 48);
            *(_QWORD *)(v30 + 32) = v32 + HIDWORD(v54);
            *(_QWORD *)(v30 + 40) = v32 + (int)v54;
LABEL_14:
            *(_QWORD *)(v30 + 24) = v32 + v31;
            goto LABEL_15;
          }
          v56 = (uint64_t)v29 + 192;
          v68 = (JSC *)*((_QWORD *)this + 7);
          v57 = *(unsigned int *)(v30 + 60);
          JSC::sanitizeStackForVM(v68, (JSC::VM *)v20, v21, v22, v23, v24, v25, v26);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v56, v57, 0, 0, v58, v59, v60);
          v29 = v68;
          v32 = SlowCase;
        }
        else
        {
          v62 = (JSC *)*((_QWORD *)this + 7);
          Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v29 + 14936, v62, 0x40uLL, 0, v23, v24, v25, v26);
          v29 = v62;
          v32 = Slow;
          if (!Slow)
          {
            __break(0xC471u);
            JUMPOUT(0x19869FA24);
          }
        }
LABEL_15:
        *(_DWORD *)v32 = 0;
        *(_DWORD *)v32 = *((_DWORD *)this + 212);
        *(_DWORD *)(v32 + 4) = 16783360;
        *(_OWORD *)(v32 + 8) = 0u;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_QWORD *)(v32 + 56) = 0;
        if (*((_BYTE *)v29 + 755))
          __dmb(0xAu);
        WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v22, v23, v24, v25, v26, v75);
        v36 = v75[0];
        if (v28 >= v71)
          v37 = 10;
        else
          v37 = *(_QWORD *)&v72[8 * v28];
        v75[0] = 0;
        v75[1] = (JSC::JSObject *)v32;
        v76 = -1;
        v35.n128_u64[0] = 0x100000001000000;
        v77 = 0x1000000;
        v78 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v32, v9, (unint64_t)v36, v37, 0, (uint64_t)v75, v33, v34, v35);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v38, v39, v40, v41, v42, v43, v44);
            WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        JSC::JSObject::putDirectIndex(v27, (unint64_t)this, (JSC::VM *)v28, v32, v41, v42, v43, v44, v45);
        if (*(_DWORD *)(v9 + 80))
        {
          v55 = *(_DWORD *)(v9 + 80);
          if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_44;
        }
        if (++v28 >= v71)
          goto LABEL_45;
      }
    }
  }
  return 10;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionIteratorEntries(Inspector *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t SlowCase;
  int v18;
  JSC::VM *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  JSC::JSObject *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::VM *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  _BOOL4 v86;
  uint64_t v87;
  JSC::VM *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t Slow;
  WTF::StringImpl *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int32x4_t v111;
  uint64_t v112;
  uint64_t v113;
  int8x16_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int8x16_t **v141;
  int v142;
  _WORD *v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  char **v162;
  JSC::VM *v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  JSC::Heap **v167;
  JSC::Heap *v168;
  int v169;
  unsigned __int16 *v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  JSC::VMTraps *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  JSC::VM *v182;
  uint64_t v183;
  JSC::CallFrame *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  JSC::VM *v208;
  uint64_t v209;
  JSC::CallFrame *v210;
  char OwnStaticPropertySlot;
  char v212;
  uint64_t v213;
  JSC::CallFrame *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  int v223;
  unsigned int v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  size_t v231;
  char *v232;
  char *v233;
  int v234;
  uint64_t v235;
  unsigned __int8 *v236;
  JSC::VM **v237;
  uint64_t v238;
  int v239;
  int v240;
  JSC::VM **p_dst;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  JSC::VM *v255;
  JSC::VM *v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int8x16_t **v265;
  int v266;
  int v267;
  unint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  int v275;
  uint64_t v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  char v280;
  int v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  uint64_t v288;
  JSC::JSObject *Index;
  int v290;
  char v291;
  int v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned __int16 *v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  char v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  char v314;
  int v315;
  unint64_t v316;
  unint64_t v317;
  char v318;
  uint64_t v319;
  unsigned __int8 *v320;
  unsigned int v321;
  int v322;
  unsigned __int8 *v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  _DWORD *v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  JSC::CallFrame *v332;
  JSC::VMTraps *v333;
  JSC::VMTraps *v334;
  JSC::VMTraps *v335;
  JSC::VMTraps *v336;
  JSC::VMTraps *v337;
  JSC::VMTraps *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  JSC::JSString *v342;
  JSC::VM *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  _DWORD *v348;
  _DWORD *v349;
  _QWORD v350[2];
  uint64_t v351;
  char v352;
  int8x16_t **v353;
  uint64_t v354;
  JSC::VM *__dst;
  unint64_t v356;
  int v357;
  int v358;
  uint64_t v359;
  char __s[3];
  _BYTE v361[39];

  *(_QWORD *)&v361[23] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  v343 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v343);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v344 = 0;
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0)
    goto LABEL_9;
  v14 = *(unsigned __int8 *)(v13 + 5);
  if (v14 != 67)
  {
    if (v14 < 0x17)
      goto LABEL_9;
    if (v13 && v14 == 64)
    {
      a3 = *(_QWORD *)(v13 + 24);
      v149 = *(unsigned __int8 *)(a3 + 5);
      if (v149 != 36)
      {
        if ((v149 - 33) > 2)
          goto LABEL_9;
        v250 = *((_QWORD *)this + 277);
        v251 = (v250 & 1) != 0 ? (v250 >> 1) & 3 : *(unsigned __int8 *)(v250 + 4);
        if (v251 == 2 || *(_BYTE *)(*((_QWORD *)this + 256) + 4) == 2)
          goto LABEL_9;
        v252 = *((_QWORD *)this + 288);
        v253 = (v252 & 1) != 0 ? (v252 >> 1) & 3 : *(unsigned __int8 *)(v252 + 4);
        if (v253 == 2)
          goto LABEL_9;
        goto LABEL_384;
      }
      v150 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
      v151 = *(_QWORD *)(v150 + 2216);
      if ((v151 & 1) != 0)
        v152 = (v151 >> 1) & 3;
      else
        v152 = *(unsigned __int8 *)(v151 + 4);
      if (v152 == 2 || *(_BYTE *)(*(_QWORD *)(v150 + 2048) + 4) == 2)
        goto LABEL_9;
      v153 = *(_QWORD *)(v150 + 2304);
      v154 = (v153 & 1) != 0 ? (v153 >> 1) & 3 : *(unsigned __int8 *)(v153 + 4);
      if (v154 == 2)
        goto LABEL_9;
      v155 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8);
      v156 = (v155 >> 1) & 7;
      if ((v155 & 0x10) != 0)
        v156 = ((v155 & 0xE) + 10) >> 1;
      v157 = *(_DWORD *)(v150 + 4 * v156 + 852);
      if (v157)
        v158 = 16 * (v157 & 0xFFFFFFFE);
      else
        v158 = 0;
      if (v158 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE))
        goto LABEL_384;
      if ((v155 & 0x20) != 0)
        goto LABEL_9;
      v159 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
      if (!v159)
        v159 = *(_QWORD *)(a3 + 16);
      if (v159 != *(_QWORD *)(v150 + 672))
        goto LABEL_9;
      if (JSC::JSObject::getDirectOffset(*(_DWORD **)(v13 + 24), *(JSC::VM **)(v150 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v150 + 56) + 41952) + 2712), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1)
      {
        a3 = *(_QWORD *)(v13 + 24);
LABEL_384:
        v254 = *((_DWORD *)this + 250);
        if (v254)
          v255 = (JSC::VM *)(16 * (v254 & 0xFFFFFFFE));
        else
          v255 = 0;
        v256 = JSC::JSArrayIterator::create(v10, v255, a3, *(_QWORD *)(v13 + 32), a5, a6, a7, a8);
        SlowCase = (unint64_t)v256;
        v257 = *(_QWORD *)(v13 + 16);
        *((_QWORD *)v256 + 2) = v257;
        if (v257
          && (v257 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v256 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)v256);
        }
        v344 = SlowCase;
LABEL_401:
        v341 = SlowCase;
        goto LABEL_16;
      }
LABEL_402:
      SlowCase = 0;
      v341 = 0;
      goto LABEL_16;
    }
    v162 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C));
    if (v162 == &JSC::JSMapIterator::s_info)
    {
      if (!JSC::JSMap::isIteratorProtocolFastAndNonObservable(*(JSC::JSMap **)(v13 + 24)))
        goto LABEL_402;
      v258 = *((_DWORD *)this + 251);
      if (v258)
        v259 = 16 * (v258 & 0xFFFFFFFE);
      else
        v259 = 0;
      v260 = *(_QWORD *)(v13 + 40);
      if (v260 < 0xFFFE000000000000 || (v260 & 0x80000000) != 0)
        v260 = COERCE_DOUBLE(v260 - 0x2000000000000);
      SlowCase = JSC::JSMapIterator::create(this, v259, *(_QWORD *)(v13 + 24), v260, a5, a6, a7, a8);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_398;
LABEL_397:
      v266 = *(_DWORD *)(v10 + 80);
      if ((v266 & 0x27) != 0 && (v266 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        SlowCase = 0;
      }
      else
      {
LABEL_398:
        v261 = *(_QWORD *)(v13 + 16);
        *(_QWORD *)(SlowCase + 16) = v261;
        if (v261
          && (v261 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
        }
      }
      v344 = SlowCase;
      if (*(_DWORD *)(v10 + 80))
      {
        v267 = *(_DWORD *)(v10 + 80);
        if ((v267 & 0x27) != 0 && (v267 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      goto LABEL_401;
    }
    if (v162 != &JSC::JSSetIterator::s_info)
    {
LABEL_9:
      SlowCase = 0;
      v341 = 0;
      goto LABEL_16;
    }
    if (!JSC::JSSet::isIteratorProtocolFastAndNonObservable(*(JSC::JSSet **)(v13 + 24)))
      goto LABEL_402;
    v164 = *((_DWORD *)this + 252);
    if (v164)
      v165 = 16 * (v164 & 0xFFFFFFFE);
    else
      v165 = 0;
    v342 = *(JSC::JSString **)(v13 + 24);
    v166 = *(_QWORD *)(v13 + 40);
    if (v166 < 0xFFFE000000000000 || (v166 & 0x80000000) != 0)
      v166 = COERCE_DOUBLE(v166 - 0x2000000000000);
    v167 = (JSC::Heap **)*((_QWORD *)this + 7);
    v168 = v167[5092];
    if (!v168)
      v168 = JSC::GCClient::Heap::setIteratorSpaceSlow(v167 + 4694);
    SlowCase = *((_QWORD *)v168 + 3);
    if (SlowCase >= *((_QWORD *)v168 + 4))
    {
      SlowCase = *((_QWORD *)v168 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v167, v163, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v168, (uint64_t)(v167 + 24), 48, 0, 0, v300, v301, v302);
        goto LABEL_226;
      }
      v268 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v168 + 6);
      *((_QWORD *)v168 + 4) = SlowCase + HIDWORD(v268);
      *((_QWORD *)v168 + 5) = SlowCase + (int)v268;
    }
    *((_QWORD *)v168 + 3) = SlowCase + 48;
LABEL_226:
    *(_DWORD *)SlowCase = 0;
    v169 = *(_DWORD *)(v165 + 8);
    *(_DWORD *)SlowCase = v165 >> 4;
    *(_DWORD *)(SlowCase + 4) = v169;
    *(_QWORD *)(SlowCase + 40) = 0;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 8) = 0u;
    JSC::JSSetIterator::finishCreation((JSC::JSCell *)SlowCase, this, (uint64_t)v342, v166, a5, a6, a7, a8);
    goto LABEL_397;
  }
  v15 = *((_QWORD *)this + 280);
  if ((v15 & 1) != 0)
    v16 = (v15 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v15 + 4);
  if (v16 == 2)
    goto LABEL_9;
  v18 = *((_DWORD *)this + 297);
  if (v18)
    v19 = (JSC::VM *)(16 * (v18 & 0xFFFFFFFE));
  else
    v19 = 0;
  v20 = JSC::JSStringIterator::create((JSC::JSStringIterator *)v10, v19, *(_QWORD *)(v13 + 24), (JSC::JSString *)a4, a5, a6, a7, a8);
  SlowCase = v20;
  v21 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v20 + 16) = v21;
  if (v21 && (v21 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v20 + 7))
    JSC::Heap::writeBarrierSlowPath(v10 + 192, v20);
  v344 = SlowCase;
  v341 = SlowCase;
LABEL_16:
  if (*(_DWORD *)(v10 + 80))
  {
    v148 = *(_DWORD *)(v10 + 80);
    if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (!v341)
    return 10;
  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2000);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v347 = 0xFFFFFFFF00000000;
  LOBYTE(v351) = 0;
  v352 = 0;
  v353 = 0;
  v354 = 0;
  v349 = 0;
  memset(v350, 0, 13);
  v348 = (_DWORD *)v341;
  if ((v341 & 0xFFFE000000000002) == 0)
  {
    v23 = *((_QWORD *)this + 7);
    v24 = *(unsigned __int8 *)(v341 + 5);
    if (v24 > 0x16)
      goto LABEL_20;
    if (v24 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v23 + 41952) + 1768) == v22)
      {
        v286 = *(_QWORD *)(v341 + 8);
        if ((v286 & 1) != 0)
          v287 = (unsigned int *)(v341 + 16);
        else
          v287 = (unsigned int *)(v286 + 4);
        v288 = *v287;
        if ((v288 & 0x80000000) != 0)
        {
          *(double *)a9.i64 = (double)v288;
          Index = (JSC::JSObject *)(COERCE__INT64((double)v288) + 0x2000000000000);
        }
        else
        {
          Index = (JSC::JSObject *)(v288 | 0xFFFE000000000000);
        }
        v290 = 14;
        goto LABEL_514;
      }
      if (v22)
      {
        v292 = *(_DWORD *)(v22 + 16);
        if ((v292 & 0x20) == 0)
        {
          v293 = *(_BYTE **)(v22 + 8);
          v294 = *(unsigned int *)(v22 + 4);
          if ((v292 & 4) != 0)
          {
            if (!(_DWORD)v294)
              goto LABEL_522;
            a3 = *v293 - 48;
            if (a3 > 9)
              goto LABEL_522;
            if (v294 >= 2 && *v293 == 48)
              goto LABEL_522;
            v324 = v293 + 1;
            v325 = v294 - 1;
            while (v325)
            {
              if (a3 > 0x19999999)
                goto LABEL_522;
              v326 = *v324 - 48;
              if (v326 > 9)
                goto LABEL_522;
              v291 = 0;
              v63 = __CFADD__(v326, 10 * a3);
              a3 = v326 + 10 * (_DWORD)a3;
              ++v324;
              --v325;
              if (v63)
                goto LABEL_523;
            }
          }
          else
          {
            if (!(_DWORD)v294)
              goto LABEL_522;
            a3 = *(unsigned __int16 *)v293 - 48;
            if (a3 > 9)
              goto LABEL_522;
            if (*(_WORD *)v293 == 48 && v294 > 1)
              goto LABEL_522;
            v297 = (unsigned __int16 *)(v293 + 2);
            v298 = v294 - 1;
            while (v298)
            {
              if (a3 > 0x19999999)
                goto LABEL_522;
              v299 = *v297 - 48;
              if (v299 > 9)
                goto LABEL_522;
              v291 = 0;
              v63 = __CFADD__(v299, 10 * a3);
              a3 = v299 + 10 * (_DWORD)a3;
              ++v297;
              --v298;
              if (v63)
                goto LABEL_523;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v327 = *(_QWORD *)(v341 + 8);
            v328 = (_DWORD *)((v327 & 1) != 0 ? v341 + 16 : v327 + 4);
            if (*v328 > a3)
            {
              Index = (JSC::JSObject *)JSC::JSString::getIndex((JSC::JSString *)v341, this, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v23 + 80))
                goto LABEL_639;
              v329 = *(_DWORD *)(v23 + 80);
              if ((v329 & 0x27) != 0 && (v329 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v23 + 16))
              {
LABEL_639:
                v290 = 10;
LABEL_514:
                v345 = (uint64_t)Index;
                LODWORD(v347) = v290;
                v349 = 0;
                v291 = 1;
                BYTE1(v350[1]) = 1;
                goto LABEL_523;
              }
            }
          }
        }
      }
LABEL_522:
      v291 = 0;
LABEL_523:
      if (*(_DWORD *)(v23 + 80))
      {
        v322 = *(_DWORD *)(v23 + 80);
        if ((v322 & 0x27) != 0 && (v322 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v23 + 16))
          goto LABEL_90;
      }
      if ((v291 & 1) != 0)
        goto LABEL_93;
    }
  }
  v295 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v344, (unint64_t)this);
  if (!v295)
    goto LABEL_90;
  SlowCase = v295;
  v23 = *((_QWORD *)this + 7);
LABEL_20:
  v25 = (_BYTE *)(SlowCase + 6);
  v26 = v22 >> 4;
  v27 = SlowCase;
  if ((*(_BYTE *)(SlowCase + 6) & 8) != 0)
  {
LABEL_175:
    if (!v22)
      goto LABEL_245;
    v142 = *(_DWORD *)(v22 + 16);
    if ((v142 & 0x20) != 0)
      goto LABEL_245;
    v143 = *(_WORD **)(v22 + 8);
    v144 = *(unsigned int *)(v22 + 4);
    if ((v142 & 4) == 0)
    {
      if ((_DWORD)v144)
      {
        v145 = (unsigned __int16)*v143 - 48;
        if (v145 <= 9 && (*v143 != 48 || v144 <= 1))
        {
          v170 = v143 + 1;
          v171 = v144 - 1;
          while (v171)
          {
            if (v145 > 0x19999999)
              goto LABEL_180;
            v172 = *v170 - 48;
            if (v172 > 9)
              goto LABEL_180;
            v146 = 0;
            LOBYTE(v144) = 0;
            v147 = 0;
            v63 = __CFADD__(v172, 10 * v145);
            v145 = v172 + 10 * v145;
            ++v170;
            --v171;
            if (v63)
              goto LABEL_244;
          }
          v147 = v145 & 0xFFFFFF00;
          v146 = 0x100000000;
          if (v145 == -1)
          {
            v146 = 0;
            LOBYTE(v144) = 0;
          }
          else
          {
            LOBYTE(v144) = v145;
          }
          if (v145 == -1)
            v147 = 0;
LABEL_244:
          v173 = v144;
          if ((v146 & 0x100000000) == 0)
          {
LABEL_245:
            v174 = *((_QWORD *)this + 7);
            v175 = (JSC::VMTraps *)(v174 + 64);
            v176 = &__s[1];
            a3 = (uint64_t)v361;
            v340 = 10;
            a4 = (uint64_t)"NaN";
            while (1)
            {
              v177 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
              if ((*(_BYTE *)(v27 + 6) & 8) == 0)
              {
                if ((_DWORD)v26 && (v26 & ~*(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x20)) == 0)
                {
                  v178 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x58);
                  if (v178)
                    goto LABEL_649;
                  v179 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x40);
                  if (v179 && (*(_BYTE *)(v179 + 5) == 1 || *(_DWORD *)(v179 + 80) >= 2u))
                  {
                    v333 = (JSC::VMTraps *)v27;
                    v335 = v175;
                    v180 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
                    v181 = v176;
                    v182 = (JSC::VM *)v174;
                    v183 = v174;
                    v184 = (JSC::CallFrame *)a3;
                    v185 = a4;
                    JSC::Structure::materializePropertyTable((JSC::Structure *)v177, v182, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                    a4 = v185;
                    a3 = (uint64_t)v184;
                    v174 = v183;
                    v176 = v181;
                    v178 = v186;
                    v177 = v180;
                    v27 = (unint64_t)v333;
                    v175 = v335;
                    if (v178)
                    {
LABEL_649:
                      if (*(_DWORD *)(v178 + 24))
                      {
                        v187 = *(_QWORD *)(v178 + 16);
                        v188 = v187 & 0xFFFFFFFFFFFFFFFELL;
                        v189 = *(unsigned int *)(v178 + 8);
                        v190 = *(_DWORD *)(v22 + 16);
                        if ((v187 & 1) != 0)
                        {
                          if ((v190 & 0x20) != 0)
                            v190 = *(_DWORD *)(v22 + 32);
                          v191 = *(_DWORD *)(v178 + 12);
                          v192 = (v190 >> 8) & *(_QWORD *)&v191;
                          v193 = *(unsigned __int8 *)(v188 + v192);
                          if (*(_BYTE *)(v188 + v192))
                          {
                            v194 = v188 + v189;
                            v195 = 1;
                            while (1)
                            {
                              v196 = *(_QWORD *)(v194 + 8 * (v193 - 1));
                              if (v22 == (v196 & 0xFFFFFFFFFFFFLL))
                                break;
                              v192 = ((_DWORD)v192 + v195) & v191;
                              v193 = *(unsigned __int8 *)(v188 + v192);
                              ++v195;
                              if (!*(_BYTE *)(v188 + v192))
                                goto LABEL_274;
                            }
                            a6 = (v196 >> 16) & 0xFF00000000 | HIBYTE(v196);
LABEL_271:
                            if ((_DWORD)a6 != -1)
                            {
                              a5 = HIDWORD(a6);
                              if ((int)a6 <= 63)
                              {
                                v247 = v27 + 16;
                                v248 = a6 << 32;
                              }
                              else
                              {
                                v247 = *(_QWORD *)(v27 + 8) - 8;
                                v248 = 0x3F00000000 - (a6 << 32);
                              }
                              a4 = *(_QWORD *)(v247 + (v248 >> 29));
                              if ((a4 & 0xFFFE000000000002) == 0)
                              {
                                v249 = *(unsigned __int8 *)(a4 + 5);
                                if (v249 != 5)
                                {
                                  if (v249 != 6)
                                    goto LABEL_373;
                                  v262 = *(_DWORD *)(v177 + 16) & 3;
                                  v263 = *(_QWORD *)(a4 + 16);
                                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                  {
                                    v265 = *(int8x16_t ***)(a4 + 24);
                                    v264 = *(_QWORD *)(a4 + 32);
                                    v345 = *(_QWORD *)(a4 + 8);
                                    v346 = v263;
                                    LODWORD(v347) = HIDWORD(a6);
                                    v349 = (_DWORD *)v27;
                                    BYTE1(v350[1]) = 3;
                                    if (v262 != 2)
                                      LOBYTE(v350[1]) = 1;
                                    BYTE3(v350[1]) = 1;
                                    v353 = v265;
                                    v354 = v264;
                                    goto LABEL_93;
                                  }
                                  v345 = *(_QWORD *)(a4 + 8);
                                  v346 = v263;
                                  LODWORD(v347) = HIDWORD(a6);
                                  v349 = (_DWORD *)v27;
                                  BYTE1(v350[1]) = 3;
                                  if (v262 == 2)
                                    goto LABEL_93;
LABEL_375:
                                  LOBYTE(v350[1]) = 1;
                                  goto LABEL_93;
                                }
                                v66 = v174;
LABEL_92:
                                JSC::JSObject::fillGetterPropertySlot((unsigned int *)v27, v66, (uint64_t)&v345, a4, a5, a6);
                                goto LABEL_93;
                              }
LABEL_373:
                              v345 = a4;
                              v349 = (_DWORD *)v27;
LABEL_75:
                              v347 = __PAIR64__(a6, a5);
                              LOWORD(v350[1]) = 257;
                              goto LABEL_93;
                            }
                          }
                        }
                        else
                        {
                          if ((v190 & 0x20) != 0)
                            v190 = *(_DWORD *)(v22 + 32);
                          v197 = *(_DWORD *)(v178 + 12);
                          v198 = v197 & (v190 >> 8);
                          v199 = *(_DWORD *)(v188 + 4 * v198);
                          if (v199)
                          {
                            v200 = v188 + 4 * v189;
                            v201 = 1;
                            while (1)
                            {
                              v202 = (v199 - 1);
                              if (v22 == *(_QWORD *)(v200 + 16 * v202))
                                break;
                              v198 = (v198 + v201) & v197;
                              v199 = *(_DWORD *)(v188 + 4 * v198);
                              ++v201;
                              if (!v199)
                                goto LABEL_274;
                            }
                            a6 = *(unsigned int *)(v200 + 16 * v202 + 8) | ((unint64_t)*(unsigned __int8 *)(v200 + 16 * v202 + 12) << 32);
                            goto LABEL_271;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_274:
                if ((*(_BYTE *)(v27 + 6) & 0x20) != 0)
                {
                  v205 = v27;
                  v336 = v175;
                  v206 = v177;
                  v207 = v176;
                  v208 = (JSC::VM *)v174;
                  v209 = v174;
                  v210 = (JSC::CallFrame *)a3;
                  OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v27, v208, v22, (uint64_t)&v345);
                  a4 = (uint64_t)"NaN";
                  a3 = (uint64_t)v210;
                  v174 = v209;
                  v176 = v207;
                  v212 = OwnStaticPropertySlot;
                  v177 = v206;
                  v175 = v336;
                  v27 = v205;
                  if ((v212 & 1) != 0)
                    goto LABEL_93;
                }
                goto LABEL_275;
              }
              v331 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
              v332 = (JSC::CallFrame *)a3;
              v217 = v176;
              v334 = (JSC::VMTraps *)v27;
              v338 = v175;
              v218 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v331 + 0x4C) + 0x68))();
              if (*(_DWORD *)(v174 + 80))
              {
                v245 = *(_DWORD *)(v174 + 80);
                if ((v245 & 0x27) != 0 && (v245 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v338, 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v174 + 16))
                  goto LABEL_96;
              }
              if ((v218 & 1) != 0)
                goto LABEL_93;
              if (BYTE2(v350[1]) == 3)
              {
                if (BYTE4(v350[1]))
                  goto LABEL_96;
                v219 = *((unsigned __int8 *)v334 + 5);
                if (v219 == 61)
                {
LABEL_346:
                  v27 = (unint64_t)v334;
                  v175 = v338;
                  v177 = v331;
                  goto LABEL_347;
                }
              }
              else
              {
                v219 = *((unsigned __int8 *)v334 + 5);
                if (v219 == 61)
                {
                  v27 = (unint64_t)v334;
                  v175 = v338;
                  v177 = v331;
                  a3 = (uint64_t)v332;
                  v176 = v217;
                  a4 = (uint64_t)"NaN";
                  if (BYTE2(v350[1]) == 1)
                    goto LABEL_96;
                  goto LABEL_275;
                }
              }
              if (!v22)
                goto LABEL_346;
              if ((v219 - 50) < 0xFFFFFFF5)
                goto LABEL_346;
              v220 = *(_DWORD *)(v22 + 16);
              if ((v220 & 0x20) != 0)
                goto LABEL_346;
              v221 = *(unsigned int *)(v22 + 4);
              if (!(_DWORD)v221)
                goto LABEL_346;
              v222 = *(unsigned __int8 **)(v22 + 8);
              if ((v220 & 4) != 0)
              {
                v223 = *v222;
                if ((_DWORD)v221 == 1)
                {
LABEL_300:
                  v224 = v223 - 48;
                  v27 = (unint64_t)v334;
                  v175 = v338;
                  v177 = v331;
                  a3 = (uint64_t)v332;
                  v176 = v217;
                  a4 = (uint64_t)"NaN";
                  if (v224 < 0xA)
                    goto LABEL_96;
                  goto LABEL_275;
                }
                if (v223 == 45)
                {
                  v223 = v222[1];
                  goto LABEL_304;
                }
                if ((v223 - 48) < 0xA)
                  goto LABEL_315;
                if ((_DWORD)v221 == 8)
                  goto LABEL_314;
              }
              else
              {
                v223 = *(unsigned __int16 *)v222;
                if ((_DWORD)v221 == 1)
                  goto LABEL_300;
                if (v223 == 45)
                {
                  v223 = *((unsigned __int16 *)v222 + 1);
LABEL_304:
                  if ((v223 - 48) < 0xA)
                  {
                    if ((_DWORD)v221 == 2)
                      goto LABEL_96;
                    goto LABEL_315;
                  }
                  if ((_DWORD)v221 != 9)
                    goto LABEL_346;
LABEL_314:
                  if (v223 != 73)
                    goto LABEL_346;
                  goto LABEL_315;
                }
                if ((v223 - 48) < 0xA || (_DWORD)v221 == 8 && v223 == 73)
                  goto LABEL_315;
              }
              if ((_DWORD)v221 != 3 || v223 != 78)
                goto LABEL_346;
LABEL_315:
              v330 = v330 & 0xFFFFFF0000000000 | v221 | ((unint64_t)((v220 >> 2) & 1) << 32);
              JSC::jsToNumber(v222, v330);
              v226 = (v225 >> 52) & 0x7FF;
              if ((_DWORD)v226 == 2047)
              {
                if ((v225 & 0xFFFFFFFFFFFFFLL) != 0)
                {
                  qmemcpy(__s, "NaN", sizeof(__s));
                  v227 = (char *)v332;
                }
                else
                {
                  if ((v225 & 0x8000000000000000) != 0)
                  {
                    __s[0] = 45;
                    v233 = v217;
                  }
                  else
                  {
                    v233 = __s;
                  }
                  *(_QWORD *)v233 = 0x7974696E69666E49;
                  v227 = v233 + 8;
                }
                goto LABEL_329;
              }
              v228 = v225 & 0x7FFFFFFFFFFFFFFFLL;
              if ((v225 & 0x8000000000000000) != 0 && v228)
              {
                __s[0] = 45;
                v229 = v217;
              }
              else
              {
                if (!v228)
                {
                  __s[0] = 48;
                  v227 = v217;
                  goto LABEL_329;
                }
                v229 = __s;
              }
              v230 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v225 & 0x800FFFFFFFFFFFFFLL, v226);
              v227 = WTF::dragonbox::detail::to_shortest(v230, v231, (uint64_t)v229, v232);
LABEL_329:
              *v227 = 0;
              v234 = strlen(__s);
              memcpy(&__dst, __s, v234);
              *((_BYTE *)&__dst + v234) = 0;
              v235 = *(unsigned int *)(v22 + 4);
              v236 = *(unsigned __int8 **)(v22 + 8);
              if ((*(_BYTE *)(v22 + 16) & 4) != 0)
              {
                if ((_DWORD)v235)
                {
                  p_dst = &__dst;
                  v242 = *(unsigned int *)(v22 + 4);
                  do
                  {
                    v244 = *(unsigned __int8 *)p_dst;
                    p_dst = (JSC::VM **)((char *)p_dst + 1);
                    v243 = v244;
                    if (!v244 || *v236 != v243)
                      goto LABEL_343;
                    ++v236;
                  }
                  while (--v242);
                }
              }
              else if ((_DWORD)v235)
              {
                v237 = &__dst;
                v238 = *(unsigned int *)(v22 + 4);
                while (1)
                {
                  v240 = *(unsigned __int8 *)v237;
                  v237 = (JSC::VM **)((char *)v237 + 1);
                  v239 = v240;
                  if (!v240 || *(unsigned __int16 *)v236 != v239)
                    break;
                  v236 += 2;
                  if (!--v238)
                    goto LABEL_341;
                }
LABEL_343:
                v27 = (unint64_t)v334;
                v175 = v338;
                v177 = v331;
LABEL_347:
                v176 = v217;
                a3 = (uint64_t)v332;
                a4 = (uint64_t)"NaN";
                goto LABEL_275;
              }
LABEL_341:
              v27 = (unint64_t)v334;
              v175 = v338;
              v177 = v331;
              a3 = (uint64_t)v332;
              v176 = v217;
              a4 = (uint64_t)"NaN";
              if (!*((_BYTE *)&__dst + v235))
                goto LABEL_96;
LABEL_275:
              if ((*(_WORD *)(v177 + 12) & 0x800) == 0)
              {
                v203 = *(_DWORD *)v27;
LABEL_277:
                v204 = *(_QWORD *)(16 * (v203 & 0xFFFFFFFE) + 0x30);
                if (!v204)
                  v204 = *(_QWORD *)(v27 + 16);
                goto LABEL_279;
              }
              v203 = *(_DWORD *)v27;
              if (BYTE2(v350[1]) == 3)
                goto LABEL_277;
              v213 = a4;
              v214 = (JSC::CallFrame *)a3;
              v215 = v176;
              v337 = v175;
              v216 = 16 * (v203 & 0xFFFFFFFE);
              if ((*(_WORD *)(v216 + 12) & 0x800) != 0)
              {
                v204 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v216 + 76) + 0xB0))();
              }
              else
              {
                v204 = *(_QWORD *)(v216 + 48);
                if (!v204)
                  v204 = *(_QWORD *)(v27 + 16);
              }
              if (*(_DWORD *)(v174 + 80))
              {
                v246 = *(_DWORD *)(v174 + 80);
                if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v337, 7u, a3, a4, a5, a6, a7, a8);
                v175 = v337;
                v176 = v215;
                a3 = (uint64_t)v214;
                a4 = v213;
                if (*(_QWORD *)(v174 + 16))
                  goto LABEL_96;
              }
              else
              {
                v175 = v337;
                v176 = v215;
                a3 = (uint64_t)v214;
                a4 = v213;
              }
LABEL_279:
              if ((v204 & 0xFFFE000000000002) == 0)
              {
                v27 = v204;
                if (*(unsigned __int8 *)(v204 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_96;
            }
          }
          goto LABEL_549;
        }
LABEL_180:
        v146 = 0;
        LOBYTE(v144) = 0;
      }
      else
      {
        v146 = 0;
      }
      v147 = 0;
      goto LABEL_244;
    }
    if ((_DWORD)v144)
    {
      v303 = *(unsigned __int8 *)v143 - 48;
      if (v303 <= 9 && (v144 < 2 || *(_BYTE *)v143 != 48))
      {
        v319 = v144 - 1;
        v320 = (unsigned __int8 *)v143 + 1;
        while (v319)
        {
          if (v303 > 0x19999999)
            goto LABEL_546;
          v321 = *v320 - 48;
          if (v321 > 9)
            goto LABEL_546;
          v173 = 0;
          LOBYTE(v144) = 0;
          v304 = 0;
          v63 = __CFADD__(v321, 10 * v303);
          v303 = v321 + 10 * v303;
          --v319;
          ++v320;
          if (v63)
            goto LABEL_548;
        }
        if (v303 == -1)
          v173 = 0;
        else
          v173 = v303 & 0xFFFFFF00;
        if (v303 == -1)
          LOBYTE(v144) = 0;
        else
          LOBYTE(v144) = v303;
        if (v303 == -1)
          v304 = 0;
        else
          v304 = 0x100000000;
LABEL_548:
        v147 = v144;
        if ((v304 & 0x100000000) == 0)
          goto LABEL_245;
LABEL_549:
        v305 = v147 | v173;
        v306 = *((_QWORD *)this + 7);
        v340 = 10;
        while (1)
        {
          v307 = 16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE);
          v308 = (*(uint64_t (**)(unint64_t, Inspector *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v307 + 0x4C) + 0x70))(SlowCase, this, v305, &v345);
          v309 = v308;
          if (*(_DWORD *)(v306 + 80))
          {
            v312 = *(_DWORD *)(v306 + 80);
            if ((v312 & 0x27) != 0 && (v312 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, a6, a7, a8);
            v313 = *(_QWORD *)(v306 + 16);
            if (v313)
              v314 = 1;
            else
              v314 = v309;
            if ((v314 & 1) != 0)
            {
              if (!v313)
                goto LABEL_93;
LABEL_90:
              v65 = 10;
LABEL_95:
              v340 = v65;
              goto LABEL_96;
            }
          }
          else if ((v308 & 1) != 0)
          {
            goto LABEL_93;
          }
          if (BYTE2(v350[1]) == 3)
          {
            if (BYTE4(v350[1]))
              goto LABEL_96;
            v310 = *(unsigned __int8 *)(SlowCase + 5);
            if (v310 == 61)
              goto LABEL_555;
          }
          else
          {
            v310 = *(unsigned __int8 *)(SlowCase + 5);
            if (v310 == 61)
            {
              if (BYTE2(v350[1]) == 1)
                goto LABEL_96;
              goto LABEL_555;
            }
          }
          if ((v310 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(SlowCase + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              LOBYTE(v356) = 0;
              v317 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(SlowCase, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v316 = v318 ? v317 : 0;
            }
            else
            {
              v316 = *(_QWORD *)(SlowCase + 24);
            }
            if (v316 <= v305)
              goto LABEL_96;
          }
LABEL_555:
          if ((*(_WORD *)(v307 + 12) & 0x800) == 0 || BYTE2(v350[1]) == 3)
          {
            v311 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x30);
            if (!v311)
              v311 = *(_QWORD *)(SlowCase + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v311 = (*(uint64_t (**)(unint64_t, Inspector *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(SlowCase, this);
            }
            else
            {
              v311 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x30);
              if (!v311)
                v311 = *(_QWORD *)(SlowCase + 16);
            }
            if (*(_DWORD *)(v306 + 80))
            {
              v315 = *(_DWORD *)(v306 + 80);
              if ((v315 & 0x27) != 0 && (v315 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v306 + 16))
                goto LABEL_96;
            }
          }
          if ((v311 & 0xFFFE000000000002) == 0)
          {
            SlowCase = v311;
            if (*(unsigned __int8 *)(v311 + 5) > 0x16u)
              continue;
          }
          goto LABEL_96;
        }
      }
LABEL_546:
      v173 = 0;
      LOBYTE(v144) = 0;
    }
    else
    {
      v173 = 0;
    }
    v304 = 0;
    goto LABEL_548;
  }
  v28 = SlowCase;
  while (1)
  {
    v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
    v30 = 16 * v29;
    if (!(_DWORD)v26 || (v26 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
      goto LABEL_49;
    v31 = *(_QWORD *)(16 * v29 + 0x58);
    if (!v31)
    {
      v32 = *(_QWORD *)(16 * v29 + 0x40);
      if (!v32 || *(_BYTE *)(v32 + 5) != 1 && *(_DWORD *)(v32 + 80) < 2u)
        goto LABEL_49;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v30, (JSC::VM *)v23, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v31)
        goto LABEL_49;
    }
    if (!*(_DWORD *)(v31 + 24))
      goto LABEL_49;
    v33 = *(_QWORD *)(v31 + 16);
    v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
    v35 = *(unsigned int *)(v31 + 8);
    v36 = *(_DWORD *)(v22 + 16);
    if ((v33 & 1) == 0)
      break;
    if ((v36 & 0x20) != 0)
      v36 = *(_DWORD *)(v22 + 32);
    v37 = *(_DWORD *)(v31 + 12);
    v38 = (v36 >> 8) & *(_QWORD *)&v37;
    v39 = *(unsigned __int8 *)(v34 + v38);
    if (*(_BYTE *)(v34 + v38))
    {
      v40 = v34 + v35;
      v41 = 1;
      while (1)
      {
        v42 = *(_QWORD *)(v40 + 8 * (v39 - 1));
        if (v22 == (v42 & 0xFFFFFFFFFFFFLL))
          break;
        v38 = ((_DWORD)v38 + v41) & v37;
        v39 = *(unsigned __int8 *)(v34 + v38);
        ++v41;
        if (!*(_BYTE *)(v34 + v38))
          goto LABEL_49;
      }
      a6 = (v42 >> 16) & 0xFF00000000 | HIBYTE(v42);
      goto LABEL_46;
    }
LABEL_49:
    if ((*v25 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, (JSC::VM *)v23, v22, (uint64_t)&v345) & 1) != 0)
    {
      goto LABEL_93;
    }
    v27 = *(_QWORD *)(v30 + 48);
    if (!v27)
      v27 = *(_QWORD *)(v28 + 16);
    if ((v27 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v27 + 5) < 0x17u)
    {
      if (!v22)
        goto LABEL_90;
      v51 = *(_DWORD *)(v22 + 16);
      if ((v51 & 0x20) != 0)
        goto LABEL_90;
      v52 = *(_WORD **)(v22 + 8);
      v53 = *(unsigned int *)(v22 + 4);
      if ((v51 & 4) == 0)
      {
        if ((_DWORD)v53)
        {
          v54 = (unsigned __int16)*v52 - 48;
          if (v54 <= 9 && (*v52 != 48 || v53 <= 1))
          {
            v60 = v52 + 1;
            v61 = v53 - 1;
            while (v61)
            {
              if (v54 > 0x19999999)
                goto LABEL_65;
              v62 = *v60 - 48;
              if (v62 > 9)
                goto LABEL_65;
              v55 = 0;
              LOBYTE(v53) = 0;
              v56 = 0;
              v63 = __CFADD__(v62, 10 * v54);
              v54 = v62 + 10 * v54;
              ++v60;
              --v61;
              if (v63)
                goto LABEL_89;
            }
            v56 = v54 & 0xFFFFFF00;
            v55 = 0x100000000;
            if (v54 == -1)
            {
              v55 = 0;
              LOBYTE(v53) = 0;
            }
            else
            {
              LOBYTE(v53) = v54;
            }
            if (v54 == -1)
              v56 = 0;
LABEL_89:
            v64 = v53;
            if ((v55 & 0x100000000) == 0)
              goto LABEL_90;
LABEL_445:
            v271 = v56 | v64;
            v272 = *((_QWORD *)this + 7);
            v340 = 10;
            while (2)
            {
              v273 = 16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE);
              v274 = (*(uint64_t (**)(unint64_t, Inspector *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v273 + 0x4C) + 0x70))(SlowCase, this, v271, &v345);
              if (*(_DWORD *)(v272 + 80))
              {
                v277 = *(_DWORD *)(v272 + 80);
                if ((v277 & 0x27) != 0 && (v277 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v272 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v272 + 16))
                  goto LABEL_96;
              }
              if ((v274 & 1) != 0)
                goto LABEL_93;
              if (BYTE2(v350[1]) == 3)
              {
                if (BYTE4(v350[1]))
                  goto LABEL_96;
                v275 = *(unsigned __int8 *)(SlowCase + 5);
                if (v275 != 61)
                  goto LABEL_450;
              }
              else
              {
                v275 = *(unsigned __int8 *)(SlowCase + 5);
                if (v275 == 61)
                {
                  if (BYTE2(v350[1]) == 1)
                    goto LABEL_96;
                }
                else
                {
LABEL_450:
                  if ((v275 - 39) <= 0xA)
                  {
                    if ((*(_BYTE *)(SlowCase + 40) & 7u) > 2)
                    {
                      LOBYTE(__dst) = 0;
                      LOBYTE(v356) = 0;
                      v279 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(SlowCase, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                      v278 = v280 ? v279 : 0;
                    }
                    else
                    {
                      v278 = *(_QWORD *)(SlowCase + 24);
                    }
                    if (v278 <= v271)
                      goto LABEL_96;
                  }
                }
              }
              if ((*(_WORD *)(v273 + 12) & 0x800) == 0 || BYTE2(v350[1]) == 3)
              {
                v276 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x30);
                if (!v276)
                  v276 = *(_QWORD *)(SlowCase + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v276 = (*(uint64_t (**)(unint64_t, Inspector *))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(SlowCase, this);
                }
                else
                {
                  v276 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x30);
                  if (!v276)
                    v276 = *(_QWORD *)(SlowCase + 16);
                }
                if (*(_DWORD *)(v272 + 80))
                {
                  v281 = *(_DWORD *)(v272 + 80);
                  if ((v281 & 0x27) != 0 && (v281 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v272 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v272 + 16))
                    goto LABEL_96;
                }
              }
              if ((v276 & 0xFFFE000000000002) != 0)
                goto LABEL_96;
              SlowCase = v276;
              if (*(unsigned __int8 *)(v276 + 5) <= 0x16u)
                goto LABEL_96;
              continue;
            }
          }
LABEL_65:
          v55 = 0;
          LOBYTE(v53) = 0;
        }
        else
        {
          v55 = 0;
        }
        v56 = 0;
        goto LABEL_89;
      }
      if ((_DWORD)v53)
      {
        v269 = *(unsigned __int8 *)v52 - 48;
        if (v269 <= 9 && (v53 < 2 || *(_BYTE *)v52 != 48))
        {
          v282 = v53 - 1;
          v283 = (unsigned __int8 *)v52 + 1;
          while (v282)
          {
            if (v269 > 0x19999999)
              goto LABEL_442;
            v284 = *v283 - 48;
            if (v284 > 9)
              goto LABEL_442;
            v64 = 0;
            LOBYTE(v53) = 0;
            v270 = 0;
            v63 = __CFADD__(v284, 10 * v269);
            v269 = v284 + 10 * v269;
            --v282;
            ++v283;
            if (v63)
              goto LABEL_444;
          }
          if (v269 == -1)
            v64 = 0;
          else
            v64 = v269 & 0xFFFFFF00;
          if (v269 == -1)
            LOBYTE(v53) = 0;
          else
            LOBYTE(v53) = v269;
          if (v269 == -1)
            v270 = 0;
          else
            v270 = 0x100000000;
          goto LABEL_444;
        }
LABEL_442:
        v64 = 0;
        LOBYTE(v53) = 0;
      }
      else
      {
        v64 = 0;
      }
      v270 = 0;
LABEL_444:
      v56 = v53;
      if ((v270 & 0x100000000) == 0)
        goto LABEL_90;
      goto LABEL_445;
    }
    v25 = (_BYTE *)(v27 + 6);
    v28 = v27;
    if ((*(_BYTE *)(v27 + 6) & 8) != 0)
      goto LABEL_175;
  }
  if ((v36 & 0x20) != 0)
    v36 = *(_DWORD *)(v22 + 32);
  v43 = *(_DWORD *)(v31 + 12);
  v44 = v43 & (v36 >> 8);
  v45 = *(_DWORD *)(v34 + 4 * v44);
  if (!v45)
    goto LABEL_49;
  v46 = v34 + 4 * v35;
  v47 = 1;
  while (1)
  {
    v48 = (v45 - 1);
    if (v22 == *(_QWORD *)(v46 + 16 * v48))
      break;
    v44 = (v44 + v47) & v43;
    v45 = *(_DWORD *)(v34 + 4 * v44);
    ++v47;
    if (!v45)
      goto LABEL_49;
  }
  a6 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
LABEL_46:
  if ((_DWORD)a6 == -1)
    goto LABEL_49;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v57 = v28 + 16;
    v58 = a6 << 32;
  }
  else
  {
    v57 = *(_QWORD *)(v28 + 8) - 8;
    v58 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v57 + (v58 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_74;
  v59 = *(unsigned __int8 *)(a4 + 5);
  if (v59 == 5)
  {
    v27 = v28;
    v66 = v23;
    goto LABEL_92;
  }
  if (v59 != 6)
  {
LABEL_74:
    v345 = a4;
    v349 = (_DWORD *)v28;
    goto LABEL_75;
  }
  v138 = *(_DWORD *)(v30 + 16) & 3;
  v139 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v345 = *(_QWORD *)(a4 + 8);
    v346 = v139;
    LODWORD(v347) = HIDWORD(a6);
    v349 = (_DWORD *)v28;
    BYTE1(v350[1]) = 3;
    if (v138 == 2)
      goto LABEL_93;
    goto LABEL_375;
  }
  v141 = *(int8x16_t ***)(a4 + 24);
  v140 = *(_QWORD *)(a4 + 32);
  v345 = *(_QWORD *)(a4 + 8);
  v346 = v139;
  LODWORD(v347) = HIDWORD(a6);
  v349 = (_DWORD *)v28;
  BYTE1(v350[1]) = 3;
  if (v138 != 2)
    LOBYTE(v350[1]) = 1;
  BYTE3(v350[1]) = 1;
  v353 = v141;
  v354 = v140;
LABEL_93:
  if (BYTE1(v350[1]) == 1)
  {
    v65 = v345;
    goto LABEL_95;
  }
  if (BYTE1(v350[1]) == 2)
  {
    v130 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v345, this, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v131 = (unint64_t)v349;
    v132 = *(_QWORD *)(16 * (*v349 & 0xFFFFFFFE) + 0x28);
    if ((v347 & 0x20) != 0)
      v131 = (unint64_t)v348;
    if (BYTE3(v350[1]) != 1)
      goto LABEL_168;
    if ((v131 & 0xFFFE000000000002) != 0)
      goto LABEL_439;
    v133 = *(unsigned int *)(16 * (*(_DWORD *)v131 & 0xFFFFFFFE) + 0x4C);
    v134 = *(_DWORD *)(16 * (*(_DWORD *)v131 & 0xFFFFFFFE) + 0x4C) != 0;
    v135 = 16 * v133;
    if ((_DWORD)v133)
      v136 = v353 == (int8x16_t **)v135;
    else
      v136 = 1;
    if (!v136)
    {
      do
      {
        v135 = *(_QWORD *)(v135 + 16);
        v134 = v135 != 0;
      }
      while ((int8x16_t **)v135 != v353 && v135 != 0);
    }
    if (!v134)
    {
LABEL_439:
      __dst = (JSC::VM *)*((_QWORD *)this + 7);
      v130 = JSC::throwDOMAttributeGetterTypeError(v132, &__dst, v353, (WTF::StringImpl *)v22);
    }
    else
    {
LABEL_168:
      v130 = ((uint64_t (*)(unint64_t))v345)(v132);
    }
  }
  v340 = v130;
LABEL_96:
  if (v352)
  {
    v67 = *(_DWORD *)(v351 + 4);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x1986A06F0);
    }
    *(_DWORD *)(v351 + 4) = v67 - 1;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v345 = 10;
  }
  else
  {
    v68 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    v345 = (uint64_t)v68;
    if ((unint64_t)v68 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v68;
      goto LABEL_102;
    }
    v285 = (unint64_t)v68 - 0x2000000000000;
    if (v285 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v285;
      goto LABEL_153;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v345, this, a3, a4, a5, a6, a7, a8, a9);
LABEL_153:
  *(double *)a9.i64 = trunc(*(double *)a9.i64 + 0.0);
LABEL_102:
  if (*(_DWORD *)(v10 + 80))
  {
    v160 = *(_DWORD *)(v10 + 80);
    if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
    {
      v339 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a9.i64[0] = v339;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v69 = *(double *)a9.i64 >= 0.0 ? *(double *)a9.i64 : 5;
  v49 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v161 = *(_DWORD *)(v10 + 80);
    if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v70, v71, v72, v73, v74, v75);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (v69)
  {
    v76 = 0;
    do
    {
      v77 = *((_QWORD *)this + 7);
      v84 = JSC::iteratorNext(this, v341, v340, 0, v72, v73, v74, v75);
      if (*(_DWORD *)(v77 + 80))
      {
        v123 = *(_DWORD *)(v77 + 80);
        if ((v123 & 0x27) != 0 && (v123 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, v78, v79, v80, v81, v82, v83);
        if (*(_QWORD *)(v77 + 16))
          goto LABEL_134;
      }
      v86 = JSC::iteratorComplete(this, v84, v78, v79, v80, v81, v82, v83, v85);
      if (!*(_DWORD *)(v77 + 80))
        goto LABEL_111;
      v124 = *(_DWORD *)(v77 + 80);
      if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, v78, v79, v80, v81, v82, v83);
      if (*(_QWORD *)(v77 + 16))
      {
LABEL_134:
        v87 = 0;
      }
      else
      {
LABEL_111:
        if (v86)
          v87 = 6;
        else
          v87 = v84;
      }
      if (*(_QWORD *)(v10 + 16) || v87 == 6)
        return v49;
      v95 = JSC::iteratorValue(this, v87, v78, v79, v80, v81, v82, v83, v85);
      if (*(_DWORD *)(v10 + 80))
      {
        v125 = *(_DWORD *)(v10 + 80);
        if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v89, v90, v91, v92, v93, v94);
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      v96 = *((_QWORD *)this + 7);
      v97 = *(_QWORD *)(v96 + 15056);
      if (v97)
      {
        v98 = *(unsigned int *)(v97 + 60);
        Slow = *(_QWORD *)(v97 + 24);
        if (Slow < *(_QWORD *)(v97 + 32))
          goto LABEL_119;
        Slow = *(_QWORD *)(v97 + 40);
        if ((Slow & 1) == 0)
        {
          v126 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v97 + 48);
          *(_QWORD *)(v97 + 32) = Slow + HIDWORD(v126);
          *(_QWORD *)(v97 + 40) = Slow + (int)v126;
LABEL_119:
          *(_QWORD *)(v97 + 24) = Slow + v98;
          goto LABEL_120;
        }
        JSC::sanitizeStackForVM(*((JSC **)this + 7), v88, v89, v90, v91, v92, v93, v94);
        Slow = JSC::LocalAllocator::allocateSlowCase(v97, v96 + 192, v98, 0, 0, v127, v128, v129);
      }
      else
      {
        Slow = JSC::CompleteSubspace::tryAllocateSlow(v96 + 14936, *((JSC **)this + 7), 0x40uLL, 0, v91, v92, v93, v94);
        if (!Slow)
        {
          __break(0xC471u);
          JUMPOUT(0x1986A02B4);
        }
      }
LABEL_120:
      *(_DWORD *)Slow = 0;
      *(_DWORD *)Slow = *((_DWORD *)this + 212);
      *(_DWORD *)(Slow + 4) = 16783360;
      *(_OWORD *)(Slow + 8) = 0u;
      *(_OWORD *)(Slow + 24) = 0u;
      *(_OWORD *)(Slow + 40) = 0u;
      *(_QWORD *)(Slow + 56) = 0;
      if (*(_BYTE *)(v96 + 755))
        __dmb(0xAu);
      WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v90, v91, v92, v93, v94, &__dst);
      v100 = __dst;
      __dst = 0;
      v356 = Slow;
      v357 = -1;
      v101.n128_u64[0] = 0x100000001000000;
      v358 = 0x1000000;
      v359 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v10, (unint64_t)v100, v95, 0, (uint64_t)&__dst, v102, v103, v101);
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::~StringImpl(v100, v104, v105, v106, v107, v108, v109, v110);
          WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
      JSC::JSObject::putDirectIndex(v49, (unint64_t)this, v76, Slow, v107, v108, v109, v110, v111);
      if (*(_QWORD *)(v10 + 16))
      {
        JSC::iteratorClose(this, v341, v112, v113, v72, v73, v74, v75, v114);
        return v49;
      }
      v76 = (JSC::VM *)((_DWORD)v76 + 1);
    }
    while (v69 != (_DWORD)v76);
  }
  return v49;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeFunctionEvaluateWithScopeExtension(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int **v14;
  uint64_t v15;
  JSC::JSScope *v16;
  uint64_t v17;
  JSC::JSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  _DWORD *v24;
  int *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  SourceProvider *var0;
  _DWORD *v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  JSC::VM *v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  _DWORD *v61;
  SourceCode v62;
  JSC::Exception *v63;
  JSC::VM *v64;

  v10 = *((_QWORD *)this + 7);
  v57 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v57);
  }
  v64 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v64, (uint64_t)"InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.", 79);
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    return JSC::throwTypeError((unint64_t)this, &v64, (uint64_t)"InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.", 79);
  v14 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_9;
  v56 = *(_DWORD *)(v10 + 80);
  if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_9:
  v63 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (v15 = *((_QWORD *)a2 + 7), (v15 & 0xFFFE000000000002) != 0))
  {
    v16 = 0;
  }
  else if (*(unsigned __int8 *)(v15 + 5) <= 0x16u)
  {
    v16 = 0;
  }
  else
  {
    v16 = (JSC::JSScope *)*((_QWORD *)a2 + 7);
  }
  JSC::CallFrame::callerSourceOrigin(a2, (JSC::VM *)v10, a5, a6, a7, a8, (uint64_t)&v58);
  v17 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)v17 = off_1E35964B0;
  *(_BYTE *)(v17 + 12) = 0;
  v22 = v58;
  if (v58)
    *(_DWORD *)v58 += 2;
  *(_QWORD *)(v17 + 16) = v22;
  v23 = v60;
  *(_OWORD *)(v17 + 24) = v59;
  *(_OWORD *)(v17 + 40) = v23;
  v24 = v61;
  if (v61)
    ++v61[2];
  *(_QWORD *)(v17 + 56) = v24;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_QWORD *)(v17 + 109) = 0;
  *(_QWORD *)v17 = off_1E357C4B0;
  v25 = *v14;
  if (!*v14)
    v25 = &WTF::StringImpl::s_emptyAtomString;
  *v25 += 2;
  *(_QWORD *)(v17 + 120) = v25;
  v62.var0.var0 = (SourceProvider *)v17;
  v62.var1 = 0;
  v26 = v25[1];
  *(_QWORD *)&v62.var3.var0 = 0;
  v62.var2 = v26;
  if (v16)
  {
    v27 = JSC::JSWithScope::create(*((JSC::JSWithScope **)this + 7), (unint64_t)this, *((JSC::JSGlobalObject **)this + 9), v16, v18, v19, v20, v21);
    v33 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 10) = v27;
    if (v27 && *(_DWORD *)(v33 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v33 + 192, (unint64_t)this);
    v41 = JSC::evaluate(this, &v62, (uint64_t)this, &v63, v28, v29, v30, v31, v32);
    *((_QWORD *)this + 10) = 0;
  }
  else
  {
    v41 = JSC::evaluate(this, &v62, (uint64_t)this, &v63, (uint64_t)v18, v19, v20, v21, 0.0);
  }
  var0 = v62.var0.var0;
  v62.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 2) == 1)
      (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
    else
      --*((_DWORD *)var0 + 2);
  }
  v45 = v61;
  v61 = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  v46 = v58;
  v58 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  if (v63)
    JSC::VM::throwException((JSC::VM *)v10, this, v63, v42, v36, v37, v38, v39, v40);
  return v41;
}

unint64_t Inspector::jsInjectedScriptHostPrototypeFunctionQueryInstances(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  uint64_t v56;
  JSC::VM *v57;
  int v58;
  const char *v59;
  Inspector *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::VM *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  size_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned __int8 *p_dst;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int16 *v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __n128 v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  JSC::VM *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int ***v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int ***v198;
  unsigned int *v199;
  unint64_t v200;
  uint64_t v201;
  int32x4_t v202;
  JSC::VM *v203;
  unsigned int ***v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int32x4_t v210;
  JSC::VM *v211;
  int v212;
  uint64_t v213;
  uint64_t (*v214)(uint64_t *);
  uint64_t *v215;
  uint64_t (*v216)(uint64_t *);
  uint64_t *v217;
  unsigned int ***v218;
  int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  unsigned int v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  char v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned int v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  char v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  char v252;
  unint64_t v253;
  char v254;
  uint64_t v255;
  int v256;
  JSC::MarkedSpace *v257;
  JSC::MarkedSpace *v258;
  unsigned int ***v259;
  JSC::VM *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  char v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  JSC::VM *v273;
  uint64_t __dst;
  unint64_t v275;
  char *v276;
  char __s[3];
  _BYTE v278[39];

  *(_QWORD *)&v278[23] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(this + 56);
  v260 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v260);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v273 = (JSC::VM *)v9;
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0 || (v13 = *(unsigned __int8 *)(v12 + 5), v13 <= 0x16))
  {
    v14 = "queryInstances first argument must be an object.";
    v15 = 49;
    return JSC::throwTypeError(this, &v273, (uint64_t)v14, v15);
  }
  if (v13 == 61)
  {
    v14 = "queryInstances cannot be called with a Proxy.";
    v15 = 46;
    return JSC::throwTypeError(this, &v273, (uint64_t)v14, v15);
  }
  v263 = 0xFFFFFFFF00000000;
  v265 = 0;
  v266 = 0;
  v264 = v12;
  v267 = 196608;
  v268 = 0;
  v271 = 0;
  v272 = 0;
  v269 = v9;
  ++*(_DWORD *)(v9 + 4);
  v18 = *(_QWORD *)(v9 + 41952);
  v270 = 1;
  v19 = *(_QWORD *)(v18 + 2160);
  v20 = (_BYTE *)(v12 + 6);
  v21 = v19 >> 4;
  if ((*(_BYTE *)(v12 + 6) & 8) == 0)
  {
    v22 = v12;
    while (1)
    {
      v23 = *(_DWORD *)v22 & 0xFFFFFFFE;
      v24 = 16 * v23;
      if (!(_DWORD)v21 || (v21 & ~*(_DWORD *)(16 * v23 + 0x20)) != 0)
        goto LABEL_42;
      v25 = *(_QWORD *)(16 * v23 + 0x58);
      if (!v25)
      {
        v26 = *(_QWORD *)(16 * v23 + 0x40);
        if (!v26 || *(_BYTE *)(v26 + 5) != 1 && *(_DWORD *)(v26 + 80) < 2u)
          goto LABEL_42;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v24, (JSC::VM *)v9, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v25)
          goto LABEL_42;
      }
      if (!*(_DWORD *)(v25 + 24))
        goto LABEL_42;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v29 = *(unsigned int *)(v25 + 8);
      v30 = *(_DWORD *)(v19 + 16);
      if ((v27 & 1) != 0)
      {
        if ((v30 & 0x20) != 0)
          v30 = *(_DWORD *)(v19 + 32);
        v31 = *(_DWORD *)(v25 + 12);
        v32 = (v30 >> 8) & *(_QWORD *)&v31;
        v33 = *(unsigned __int8 *)(v28 + v32);
        if (!*(_BYTE *)(v28 + v32))
          goto LABEL_42;
        v34 = v28 + v29;
        v35 = 1;
        while (1)
        {
          v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
          if (v19 == (v36 & 0xFFFFFFFFFFFFLL))
            break;
          v32 = ((_DWORD)v32 + v35) & v31;
          v33 = *(unsigned __int8 *)(v28 + v32);
          ++v35;
          if (!*(_BYTE *)(v28 + v32))
            goto LABEL_42;
        }
        a6 = (v36 >> 16) & 0xFF00000000 | HIBYTE(v36);
      }
      else
      {
        if ((v30 & 0x20) != 0)
          v30 = *(_DWORD *)(v19 + 32);
        v37 = *(_DWORD *)(v25 + 12);
        v38 = v37 & (v30 >> 8);
        v39 = *(_DWORD *)(v28 + 4 * v38);
        if (!v39)
          goto LABEL_42;
        v40 = v28 + 4 * v29;
        v41 = 1;
        while (1)
        {
          v42 = (v39 - 1);
          if (v19 == *(_QWORD *)(v40 + 16 * v42))
            break;
          v38 = (v38 + v41) & v37;
          v39 = *(_DWORD *)(v28 + 4 * v38);
          ++v41;
          if (!v39)
            goto LABEL_42;
        }
        a6 = *(unsigned int *)(v40 + 16 * v42 + 8) | ((unint64_t)*(unsigned __int8 *)(v40 + 16 * v42 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v52 = v22 + 16;
          v53 = a6 << 32;
        }
        else
        {
          v52 = *(_QWORD *)(v22 + 8) - 8;
          v53 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v52 + (v53 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v54 = *(unsigned __int8 *)(a4 + 5);
          if (v54 != 5)
          {
            if (v54 != 6)
              goto LABEL_70;
            v80 = *(_DWORD *)(v24 + 16) & 3;
            v81 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v83 = *(_QWORD *)(a4 + 24);
              v82 = *(_QWORD *)(a4 + 32);
              v261 = *(_QWORD *)(a4 + 8);
              v262 = v81;
              LODWORD(v263) = HIDWORD(a6);
              v265 = v22;
              goto LABEL_98;
            }
            v261 = *(_QWORD *)(a4 + 8);
            v262 = v81;
            LODWORD(v263) = HIDWORD(a6);
            v265 = v22;
LABEL_314:
            BYTE1(v267) = 3;
            if (v80 != 2)
              LOBYTE(v267) = 1;
            goto LABEL_74;
          }
          v55 = (unsigned int *)v22;
          v56 = v9;
LABEL_73:
          JSC::JSObject::fillGetterPropertySlot(v55, v56, (uint64_t)&v261, a4, a5, a6);
          goto LABEL_74;
        }
LABEL_70:
        v261 = a4;
        v265 = v22;
LABEL_71:
        v263 = __PAIR64__(a6, a5);
        LOWORD(v267) = 257;
        goto LABEL_74;
      }
LABEL_42:
      if ((*v20 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v22, (JSC::VM *)v9, v19, (uint64_t)&v261) & 1) != 0)
      {
        goto LABEL_74;
      }
      v43 = *(_QWORD *)(v24 + 48);
      if (!v43)
        v43 = *(_QWORD *)(v22 + 16);
      if ((v43 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v43 + 5) < 0x17u)
      {
        if (!v19)
          goto LABEL_79;
        v44 = *(_DWORD *)(v19 + 16);
        if ((v44 & 0x20) != 0)
          goto LABEL_79;
        v45 = *(_BYTE **)(v19 + 8);
        v46 = *(unsigned int *)(v19 + 4);
        if ((v44 & 4) != 0)
        {
          if (!(_DWORD)v46)
            goto LABEL_79;
          v47 = *v45 - 48;
          if (v47 > 9 || v46 >= 2 && *v45 == 48)
            goto LABEL_79;
          v220 = v45 + 1;
          v221 = v46 - 1;
          while (v221)
          {
            if (v47 <= 0x19999999)
            {
              v222 = *v220 - 48;
              if (v222 <= 9)
              {
                v51 = __CFADD__(v222, 10 * v47);
                v47 = v222 + 10 * v47;
                ++v220;
                --v221;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_79;
          }
        }
        else
        {
          if (!(_DWORD)v46)
            goto LABEL_79;
          v47 = *(unsigned __int16 *)v45 - 48;
          if (v47 > 9 || *(_WORD *)v45 == 48 && v46 > 1)
            goto LABEL_79;
          v48 = (unsigned __int16 *)(v45 + 2);
          v49 = v46 - 1;
          while (v49)
          {
            if (v47 <= 0x19999999)
            {
              v50 = *v48 - 48;
              if (v50 <= 9)
              {
                v51 = __CFADD__(v50, 10 * v47);
                v47 = v50 + 10 * v47;
                ++v48;
                --v49;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_79;
          }
        }
        if (v47 == -1)
          goto LABEL_79;
        v223 = v47;
        v224 = *(_QWORD *)(this + 56);
        v225 = v12;
        while (1)
        {
          v226 = 16 * (*(_DWORD *)v225 & 0xFFFFFFFE);
          v227 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(16 * *(unsigned int *)(v226 + 0x4C) + 0x70))(v225, this, v223, &v261);
          if (*(_DWORD *)(v224 + 80))
          {
            v230 = *(_DWORD *)(v224 + 80);
            if ((v230 & 0x27) != 0 && (v230 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v224 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v224 + 16))
              goto LABEL_79;
          }
          if ((v227 & 1) != 0)
            goto LABEL_74;
          if (BYTE2(v267) == 3)
          {
            if (v268)
              goto LABEL_79;
            v228 = *(unsigned __int8 *)(v225 + 5);
            if (v228 == 61)
              goto LABEL_362;
          }
          else
          {
            v228 = *(unsigned __int8 *)(v225 + 5);
            if (v228 == 61)
            {
              if (BYTE2(v267) == 1)
                goto LABEL_79;
              goto LABEL_362;
            }
          }
          if ((v228 - 39) <= 0xA)
          {
            if ((*(_BYTE *)(v225 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              LOBYTE(v275) = 0;
              v233 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v225, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
              v232 = v234 ? v233 : 0;
            }
            else
            {
              v232 = *(_QWORD *)(v225 + 24);
            }
            if (v232 <= v223)
              goto LABEL_79;
          }
LABEL_362:
          if ((*(_WORD *)(v226 + 12) & 0x800) == 0 || BYTE2(v267) == 3)
          {
            v229 = *(_QWORD *)(16 * (*(_DWORD *)v225 & 0xFFFFFFFE) + 0x30);
            if (!v229)
              v229 = *(_QWORD *)(v225 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v225 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v229 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v225 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v225, this);
            }
            else
            {
              v229 = *(_QWORD *)(16 * (*(_DWORD *)v225 & 0xFFFFFFFE) + 0x30);
              if (!v229)
                v229 = *(_QWORD *)(v225 + 16);
            }
            if (*(_DWORD *)(v224 + 80))
            {
              v231 = *(_DWORD *)(v224 + 80);
              if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v224 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v224 + 16))
                goto LABEL_79;
            }
          }
          if ((v229 & 0xFFFE000000000002) == 0)
          {
            v225 = v229;
            if (*(unsigned __int8 *)(v229 + 5) > 0x16u)
              continue;
          }
          goto LABEL_79;
        }
      }
      v20 = (_BYTE *)(v43 + 6);
      v22 = v43;
      if ((*(_BYTE *)(v43 + 6) & 8) != 0)
        goto LABEL_125;
    }
  }
  v43 = v12;
LABEL_125:
  if (v19)
  {
    v107 = *(_DWORD *)(v19 + 16);
    if ((v107 & 0x20) == 0)
    {
      v108 = *(_BYTE **)(v19 + 8);
      v109 = *(unsigned int *)(v19 + 4);
      if ((v107 & 4) != 0)
      {
        if ((_DWORD)v109)
        {
          v110 = *v108 - 48;
          if (v110 <= 9 && (v109 < 2 || *v108 != 48))
          {
            v235 = v108 + 1;
            v236 = v109 - 1;
            while (v236)
            {
              if (v110 <= 0x19999999)
              {
                v237 = *v235 - 48;
                if (v237 <= 9)
                {
                  v51 = __CFADD__(v237, 10 * v110);
                  v110 = v237 + 10 * v110;
                  ++v235;
                  --v236;
                  if (!v51)
                    continue;
                }
              }
              goto LABEL_130;
            }
LABEL_410:
            if (v110 != -1)
            {
              v238 = v110;
              v239 = *(_QWORD *)(this + 56);
              v240 = v12;
              while (1)
              {
                v241 = 16 * (*(_DWORD *)v240 & 0xFFFFFFFE);
                v242 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(16 * *(unsigned int *)(v241 + 0x4C) + 0x70))(v240, this, v238, &v261);
                v243 = v242;
                if (*(_DWORD *)(v239 + 80))
                {
                  v246 = *(_DWORD *)(v239 + 80);
                  if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v239 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v247 = *(_QWORD *)(v239 + 16);
                  if (v247)
                    v248 = 1;
                  else
                    v248 = v243;
                  if ((v248 & 1) != 0)
                  {
                    if (!v247)
                      goto LABEL_74;
                    goto LABEL_79;
                  }
                }
                else if ((v242 & 1) != 0)
                {
                  goto LABEL_74;
                }
                if (BYTE2(v267) == 3)
                {
                  if (v268)
                    goto LABEL_79;
                  v244 = *(unsigned __int8 *)(v240 + 5);
                  if (v244 == 61)
                    goto LABEL_417;
                }
                else
                {
                  v244 = *(unsigned __int8 *)(v240 + 5);
                  if (v244 == 61)
                  {
                    if (BYTE2(v267) == 1)
                      goto LABEL_79;
                    goto LABEL_417;
                  }
                }
                if ((v244 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v240 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v275) = 0;
                    v251 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v240, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v250 = v252 ? v251 : 0;
                  }
                  else
                  {
                    v250 = *(_QWORD *)(v240 + 24);
                  }
                  if (v250 <= v238)
                    goto LABEL_79;
                }
LABEL_417:
                if ((*(_WORD *)(v241 + 12) & 0x800) == 0 || BYTE2(v267) == 3)
                {
                  v245 = *(_QWORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0x30);
                  if (!v245)
                    v245 = *(_QWORD *)(v240 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v245 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v240, this);
                  }
                  else
                  {
                    v245 = *(_QWORD *)(16 * (*(_DWORD *)v240 & 0xFFFFFFFE) + 0x30);
                    if (!v245)
                      v245 = *(_QWORD *)(v240 + 16);
                  }
                  if (*(_DWORD *)(v239 + 80))
                  {
                    v249 = *(_DWORD *)(v239 + 80);
                    if ((v249 & 0x27) != 0 && (v249 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v239 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v239 + 16))
                      goto LABEL_79;
                  }
                }
                if ((v245 & 0xFFFE000000000002) == 0)
                {
                  v240 = v245;
                  if (*(unsigned __int8 *)(v245 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_79;
              }
            }
          }
        }
      }
      else if ((_DWORD)v109)
      {
        v110 = *(unsigned __int16 *)v108 - 48;
        if (v110 <= 9 && (*(_WORD *)v108 != 48 || v109 <= 1))
        {
          v162 = (unsigned __int16 *)(v108 + 2);
          v163 = v109 - 1;
          while (v163)
          {
            if (v110 <= 0x19999999)
            {
              v164 = *v162 - 48;
              if (v164 <= 9)
              {
                v51 = __CFADD__(v164, 10 * v110);
                v110 = v164 + 10 * v110;
                ++v162;
                --v163;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_130;
          }
          goto LABEL_410;
        }
      }
    }
  }
LABEL_130:
  v111 = *(_QWORD *)(this + 56);
  v257 = (JSC::MarkedSpace *)(v111 + 64);
  while (1)
  {
    v112 = 16 * (*(_DWORD *)v43 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v43 + 6) & 8) == 0)
      break;
    v254 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(v43, this, v19, &v261);
    if (*(_DWORD *)(v111 + 80))
    {
      v159 = *(_DWORD *)(v111 + 80);
      if ((v159 & 0x27) != 0 && (v159 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v257, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v111 + 16))
        goto LABEL_79;
    }
    if ((v254 & 1) != 0)
      goto LABEL_74;
    if (BYTE2(v267) == 3)
    {
      if (v268)
        goto LABEL_79;
      v135 = *(unsigned __int8 *)(v43 + 5);
      if (v135 == 61)
        goto LABEL_160;
    }
    else
    {
      v135 = *(unsigned __int8 *)(v43 + 5);
      if (v135 == 61)
      {
        if (BYTE2(v267) == 1)
          goto LABEL_79;
        goto LABEL_160;
      }
    }
    if (!v19)
      goto LABEL_160;
    if ((v135 - 50) < 0xFFFFFFF5)
      goto LABEL_160;
    v136 = *(_DWORD *)(v19 + 16);
    if ((v136 & 0x20) != 0)
      goto LABEL_160;
    v137 = *(unsigned int *)(v19 + 4);
    if (!(_DWORD)v137)
      goto LABEL_160;
    v138 = *(unsigned __int8 **)(v19 + 8);
    if ((v136 & 4) != 0)
    {
      v139 = *v138;
      if ((_DWORD)v137 == 1)
      {
LABEL_187:
        if ((v139 - 48) < 0xA)
          goto LABEL_79;
        goto LABEL_160;
      }
      if (v139 == 45)
      {
        v139 = v138[1];
        goto LABEL_191;
      }
      if ((v139 - 48) < 0xA)
        goto LABEL_202;
      if ((_DWORD)v137 == 8)
        goto LABEL_201;
    }
    else
    {
      v139 = *(unsigned __int16 *)v138;
      if ((_DWORD)v137 == 1)
        goto LABEL_187;
      if (v139 == 45)
      {
        v139 = *((unsigned __int16 *)v138 + 1);
LABEL_191:
        if ((v139 - 48) < 0xA)
        {
          if ((_DWORD)v137 == 2)
            goto LABEL_79;
          goto LABEL_202;
        }
        if ((_DWORD)v137 != 9)
          goto LABEL_160;
LABEL_201:
        if (v139 != 73)
          goto LABEL_160;
        goto LABEL_202;
      }
      if ((v139 - 48) < 0xA || (_DWORD)v137 == 8 && v139 == 73)
        goto LABEL_202;
    }
    if ((_DWORD)v137 != 3 || v139 != 78)
      goto LABEL_160;
LABEL_202:
    v253 = v253 & 0xFFFFFF0000000000 | v137 | ((unint64_t)((v136 >> 2) & 1) << 32);
    JSC::jsToNumber(v138, v253);
    v141 = (v140 >> 52) & 0x7FF;
    if ((_DWORD)v141 == 2047)
    {
      if ((v140 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v142 = v278;
      }
      else
      {
        if ((v140 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v148 = &__s[1];
        }
        else
        {
          v148 = __s;
        }
        *(_QWORD *)v148 = 0x7974696E69666E49;
        v142 = v148 + 8;
      }
      goto LABEL_216;
    }
    v143 = v140 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v140 & 0x8000000000000000) != 0 && v143)
    {
      __s[0] = 45;
      v144 = &__s[1];
    }
    else
    {
      if (!v143)
      {
        __s[0] = 48;
        v142 = &__s[1];
        goto LABEL_216;
      }
      v144 = __s;
    }
    v255 = (uint64_t)v144;
    v145 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v140 & 0x800FFFFFFFFFFFFFLL, v141);
    v142 = WTF::dragonbox::detail::to_shortest(v145, v146, v255, v147);
LABEL_216:
    *v142 = 0;
    v256 = strlen(__s);
    memcpy(&__dst, __s, v256);
    *((_BYTE *)&__dst + v256) = 0;
    v149 = *(unsigned int *)(v19 + 4);
    v150 = *(unsigned __int8 **)(v19 + 8);
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      if ((_DWORD)v149)
      {
        p_dst = (unsigned __int8 *)&__dst;
        v156 = *(unsigned int *)(v19 + 4);
        do
        {
          v158 = *p_dst++;
          v157 = v158;
          if (!v158 || *v150 != v157)
            goto LABEL_160;
          ++v150;
        }
        while (--v156);
      }
    }
    else if ((_DWORD)v149)
    {
      v151 = (unsigned __int8 *)&__dst;
      v152 = *(unsigned int *)(v19 + 4);
      do
      {
        v154 = *v151++;
        v153 = v154;
        if (!v154 || *(unsigned __int16 *)v150 != v153)
          goto LABEL_160;
        v150 += 2;
      }
      while (--v152);
    }
    if (!*((_BYTE *)&__dst + v149))
      goto LABEL_79;
LABEL_160:
    if ((*(_WORD *)(v112 + 12) & 0x800) == 0)
    {
      v131 = *(_DWORD *)v43;
LABEL_162:
      v132 = *(_QWORD *)(16 * (v131 & 0xFFFFFFFE) + 0x30);
      if (!v132)
        v132 = *(_QWORD *)(v43 + 16);
      goto LABEL_164;
    }
    v131 = *(_DWORD *)v43;
    if (BYTE2(v267) == 3)
      goto LABEL_162;
    v133 = 16 * (v131 & 0xFFFFFFFE);
    if ((*(_WORD *)(v133 + 12) & 0x800) != 0)
    {
      v132 = (*(uint64_t (**)(uint64_t, unint64_t, JSC::CallFrame *))(16
                                                                                    * *(unsigned int *)(v133 + 76)
                                                                                    + 0xB0))(v43, this, a3);
    }
    else
    {
      v132 = *(_QWORD *)(v133 + 48);
      if (!v132)
        v132 = *(_QWORD *)(v43 + 16);
    }
    if (*(_DWORD *)(v111 + 80))
    {
      v134 = *(_DWORD *)(v111 + 80);
      if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v257, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v111 + 16))
        goto LABEL_79;
    }
LABEL_164:
    if ((v132 & 0xFFFE000000000002) == 0)
    {
      v43 = v132;
      if (*(unsigned __int8 *)(v132 + 5) > 0x16u)
        continue;
    }
    goto LABEL_79;
  }
  if (!(_DWORD)v21 || (v21 & ~*(_DWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_159;
  v113 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x58);
  if (!v113)
  {
    v114 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x40);
    if (!v114 || *(_BYTE *)(v114 + 5) != 1 && *(_DWORD *)(v114 + 80) < 2u)
      goto LABEL_159;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE)), (JSC::VM *)v111, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v113)
      goto LABEL_159;
  }
  if (!*(_DWORD *)(v113 + 24))
    goto LABEL_159;
  v115 = *(_QWORD *)(v113 + 16);
  v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
  v117 = *(unsigned int *)(v113 + 8);
  v118 = *(_DWORD *)(v19 + 16);
  if ((v115 & 1) != 0)
  {
    if ((v118 & 0x20) != 0)
      v118 = *(_DWORD *)(v19 + 32);
    v119 = *(_DWORD *)(v113 + 12);
    v120 = (v118 >> 8) & *(_QWORD *)&v119;
    v121 = *(unsigned __int8 *)(v116 + v120);
    if (*(_BYTE *)(v116 + v120))
    {
      v122 = v116 + v117;
      v123 = 1;
      while (1)
      {
        v124 = *(_QWORD *)(v122 + 8 * (v121 - 1));
        if (v19 == (v124 & 0xFFFFFFFFFFFFLL))
          break;
        v120 = ((_DWORD)v120 + v123) & v119;
        v121 = *(unsigned __int8 *)(v116 + v120);
        ++v123;
        if (!*(_BYTE *)(v116 + v120))
          goto LABEL_159;
      }
      a6 = (v124 >> 16) & 0xFF00000000 | HIBYTE(v124);
      goto LABEL_156;
    }
    goto LABEL_159;
  }
  if ((v118 & 0x20) != 0)
    v118 = *(_DWORD *)(v19 + 32);
  v125 = *(_DWORD *)(v113 + 12);
  v126 = v125 & (v118 >> 8);
  v127 = *(_DWORD *)(v116 + 4 * v126);
  if (!v127)
    goto LABEL_159;
  v128 = v116 + 4 * v117;
  v129 = 1;
  while (1)
  {
    v130 = (v127 - 1);
    if (v19 == *(_QWORD *)(v128 + 16 * v130))
      break;
    v126 = (v126 + v129) & v125;
    v127 = *(_DWORD *)(v116 + 4 * v126);
    ++v129;
    if (!v127)
      goto LABEL_159;
  }
  a6 = *(unsigned int *)(v128 + 16 * v130 + 8) | ((unint64_t)*(unsigned __int8 *)(v128 + 16 * v130 + 12) << 32);
LABEL_156:
  if ((_DWORD)a6 == -1)
  {
LABEL_159:
    if ((*(_BYTE *)(v43 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v43, (JSC::VM *)v111, v19, (uint64_t)&v261) & 1) != 0)
    {
      goto LABEL_74;
    }
    goto LABEL_160;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v160 = v43 + 16;
    v161 = a6 << 32;
  }
  else
  {
    v160 = *(_QWORD *)(v43 + 8) - 8;
    v161 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v160 + (v161 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_320:
    v261 = a4;
    v265 = v43;
    goto LABEL_71;
  }
  v212 = *(unsigned __int8 *)(a4 + 5);
  if (v212 == 5)
  {
    v55 = (unsigned int *)v43;
    v56 = v111;
    goto LABEL_73;
  }
  if (v212 != 6)
    goto LABEL_320;
  v80 = *(_DWORD *)(v112 + 16) & 3;
  v213 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v261 = *(_QWORD *)(a4 + 8);
    v262 = v213;
    LODWORD(v263) = HIDWORD(a6);
    v265 = v43;
    goto LABEL_314;
  }
  v83 = *(_QWORD *)(a4 + 24);
  v82 = *(_QWORD *)(a4 + 32);
  v261 = *(_QWORD *)(a4 + 8);
  v262 = v213;
  LODWORD(v263) = HIDWORD(a6);
  v265 = v43;
LABEL_98:
  BYTE1(v267) = 3;
  if (v80 != 2)
    LOBYTE(v267) = 1;
  HIBYTE(v267) = 1;
  v271 = v83;
  v272 = v82;
LABEL_74:
  v57 = v273;
  if (*((_DWORD *)v273 + 20))
  {
    v165 = *((_DWORD *)v273 + 20);
    if ((v165 & 0x27) != 0 && (v165 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v273 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v57 + 2))
    {
LABEL_263:
      v11 = 0;
      goto LABEL_110;
    }
  }
  if (BYTE1(v267) == 1 && (v261 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v261 + 5) > 0x16u)
    v12 = v261;
LABEL_79:
  if (v270)
  {
    v58 = *(_DWORD *)(v269 + 4);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1986A2910);
    }
    *(_DWORD *)(v269 + 4) = v58 - 1;
    v269 = 0;
    v270 = 0;
  }
  if (*(_BYTE *)(v12 + 5) == 61 || (v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 61)
  {
    v59 = "queryInstances cannot be called with a Proxy.";
LABEL_84:
    v60 = (Inspector *)this;
    v61 = 46;
    goto LABEL_109;
  }
  v62 = *(_QWORD *)(this + 656);
  if (v12 == v62 || JSC::JSObject::defaultHasInstance(this, v62, v12, a4, a5, a6, a7, a8))
  {
    v59 = "queryInstances cannot be called with Object.";
    v60 = (Inspector *)this;
    v61 = 45;
    goto LABEL_109;
  }
  v68 = *(_QWORD *)(this + 664);
  if (v12 == v68 || JSC::JSObject::defaultHasInstance(this, v68, v12, v63, v64, v65, v66, v67))
  {
    v59 = "queryInstances cannot be called with Function.";
    v60 = (Inspector *)this;
    v61 = 47;
    goto LABEL_109;
  }
  v74 = *(_QWORD *)(this + 672);
  if (v12 == v74 || JSC::JSObject::defaultHasInstance(this, v74, v12, v69, v70, v71, v72, v73))
  {
    v59 = "queryInstances cannot be called with Array.";
    v60 = (Inspector *)this;
    v61 = 44;
    goto LABEL_109;
  }
  v84 = *(_QWORD *)(this + 1520);
  if ((v84 & 1) != 0)
  {
    v214 = *(uint64_t (**)(uint64_t *))(v84 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v215 = (uint64_t *)(this - 16);
    else
      v215 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    __dst = *v215;
    v275 = this;
    v276 = (char *)(this + 1520);
    v84 = v214(&__dst);
  }
  if (*(_QWORD *)(v84 + 48) == 2)
    v85 = 0;
  else
    v85 = *(_QWORD *)(v84 + 48);
  if (v85 != v12 && !JSC::JSObject::defaultHasInstance(this, v85, v12, v75, v76, v77, v78, v79))
  {
    v92 = *(_QWORD *)(this + 1552);
    if ((v92 & 1) != 0)
    {
      v216 = *(uint64_t (**)(uint64_t *))(v92 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v217 = (uint64_t *)(this - 16);
      else
        v217 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v217;
      v275 = this;
      v276 = (char *)(this + 1552);
      v92 = v216(&__dst);
    }
    if (*(_QWORD *)(v92 + 48) == 2)
      v93 = 0;
    else
      v93 = *(_QWORD *)(v92 + 48);
    if (v93 == v12 || JSC::JSObject::defaultHasInstance(this, v93, v12, v86, v87, v88, v89, v90))
    {
      v59 = "queryInstances cannot be called with Set.";
      goto LABEL_108;
    }
    v99 = *(_QWORD *)(this + 1200);
    if (v12 == v99 || JSC::JSObject::defaultHasInstance(this, v99, v12, v94, v95, v96, v97, v98))
    {
      v59 = "queryInstances cannot be called with Promise.";
      goto LABEL_84;
    }
    JSC::sanitizeStackForVM((JSC *)v9, v100, v101, v102, v103, v104, v105, v106);
    LOWORD(__dst) = 257;
    v275 = 0;
    JSC::Heap::collectNow((JSC::Heap *)(v9 + 192), (void *)1, (uint64_t)&__dst, v166, v167, v168, v169, v170);
    v176 = (unsigned int *)v275;
    v275 = 0;
    if (v176)
    {
      v177 = v176 + 2;
      do
      {
        v178 = __ldaxr(v177);
        v179 = v178 - 1;
      }
      while (__stlxr(v179, v177));
      if (!v179)
      {
        atomic_store(1u, v176 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v176 + 8))(v176);
      }
    }
    v11 = JSC::constructEmptyArray(this, 0, 0, 0, v171, v172, v173, v174, v175);
    v187 = v273;
    if (*((_DWORD *)v273 + 20))
    {
      v219 = *((_DWORD *)v273 + 20);
      if ((v219 & 0x27) != 0 && (v219 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v273 + 64), 7u, v181, v182, v183, v184, v185, v186);
      if (*((_QWORD *)v187 + 2))
        goto LABEL_263;
    }
    v258 = (JSC::MarkedSpace *)(v9 + 352);
    JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(v9 + 352), v180, v181, v182, v183, v184, v185, v186);
    v195 = *(unsigned int ****)(v9 + 456);
    if (v195)
    {
      v196 = *((unsigned int *)v195 - 1);
      v259 = &v195[v196];
      if (*((_DWORD *)v195 - 3))
      {
        if ((_DWORD)v196)
        {
          v197 = 8 * v196;
          while ((unint64_t)*v195 + 1 <= 1)
          {
            ++v195;
            v197 -= 8;
            if (!v197)
            {
              v195 = v259;
              break;
            }
          }
        }
        v198 = v259;
        goto LABEL_278;
      }
      v218 = &v195[v196];
    }
    else
    {
      v259 = 0;
      v218 = 0;
      v196 = 0;
    }
    v198 = &v195[v196];
    v195 = v218;
LABEL_278:
    while (v195 != v259)
    {
      v199 = **v195;
      v200 = v199[1];
      if (v200 <= 0x3FF)
      {
        if (*((unsigned __int8 *)v199 + 9) >= 2u)
        {
          do
          {
            JSC::MarkedBlock::Handle::isLive((uint64_t)v199, *((_QWORD *)v199 + 11) + 16 * v200, v189, v190, v191, v192, v193, v194);
            v200 += *v199;
          }
          while (v200 < 0x400);
        }
        else
        {
          do
          {
            v201 = *((_QWORD *)v199 + 11) + 16 * v200;
            if (JSC::MarkedBlock::Handle::isLive((uint64_t)v199, v201, v189, v190, v191, v192, v193, v194)
              && ((v201 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v201 + 5) != 61)
              && JSC::JSObject::defaultHasInstance(this, v201, v12, v190, v191, v192, v193, v194))
            {
              if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
                v203 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v11 + 8) - 8);
              else
                v203 = 0;
              JSC::JSObject::putDirectIndex(v11, this, v203, v201, v191, v192, v193, v194, v202);
            }
            v200 += *v199;
          }
          while (v200 <= 0x3FF);
        }
      }
      v204 = v195 + 1;
      v195 = v198;
      if (v204 != v198)
      {
        v195 = v204;
        while ((unint64_t)*v195 + 1 <= 1)
        {
          if (++v195 == v198)
          {
            v195 = v198;
            break;
          }
        }
      }
    }
    v205 = *(unsigned int *)(v9 + 388);
    if ((_DWORD)v205)
    {
      v206 = *(uint64_t **)(v9 + 376);
      v207 = 8 * v205;
      do
      {
        v208 = *v206;
        if (((*(_BYTE *)(*v206 + 33) & 1) != 0 || (*(_BYTE *)(v208 + 32) & 1) != 0)
          && *(unsigned __int16 *)(v208 + 34) <= 0x1FFu)
        {
          v209 = v208 + 112;
          if (((v208 + 112) & 0xFFFE000000000002) != 0 || *(_BYTE *)(v208 + 117) != 61)
          {
            if (JSC::JSObject::defaultHasInstance(this, v209, v12, v190, v191, v192, v193, v194))
            {
              if ((*(_BYTE *)(v11 + 4) & 0xE) != 0)
                v211 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v11 + 8) - 8);
              else
                v211 = 0;
              JSC::JSObject::putDirectIndex(v11, this, v211, v209, v191, v192, v193, v194, v210);
            }
          }
        }
        ++v206;
        v207 -= 8;
      }
      while (v207);
    }
    JSC::MarkedSpace::didFinishIterating(v258, v188, v189, v190, v191, v192, v193, v194);
    goto LABEL_110;
  }
  v59 = "queryInstances cannot be called with Map.";
LABEL_108:
  v60 = (Inspector *)this;
  v61 = 42;
LABEL_109:
  v11 = JSC::throwTypeError((unint64_t)v60, &v273, (uint64_t)v59, v61);
LABEL_110:
  if (v270)
  {
    v91 = *(_DWORD *)(v269 + 4);
    if (!v91)
    {
      __break(0xC471u);
      JUMPOUT(0x1986A2930);
    }
    *(_DWORD *)(v269 + 4) = v91 - 1;
  }
  return v11;
}

void Inspector::jsInjectedScriptHostPrototypeFunctionQueryHolders(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t i;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v165;
  unsigned int v166;
  unint64_t v167;
  double v168;
  double v169;
  double v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int32x4_t v188;
  uint64_t v189;
  unint64_t *v190;
  JSC::VM *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 *v199;
  int v200;
  int v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  JSC::VM *v206;
  void (**v207)(Inspector::HeapHolderFinder *__hidden);
  char v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211[2];
  JSC::VM *v212;
  uint64_t v213[2];
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE v218[8];
  unsigned int *v219;

  v10 = *((_QWORD *)this + 7);
  v206 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    JSC::throwTypeError(this, &v206);
    return;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return;
  v212 = (JSC::VM *)v10;
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    JSC::throwTypeError((unint64_t)this, &v212, (uint64_t)"queryHolders first argument must be an object.", 47);
    return;
  }
  v20 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_7;
  v205 = *(_DWORD *)(v10 + 80);
  if ((v205 & 0x27) != 0 && (v205 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_7:
    ++*(_DWORD *)(v10 + 916);
    JSC::Heap::preventCollection(v10 + 192, v13, v14, v15, v16, v17, v18, v19);
    JSC::sanitizeStackForVM((JSC *)v10, v21, v22, v23, v24, v25, v26, v27);
    v33 = *(_QWORD *)(v10 + 93352);
    if ((v33 & 1) != 0)
      v33 = (*(uint64_t (**)(uint64_t))(v33 & 0xFFFFFFFFFFFFFFFCLL))(v10);
    v207 = off_1E3594180;
    v208 = 0;
    v209 = 0u;
    v210 = 0u;
    v211[0] = 0;
    v211[1] = v12;
    *(_QWORD *)(v33 + 24) = &v207;
    v34 = *(_QWORD *)v33;
    *(_QWORD *)(v34 + 93128) = &v207;
    v218[0] = 1;
    v218[1] = 1;
    v219 = 0;
    JSC::Heap::collectNow((JSC::Heap *)(v34 + 192), (void *)1, (uint64_t)v218, v28, v29, v30, v31, v32);
    v42 = v219;
    v219 = 0;
    if (v42)
    {
      v43 = v42 + 2;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v42 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(*(_QWORD *)v33 + 93128) = 0;
    v216 = 0;
    v217 = 0;
    if ((_QWORD)v210)
    {
      v46 = *(unsigned int *)(v210 - 4);
      v47 = (uint64_t *)(v210 + 8 * v46);
      if (*(_DWORD *)(v210 - 12))
      {
        v48 = (uint64_t *)v210;
        if ((_DWORD)v46)
        {
          v49 = 8 * v46;
          v48 = (uint64_t *)v210;
          do
          {
            if ((unint64_t)(*v48 + 1) > 1)
              goto LABEL_21;
            ++v48;
            v49 -= 8;
          }
          while (v49);
          v48 = v47;
        }
        goto LABEL_21;
      }
      v48 = (uint64_t *)(v210 + 8 * v46);
    }
    else
    {
      v48 = 0;
      v46 = 0;
    }
    v47 = (uint64_t *)(v210 + 8 * v46);
    if (!(_QWORD)v210)
    {
      v50 = 0;
      goto LABEL_22;
    }
LABEL_21:
    v50 = (uint64_t *)(v210 + 8 * *(unsigned int *)(v210 - 4));
LABEL_22:
    if (v50 != v48)
    {
      do
      {
        v215 = 0;
        v51 = v48 + 1;
        v215 = *v48;
        WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(&v217, &v215, v37, v38, v39, v40, v41, (uint64_t)v213);
        v48 = v47;
        if (v51 != v47)
        {
          v48 = v51;
          do
          {
            if ((unint64_t)(*v48 + 1) > 1)
              goto LABEL_28;
            ++v48;
          }
          while (v48 != v47);
          v48 = v47;
        }
LABEL_28:
        ;
      }
      while (v48 != v50);
      v52 = v217;
      v215 = 0;
      if (v217)
      {
        while (1)
        {
          if (!*(_DWORD *)(v52 - 12))
            goto LABEL_104;
          v53 = *(unsigned int *)(v52 - 4);
          v54 = (uint64_t *)v52;
          if ((_DWORD)v53)
          {
            v55 = 8 * v53;
            v54 = (uint64_t *)v52;
            while ((unint64_t)(*v54 + 1) <= 1)
            {
              ++v54;
              v55 -= 8;
              if (!v55)
                goto LABEL_104;
            }
          }
          if ((uint64_t *)(v52 + 8 * v53) == v54)
            goto LABEL_104;
          v56 = *v54;
          *v54 = -1;
          ++*(_DWORD *)(v217 - 16);
          if (v217)
            v57 = *(_DWORD *)(v217 - 12) - 1;
          else
            v57 = -1;
          *(_DWORD *)(v217 - 12) = v57;
          if (v217)
          {
            v58 = *(_DWORD *)(v217 - 4);
            if (6 * *(_DWORD *)(v217 - 12) < v58 && v58 >= 9)
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, v58 >> 1, 0, v37, v38, v39, v40, v41);
          }
          v215 = v56;
          if (!v56)
            goto LABEL_104;
          v60 = *((_QWORD *)&v210 + 1);
          if (!*((_QWORD *)&v210 + 1))
            goto LABEL_53;
          v61 = *(_DWORD *)(*((_QWORD *)&v210 + 1) - 8);
          v62 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v215) & v61;
          v63 = *(_QWORD *)(v60 + 8 * v62);
          if (v63 != v215)
            break;
LABEL_67:
          v215 = 0;
          v52 = v217;
          if (!v217)
            goto LABEL_104;
        }
        v64 = 1;
        while (v63)
        {
          v62 = (v62 + v64) & v61;
          v63 = *(_QWORD *)(v60 + 8 * v62);
          ++v64;
          if (v63 == v215)
            goto LABEL_67;
        }
LABEL_53:
        WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(&v216, &v215, v37, v38, v39, v40, v41, (uint64_t)v213);
        if (v214 && *((_QWORD *)&v209 + 1))
        {
          v65 = *(_DWORD *)(*((_QWORD *)&v209 + 1) - 8);
          v66 = (~(v215 << 32) + v215) ^ ((unint64_t)(~(v215 << 32) + v215) >> 22);
          v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
          v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
          v69 = v65 & ((v68 >> 31) ^ v68);
          v70 = *(_QWORD *)(*((_QWORD *)&v209 + 1) + 16 * v69);
          if (v70 == v215)
          {
LABEL_59:
            WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::HashTable(v213, (uint64_t *)(*((_QWORD *)&v209 + 1) + 16 * v69 + 8));
            v72 = v213[0];
            if (v213[0])
            {
              if (!*(_DWORD *)(v213[0] - 12))
                goto LABEL_66;
              v73 = *(unsigned int *)(v213[0] - 4);
              v74 = (uint64_t *)v213[0];
              if ((_DWORD)v73)
              {
                v75 = 0;
                while ((unint64_t)(*(_QWORD *)(v213[0] + v75) + 1) <= 1)
                {
                  v75 += 8;
                  if (8 * v73 == v75)
                    goto LABEL_65;
                }
                v74 = (uint64_t *)(v213[0] + v75);
              }
              v76 = v213[0] + 8 * v73;
              if (v74 != (uint64_t *)v76)
              {
                v77 = *v74;
                do
                {
                  v78 = v217;
                  if (v217
                    || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, 8uLL, 0, v37, v38, v39, v40, v41), (v78 = v217) != 0))
                  {
                    v79 = *(_DWORD *)(v78 - 8);
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v80 = (~(v77 << 32) + v77) ^ ((unint64_t)(~(v77 << 32) + v77) >> 22);
                  v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
                  v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
                  v83 = v79 & ((v82 >> 31) ^ v82);
                  v36 = (_QWORD *)(v78 + 8 * v83);
                  v84 = *v36;
                  if (*v36)
                  {
                    v85 = 0;
                    v86 = 1;
                    do
                    {
                      if (v84 == v77)
                        goto LABEL_89;
                      if (v84 == -1)
                        v85 = v36;
                      v83 = (v83 + v86) & v79;
                      v36 = (_QWORD *)(v78 + 8 * v83);
                      v84 = *v36;
                      ++v86;
                    }
                    while (*v36);
                    if (v85)
                    {
                      *v85 = 0;
                      --*(_DWORD *)(v217 - 16);
                      v36 = v85;
                    }
                  }
                  *v36 = v77;
                  if (v217)
                    v87 = *(_DWORD *)(v217 - 12) + 1;
                  else
                    v87 = 1;
                  *(_DWORD *)(v217 - 12) = v87;
                  if (v217)
                    v88 = *(_DWORD *)(v217 - 12);
                  else
                    v88 = 0;
                  v89 = (*(_DWORD *)(v217 - 16) + v88);
                  v90 = *(unsigned int *)(v217 - 4);
                  if (v90 <= 0x400)
                  {
                    if (3 * v90 > 4 * v89)
                      goto LABEL_89;
                    if ((_DWORD)v90)
LABEL_101:
                      v91 = ((_DWORD)v90 << (6 * *(_DWORD *)(v217 - 12) >= (2 * v90)));
                    else
                      v91 = 8;
                    WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, v91, (uint64_t)v36, v37, v38, v39, v40, v41);
                    goto LABEL_89;
                  }
                  if (v90 <= 2 * v89)
                    goto LABEL_101;
                  do
                  {
LABEL_89:
                    if (++v74 == (uint64_t *)v76)
                      goto LABEL_102;
                    v77 = *v74;
                  }
                  while ((unint64_t)(*v74 + 1) <= 1);
                }
                while (v74 != (uint64_t *)v76);
LABEL_102:
                v72 = v213[0];
              }
LABEL_65:
              if (v72)
LABEL_66:
                WTF::fastFree(v72 - 16, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
            }
          }
          else
          {
            v71 = 1;
            while (v70)
            {
              v69 = ((_DWORD)v69 + v71) & v65;
              v70 = *(_QWORD *)(*((_QWORD *)&v209 + 1) + 16 * v69);
              ++v71;
              if (v70 == v215)
                goto LABEL_59;
            }
          }
        }
        goto LABEL_67;
      }
    }
LABEL_104:
    if (v211[0])
    {
      v92 = *(unsigned int *)(v211[0] - 4);
      v93 = v211[0] + 8 * v92;
      if (*(_DWORD *)(v211[0] - 12))
      {
        v94 = (uint64_t *)v211[0];
        if ((_DWORD)v92)
        {
          v95 = 8 * v92;
          v94 = (uint64_t *)v211[0];
          do
          {
            if ((unint64_t)(*v94 + 1) > 1)
              goto LABEL_111;
            ++v94;
            v95 -= 8;
          }
          while (v95);
          v94 = (uint64_t *)v93;
        }
        goto LABEL_111;
      }
      v94 = (uint64_t *)(v211[0] + 8 * v92);
    }
    else
    {
      v94 = 0;
      v92 = 0;
    }
    v93 = v211[0] + 8 * v92;
    if (!v211[0])
    {
      v96 = 0;
      goto LABEL_112;
    }
LABEL_111:
    v96 = v211[0] + 8 * *(unsigned int *)(v211[0] - 4);
LABEL_112:
    if ((uint64_t *)v96 != v94)
    {
      do
      {
        v215 = 0;
        v97 = v94 + 1;
        v215 = *v94;
        WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(&v217, &v215, v37, v38, v39, v40, v41, (uint64_t)v213);
        v94 = (uint64_t *)v93;
        if (v97 != (uint64_t *)v93)
        {
          v94 = v97;
          do
          {
            if ((unint64_t)(*v94 + 1) > 1)
              goto LABEL_118;
            ++v94;
          }
          while (v94 != (uint64_t *)v93);
          v94 = (uint64_t *)v93;
        }
LABEL_118:
        ;
      }
      while (v94 != (uint64_t *)v96);
    }
    for (i = v217; v217; i = v217)
    {
      if (!*(_DWORD *)(i - 12))
        break;
      v99 = *(unsigned int *)(i - 4);
      v100 = (uint64_t *)i;
      if ((_DWORD)v99)
      {
        v101 = 8 * v99;
        v100 = (uint64_t *)i;
        while ((unint64_t)(*v100 + 1) <= 1)
        {
          ++v100;
          v101 -= 8;
          if (!v101)
            goto LABEL_217;
        }
      }
      if ((uint64_t *)(i + 8 * v99) == v100)
        break;
      v102 = *v100;
      *v100 = -1;
      ++*(_DWORD *)(v217 - 16);
      if (v217)
        v103 = *(_DWORD *)(v217 - 12) - 1;
      else
        v103 = -1;
      *(_DWORD *)(v217 - 12) = v103;
      if (v217)
      {
        v104 = *(_DWORD *)(v217 - 4);
        if (6 * *(_DWORD *)(v217 - 12) < v104 && v104 >= 9)
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, v104 >> 1, 0, v37, v38, v39, v40, v41);
      }
      if (!v102)
        break;
      if (*(unsigned __int8 *)(v102 + 5) <= 0x16u && (_QWORD)v209)
      {
        v106 = *(_DWORD *)(v209 - 8);
        v107 = (~(v102 << 32) + v102) ^ ((unint64_t)(~(v102 << 32) + v102) >> 22);
        v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
        v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
        v110 = v106 & ((v109 >> 31) ^ v109);
        v111 = *(_QWORD *)(v209 + 16 * v110);
        if (v111 == v102)
        {
LABEL_143:
          WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::HashTable(v213, (uint64_t *)(v209 + 16 * v110 + 8));
          v113 = v213[0];
          if (v213[0])
          {
            if (!*(_DWORD *)(v213[0] - 12))
              goto LABEL_150;
            v114 = *(unsigned int *)(v213[0] - 4);
            v115 = (uint64_t *)v213[0];
            if ((_DWORD)v114)
            {
              v116 = 0;
              while ((unint64_t)(*(_QWORD *)(v213[0] + v116) + 1) <= 1)
              {
                v116 += 8;
                if (8 * v114 == v116)
                  goto LABEL_149;
              }
              v115 = (uint64_t *)(v213[0] + v116);
            }
            v117 = v213[0] + 8 * v114;
            if (v115 != (uint64_t *)v117)
            {
              v118 = *v115;
              while (1)
              {
                v119 = v211[0];
                v120 = ~(v118 << 32);
                if (!v211[0])
                  break;
                v121 = *(_DWORD *)(v211[0] - 8);
                v122 = ((v120 + v118) ^ ((unint64_t)(v120 + v118) >> 22))
                     + ~(((v120 + v118) ^ ((unint64_t)(v120 + v118) >> 22)) << 13);
                v123 = (9 * (v122 ^ (v122 >> 8))) ^ ((9 * (v122 ^ (v122 >> 8))) >> 15);
                v124 = v121 & (((v123 + ~(v123 << 27)) >> 31) ^ (v123 + ~((_DWORD)v123 << 27)));
                v125 = *(_QWORD *)(v211[0] + 8 * v124);
                if (v125 == v118)
                  goto LABEL_195;
                v126 = 1;
                do
                {
                  if (!v125)
                    goto LABEL_165;
                  v124 = (v124 + v126) & v121;
                  v125 = *(_QWORD *)(v211[0] + 8 * v124);
                  ++v126;
                }
                while (v125 != v118);
                do
                {
LABEL_195:
                  if (++v115 == (uint64_t *)v117)
                    goto LABEL_216;
                  v118 = *v115;
                }
                while ((unint64_t)(*v115 + 1) <= 1);
                if (v115 == (uint64_t *)v117)
                {
LABEL_216:
                  v113 = v213[0];
                  goto LABEL_149;
                }
              }
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v211, 8uLL, 0, v37, v38, v39, v40, v41);
              v119 = v211[0];
              if (v211[0])
                v121 = *(_DWORD *)(v211[0] - 8);
              else
                v121 = 0;
LABEL_165:
              v127 = ((v120 + v118) ^ ((unint64_t)(v120 + v118) >> 22))
                   + ~(((v120 + v118) ^ ((unint64_t)(v120 + v118) >> 22)) << 13);
              v128 = (9 * (v127 ^ (v127 >> 8))) ^ ((9 * (v127 ^ (v127 >> 8))) >> 15);
              v129 = ((v128 + ~(v128 << 27)) >> 31) ^ (v128 + ~((_DWORD)v128 << 27));
              v130 = v121 & v129;
              v131 = (_QWORD *)(v119 + 8 * (v121 & v129));
              v132 = *v131;
              if (*v131)
              {
                v133 = 0;
                v134 = 1;
                do
                {
                  if (v132 == v118)
                    goto LABEL_179;
                  if (v132 == -1)
                    v133 = v131;
                  v130 = (v130 + v134) & v121;
                  v131 = (_QWORD *)(v119 + 8 * v130);
                  v132 = *v131;
                  ++v134;
                }
                while (*v131);
                if (v133)
                {
                  *v133 = 0;
                  --*(_DWORD *)(v211[0] - 16);
                  v131 = v133;
                }
              }
              *v131 = v118;
              if (v211[0])
                v135 = *(_DWORD *)(v211[0] - 12) + 1;
              else
                v135 = 1;
              *(_DWORD *)(v211[0] - 12) = v135;
              if (v211[0])
                v136 = *(_DWORD *)(v211[0] - 12);
              else
                v136 = 0;
              v137 = (*(_DWORD *)(v211[0] - 16) + v136);
              v138 = *(unsigned int *)(v211[0] - 4);
              if (v138 > 0x400)
              {
                if (v138 > 2 * v137)
                  goto LABEL_179;
              }
              else
              {
                if (3 * v138 > 4 * v137)
                {
LABEL_179:
                  v139 = v217;
                  if (v217
                    || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, 8uLL, 0, v37, v38, v39, v40, v41), (v139 = v217) != 0))
                  {
                    v140 = *(_DWORD *)(v139 - 8);
                  }
                  else
                  {
                    v140 = 0;
                  }
                  v141 = v140 & v129;
                  v36 = (_QWORD *)(v139 + 8 * (v140 & v129));
                  v142 = *v36;
                  if (*v36)
                  {
                    v143 = 0;
                    v144 = 1;
                    do
                    {
                      if (v142 == v118)
                        goto LABEL_195;
                      if (v142 == -1)
                        v143 = v36;
                      v141 = (v141 + v144) & v140;
                      v36 = (_QWORD *)(v139 + 8 * v141);
                      v142 = *v36;
                      ++v144;
                    }
                    while (*v36);
                    if (v143)
                    {
                      *v143 = 0;
                      --*(_DWORD *)(v217 - 16);
                      v36 = v143;
                    }
                  }
                  *v36 = v118;
                  if (v217)
                    v145 = *(_DWORD *)(v217 - 12) + 1;
                  else
                    v145 = 1;
                  *(_DWORD *)(v217 - 12) = v145;
                  if (v217)
                    v146 = *(_DWORD *)(v217 - 12);
                  else
                    v146 = 0;
                  v147 = (*(_DWORD *)(v217 - 16) + v146);
                  v148 = *(unsigned int *)(v217 - 4);
                  if (v148 > 0x400)
                  {
                    if (v148 > 2 * v147)
                      goto LABEL_195;
                  }
                  else
                  {
                    if (3 * v148 > 4 * v147)
                      goto LABEL_195;
                    if (!(_DWORD)v148)
                    {
                      v150 = 8;
LABEL_206:
                      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v217, v150, (uint64_t)v36, v37, v38, v39, v40, v41);
                      goto LABEL_195;
                    }
                  }
                  v150 = ((_DWORD)v148 << (6 * *(_DWORD *)(v217 - 12) >= (2 * v148)));
                  goto LABEL_206;
                }
                if (!(_DWORD)v138)
                {
                  v149 = 8;
LABEL_203:
                  WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v211, v149, (uint64_t)v131, v37, v38, v39, v40, v41);
                  goto LABEL_179;
                }
              }
              v149 = ((_DWORD)v138 << (6 * *(_DWORD *)(v211[0] - 12) >= (2 * v138)));
              goto LABEL_203;
            }
LABEL_149:
            if (v113)
LABEL_150:
              WTF::fastFree(v113 - 16, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
          }
        }
        else
        {
          v112 = 1;
          while (v111)
          {
            v110 = ((_DWORD)v110 + v112) & v106;
            v111 = *(_QWORD *)(v209 + 16 * v110);
            ++v112;
            if (v111 == v102)
              goto LABEL_143;
          }
        }
      }
    }
LABEL_217:
    v151 = v211[0];
    if (!v211[0])
      goto LABEL_259;
    v152 = *(_DWORD *)(v211[0] - 4);
    if (!v152)
      goto LABEL_259;
    v153 = 0;
    while (1)
    {
      v154 = *(_QWORD *)(v151 + 8 * --v152);
      if ((unint64_t)(v154 + 1) >= 2)
      {
        v213[0] = *(_QWORD *)(v151 + 8 * v152);
        if (*(unsigned __int8 *)(v154 + 5) < 0x17u)
          goto LABEL_228;
        v155 = v216;
        if (!v216)
          goto LABEL_228;
        v156 = *(_DWORD *)(v216 - 8);
        v157 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(v213) & v156;
        v158 = *(_QWORD *)(v155 + 8 * v157);
        if (v158 != v213[0])
          break;
      }
LABEL_229:
      if (!v152)
      {
        v160 = v211[0];
        if (v153)
        {
          *(_DWORD *)(v211[0] - 16) += v153;
          if (v211[0])
            v161 = *(_DWORD *)(v211[0] - 12);
          else
            v161 = 0;
          *(_DWORD *)(v211[0] - 12) = v161 - v153;
          v160 = v211[0];
          if (!v211[0])
            goto LABEL_259;
        }
        else if (!v211[0])
        {
          goto LABEL_259;
        }
        v162 = *(_DWORD *)(v160 - 4);
        v163 = *(unsigned int *)(v160 - 12);
        if (v162 < 9 || 6 * (int)v163 >= v162)
          goto LABEL_259;
        v165 = (v163 - 1) | ((v163 - 1) >> 1) | ((((_DWORD)v163 - 1) | ((v163 - 1) >> 1)) >> 2);
        v166 = v165 | (v165 >> 4) | ((v165 | (v165 >> 4)) >> 8);
        v167 = (v166 | HIWORD(v166)) + 1;
        if (v167 > 0x400)
        {
          if (v167 <= 2 * v163)
          {
LABEL_242:
            LODWORD(v167) = 2 * v167;
            if (v167 <= 0x400)
              goto LABEL_243;
          }
          v168 = (double)v163;
          v169 = (double)v167;
          v170 = 0.416666667;
        }
        else
        {
          if (3 * v167 <= 4 * v163)
            goto LABEL_242;
LABEL_243:
          v168 = (double)v163;
          v169 = (double)v167;
          v170 = 0.604166667;
        }
        if (v169 * v170 <= v168)
          LODWORD(v167) = 2 * v167;
        if (v167 <= 8)
          v171 = 8;
        else
          v171 = v167;
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v211, v171, 0, v37, v38, v39, v40, v41);
LABEL_259:
        if (v216)
          WTF::fastFree(v216 - 16, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
        if (v217)
          WTF::fastFree(v217 - 16, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
        if (v211[0] && (v172 = *(unsigned int *)(v211[0] - 12), (_DWORD)v172))
        {
          if (v172 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v173 = WTF::fastMalloc((WTF *)(8 * v172));
          v174 = v173;
          if (v211[0] && *(_DWORD *)(v211[0] - 12))
          {
            v175 = *(unsigned int *)(v211[0] - 4);
            if ((_DWORD)v175)
            {
              v176 = 8 * v175;
              v177 = (uint64_t *)v211[0];
              while ((unint64_t)(*v177 + 1) <= 1)
              {
                ++v177;
                v176 -= 8;
                if (!v176)
                  goto LABEL_272;
              }
            }
            else
            {
              v177 = (uint64_t *)v211[0];
            }
            v203 = v211[0] + 8 * v175;
            if (v177 != (uint64_t *)v203)
            {
              v178 = 0;
              v204 = *v177;
LABEL_301:
              *(_QWORD *)(v173 + 8 * v178++) = v204;
              while (++v177 != (uint64_t *)v203)
              {
                v204 = *v177;
                if ((unint64_t)(*v177 + 1) > 1)
                {
                  if (v177 != (uint64_t *)v203)
                    goto LABEL_301;
                  break;
                }
              }
LABEL_273:
              v179 = 126 - 2 * __clz(v178);
              if (v178)
                v180 = v179;
              else
                v180 = 0;
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **,false>(v174, (unint64_t *)(v174 + 8 * v178), v180, 1);
              if (v178)
              {
                v189 = 8 * v178;
                v190 = (unint64_t *)v174;
                do
                {
                  if ((*(_BYTE *)(v20 + 4) & 0xE) != 0)
                    v191 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v20 + 8) - 8);
                  else
                    v191 = 0;
                  v192 = *v190++;
                  JSC::JSObject::putDirectIndex(v20, (unint64_t)this, v191, v192, v184, v185, v186, v187, v188);
                  v189 -= 8;
                }
                while (v189);
              }
              if (v174)
                WTF::fastFree(v174, v181, v182, v183, v184, v185, v186, v187);
              Inspector::HeapHolderFinder::~HeapHolderFinder((Inspector::HeapHolderFinder *)&v207, v181, v182, v183, v184, v185, v186, v187);
              if (*(_BYTE *)(v10 + 753))
              {
                v199 = (unsigned __int8 *)(v10 + 1318);
                v200 = __ldxr((unsigned __int8 *)(v10 + 1318));
                if (v200 == 1)
                {
                  if (!__stlxr(0, v199))
                    goto LABEL_291;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v199, 0, v193, v194, v195, v196, v197, v198);
              }
LABEL_291:
              v201 = *(_DWORD *)(v10 + 916) - 1;
              *(_DWORD *)(v10 + 916) = v201;
              if (*(unsigned __int8 *)(v10 + 1198) | HIBYTE(dword_1ECF4C5CE))
                v202 = v201 == 0;
              else
                v202 = 0;
              if (v202)
              {
                *(_BYTE *)(v10 + 1198) = 0;
                JSC::Heap::collectIfNecessaryOrDefer(v10 + 192, 0);
              }
              return;
            }
          }
        }
        else
        {
          v174 = 0;
        }
LABEL_272:
        v178 = 0;
        goto LABEL_273;
      }
    }
    v159 = 1;
    while (v158)
    {
      v157 = (v157 + v159) & v156;
      v158 = *(_QWORD *)(v155 + 8 * v157);
      ++v159;
      if (v158 == v213[0])
        goto LABEL_229;
    }
LABEL_228:
    *(_QWORD *)(v151 + 8 * v152) = -1;
    ++v153;
    goto LABEL_229;
  }
}

uint64_t Inspector::jsInjectedScriptHostPrototypeAttributeEvaluate(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v8)(_QWORD *);
  _QWORD *v9;
  JSC::VM *v10;
  _QWORD v11[3];

  v10 = *(JSC::VM **)(this + 56);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v10);
  }
  v4 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v4 <= 0xA2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1986A4234);
  }
  v5 = *(_QWORD *)(v4 + 1304);
  if ((v5 & 1) != 0)
  {
    v8 = *(uint64_t (**)(_QWORD *))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v9 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v9 = (_QWORD *)(this - 16);
    v11[0] = *v9;
    v11[1] = this;
    v11[2] = v4 + 1304;
    return v8(v11);
  }
  return v5;
}

uint64_t Inspector::jsInjectedScriptHostPrototypeAttributeSavedResultAlias(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  char v33;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSInjectedScriptHost::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                             + 0x4C)))
  {
    return JSC::throwTypeError(this, &v31);
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (!*(_BYTE *)(v11 + 32))
    return 10;
  v12 = *(WTF::StringImpl **)(v11 + 24);
  if (v12)
    *(_DWORD *)v12 += 2;
  v32 = v12;
  v33 = 1;
  v20 = JSC::jsString(v9, (JSC::VM *)&v32, a3, a4, a5, a6, a7, a8);
  if (v33)
  {
    v21 = v32;
    v32 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  return v20;
}

void Inspector::JSJavaScriptCallFrame::destroy(Inspector::JSJavaScriptCallFrame *this, JSC::JSCell *a2)
{
  Inspector::JavaScriptCallFrame *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (Inspector::JavaScriptCallFrame *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v3);
      WTF::fastFree(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

unint64_t Inspector::JSJavaScriptCallFramePrototype::create(Inspector::JSJavaScriptCallFramePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = this;
  v10 = *((_QWORD *)this + 4863);
  if (v10 >= *((_QWORD *)this + 4864))
  {
    v10 = *((_QWORD *)this + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (char *)this + 38880;
      v15 = (char *)this + 192;
      v16 = a2;
      v18 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, (uint64_t)v15, 16, 0, 0, v19, v20, v21);
      a3 = (uint64_t)v18;
      v9 = this;
      a2 = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)this + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)this + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  Inspector::JSJavaScriptCallFramePrototype::finishCreation((Inspector::JSJavaScriptCallFramePrototype *)v10, v9, a2, (uint64_t)a4, a5, a6, a7, a8);
  return v10;
}

uint64_t Inspector::JSJavaScriptCallFramePrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 2071;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&Inspector::JSJavaScriptCallFramePrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t Inspector::toJS(uint64_t a1, unint64_t *a2, Inspector::JavaScriptCallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  uint64_t Structure;
  JSC::Structure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Inspector::JavaScriptCallFrame *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Inspector::JavaScriptCallFrame *v42;

  if (!a3)
    return 2;
  v11 = *(unint64_t **)(a1 + 56);
  Structure = Inspector::JSJavaScriptCallFramePrototype::createStructure(v11, (JSC::VM *)a2, a2[82], a4, a5, a6, a7, a8, a9);
  v18 = Inspector::JSJavaScriptCallFramePrototype::create((Inspector::JSJavaScriptCallFramePrototype *)v11, (JSC::VM *)a2, Structure, v13, v14, v15, v16, v17);
  v25 = (JSC::VM *)Inspector::JSJavaScriptCallFrame::createStructure(v11, (JSC::VM *)a2, v18, v19, v20, v21, v22, v23, v24);
  ++*(_DWORD *)a3;
  v42 = a3;
  v31 = Inspector::JSJavaScriptCallFrame::create((uint64_t)v11, v25, (uint64_t *)&v42, v26, v27, v28, v29, v30);
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v32);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  return v31;
}

uint64_t Inspector::JSJavaScriptCallFrame::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&Inspector::JSJavaScriptCallFrame::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t Inspector::JSJavaScriptCallFrame::create(uint64_t a1, JSC::VM *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = *(_QWORD **)(a1 + 40632);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::javaScriptCallFrameSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v15);
    v11[5] = result + (int)v15;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, a1 + 192, 32, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v14;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

void Inspector::JSJavaScriptCallFramePrototype::finishCreation(Inspector::JSJavaScriptCallFramePrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"evaluateWithScopeExtension", 0x1AuLL, a4, a5, a6, a7, a8, &v234);
  v11 = v234;
  if (v234 && (*((_BYTE *)v234 + 16) & 0x20) == 0)
  {
    v12 = v234;
LABEL_6:
    *(_DWORD *)v12 += 2;
    goto LABEL_7;
  }
  v12 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v12)
    goto LABEL_6;
LABEL_7:
  v234 = v12;
  v20 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v234, (uint64_t)Inspector::jsJavaScriptCallFramePrototypeFunctionEvaluateWithScopeExtension, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v234;
  v234 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v11, v20, 4, v17, v18, v19, v21);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"scopeDescriptions", 0x11uLL, v25, v26, v27, v28, v29, &v234);
  v30 = v234;
  if (v234 && (*((_BYTE *)v234 + 16) & 0x20) == 0)
  {
    v31 = v234;
LABEL_16:
    *(_DWORD *)v31 += 2;
    goto LABEL_17;
  }
  v31 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v31)
    goto LABEL_16;
LABEL_17:
  v234 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v234, (uint64_t)Inspector::jsJavaScriptCallFramePrototypeFunctionScopeDescriptions, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v234;
  v234 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v30, v39, 4, v36, v37, v38, v40);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"caller", 6uLL, v44, v45, v46, v47, v48, &v234);
  v49 = v234;
  v233 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v233, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeCaller, 0, (const JSC::PropertyTable *)0x14);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sourceID", 8uLL, v52, v53, v54, v55, v56, &v234);
  v57 = v234;
  v232 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v232, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeSourceID, 0, (const JSC::PropertyTable *)0x14);
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"line", 4uLL, v60, v61, v62, v63, v64, &v234);
  v65 = v234;
  v231 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v231, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeLine, 0, (const JSC::PropertyTable *)0x14);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v66, v67, v68, v69, v70, v71, v72);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"column", 6uLL, v68, v69, v70, v71, v72, &v234);
  v73 = v234;
  v230 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v230, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeColumn, 0, (const JSC::PropertyTable *)0x14);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"functionName", 0xCuLL, v76, v77, v78, v79, v80, &v234);
  v81 = v234;
  v229 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v229, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeFunctionName, 0, (const JSC::PropertyTable *)0x14);
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"scopeChain", 0xAuLL, v84, v85, v86, v87, v88, &v234);
  v89 = v234;
  v228 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v228, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeScopeChain, 0, (const JSC::PropertyTable *)0x14);
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"thisObject", 0xAuLL, v92, v93, v94, v95, v96, &v234);
  v97 = v234;
  v227 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v227, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeThisObject, 0, (const JSC::PropertyTable *)0x14);
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v98, v99, v100, v101, v102, v103, v104);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"type", 4uLL, v100, v101, v102, v103, v104, &v234);
  v105 = v234;
  v226 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v226, (uint64_t)Inspector::jsJavaScriptCallFrameAttributeType, 0, (const JSC::PropertyTable *)0x14);
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v106, v107, v108, v109, v110, v111, v112);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"isTailDeleted", 0xDuLL, v108, v109, v110, v111, v112, &v234);
  v113 = v234;
  v225 = v234;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v225, (uint64_t)Inspector::jsJavaScriptCallFrameIsTailDeleted, 0, (const JSC::PropertyTable *)0x14);
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
}

uint64_t Inspector::jsJavaScriptCallFramePrototypeFunctionEvaluateWithScopeExtension(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int **v14;
  uint64_t v15;
  JSC::JSScope *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v26;
  int **v27;
  JSC::VM *v28;
  JSC::Exception *v29;
  JSC::VM *v30;

  v10 = *((_QWORD *)this + 7);
  v28 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v28);
  }
  v30 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.", 82);
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    return JSC::throwTypeError((unint64_t)this, &v30, (uint64_t)"JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.", 82);
  v14 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)v14, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_9;
  v26 = *(_DWORD *)(v10 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
  {
    v27 = v14;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v14, a4, a5, a6, a7, a8);
    v14 = v27;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_9:
  v29 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (v15 = *((_QWORD *)a2 + 7), (v15 & 0xFFFE000000000002) != 0))
  {
    v16 = 0;
  }
  else if (*(unsigned __int8 *)(v15 + 5) <= 0x16u)
  {
    v16 = 0;
  }
  else
  {
    v16 = (JSC::JSScope *)*((_QWORD *)a2 + 7);
  }
  v22 = JSC::DebuggerCallFrame::evaluateWithScopeExtension(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v11 + 16) + 8), (unsigned int *)v10, v14, v16, &v29, a6, a7, a8, *(double *)a9.i64);
  if (v29)
    JSC::VM::throwException((JSC::VM *)v10, this, v29, v23, v17, v18, v19, v20, v21);
  return v22;
}

uint64_t Inspector::jsJavaScriptCallFramePrototypeFunctionScopeDescriptions(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t SlowCase;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  JSC::VM *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int32x4_t v86;
  unint64_t v87;
  uint64_t v88;
  JSC::VM *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  WTF::AtomStringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  int v221;
  uint64_t Slow;
  WTF::StringImpl *v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  Inspector *v228;
  int v229;
  JSC *v230;
  JSC::VM *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  unint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;

  v8 = this;
  v238 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v231 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v231);
  }
  v11 = JSC::DebuggerCallFrame::scope(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v10 + 16) + 8), (JSC::VM *)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v11)
    return 10;
  v17 = v11;
  v25 = JSC::constructEmptyArray((unint64_t)v8, 0, 0, 0, v12, v13, v14, v15, v16);
  v26 = 0;
  while (1)
  {
    v27 = *((_QWORD *)v8 + 7);
    v28 = *(_QWORD *)(v27 + 15056);
    if (v28)
    {
      v29 = *(unsigned int *)(v28 + 60);
      SlowCase = *(_QWORD *)(v28 + 24);
      if (SlowCase < *(_QWORD *)(v28 + 32))
        goto LABEL_7;
      SlowCase = *(_QWORD *)(v28 + 40);
      if ((SlowCase & 1) == 0)
      {
        v209 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v28 + 48);
        *(_QWORD *)(v28 + 32) = SlowCase + HIDWORD(v209);
        *(_QWORD *)(v28 + 40) = SlowCase + (int)v209;
LABEL_7:
        *(_QWORD *)(v28 + 24) = SlowCase + v29;
        goto LABEL_8;
      }
      JSC::sanitizeStackForVM(*((JSC **)v8 + 7), v18, v19, v20, v21, v22, v23, v24);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v28, v27 + 192, v29, 0, 0, v212, v213, v214);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v27 + 14936, *((JSC **)v8 + 7), 0x40uLL, 0, v21, v22, v23, v24);
      if (!SlowCase)
        goto LABEL_118;
    }
LABEL_8:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)v8 + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v27 + 755))
      __dmb(0xAu);
    WTF::AtomStringImpl::addLiteral((uint64_t)"type", 4uLL, v20, v21, v22, v23, v24, &v233);
    v34 = v233;
    v35 = *(_QWORD *)(v17 + 16);
    v36 = *(unsigned __int8 *)(v35 + 5);
    if (v36 == 53)
    {
      LODWORD(v35) = *(unsigned __int8 *)(*(_QWORD *)(v35 + 24) + 21);
      if (((v35 >> 2) & 7) - 3 < 2)
      {
        v37 = 0xFFFE000000000003;
        goto LABEL_26;
      }
      if ((v35 & 0x1C) == 0x14)
      {
        v37 = 0xFFFE000000000004;
        goto LABEL_26;
      }
LABEL_19:
      if ((v35 & 2) != 0)
      {
        v37 = 0xFFFE000000000006;
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v36 == 56)
    {
      v37 = 0xFFFE000000000001;
      goto LABEL_26;
    }
    if ((v36 - 53) <= 1)
    {
      LOBYTE(v35) = *(_BYTE *)(*(_QWORD *)(v35 + 24) + 21);
      goto LABEL_19;
    }
    if (v36 == 52)
    {
      v37 = 0xFFFE000000000005;
      goto LABEL_26;
    }
LABEL_23:
    v37 = v36 == 51 ? 0xFFFE000000000000 : 0xFFFE000000000002;
LABEL_26:
    v233 = 0;
    v234 = SlowCase;
    v235 = -1;
    v33.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, (unint64_t)v34, v37, 0, (uint64_t)&v233, v31, v32, v33);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v38, v39, v40, v41, v42, v43, v44);
        WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, v40, v41, v42, v43, v44, &v233);
    v45 = v233;
    JSC::DebuggerScope::name((JSC::DebuggerScope *)v17, (uint64_t *)&v232);
    v52 = JSC::jsString(v9, (JSC::VM *)&v232, v46, v47, v48, v49, v50, v51);
    v233 = 0;
    v234 = SlowCase;
    v235 = -1;
    v53.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, (unint64_t)v45, v52, 0, (uint64_t)&v233, v54, v55, v53);
    v63 = v232;
    v232 = 0;
    if (!v63)
      goto LABEL_32;
    if (*(_DWORD *)v63 != 2)
    {
      *(_DWORD *)v63 -= 2;
LABEL_32:
      if (v45)
        goto LABEL_33;
      goto LABEL_35;
    }
    WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    if (v45)
    {
LABEL_33:
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
LABEL_35:
    WTF::AtomStringImpl::addLiteral((uint64_t)"location", 8uLL, v58, v59, v60, v61, v62, &v233);
    v72 = v233;
    v73 = *(_QWORD *)(v17 + 16);
    if (!v73)
      goto LABEL_41;
    v74 = 2;
    if (*(unsigned __int8 *)(v73 + 5) - 55 < 0xFFFFFFFC)
      goto LABEL_42;
    v75 = *(_QWORD *)(v73 + 24);
    if (!v75
      || (v76 = *(_QWORD *)(v75 + 24)) == 0
      || (v77 = *(_QWORD *)(v76 + 24)) == 0
      || (v78 = *(_QWORD *)(v77 + 64), *(_BYTE *)(v78 + 5) == 8))
    {
LABEL_41:
      v74 = 2;
      goto LABEL_42;
    }
    v124 = *(_QWORD *)(v78 + 40);
    if (v124)
    {
      v125 = *(_DWORD *)(v124 + 112);
      if (!v125)
      {
        do
          v126 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
        while (__stlxr(v126 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
        v125 = v126 + 1;
        *(_DWORD *)(v124 + 112) = v126 + 1;
        if (v126 == -1)
        {
          __break(0xC471u);
LABEL_123:
          __break(1u);
        }
      }
    }
    else
    {
      v125 = 1;
    }
    v227 = v25;
    v128 = *(_DWORD *)(v78 + 56);
    v127 = *(_DWORD *)(v78 + 60);
    v230 = (JSC *)*((_QWORD *)v8 + 7);
    v129 = *((_QWORD *)v230 + 1882);
    v229 = v127;
    if (v129)
    {
      v130 = *(unsigned int *)(v129 + 60);
      v74 = *(_QWORD *)(v129 + 24);
      if (v74 < *(_QWORD *)(v129 + 32))
        goto LABEL_66;
      v74 = *(_QWORD *)(v129 + 40);
      if ((v74 & 1) == 0)
      {
        v211 = *(_QWORD *)(v74 + 8) ^ *(_QWORD *)(v129 + 48);
        *(_QWORD *)(v129 + 32) = v74 + HIDWORD(v211);
        *(_QWORD *)(v129 + 40) = v74 + (int)v211;
LABEL_66:
        *(_QWORD *)(v129 + 24) = v74 + v130;
        goto LABEL_67;
      }
      v215 = *(_DWORD *)(v78 + 56);
      JSC::sanitizeStackForVM(v230, v64, v65, v66, v67, v68, v69, v70);
      v219 = JSC::LocalAllocator::allocateSlowCase(v129, (uint64_t)v230 + 192, v130, 0, 0, v216, v217, v218);
      v128 = v215;
      v127 = v229;
      v74 = v219;
    }
    else
    {
      v220 = *(_DWORD *)(v78 + 60);
      v221 = *(_DWORD *)(v78 + 56);
      Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v230 + 14936, v230, 0x40uLL, 0, v67, v68, v69, v70);
      v128 = v221;
      v127 = v220;
      v74 = Slow;
      if (!Slow)
      {
LABEL_118:
        __break(0xC471u);
        JUMPOUT(0x1986A58A4);
      }
    }
LABEL_67:
    *(_DWORD *)v74 = 0;
    v228 = v8;
    *(_DWORD *)v74 = *((_DWORD *)v8 + 212);
    *(_DWORD *)(v74 + 4) = 16783360;
    *(_OWORD *)(v74 + 8) = 0u;
    *(_OWORD *)(v74 + 24) = 0u;
    *(_OWORD *)(v74 + 40) = 0u;
    *(_QWORD *)(v74 + 56) = 0;
    if (*((_BYTE *)v230 + 755))
      __dmb(0xAu);
    v226 = v128;
    v225 = (v128 + 1);
    v131 = (v127 + 1);
    WTF::AtomStringImpl::addLiteral((uint64_t)"scriptId", 8uLL, v66, v67, v68, v69, v70, &v233);
    v138 = 0;
    v224 = v233;
    do
    {
      v139 = (v125 % 0xA) | 0x30;
      *((_BYTE *)&v234 + v138-- + 4) = (v125 % 0xA) | 0x30;
      v140 = v125 > 9;
      v125 /= 0xAu;
    }
    while (v140);
    if (v138 + 14 >= 15)
      goto LABEL_123;
    if (v138)
    {
      if ((unint64_t)-v138 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1986A592CLL);
      }
      v141 = WTF::fastCompactMalloc((WTF *)(20 - v138));
      v142 = (_BYTE *)(v141 + 20);
      *(_DWORD *)v141 = 2;
      *(_DWORD *)(v141 + 4) = -(int)v138;
      *(_QWORD *)(v141 + 8) = v141 + 20;
      *(_DWORD *)(v141 + 16) = 4;
      v232 = (WTF::StringImpl *)v141;
      if (v138 == -1)
        *v142 = v139;
      else
        memcpy(v142, (char *)&v234 + v138 + 5, -v138);
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v232 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    }
    v143 = JSC::jsString((uint64_t)v230, (JSC::VM *)&v232, v132, v133, v134, v135, v136, v137);
    v233 = 0;
    v234 = v74;
    v235 = -1;
    v144.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v74, (uint64_t)v230, (unint64_t)v224, v143, 0, (uint64_t)&v233, v145, v146, v144);
    v154 = v232;
    v232 = 0;
    v8 = v228;
    if (!v154)
      goto LABEL_81;
    if (*(_DWORD *)v154 != 2)
    {
      *(_DWORD *)v154 -= 2;
LABEL_81:
      if (!v224)
        goto LABEL_84;
      goto LABEL_82;
    }
    WTF::StringImpl::~StringImpl(v154, v147, v148, v149, v150, v151, v152, v153);
    WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
    if (!v224)
      goto LABEL_84;
LABEL_82:
    if (*(_DWORD *)v224 == 2)
    {
      WTF::StringImpl::~StringImpl(v224, v147, v148, v149, v150, v151, v152, v153);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
    }
    else
    {
      *(_DWORD *)v224 -= 2;
    }
LABEL_84:
    WTF::AtomStringImpl::addLiteral((uint64_t)"lineNumber", 0xAuLL, v149, v150, v151, v152, v153, &v233);
    v158 = v233;
    if (v226 <= -2)
      v159 = COERCE__INT64((double)v225) + 0x2000000000000;
    else
      v159 = v225 | 0xFFFE000000000000;
    v233 = 0;
    v234 = v74;
    v235 = -1;
    v157.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v74, (uint64_t)v230, (unint64_t)v158, v159, 0, (uint64_t)&v233, v155, v156, v157);
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
      {
        WTF::StringImpl::~StringImpl(v158, v160, v161, v162, v163, v164, v165, v166);
        WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
      }
      else
      {
        *(_DWORD *)v158 -= 2;
      }
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"columnNumber", 0xCuLL, v162, v163, v164, v165, v166, &v233);
    v170 = v233;
    if (v229 <= -2)
      v171 = COERCE__INT64((double)v131) + 0x2000000000000;
    else
      v171 = v131 | 0xFFFE000000000000;
    v233 = 0;
    v234 = v74;
    v235 = -1;
    v169.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v74, (uint64_t)v230, (unint64_t)v170, v171, 0, (uint64_t)&v233, v167, v168, v169);
    if (v170)
    {
      if (*(_DWORD *)v170 == 2)
      {
        WTF::StringImpl::~StringImpl(v170, v172, v173, v174, v175, v176, v69, v70);
        WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
      }
      else
      {
        *(_DWORD *)v170 -= 2;
      }
    }
    v25 = v227;
LABEL_42:
    v233 = 0;
    v234 = SlowCase;
    v235 = -1;
    v71.n128_u64[0] = 0x100000001000000;
    v236 = 0x1000000;
    v237 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, (unint64_t)v72, v74, 0, (uint64_t)&v233, v69, v70, v71);
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::~StringImpl(v72, v79, v80, v81, v82, v83, v84, v85);
        WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      }
      else
      {
        *(_DWORD *)v72 -= 2;
      }
    }
    JSC::JSObject::putDirectIndex(v25, (unint64_t)v8, v26, SlowCase, v82, v83, v84, v85, v86);
    if (*(_DWORD *)(v9 + 80))
    {
      v210 = *(_DWORD *)(v9 + 80);
      if ((v210 & 0x27) != 0 && (v210 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v19, v20, v21, v22, v23, v24);
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    v87 = *(_QWORD *)(v17 + 24);
    if (!v87)
    {
      v88 = *(_QWORD *)(v17 + 16);
      v89 = *(JSC::VM **)(v88 + 16);
      if (!v89)
        return v25;
      v90 = (uint64_t *)((v88 & 8) != 0 ? v88 - 16 : v88 & 0xFFFFFFFFFFFFC000 | 8);
      v91 = *v90;
      v87 = JSC::DebuggerScope::create(*v90, v89, v19, v20, v21, v22, v23, v24);
      *(_QWORD *)(v17 + 24) = v87;
      if (!v87)
        return v25;
      if (*(_DWORD *)(v91 + 760) >= *(unsigned __int8 *)(v17 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v91 + 192, v17);
        v87 = *(_QWORD *)(v17 + 24);
      }
    }
    v26 = (JSC::VM *)((_DWORD)v26 + 1);
    v17 = v87;
    if (!v87)
      return v25;
  }
}

uint64_t Inspector::jsJavaScriptCallFrameAttributeCaller(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, Inspector::JavaScriptCallFrame *a4)
{
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  _DWORD *v10;
  Inspector::JavaScriptCallFrame *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;

  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v21);
  }
  v6 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(JSC::JSGlobalObject **)(v7 + 16);
  if (!v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if ((*(_QWORD *)(v9 + 8) || *(_BYTE *)(v9 + 84)) && (v10 = *(_DWORD **)(v9 + 16)) != 0)
    {
      ++*v10;
      v8 = (JSC::JSGlobalObject *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 1;
      *((_QWORD *)v8 + 1) = v10;
      *((_QWORD *)v8 + 2) = 0;
      v11 = *(Inspector::JavaScriptCallFrame **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = v8;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v11);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          v8 = *(JSC::JSGlobalObject **)(v7 + 16);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
    }
    else
    {
      v8 = 0;
    }
  }
  return Inspector::toJS(this, v6, v8, a4);
}

uint64_t Inspector::jsJavaScriptCallFrameAttributeSourceID(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v11);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(unsigned __int8 *)(v4 + 84);
  if (!v5)
  {
    if (!*(_BYTE *)(v4 + 84))
      return v6 | 0xFFFE000000000000;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v4 + 84))
  {
LABEL_9:
    v7 = *(_QWORD *)(v4 + 72);
    goto LABEL_10;
  }
  if ((*(_QWORD *)(v5 + 24) & 0xFFFE000000000007) == 3 || (v7 = *(_QWORD *)(v5 + 16)) == 0)
  {
    v6 = 0;
    return v6 | 0xFFFE000000000000;
  }
LABEL_10:
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 64) + 40);
  if (!v8)
  {
    v6 = 1;
    return v6 | 0xFFFE000000000000;
  }
  v6 = *(_DWORD *)(v8 + 112);
  if (v6)
  {
    if ((v6 & 0x80000000) == 0)
      return v6 | 0xFFFE000000000000;
    return COERCE__INT64((double)v6) + 0x2000000000000;
  }
  do
    v10 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
  while (__stlxr(v10 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
  *(_DWORD *)(v8 + 112) = v10 + 1;
  if (v10 == -1)
  {
    result = 50;
    __break(0xC471u);
    return result;
  }
  v6 = *(_DWORD *)(v8 + 112);
  if ((v6 & 0x80000000) != 0)
    return COERCE__INT64((double)v6) + 0x2000000000000;
  return v6 | 0xFFFE000000000000;
}

unint64_t Inspector::jsJavaScriptCallFrameAttributeLine(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  else
  {
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 24) | 0xFFFE000000000000;
  }
}

unint64_t Inspector::jsJavaScriptCallFrameAttributeColumn(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  else
  {
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 28) | 0xFFFE000000000000;
  }
}

uint64_t Inspector::jsJavaScriptCallFrameAttributeFunctionName(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v34);
  }
  JSC::DebuggerCallFrame::functionName(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v9 + 16) + 8), v8, a4, a5, a6, a7, a8, (int **)&v35);
  v23 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v35, v10, v11, v12, v13, v14, v15);
  v24 = v35;
  v35 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23;
}

unint64_t Inspector::jsJavaScriptCallFrameAttributeScopeChain(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  _OWORD *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t OutOfMemoryError;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  JSC::Exception *v46;
  int v47;
  JSC::VM *v48;
  char v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD v52[4];
  uint64_t v53;
  _OWORD *v54;
  int v55;
  uint64_t *v56;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v48);
  }
  if (!JSC::DebuggerCallFrame::scope(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v10 + 16) + 8), v9, (uint64_t)a3, a4, a5, a6, a7, a8))return 2;
  v24 = JSC::DebuggerCallFrame::scope(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v10 + 16) + 8), v9, v11, v12, v13, v14, v15, v16);
  v49 = 0;
  v50 = 0x800000000;
  v51 = (_OWORD *)((char *)v52 + 8);
  memset(v52, 0, sizeof(v52));
  v53 = 0;
  while (1)
  {
    v25 = v50;
    if ((_DWORD)v50 == HIDWORD(v50))
    {
      if (v50 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v50, 2 * (int)v50))
      {
        v49 = 1;
        goto LABEL_12;
      }
      v25 = v50;
      v26 = v51;
    }
    else
    {
      v26 = v51;
      if (v51 == (_OWORD *)((char *)v52 + 8) || v51 == 0)
      {
        *((_QWORD *)v51 + v50) = v24;
        LODWORD(v50) = v25 + 1;
        goto LABEL_12;
      }
    }
    *((_QWORD *)v26 + v25) = v24;
    LODWORD(v50) = v25 + 1;
    if (!*(_QWORD *)&v52[0] && (v24 & 0xFFFE000000000002) == 0 && v24)
    {
      v32 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v24 & 8) != 0)
        v32 = (_QWORD *)(v24 - 16);
      *(_QWORD *)&v52[0] = *v32 + 560;
      v56 = &v50;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v52[0], (uint64_t *)&v56, v19, v20, v21, v22, v23, (uint64_t)&v54);
    }
LABEL_12:
    v28 = *(_QWORD *)(v24 + 24);
    if (!v28)
      break;
LABEL_13:
    v24 = v28;
    if (!v28)
      goto LABEL_32;
  }
  v29 = *(_QWORD *)(v24 + 16);
  v17 = *(JSC::VM **)(v29 + 16);
  if (v17)
  {
    v30 = (uint64_t *)((v29 & 8) != 0 ? v29 - 16 : v29 & 0xFFFFFFFFFFFFC000 | 8);
    v31 = *v30;
    v28 = JSC::DebuggerScope::create(*v30, v17, v18, v19, v20, v21, v22, v23);
    *(_QWORD *)(v24 + 24) = v28;
    if (v28)
    {
      if (*(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v24 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v31 + 192, v24);
        v28 = *(_QWORD *)(v24 + 24);
      }
      goto LABEL_13;
    }
  }
LABEL_32:
  if (v49)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v17);
    v46 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v46 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v40, v41, v42, v43, v44);
    }
    JSC::VM::throwException(v9, this, v46, v45, v40, v41, v42, v43, v44);
LABEL_47:
    v37 = 0;
  }
  else
  {
    v33 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v54 = v51;
    v55 = v50;
    v34 = *(_QWORD *)(v33 + 56);
    v35 = *(_DWORD *)(v33 + 896);
    if (v35)
      v36 = 16 * (v35 & 0xFFFFFFFE);
    else
      v36 = 0;
    if (*(_DWORD *)(v34 + 80))
    {
      v47 = *(_DWORD *)(v34 + 80);
      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v34 + 16))
        goto LABEL_47;
    }
    v37 = JSC::constructArray(v33, v36, (uint64_t)&v54, v19, v20, v21, v22, v23);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v50, v17, v18, v19, v20, v21, v22, v23);
  return v37;
}

unint64_t Inspector::jsJavaScriptCallFrameAttributeThisObject(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  JSC::VM *v12;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v12);
  }
  else
  {
    return JSC::DebuggerCallFrame::thisValue(*(JSC::DebuggerCallFrame **)(*(_QWORD *)(v10 + 16) + 8), v9, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Inspector::jsJavaScriptCallFrameAttributeType(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v36;
  WTF::StringImpl *v37;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v36);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned __int8 *)(v5 + 84);
  if (v6)
  {
    if (v7)
    {
LABEL_13:
      v10 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v10 = 0x800000002;
      v17 = "function";
      goto LABEL_15;
    }
    v8 = *(_QWORD *)(v6 + 24);
    if (v8)
      v9 = *(_BYTE *)(v8 + 5) == 26;
    else
      v9 = 0;
    v7 = v9;
  }
  if (v7)
  {
    if (v7 != 1)
      return 2;
    goto LABEL_13;
  }
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x700000002;
  v17 = "program";
LABEL_15:
  *(_QWORD *)(v10 + 8) = v17;
  *(_DWORD *)(v10 + 16) = 4;
  v37 = (WTF::StringImpl *)v10;
  v25 = JSC::jsNontrivialString((uint64_t)v3, (JSC::VM *)&v37, v11, v12, v13, v14, v15, v16);
  v26 = v37;
  v37 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v25;
}

uint64_t Inspector::jsJavaScriptCallFrameIsTailDeleted(Inspector *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &Inspector::JSJavaScriptCallFrame::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError(this, &v5);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 84))
    return 7;
  return 6;
}

void Inspector::JSGlobalObjectConsoleClient::~JSGlobalObjectConsoleClient(Inspector::JSGlobalObjectConsoleClient *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((unsigned int *)this + 13);
  if ((_DWORD)v9)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v16 = 8 * v9;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((unsigned int *)this + 13);
  if ((_DWORD)v9)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v16 = 8 * v9;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::JSGlobalObjectDebugger::~JSGlobalObjectDebugger(Inspector::JSGlobalObjectDebugger *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Debugger::~Debugger(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t Inspector::JSGlobalObjectInspectorController::canAccessInspectedScriptState(Inspector::JSGlobalObjectInspectorController *this, JSC::JSGlobalObject *a2)
{
  return 1;
}

uint64_t Inspector::JSGlobalObjectInspectorController::augmentableInspectorControllerClient(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t Inspector::JSGlobalObjectInspectorController::setAugmentableInspectorControllerClient(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

uint64_t Inspector::JSGlobalObjectInspectorController::frontendRouter(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t Inspector::JSGlobalObjectInspectorController::backendDispatcher(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::augmentableInspectorControllerClient(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::setAugmentableInspectorControllerClient(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = a2;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::frontendRouter(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t `non-virtual thunk to'Inspector::JSGlobalObjectInspectorController::backendDispatcher(Inspector::JSGlobalObjectInspectorController *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, int **a7@<X8>)
{
  int v11;
  int *v13;
  _BYTE *v14;
  char *v15;
  unsigned __int128 *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  char v19;
  _DWORD *v20;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v20);
        v13 = v20;
        if (v20)
        {
          v14 = v20 + 5;
          *v20 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          if ((a4 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a4 == 1)
            {
              *v14 = *a3;
            }
            else if ((_DWORD)a4)
            {
              memcpy(v13 + 5, a3, a4);
            }
          }
          else
          {
            if (a4 < 0x10)
            {
              v16 = (unsigned __int128 *)(v13 + 5);
            }
            else
            {
              v16 = (unsigned __int128 *)&v14[a4 & 0xFFFFFFF0];
              v17 = (unsigned __int128 *)(v13 + 5);
              do
              {
                v18 = (unsigned __int128)vld2q_s8(a3);
                a3 += 32;
                *v17++ = v18;
              }
              while (v17 != v16);
            }
            while (v16 != (unsigned __int128 *)&v14[a4])
            {
              v19 = *a3;
              a3 += 2;
              *(_BYTE *)v16 = v19;
              v16 = (unsigned __int128 *)((char *)v16 + 1);
            }
          }
          result = (uint64_t)&v14[a4];
          if (a6 == 1)
          {
            *(_BYTE *)result = a5->i8[0];
          }
          else if (a6)
          {
            result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_18;
      }
LABEL_20:
      v13 = 0;
      goto LABEL_18;
    }
LABEL_19:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_18;
  }
  if (!(_DWORD)result)
    goto LABEL_19;
  if (result > 0x7FFFFFEF)
    goto LABEL_20;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v20);
  v13 = v20;
  if (v20)
  {
    v15 = (char *)(v20 + 5);
    *v20 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v15, (uint64_t)a3, a4, a5, a6);
  }
LABEL_18:
  *a7 = v13;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, uint64_t a3, int8x16_t *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  WTF::StringView::getCharacters<char16_t>(&v9, __dst);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[2 * v10], a4, a5);
}

void std::default_delete<Inspector::JSGlobalObjectConsoleClient>::operator()[abi:sn180100](WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *((unsigned int *)this + 13);
  if ((_DWORD)v9)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v16 = 8 * v9;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSMapIterator::create(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::Heap **v9;
  JSC::Heap *v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  JSC::VM *v18;
  JSC::Heap **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t SlowCase;
  unsigned int v28;

  v8 = a1;
  v9 = (JSC::Heap **)*((_QWORD *)a1 + 7);
  v10 = v9[5082];
  if (!v10)
  {
    v15 = a4;
    v16 = a3;
    v17 = v8;
    v18 = (JSC::VM *)a2;
    v19 = v9;
    v10 = JSC::GCClient::Heap::mapIteratorSpaceSlow(v9 + 4694);
    v9 = v19;
    a2 = (unint64_t)v18;
    v8 = v17;
    a3 = v16;
    a4 = v15;
  }
  v11 = *((_QWORD *)v10 + 3);
  if (v11 >= *((_QWORD *)v10 + 4))
  {
    v11 = *((_QWORD *)v10 + 5);
    if ((v11 & 1) != 0)
    {
      v20 = (uint64_t)(v9 + 24);
      v21 = (uint64_t)v10;
      v28 = a4;
      v22 = a3;
      v23 = (JSC::VM *)a2;
      JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v21, v20, 48, 0, 0, v24, v25, v26);
      a2 = (unint64_t)v23;
      a3 = v22;
      a4 = v28;
      v11 = SlowCase;
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = v11 + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = v11 + (int)v14;
  }
  *((_QWORD *)v10 + 3) = v11 + 48;
LABEL_5:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v11 = a2 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  JSC::JSMapIterator::finishCreation((JSC::JSCell *)v11, v8, a3, a4, a5, a6, a7, a8);
  return v11;
}

void Inspector::HeapHolderFinder::~HeapHolderFinder(Inspector::HeapHolderFinder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::HeapHolderFinder::~HeapHolderFinder(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v9 = *((_QWORD *)this + 6);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 4);
  if (v11)
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (_QWORD *)(v12 + 8);
      do
      {
        if (*(v14 - 1) != -1 && *v14)
          WTF::fastFree(*v14 - 16, a2, a3, a4, a5, a6, a7, a8);
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = (_QWORD *)(v15 + 8);
      do
      {
        if (*(v17 - 1) != -1)
        {
          if (*v17)
            WTF::fastFree(*v17 - 16, a2, a3, a4, a5, a6, a7, a8);
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void Inspector::HeapHolderFinder::analyzeEdge(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  int v61;
  _BYTE v62[24];
  uint64_t v63;
  uint64_t v64;

  v8 = a4;
  v63 = a3;
  v64 = (uint64_t)a2;
  v10 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 8);
LABEL_5:
  v12 = v64;
  if (v64)
    v13 = v64 == v63;
  else
    v13 = 1;
  if (!v13)
  {
    v15 = (uint64_t *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 24);
    if (v14
      || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v14 = *v15) != 0))
    {
      v16 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = (~(v64 << 32) + v64) ^ ((unint64_t)(~(v64 << 32) + v64) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = (uint64_t *)(v14 + 16 * v20);
    v22 = *v21;
    if (*v21)
    {
      v23 = 0;
      v24 = 1;
      while (v22 != v64)
      {
        if (v22 == -1)
          v23 = v21;
        v20 = (v20 + v24) & v16;
        v21 = (uint64_t *)(v14 + 16 * v20);
        v22 = *v21;
        ++v24;
        if (!*v21)
        {
          if (v23)
          {
            *v23 = 0;
            v23[1] = 0;
            --*(_DWORD *)(*v15 - 16);
            v21 = v23;
          }
          goto LABEL_20;
        }
      }
LABEL_35:
      WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(v21 + 1, &v63, a4, a5, a6, a7, a8, (uint64_t)v62);
      v41 = (uint64_t *)(a1 + 16);
      v40 = *(_QWORD *)(a1 + 16);
      if (v40
        || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 16), 8u, 0), (v40 = *v41) != 0))
      {
        v42 = *(_DWORD *)(v40 - 8);
      }
      else
      {
        v42 = 0;
      }
      v43 = v63;
      v44 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
      v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
      v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
      v47 = v42 & ((v46 >> 31) ^ v46);
      v48 = (uint64_t *)(v40 + 16 * v47);
      v49 = *v48;
      if (*v48)
      {
        v50 = 0;
        v51 = 1;
        while (v49 != v63)
        {
          if (v49 == -1)
            v50 = v48;
          v47 = (v47 + v51) & v42;
          v48 = (uint64_t *)(v40 + 16 * v47);
          v49 = *v48;
          ++v51;
          if (!*v48)
          {
            if (v50)
            {
              *v50 = 0;
              v50[1] = 0;
              --*(_DWORD *)(*v41 - 16);
              v48 = v50;
            }
            goto LABEL_46;
          }
        }
        goto LABEL_61;
      }
LABEL_46:
      v52 = v48[1];
      *v48 = v43;
      v48[1] = 0;
      if (v52)
        WTF::fastFree(v52 - 16, v33, v34, v35, v36, v37, v38, v39);
      v53 = *v41;
      if (*v41)
        v54 = *(_DWORD *)(v53 - 12) + 1;
      else
        v54 = 1;
      *(_DWORD *)(v53 - 12) = v54;
      v55 = *v41;
      if (*v41)
        v56 = *(_DWORD *)(v55 - 12);
      else
        v56 = 0;
      v57 = (*(_DWORD *)(v55 - 16) + v56);
      v58 = *(unsigned int *)(v55 - 4);
      if (v58 > 0x400)
      {
        if (v58 > 2 * v57)
        {
LABEL_61:
          WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(v48 + 1, &v64, v35, v36, v37, v38, v39, (uint64_t)v62);
          if (v63 == *(_QWORD *)(a1 + 56))
            WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add((uint64_t *)(a1 + 48), &v64, a4, a5, a6, a7, a8, (uint64_t)v62);
          goto LABEL_63;
        }
      }
      else
      {
        if (3 * v58 > 4 * v57)
          goto LABEL_61;
        if (!(_DWORD)v58)
        {
          v59 = 8;
          goto LABEL_60;
        }
      }
      v59 = (_DWORD)v58 << (6 * *(_DWORD *)(v55 - 12) >= (2 * v58));
LABEL_60:
      v48 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 16), v59, v48);
      goto LABEL_61;
    }
LABEL_20:
    v25 = v21[1];
    *v21 = v12;
    v21[1] = 0;
    if (v25)
      WTF::fastFree(v25 - 16, a2, a3, a4, a5, a6, a7, a8);
    v26 = *v15;
    if (*v15)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v15;
    if (*v15)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_35;
    }
    else
    {
      if (3 * v31 > 4 * v30)
        goto LABEL_35;
      if (!(_DWORD)v31)
      {
        v32 = 8;
        goto LABEL_34;
      }
    }
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_34:
    v21 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)(a1 + 24), v32, v21);
    goto LABEL_35;
  }
LABEL_63:
  if (v8 == 10)
  {
    v60 = (uint64_t *)(a1 + 40);
LABEL_68:
    WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(v60, &v63, a4, a5, a6, a7, a8, (uint64_t)v62);
    goto LABEL_69;
  }
  if (v8 || !v64)
  {
    v60 = (uint64_t *)(a1 + 32);
    goto LABEL_68;
  }
LABEL_69:
  v61 = __ldxr(v10);
  if (v61 == 1)
  {
    if (!__stlxr(0, v10))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void Inspector::HeapHolderFinder::analyzePropertyNameEdge(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::HeapHolderFinder::analyzeEdge(a1, a2, a3, 0, a5, a6, a7, a8);
}

void Inspector::HeapHolderFinder::analyzeVariableNameEdge(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::HeapHolderFinder::analyzeEdge(a1, a2, a3, 0, a5, a6, a7, a8);
}

void Inspector::HeapHolderFinder::analyzeIndexEdge(Inspector::HeapHolderFinder *this, JSC::JSCell *a2, JSC::JSCell *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::HeapHolderFinder::analyzeEdge((uint64_t)this, a2, (uint64_t)a3, 0, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = v7;
    do
    {
      v22 = (uint64_t *)(v6 + 16 * v19);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = *(_QWORD *)(v25 + 16 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (v33);
          v34 = (_QWORD *)(v25 + 16 * v32);
          v36 = v34 + 1;
          v35 = v34[1];
          if (v35)
          {
            WTF::fastFree(v35 - 16, v10, v11, v12, v13, v14, v15, v16);
            v23 = *v22;
          }
          *v34 = v23;
          v37 = v6 + 16 * v19;
          *v36 = 0;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *v36 = v38;
          v39 = *(_QWORD *)(v37 + 8);
          if (v39)
            WTF::fastFree(v39 - 16, v10, v11, v12, v13, v14, v15, v16);
          if (v22 == a3)
            v20 = v34;
        }
        else
        {
          v24 = *(_QWORD *)(v6 + 16 * v19 + 8);
          if (v24)
            WTF::fastFree(v24 - 16, v10, v11, v12, v13, v14, v15, v16);
        }
      }
      ++v19;
    }
    while (v19 != v21);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t **v71;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = *(a2 - 1);
        v64 = *v8;
        if (v63 < *v8)
        {
          *v8 = v63;
          *(a2 - 1) = v64;
        }
        return result;
      case 3:
        v65 = *v8;
        v66 = v8[1];
        v67 = *(a2 - 1);
        if (v66 >= *v8)
        {
          if (v67 < v66)
          {
            v8[1] = v67;
            *(a2 - 1) = v66;
            v104 = *v8;
            v103 = v8[1];
            if (v103 < *v8)
            {
              *v8 = v103;
              v8[1] = v104;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v8 = v66;
            v8[1] = v65;
            v113 = *(a2 - 1);
            if (v113 >= v65)
              return result;
            v8[1] = v113;
          }
          else
          {
            *v8 = v67;
          }
          *(a2 - 1) = v65;
        }
        return result;
      case 4:
        v41 = v8 + 1;
        v68 = (unint64_t *)v8[1];
        v43 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v69 = (unint64_t *)*v8;
        if ((unint64_t)v68 >= *v8)
        {
          if (v13 >= (unint64_t)v68)
            goto LABEL_192;
          *v41 = v13;
          *(_QWORD *)v43 = v68;
          v70 = v8;
          v71 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v68;
          if (v13 >= (unint64_t)v69)
            goto LABEL_193;
        }
        else
        {
          v70 = v8;
          v71 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v13 >= (unint64_t)v68)
          {
            *v8 = (unint64_t)v68;
            v8[1] = (unint64_t)v69;
            v70 = v8 + 1;
            v71 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v69;
            if (v13 >= (unint64_t)v69)
            {
LABEL_192:
              v68 = (unint64_t *)v13;
LABEL_193:
              v109 = *(a2 - 1);
              if (v109 < (unint64_t)v68)
              {
                *(_QWORD *)v43 = v109;
                *(a2 - 1) = (unint64_t)v68;
                v110 = *(_QWORD *)v43;
                v111 = *v41;
                if (v110 < v111)
                {
                  v7[1] = v110;
                  v7[2] = v111;
                  v112 = *v7;
                  if (v110 < *v7)
                  {
                    *v7 = v110;
                    v7[1] = v112;
                  }
                }
              }
              return result;
            }
          }
        }
        *v70 = v13;
        *v71 = v69;
        v68 = (unint64_t *)result;
        goto LABEL_193;
      case 5:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v81 = (unint64_t)(v10 - 2) >> 1;
              v82 = v81;
              do
              {
                if (v81 >= v82)
                {
                  v83 = (2 * v82) | 1;
                  v84 = &v8[v83];
                  if (2 * v82 + 2 >= v10)
                  {
                    v85 = *v84;
                  }
                  else
                  {
                    v85 = v84[1];
                    v86 = *v84 >= v85;
                    if (*v84 < v85)
                      ++v84;
                    else
                      v85 = *v84;
                    if (!v86)
                      v83 = 2 * v82 + 2;
                  }
                  v87 = &v8[v82];
                  v88 = *v87;
                  if (v85 >= *v87)
                  {
                    do
                    {
                      *v87 = v85;
                      v87 = v84;
                      if (v81 < v83)
                        break;
                      v89 = (2 * v83) | 1;
                      v84 = &v8[v89];
                      v83 = 2 * v83 + 2;
                      if (v83 >= v10)
                      {
                        v85 = *v84;
                        v83 = v89;
                      }
                      else
                      {
                        v85 = *v84;
                        result = (uint64_t)(v84 + 1);
                        if (*v84 >= v84[1])
                        {
                          v83 = v89;
                        }
                        else
                        {
                          v85 = v84[1];
                          ++v84;
                        }
                      }
                    }
                    while (v85 >= v88);
                    *v87 = v88;
                  }
                }
                v90 = v82-- <= 0;
              }
              while (!v90);
              v91 = (unint64_t)v9 >> 3;
              do
              {
                v92 = 0;
                v93 = *v8;
                v94 = v8;
                do
                {
                  v95 = &v94[v92 + 1];
                  v96 = (2 * v92) | 1;
                  v92 = 2 * v92 + 2;
                  if (v92 >= v91)
                  {
                    v97 = *v95;
                    v92 = v96;
                  }
                  else
                  {
                    v97 = *v95;
                    if (*v95 >= v95[1])
                    {
                      v92 = v96;
                    }
                    else
                    {
                      v97 = v95[1];
                      ++v95;
                    }
                  }
                  *v94 = v97;
                  v94 = v95;
                }
                while (v92 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
                if (v95 == --a2)
                {
                  *v95 = v93;
                }
                else
                {
                  *v95 = *a2;
                  *a2 = v93;
                  v98 = (char *)v95 - (char *)v8 + 8;
                  if (v98 >= 9)
                  {
                    v99 = (((unint64_t)v98 >> 3) - 2) >> 1;
                    v100 = &v8[v99];
                    v101 = *v100;
                    v102 = *v95;
                    if (*v100 < *v95)
                    {
                      do
                      {
                        *v95 = v101;
                        v95 = v100;
                        if (!v99)
                          break;
                        v99 = (v99 - 1) >> 1;
                        v100 = &v8[v99];
                        v101 = *v100;
                      }
                      while (*v100 < v102);
                      *v95 = v102;
                    }
                  }
                }
                v90 = v91-- <= 2;
              }
              while (!v90);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x401)
          {
            v14 = *v12;
            v15 = *v8;
            if (*v12 >= *v8)
            {
              if (v13 < v14)
              {
                *v12 = v13;
                *(a2 - 1) = v14;
                v18 = *v8;
                if (*v12 < *v8)
                {
                  *v8 = *v12;
                  *v12 = v18;
                }
              }
            }
            else
            {
              if (v13 >= v14)
              {
                *v8 = v14;
                *v12 = v15;
                v20 = *(a2 - 1);
                if (v20 >= v15)
                  goto LABEL_22;
                *v12 = v20;
              }
              else
              {
                *v8 = v13;
              }
              *(a2 - 1) = v15;
            }
LABEL_22:
            v21 = &v8[v11];
            v24 = *(v21 - 1);
            v22 = v21 - 1;
            v23 = v24;
            v25 = v8[1];
            v26 = *(a2 - 2);
            if (v24 >= v25)
            {
              if (v26 < v23)
              {
                *v22 = v26;
                *(a2 - 2) = v23;
                v27 = v8[1];
                if (*v22 < v27)
                {
                  v8[1] = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v26 >= v23)
              {
                v8[1] = v23;
                *v22 = v25;
                v29 = *(a2 - 2);
                if (v29 >= v25)
                  goto LABEL_34;
                *v22 = v29;
              }
              else
              {
                v8[1] = v26;
              }
              *(a2 - 2) = v25;
            }
LABEL_34:
            v30 = &v8[v11];
            v33 = v30[1];
            v31 = v30 + 1;
            v32 = v33;
            v34 = v8[2];
            v35 = *(a2 - 3);
            if (v33 >= v34)
            {
              if (v35 < v32)
              {
                *v31 = v35;
                *(a2 - 3) = v32;
                v36 = v8[2];
                if (*v31 < v36)
                {
                  v8[2] = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v35 >= v32)
              {
                v8[2] = v32;
                *v31 = v34;
                v37 = *(a2 - 3);
                if (v37 >= v34)
                  goto LABEL_43;
                *v31 = v37;
              }
              else
              {
                v8[2] = v35;
              }
              *(a2 - 3) = v34;
            }
LABEL_43:
            v13 = *v12;
            v38 = *v22;
            v39 = *v31;
            if (*v12 >= *v22)
            {
              if (v39 >= v13)
                goto LABEL_50;
              *v12 = v39;
              *v31 = v13;
              v31 = v12;
              v13 = v38;
              if (v39 >= v38)
              {
                v13 = v39;
                goto LABEL_50;
              }
            }
            else if (v39 >= v13)
            {
              *v22 = v13;
              *v12 = v38;
              v22 = v12;
              v13 = v39;
              if (v39 >= v38)
              {
                v13 = v38;
LABEL_50:
                v40 = *v8;
                *v8 = v13;
                *v12 = v40;
                goto LABEL_51;
              }
            }
            *v22 = v39;
            *v31 = v38;
            goto LABEL_50;
          }
          v16 = *v8;
          v17 = *v12;
          if (*v8 >= *v12)
          {
            if (v13 < v16)
            {
              *v8 = v13;
              *(a2 - 1) = v16;
              v19 = *v12;
              if (*v8 < *v12)
              {
                *v12 = *v8;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v13 < v16)
            {
              *v12 = v13;
LABEL_30:
              *(a2 - 1) = v17;
              goto LABEL_51;
            }
            *v12 = v16;
            *v8 = v17;
            v28 = *(a2 - 1);
            if (v28 < v17)
            {
              *v8 = v28;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v41 = (unint64_t *)*v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= (unint64_t)v41)
          {
            if ((unint64_t)v41 >= *(a2 - 1))
            {
              v56 = v8 + 1;
              do
              {
                v8 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while ((unint64_t)v41 >= *v8);
            }
            else
            {
              v43 = (unint64_t)(v8 + 1);
              do
              {
                if ((unint64_t *)v43 == a2)
                  goto LABEL_191;
                v55 = *(_QWORD *)v43;
                v43 += 8;
              }
              while ((unint64_t)v41 >= v55);
              v8 = (unint64_t *)(v43 - 8);
            }
            v43 = (unint64_t)a2;
            if (v8 < a2)
            {
              v43 = (unint64_t)a2;
              while ((unint64_t *)v43 != v7)
              {
                v57 = *(_QWORD *)(v43 - 8);
                v43 -= 8;
                if ((unint64_t)v41 >= v57)
                  goto LABEL_93;
              }
              goto LABEL_191;
            }
LABEL_93:
            if ((unint64_t)v8 < v43)
            {
              v58 = *v8;
              v13 = *(_QWORD *)v43;
              do
              {
                *v8 = v13;
                v59 = v8 + 1;
                *(_QWORD *)v43 = v58;
                do
                {
                  if (v59 == a2)
                    goto LABEL_191;
                  v60 = *v59++;
                  v58 = v60;
                }
                while ((unint64_t)v41 >= v60);
                v8 = v59 - 1;
                do
                {
                  if ((unint64_t *)v43 == v7)
                    goto LABEL_191;
                  v61 = *(_QWORD *)(v43 - 8);
                  v43 -= 8;
                  v13 = v61;
                }
                while ((unint64_t)v41 < v61);
              }
              while ((unint64_t)v8 < v43);
            }
            v62 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v62;
            a4 = 0;
            *v62 = (unint64_t)v41;
            continue;
          }
          v42 = 0;
          do
          {
            v43 = (unint64_t)&v8[v42 + 1];
            if ((unint64_t *)v43 == a2)
              goto LABEL_191;
            v13 = *(_QWORD *)v43;
            ++v42;
          }
          while (*(_QWORD *)v43 < (unint64_t)v41);
          v43 = (unint64_t)&v8[v42];
          v44 = a2;
          if (v42 != 1)
          {
            while (v44 != v8)
            {
              v45 = *--v44;
              if (v45 < (unint64_t)v41)
                goto LABEL_63;
            }
            goto LABEL_191;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unint64_t)v44)
              break;
            v46 = *--v44;
          }
          while (v46 >= (unint64_t)v41);
LABEL_63:
          if (v43 >= (unint64_t)v44)
          {
            v53 = (unint64_t *)(v43 - 8);
          }
          else
          {
            v47 = *v44;
            v48 = &v8[v42];
            v49 = v44;
            do
            {
              *v48 = v47;
              *v49 = v13;
              v50 = v48 + 1;
              do
              {
                if (v50 == a2)
                  goto LABEL_191;
                v51 = *v50++;
                v13 = v51;
              }
              while (v51 < (unint64_t)v41);
              v48 = v50 - 1;
              do
              {
                if (v49 == v8)
                  goto LABEL_191;
                v52 = *--v49;
                v47 = v52;
              }
              while (v52 >= (unint64_t)v41);
            }
            while (v48 < v49);
            v53 = v50 - 2;
          }
          if (v53 != v8)
            *v8 = *v53;
          *v53 = (unint64_t)v41;
          if (v43 < (unint64_t)v44)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **,false>(v7, v53, a3, a4 & 1);
            a4 = 0;
            v8 = v53 + 1;
            continue;
          }
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **>(v8, v53);
          v8 = v53 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **>(v53 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v54)
              goto LABEL_79;
            continue;
          }
          a2 = v53;
          if (v54)
            return result;
          goto LABEL_2;
        }
        v41 = v8 + 1;
        v73 = v8 == a2 || v41 == a2;
        if ((a4 & 1) == 0)
        {
          if (v73)
            return result;
          v43 = 0;
          v105 = 1;
          while (1)
          {
            v13 = v8[v43];
            v43 = v105;
            v106 = *v41;
            if (*v41 < v13)
              break;
LABEL_189:
            v105 = v43 + 1;
            if (++v41 == a2)
              return result;
          }
          v107 = 0;
          while (1)
          {
            v108 = &v41[v107];
            *v108 = v13;
            if (!(v43 + v107))
              break;
            v13 = *(v108 - 2);
            --v107;
            if (v106 >= v13)
            {
              v41[v107] = v106;
              goto LABEL_189;
            }
          }
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (!v73)
        {
          v74 = 8;
          v75 = v8;
          do
          {
            v76 = *v75;
            v75 = v41;
            v77 = *v41;
            if (v77 < v76)
            {
              v78 = v74;
              while (1)
              {
                *(unint64_t *)((char *)v8 + v78) = v76;
                v79 = v78 - 8;
                if (v78 == 8)
                  break;
                v76 = *(unint64_t *)((char *)v8 + v78 - 16);
                v78 -= 8;
                if (v77 >= v76)
                {
                  v80 = (unint64_t *)((char *)v8 + v79);
                  goto LABEL_133;
                }
              }
              v80 = v8;
LABEL_133:
              *v80 = v77;
            }
            v41 = v75 + 1;
            v74 += 8;
          }
          while (v75 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::JSCell **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_36;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_37;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_37;
        goto LABEL_35;
      }
LABEL_36:
      v15 = v17;
LABEL_37:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::NaturalLoop<JSC::DFG::CPSCFG> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v6;
        if (*v22 < v26)
        {
          v27 = i;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v27) = v26;
            v28 = v27 - 8;
            if (v27 == 8)
              break;
            v26 = *(unint64_t *)((char *)a1 + v27 - 16);
            v27 -= 8;
            if (v25 >= v26)
            {
              v29 = (unint64_t *)((char *)a1 + v28);
              goto LABEL_27;
            }
          }
          v29 = a1;
LABEL_27:
          *v29 = v25;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int128 *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  char v20;
  _DWORD *v21;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v21);
        v11 = v21;
        if (v21)
        {
          v12 = v21 + 5;
          *v21 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a3)
          {
            v13 = *(_BYTE **)(a3 + 8);
            v14 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *v12 = *v13;
              }
              else if ((_DWORD)v14)
              {
                memcpy(v11 + 5, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v17 = (unsigned __int128 *)(v11 + 5);
              }
              else
              {
                v17 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v18 = (unsigned __int128 *)(v11 + 5);
                do
                {
                  v19 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v18++ = v19;
                }
                while (v18 != v17);
              }
              while (v17 != (unsigned __int128 *)&v12[v14])
              {
                v20 = *v13;
                v13 += 2;
                *(_BYTE *)v17 = v20;
                v17 = (unsigned __int128 *)((char *)v17 + 1);
              }
            }
            v16 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v16 = 0;
          }
          result = (uint64_t)&v12[v16];
          if (a5 == 1)
          {
            *(_BYTE *)result = a4->i8[0];
          }
          else if (a5)
          {
            result = (uint64_t)memcpy((void *)result, a4, a5);
          }
        }
        goto LABEL_20;
      }
LABEL_22:
      v11 = 0;
      goto LABEL_20;
    }
LABEL_21:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_21;
  if (result > 0x7FFFFFEF)
    goto LABEL_22;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v21);
  v11 = v21;
  if (v21)
  {
    v15 = (char *)(v21 + 5);
    *v21 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v15, a3, a4, a5);
  }
LABEL_20:
  *a6 = v11;
  return result;
}

void Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(Inspector::JavaScriptCallFrame *this)
{
  Inspector::JavaScriptCallFrame *v2;
  JSC::DebuggerCallFrame *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (Inspector::JavaScriptCallFrame *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v2);
      WTF::fastFree(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  v3 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      JSC::DebuggerCallFrame::~DebuggerCallFrame(v3);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

uint64_t Inspector::PerGlobalObjectWrapperWorld::getWrapper(Inspector::PerGlobalObjectWrapperWorld *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  JSC::JSGlobalObject *v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(JSC::JSGlobalObject **)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(JSC::JSGlobalObject **)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 != *(_DWORD *)(v2 - 4) && (v10 = *(_QWORD *)(v2 + 16 * v7 + 8)) != 0)
    return *(_QWORD *)v10;
  else
    return 0;
}

uint64_t *Inspector::PerGlobalObjectWrapperWorld::addWrapper(Inspector::PerGlobalObjectWrapperWorld *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  JSC::JSObject *v17;
  Inspector::PerGlobalObjectWrapperWorld *v18;
  uint64_t v19;
  char v20[24];
  uint64_t *v21;
  JSC::JSGlobalObject *v22;

  v22 = a2;
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(v8 + 712);
  if (!v9)
  {
    v18 = this;
    v19 = *((_QWORD *)a2 + 7);
    v17 = a3;
    JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
    this = v18;
    v8 = v19;
    a3 = v17;
    v9 = *(_QWORD *)(v19 + 712);
  }
  *(_QWORD *)(v8 + 712) = *(_QWORD *)v9;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v21 = (uint64_t *)(v9 + 16);
  if (a3)
  {
    v10 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = v10[3];
    v10 += 3;
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v10;
    *v10 = v9;
    *(_QWORD *)(v11 + 8) = v9;
  }
  *(_QWORD *)(v9 + 16) = a3;
  result = WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::add<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>&>((uint64_t *)this, (uint64_t *)&v22, &v21, a4, a5, a6, a7, a8, (uint64_t)v20);
  if (v21)
  {
    v13 = v21 - 2;
    v14 = *(_QWORD *)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v15 = (uint64_t *)*(v21 - 1);
    if (v15)
    {
      v16 = *v13;
      *v15 = *v13;
      *(_QWORD *)(v16 + 8) = v15;
      *v13 = 0;
      v13[1] = 0;
    }
    *v13 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;
  }
  return result;
}

uint64_t *WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::add<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = v13 + 16 * v20;
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v13 - 4);
        v38 = 0;
        v39 = v13 + 16 * v32;
        goto LABEL_32;
      }
      if (v22 == -1)
        v23 = (_QWORD *)v21;
      v20 = (v20 + v24) & v15;
      v21 = v13 + 16 * v20;
      v22 = *(_QWORD *)v21;
      ++v24;
    }
    while (*(_QWORD *)v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = (uint64_t)v23;
    }
  }
  *(_QWORD *)v21 = v16;
  result = (uint64_t *)JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(v21 + 8), a3, (unint64_t)a3, a4, a5, a6, a7, a8);
  v30 = *v11;
  if (*v11)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v33 = *v11;
  if (*v11)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35)
      goto LABEL_23;
  }
  else if (3 * v36 <= 4 * v35)
  {
    if (!(_DWORD)v36)
    {
      v37 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(v11, v37, v21, v25, v26, v27, v28, v29);
      v21 = (uint64_t)result;
      v33 = *v11;
      if (*v11)
        v36 = *(unsigned int *)(v33 - 4);
      else
        v36 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
    goto LABEL_28;
  }
LABEL_31:
  v39 = v33 + 16 * v36;
  v38 = 1;
LABEL_32:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v39;
  *(_BYTE *)(a9 + 16) = v38;
  return result;
}

void Inspector::PerGlobalObjectWrapperWorld::clearAllWrappers(Inspector::PerGlobalObjectWrapperWorld *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)this;
  if (v9)
  {
    *(_QWORD *)this = 0;
    WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::deallocateTable(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Inspector::ScriptArguments::create@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x20);
  result = Inspector::ScriptArguments::ScriptArguments(v6, a1, a2, v7, v8, v9, v10, v11);
  *a3 = result;
  return result;
}

uint64_t Inspector::ScriptArguments::ScriptArguments(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  *(_DWORD *)a1 = 1;
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::Strong((_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 56), a2, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 28) = v10;
  return a1;
}

void Inspector::ScriptArguments::~ScriptArguments(Inspector::ScriptArguments *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2, a3, a4, a5, a6, a7, a8);
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong((uint64_t *)this + 1);
}

{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v9 = *((unsigned int *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (*v10)
      {
        v13 = (uint64_t *)(v12 - 16);
        v14 = *(_QWORD *)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v15 = *(uint64_t **)(v12 - 8);
        if (v15)
        {
          v16 = *v13;
          *v15 = *v13;
          *(_QWORD *)(v16 + 8) = v15;
          *v13 = 0;
          v13[1] = 0;
        }
        *v13 = *(_QWORD *)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;
        *v10 = 0;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v10 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *((_QWORD *)this + 1);
  if (v17)
  {
    v18 = (uint64_t *)(v17 - 16);
    v19 = *(_QWORD *)(((v17 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v20 = *(uint64_t **)(v17 - 8);
    if (v20)
    {
      v21 = *v18;
      *v20 = *v18;
      *(_QWORD *)(v21 + 8) = v20;
      *v18 = 0;
      v18[1] = 0;
    }
    *v18 = *(_QWORD *)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (*v10)
      {
        v13 = (uint64_t *)(v12 - 16);
        v14 = *(_QWORD *)(((v12 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v15 = *(uint64_t **)(v12 - 8);
        if (v15)
        {
          v16 = *v13;
          *v15 = *v13;
          *(_QWORD *)(v16 + 8) = v15;
          *v13 = 0;
          v13[1] = 0;
        }
        *v13 = *(_QWORD *)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;
        *v10 = 0;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v10 = *(uint64_t **)a1;
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t Inspector::ScriptArguments::argumentAt(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  if (*(unsigned int *)(this + 28) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2);
    if (v2)
      return *(_QWORD *)v2;
    else
      return 0;
  }
  return this;
}

uint64_t Inspector::ScriptArguments::globalObject(Inspector::ScriptArguments *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

void Inspector::ScriptArguments::getArgumentAtIndexAsString(Inspector::ScriptArguments *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x16_t a9@<Q0>)
{
  JSC::JSGlobalObject **v10;
  JSC::JSGlobalObject *v12;
  const WTF::String **v13;
  const WTF::String *v14;
  char v15;

  if (*((unsigned int *)this + 7) > a2
    && (v10 = (JSC::JSGlobalObject **)*((_QWORD *)this + 1)) != 0
    && (v12 = *v10) != 0)
  {
    v13 = *(const WTF::String ***)(*((_QWORD *)this + 2) + 8 * a2);
    if (v13)
      v14 = *v13;
    else
      v14 = 0;
    Inspector::argumentAsString((int **)a8, v12, v14, a3, a4, a5, a6, a7, a9);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a8 = 0;
  }
  *(_BYTE *)(a8 + 8) = v15;
}

void Inspector::argumentAsString(int **a1, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  const WTF::String *v14;

  v14 = a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0 || *((_BYTE *)a3 + 5) != 61)
  {
    v11 = *((_QWORD *)a2 + 7);
    JSC::JSValue::toWTFString((JSC::JSValue *)&v14, a2, a3, a4, a5, a6, a7, a8, a1, a9);
    *(_QWORD *)(v11 + 16) = 0;
    v12 = (unsigned int *)(v11 + 80);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 & 0xFFFFFFEF, v12));
  }
  else
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v10 = 0xE00000002;
    *(_QWORD *)(v10 + 8) = "[object Proxy]";
    *(_DWORD *)(v10 + 16) = 4;
    *a1 = (int *)v10;
  }
}

uint64_t Inspector::ScriptArguments::getFirstArgumentAsString(Inspector::ScriptArguments *this, WTF::StringImpl **a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject **v9;
  JSC::JSGlobalObject *v11;
  const WTF::String **v12;
  const WTF::String *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  if (*((_DWORD *)this + 7))
  {
    v9 = (JSC::JSGlobalObject **)*((_QWORD *)this + 1);
    if (v9)
    {
      v11 = *v9;
      if (*v9)
      {
        v12 = (const WTF::String **)**((_QWORD **)this + 2);
        if (v12)
          v13 = *v12;
        else
          v13 = 0;
        Inspector::argumentAsString((int **)&v40, v11, v13, a5, a6, a7, a8, a9, a3);
        v21 = v40;
        if (v40)
          *(_DWORD *)v40 += 2;
        v22 = *a2;
        *a2 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
            if (v21)
            {
LABEL_12:
              if (*(_DWORD *)v21 == 2)
              {
                WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
                WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
              }
              else
              {
                *(_DWORD *)v21 -= 2;
              }
            }
            return 1;
          }
          *(_DWORD *)v22 -= 2;
        }
        if (v21)
          goto LABEL_12;
        return 1;
      }
    }
  }
  return 0;
}

void Inspector::ScriptArguments::getArgumentsAsStrings(Inspector::ScriptArguments *this@<X0>, uint64_t *a2@<X8>)
{
  JSC::JSGlobalObject **v2;
  JSC::JSGlobalObject *v3;
  JSC::JSGlobalObject *v4;

  v2 = (JSC::JSGlobalObject **)*((_QWORD *)this + 1);
  if (v2 && (v3 = *v2) != 0)
  {
    v4 = v3;
    *a2 = 0;
    a2[1] = 0;
    WTF::Mapper<Inspector::ScriptArguments::getArgumentsAsStrings(void)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>::map(a2, (uint64_t)this + 16, &v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t Inspector::ScriptArguments::isEqual(JSC::JSGlobalObject ***this, const Inspector::ScriptArguments *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  Inspector::ScriptArguments *v10;
  JSC::JSGlobalObject **v11;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  JSC::JSBigInt **v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  const WTF::StringImpl *v23;
  _BOOL4 v24;
  unsigned int *v25;
  unsigned int v26;
  double v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  const Inspector::ScriptArguments *v40;
  Inspector::ScriptArguments *v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  JSC::JSGlobalObject *v45;

  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9 != *((_DWORD *)a2 + 7))
  {
LABEL_59:
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  if (!(_DWORD)v9)
  {
    LOBYTE(v11) = 1;
    return v11 & 1;
  }
  v10 = (Inspector::ScriptArguments *)this;
  v11 = this[1];
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      LOBYTE(v11) = 0;
      v13 = 0;
      while (1)
      {
        if (v13 >= *((unsigned int *)v10 + 7)
          || ((v14 = *(unint64_t **)(*((_QWORD *)v10 + 2) + 8 * v13)) != 0 ? (v15 = *v14) : (v15 = 0),
              v13 >= *((unsigned int *)a2 + 7)))
        {
          __break(0xC471u);
          JUMPOUT(0x1986A879CLL);
        }
        v16 = *(JSC::JSBigInt ***)(*((_QWORD *)a2 + 2) + 8 * v13);
        if (!v16)
        {
          v17 = 0;
LABEL_12:
          if (v15 != v17)
            return v11 & 1;
          goto LABEL_13;
        }
        v44 = v13;
        v43 = (char)v11;
        v42 = v9;
        v45 = v12;
        v40 = a2;
        v41 = v10;
        v17 = (unint64_t)*v16;
        if (!v15 || !v17)
          goto LABEL_12;
        v18 = *((_QWORD *)v12 + 7);
        if (v15 >= 0xFFFE000000000000)
        {
          if (v17 >= 0xFFFE000000000000)
          {
            *(_QWORD *)(v18 + 16) = 0;
            v35 = (unsigned int *)(v18 + 80);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 & 0xFFFFFFEF, v35));
LABEL_26:
            v22 = v15 == v17;
LABEL_27:
            v10 = v41;
            v9 = v42;
            if (!v22)
              return v11 & 1;
            goto LABEL_13;
          }
        }
        else if (!(v15 >> 49))
        {
          goto LABEL_21;
        }
        if (v17 >> 49)
        {
          *(double *)a3.i64 = (double)(int)v15;
          if (v15 <= 0xFFFDFFFFFFFFFFFFLL)
            a3.i64[0] = v15 - 0x2000000000000;
          v27 = (double)(int)v17;
          if (v17 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v27 = v17 - 0x2000000000000;
          *(_QWORD *)(v18 + 16) = 0;
          v28 = (unsigned int *)(v18 + 80);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 & 0xFFFFFFEF, v28));
          v22 = *(double *)a3.i64 == v27;
          goto LABEL_27;
        }
LABEL_21:
        if (((v15 | v17) & 0xFFFE000000000002) != 0)
        {
          *(_QWORD *)(v18 + 16) = 0;
          v30 = (unsigned int *)(v18 + 80);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 & 0xFFFFFFEF, v30));
          goto LABEL_26;
        }
        v19 = *(unsigned __int8 *)(v15 + 5);
        if (v19 != 2)
        {
          if (v19 != 3 || *(_BYTE *)(v17 + 5) != 3)
          {
LABEL_24:
            *(_QWORD *)(v18 + 16) = 0;
            v20 = (unsigned int *)(v18 + 80);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 & 0xFFFFFFEF, v20));
            goto LABEL_26;
          }
          v32 = JSC::JSBigInt::equals((JSC::JSBigInt *)v15, *v16, (JSC::JSBigInt *)v17);
          *(_QWORD *)(v18 + 16) = 0;
          v37 = (unsigned int *)(v18 + 80);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 & 0xFFFFFFEF, v37));
          goto LABEL_49;
        }
        if (*(_BYTE *)(v17 + 5) != 2)
          goto LABEL_24;
        if ((*(_QWORD *)(v15 + 8) & 1) != 0
          || (v23 = *(const WTF::StringImpl **)(v17 + 8), (v23 & 1) != 0))
        {
          v32 = JSC::JSString::equalSlowCase((JSC::JSString *)v15, v12, (JSC::JSString *)v17, a5, a6, a7, a8, a9, a3);
          *(_QWORD *)(v18 + 16) = 0;
          v33 = (unsigned int *)(v18 + 80);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 & 0xFFFFFFEF, v33));
LABEL_49:
          a2 = v40;
          v10 = v41;
          v12 = v45;
          v9 = v42;
          LOBYTE(v11) = v43;
          v13 = v44;
          if (!v32)
            return v11 & 1;
          goto LABEL_13;
        }
        v24 = WTF::equal(*(WTF **)(v15 + 8), v23, (const WTF::StringImpl *)v17);
        *(_QWORD *)(v18 + 16) = 0;
        v25 = (unsigned int *)(v18 + 80);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 & 0xFFFFFFEF, v25));
        a2 = v40;
        v10 = v41;
        v12 = v45;
        v9 = v42;
        LOBYTE(v11) = v43;
        v13 = v44;
        if (!v24)
          return v11 & 1;
LABEL_13:
        LOBYTE(v11) = ++v13 >= v9;
        if (v13 == v9)
          return v11 & 1;
      }
    }
    goto LABEL_59;
  }
  return v11 & 1;
}

uint64_t Inspector::ScriptCallFrame::ScriptCallFrame(uint64_t result, _DWORD **a2, _DWORD **a3, int a4, uint64_t a5)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)result = v5;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_QWORD *)(result + 8) = v6;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 28) = a5;
  return result;
}

{
  _DWORD *v5;
  _DWORD *v6;

  v5 = *a2;
  if (*a2)
    *v5 += 2;
  *(_QWORD *)result = v5;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_QWORD *)(result + 8) = v6;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 28) = a5;
  return result;
}

uint64_t Inspector::ScriptCallFrame::ScriptCallFrame(uint64_t result, _DWORD **a2, _DWORD **a3, _DWORD **a4, int a5, uint64_t a6)
{
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v6 = *a2;
  if (*a2)
    *v6 += 2;
  *(_QWORD *)result = v6;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(result + 8) = v7;
  v8 = *a4;
  if (*a4)
    *v8 += 2;
  *(_QWORD *)(result + 16) = v8;
  *(_DWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 28) = a6;
  return result;
}

void Inspector::ScriptCallFrame::~ScriptCallFrame(Inspector::ScriptCallFrame *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

BOOL Inspector::ScriptCallFrame::isEqual(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF *v5;
  const WTF::StringImpl *v6;
  BOOL v7;
  _BOOL8 result;
  WTF *v9;
  const WTF::StringImpl *v10;
  BOOL v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;

  v5 = *(WTF **)a1;
  v6 = *(const WTF::StringImpl **)a2;
  if (v5 != v6)
  {
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (v7)
      return 0;
    result = WTF::equal(v5, v6, a3);
    if (!result)
      return result;
  }
  v9 = *(WTF **)(a1 + 8);
  v10 = *(const WTF::StringImpl **)(a2 + 8);
  if (v9 == v10)
    goto LABEL_13;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    return 0;
  result = WTF::equal(v9, v10, a3);
  if (!result)
    return result;
LABEL_13:
  v12 = *(const WTF::StringImpl **)(a1 + 16);
  v13 = *(const WTF::StringImpl **)(a2 + 16);
  if (v12 == v13 || (result = 0, v12) && v13 && (result = WTF::equal(*(WTF **)(a1 + 16), v13, a3)))
  {
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28))
      return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
    return 0;
  }
  return result;
}

uint64_t Inspector::ScriptCallFrame::isNative(Inspector::ScriptCallFrame *this)
{
  return WTF::equal(*((_QWORD *)this + 1), "[native code]", 13);
}

void Inspector::ScriptCallFrame::buildInspectorObject(Inspector::ScriptCallFrame *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35[4];

  v35[3] = *(WTF **)MEMORY[0x1E0C80C00];
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v35[0] = v4;
  v5 = Inspector::Protocol::Console::CallFrame::Builder<0>::setFunctionName((uint64_t *)v35, (_DWORD **)this);
  v6 = Inspector::Protocol::Console::CallFrame::Builder<1>::setUrl(v5, (_DWORD **)this + 1);
  v7 = 0;
  v8 = *((_DWORD *)this + 6);
  do
  {
    v9 = (v8 % 0xA) | 0x30;
    *((_BYTE *)&v35[2] + v7-- + 7) = (v8 % 0xA) | 0x30;
    v10 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v10);
  if (v7 + 14 >= 15)
    __break(1u);
  if (v7)
  {
    if ((unint64_t)-v7 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v11 = WTF::fastCompactMalloc((WTF *)(20 - v7));
    v12 = (_BYTE *)(v11 + 20);
    *(_DWORD *)v11 = 2;
    *(_DWORD *)(v11 + 4) = -(int)v7;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 4;
    v34 = (WTF::StringImpl *)v11;
    if (v7 == -1)
      *v12 = v9;
    else
      memcpy(v12, (char *)&v35[3] + v7, -v7);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v34 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v13 = Inspector::Protocol::Console::CallFrame::Builder<3>::setScriptId(v6, (_DWORD **)&v34);
  v14 = Inspector::Protocol::Console::CallFrame::Builder<7>::setLineNumber(v13, *((_DWORD *)this + 7));
  v15 = Inspector::Protocol::Console::CallFrame::Builder<15>::setColumnNumber(v14, *((_DWORD *)this + 8));
  v23 = *v15;
  *v15 = 0;
  *a2 = v23;
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v35[0];
  v35[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v25;
  }
}

uint64_t *Inspector::Protocol::Console::CallFrame::Builder<0>::setFunctionName(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  _BYTE v40[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xC00000002;
  *(_QWORD *)(v5 + 8) = "functionName";
  *(_DWORD *)(v5 + 16) = 4;
  v38 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x400000001;
  v12 = *a2;
  *((_QWORD *)v6 + 1) = *a2;
  if (v12)
    *v12 += 2;
  v39 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v38, (const WTF::StringImpl *)&v39, v7, v8, v9, v10, v11, (uint64_t)v40);
  if (v40[16])
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v38);
      v21 = *(unsigned int *)(v4 + 36);
      v36 = *(_QWORD *)(v4 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v21) = v37;
    }
    else
    {
      v22 = *v20;
      v23 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v39;
  v39 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Console::CallFrame::Builder<1>::setUrl(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  _BYTE v40[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x300000002;
  *(_QWORD *)(v5 + 8) = "url";
  *(_DWORD *)(v5 + 16) = 4;
  v38 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x400000001;
  v12 = *a2;
  *((_QWORD *)v6 + 1) = *a2;
  if (v12)
    *v12 += 2;
  v39 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v38, (const WTF::StringImpl *)&v39, v7, v8, v9, v10, v11, (uint64_t)v40);
  if (v40[16])
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v38);
      v21 = *(unsigned int *)(v4 + 36);
      v36 = *(_QWORD *)(v4 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v21) = v37;
    }
    else
    {
      v22 = *v20;
      v23 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v39;
  v39 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Console::CallFrame::Builder<3>::setScriptId(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  _BYTE v40[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "scriptId";
  *(_DWORD *)(v5 + 16) = 4;
  v38 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x400000001;
  v12 = *a2;
  *((_QWORD *)v6 + 1) = *a2;
  if (v12)
    *v12 += 2;
  v39 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v38, (const WTF::StringImpl *)&v39, v7, v8, v9, v10, v11, (uint64_t)v40);
  if (v40[16])
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v38);
      v21 = *(unsigned int *)(v4 + 36);
      v36 = *(_QWORD *)(v4 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v21) = v37;
    }
    else
    {
      v22 = *v20;
      v23 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v39;
  v39 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Console::CallFrame::Builder<7>::setLineNumber(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xA00000002;
  *(_QWORD *)(v5 + 8) = "lineNumber";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x300000001;
  v6[1] = (double)a2;
  v38 = (WTF *)v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Console::CallFrame::Builder<15>::setColumnNumber(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xC00000002;
  *(_QWORD *)(v5 + 8) = "columnNumber";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x300000001;
  v6[1] = (double)a2;
  v38 = (WTF *)v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

uint64_t Inspector::ScriptCallStack::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

uint64_t Inspector::ScriptCallStack::ScriptCallStack(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

uint64_t Inspector::ScriptCallStack::create@<X0>(uint64_t *a1@<X0>, char a2@<W1>, _DWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0x28);
  result = Inspector::ScriptCallStack::ScriptCallStack(v8, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t Inspector::ScriptCallStack::ScriptCallStack(uint64_t result, uint64_t *a2, char a3, _DWORD *a4)
{
  uint64_t v4;

  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 20) = v4;
  *(_BYTE *)(result + 24) = a3;
  if (a4)
    ++*a4;
  *(_QWORD *)(result + 32) = a4;
  return result;
}

void Inspector::ScriptCallStack::~ScriptCallStack(Inspector::ScriptCallStack *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::AsyncStackTrace *v9;

  v9 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    WTF::RefCounted<Inspector::AsyncStackTrace>::deref(v9);
  WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t Inspector::ScriptCallStack::at(unint64_t this, unint64_t a2)
{
  if (*(unsigned int *)(this + 20) > a2)
    return *(_QWORD *)(this + 8) + 40 * a2;
  __break(0xC471u);
  return this;
}

uint64_t Inspector::ScriptCallStack::size(Inspector::ScriptCallStack *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t Inspector::ScriptCallStack::firstNonNativeCallFrame(Inspector::ScriptCallStack *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return 0;
  v2 = *((_QWORD *)this + 1);
  v3 = 40 * v1;
  while (WTF::equal(*(_QWORD *)(v2 + 8), "[native code]", 13))
  {
    v2 += 40;
    v3 -= 40;
    if (!v3)
      return 0;
  }
  return v2;
}

const Inspector::ScriptCallFrame *Inspector::ScriptCallStack::append(Inspector::ScriptCallStack *this, const Inspector::ScriptCallFrame *a2)
{
  const Inspector::ScriptCallFrame *v2;
  const Inspector::ScriptCallFrame *result;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;

  v2 = a2;
  result = (Inspector::ScriptCallStack *)((char *)this + 8);
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5 == *((_DWORD *)this + 4))
  {
    result = (const Inspector::ScriptCallFrame *)WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)a2);
    v2 = result;
    LODWORD(v5) = *((_DWORD *)this + 5);
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    v7 = &v6[10 * v5];
    v8 = *(_DWORD **)result;
    if (!*(_QWORD *)result)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = *(_DWORD **)result;
  v7 = (_QWORD *)(*(_QWORD *)result + 40 * v5);
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
LABEL_3:
    *v8 += 2;
LABEL_4:
  *v7 = v8;
  v9 = (_DWORD *)*((_QWORD *)v2 + 1);
  if (v9)
    *v9 += 2;
  *(_QWORD *)&v6[10 * v5 + 2] = v9;
  v10 = (_DWORD *)*((_QWORD *)v2 + 2);
  if (v10)
    *v10 += 2;
  v11 = &v6[10 * v5];
  *((_QWORD *)v11 + 2) = v10;
  v11 += 6;
  v12 = *((_QWORD *)v2 + 3);
  v11[2] = *((_DWORD *)v2 + 8);
  *(_QWORD *)v11 = v12;
  ++*((_DWORD *)this + 5);
  return result;
}

void Inspector::ScriptCallStack::removeParentStackTrace(Inspector::ScriptCallStack *this)
{
  Inspector::AsyncStackTrace *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      Inspector::AsyncStackTrace::~AsyncStackTrace(v2);
      WTF::fastFree(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

BOOL Inspector::ScriptCallStack::isEqual(Inspector::ScriptCallStack *this, Inspector::ScriptCallStack *a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  const WTF::StringImpl *v12;
  BOOL v13;
  WTF *v14;
  const WTF::StringImpl *v15;
  BOOL v16;
  WTF *v17;
  const WTF::StringImpl *v18;
  BOOL v19;

  if (a2 && (v5 = *((unsigned int *)a2 + 5), (_DWORD)v5 == *((_DWORD *)this + 5)))
  {
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      do
      {
        if (v8 >= *((unsigned int *)this + 5) || v8 >= *((unsigned int *)a2 + 5))
        {
          __break(0xC471u);
          JUMPOUT(0x1986A96E0);
        }
        v9 = *((_QWORD *)this + 1);
        v10 = *((_QWORD *)a2 + 1);
        v11 = *(WTF **)(v9 + v6);
        v12 = *(const WTF::StringImpl **)(v10 + v6);
        if (v11 != v12)
        {
          v13 = !v11 || v12 == 0;
          if (v13 || !WTF::equal(v11, v12, a3))
            break;
        }
        v14 = *(WTF **)(v9 + v6 + 8);
        v15 = *(const WTF::StringImpl **)(v10 + v6 + 8);
        if (v14 != v15)
        {
          v16 = !v14 || v15 == 0;
          if (v16 || !WTF::equal(v14, v15, a3))
            break;
        }
        v17 = *(WTF **)(v9 + v6 + 16);
        v18 = *(const WTF::StringImpl **)(v10 + v6 + 16);
        if (v17 != v18)
        {
          v19 = !v17 || v18 == 0;
          if (v19 || !WTF::equal(v17, v18, a3))
            break;
        }
        if (*(_DWORD *)(v9 + v6 + 28) != *(_DWORD *)(v10 + v6 + 28))
          break;
        if (*(_DWORD *)(v9 + v6 + 32) != *(_DWORD *)(v10 + v6 + 32))
          break;
        v7 = ++v8 >= v5;
        v6 += 40;
      }
      while (40 * v5 != v6);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

void Inspector::ScriptCallStack::buildInspectorArray(Inspector::ScriptCallStack *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const void **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = 0x600000001;
  v4[2] = 0;
  v5 = (const void **)(v4 + 2);
  v4[3] = 0;
  *a2 = v4;
  if (*((_DWORD *)this + 5))
  {
    v6 = v4;
    v7 = 0;
    for (i = 0; i < *((unsigned int *)this + 5); ++i)
    {
      Inspector::ScriptCallFrame::buildInspectorObject((Inspector::ScriptCallFrame *)(*((_QWORD *)this + 1) + v7), &v24);
      v9 = v24;
      v10 = *((unsigned int *)v6 + 7);
      if ((_DWORD)v10 == *((_DWORD *)v6 + 6))
      {
        v11 = v10 + (v10 >> 2);
        if (v11 >= 0x10)
          v12 = v11 + 1;
        else
          v12 = 16;
        if (v12 <= v10 + 1)
          v13 = v10 + 1;
        else
          v13 = v12;
        if (v13 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v14 = *v5;
        v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
        *((_DWORD *)v6 + 6) = v13;
        v6[2] = v15;
        memcpy(v15, v14, 8 * v10);
        if (v14)
        {
          if (*v5 == v14)
          {
            v6[2] = 0;
            *((_DWORD *)v6 + 6) = 0;
          }
          WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
        }
        v10 = *((unsigned int *)v6 + 7);
        v23 = (uint64_t *)(v6[2] + 8 * v10);
      }
      else
      {
        v23 = (uint64_t *)((char *)*v5 + 8 * v10);
      }
      *v23 = v9;
      *((_DWORD *)v6 + 7) = v10 + 1;
      v7 += 40;
    }
  }
}

void Inspector::ScriptCallStack::buildInspectorObject(Inspector::ScriptCallStack *this@<X0>, Inspector::Protocol::Console::StackTrace **a2@<X8>)
{
  const void **v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  Inspector::ScriptCallFrame *v7;
  uint64_t i;
  WTF *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  uint64_t *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Inspector::Protocol::Console::StackTrace *v33;
  WTF *v34;
  Inspector::AsyncStackTrace *v35;
  WTF *v36;
  WTF *v37;
  WTF *v39;
  WTF *v40;

  v3 = (const void **)WTF::fastMalloc((WTF *)0x20);
  *v3 = (const void *)0x600000001;
  v3[2] = 0;
  v4 = v3 + 2;
  v3[3] = 0;
  v40 = (WTF *)v3;
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = v3;
    v7 = (Inspector::ScriptCallFrame *)*((_QWORD *)this + 1);
    for (i = 40 * v5; i; i -= 40)
    {
      Inspector::ScriptCallFrame::buildInspectorObject(v7, (uint64_t *)&v39);
      v9 = v39;
      v10 = *((unsigned int *)v6 + 7);
      if ((_DWORD)v10 == *((_DWORD *)v6 + 6))
      {
        v11 = v10 + (v10 >> 2);
        if (v11 >= 0x10)
          v12 = v11 + 1;
        else
          v12 = 16;
        if (v12 <= v10 + 1)
          v13 = v10 + 1;
        else
          v13 = v12;
        if (v13 >> 29)
        {
          __break(0xC471u);
          return;
        }
        v14 = *v4;
        v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
        *((_DWORD *)v6 + 6) = v13;
        v6[2] = v15;
        memcpy(v15, v14, 8 * v10);
        if (v14)
        {
          if (*v4 == v14)
          {
            v6[2] = 0;
            *((_DWORD *)v6 + 6) = 0;
          }
          WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
        }
        v10 = *((unsigned int *)v6 + 7);
        v23 = (WTF **)((char *)v6[2] + 8 * v10);
      }
      else
      {
        v23 = (WTF **)((char *)*v4 + 8 * v10);
      }
      *v23 = v9;
      *((_DWORD *)v6 + 7) = v10 + 1;
      v7 = (Inspector::ScriptCallFrame *)((char *)v7 + 40);
    }
  }
  v24 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v24 = 0x500000001;
  *((_QWORD *)v24 + 3) = 0;
  *((_QWORD *)v24 + 4) = 0;
  *((_QWORD *)v24 + 2) = 0;
  v39 = v24;
  v25 = Inspector::Protocol::Console::StackTrace::Builder<0>::setCallFrames((uint64_t *)&v39, &v40);
  v33 = (Inspector::Protocol::Console::StackTrace *)*v25;
  *v25 = 0;
  v34 = v39;
  *a2 = v33;
  v39 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::JSONImpl::Value::operator delete(v34, v26, v27, v28, v29, v30, v31, v32);
    else
      --*(_DWORD *)v34;
  }
  if (*((_BYTE *)this + 24))
    Inspector::Protocol::Console::StackTrace::setTruncated(v33, 1);
  v35 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 4);
  if (v35)
  {
    Inspector::AsyncStackTrace::buildInspectorObject(v35, (uint64_t *)&v39);
    Inspector::Protocol::Console::StackTrace::setParentStackTrace((uint64_t)v33, &v39);
    v36 = v39;
    v39 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::JSONImpl::Value::operator delete(v36, v26, v27, v28, v29, v30, v31, v32);
      else
        --*(_DWORD *)v36;
    }
  }
  v37 = v40;
  v40 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
      WTF::JSONImpl::Value::operator delete(v37, v26, v27, v28, v29, v30, v31, v32);
    else
      --*(_DWORD *)v37;
  }
}

void Inspector::createScriptCallStack(JSC::VM **this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  JSC::VM *v13;
  JSC::CallFrame *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Inspector *v31;
  char v32;
  _QWORD v33[2];
  char v34;
  JSC::JSGlobalObject *v35;
  unsigned int *v36;

  if (this)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, a10);
    v13 = this[7];
    v14 = (JSC::CallFrame *)*((_QWORD *)v13 + 5);
    if (v14)
    {
      v31 = (Inspector *)this;
      v32 = 0;
      v33[0] = 0;
      v33[1] = 0;
      v34 = 0;
      v35 = a2;
      JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,Inspector::CreateScriptCallStackFunctor>(v14, v13, (uint64_t)&v31, 0);
      Inspector::CreateScriptCallStackFunctor::takeStack((Inspector::CreateScriptCallStackFunctor *)&v31, a9);
      WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      v30 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      *(_BYTE *)(v30 + 24) = 0;
      *a9 = v30;
    }
    JSC::JSLockHolder::~JSLockHolder(&v36, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v29 + 16) = 0;
    *(_BYTE *)(v29 + 24) = 0;
    *a9 = v29;
  }
}

void JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,Inspector::CreateScriptCallStackFunctor>(JSC::CallFrame *a1, JSC::VM *a2, uint64_t a3, BOOL a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[16];
  uint64_t v16;
  unsigned int *v17;
  JSC::Wasm::NameSection *v18;

  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v15, a1, a2, a4);
  while (v16 && !Inspector::CreateScriptCallStackFunctor::operator()(a3, (JSC::StackVisitor::Frame *)v15))
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v15, (uint64_t)v5, v6, v7, v8, v9, v10, v11);
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v18 = (JSC::Wasm::NameSection *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v18, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t Inspector::CreateScriptCallStackFunctor::takeStack@<X0>(Inspector::CreateScriptCallStackFunctor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(*(_QWORD *)this + 2016);
  if (v4)
  {
    v5 = *(_DWORD **)(v4 + 200);
    if (!v5)
      goto LABEL_3;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5))
    {
      v10 = v5[45];
      if ((_DWORD)v10)
      {
        v11 = *(_OWORD *)(*((_QWORD *)v5 + 21) + 16 * v10 - 16);
        v5 = (_DWORD *)WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>((uint64_t *)v5 + 20, (int *)&v11);
        goto LABEL_3;
      }
    }
  }
  v5 = 0;
LABEL_3:
  v6 = (uint64_t *)((char *)this + 16);
  v7 = *((_BYTE *)this + 32);
  v8 = WTF::fastMalloc((WTF *)0x28);
  result = Inspector::ScriptCallStack::ScriptCallStack(v8, v6, v7, v5);
  *a2 = result;
  return result;
}

void Inspector::createScriptCallStackForConsole(JSC::VM **this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  JSC::VM *v13;
  JSC::CallFrame *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Inspector::ScriptCallStack *v38;
  Inspector::ScriptCallStack *v39;
  Inspector::ScriptCallStack *v40;
  Inspector::ScriptCallStack *v41;
  Inspector *v42;
  char v43;
  _QWORD v44[2];
  char v45;
  JSC::JSGlobalObject *v46;
  Inspector *v47;
  char v48;
  _QWORD v49[2];
  char v50;
  JSC::JSGlobalObject *v51;
  unsigned int *v52;

  if (this)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v52, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, a10);
    v13 = this[7];
    v14 = (JSC::CallFrame *)*((_QWORD *)v13 + 5);
    if (v14)
    {
      v47 = (Inspector *)this;
      v48 = 1;
      v49[0] = 0;
      v49[1] = 0;
      v50 = 0;
      v51 = a2;
      JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,Inspector::CreateScriptCallStackFunctor>(v14, v13, (uint64_t)&v47, 0);
      Inspector::CreateScriptCallStackFunctor::takeStack((Inspector::CreateScriptCallStackFunctor *)&v47, a9);
      if (!*(_DWORD *)(*a9 + 20))
      {
        v42 = (Inspector *)this;
        v43 = 0;
        v44[0] = 0;
        v44[1] = 0;
        v45 = 0;
        v46 = a2;
        JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,Inspector::CreateScriptCallStackFunctor>(v14, v13, (uint64_t)&v42, 0);
        Inspector::CreateScriptCallStackFunctor::takeStack((Inspector::CreateScriptCallStackFunctor *)&v42, &v41);
        v38 = v41;
        v41 = 0;
        v39 = (Inspector::ScriptCallStack *)*a9;
        *a9 = (uint64_t)v38;
        if (v39)
        {
          WTF::RefCounted<Inspector::ScriptCallStack>::deref(v39);
          v40 = v41;
          v41 = 0;
          if (v40)
            WTF::RefCounted<Inspector::ScriptCallStack>::deref(v40);
        }
        WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v31, v32, v33, v34, v35, v36, v37);
      }
      WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      v30 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      *(_BYTE *)(v30 + 24) = 0;
      *a9 = v30;
    }
    JSC::JSLockHolder::~JSLockHolder(&v52, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v29 + 16) = 0;
    *(_BYTE *)(v29 + 24) = 0;
    *a9 = v29;
  }
}

uint64_t Inspector::createScriptCallStackFromException@<X0>(Inspector *this@<X0>, JSC::JSGlobalObject *a2@<X1>, JSC::Exception *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  JSC::VM *v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Inspector *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int SourceInformationFromException;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  WTF::StringImpl **v81;
  WTF::StringImpl **v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF::AtomStringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl **v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163[2];
  WTF::StringImpl *v164;
  _BYTE v165[12];
  WTF::StringImpl *v166;
  WTF::StringImpl **v167;
  uint64_t v168;

  v167 = 0;
  v168 = 0;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  LODWORD(v11) = *((_DWORD *)a2 + 7);
  if (a3 && (_DWORD)v11)
  {
    for (i = 0; i < (unint64_t)a3 && i < v11; ++i)
    {
      v13 = JSC::StackFrame::computeLineAndColumn((JSC::StackFrame *)(*((_QWORD *)a2 + 2) + 40 * i));
      if (i >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1986AA49CLL);
      }
      v20 = v13;
      JSC::StackFrame::functionName((JSC::StackFrame *)(*((_QWORD *)a2 + 2) + 40 * i), v10, v14, v15, v16, v17, v18, v19, (uint64_t *)&v166);
      if (i >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1986AA4A4);
      }
      v21 = *((_QWORD *)a2 + 2);
      v22 = v21 + 40 * i;
      if (*(_BYTE *)(v22 + 36))
      {
        v23 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v23 = 0xB00000002;
        *(_QWORD *)(v23 + 8) = "[wasm code]";
      }
      else
      {
        v31 = *(_QWORD *)(v21 + 40 * i + 8);
        if (v31)
        {
          JSC::processSourceURL((int **)&v162, (uint64_t)v10, v22, (int **)(*(_QWORD *)(*(_QWORD *)(v31 + 64) + 40) + 64));
          goto LABEL_11;
        }
        v23 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v23 = 0xD00000002;
        *(_QWORD *)(v23 + 8) = "[native code]";
      }
      *(_DWORD *)(v23 + 16) = 4;
      v162 = (WTF::StringImpl *)v23;
LABEL_11:
      if (i >= *((unsigned int *)a2 + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1986AA4ACLL);
      }
      v32 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 40 * i + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v32 + 64) + 40);
        if (v33)
        {
          LODWORD(v32) = *(_DWORD *)(v33 + 112);
          if (!(_DWORD)v32)
          {
            do
              v34 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v34 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            v35 = __CFADD__(v34, 1);
            LODWORD(v32) = v34 + 1;
            *(_DWORD *)(v33 + 112) = v32;
            if (v35)
            {
              __break(0xC471u);
              JUMPOUT(0x1986AA474);
            }
          }
        }
        else
        {
          LODWORD(v32) = 1;
        }
      }
      v36 = v166;
      if (v166)
        *(_DWORD *)v166 += 2;
      v163[0] = v36;
      v37 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      v163[1] = v37;
      v164 = 0;
      *(_DWORD *)v165 = v32;
      *(_QWORD *)&v165[4] = v20;
      v38 = HIDWORD(v168);
      if (HIDWORD(v168) == (_DWORD)v168)
      {
        WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,Inspector::ScriptCallFrame>((uint64_t)&v167, (unint64_t)v163);
      }
      else
      {
        v39 = v167;
        if (v36)
          *(_DWORD *)v36 += 2;
        v39[5 * v38] = v36;
        v40 = v163[1];
        if (v163[1])
          *(_DWORD *)v163[1] += 2;
        v39[5 * v38 + 1] = v40;
        v41 = v164;
        if (v164)
          *(_DWORD *)v164 += 2;
        v42 = &v39[5 * v38];
        v42[2] = v41;
        v43 = *(WTF::StringImpl **)v165;
        *((_DWORD *)v42 + 8) = *(_DWORD *)&v165[8];
        v42[3] = v43;
        ++HIDWORD(v168);
      }
      Inspector::ScriptCallFrame::~ScriptCallFrame((Inspector::ScriptCallFrame *)v163, v24, v25, v26, v27, v28, v29, v30);
      v47 = v162;
      v162 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v44, v45, v46, a4, a5, a6, a7);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
      v48 = v166;
      v166 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v44, v45, v46, a4, a5, a6, a7);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      v11 = *((unsigned int *)a2 + 7);
    }
  }
  v65 = *((_QWORD *)a2 + 1);
  v66 = this;
  if ((v65 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v65 + 5) <= 0x16u)
    goto LABEL_95;
  v166 = 0;
  v162 = 0;
  if (HIDWORD(v168))
  {
    if (!(_DWORD)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1986AA4B4);
    }
    v67 = *((_QWORD *)a2 + 2);
    v68 = *(_QWORD *)(v67 + 8);
    if (v68)
    {
      if (*(_BYTE *)(v67 + 36))
      {
        v69 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v69 = 0xB00000002;
        *(_QWORD *)(v69 + 8) = "[wasm code]";
        *(_DWORD *)(v69 + 16) = 4;
        v163[0] = 0;
LABEL_94:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        goto LABEL_95;
      }
      JSC::processSourceURL((int **)v163, (uint64_t)v10, v67, (int **)(*(_QWORD *)(*(_QWORD *)(v68 + 64) + 40) + 64));
      v91 = v163[0];
      if (v163[0])
      {
        v149 = *(_DWORD *)v163[0];
        v150 = *((_DWORD *)v163[0] + 1);
        v163[0] = 0;
        v151 = v149 - 2;
        if (v151)
        {
          *(_DWORD *)v91 = v151;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v91, v88, v89, v90, a4, a5, a6, a7);
          WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
        }
        v66 = this;
        if (v150)
          goto LABEL_95;
      }
    }
    if (!HIDWORD(v168))
    {
      __break(0xC471u);
      JUMPOUT(0x1986AA4BCLL);
    }
    v92 = v167;
    if ((Inspector::extractSourceInformationFromException(v66, v65, (uint64_t)&v166, (uint64_t *)&v162, a4, a5, a6, a7) & 1) == 0)
    {
      v78 = v162;
      if (!v162)
        goto LABEL_95;
      goto LABEL_91;
    }
    if (!*((_DWORD *)a2 + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x1986AA4C4);
    }
    v93 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
    if (v93)
    {
      v94 = *(_QWORD *)(*(_QWORD *)(v93 + 64) + 40);
      if (v94)
      {
        LODWORD(v93) = *(_DWORD *)(v94 + 112);
        if (!(_DWORD)v93)
        {
          do
            v95 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
          while (__stlxr(v95 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
          LODWORD(v93) = v95 + 1;
          *(_DWORD *)(v94 + 112) = v95 + 1;
          if (v95 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986AA494);
          }
        }
      }
      else
      {
        LODWORD(v93) = 1;
      }
    }
    v96 = v166;
    v97 = *v92;
    if (*v92)
      *(_DWORD *)v97 += 2;
    v163[0] = v97;
    v78 = v162;
    if (v162)
      *(_DWORD *)v162 += 2;
    v163[1] = v78;
    v164 = 0;
    *(_DWORD *)v165 = v93;
    *(_QWORD *)&v165[4] = v96;
    if (!HIDWORD(v168))
    {
      __break(0xC471u);
      JUMPOUT(0x1986AA4CCLL);
    }
    v98 = v167;
    if (v97)
      *(_DWORD *)v97 += 2;
    v99 = *v98;
    *v98 = v97;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
        if (!v78)
          goto LABEL_80;
        goto LABEL_79;
      }
      *(_DWORD *)v99 -= 2;
    }
    if (!v78)
    {
LABEL_80:
      v100 = v98[1];
      v98[1] = v78;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::~StringImpl(v100, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
      v101 = v98[2];
      v98[2] = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
        {
          WTF::StringImpl::~StringImpl(v101, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
        }
        else
        {
          *(_DWORD *)v101 -= 2;
        }
      }
      v102 = *(WTF::StringImpl **)v165;
      *((_DWORD *)v98 + 8) = *(_DWORD *)&v165[8];
      v98[3] = v102;
      goto LABEL_87;
    }
LABEL_79:
    *(_DWORD *)v78 += 2;
    goto LABEL_80;
  }
  SourceInformationFromException = Inspector::extractSourceInformationFromException(this, v65, (uint64_t)&v166, (uint64_t *)&v162, a4, a5, a6, a7);
  v78 = v162;
  if (!SourceInformationFromException)
    goto LABEL_88;
  v79 = v166;
  v163[0] = 0;
  if (v162)
    *(_DWORD *)v162 += 2;
  v163[1] = v78;
  v164 = 0;
  *(_DWORD *)v165 = 0;
  *(_QWORD *)&v165[4] = v79;
  v80 = HIDWORD(v168);
  if (HIDWORD(v168) == (_DWORD)v168)
  {
    WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,Inspector::ScriptCallFrame>((uint64_t)&v167, (unint64_t)v163);
  }
  else
  {
    v81 = v167;
    v82 = &v167[5 * HIDWORD(v168)];
    *v82 = 0;
    v83 = v82 + 1;
    v84 = v163[1];
    if (v163[1])
      *(_DWORD *)v163[1] += 2;
    *v83 = v84;
    v85 = v164;
    if (v164)
      *(_DWORD *)v164 += 2;
    v86 = &v81[5 * v80];
    v86[2] = v85;
    v87 = *(WTF::StringImpl **)v165;
    *((_DWORD *)v86 + 8) = *(_DWORD *)&v165[8];
    v86[3] = v87;
    ++HIDWORD(v168);
  }
LABEL_87:
  Inspector::ScriptCallFrame::~ScriptCallFrame((Inspector::ScriptCallFrame *)v163, v70, v71, v72, v73, v74, v75, v76);
LABEL_88:
  if (!v78)
    goto LABEL_95;
LABEL_91:
  if (*(_DWORD *)v78 == 2)
  {
    v69 = (uint64_t)v78;
    goto LABEL_94;
  }
  *(_DWORD *)v78 -= 2;
LABEL_95:
  v111 = *((_QWORD *)v66 + 252);
  if (!v111)
    goto LABEL_100;
  v112 = *(_QWORD *)(v111 + 200);
  if (!v112)
    goto LABEL_101;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112)
    && (v113 = *(unsigned int *)(v112 + 180), (_DWORD)v113))
  {
    *(_OWORD *)v163 = *(_OWORD *)(*(_QWORD *)(v112 + 168) + 16 * v113 - 16);
    v112 = WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>((uint64_t *)(v112 + 160), (int *)v163);
  }
  else
  {
LABEL_100:
    v112 = 0;
  }
LABEL_101:
  v114 = *((unsigned int *)a2 + 7) > (unint64_t)a3;
  v115 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v115 = 1;
  *(_QWORD *)(v115 + 8) = v167;
  v123 = v168;
  v167 = 0;
  v168 = 0;
  *(_QWORD *)(v115 + 16) = v123;
  *(_BYTE *)(v115 + 24) = v114;
  if (v112)
    ++*(_DWORD *)v112;
  *(_QWORD *)(v115 + 32) = v112;
  *a8 = v115;
  return WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v167, v116, v117, v118, v119, v120, v121, v122);
}

unint64_t Inspector::extractSourceInformationFromException(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v12;
  WTF::StringImpl *v13;
  const JSC::PropertyTable *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  const JSC::PropertyTable *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  const JSC::PropertyTable *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  int v60;
  int v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t LineColumnAndSource;
  uint64_t v65;
  _BOOL4 v66;
  char **v67;
  BOOL v68;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;

  v12 = (unsigned int *)*((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral((uint64_t)"line", 4uLL, (uint64_t)a4, a5, a6, a7, a8, &v122);
  v13 = v122;
  JSC::JSObject::getDirect((_DWORD *)a2, (JSC::VM *)v12, (unint64_t)v122, v14, v15, v16, v17, v18);
  v27 = v26;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"column", 6uLL, v21, v22, v23, v24, v25, &v122);
  v28 = v122;
  JSC::JSObject::getDirect((_DWORD *)a2, (JSC::VM *)v12, (unint64_t)v122, v29, v30, v31, v32, v33);
  v42 = v41;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sourceURL", 9uLL, v36, v37, v38, v39, v40, &v122);
  v43 = v122;
  JSC::JSObject::getDirect((_DWORD *)a2, (JSC::VM *)v12, (unint64_t)v122, v44, v45, v46, v47, v48);
  v58 = v57;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  if (!(v27 >> 49) || !v58 || (v58 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v58 + 5) != 2)
  {
    v65 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v66 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v67 = (char **)(16 * v65);
    if ((_DWORD)v65)
      v68 = v67 == &JSC::ErrorInstance::s_info;
    else
      v68 = 1;
    if (!v68)
    {
      do
      {
        v67 = (char **)v67[2];
        v66 = v67 != 0;
      }
      while (v67 != &JSC::ErrorInstance::s_info && v67 != 0);
    }
    if (v66)
      LineColumnAndSource = JSC::getLineColumnAndSource((uint64_t)v12, *(WTF::AtomStringImpl **)(a2 + 24), (unint64_t *)a3, a4, v52, v53, v54, v55);
    else
      LineColumnAndSource = 0;
LABEL_39:
    v62 = *a4;
    if (!*a4)
      goto LABEL_40;
LABEL_54:
    if (*(_DWORD *)(v62 + 4))
      goto LABEL_43;
    goto LABEL_40;
  }
  v59 = (double)(int)v27;
  if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v59 = v27 - 0x2000000000000;
  v60 = (int)v59;
  *(double *)v56.i64 = (double)(int)v42;
  if (v42 <= 0xFFFDFFFFFFFFFFFFLL)
    v56.i64[0] = v42 - 0x2000000000000;
  v61 = (int)*(double *)v56.i64;
  if (!(v42 >> 49))
    v61 = 0;
  *(_DWORD *)a3 = v60;
  *(_DWORD *)(a3 + 4) = v61;
  v62 = *(_QWORD *)(v58 + 8);
  if ((v62 & 1) == 0)
  {
    if (!v62)
      goto LABEL_23;
    goto LABEL_22;
  }
  v62 = (uint64_t)*JSC::JSRopeString::resolveRope(v58, a1, v50, v51, v56, v52, v53, v54, v55);
  if (v62)
LABEL_22:
    *(_DWORD *)v62 += 2;
LABEL_23:
  v63 = (WTF::StringImpl *)*a4;
  *a4 = v62;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
    LineColumnAndSource = 1;
    goto LABEL_39;
  }
  LineColumnAndSource = 1;
  if (v62)
    goto LABEL_54;
LABEL_40:
  v77 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v77 = 0x900000002;
  *(_QWORD *)(v77 + 8) = "undefined";
  *(_DWORD *)(v77 + 16) = 4;
  v78 = (WTF::StringImpl *)*a4;
  *a4 = v77;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
LABEL_43:
  *((_QWORD *)v12 + 2) = 0;
  v79 = v12 + 20;
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 & 0xFFFFFFEF, v79));
  return LineColumnAndSource;
}

uint64_t Inspector::createScriptArguments@<X0>(Inspector *this@<X0>, JSC::JSGlobalObject *a2@<X1>, JSC::CallFrame *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v11 = *((_QWORD *)this + 7);
  v42 = 0;
  v43 = 0;
  v12 = *((int *)a2 + 8);
  if (v12 - 1 > (unint64_t)a3)
  {
    v14 = ((unint64_t)a3 << 32) + 0x600000000;
    v15 = ~(unint64_t)a3 + v12;
    do
    {
      JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::Strong((unint64_t **)&v41, v11, *(_QWORD *)((char *)a2 + (v14 >> 29)), a4, a5, a6, a7, a8);
      if (HIDWORD(v43) == (_DWORD)v43)
      {
        WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>>((uint64_t)&v42, (unint64_t)&v41);
      }
      else
      {
        JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::Strong((_QWORD *)(v42 + 8 * HIDWORD(v43)), &v41, v16, v17, v18, v19, v20, v21);
        ++HIDWORD(v43);
      }
      if (v41)
      {
        v22 = v41 - 2;
        v23 = *(_QWORD *)(((unint64_t)(v41 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v24 = (uint64_t *)*(v41 - 1);
        if (v24)
        {
          v25 = *v22;
          *v24 = *v22;
          *(_QWORD *)(v25 + 8) = v24;
          *v22 = 0;
          v22[1] = 0;
        }
        *v22 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;
      }
      v14 += 0x100000000;
      --v15;
    }
    while (v15);
  }
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v26 = 1;
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::Strong((_QWORD **)(v26 + 8), *((_QWORD *)this + 7), (unint64_t)this, v27, v28, v29, v30, v31);
  *(_QWORD *)(v26 + 16) = v42;
  v32 = v43;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(v26 + 24) = v32;
  *a9 = v26;
  return WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v33, v34, v35, v36, v37, v38, v39);
}

unint64_t **JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::Strong(unint64_t **result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v9;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t **v19;

  v8 = *(_QWORD *)(a2 + 712);
  if (!v8)
  {
    v19 = result;
    v17 = a2;
    v18 = a3;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), a2, a3, a4, a5, a6, a7, a8);
    a2 = v17;
    a3 = v18;
    result = v19;
    v8 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v8;
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (unint64_t *)(v8 + 16);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *result = (unint64_t *)(v8 + 16);
  v11 = (a3 & 0xFFFE000000000002) == 0 && a3 != 0;
  v12 = (*v9 & 0xFFFE000000000002) == 0;
  if (!*v9)
    v12 = 0;
  if (v12 != v11)
  {
    if ((v11 & 1) != 0)
    {
      v13 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
      v14 = v13[3];
      v13 += 3;
      *(_QWORD *)v8 = v14;
      *(_QWORD *)(v8 + 8) = v13;
      *v13 = v8;
      *(_QWORD *)(v14 + 8) = v8;
    }
    else
    {
      v16 = *(_QWORD *)v8;
      v15 = *(_QWORD **)(v8 + 8);
      *v15 = *(_QWORD *)v8;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v9 = *result;
    }
  }
  *v9 = a3;
  return result;
}

void Inspector::ScriptCallArgumentHandler::appendArgument(Inspector::ScriptCallArgumentHandler *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  Inspector::ScriptCallArgumentHandler *v29;
  _QWORD *v32;
  uint64_t *v33;
  unsigned int *v34;
  _BYTE v35[24];
  uint64_t v36;

  v11 = *(JSC::VM **)(*((_QWORD *)this + 12) + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v34, v11, a3, a4, a5, a6, a7, a8, a9);
  v18 = JSC::jsString(v11, a2, v12, v13, v14, v15, v16, v17);
  v26 = v18;
  v27 = *((unsigned int *)this + 2);
  v28 = (_DWORD *)((char *)this + 8);
  if ((_DWORD)v27 == *((_DWORD *)this + 3))
  {
    if (v27 >> 30
      || JSC::MarkedVectorBase::expandCapacity((Inspector::ScriptCallArgumentHandler *)((char *)this + 8), 2 * (int)v27))
    {
      *(_BYTE *)this = 1;
      goto LABEL_8;
    }
    LODWORD(v27) = *v28;
  }
  else
  {
    v29 = (Inspector::ScriptCallArgumentHandler *)*((_QWORD *)this + 2);
    if (v29 == (Inspector::ScriptCallArgumentHandler *)((char *)this + 32) || v29 == 0)
    {
      *((_QWORD *)v29 + v27) = v18;
      *v28 = v27 + 1;
      goto LABEL_8;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v27) = v26;
  *((_DWORD *)this + 2) = v27 + 1;
  if (!*((_QWORD *)this + 3) && (v26 & 0xFFFE000000000002) == 0 && v26 != 0)
  {
    v32 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v32 = (_QWORD *)(v26 - 16);
    v33 = (uint64_t *)(*v32 + 560);
    *((_QWORD *)this + 3) = v33;
    v36 = (uint64_t)this + 8;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v33, &v36, v21, v22, v23, v24, v25, (uint64_t)v35);
  }
LABEL_8:
  JSC::JSLockHolder::~JSLockHolder(&v34, v19, v20, v21, v22, v23, v24, v25);
}

void Inspector::ScriptCallArgumentHandler::appendArgument(Inspector::ScriptCallArgumentHandler *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  int *v20;
  _BYTE *v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  Inspector::ScriptCallArgumentHandler *v33;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t *v46;
  WTF::StringImpl *v47;
  unsigned int *v48;
  _BYTE v49[24];
  uint64_t v50;

  v11 = *(JSC::VM **)(*((_QWORD *)this + 12) + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v48, v11, a3, a4, a5, a6, a7, a8, a9);
  if (a2)
  {
    v18 = strlen(a2);
    if (v18)
    {
      v19 = v18;
      if (v18 >> 31)
      {
        __break(0xC471u);
        return;
      }
      v20 = (int *)WTF::fastCompactMalloc((WTF *)(v18 + 20));
      v21 = v20 + 5;
      *v20 = 2;
      v20[1] = v19;
      *((_QWORD *)v20 + 1) = v20 + 5;
      v20[4] = 4;
      if (v19 == 1)
        *v21 = *a2;
      else
        memcpy(v21, a2, v19);
    }
    else
    {
      v20 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v20 = 0;
  }
  v47 = (WTF::StringImpl *)v20;
  v22 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v47, v12, v13, v14, v15, v16, v17);
  v30 = v22;
  v31 = *((unsigned int *)this + 2);
  v32 = (_DWORD *)((char *)this + 8);
  if ((_DWORD)v31 == *((_DWORD *)this + 3))
  {
    if (!(v31 >> 30)
      && !JSC::MarkedVectorBase::expandCapacity((Inspector::ScriptCallArgumentHandler *)((char *)this + 8), 2 * (int)v31))
    {
      LODWORD(v31) = *v32;
      goto LABEL_25;
    }
    *(_BYTE *)this = 1;
  }
  else
  {
    v33 = (Inspector::ScriptCallArgumentHandler *)*((_QWORD *)this + 2);
    if (v33 != (Inspector::ScriptCallArgumentHandler *)((char *)this + 32) && v33 != 0)
    {
LABEL_25:
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v31) = v30;
      *((_DWORD *)this + 2) = v31 + 1;
      if (!*((_QWORD *)this + 3) && (v30 & 0xFFFE000000000002) == 0 && v30 != 0)
      {
        v45 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v30 & 8) != 0)
          v45 = (_QWORD *)(v30 - 16);
        v46 = (uint64_t *)(*v45 + 560);
        *((_QWORD *)this + 3) = v46;
        v50 = (uint64_t)this + 8;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v46, &v50, v25, v26, v27, v28, v29, (uint64_t)v49);
      }
      goto LABEL_16;
    }
    *((_QWORD *)v33 + v31) = v22;
    *v32 = v31 + 1;
  }
LABEL_16:
  v35 = v47;
  v47 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v48, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t *Inspector::ScriptCallArgumentHandler::appendArgument(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;

  v9 = result;
  v10 = *((unsigned int *)result + 2);
  v11 = result + 1;
  if ((_DWORD)v10 == *((_DWORD *)result + 3))
  {
    if (v10 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(result + 1), 2 * (int)v10),
          (_DWORD)result))
    {
      *(_BYTE *)v9 = 1;
      return result;
    }
    LODWORD(v10) = *v11;
  }
  else
  {
    v12 = (uint64_t *)result[2];
    if (v12 == result + 4 || v12 == 0)
    {
      v12[v10] = a2;
      *v11 = v10 + 1;
      return result;
    }
  }
  *(_QWORD *)(v9[2] + 8 * v10) = a2;
  *((_DWORD *)v9 + 2) = v10 + 1;
  if (!v9[3] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v14 = (_QWORD *)(a2 - 16);
    v15 = (uint64_t *)(*v14 + 560);
    v9[3] = (uint64_t)v15;
    v17 = v11;
    return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v15, (uint64_t *)&v17, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
  return result;
}

void Inspector::ScriptCallArgumentHandler::appendArgument(JSC::JSGlobalObject **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  Inspector::ScriptCallArgumentHandler *v21;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int *v25;
  _BYTE v26[24];
  JSC::JSGlobalObject **v27;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, this[12], a3, a4, a5, a6, a7, a8, a9);
  if (a2 == (int)a2)
    v18 = a2 | 0xFFFE000000000000;
  else
    v18 = COERCE__INT64((double)a2) + 0x2000000000000;
  v19 = *((unsigned int *)this + 2);
  v20 = this + 1;
  if ((_DWORD)v19 == *((_DWORD *)this + 3))
  {
    if (v19 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 1), 2 * (int)v19))
    {
      *(_BYTE *)this = 1;
      goto LABEL_8;
    }
    LODWORD(v19) = *v20;
  }
  else
  {
    v21 = this[2];
    if (v21 == (Inspector::ScriptCallArgumentHandler *)(this + 4) || !v21)
    {
      *((_QWORD *)v21 + v19) = v18;
      *v20 = v19 + 1;
      goto LABEL_8;
    }
  }
  *((_QWORD *)this[2] + v19) = v18;
  *((_DWORD *)this + 2) = v19 + 1;
  if (!this[3] && (v18 & 0xFFFE000000000002) == 0 && v18 != 0)
  {
    v23 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v23 = (_QWORD *)(v18 - 16);
    v24 = (uint64_t *)(*v23 + 560);
    this[3] = (JSC::JSGlobalObject *)v24;
    v27 = this + 1;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v24, (uint64_t *)&v27, v13, v14, v15, v16, v17, (uint64_t)v26);
  }
LABEL_8:
  JSC::JSLockHolder::~JSLockHolder(&v25, v11, v12, v13, v14, v15, v16, v17);
}

{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  Inspector::ScriptCallArgumentHandler *v21;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int *v25;
  _BYTE v26[24];
  JSC::JSGlobalObject **v27;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, this[12], a3, a4, a5, a6, a7, a8, a9);
  if (a2 == (int)a2)
    v18 = a2 | 0xFFFE000000000000;
  else
    v18 = COERCE__INT64((double)a2) + 0x2000000000000;
  v19 = *((unsigned int *)this + 2);
  v20 = this + 1;
  if ((_DWORD)v19 == *((_DWORD *)this + 3))
  {
    if (v19 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 1), 2 * (int)v19))
    {
      *(_BYTE *)this = 1;
      goto LABEL_8;
    }
    LODWORD(v19) = *v20;
  }
  else
  {
    v21 = this[2];
    if (v21 == (Inspector::ScriptCallArgumentHandler *)(this + 4) || !v21)
    {
      *((_QWORD *)v21 + v19) = v18;
      *v20 = v19 + 1;
      goto LABEL_8;
    }
  }
  *((_QWORD *)this[2] + v19) = v18;
  *((_DWORD *)this + 2) = v19 + 1;
  if (!this[3] && (v18 & 0xFFFE000000000002) == 0 && v18 != 0)
  {
    v23 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v23 = (_QWORD *)(v18 - 16);
    v24 = (uint64_t *)(*v23 + 560);
    this[3] = (JSC::JSGlobalObject *)v24;
    v27 = this + 1;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v24, (uint64_t *)&v27, v13, v14, v15, v16, v17, (uint64_t)v26);
  }
LABEL_8:
  JSC::JSLockHolder::~JSLockHolder(&v25, v11, v12, v13, v14, v15, v16, v17);
}

void Inspector::ScriptCallArgumentHandler::appendArgument(JSC::JSGlobalObject **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  Inspector::ScriptCallArgumentHandler *v21;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int *v25;
  _BYTE v26[24];
  JSC::JSGlobalObject **v27;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, this[12], a3, a4, a5, a6, a7, a8, a9);
  if (a2 < 0)
    v18 = COERCE__INT64((double)a2) + 0x2000000000000;
  else
    v18 = a2 | 0xFFFE000000000000;
  v19 = *((unsigned int *)this + 2);
  v20 = this + 1;
  if ((_DWORD)v19 == *((_DWORD *)this + 3))
  {
    if (v19 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 1), 2 * (int)v19))
    {
      *(_BYTE *)this = 1;
      goto LABEL_11;
    }
    LODWORD(v19) = *v20;
  }
  else
  {
    v21 = this[2];
    if (v21 == (Inspector::ScriptCallArgumentHandler *)(this + 4) || v21 == 0)
    {
      *((_QWORD *)v21 + v19) = v18;
      *v20 = v19 + 1;
      goto LABEL_11;
    }
  }
  *((_QWORD *)this[2] + v19) = v18;
  *((_DWORD *)this + 2) = v19 + 1;
  if (!this[3] && (v18 & 0xFFFE000000000002) == 0 && v18)
  {
    v23 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v23 = (_QWORD *)(v18 - 16);
    v24 = (uint64_t *)(*v23 + 560);
    this[3] = (JSC::JSGlobalObject *)v24;
    v27 = this + 1;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v24, (uint64_t *)&v27, v13, v14, v15, v16, v17, (uint64_t)v26);
  }
LABEL_11:
  JSC::JSLockHolder::~JSLockHolder(&v25, v11, v12, v13, v14, v15, v16, v17);
}

void Inspector::ScriptCallArgumentHandler::appendArgument(JSC::JSGlobalObject **this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  Inspector::ScriptCallArgumentHandler *v22;
  _QWORD *v25;
  uint64_t *v26;
  unsigned int *v27;
  _BYTE v28[24];
  JSC::JSGlobalObject **v29;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v27, this[12], a3, a4, a5, a6, a7, a8, a9);
  v18 = a2 | 0xFFFE000000000000;
  if ((a2 & 0x80000000) != 0)
    v18 = COERCE__INT64((double)a2) + 0x2000000000000;
  if (HIDWORD(a2))
    v19 = COERCE__INT64((double)a2) + 0x2000000000000;
  else
    v19 = v18;
  v20 = *((unsigned int *)this + 2);
  v21 = this + 1;
  if ((_DWORD)v20 == *((_DWORD *)this + 3))
  {
    if (v20 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 1), 2 * (int)v20))
    {
      *(_BYTE *)this = 1;
      goto LABEL_13;
    }
    LODWORD(v20) = *v21;
  }
  else
  {
    v22 = this[2];
    if (v22 == (Inspector::ScriptCallArgumentHandler *)(this + 4) || v22 == 0)
    {
      *((_QWORD *)v22 + v20) = v19;
      *v21 = v20 + 1;
      goto LABEL_13;
    }
  }
  *((_QWORD *)this[2] + v20) = v19;
  *((_DWORD *)this + 2) = v20 + 1;
  if (!this[3] && (v19 & 0xFFFE000000000002) == 0 && v19 != 0)
  {
    v25 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v19 & 8) != 0)
      v25 = (_QWORD *)(v19 - 16);
    v26 = (uint64_t *)(*v25 + 560);
    this[3] = (JSC::JSGlobalObject *)v26;
    v29 = this + 1;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v26, (uint64_t *)&v29, v13, v14, v15, v16, v17, (uint64_t)v28);
  }
LABEL_13:
  JSC::JSLockHolder::~JSLockHolder(&v27, v11, v12, v13, v14, v15, v16, v17);
}

void Inspector::ScriptCallArgumentHandler::appendArgument(JSC::JSGlobalObject **this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  Inspector::ScriptCallArgumentHandler *v21;
  unsigned int *v23;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v23, this[12], a3, a4, a5, a6, a7, a8, a9);
  v18 = a2 | 0xFFFE000000000000;
  v19 = *((unsigned int *)this + 2);
  v20 = this + 1;
  if ((_DWORD)v19 == *((_DWORD *)this + 3))
  {
    if (!(v19 >> 30)
      && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 1), 2 * (int)v19))
    {
      LODWORD(v19) = *v20;
LABEL_13:
      *((_QWORD *)this[2] + v19) = v18;
      *((_DWORD *)this + 2) = v19 + 1;
      goto LABEL_8;
    }
    *(_BYTE *)this = 1;
  }
  else
  {
    v21 = this[2];
    if (v21 != (Inspector::ScriptCallArgumentHandler *)(this + 4) && v21 != 0)
      goto LABEL_13;
    *((_QWORD *)v21 + v19) = v18;
    *v20 = v19 + 1;
  }
LABEL_8:
  JSC::JSLockHolder::~JSLockHolder(&v23, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t Inspector::ScriptCallArgumentHandler::appendArgument(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = this;
  if (a2)
    v3 = 7;
  else
    v3 = 6;
  v4 = *(unsigned int *)(this + 8);
  v5 = (_DWORD *)(this + 8);
  if ((_DWORD)v4 == *(_DWORD *)(this + 12))
  {
    if (v4 >> 30
      || (this = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(this + 8), 2 * (int)v4), (_DWORD)this))
    {
      *(_BYTE *)v2 = 1;
      return this;
    }
    LODWORD(v4) = *v5;
  }
  else
  {
    v6 = *(_QWORD *)(this + 16);
    if (v6 == this + 32 || v6 == 0)
    {
      *(_QWORD *)(v6 + 8 * v4) = v3;
      *v5 = v4 + 1;
      return this;
    }
  }
  *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v4) = v3;
  *(_DWORD *)(v2 + 8) = v4 + 1;
  return this;
}

uint64_t Inspector::ScriptFunctionCall::ScriptFunctionCall(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0x800000000;
  *(_QWORD *)(result + 16) = result + 32;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_QWORD *)(result + 104) = a5;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(v8 + 712);
  if (!v9)
  {
    v19 = result;
    v16 = a3;
    v17 = a4;
    v18 = *(_QWORD *)(a2 + 56);
    JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672), a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    a4 = v17;
    v8 = v18;
    a3 = v16;
    result = v19;
    v9 = *(_QWORD *)(v18 + 712);
  }
  *(_QWORD *)(v8 + 712) = *(_QWORD *)v9;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (unint64_t *)(v9 + 16);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(result + 112) = v9 + 16;
  if ((a3 != 0) != (*(_QWORD *)(v9 + 16) != 0))
  {
    if (a3)
    {
      v11 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = v11[3];
      v11 += 3;
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v11;
      *v11 = v9;
      *(_QWORD *)(v12 + 8) = v9;
    }
    else
    {
      v15 = *(_QWORD *)v9;
      v14 = *(_QWORD **)(v9 + 8);
      *v14 = *(_QWORD *)v9;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = *(unint64_t **)(result + 112);
    }
  }
  *v10 = a3;
  v13 = (_DWORD *)*a4;
  if (*a4)
    *v13 += 2;
  *(_QWORD *)(result + 120) = v13;
  return result;
}

{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0x800000000;
  *(_QWORD *)(result + 16) = result + 32;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_QWORD *)(result + 104) = a5;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(v8 + 712);
  if (!v9)
  {
    v19 = result;
    v16 = a3;
    v17 = a4;
    v18 = *(_QWORD *)(a2 + 56);
    JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672), a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    a4 = v17;
    v8 = v18;
    a3 = v16;
    result = v19;
    v9 = *(_QWORD *)(v18 + 712);
  }
  *(_QWORD *)(v8 + 712) = *(_QWORD *)v9;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (unint64_t *)(v9 + 16);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(result + 112) = v9 + 16;
  if ((a3 != 0) != (*(_QWORD *)(v9 + 16) != 0))
  {
    if (a3)
    {
      v11 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = v11[3];
      v11 += 3;
      *(_QWORD *)v9 = v12;
      *(_QWORD *)(v9 + 8) = v11;
      *v11 = v9;
      *(_QWORD *)(v12 + 8) = v9;
    }
    else
    {
      v15 = *(_QWORD *)v9;
      v14 = *(_QWORD **)(v9 + 8);
      *v14 = *(_QWORD *)v9;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = *(unint64_t **)(result + 112);
    }
  }
  *v10 = a3;
  v13 = (_DWORD *)*a4;
  if (*a4)
    *v13 += 2;
  *(_QWORD *)(result + 120) = v13;
  return result;
}

void Inspector::ScriptFunctionCall::call(Inspector::ScriptFunctionCall *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, double a9@<D0>)
{
  unsigned int **v11;
  unsigned int *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, WTF::StringImpl **, unsigned int *, uint64_t *, uint64_t *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _BOOL4 v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  _BOOL4 v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;

  v11 = (unsigned int **)*((_QWORD *)this + 14);
  if (v11)
    v12 = *v11;
  else
    v12 = 0;
  v13 = *(_QWORD *)(*((_QWORD *)this + 12) + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v70, (JSC::VM *)v13, a2, a3, a4, a5, a6, a7, a9);
  v21 = *((_QWORD *)this + 12);
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  if (v22)
  {
    if ((*((_BYTE *)v22 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v22 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), *((_QWORD *)this + 15), v15, v16, v17, v18, v19, v20, &v67);
      v22 = v67;
    }
  }
  v23 = *(_DWORD *)v22;
  *(_DWORD *)v22 += 2;
  if (v23)
  {
    *(_DWORD *)v22 = v23;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v22, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  v31 = JSC::JSObject::get(v12, v21, (unint64_t)v22, v16, v17, v18, v19, v20);
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl(v22, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
  v32 = *(_QWORD *)(v13 + 16);
  if (v32)
  {
    *(_QWORD *)(v13 + 16) = 0;
    v58 = (unsigned int *)(v13 + 80);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 & 0xFFFFFFEF, v58));
    v60 = *(_QWORD *)(v13 + 24);
    v40 = v60 == v32;
    v61 = v60 != v32;
    if (v40)
      v32 = 0;
    *(_QWORD *)a8 = v32;
    *(_DWORD *)(a8 + 8) = v61;
    goto LABEL_30;
  }
  if ((v31 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  if (*(_BYTE *)(v31 + 5) != 26)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v31 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v67, v31);
    if ((_BYTE)v67)
      goto LABEL_20;
LABEL_34:
    *(_QWORD *)a8 = 0;
    *(_DWORD *)(a8 + 8) = 0;
LABEL_30:
    JSC::JSLockHolder::~JSLockHolder(&v70, v24, v25, v26, v27, v28, v29, v30);
    return;
  }
  v33 = *(_QWORD *)(v31 + 24);
  if ((v33 & 1) != 0)
    v33 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v33 + 5) == 8)
  {
    LOBYTE(v67) = 1;
    v68 = *(_QWORD *)(v33 + 40);
    LOBYTE(v69) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE)
                                                                             + 0x4C));
  }
  else
  {
    LOBYTE(v67) = 2;
    v34 = *(_QWORD *)(v31 + 16);
    v68 = v33;
    v69 = v34;
  }
LABEL_20:
  v66 = 0;
  v35 = *((_QWORD *)this + 12);
  v36 = (uint64_t (*)(uint64_t, uint64_t, WTF::StringImpl **, unsigned int *, uint64_t *, uint64_t *))*((_QWORD *)this + 13);
  if (v36)
  {
    v64 = *((_QWORD *)this + 2);
    v65 = *((_DWORD *)this + 2);
    v37 = v36(v35, v31, &v67, v12, &v64, &v66);
    goto LABEL_24;
  }
  v64 = *((_QWORD *)this + 2);
  v65 = *((_DWORD *)this + 2);
  v38 = *(_QWORD *)(v35 + 56);
  v37 = JSC::Interpreter::executeCall((JSC::VM *)(v38 + 90560), v31, (unsigned __int8 *)&v67, (uint64_t)v12, (uint64_t)&v64, v28, v29, v30);
  if (*(_QWORD *)(v38 + 16))
  {
    v66 = *(_QWORD *)(v38 + 16);
    *(_QWORD *)(v38 + 16) = 0;
    v62 = (unsigned int *)(v38 + 80);
    v37 = 10;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 & 0xFFFFFFEF, v62));
LABEL_24:
    if (v66)
    {
      v39 = *(_QWORD *)(v13 + 24);
      v40 = v39 == v66;
      v41 = v39 != v66;
      if (v40)
        v37 = 0;
      else
        v37 = v66;
    }
    else
    {
      v41 = 0;
    }
    *(_QWORD *)a8 = v37;
    *(_DWORD *)(a8 + 8) = v41;
    goto LABEL_30;
  }
  if (v37)
    goto LABEL_24;
  __break(0xC471u);
}

uint64_t Inspector::InspectorAgent::InspectorAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Inspector";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x900000002;
  *(_QWORD *)a1 = off_1E35942E0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594338;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::InspectorBackendDispatcher::create(*(Inspector::InspectorBackendDispatcher **)(a2 + 24), (Inspector::BackendDispatcher *)(a1 + 16), (uint64_t *)(a1 + 40));
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Inspector";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x900000002;
  *(_QWORD *)a1 = off_1E35942E0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594338;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::InspectorBackendDispatcher::create(*(Inspector::InspectorBackendDispatcher **)(a2 + 24), (Inspector::BackendDispatcher *)(a1 + 16), (uint64_t *)(a1 + 40));
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

void Inspector::InspectorAgent::~InspectorAgent(Inspector::InspectorAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v10;
  }
  v11 = *((unsigned int *)this + 15);
  if ((_DWORD)v11)
  {
    v24 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    v25 = 8 * v11;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v12 = *((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorAgent::~InspectorAgent(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void `non-virtual thunk to'Inspector::InspectorAgent::~InspectorAgent(Inspector::InspectorAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorAgent::~InspectorAgent((Inspector::InspectorAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorAgent::~InspectorAgent((Inspector::InspectorAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void Inspector::InspectorAgent::willDestroyFrontendAndBackend(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (*(_DWORD *)(a1 + 56))
  {
    v9 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)(a1 + 48);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *(_DWORD *)(a1 + 60) = 0;
    }
    v21 = *(_QWORD *)(a1 + 48);
    if (v21)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_BYTE *)(a1 + 80) = 0;
}

uint64_t Inspector::InspectorAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 80) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

void Inspector::InspectorAgent::enable(Inspector::InspectorAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;

  *((_BYTE *)this + 80) = 1;
  if (*((_QWORD *)this + 8))
  {
    v29 = (WTF *)*((_QWORD *)this + 8);
    v28 = (WTF *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    Inspector::InspectorAgent::inspect((uint64_t)this, &v29, &v28, a4, a5, a6, a7, a8);
    v11 = v28;
    v28 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::JSONImpl::Value::operator delete(v11, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v11;
    }
    v12 = v29;
    v29 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v12;
    }
  }
  v13 = *((unsigned int *)this + 15);
  if ((_DWORD)v13)
  {
    v14 = (const WTF::String *)*((_QWORD *)this + 6);
    v15 = 8 * v13;
    do
    {
      Inspector::InspectorFrontendDispatcher::evaluateForTestInFrontend(*((Inspector::InspectorFrontendDispatcher **)this + 4), v14);
      v14 = (const WTF::String *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  if (*((_DWORD *)this + 14))
  {
    v16 = *((unsigned int *)this + 15);
    v17 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
      *((_DWORD *)this + 15) = 0;
      v17 = (WTF::StringImpl **)*((_QWORD *)this + 6);
    }
    if (v17)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *a9 = 0;
  a9[8] = 0;
}

void Inspector::InspectorAgent::inspect(uint64_t a1, WTF **a2, WTF **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;

  if (*(_BYTE *)(a1 + 80))
  {
    Inspector::InspectorFrontendDispatcher::inspect(*(uint64_t **)(a1 + 32), a2, a3);
    v10 = *(WTF **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::JSONImpl::Value::operator delete(v10, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v10;
    }
    v11 = *(WTF **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (!v11)
      return;
LABEL_11:
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete(v11, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v11;
    return;
  }
  v12 = *a2;
  *a2 = 0;
  v13 = *(WTF **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete(v13, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v13;
  }
  v14 = *a3;
  *a3 = 0;
  v11 = *(WTF **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  if (v11)
    goto LABEL_11;
}

void `non-virtual thunk to'Inspector::InspectorAgent::enable(Inspector::InspectorAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  Inspector::InspectorAgent::enable((Inspector::InspectorAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t `non-virtual thunk to'Inspector::InspectorAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 64) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorAgent::initialized@<X0>(Inspector::InspectorAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorAgent::initialized@<X0>(Inspector::InspectorAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  *a2 = 0;
  a2[8] = 0;
  return result;
}

void Inspector::InspectorAgent::evaluateForTestInFrontend(Inspector::InspectorFrontendDispatcher **this, const WTF::String *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD **v7;
  uint64_t v8;
  Inspector::InspectorFrontendDispatcher *v9;
  _DWORD *v10;

  if (*((_BYTE *)this + 80))
  {
    Inspector::InspectorFrontendDispatcher::evaluateForTestInFrontend(this[4], a2);
  }
  else
  {
    v3 = (uint64_t *)(this + 6);
    v4 = *((unsigned int *)this + 15);
    if ((_DWORD)v4 == *((_DWORD *)this + 14))
    {
      v7 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)a2);
      v8 = *((unsigned int *)this + 15);
      v9 = this[6];
      v10 = *v7;
      if (*v7)
        *v10 += 2;
      *((_QWORD *)v9 + v8) = v10;
      *((_DWORD *)this + 15) = v8 + 1;
    }
    else
    {
      v5 = *v3;
      v6 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v6 += 2;
      *(_QWORD *)(v5 + 8 * v4) = v6;
      *((_DWORD *)this + 15) = v4 + 1;
    }
  }
}

_QWORD *Inspector::InspectorAuditAgent::InspectorAuditAgent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Audit";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x500000002;
  *a1 = off_1E3594370;
  a1[1] = v4;
  a1[2] = &unk_1E35943E8;
  Inspector::AuditBackendDispatcher::create((Inspector::AuditBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 2), &v7);
  v5 = a2[1];
  a1[3] = v7;
  a1[4] = v5;
  a1[5] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  a1[6] = 0;
  return a1;
}

void Inspector::InspectorAuditAgent::~InspectorAuditAgent(Inspector::InspectorAuditAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  *(_QWORD *)this = off_1E3594370;
  *((_QWORD *)this + 2) = &unk_1E35943E8;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v20 = (uint64_t *)(v9 - 16);
    v21 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = *(uint64_t **)(v9 - 8);
    if (v22)
    {
      v23 = *v20;
      *v22 = *v20;
      *(_QWORD *)(v23 + 8) = v22;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    *((_QWORD *)this + 6) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

void Inspector::InspectorAuditAgent::setup(unint64_t **a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t *v5;
  unint64_t **v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Slow;
  unint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  void (**v77)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v78;
  JSC::JSGlobalObject *v79;
  _QWORD *v80;
  WTF::StringImpl *v81;

  v81 = 0;
  v6 = a1 + 6;
  v5 = a1[6];
  if (!v5 || !*v5)
  {
    ((void (*)(void (***__return_ptr)(Inspector::InjectedScriptBase *__hidden), unint64_t **, WTF::StringImpl **, uint64_t))(*a1)[9])(&v77, a1, &v81, a2);
    if (v80 && *v80)
    {
      v16 = v79;
      if (v79)
      {
        v17 = *((_QWORD *)v79 + 7);
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v76, v79, v9, v10, v11, v12, v13, v14, v15);
        v25 = *((_QWORD *)v16 + 7);
        v26 = *(_QWORD *)(v25 + 15056);
        if (!v26)
        {
          v75 = *((_QWORD *)v16 + 7);
          Slow = JSC::CompleteSubspace::tryAllocateSlow(v25 + 14936, (JSC *)v25, 0x40uLL, 0, v21, v22, v23, v24);
          v25 = v75;
          if (!Slow)
          {
            __break(0xC471u);
            return;
          }
          goto LABEL_10;
        }
        v27 = *(unsigned int *)(v26 + 60);
        Slow = *(_QWORD *)(v26 + 24);
        if (Slow >= *(_QWORD *)(v26 + 32))
        {
          Slow = *(_QWORD *)(v26 + 40);
          if ((Slow & 1) != 0)
          {
            v73 = v17;
            v74 = *((_QWORD *)v16 + 7);
            v68 = v25 + 192;
            JSC::sanitizeStackForVM((JSC *)v25, v18, v19, v20, v21, v22, v23, v24);
            v69 = v68;
            v17 = v73;
            Slow = JSC::LocalAllocator::allocateSlowCase(v26, v69, v27, 0, 0, v70, v71, v72);
            v25 = v74;
            goto LABEL_10;
          }
          v66 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v26 + 48);
          *(_QWORD *)(v26 + 32) = Slow + HIDWORD(v66);
          *(_QWORD *)(v26 + 40) = Slow + (int)v66;
        }
        *(_QWORD *)(v26 + 24) = Slow + v27;
LABEL_10:
        *(_DWORD *)Slow = 0;
        *(_DWORD *)Slow = *((_DWORD *)v16 + 212);
        *(_DWORD *)(Slow + 4) = 16783360;
        *(_OWORD *)(Slow + 8) = 0u;
        *(_OWORD *)(Slow + 24) = 0u;
        *(_OWORD *)(Slow + 40) = 0u;
        *(_QWORD *)(Slow + 56) = 0;
        if (*(_BYTE *)(v25 + 755))
          __dmb(0xAu);
        v29 = *v6;
        if (!*v6)
        {
          v30 = *(_QWORD **)(v17 + 712);
          if (!v30)
          {
            v67 = Slow;
            JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
            Slow = v67;
            v30 = *(_QWORD **)(v17 + 712);
          }
          *(_QWORD *)(v17 + 712) = *v30;
          v30[2] = 0;
          v29 = v30 + 2;
          *v30 = 0;
          v30[1] = 0;
          *v6 = v30 + 2;
        }
        if (!*v29)
        {
          v31 = *(_QWORD **)(((unint64_t)(v29 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v32 = v31[3];
          v31 += 3;
          *(v29 - 2) = v32;
          *(v29 - 1) = (unint64_t)v31;
          *v31 = v29 - 2;
          *(_QWORD *)(v32 + 8) = v29 - 2;
        }
        *v29 = Slow;
        if (*v6 && **v6)
        {
          ((void (*)(unint64_t **, JSC::JSGlobalObject *, unint64_t **))(*a1)[10])(a1, v16, v6);
          v40 = 0;
          *a3 = 0;
        }
        else
        {
          v42 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v42 = 0x3600000002;
          *(_QWORD *)(v42 + 8) = "Unable to construct injected WebInspectorAudit object.";
          *(_DWORD *)(v42 + 16) = 4;
          *(_QWORD *)a3 = v42;
          v40 = 1;
        }
        a3[8] = v40;
        JSC::JSLockHolder::~JSLockHolder(&v76, v33, v34, v35, v36, v37, v38, v39);
        goto LABEL_27;
      }
      v61 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v61 = 0x4700000002;
      *(_QWORD *)(v61 + 8) = "Missing execution state of injected script for given executionContextId";
      *(_DWORD *)(v61 + 16) = 4;
      *(_QWORD *)a3 = v61;
    }
    else
    {
      v41 = v81;
      if (v81)
        *(_DWORD *)v81 += 2;
      *(_QWORD *)a3 = v41;
    }
    a3[8] = 1;
LABEL_27:
    v77 = &off_1E3591350;
    if (v80)
    {
      v62 = v80 - 2;
      v63 = *(_QWORD *)(((unint64_t)(v80 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v64 = (uint64_t *)*(v80 - 1);
      if (v64)
      {
        v65 = *v62;
        *v64 = *v62;
        *(_QWORD *)(v65 + 8) = v64;
        *v62 = 0;
        v62[1] = 0;
      }
      *v62 = *(_QWORD *)(v63 + 40);
      *(_QWORD *)(v63 + 40) = v62;
      v80 = 0;
    }
    v43 = v78;
    v78 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
    goto LABEL_31;
  }
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x2D00000002;
  *(_QWORD *)(v7 + 8) = "Must call teardown before calling setup again";
  *(_DWORD *)(v7 + 16) = 4;
  *(_QWORD *)a3 = v7;
  a3[8] = 1;
LABEL_31:
  v44 = v81;
  v81 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
}

BOOL Inspector::InspectorAuditAgent::hasActiveAudit(Inspector::InspectorAuditAgent *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 6);
  return v1 && *v1 != 0;
}

void `non-virtual thunk to'Inspector::InspectorAuditAgent::setup(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  Inspector::InspectorAuditAgent::setup((unint64_t **)(a1 - 16), a2, a3);
}

void Inspector::InspectorAuditAgent::run(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  float v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE *v30;
  _BYTE *v31;
  size_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  __int16 v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  _BYTE *v97;
  _BYTE *v98;
  size_t v99;
  unsigned __int128 *v100;
  unsigned __int128 *v101;
  unsigned __int128 v102;
  char v103;
  unsigned __int128 *v104;
  unsigned __int128 *v105;
  unsigned __int128 v106;
  char v107;
  _BYTE v108[10];
  __int16 v109;
  WTF *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  void (**v116)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v117;
  _QWORD *v118;
  WTF::StringImpl *v119;

  v119 = 0;
  (*(void (**)(void (***__return_ptr)(Inspector::InjectedScriptBase *__hidden), _QWORD *, WTF::StringImpl **))(*a1 + 72))(&v116, a1, &v119);
  v16 = v118;
  if (v118 && *v118)
  {
    if (*a2)
    {
      v17 = v111;
      if (v111)
      {
        v18 = *((_DWORD *)v111 + 1);
        if (v18 < 0)
          goto LABEL_92;
        v19 = 0;
LABEL_12:
        v21 = __OFADD__(v18, 26);
        v22 = v18 + 26;
        if (!v21)
        {
          v23 = (v22 + 59);
          if (!__OFADD__(v22, 59))
          {
            if ((v19 & 1) != 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v111);
              v96 = v111;
              if (v111)
              {
                *(_DWORD *)v96 = 2;
                *((_DWORD *)v96 + 1) = v23;
                *((_QWORD *)v96 + 1) = (char *)v96 + 20;
                *((_DWORD *)v96 + 4) = 4;
                v97 = (char *)v96 + 79;
                if (v17)
                {
                  v98 = (_BYTE *)*((_QWORD *)v17 + 1);
                  v99 = *((unsigned int *)v17 + 1);
                  if ((*((_BYTE *)v17 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v99 == 1)
                    {
                      *v97 = *v98;
                    }
                    else if ((_DWORD)v99)
                    {
                      memcpy((char *)v96 + 79, v98, v99);
                    }
                  }
                  else
                  {
                    if (v99 < 0x10)
                    {
                      v104 = (unsigned __int128 *)((char *)v96 + 79);
                    }
                    else
                    {
                      v104 = (unsigned __int128 *)&v97[v99 & 0xFFFFFFF0];
                      v105 = (unsigned __int128 *)((char *)v96 + 79);
                      do
                      {
                        v106 = (unsigned __int128)vld2q_s8(v98);
                        v98 += 32;
                        *v105++ = v106;
                      }
                      while (v105 != v104);
                    }
                    while (v104 != (unsigned __int128 *)&v97[v99])
                    {
                      v107 = *v98;
                      v98 += 2;
                      *(_BYTE *)v104 = v107;
                      v104 = (unsigned __int128 *)((char *)v104 + 1);
                    }
                  }
                }
                else
                {
                }
                v115 = v96;
                goto LABEL_25;
              }
            }
            else if ((*((_BYTE *)v17 + 16) & 4) != 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v111);
              v29 = v111;
              if (v111)
              {
                *(_DWORD *)v29 = 2;
                *((_DWORD *)v29 + 1) = v23;
                *((_QWORD *)v29 + 1) = (char *)v29 + 20;
                *((_DWORD *)v29 + 4) = 4;
                v30 = (char *)v29 + 79;
                v31 = (_BYTE *)*((_QWORD *)v17 + 1);
                v32 = *((unsigned int *)v17 + 1);
                if ((*((_BYTE *)v17 + 16) & 4) != 0)
                {
                  if ((_DWORD)v32 == 1)
                  {
                    *v30 = *v31;
                  }
                  else if ((_DWORD)v32)
                  {
                    memcpy((char *)v29 + 79, v31, v32);
                  }
                }
                else
                {
                  if (v32 < 0x10)
                  {
                    v100 = (unsigned __int128 *)((char *)v29 + 79);
                  }
                  else
                  {
                    v100 = (unsigned __int128 *)&v30[v32 & 0xFFFFFFF0];
                    v101 = (unsigned __int128 *)((char *)v29 + 79);
                    do
                    {
                      v102 = (unsigned __int128)vld2q_s8(v31);
                      v31 += 32;
                      *v101++ = v102;
                    }
                    while (v101 != v100);
                  }
                  while (v100 != (unsigned __int128 *)&v30[v32])
                  {
                    v103 = *v31;
                    v31 += 2;
                    *(_BYTE *)v100 = v103;
                    v100 = (unsigned __int128 *)((char *)v100 + 1);
                  }
                }
                goto LABEL_23;
              }
            }
            else if (v23 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * (v22 + 59) + 20), &v111);
              v29 = v111;
              if (v111)
              {
                *(_DWORD *)v111 = 2;
                *((_DWORD *)v29 + 1) = v23;
                *(_OWORD *)((char *)v29 + 20) = xmmword_199156D60;
                *((_QWORD *)v29 + 1) = (char *)v29 + 20;
                *((_DWORD *)v29 + 4) = 0;
                *(_OWORD *)((char *)v29 + 36) = xmmword_199156D70;
                *(_OWORD *)((char *)v29 + 52) = xmmword_199156D80;
                *(_OWORD *)((char *)v29 + 68) = xmmword_199156D90;
                *(_OWORD *)((char *)v29 + 84) = xmmword_199156DA0;
                *(_OWORD *)((char *)v29 + 100) = xmmword_199156DB0;
                *(_OWORD *)((char *)v29 + 116) = xmmword_199156DC0;
                *((_DWORD *)v29 + 33) = 6291496;
                *((_WORD *)v29 + 68) = 40;
                  26);
LABEL_23:
                v115 = v29;
                if (*(_DWORD *)v17 == 2)
                {
                  WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)v31, v32, v24, v25, v26, v27, v28);
                  WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
                }
                else
                {
                  *(_DWORD *)v17 -= 2;
                }
LABEL_25:
                v113 = 0;
                v114 = 0;
                v111 = 0;
                v112 = 0;
                v33 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v33 = 0x500000002;
                *(_QWORD *)(v33 + 8) = "audit";
                *(_DWORD *)(v33 + 16) = 4;
                v111 = (WTF::StringImpl *)v33;
                v34 = (uint64_t *)a1[6];
                if (v34)
                {
                  v35 = *v34;
                  if (*v34)
                  {
                    v36 = (WTF *)WTF::fastMalloc((WTF *)8);
                    *(_QWORD *)v36 = v35;
                    v113 = v36;
                    v114 = 0x100000001;
                  }
                }
                v110 = 0;
                v109 = 0;
                v108[0] = 0;
                v108[4] = 0;
                v37 = a1[5];
                v38 = *(_QWORD *)(v37 + 152);
                if (v38)
                  *(_QWORD *)(v37 + 152) = 0;
                v39 = *(_QWORD *)(v37 + 160);
                if (v39)
                  *(_QWORD *)(v37 + 160) = 0;
                (*(void (**)(_QWORD *))(*a1 + 88))(a1);
                Inspector::InjectedScript::execute((uint64_t)&v116, (WTF::AtomStringImpl *)&v119, (const WTF::String *)&v115, (uint64_t)&v111, &v110, (uint64_t)&v109, (uint64_t)v108);
                (*(void (**)(_QWORD *))(*a1 + 96))(a1);
                v40 = v110;
                if (v110)
                {
                  v41 = 0;
                  v110 = 0;
                  v42 = v109;
                  *(_QWORD *)a3 = v40;
                  *(_WORD *)(a3 + 8) = v42;
                }
                else
                {
                  v43 = v119;
                  if (v119)
                    *(_DWORD *)v119 += 2;
                  *(_QWORD *)a3 = v43;
                  v41 = 1;
                }
                *(_DWORD *)(a3 + 16) = v41;
                if (v38)
                {
                  v44 = *(WTF **)(v37 + 152);
                  *(_QWORD *)(v37 + 152) = v38;
                  if (v44)
                    WTF::RefCounted<JSC::Breakpoint>::deref(v44, v6, v7, v8, v9, v10, v11, v12);
                }
                if (v39)
                {
                  v45 = *(WTF **)(v37 + 160);
                  *(_QWORD *)(v37 + 160) = v39;
                  if (v45)
                    WTF::RefCounted<JSC::Breakpoint>::deref(v45, v6, v7, v8, v9, v10, v11, v12);
                }
                v46 = v110;
                v110 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 1)
                    WTF::JSONImpl::Value::operator delete(v46, v6, v7, v8, v9, v10, v11, v12);
                  else
                    --*(_DWORD *)v46;
                }
                v47 = v113;
                if (v113)
                {
                  v113 = 0;
                  LODWORD(v114) = 0;
                  WTF::fastFree((unint64_t)v47, v6, v7, v8, v9, v10, v11, v12);
                }
                v48 = v111;
                v111 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v48, v6, v7, v8, v9, v10, v11, v12);
                    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                  }
                  else
                  {
                    *(_DWORD *)v48 -= 2;
                  }
                }
                v49 = v115;
                v115 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v49, v6, v7, v8, v9, v10, v11, v12);
                    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                  }
                  else
                  {
                    *(_DWORD *)v49 -= 2;
                  }
                }
                v16 = v118;
                goto LABEL_55;
              }
            }
          }
        }
LABEL_92:
        v115 = 0;
        __break(0xC471u);
        JUMPOUT(0x1986ACA3CLL);
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
  v20 = v119;
  if (v119)
    *(_DWORD *)v119 += 2;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_55:
  v116 = &off_1E3591350;
  if (v16)
  {
    v92 = v16 - 2;
    v93 = *(_QWORD *)(((unint64_t)(v16 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v94 = (uint64_t *)*(v16 - 1);
    if (v94)
    {
      v95 = *v92;
      *v94 = *v92;
      *(_QWORD *)(v95 + 8) = v94;
      *v92 = 0;
      v92[1] = 0;
    }
    *v92 = *(_QWORD *)(v93 + 40);
    *(_QWORD *)(v93 + 40) = v92;
    v118 = 0;
  }
  v50 = v117;
  v117 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v119;
  v119 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorAuditAgent::run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InspectorAuditAgent::run((_QWORD *)(a1 - 16), a2, a3);
}

uint64_t Inspector::InspectorAuditAgent::teardown@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD **)(this + 48);
  if (v3 && *v3)
  {
    v4 = v3 - 2;
    v5 = *(_QWORD *)(((unint64_t)(v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = (uint64_t *)*(v3 - 1);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    v8 = 0;
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *(_QWORD *)(this + 48) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)this = 0x2700000002;
    *(_QWORD *)(this + 8) = "Must call setup before calling teardown";
    *(_DWORD *)(this + 16) = 4;
    *(_QWORD *)a2 = this;
    v8 = 1;
  }
  a2[8] = v8;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorAuditAgent::teardown@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD **)(this + 32);
  if (v3 && *v3)
  {
    v4 = v3 - 2;
    v5 = *(_QWORD *)(((unint64_t)(v3 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = (uint64_t *)*(v3 - 1);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    v8 = 0;
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *(_QWORD *)(this + 32) = 0;
    *a2 = 0;
  }
  else
  {
    this = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)this = 0x2700000002;
    *(_QWORD *)(this + 8) = "Must call setup before calling teardown";
    *(_DWORD *)(this + 16) = 4;
    *(_QWORD *)a2 = this;
    v8 = 1;
  }
  a2[8] = v8;
  return this;
}

void Inspector::InspectorAuditAgent::populateAuditObject(double a1, uint64_t a2, uint64_t a3, int ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  WTF::StringImpl *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;

  if (a3)
  {
    v10 = *(JSC::VM **)(a3 + 56);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, v10, (uint64_t)a4, a5, a6, a7, a8, a9, a1);
    if (*a4)
      v16 = **a4;
    else
      v16 = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"Version", 7uLL, v11, v12, v13, v14, v15, v37);
    v17 = (WTF::StringImpl *)v37[0];
    v37[0] = 0;
    v37[1] = v16;
    v38 = -1;
    v18.n128_u64[0] = 0x100000001000000;
    v39 = 0x1000000;
    v40 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v16, (uint64_t)v10, (unint64_t)v17, 0xFFFE000000000004, 0, (uint64_t)v37, v19, v20, v18);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    JSC::JSLockHolder::~JSLockHolder(&v36, v21, v22, v23, v24, v25, v26, v27);
  }
}

_QWORD *WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *result;
  _QWORD **v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    do
    {
      v25 = (uint64_t *)(v11 + 16 * v22);
      v26 = *v25;
      if (*v25 != -1)
      {
        if (v26)
        {
          v35 = *a1;
          if (*a1)
            v36 = *(_DWORD *)(v35 - 8);
          else
            v36 = 0;
          v37 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
          v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
          v40 = v36 & ((v39 >> 31) ^ v39);
          v41 = 1;
          do
          {
            v42 = v40;
            v43 = *(_QWORD *)(v35 + 16 * v40);
            v40 = (v40 + v41++) & v36;
          }
          while (v43);
          v44 = (_QWORD *)(v35 + 16 * v42);
          v45 = v44 + 1;
          v46 = v44[1];
          if (v46)
          {
            v60 = (uint64_t *)(v46 - 16);
            v61 = *(_QWORD *)(((v46 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v62 = *(uint64_t **)(v46 - 8);
            if (v62)
            {
              v63 = *v60;
              *v62 = *v60;
              *(_QWORD *)(v63 + 8) = v62;
              *v60 = 0;
              v60[1] = 0;
              v26 = *v25;
            }
            *v60 = *(_QWORD *)(v61 + 40);
            *(_QWORD *)(v61 + 40) = v60;
          }
          *v44 = v26;
          v47 = v11 + 16 * v22;
          *v45 = 0;
          v50 = *(_QWORD *)(v47 + 8);
          v48 = (_QWORD **)(v47 + 8);
          v49 = v50;
          if (v50)
          {
            v51 = (v49 - 16) & 0xFFFFFFFFFFFFF000;
            v52 = *(_QWORD *)(v51 + 16);
            v53 = *(_QWORD **)(v52 + 40);
            if (!v53)
            {
              v70 = v22;
              v73 = (uint64_t *)(v11 + 16 * v22);
              v74 = v24;
              v75 = v44 + 1;
              v76 = v44;
              v72 = v48;
              JSC::HandleSet::grow(*(JSC::HandleSet **)(v51 + 16), v15, v16, v17, v18, v19, v20, v21);
              v45 = v75;
              v44 = v76;
              v48 = v72;
              v25 = v73;
              v24 = v74;
              v22 = v70;
              v53 = *(_QWORD **)(v52 + 40);
            }
            *(_QWORD *)(v52 + 40) = *v53;
            v53[2] = 0;
            v54 = v53 + 2;
            *v53 = 0;
            v53[1] = 0;
            *v45 = v53 + 2;
            v55 = *v48;
            if (*v48)
              v55 = (_QWORD *)*v55;
            v56 = (unint64_t)(v54 - 2);
            v15 = v55 != 0;
            if (v15 != (*v54 != 0))
            {
              if (v55)
              {
                v57 = *(unint64_t **)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
                v58 = v57[3];
                v57 += 3;
                *(_QWORD *)v56 = v58;
                *(v54 - 1) = v57;
                *v57 = v56;
                *(_QWORD *)(v58 + 8) = v56;
              }
              else
              {
                v68 = *(_QWORD *)v56;
                v69 = (_QWORD *)*(v54 - 1);
                *v69 = *(_QWORD *)v56;
                *(_QWORD *)(v68 + 8) = v69;
                *(_QWORD *)v56 = 0;
                *(_QWORD *)(v56 + 8) = 0;
                v54 = (_QWORD *)*v45;
              }
            }
            *v54 = v55;
            v59 = *v48;
            if (*v48)
            {
              v64 = v59 - 2;
              v65 = *(_QWORD *)(((unint64_t)(v59 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
              v66 = (uint64_t *)*(v59 - 1);
              if (v66)
              {
                v67 = *v64;
                *v66 = *v64;
                *(_QWORD *)(v67 + 8) = v66;
                *v64 = 0;
                v64[1] = 0;
              }
              *v64 = *(_QWORD *)(v65 + 40);
              *(_QWORD *)(v65 + 40) = v64;
              *v48 = 0;
            }
          }
          if (v25 == (uint64_t *)a3)
            v23 = v44;
        }
        else
        {
          v27 = v11 + 16 * v22;
          v30 = *(_QWORD *)(v27 + 8);
          v28 = (_QWORD *)(v27 + 8);
          v29 = v30;
          if (v30)
          {
            v31 = (uint64_t *)(v29 - 16);
            v32 = *(_QWORD *)(((v29 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v33 = *(uint64_t **)(v29 - 8);
            if (v33)
            {
              v34 = *v31;
              *v33 = *v31;
              *(_QWORD *)(v34 + 8) = v33;
              *v31 = 0;
              v31[1] = 0;
            }
            *v31 = *(_QWORD *)(v32 + 40);
            *(_QWORD *)(v32 + 40) = v31;
            *v28 = 0;
          }
        }
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, (void *)v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v8 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v9 - 1) != -1)
      {
        v10 = *v9;
        if (*v9)
        {
          v11 = (uint64_t *)(v10 - 16);
          v12 = *(_QWORD *)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v13 = *(uint64_t **)(v10 - 8);
          if (v13)
          {
            v14 = *v11;
            *v13 = *v11;
            *(_QWORD *)(v14 + 8) = v13;
            *v11 = 0;
            v11[1] = 0;
          }
          *v11 = *(_QWORD *)(v12 + 40);
          *(_QWORD *)(v12 + 40) = v11;
          *v9 = 0;
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Mapper<Inspector::ScriptArguments::getArgumentsAsStrings(void)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>::map(uint64_t *a1, uint64_t a2, JSC::JSGlobalObject **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  const WTF::String ***v15;
  uint64_t v16;
  const WTF::String *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = WTF::fastMalloc((WTF *)(8 * v3));
      *((_DWORD *)a1 + 2) = v3;
      *a1 = v7;
      v14 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v14)
      {
        v15 = *(const WTF::String ****)a2;
        v16 = 8 * v14;
        do
        {
          if (*v15)
            v17 = **v15;
          else
            v17 = 0;
          Inspector::argumentAsString((int **)&v32, *a3, v17, v8, v9, v10, v11, v12, v13);
          v20 = *((unsigned int *)a1 + 3);
          v21 = *a1;
          v22 = v32;
          v32 = 0;
          *(_QWORD *)(v21 + 8 * v20) = v22;
          *((_DWORD *)a1 + 3) = v20 + 1;
          v23 = v32;
          v32 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::~StringImpl(v23, v18, v19, v8, v9, v10, v11, v12);
              WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
  }
}

uint64_t WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  Inspector::ScriptCallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(Inspector::ScriptCallFrame **)a1;
    v11 = 40 * v9;
    do
    {
      Inspector::ScriptCallFrame::~ScriptCallFrame(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = (Inspector::ScriptCallFrame *)(v12 + 40);
      v11 -= 40;
    }
    while (v11);
  }
  v13 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::RefCounted<Inspector::AsyncStackTrace>::deref(Inspector::AsyncStackTrace *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 1)
  {
    Inspector::AsyncStackTrace::~AsyncStackTrace(a1);
    WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t Inspector::ScriptCallFrame::ScriptCallFrame(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  v3 = *(_DWORD **)(a2 + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 8) = v3;
  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

unint64_t WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  Inspector::ScriptCallFrame *v3;
  Inspector::ScriptCallFrame *v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1986AD350);
    }
    v3 = *(Inspector::ScriptCallFrame **)a1;
    v4 = (Inspector::ScriptCallFrame *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,Inspector::ScriptCallFrame>::move(v3, v4, v6);
    if (v3)
    {
      if (*(Inspector::ScriptCallFrame **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void WTF::VectorMover<false,Inspector::ScriptCallFrame>::move(Inspector::ScriptCallFrame *a1, Inspector::ScriptCallFrame *a2, uint64_t a3)
{
  Inspector::ScriptCallFrame *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      Inspector::ScriptCallFrame::ScriptCallFrame(a3, (uint64_t)v5);
      Inspector::ScriptCallFrame::~ScriptCallFrame(v5, v6, v7, v8, v9, v10, v11, v12);
      a3 += 40;
      v5 = (Inspector::ScriptCallFrame *)((char *)v5 + 40);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,Inspector::ScriptCallFrame>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = Inspector::ScriptCallFrame::ScriptCallFrame(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t Inspector::CreateScriptCallStackFunctor::operator()(uint64_t a1, JSC::StackVisitor::Frame *this)
{
  unint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t result;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _QWORD v55[3];
  int v56;
  unint64_t v57;

  if (*(_BYTE *)(a1 + 8))
  {
    result = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  else if (JSC::StackVisitor::Frame::isImplementationVisibilityPrivate(this))
  {
    return 0;
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    v4 = JSC::StackVisitor::Frame::computeLineAndColumn(this);
    JSC::StackVisitor::Frame::functionName(this, (uint64_t *)&v54);
    JSC::StackVisitor::Frame::sourceURL(this, (uint64_t *)&v53);
    JSC::StackVisitor::Frame::preRedirectURL(this, &v52);
    v5 = JSC::StackVisitor::Frame::sourceID(this);
    v6 = v54;
    if (v54)
      *(_DWORD *)v54 += 2;
    v55[0] = v6;
    v7 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    v55[1] = v7;
    v8 = v52;
    if (v52)
      *(_DWORD *)v52 += 2;
    v55[2] = v8;
    v56 = v5;
    v57 = v4;
    v9 = *(_DWORD *)(a1 + 28);
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      WTF::Vector<Inspector::ScriptCallFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,Inspector::ScriptCallFrame>(a1 + 16, (unint64_t)v55);
    }
    else
    {
      Inspector::ScriptCallFrame::ScriptCallFrame(*(_QWORD *)(a1 + 16) + 40 * v9, (uint64_t)v55);
      ++*(_DWORD *)(a1 + 28);
    }
    Inspector::ScriptCallFrame::~ScriptCallFrame((Inspector::ScriptCallFrame *)v55, v10, v11, v12, v13, v14, v15, v16);
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    v26 = v54;
    v54 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    result = 0;
    --*(_QWORD *)(a1 + 40);
  }
  else
  {
    result = 1;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

_QWORD *JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::Strong(_QWORD *result, uint64_t **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::HandleSet *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  JSC::HandleSet *v20;
  uint64_t **v21;
  _QWORD *v22;

  *result = 0;
  if (*a2)
  {
    v8 = *(JSC::HandleSet **)(((unint64_t)(*a2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = *((_QWORD *)v8 + 5);
    if (!v9)
    {
      v22 = result;
      v20 = *(JSC::HandleSet **)(((unint64_t)(*a2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = a2;
      JSC::HandleSet::grow(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v8 = v20;
      a2 = v21;
      result = v22;
      v9 = *((_QWORD *)v20 + 5);
    }
    v10 = 0;
    *((_QWORD *)v8 + 5) = *(_QWORD *)v9;
    *(_QWORD *)(v9 + 16) = 0;
    v11 = (uint64_t *)(v9 + 16);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *result = v9 + 16;
    if (*a2)
      v10 = **a2;
    v12 = *v11;
    v14 = (v10 & 0xFFFE000000000002) == 0 && v10 != 0;
    v15 = (v12 & 0xFFFE000000000002) == 0;
    if (!v12)
      v15 = 0;
    if (v15 != v14)
    {
      if ((v14 & 1) != 0)
      {
        v16 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
        v17 = v16[3];
        v16 += 3;
        *(_QWORD *)v9 = v17;
        *(_QWORD *)(v9 + 8) = v16;
        *v16 = v9;
        *(_QWORD *)(v17 + 8) = v9;
      }
      else
      {
        v19 = *(_QWORD *)v9;
        v18 = *(_QWORD **)(v9 + 8);
        *v18 = *(_QWORD *)v9;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v11 = (uint64_t *)*result;
      }
    }
    *v11 = v10;
  }
  return result;
}

uint64_t Inspector::InspectorConsoleAgent::InspectorConsoleAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Console";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x700000002;
  *(_QWORD *)a1 = off_1E3594460;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E35944D0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::ConsoleBackendDispatcher::create(*(Inspector::ConsoleBackendDispatcher **)(a2 + 24), (Inspector::BackendDispatcher *)(a1 + 16), &v8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 1;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Console";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x700000002;
  *(_QWORD *)a1 = off_1E3594460;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E35944D0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::ConsoleBackendDispatcher::create(*(Inspector::ConsoleBackendDispatcher **)(a2 + 24), (Inspector::BackendDispatcher *)(a1 + 16), &v8);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 1;
  return a1;
}

void Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(Inspector::InspectorConsoleAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Inspector::ConsoleMessage **v46;
  uint64_t v47;
  Inspector::ConsoleMessage *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)this = off_1E3594460;
  *((_QWORD *)this + 2) = &unk_1E35944D0;
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    v24 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v24)
    {
      v25 = (WTF::StringImpl **)*((_QWORD *)this + 11);
      do
      {
        v26 = *v25;
        if (*v25 != (WTF::StringImpl *)-1)
        {
          *v25 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
        }
        v25 += 2;
        --v24;
      }
      while (v24);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 10);
  if (v10)
  {
    v35 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WTF::StringImpl **)*((_QWORD *)this + 10);
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
            {
              WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
            }
            else
            {
              *(_DWORD *)v37 -= 2;
            }
          }
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((unsigned int *)this + 17);
  if ((_DWORD)v11)
  {
    v46 = (Inspector::ConsoleMessage **)*((_QWORD *)this + 7);
    v47 = 8 * v11;
    do
    {
      v48 = *v46;
      *v46 = 0;
      if (v48)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v48, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
  v12 = *((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void Inspector::InspectorAgentBase::~InspectorAgentBase(Inspector::InspectorAgentBase *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(Inspector::InspectorConsoleAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((Inspector::InspectorConsoleAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorConsoleAgent::~InspectorConsoleAgent((Inspector::InspectorConsoleAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t Inspector::InspectorConsoleAgent::willDestroyFrontendAndBackend(uint64_t result)
{
  if (*(_BYTE *)(result + 96))
    *(_BYTE *)(result + 96) = 0;
  return result;
}

uint64_t Inspector::InspectorConsoleAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  if (*(_BYTE *)(this + 96))
    *(_BYTE *)(this + 96) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorConsoleAgent::discardValues(uint64_t this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_DWORD *)(this + 64))
  {
    v8 = (unint64_t *)(this + 56);
    if (*(_DWORD *)(this + 68))
    {
      v10 = (unint64_t *)(this + 56);
      v11 = this;
      WTF::Vector<std::unique_ptr<Inspector::ConsoleMessage>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(this + 56, a2, a3, a4, a5, a6, a7, a8);
      v8 = v10;
      this = v11;
    }
    v9 = *v8;
    if (v9)
    {
      *(_QWORD *)(this + 56) = 0;
      *(_DWORD *)(this + 64) = 0;
      v12 = this;
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
      this = v12;
    }
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void Inspector::InspectorConsoleAgent::enable(Inspector::InspectorConsoleAgent *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  size_t v14;
  unsigned int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  timespec __tp;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 96))
  {
LABEL_24:
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  v4 = 1;
  *((_BYTE *)this + 96) = 1;
  v5 = *((_DWORD *)this + 18);
  if (!v5)
  {
LABEL_21:
    v30 = *((unsigned int *)this + 17);
    if ((_DWORD)v30)
    {
      v31 = (unsigned __int8 **)*((_QWORD *)this + 7);
      v32 = 8 * v30;
      do
      {
        v33 = *v31++;
        Inspector::ConsoleMessage::addToFrontend(v33, *((uint64_t **)this + 4), *((_QWORD *)this + 3), 0);
        v32 -= 8;
      }
      while (v32);
    }
    goto LABEL_24;
  }
  if ((v5 & 0x80000000) != 0)
  {
    v44 = -v5;
    do
    {
      ++v4;
      v45 = v44 >= 0xA;
      v44 /= 0xAu;
    }
    while (v45);
  }
  else
  {
    v4 = 0;
    v6 = *((_DWORD *)this + 18);
    do
    {
      ++v4;
      v7 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v7);
  }
  if ((v4 & 0x80000000) == 0)
  {
    v8 = (v4 + 32);
    if (!__OFADD__(v4, 32))
    {
      WTF::tryFastCompactMalloc((WTF *)(v8 + 20), v48);
      v9 = v48[0];
      if (v48[0])
      {
        v10 = v48[0] + 20;
        *(_DWORD *)v48[0] = 2;
        *(_DWORD *)(v9 + 4) = v8;
        *(_QWORD *)(v9 + 8) = v9 + 20;
        *(_DWORD *)(v9 + 16) = 4;
        v11 = 0;
        if ((v5 & 0x80000000) != 0)
        {
          v42 = -v5;
          do
          {
            *((_BYTE *)&v48[1] + v11-- + 4) = (v42 % 0xA) | 0x30;
            v7 = v42 > 9;
            v42 /= 0xAu;
          }
          while (v7);
          v43 = v11 + 12;
          v13 = (char *)&v48[1] + v11 + 4;
          *v13 = 45;
          if (v11 + 14 <= 14)
          {
            if (v43 <= 12)
              v43 = 12;
            v14 = v43 - v11 - 11;
            goto LABEL_14;
          }
        }
        else
        {
          v12 = v5;
          do
          {
            *((_BYTE *)&v48[1] + v11-- + 4) = (v12 % 0xA) | 0x30;
            v7 = v12 > 9;
            v12 /= 0xAu;
          }
          while (v7);
          if (v11 + 14 <= 13)
          {
            v13 = (char *)&v48[1] + v11 + 5;
            v14 = -v11;
LABEL_14:
            memcpy((void *)(v9 + 20), v13, v14);
          }
        }
        if ((v5 & 0x80000000) != 0)
        {
          v46 = -v5;
          v15 = 1;
          do
          {
            ++v15;
            v45 = v46 >= 0xA;
            v46 /= 0xAu;
          }
          while (v45);
        }
        else
        {
          v15 = 0;
          do
          {
            ++v15;
            v7 = v5 > 9;
            v5 /= 0xAu;
          }
          while (v7);
        }
        qmemcpy((void *)(v10 + v15), " console messages are not shown.", 32);
        LOWORD(v48[0]) = 16;
        BYTE2(v48[0]) = 1;
        *(_DWORD *)v9 = 4;
        v48[1] = v9;
        v52 = 0;
        v51 = 0u;
        v50 = 0u;
        v49 = 0u;
        v53 = 1;
        v54 = 0;
        __tp.tv_sec = 0;
        __tp.tv_nsec = 0;
        clock_gettime(_CLOCK_REALTIME, &__tp);
        v55 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v16, v17, v18, v19, v20, v21, v22);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
        Inspector::ConsoleMessage::addToFrontend((unsigned __int8 *)v48, *((uint64_t **)this + 4), *((_QWORD *)this + 3), 0);
        Inspector::ConsoleMessage::~ConsoleMessage((Inspector::ConsoleMessage *)v48, v23, v24, v25, v26, v27, v28, v29);
        goto LABEL_21;
      }
    }
  }
  __break(0xC471u);
}

void `non-virtual thunk to'Inspector::InspectorConsoleAgent::enable(Inspector::InspectorConsoleAgent *this@<X0>, _BYTE *a2@<X8>)
{
  Inspector::InspectorConsoleAgent::enable((Inspector::InspectorConsoleAgent *)((char *)this - 16), a2);
}

uint64_t `non-virtual thunk to'Inspector::InspectorConsoleAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  if (*(_BYTE *)(this + 80))
    *(_BYTE *)(this + 80) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

void Inspector::InspectorConsoleAgent::clearMessages(Inspector::InspectorConsoleAgent *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x65, a2, a3, a4, a5, a6, a7);
  *a8 = 0;
  a8[8] = 0;
}

void Inspector::InspectorConsoleAgent::clearMessages(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Inspector::ConsoleMessage **v35;
  uint64_t v36;
  Inspector::ConsoleMessage *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v8 = (int)a2;
  if ((_DWORD)a2 != 84 || *(_BYTE *)(a1 + 98))
  {
    if (*(_DWORD *)(a1 + 64))
    {
      v34 = *(unsigned int *)(a1 + 68);
      if ((_DWORD)v34)
      {
        v35 = *(Inspector::ConsoleMessage ***)(a1 + 56);
        v36 = 8 * v34;
        do
        {
          v37 = *v35;
          *v35 = 0;
          if (v37)
          {
            Inspector::ConsoleMessage::~ConsoleMessage(v37, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          ++v35;
          v36 -= 8;
        }
        while (v36);
        *(_DWORD *)(a1 + 68) = 0;
      }
      v46 = *(_QWORD *)(a1 + 56);
      if (v46)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    *(_DWORD *)(a1 + 72) = 0;
    v10 = *(_QWORD *)(a1 + 24);
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x700000002;
    *(_QWORD *)(v11 + 8) = "console";
    *(_DWORD *)(v11 + 16) = 4;
    v47 = v11;
    v19 = *(_DWORD **)(v10 + 8);
    if (v19)
    {
      v20 = *(v19 - 1);
      v21 = &v19[12 * v20];
      if (*(v19 - 3))
      {
        v22 = v19;
        if ((_DWORD)v20)
        {
          v23 = 48 * v20;
          v22 = v19;
          while ((*v22 + 1) <= 1)
          {
            v22 += 12;
            v23 -= 48;
            if (!v23)
            {
              v22 = v21;
              break;
            }
          }
        }
LABEL_14:
        if (v19)
          v24 = &v19[12 * *(v19 - 1)];
        else
          v24 = 0;
        if (v24 == v22)
        {
          v47 = 0;
        }
        else
        {
          do
          {
            Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v22 + 2), (const WTF::String *)&v47);
            v25 = v22 + 12;
            v22 = v21;
            if (v25 != v21)
            {
              v22 = v25;
              while ((*v22 + 1) <= 1)
              {
                v22 += 12;
                if (v22 == v21)
                {
                  v22 = v21;
                  break;
                }
              }
            }
          }
          while (v22 != v24);
          v11 = v47;
          v47 = 0;
          if (!v11)
            goto LABEL_29;
        }
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
LABEL_29:
        if (*(_BYTE *)(a1 + 96))
          Inspector::ConsoleFrontendDispatcher::messagesCleared(*(uint64_t **)(a1 + 32), v8);
        return;
      }
      v22 = &v19[12 * v20];
    }
    else
    {
      v22 = 0;
      LODWORD(v20) = 0;
    }
    v21 = &v19[12 * v20];
    goto LABEL_14;
  }
}

void `non-virtual thunk to'Inspector::InspectorConsoleAgent::clearMessages(Inspector::InspectorConsoleAgent *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this - 16, (WTF::AtomStringImpl *)0x65, a2, a3, a4, a5, a6, a7);
  *a8 = 0;
  a8[8] = 0;
}

uint64_t Inspector::InspectorConsoleAgent::setConsoleClearAPIEnabled@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 98) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorConsoleAgent::setConsoleClearAPIEnabled@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 82) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t Inspector::InspectorConsoleAgent::developerExtrasEnabled(Inspector::InspectorConsoleAgent *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 24) + 16))(*(_QWORD *)(*((_QWORD *)this + 3) + 24));
}

void Inspector::InspectorConsoleAgent::mainFrameNavigated(Inspector::InspectorConsoleAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x66, a3, a4, a5, a6, a7, a8);
  v16 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  if (v16)
  {
    *((_QWORD *)this + 11) = 0;
    v17 = *((unsigned int *)v16 - 1);
    if ((_DWORD)v17)
    {
      v18 = v16;
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((unint64_t)(v16 - 2), v9, v10, v11, v12, v13, v14, v15);
  }
  v28 = (WTF::StringImpl **)*((_QWORD *)this + 10);
  if (v28)
  {
    *((_QWORD *)this + 10) = 0;
    v29 = *((unsigned int *)v28 - 1);
    if ((_DWORD)v29)
    {
      v30 = v28;
      do
      {
        v31 = *v30;
        if (*v30 != (WTF::StringImpl *)-1)
        {
          *v30 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
        v30 += 2;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((unint64_t)(v28 - 2), v9, v10, v11, v12, v13, v14, v15);
  }
}

void Inspector::InspectorConsoleAgent::addMessageToConsole(uint64_t a1, Inspector::ConsoleMessage **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  Inspector::ConsoleMessage *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Inspector::ConsoleMessage *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Inspector::ConsoleMessage *v28;

  v11 = *a2;
  if (*((_BYTE *)*a2 + 1) == 8)
  {
    Inspector::InspectorConsoleAgent::clearMessages(a1, (WTF::AtomStringImpl *)0x54, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *a2;
  }
  *a2 = 0;
  v28 = v11;
  Inspector::InspectorConsoleAgent::addConsoleMessage(a1, (WTF::AtomStringImpl *)&v28, a3, a4, a5, a6, a7, a8, a9);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v19, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

void Inspector::InspectorConsoleAgent::addConsoleMessage(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  char *v9;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned int v21;
  Inspector::ConsoleMessage **v22;
  Inspector::ConsoleMessage *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Inspector::ConsoleMessage *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Inspector::ConsoleMessage *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Inspector::ConsoleMessage *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Inspector::ConsoleMessage *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Inspector::ConsoleMessage *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Inspector::ConsoleMessage *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Inspector::ConsoleMessage *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Inspector::ConsoleMessage *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Inspector::ConsoleMessage *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  timespec v113;

  v9 = (char *)a2;
  v11 = (char **)(a1 + 56);
  v12 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v12
    && (v13 = (uint64_t)&(*v11)[8 * v12], (v14 = *(_QWORD *)(v13 - 8)) != 0)
    && Inspector::ConsoleMessage::isEqual(*(Inspector::ConsoleMessage **)(v13 - 8), *(Inspector::ConsoleMessage **)a2, a3, a4, a5, a6, a7, a8, a9))
  {
    ++*(_DWORD *)(v14 + 72);
    if (*(_BYTE *)(a1 + 96))
    {
      v15 = *(uint64_t **)(a1 + 32);
      v113.tv_sec = 0;
      v113.tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &v113);
      v16 = *(_DWORD *)(v14 + 72);
      *(double *)&v113.tv_sec = (double)v113.tv_nsec / 1000000000.0 + (double)v113.tv_sec;
      LOBYTE(v113.tv_nsec) = 1;
      Inspector::ConsoleFrontendDispatcher::messageRepeatCountUpdated(v15, v16, &v113.tv_sec);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v17 = *(_BYTE *)(a1 + 97);
      *(_BYTE *)(a1 + 97) = 1;
      Inspector::ConsoleMessage::addToFrontend(*(unsigned __int8 **)v9, *(uint64_t **)(a1 + 32), *(_QWORD *)(a1 + 24), v17 == 0);
      *(_BYTE *)(a1 + 97) = v17;
    }
    v18 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 64))
    {
      v9 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v18 + 1, (unint64_t)v9);
      v18 = *(unsigned int *)(a1 + 68);
      v19 = (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8 * v18);
    }
    else
    {
      v19 = (unsigned __int8 **)&(*v11)[8 * v18];
    }
    v20 = *(unsigned __int8 **)v9;
    *(_QWORD *)v9 = 0;
    *v19 = v20;
    v21 = v18 + 1;
    *(_DWORD *)(a1 + 68) = v21;
    if (v21 >= 0x64)
    {
      *(_DWORD *)(a1 + 72) += 10;
      v22 = *(Inspector::ConsoleMessage ***)(a1 + 56);
      v23 = *v22;
      *v22 = 0;
      if (v23)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      v32 = v22[1];
      v22[1] = 0;
      if (v32)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      v41 = v22[2];
      v22[2] = 0;
      if (v41)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      v50 = v22[3];
      v22[3] = 0;
      if (v50)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v50, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      v59 = v22[4];
      v22[4] = 0;
      if (v59)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v59, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      v68 = v22[5];
      v22[5] = 0;
      if (v68)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v68, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      v77 = v22[6];
      v22[6] = 0;
      if (v77)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v77, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      v86 = v22[7];
      v22[7] = 0;
      if (v86)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v86, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      v95 = v22[8];
      v22[8] = 0;
      if (v95)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v95, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      v104 = v22[9];
      v22[9] = 0;
      if (v104)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v104, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      }
      memmove(v22, v22 + 10, *(_QWORD *)(a1 + 56) + 8 * *(unsigned int *)(a1 + 68) - (_QWORD)(v22 + 10));
      *(_DWORD *)(a1 + 68) -= 10;
    }
  }
}

void Inspector::InspectorConsoleAgent::startTiming(Inspector::InspectorConsoleAgent *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  WTF **v18;
  int v19;
  double v20;
  unsigned int v21;
  WTF **v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  WTF::StringImpl *v42;
  Inspector::ConsoleMessage *v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Inspector::ConsoleMessage *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Inspector::ScriptCallStack *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Inspector::ScriptCallStack *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  Inspector::ConsoleMessage *v93;

  if (!*a3)
    return;
  v6 = (uint64_t *)((char *)this + 88);
  v8 = mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v93 = (Inspector::ConsoleMessage *)&v90;
    v92 = (WTF::StringImpl *)&v93;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v92, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v11 = v8 * WTF::machTimebaseInfo(void)::timebaseInfo;
  LODWORD(v9) = dword_1ECF4400C;
  v12 = (double)v9;
  v13 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::MonotonicTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, 8u), (v13 = *v6) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = v12 * 1000000000.0;
  v16 = *((_DWORD *)*a3 + 4);
  if (v16 < 0x100)
    v17 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v17 = v16 >> 8;
  v18 = 0;
  v19 = 1;
  v20 = (double)v11 / v15;
  while (1)
  {
    v21 = v17 & v14;
    v22 = (WTF **)(v13 + 16 * (v17 & v14));
    v23 = *v22;
    if (*v22 != (WTF *)-1)
      break;
    v18 = (WTF **)(v13 + 16 * v21);
LABEL_15:
    v17 = v19 + v21;
    ++v19;
  }
  if (!v23)
  {
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v22 = v18;
    }
    v24 = *a3;
    if (*a3)
      *(_DWORD *)v24 += 2;
    *v22 = v24;
    *((double *)v22 + 1) = v20;
    v25 = *v6;
    if (*v6)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v69 = *v6;
    if (*v6)
      v70 = *(_DWORD *)(v69 - 12);
    else
      v70 = 0;
    v71 = (*(_DWORD *)(v69 - 16) + v70);
    v72 = *(unsigned int *)(v69 - 4);
    if (v72 > 0x400)
    {
      if (v72 > 2 * v71)
        return;
    }
    else
    {
      if (3 * v72 > 4 * v71)
        return;
      if (!(_DWORD)v72)
      {
        v73 = 8;
        goto LABEL_59;
      }
    }
    v73 = (_DWORD)v72 << (6 * *(_DWORD *)(v69 - 12) >= (2 * v72));
LABEL_59:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::MonotonicTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, v73);
    return;
  }
  if (!WTF::equal(v23, *a3, v7))
    goto LABEL_15;
  v27 = *a3;
  if (!*a3)
  {
    v29 = 0;
    v28 = 0;
    v91 = 0;
    goto LABEL_30;
  }
  v28 = *((_DWORD *)v27 + 1);
  if (v28 >= 0x2711)
  {
    if ((*((_DWORD *)v27 + 4) & 4) != 0)
      v30 = 0x100002710;
    else
      v30 = 10000;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v27 + 4) & 4u) >> 2, *((_BYTE **)v27 + 1), v30, (int8x16_t *)"...", 3u, (int **)&v91);
    v29 = v91;
    if (!v91)
      goto LABEL_69;
    v28 = *((_DWORD *)v91 + 1);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_66:
    v92 = 0;
    goto LABEL_69;
  }
  *(_DWORD *)v27 += 2;
  v91 = v27;
  v29 = v27;
LABEL_30:
  v31 = __OFADD__(v28, 16);
  v32 = v28 + 16;
  if (v31 || __OFADD__(v32, 7))
    goto LABEL_66;
  v33 = !v27 || (*((_BYTE *)v29 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v32 + 7, v33, (int8x16_t *)"Timer \"", 7u, (uint64_t)v29, (int8x16_t *)"\" already exists", 0x10u, (int **)&v92);
  if (!v92)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x1986AE860);
  }
  v42 = v91;
  v91 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  Inspector::createScriptCallStackForConsole(a2, (JSC::JSGlobalObject *)1, v35, v36, v37, v38, v39, v40, (uint64_t *)&v90, v41);
  v43 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v43, 3, 10, 1, (_DWORD **)&v92, (uint64_t *)&v90, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x54, (uint64_t)v44, v45, v46, v47, v48, v49);
  v93 = v43;
  Inspector::InspectorConsoleAgent::addConsoleMessage((uint64_t)this, (WTF::AtomStringImpl *)&v93, v44, v45, v46, v47, v48, v49, v50);
  v58 = v93;
  v93 = 0;
  if (v58)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v58, v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  v67 = v90;
  v90 = 0;
  if (v67)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v67);
  v68 = v92;
  v92 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
}

void Inspector::InspectorConsoleAgent::logTiming(uint64_t a1, JSC::VM **this, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  const WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  _BOOL4 v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  Inspector::ConsoleMessage *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Inspector::ConsoleMessage *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Inspector::ConsoleMessage **v79;
  WTF::StringImpl *v80;
  Inspector::ConsoleMessage *v81;
  const WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t v88;
  Inspector::ConsoleMessage *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Inspector::ScriptCallStack *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  Inspector::ScriptCallStack *v125;
  char v126;
  Inspector::ConsoleMessage **v127;
  Inspector::ConsoleMessage *v128;
  int v129;
  int v130;
  unsigned int __s[31];
  int v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  if (!*a3)
    return;
  Inspector::createScriptCallStackForConsole(this, (JSC::JSGlobalObject *)1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t *)&v125, a9);
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = *((_DWORD *)*a3 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v17 = v16 >> 8;
    for (i = 0; ; v17 = i + v19)
    {
      v19 = v17 & v15;
      v20 = *(WTF **)(v14 + 16 * v19);
      if (v20 != (WTF *)-1)
      {
        if (!v20)
        {
          v21 = *(_QWORD *)(a1 + 88);
          if (v21)
          {
            v22 = *(unsigned int *)(v21 - 4);
            v23 = v21 + 16 * v22;
            goto LABEL_14;
          }
          goto LABEL_21;
        }
        if (WTF::equal(v20, *a3, v13))
          break;
      }
      ++i;
    }
    v23 = v14 + 16 * v19;
    v21 = *(_QWORD *)(a1 + 88);
    if (!v21)
      goto LABEL_15;
    v22 = *(unsigned int *)(v21 - 4);
LABEL_14:
    if (v23 != v21 + 16 * v22)
    {
LABEL_15:
      v24 = *(double *)(v23 + 8);
      v25 = mach_absolute_time();
      v26 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v26 != -1)
      {
        v128 = (Inspector::ConsoleMessage *)&v126;
        v127 = &v128;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v127, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      v27 = WTF::machTimebaseInfo(void)::timebaseInfo;
      LODWORD(v9) = dword_1ECF4400C;
      v28 = *a3;
      if (!*a3)
      {
LABEL_20:
        v123 = v28;
        goto LABEL_49;
      }
      if (*((_DWORD *)v28 + 1) <= 0x2710u)
      {
        *(_DWORD *)v28 += 2;
        goto LABEL_20;
      }
      v69 = (_BYTE *)*((_QWORD *)v28 + 1);
      v70 = *((_DWORD *)v28 + 4) & 4;
      if (v70)
        v71 = 0x100002710;
      else
        v71 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, v70 >> 2, v69, v71, (int8x16_t *)"...", 3u, (int **)&v123);
      if (v123)
      {
LABEL_49:
        v128 = (Inspector::ConsoleMessage *)__s;
        v129 = 124;
        v130 = 0;
        WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, 3, (uint64_t)&v128, ((double)(v25 * v27) / ((double)v9 * 1000000000.0) - v24) * 1000.0);
        *((_BYTE *)v128 + v130) = 0;
        v132 = strlen((const char *)__s);
        WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::FormattedNumber,WTF::ASCIILiteral>(&v127, (uint64_t)v123, (int8x16_t *)": ", 3, __s, (int8x16_t *)"ms", 3);
        v79 = v127;
        if (!v127)
        {
          __break(0xC471u);
          JUMPOUT(0x1986AED50);
        }
        v80 = v123;
        v123 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
          {
            WTF::StringImpl::~StringImpl(v80, v72, v73, v74, v75, v76, v77, v78);
            WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
          }
          else
          {
            *(_DWORD *)v80 -= 2;
          }
        }
        v81 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
        if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v81, 3, 10, 3, (_DWORD **)&v127, a4, (uint64_t *)&v125, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages(a1, (WTF::AtomStringImpl *)0x54, (uint64_t)v82, v83, v84, v85, v86, v87);
        v128 = v81;
        Inspector::InspectorConsoleAgent::addConsoleMessage(a1, (WTF::AtomStringImpl *)&v128, v82, v83, v84, v85, v86, v87, v88);
        v89 = v128;
        v128 = 0;
        if (v89)
        {
          Inspector::ConsoleMessage::~ConsoleMessage(v89, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        if (*(_DWORD *)v79 != 2)
        {
          *(_DWORD *)v79 -= 2;
          goto LABEL_63;
        }
        v68 = (WTF::StringImpl *)v79;
LABEL_62:
        WTF::StringImpl::~StringImpl(v68, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        goto LABEL_63;
      }
      __break(0xC471u);
LABEL_74:
      JUMPOUT(0x1986AED40);
    }
  }
LABEL_21:
  v29 = *a3;
  if (*a3)
  {
    v30 = *((_DWORD *)v29 + 1);
    if (v30 >= 0x2711)
    {
      if ((*((_DWORD *)v29 + 4) & 4) != 0)
        v32 = 0x100002710;
      else
        v32 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v29 + 4) & 4u) >> 2, *((_BYTE **)v29 + 1), v32, (int8x16_t *)"...", 3u, (int **)&v124);
      v31 = v124;
      if (!v124)
      {
        __break(0xC471u);
        JUMPOUT(0x1986AED58);
      }
      v30 = *((_DWORD *)v124 + 1);
      if ((v30 & 0x80000000) != 0)
        goto LABEL_68;
    }
    else
    {
      *(_DWORD *)v29 += 2;
      v124 = v29;
      v31 = v29;
    }
  }
  else
  {
    v31 = 0;
    v30 = 0;
    v124 = 0;
  }
  v33 = __OFADD__(v30, 16);
  v34 = v30 + 16;
  if (v33 || __OFADD__(v34, 7))
  {
LABEL_68:
    v127 = 0;
LABEL_69:
    __break(0xC471u);
    goto LABEL_74;
  }
  v35 = !v29 || (*((_BYTE *)v31 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v34 + 7, v35, (int8x16_t *)"Timer \"", 7u, (uint64_t)v31, (int8x16_t *)"\" does not exist", 0x10u, (int **)&v127);
  if (!v127)
    goto LABEL_69;
  v43 = v124;
  v124 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v44, 3, 10, 1, (_DWORD **)&v127, (uint64_t *)&v125, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages(a1, (WTF::AtomStringImpl *)0x54, (uint64_t)v45, v46, v47, v48, v49, v50);
  v128 = v44;
  Inspector::InspectorConsoleAgent::addConsoleMessage(a1, (WTF::AtomStringImpl *)&v128, v45, v46, v47, v48, v49, v50, v51);
  v59 = v128;
  v128 = 0;
  if (v59)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  v68 = (WTF::StringImpl *)v127;
  v127 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      goto LABEL_62;
    *(_DWORD *)v68 -= 2;
  }
LABEL_63:
  v114 = v125;
  v125 = 0;
  if (v114)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v114);
}

void Inspector::InspectorConsoleAgent::stopTiming(Inspector::InspectorConsoleAgent *this, JSC::VM **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  const WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  _BOOL4 v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  Inspector::ConsoleMessage *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Inspector::ConsoleMessage *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  Inspector::ConsoleMessage *v80;
  const WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x16_t v87;
  Inspector::ConsoleMessage *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  Inspector::ScriptCallStack *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  Inspector::ScriptCallStack *v139;
  char v140;
  WTF::StringImpl *v141;
  Inspector::ConsoleMessage *v142;
  int v143;
  int v144;
  unsigned int __s[31];
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (!*a3)
    return;
  Inspector::createScriptCallStackForConsole(a2, (JSC::JSGlobalObject *)1, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t *)&v139, a9);
  v13 = (uint64_t *)((char *)this + 88);
  v14 = *((_QWORD *)this + 11);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = *((_DWORD *)*a3 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v17 = v16 >> 8;
    for (i = 0; ; v17 = i + v19)
    {
      v19 = v17 & v15;
      v20 = *(WTF **)(v14 + 16 * v19);
      if (v20 != (WTF *)-1)
      {
        if (!v20)
        {
          v21 = *v13;
          if (*v13)
          {
            v22 = *(unsigned int *)(v21 - 4);
            v23 = v21 + 16 * v22;
            goto LABEL_14;
          }
          goto LABEL_21;
        }
        if (WTF::equal(v20, *a3, v12))
          break;
      }
      ++i;
    }
    v23 = v14 + 16 * v19;
    v21 = *v13;
    if (!*v13)
      goto LABEL_15;
    v22 = *(unsigned int *)(v21 - 4);
LABEL_14:
    if (v23 != v21 + 16 * v22)
    {
LABEL_15:
      v24 = *(double *)(v23 + 8);
      v25 = mach_absolute_time();
      v26 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v26 != -1)
      {
        v142 = (Inspector::ConsoleMessage *)&v140;
        v141 = (WTF::StringImpl *)&v142;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v141, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      v27 = WTF::machTimebaseInfo(void)::timebaseInfo;
      LODWORD(v9) = dword_1ECF4400C;
      v28 = *a3;
      if (!*a3)
      {
LABEL_20:
        v137 = v28;
        goto LABEL_48;
      }
      if (*((_DWORD *)v28 + 1) <= 0x2710u)
      {
        *(_DWORD *)v28 += 2;
        goto LABEL_20;
      }
      v69 = (_BYTE *)*((_QWORD *)v28 + 1);
      v70 = *((_DWORD *)v28 + 4) & 4;
      if (v70)
        v71 = 0x100002710;
      else
        v71 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, v70 >> 2, v69, v71, (int8x16_t *)"...", 3u, (int **)&v137);
      if (v137)
      {
LABEL_48:
        v142 = (Inspector::ConsoleMessage *)__s;
        v143 = 124;
        v144 = 0;
        WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, 3, (uint64_t)&v142, ((double)(v25 * v27) / ((double)v9 * 1000000000.0) - v24) * 1000.0);
        *((_BYTE *)v142 + v144) = 0;
        v146 = strlen((const char *)__s);
        WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::FormattedNumber,WTF::ASCIILiteral>(&v141, (uint64_t)v137, (int8x16_t *)": ", 3, __s, (int8x16_t *)"ms", 3);
        if (!v141)
        {
          __break(0xC471u);
          JUMPOUT(0x1986AF2E0);
        }
        v79 = v137;
        v137 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
            WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
          }
          else
          {
            *(_DWORD *)v79 -= 2;
          }
        }
        v80 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
        if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v80, 3, 10, 3, (_DWORD **)&v141, (uint64_t *)&v139, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x54, (uint64_t)v81, v82, v83, v84, v85, v86);
        v142 = v80;
        Inspector::InspectorConsoleAgent::addConsoleMessage((uint64_t)this, (WTF::AtomStringImpl *)&v142, v81, v82, v83, v84, v85, v86, v87);
        v88 = v142;
        v142 = 0;
        if (v88)
        {
          Inspector::ConsoleMessage::~ConsoleMessage(v88, v52, v53, v54, v55, v56, v57, v58);
          WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
        }
        v97 = *v13;
        if (!*v13 || (v97 += 16 * *(unsigned int *)(v97 - 4), v97 != v23))
        {
          if (v97 != v23)
          {
            v98 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = -1;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
              {
                WTF::StringImpl::~StringImpl(v98, v52, v53, v54, v55, v56, v57, v58);
                WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
              }
              else
              {
                *(_DWORD *)v98 -= 2;
              }
            }
            ++*(_DWORD *)(*v13 - 16);
            v99 = *v13;
            if (*v13)
              v100 = *(_DWORD *)(v99 - 12) - 1;
            else
              v100 = -1;
            *(_DWORD *)(v99 - 12) = v100;
            v109 = *v13;
            if (*v13)
            {
              v110 = 6 * *(_DWORD *)(v109 - 12);
              v111 = *(_DWORD *)(v109 - 4);
              if (v110 < v111 && v111 >= 9)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::MonotonicTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 11, v111 >> 1);
            }
          }
        }
        v68 = v141;
        if (v141)
          goto LABEL_72;
        goto LABEL_74;
      }
      __break(0xC471u);
LABEL_87:
      JUMPOUT(0x1986AF2D0);
    }
  }
LABEL_21:
  v29 = *a3;
  if (*a3)
  {
    v30 = *((_DWORD *)v29 + 1);
    if (v30 >= 0x2711)
    {
      if ((*((_DWORD *)v29 + 4) & 4) != 0)
        v32 = 0x100002710;
      else
        v32 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v29 + 4) & 4u) >> 2, *((_BYTE **)v29 + 1), v32, (int8x16_t *)"...", 3u, (int **)&v138);
      v31 = v138;
      if (!v138)
      {
        __break(0xC471u);
        JUMPOUT(0x1986AF2E8);
      }
      v30 = *((_DWORD *)v138 + 1);
      if ((v30 & 0x80000000) != 0)
        goto LABEL_81;
    }
    else
    {
      *(_DWORD *)v29 += 2;
      v138 = v29;
      v31 = v29;
    }
  }
  else
  {
    v31 = 0;
    v30 = 0;
    v138 = 0;
  }
  v33 = __OFADD__(v30, 16);
  v34 = v30 + 16;
  if (v33 || __OFADD__(v34, 7))
  {
LABEL_81:
    v141 = 0;
LABEL_82:
    __break(0xC471u);
    goto LABEL_87;
  }
  v35 = !v29 || (*((_BYTE *)v31 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v34 + 7, v35, (int8x16_t *)"Timer \"", 7u, (uint64_t)v31, (int8x16_t *)"\" does not exist", 0x10u, (int **)&v141);
  if (!v141)
    goto LABEL_82;
  v43 = v138;
  v138 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v44, 3, 10, 1, (_DWORD **)&v141, (uint64_t *)&v139, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x54, (uint64_t)v45, v46, v47, v48, v49, v50);
  v142 = v44;
  Inspector::InspectorConsoleAgent::addConsoleMessage((uint64_t)this, (WTF::AtomStringImpl *)&v142, v45, v46, v47, v48, v49, v50, v51);
  v59 = v142;
  v142 = 0;
  if (v59)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  v68 = v141;
  v141 = 0;
  if (v68)
  {
LABEL_72:
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
LABEL_74:
  v112 = v139;
  v139 = 0;
  if (v112)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v112);
}

void Inspector::InspectorConsoleAgent::takeHeapSnapshot(Inspector::InspectorConsoleAgent *this, const WTF::String *a2)
{
  Inspector::InspectorHeapAgent *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  WTF::StringImpl *v24;
  double v25;
  WTF::StringImpl *v26;
  unsigned int v27;

  v3 = (Inspector::InspectorHeapAgent *)*((_QWORD *)this + 6);
  if (v3)
  {
    Inspector::InspectorHeapAgent::snapshot(v3, (uint64_t)&v25);
    v5 = v27;
    if (v27 != -1)
    {
      if (!v27)
      {
        v6 = v26;
        v26 = 0;
        v23 = v25;
        v24 = v6;
        Inspector::ConsoleFrontendDispatcher::heapSnapshot(*((Inspector::ConsoleFrontendDispatcher **)this + 4), v25, (const WTF::String *)&v24, a2);
        v14 = v24;
        v24 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, v7, v8, v9, v10, v11, v12, v13);
            WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      ((void (*)(double *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJdN3WTF6StringEEEES8_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v23, &v25);
    }
  }
}

void Inspector::InspectorHeapAgent::snapshot(Inspector::InspectorHeapAgent *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  _QWORD *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  double v35;
  WTF::StringImpl *v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD v54[2];
  char v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  unsigned int *v62;
  char v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v62, (JSC::VM *)v4, v5, v6, v7, v8, v9, v10, v11);
  v18 = v4 + 11669;
  v19 = v4[11669];
  if ((v19 & 1) != 0)
    v19 = (*(uint64_t (**)(_QWORD *))(v19 & 0xFFFFFFFFFFFFFFFCLL))(v4);
  v54[0] = off_1E3590B60;
  v54[1] = v19;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0;
  JSC::HeapSnapshotBuilder::buildSnapshot((JSC::HeapSnapshotBuilder *)v54, v18, v12, v13, v14, v15, v16, v17);
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
  v21 = mach_absolute_time();
  v23 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v23 != -1)
  {
    v65 = (WTF::StringImpl *)&v63;
    v64 = &v65;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v22) = dword_1ECF4400C;
  v24 = *(double *)(v20 + 8);
  v25 = (double)(v21 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v22 * 1000000000.0)
      - *(double *)(v20 + 16);
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E35952E0;
  v26[1] = this;
  v53 = v26;
  JSC::HeapSnapshotBuilder::json((uint64_t)v54, &v53, &v65);
  v34 = v53;
  v53 = 0;
  if (v34)
    (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  v35 = v24 + v25;
  v36 = v65;
  if (v65)
  {
    v37 = *(_DWORD *)v65;
    *(_DWORD *)v65 += 2;
    *(double *)a2 = v35;
    *(_QWORD *)(a2 + 8) = v36;
    *(_DWORD *)(a2 + 16) = 0;
    v65 = 0;
    if (v37)
    {
      *(_DWORD *)v36 = v37;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v36, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  else
  {
    *(double *)a2 = v35;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  JSC::HeapSnapshotBuilder::~HeapSnapshotBuilder((JSC::HeapSnapshotBuilder *)v54, v27, v28, v29, v30, v31, v32, v33);
  JSC::JSLockHolder::~JSLockHolder(&v62, v38, v39, v40, v41, v42, v43, v44);
}

void Inspector::InspectorConsoleAgent::count(Inspector::InspectorConsoleAgent *this, JSC::VM **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  char v38;
  _BOOL4 v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  WTF::StringImpl *v48;
  Inspector::ConsoleMessage *v49;
  const WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Inspector::ConsoleMessage *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Inspector::ScriptCallStack *v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Inspector::ScriptCallStack *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  Inspector::ConsoleMessage *v94;

  v11 = (uint64_t *)((char *)this + 80);
  v12 = *((_QWORD *)this + 10);
  if (v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 10, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = v12 + 16 * v18;
    v20 = *(WTF **)v19;
    if (*(_QWORD *)v19 == -1)
    {
      v16 = (_QWORD *)(v12 + 16 * v18);
      goto LABEL_12;
    }
    if (!v20)
      break;
    if (WTF::equal(v20, *a3, (const WTF::StringImpl *)a3))
    {
      ++*(_DWORD *)(v12 + 16 * v18 + 8);
      goto LABEL_30;
    }
LABEL_12:
    v15 = i + v18;
  }
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    v19 = (uint64_t)v16;
  }
  v21 = *a3;
  if (*a3)
    *(_DWORD *)v21 += 2;
  *(_QWORD *)v19 = v21;
  v22 = 1;
  *(_DWORD *)(v19 + 8) = 1;
  v23 = *v11;
  if (*v11)
    v22 = *(_DWORD *)(v23 - 12) + 1;
  *(_DWORD *)(v23 - 12) = v22;
  v24 = *v11;
  if (*v11)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_25:
      v28 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
      goto LABEL_29;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    if ((_DWORD)v27)
      goto LABEL_25;
    v28 = 8;
LABEL_29:
    v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11, v28, v19, a4, a5, a6, a7, a8);
  }
LABEL_30:
  v29 = *a3;
  if (v29)
  {
    v30 = *((_DWORD *)v29 + 1);
    if (v30 < 0x2711)
    {
      *(_DWORD *)v29 += 2;
      v92 = v29;
      v31 = v29;
      goto LABEL_38;
    }
    if ((*((_DWORD *)v29 + 4) & 4) != 0)
      v32 = 0x100002710;
    else
      v32 = 10000;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v29 + 4) & 4u) >> 2, *((_BYTE **)v29 + 1), v32, (int8x16_t *)"...", 3u, (int **)&v92);
    v31 = v92;
    if (v92)
    {
      v30 = *((_DWORD *)v92 + 1);
      goto LABEL_38;
    }
    goto LABEL_71;
  }
  v31 = 0;
  v30 = 0;
  v92 = 0;
LABEL_38:
  v33 = 0;
  v34 = *(_DWORD *)(v19 + 8);
  do
  {
    ++v33;
    v35 = v34 > 9;
    v34 /= 0xAu;
  }
  while (v35);
  if (v33 < 0
    || ((v36 = __OFADD__(v33, 2), v37 = v33 + 2, !v36) ? (v38 = 0) : (v38 = 1),
        (v30 & 0x80000000) != 0 || (v38 & 1) != 0 || __OFADD__(v30, v37)))
  {
    v93 = 0;
    goto LABEL_71;
  }
  v39 = !v29 || (*((_BYTE *)v31 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v30 + v37, v39, (uint64_t)v31, ": ", 2u, *(_DWORD *)(v19 + 8), (int **)&v93);
  if (!v93)
  {
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x1986AF94CLL);
  }
  v48 = v92;
  v92 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  Inspector::createScriptCallStackForConsole(a2, (JSC::JSGlobalObject *)1, v41, v42, v43, v44, v45, v46, (uint64_t *)&v91, v47);
  v49 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v49, 3, 0, 3, (_DWORD **)&v93, (uint64_t *)&v91, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x54, (uint64_t)v50, v51, v52, v53, v54, v55);
  v94 = v49;
  Inspector::InspectorConsoleAgent::addConsoleMessage((uint64_t)this, (WTF::AtomStringImpl *)&v94, v50, v51, v52, v53, v54, v55, v56);
  v64 = v94;
  v94 = 0;
  if (v64)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v64, v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
  }
  v73 = v91;
  v91 = 0;
  if (v73)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v73);
  v74 = v93;
  v93 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
}

void Inspector::InspectorConsoleAgent::countReset(Inspector::InspectorConsoleAgent *this, JSC::VM **a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  _BOOL4 v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  WTF::StringImpl *v31;
  Inspector::ConsoleMessage *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Inspector::ConsoleMessage *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Inspector::ScriptCallStack *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Inspector::ScriptCallStack *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  Inspector::ConsoleMessage *v77;

  v6 = *((_QWORD *)this + 10);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = *((_DWORD *)*a3 + 4);
    if (v8 < 0x100)
      v9 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v9 = v8 >> 8;
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      v12 = *(WTF **)(v6 + 16 * v11);
      if (v12 != (WTF *)-1)
      {
        if (!v12)
        {
          v13 = *((_QWORD *)this + 10);
          if (v13)
          {
            v14 = *(unsigned int *)(v13 - 4);
            v15 = v13 + 16 * v14;
            goto LABEL_13;
          }
          goto LABEL_15;
        }
        if (WTF::equal(v12, *a3, (const WTF::StringImpl *)a3))
          break;
      }
      ++i;
    }
    v15 = v6 + 16 * v11;
    v13 = *((_QWORD *)this + 10);
    if (!v13)
      goto LABEL_14;
    v14 = *(unsigned int *)(v13 - 4);
LABEL_13:
    if (v15 != v13 + 16 * v14)
    {
LABEL_14:
      *(_DWORD *)(v15 + 8) = 0;
      return;
    }
  }
LABEL_15:
  v16 = *a3;
  if (v16)
  {
    v17 = *((_DWORD *)v16 + 1);
    if (v17 >= 0x2711)
    {
      if ((*((_DWORD *)v16 + 4) & 4) != 0)
        v19 = 0x100002710;
      else
        v19 = 10000;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(10003, (*((_DWORD *)v16 + 4) & 4u) >> 2, *((_BYTE **)v16 + 1), v19, (int8x16_t *)"...", 3u, (int **)&v75);
      v18 = v75;
      if (!v75)
        goto LABEL_49;
      v17 = *((_DWORD *)v75 + 1);
      if ((v17 & 0x80000000) != 0)
      {
LABEL_46:
        v76 = 0;
        goto LABEL_49;
      }
    }
    else
    {
      *(_DWORD *)v16 += 2;
      v75 = v16;
      v18 = v16;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v75 = 0;
  }
  v20 = __OFADD__(v17, 16);
  v21 = v17 + 16;
  if (v20 || __OFADD__(v21, 9))
    goto LABEL_46;
  v22 = !v16 || (*((_BYTE *)v18 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v21 + 9, v22, (int8x16_t *)"Counter \"", 9u, (uint64_t)v18, (int8x16_t *)"\" does not exist", 0x10u, (int **)&v76);
  if (!v76)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x1986AFBE4);
  }
  v31 = v75;
  v75 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  Inspector::createScriptCallStackForConsole(a2, (JSC::JSGlobalObject *)1, v24, v25, v26, v27, v28, v29, (uint64_t *)&v74, v30);
  v32 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v32, 3, 0, 1, (_DWORD **)&v76, (uint64_t *)&v74, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages((uint64_t)this, (WTF::AtomStringImpl *)0x54, (uint64_t)v33, v34, v35, v36, v37, v38);
  v77 = v32;
  Inspector::InspectorConsoleAgent::addConsoleMessage((uint64_t)this, (WTF::AtomStringImpl *)&v77, v33, v34, v35, v36, v37, v38, v39);
  v47 = v77;
  v77 = 0;
  if (v47)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  v56 = v74;
  v74 = 0;
  if (v56)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v56);
  v57 = v76;
  v76 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
}

double Inspector::InspectorConsoleAgent::getLoggingChannels@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)&result = 0x600000001;
  *v3 = 0x600000001;
  v3[2] = 0;
  v3[3] = 0;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorConsoleAgent::getLoggingChannels@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v3;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)&result = 0x600000001;
  *v3 = 0x600000001;
  v3[2] = 0;
  v3[3] = 0;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

double Inspector::InspectorConsoleAgent::setLoggingChannelLevel@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)&result = 0xD00000002;
  *(_QWORD *)v2 = 0xD00000002;
  *(_QWORD *)(v2 + 8) = "Not supported";
  *(_DWORD *)(v2 + 16) = 4;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorConsoleAgent::setLoggingChannelLevel@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)&result = 0xD00000002;
  *(_QWORD *)v2 = 0xD00000002;
  *(_QWORD *)(v2 + 8) = "Not supported";
  *(_DWORD *)(v2 + 16) = 4;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::fromPayload@<X0>(WTF::StringImpl **a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, WTF::JSONImpl::ObjectBase **a5@<X4>, _BYTE *a6@<X8>)
{
  _QWORD *v9;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E35951C8;
  v9[1] = &v14;
  v9[2] = &v13;
  v9[3] = &v12;
  v11 = v9;
  Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(a6, a1, a5, &v11);
  return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
}

void Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(_BYTE *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, _QWORD *a4)
{
  WTF::JSONImpl::ObjectBase *v5;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::JSONImpl::ObjectBase *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  unint64_t v38;
  WTF::JSONImpl::ObjectBase *v39;
  int v40;
  unsigned int v41;
  int v42;
  WTF::JSONImpl::ObjectBase *v44;
  int v45;
  uint64_t v46;
  const WTF::StringImpl *v47;
  WTF::AtomStringImpl *v48;
  const WTF::String *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned __int16 v56;
  BOOL v57;
  uint64_t v58;
  const WTF::StringImpl *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  const WTF::StringImpl *v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  char *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::JSONImpl::ObjectBase *v155;
  uint64_t v156;
  const WTF::StringImpl *v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int Boolean;
  _BOOL8 v166;
  WTF::JSONImpl::ObjectBase *v167;
  uint64_t v168;
  const WTF::StringImpl *v169;
  uint64_t Integer;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl **v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  WTF::JSONImpl::ObjectBase **v241;
  _QWORD *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  int v247;
  BOOL v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF *v251;
  uint64_t v252;
  WTF::StringImpl *v253;

  v252 = 0;
  v253 = 0;
  v251 = 0;
  v5 = *a3;
  if (!*a3)
  {
    v178 = 0;
    v166 = 0;
    goto LABEL_83;
  }
  v242 = a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "condition";
  *(_DWORD *)(v8 + 16) = 4;
  v250 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getString(v5, &v250, v9, &v245);
  v253 = v245;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = *a3;
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x700000002;
  *(_QWORD *)(v18 + 8) = "actions";
  *(_DWORD *)(v18 + 16) = 4;
  v245 = (WTF::StringImpl *)v18;
  WTF::JSONImpl::ObjectBase::getArray(v17, &v245, v19, &v250);
  v241 = a3;
  if (*(_DWORD *)v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
  }
  else
  {
    *(_DWORD *)v18 -= 2;
  }
  v27 = v250;
  if (!v250 || (v28 = *((unsigned int *)v250 + 7), !(_DWORD)v28))
  {
LABEL_70:
    v155 = *v241;
    v156 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v156 = 0xC00000002;
    *(_QWORD *)(v156 + 8) = "autoContinue";
    *(_DWORD *)(v156 + 16) = 4;
    v245 = (WTF::StringImpl *)v156;
    Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v155, &v245, v157);
    if (Boolean <= 0x100)
      LOBYTE(Boolean) = 0;
    v166 = Boolean != 0;
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v156, v158, v159, v160, v161, v162, v163, v164);
      WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
    v167 = *v241;
    v168 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v168 = 0xB00000002;
    *(_QWORD *)(v168 + 8) = "ignoreCount";
    *(_DWORD *)(v168 + 16) = 4;
    v245 = (WTF::StringImpl *)v168;
    Integer = WTF::JSONImpl::ObjectBase::getInteger(v167, &v245, v169);
    if ((Integer & 0xFF00000000) != 0)
      v178 = (int)Integer;
    else
      v178 = 0;
    if (*(_DWORD *)v168 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v168, v171, v172, v173, v174, v175, v176, v177);
      WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
      if (v27)
      {
LABEL_79:
        if (*(_DWORD *)v27 == 1)
          WTF::JSONImpl::Value::operator delete(v27, v171, v172, v173, v174, v175, v176, v177);
        else
          --*(_DWORD *)v27;
      }
    }
    else
    {
      *(_DWORD *)v168 -= 2;
      if (v27)
        goto LABEL_79;
    }
    a4 = v242;
LABEL_83:
    (*(void (**)(_QWORD, WTF::StringImpl **, WTF **, _BOOL8, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, &v253, &v251, v166, v178);
    v37 = HIDWORD(v252);
    v36 = v251;
    goto LABEL_84;
  }
  if (v28 >= 0xAAAAAAB)
  {
    __break(0xC471u);
LABEL_116:
    JUMPOUT(0x1986B0584);
  }
  v36 = (WTF *)WTF::fastMalloc((WTF *)(24 * v28));
  v37 = 0;
  v38 = 0;
  LODWORD(v252) = 24 * (int)v28 / 0x18u;
  v251 = v36;
  while (1)
  {
    if (v38 >= *((unsigned int *)v27 + 7))
    {
      __break(0xC471u);
      goto LABEL_116;
    }
    v39 = *(WTF::JSONImpl::ObjectBase **)(*((_QWORD *)v27 + 2) + 8 * v38);
    v40 = *(_DWORD *)v39;
    v41 = *((_DWORD *)v39 + 1);
    v42 = *(_DWORD *)v39 + 1;
    *(_DWORD *)v39 = v42;
    if (v41 < 5 || v41 == 6)
    {
      v44 = 0;
    }
    else
    {
      if (v41 != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1986B05A4);
      }
      v42 = v40 + 2;
      *(_DWORD *)v39 = v40 + 2;
      v44 = v39;
    }
    v45 = v42 - 1;
    if (v45)
      *(_DWORD *)v39 = v45;
    else
      WTF::JSONImpl::Value::operator delete(v39, v29, v30, v31, v32, v33, v34, v35);
    if (!v44)
      break;
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v46 = 0x400000002;
    *(_QWORD *)(v46 + 8) = "type";
    *(_DWORD *)(v46 + 16) = 4;
    v245 = (WTF::StringImpl *)v46;
    WTF::JSONImpl::ObjectBase::getString(v44, &v245, v47, &v249);
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v48, (uint64_t)v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
    v55 = v249;
    if (v249)
    {
      v56 = Inspector::breakpointActionTypeForString(a2, (WTF::String *)&v249, v49);
      v57 = v56 > 0xFFu;
      if (v56 <= 0xFFu)
      {
        *a1 = 0;
        a1[72] = 0;
LABEL_51:
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
        goto LABEL_53;
      }
      LOBYTE(v245) = v56;
      v246 = 0;
      v247 = 0;
      v248 = 0;
      v58 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v58 = 0x400000002;
      *(_QWORD *)(v58 + 8) = "data";
      *(_DWORD *)(v58 + 16) = 4;
      v243 = (WTF::StringImpl *)v58;
      WTF::JSONImpl::ObjectBase::getString(v44, &v243, v59, &v244);
      v67 = v246;
      v246 = v244;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
        {
          WTF::StringImpl::~StringImpl(v67, v60, v61, v62, v63, v64, v65, v66);
          WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
        }
        else
        {
          *(_DWORD *)v67 -= 2;
        }
      }
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
      else
      {
        *(_DWORD *)v58 -= 2;
      }
      v68 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v68 = 0x200000002;
      *(_QWORD *)(v68 + 8) = "id";
      *(_DWORD *)(v68 + 16) = 4;
      v244 = (WTF::StringImpl *)v68;
      v70 = WTF::JSONImpl::ObjectBase::getInteger(v44, &v244, v69);
      if ((v70 & 0xFF00000000) != 0)
        v78 = v70;
      else
        v78 = 0;
      v247 = v78;
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v68, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
      v79 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v79 = 0x1200000002;
      *(_QWORD *)(v79 + 8) = "emulateUserGesture";
      *(_DWORD *)(v79 + 16) = 4;
      v244 = (WTF::StringImpl *)v79;
      v81 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v44, &v244, v80);
      if (v81 <= 0x100)
        LOBYTE(v81) = 0;
      v248 = v81 != 0;
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v79, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
      if (v37 == (_DWORD)v252)
      {
        v82 = WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v251, v37 + 1, (unint64_t)&v245);
        v83 = HIDWORD(v252);
        v36 = v251;
        v84 = (char *)v251 + 24 * HIDWORD(v252);
        *v84 = *(_BYTE *)v82;
        v85 = *(_QWORD *)(v82 + 8);
        *(_QWORD *)(v82 + 8) = 0;
        *((_QWORD *)v84 + 1) = v85;
        LODWORD(v85) = *(_DWORD *)(v82 + 16);
        v84[20] = *(_BYTE *)(v82 + 20);
        *((_DWORD *)v84 + 4) = v85;
      }
      else
      {
        v88 = (char *)v36 + 24 * v37;
        *v88 = (char)v245;
        v89 = v246;
        v246 = 0;
        *((_QWORD *)v88 + 1) = v89;
        LODWORD(v89) = v247;
        v88[20] = v248;
        *((_DWORD *)v88 + 4) = (_DWORD)v89;
        v83 = HIDWORD(v252);
      }
      v37 = v83 + 1;
      HIDWORD(v252) = v83 + 1;
      v90 = v246;
      v246 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        }
        else
        {
          *(_DWORD *)v90 -= 2;
        }
      }
      v55 = v249;
      if (v249)
        goto LABEL_51;
      v57 = 1;
    }
    else
    {
      v86 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v86 = 0x2600000002;
      *(_QWORD *)(v86 + 8) = "Missing type for item in given actions";
      *(_DWORD *)(v86 + 16) = 4;
      v87 = *a2;
      *a2 = (WTF::StringImpl *)v86;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      v57 = 0;
      *a1 = 0;
      a1[72] = 0;
    }
LABEL_53:
    if (*(_DWORD *)v44 == 1)
      WTF::JSONImpl::Value::operator delete(v44, v29, v30, v31, v32, v33, v34, v35);
    else
      --*(_DWORD *)v44;
    if (!v57)
      goto LABEL_105;
    if (v28 == ++v38)
      goto LABEL_70;
  }
  v215 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v215 = 0x2B00000002;
  *(_QWORD *)(v215 + 8) = "Unexpected non-object item in given actions";
  *(_DWORD *)(v215 + 16) = 4;
  v216 = *a2;
  *a2 = (WTF::StringImpl *)v215;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
    {
      WTF::StringImpl::~StringImpl(v216, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
    }
    else
    {
      *(_DWORD *)v216 -= 2;
    }
  }
  *a1 = 0;
  a1[72] = 0;
LABEL_105:
  if (*(_DWORD *)v27 == 1)
    WTF::JSONImpl::Value::operator delete(v27, v29, v30, v31, v32, v33, v34, v35);
  else
    --*(_DWORD *)v27;
LABEL_84:
  if (v37)
  {
    v179 = 24 * v37;
    v180 = (WTF::StringImpl **)((char *)v36 + 8);
    do
    {
      v181 = *v180;
      *v180 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
        {
          WTF::StringImpl::~StringImpl(v181, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v181 -= 2;
        }
      }
      v180 += 3;
      v179 -= 24;
    }
    while (v179);
    v36 = v251;
  }
  if (v36)
  {
    v251 = 0;
    LODWORD(v252) = 0;
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  v190 = v253;
  v253 = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::fromPayload@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, WTF::JSONImpl::ObjectBase **a6@<X5>, _BYTE *a7@<X8>)
{
  _QWORD *v11;
  _QWORD *v13;
  int v14;
  int v15;
  char v16;

  v16 = a3;
  v14 = a5;
  v15 = a4;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = off_1E35951F0;
  v11[1] = a2;
  v11[2] = &v16;
  v11[3] = &v15;
  v11[4] = &v14;
  v13 = v11;
  Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(a7, a1, a6, &v13);
  return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint(uint64_t this)
{
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 56) = 0;
  return this;
}

{
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 56) = 0;
  return this;
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD **a5, uint64_t *a6, char a7, uint64_t a8)
{
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  char *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD **v48;
  _QWORD v50[3];

  v13 = a2;
  v14 = result;
  v15 = 0;
  v50[2] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  do
  {
    ++v15;
    v17 = v16 > 9;
    v16 /= 0xAu;
  }
  while (v17);
  v18 = 0;
  v19 = a3;
  do
  {
    ++v18;
    v17 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v17);
  v20 = 0;
  v21 = a4;
  do
  {
    ++v20;
    v17 = v21 > 9;
    v21 /= 0xAu;
  }
  while (v17);
  if (v20 < 0)
    goto LABEL_43;
  v22 = __OFADD__(v20, 1);
  v23 = v20 + 1;
  v24 = v22;
  if (v18 < 0)
    goto LABEL_43;
  if (v24)
    goto LABEL_43;
  v22 = __OFADD__(v18, v23);
  v25 = v18 + v23;
  if (v22)
    goto LABEL_43;
  v22 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  v27 = v22;
  if (v15 < 0)
    goto LABEL_43;
  if (v27)
    goto LABEL_43;
  v28 = (v15 + v26);
  if (__OFADD__(v15, v26))
    goto LABEL_43;
  if ((_DWORD)v28)
  {
    if ((v28 & 0x80000000) == 0)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(v28 + 20), v50);
      v29 = (int *)v50[0];
      if (v50[0])
      {
        v48 = a5;
        v30 = a7;
        v31 = a8;
        v32 = 0;
        v33 = v50[0] + 20;
        *(_DWORD *)v50[0] = 2;
        v29[1] = v28;
        *((_QWORD *)v29 + 1) = v29 + 5;
        v29[4] = 4;
        v34 = v13;
        do
        {
          *((_BYTE *)&v50[1] + v32-- + 4) = (v34 % 0xA) | 0x30;
          v17 = v34 > 9;
          v34 /= 0xAu;
        }
        while (v17);
        if (v32 + 14 <= 13)
          memcpy(v29 + 5, (char *)&v50[1] + v32 + 5, -v32);
        v35 = 0;
        v36 = a4;
        do
        {
          ++v35;
          v17 = v13 > 9;
          v13 /= 0xAu;
        }
        while (v17);
        v37 = 0;
        v38 = (_BYTE *)(v33 + v35);
        *v38 = 58;
        v39 = a3;
        do
        {
          *((_BYTE *)&v50[1] + v37-- + 4) = (v39 % 0xA) | 0x30;
          v17 = v39 > 9;
          v39 /= 0xAu;
        }
        while (v17);
        v40 = v38 + 1;
        a8 = v31;
        if (v37 + 14 <= 13)
          memcpy(v40, (char *)&v50[1] + v37 + 5, -v37);
        v41 = 0;
        v42 = a3;
        a7 = v30;
        do
        {
          ++v41;
          v17 = v42 > 9;
          v42 /= 0xAu;
        }
        while (v17);
        v43 = 0;
        v44 = &v40[v41];
        *v44 = 58;
        v45 = a4;
        a5 = v48;
        do
        {
          *((_BYTE *)&v50[1] + v43-- + 4) = (v45 % 0xA) | 0x30;
          v17 = v45 > 9;
          v45 /= 0xAu;
        }
        while (v17);
        if (v43 + 14 <= 13)
          memcpy(v44 + 1, (char *)&v50[1] + v43 + 5, -v43);
        goto LABEL_39;
      }
    }
LABEL_43:
    *(_QWORD *)v14 = 0;
    __break(0xC471u);
    return result;
  }
  v29 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
  v36 = a4;
LABEL_39:
  *(_QWORD *)v14 = v29;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 20) = a3;
  *(_DWORD *)(v14 + 24) = v36;
  v46 = *a5;
  if (*a5)
    *v46 += 2;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = v46;
  v47 = *a6;
  *a6 = 0;
  *(_QWORD *)(v14 + 40) = v47;
  LODWORD(v47) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(v14 + 48) = v47;
  LODWORD(v47) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(v14 + 52) = v47;
  *(_BYTE *)(v14 + 56) = a7;
  *(_QWORD *)(v14 + 64) = a8;
  return v14;
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int *v31;
  char *v32;
  char *v33;
  size_t v34;
  int8x16_t *v35;
  unsigned int v36;
  unsigned int i;
  __int16 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  _DWORD **v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  int8x16_t v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  int8x16_t v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  __int16 v83;
  uint64_t v84;
  unsigned int v85;
  _WORD *v86;
  _WORD *v87;
  BOOL v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  _WORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int128 *v107;
  unsigned __int128 *v108;
  unsigned __int128 *v109;
  unsigned __int128 v110;
  char v111;
  int v112;
  size_t v113;
  unint64_t v114;
  char v115;
  _DWORD **v116;
  char v117;
  unsigned int v118;
  _QWORD v120[3];
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;

  v9 = a8;
  v120[2] = *MEMORY[0x1E0C80C00];
  v117 = a3;
  if ((_DWORD)a3)
    v12 = "/";
  else
    v12 = "";
  if ((_DWORD)a3)
    v13 = 2;
  else
    v13 = 1;
  v116 = (_DWORD **)a2;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v14 += 2;
  v112 = v13 - 1;
  if ((unint64_t)(v13 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B1218);
  }
  v113 = v13 - 1;
  v114 = v13;
  if (v14)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = 0;
  v118 = a4;
  v17 = a4;
  do
  {
    ++v16;
    v18 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v18);
  v19 = 0;
  v20 = a5;
  v21 = a5;
  do
  {
    ++v19;
    v18 = v21 > 9;
    v21 /= 0xAu;
  }
  while (v18);
  if (v19 < 0)
    goto LABEL_118;
  v22 = __OFADD__(v19, 1);
  v23 = v19 + 1;
  v24 = v22;
  if (v16 < 0)
    goto LABEL_118;
  if (v24)
    goto LABEL_118;
  v22 = __OFADD__(v16, v23);
  v25 = v16 + v23;
  if (v22)
    goto LABEL_118;
  v22 = __OFADD__(v25, 1);
  v26 = v25 + 1;
  if (v22)
    goto LABEL_118;
  v22 = __OFADD__((_DWORD)v113, v26);
  v27 = v113 + v26;
  v28 = v22;
  if (v15 < 0)
    goto LABEL_118;
  if (v28)
    goto LABEL_118;
  v22 = __OFADD__(v15, v27);
  v29 = v15 + v27;
  if (v22)
    goto LABEL_118;
  v30 = (v112 + v29);
  if (__OFADD__(v112, v29))
    goto LABEL_118;
  v115 = a8;
  if (v14 && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    if ((_DWORD)v30)
    {
      if (v30 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20), v120);
        v31 = (int *)v120[0];
        if (v120[0])
        {
          v32 = (char *)(v120[0] + 20);
          *(_DWORD *)v120[0] = 2;
          v31[1] = v30;
          *((_QWORD *)v31 + 1) = v31 + 5;
          v31[4] = 0;
          v33 = (char *)v31 + 2 * v113 + 20;
          v34 = v113 & 0x7FFFFFC0;
          if ((v113 & 0x7FFFFFC0) != 0)
          {
            v55 = &v32[2 * v34];
            v56 = 0uLL;
            v35 = (int8x16_t *)v12;
            do
            {
              v121.val[0] = *v35;
              v57 = v35[1];
              v124.val[0] = v35[2];
              v58 = v35[3];
              v35 += 4;
              v59 = v58;
              v124.val[1] = 0uLL;
              v127.val[0] = v57;
              v121.val[1] = 0uLL;
              v60 = v32;
              vst2q_s8(v60, v121);
              v60 += 32;
              v127.val[1] = 0uLL;
              vst2q_s8(v60, v127);
              v61 = v32 + 64;
              vst2q_s8(v61, v124);
              v62 = v32 + 96;
              vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
              v32 += 128;
            }
            while (v32 != v55);
            v32 = v55;
          }
          else
          {
            v35 = (int8x16_t *)v12;
          }
          v36 = v20;
          for (i = v118; v32 != v33; v32 += 2)
          {
            v38 = v35->u8[0];
            v35 = (int8x16_t *)((char *)v35 + 1);
            *(_WORD *)v32 = v38;
          }
          a2 = *(unsigned __int8 **)(v14 + 8);
          v39 = *(unsigned int *)(v14 + 4);
          if ((*(_BYTE *)(v14 + 16) & 4) != 0)
          {
            v53 = &v33[2 * v39];
            if (v39 >= 0x40)
            {
              v54 = &v33[2 * (v39 & 0xFFFFFFC0)];
              v63 = 0uLL;
              v64 = (uint64_t)v31 + 2 * v113 + 20;
              do
              {
                v122.val[0] = *(int8x16_t *)a2;
                v65 = *((int8x16_t *)a2 + 1);
                v125.val[0] = (int8x16_t)*((_OWORD *)a2 + 2);
                v66 = *((_OWORD *)a2 + 3);
                a2 += 64;
                v67 = v66;
                v125.val[1] = 0uLL;
                v128.val[0] = v65;
                v122.val[1] = 0uLL;
                v68 = (char *)v64;
                vst2q_s8(v68, v122);
                v68 += 32;
                v128.val[1] = 0uLL;
                vst2q_s8(v68, v128);
                v69 = (char *)(v64 + 64);
                vst2q_s8(v69, v125);
                v70 = (char *)(v64 + 96);
                vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
                v64 += 128;
              }
              while ((char *)v64 != v54);
            }
            else
            {
              v54 = (char *)v31 + 2 * v113 + 20;
            }
            while (v54 != v53)
            {
              v71 = *a2++;
              *(_WORD *)v54 = v71;
              v54 += 2;
            }
          }
          else if ((_DWORD)v39 == 1)
          {
            *(_WORD *)v33 = *(_WORD *)a2;
          }
          else if ((_DWORD)v39)
          {
            memcpy((char *)v31 + 2 * v113 + 20, a2, 2 * v39);
          }
          v72 = *(unsigned int *)(v14 + 4);
          v73 = &v33[2 * v72];
          v74 = &v73[2 * v113];
          if ((v113 & 0x7FFFFFC0) != 0)
          {
            v75 = &v73[2 * v34];
            v76 = 0uLL;
            v9 = v115;
            v52 = (_DWORD **)a6;
            do
            {
              v123.val[0] = *(int8x16_t *)v12;
              v77 = *((int8x16_t *)v12 + 1);
              v126.val[0] = (int8x16_t)*((_OWORD *)v12 + 2);
              v78 = *((_OWORD *)v12 + 3);
              v12 += 64;
              v79 = v78;
              v126.val[1] = 0uLL;
              v129.val[0] = v77;
              v123.val[1] = 0uLL;
              v80 = v73;
              vst2q_s8(v80, v123);
              v80 += 32;
              v129.val[1] = 0uLL;
              vst2q_s8(v80, v129);
              v81 = v73 + 64;
              vst2q_s8(v81, v126);
              v82 = v73 + 96;
              vst2q_s8(v82, *(int8x16x2_t *)(&v76 - 1));
              v73 += 128;
            }
            while (v73 != v75);
            v73 = v75;
          }
          else
          {
            v9 = v115;
            v52 = (_DWORD **)a6;
          }
          while (v73 != v74)
          {
            v83 = *(unsigned __int8 *)v12++;
            *(_WORD *)v73 = v83;
            v73 += 2;
          }
          v84 = 0;
          *(_WORD *)v74 = 58;
          v85 = v118;
          do
          {
            *((_BYTE *)&v120[1] + v84-- + 4) = (v85 % 0xA) | 0x30;
            v18 = v85 > 9;
            v85 /= 0xAu;
          }
          while (v18);
          v86 = v74 + 2;
          if (v84 + 14 <= 13)
          {
            v87 = v74 + 2;
            do
            {
              *v87++ = *((unsigned __int8 *)&v120[1] + v84 + 5);
              v88 = __CFADD__(v84++, 1);
            }
            while (!v88);
          }
          v89 = 0;
          v90 = v118;
          do
          {
            ++v89;
            v18 = v90 > 9;
            v90 /= 0xAu;
          }
          while (v18);
          v91 = 0;
          v86[v89] = 58;
          v92 = v36;
          do
          {
            *((_BYTE *)&v120[1] + v91-- + 4) = (v92 % 0xA) | 0x30;
            v18 = v92 > 9;
            v92 /= 0xAu;
          }
          while (v18);
          if (v91 + 14 <= 13)
          {
            v93 = v114;
            if (v114 <= 1)
              v93 = 1;
            v94 = (_WORD *)&v31[v93 + 5] + v72 + v89;
            do
            {
              *v94++ = *((unsigned __int8 *)&v120[1] + v91 + 5);
              v88 = __CFADD__(v91++, 1);
            }
            while (!v88);
          }
          goto LABEL_105;
        }
      }
LABEL_118:
      *(_QWORD *)a1 = 0;
      __break(0xC471u);
      JUMPOUT(0x1986B1198);
    }
LABEL_116:
    v31 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v52 = (_DWORD **)a6;
    v36 = a5;
    i = a4;
    goto LABEL_105;
  }
  if (!(_DWORD)v30)
    goto LABEL_116;
  if ((v30 & 0x80000000) != 0)
    goto LABEL_118;
  WTF::tryFastCompactMalloc((WTF *)(v30 + 20), v120);
  v31 = (int *)v120[0];
  if (!v120[0])
    goto LABEL_118;
  v40 = (char *)(v120[0] + 20);
  *(_DWORD *)v120[0] = 2;
  v31[1] = v30;
  *((_QWORD *)v31 + 1) = v31 + 5;
  v31[4] = 4;
  if (v112 == 1)
  {
    *v40 = *v12;
  }
  else if (v112)
  {
    memcpy(v31 + 5, v12, v113);
  }
  v41 = &v40[v113];
  v36 = v20;
  if (v14)
  {
    a2 = *(unsigned __int8 **)(v14 + 8);
    a3 = *(unsigned int *)(v14 + 4);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      if ((_DWORD)a3 == 1)
      {
        *v41 = *a2;
        i = v118;
      }
      else
      {
        i = v118;
        if ((_DWORD)a3)
          memcpy(v41, a2, a3);
      }
    }
    else
    {
      v107 = (unsigned __int128 *)&v41[a3];
      if (a3 < 0x10)
      {
        v108 = (unsigned __int128 *)v41;
      }
      else
      {
        v108 = (unsigned __int128 *)&v41[a3 & 0xFFFFFFF0];
        v109 = (unsigned __int128 *)v41;
        do
        {
          v110 = (unsigned __int128)vld2q_s8((const char *)a2);
          a2 += 32;
          *v109++ = v110;
        }
        while (v109 != v108);
      }
      v36 = v20;
      for (i = v118; v108 != v107; v108 = (unsigned __int128 *)((char *)v108 + 1))
      {
        v111 = *a2;
        a2 += 2;
        *(_BYTE *)v108 = v111;
      }
    }
    v42 = *(unsigned int *)(v14 + 4);
  }
  else
  {
    v42 = 0;
    i = v118;
  }
  v43 = &v41[v42];
  if ((_DWORD)v113 == 1)
  {
    *v43 = *v12;
  }
  else if ((_DWORD)v113)
  {
    memcpy(v43, v12, v113);
  }
  v44 = 0;
  v43[v113] = 58;
  v45 = i;
  do
  {
    *((_BYTE *)&v120[1] + v44-- + 4) = (v45 % 0xA) | 0x30;
    v18 = v45 > 9;
    v45 /= 0xAu;
  }
  while (v18);
  v46 = &v43[v113 + 1];
  v9 = v115;
  if (v44 + 14 <= 13)
    memcpy(v46, (char *)&v120[1] + v44 + 5, -v44);
  v47 = 0;
  v48 = i;
  do
  {
    ++v47;
    v18 = v48 > 9;
    v48 /= 0xAu;
  }
  while (v18);
  v49 = 0;
  v50 = &v46[v47];
  *v50 = 58;
  v51 = v36;
  do
  {
    *((_BYTE *)&v120[1] + v49-- + 4) = (v51 % 0xA) | 0x30;
    v18 = v51 > 9;
    v51 /= 0xAu;
  }
  while (v18);
  v52 = (_DWORD **)a6;
  if (v49 + 14 <= 13)
    memcpy(v50 + 1, (char *)&v120[1] + v49 + 5, -v49);
LABEL_105:
  *(_QWORD *)a1 = v31;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v95 = *v116;
  if (*v116)
    *v95 += 2;
  *(_QWORD *)(a1 + 8) = v95;
  *(_BYTE *)(a1 + 16) = v117;
  *(_DWORD *)(a1 + 20) = i;
  *(_DWORD *)(a1 + 24) = v36;
  v96 = *v52;
  if (*v52)
    *v96 += 2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = v96;
  v97 = *(_QWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a1 + 40) = v97;
  LODWORD(v97) = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(a7 + 8) = 0;
  *(_DWORD *)(a1 + 48) = v97;
  LODWORD(v97) = *(_DWORD *)(a7 + 12);
  *(_DWORD *)(a7 + 12) = 0;
  *(_DWORD *)(a1 + 52) = v97;
  *(_BYTE *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = a9;
  return a1;
}

{
  return Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::createDebuggerBreakpoint(Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  _DWORD *v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = *((unsigned int *)this + 13);
  if ((_DWORD)v8)
  {
    if (v8 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return;
    }
    v9 = 24 * v8;
    v10 = WTF::fastMalloc((WTF *)(24 * v8));
    v11 = v10;
    v12 = (v9 & 0xFFFFFFF8) / 0x18;
    v13 = *((_DWORD *)this + 13);
    if (v13)
    {
      v14 = 0;
      v15 = *((_QWORD *)this + 5);
      v16 = v15 + 24 * v13;
      v17 = (24 * (unint64_t)v13 - 24) / 0x18 + 1;
      do
      {
        v18 = v15 + v14;
        v19 = *(_BYTE *)(v15 + v14);
        v20 = *(_DWORD **)(v15 + v14 + 8);
        if (v20)
          *v20 += 2;
        v21 = *(_BYTE *)(v18 + 20);
        v22 = *(_DWORD *)(v18 + 16);
        v23 = v10 + v14;
        *(_BYTE *)v23 = v19;
        *(_QWORD *)(v23 + 8) = v20;
        *(_DWORD *)(v23 + 16) = v22;
        *(_BYTE *)(v23 + 20) = v21;
        v14 += 24;
      }
      while (v18 + 24 != v16);
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 0;
LABEL_11:
  v24 = *((_BYTE *)this + 56);
  v25 = *((_QWORD *)this + 8);
  v33 = WTF::fastMalloc((WTF *)0x50);
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (v34)
  {
    *(_DWORD *)v34 += 2;
    *(_QWORD *)(v33 + 21) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_DWORD *)v34 += 2;
  }
  else
  {
    *(_QWORD *)(v33 + 21) = 0;
    *(_QWORD *)(v33 + 16) = 0;
  }
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = a2;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v11;
  *(_DWORD *)(v33 + 48) = v12;
  *(_DWORD *)(v33 + 52) = v17;
  *(_BYTE *)(v33 + 56) = v24;
  *(_QWORD *)(v33 + 64) = v25;
  *(_QWORD *)(v33 + 72) = 0;
  *a4 = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  *(_DWORD *)(v33 + 16) = a3;
  *(_QWORD *)(v33 + 20) = *(_QWORD *)((char *)this + 20);
}

BOOL Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::matchesScriptURL(Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  BOOL v34;
  JSC::Yarr::BytecodePattern *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  size_t v47;
  unint64_t v48;
  unsigned __int16 v49;
  _WORD v50[19];
  _BYTE v51[176];

  if (*((_BYTE *)this + 16))
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = *(char **)(v4 + 8);
      v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v5 = 0;
      v6 = 0x100000000;
    }
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v7 = 1;
    *(_BYTE *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (_QWORD *)(v7 + 8);
    *(_DWORD *)(v7 + 16) = -1;
    v9 = (uint64_t *)(v7 + 24);
    LOBYTE(v49) = 0;
    *(_QWORD *)v50 = 0;
    *(_QWORD *)&v50[3] = 0;
    *(_QWORD *)&v50[11] = v51;
    *(_QWORD *)&v50[15] = 4;
    memset(&v51[32], 0, 144);
    v10 = JSC::Yarr::YarrPattern::compile(&v49, v5, v6);
    *(_BYTE *)(v7 + 4) = v10;
    if (v10)
    {
      *v9 = 0;
    }
    else
    {
      *(_DWORD *)(v7 + 20) = *(_DWORD *)&v50[1];
      JSC::Yarr::byteCompile((unint64_t)&v49, (uint64_t)v8, (_BYTE *)(v7 + 4), 0, v9);
    }
    JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)&v49, v11, v12, v13, v14, v15, v16, v17);
    v48 = v7;
    v21 = *a2;
    if (*a2)
    {
      v22 = (void *)*((_QWORD *)v21 + 1);
      v23 = *((unsigned int *)v21 + 1) | ((unint64_t)((*((_DWORD *)v21 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    v31 = JSC::Yarr::RegularExpression::match((uint64_t *)&v48, v22, v23, 0, 0, v18, v19, v20) != -1;
    if (*(_DWORD *)v7 == 1)
    {
      v36 = (JSC::Yarr::BytecodePattern *)*v9;
      *v9 = 0;
      if (v36)
      {
        JSC::Yarr::BytecodePattern::~BytecodePattern(v36, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      v45 = (_QWORD *)*v8;
      if (*v8)
      {
        v46 = (void *)v45[5];
        v47 = v45[6];
        v45[5] = 0;
        v45[6] = 0;
        v45[4] = 0;
        if (munmap(v46, v47) == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1986B15F0);
        }
      }
      WTF::fastFree(v7, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    v32 = (WTF *)*((_QWORD *)this + 1);
    v33 = *a2;
    if (v32 == *a2)
    {
      return 1;
    }
    else
    {
      if (v32)
        v34 = v33 == 0;
      else
        v34 = 1;
      if (!v34)
        return WTF::equal(v32, v33, a3);
      return 0;
    }
  }
  return v31;
}

uint64_t Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload@<X0>(WTF::StringImpl **a1@<X0>, WTF::JSONImpl::ObjectBase **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t (**v6)();
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::JSONImpl::ObjectBase *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  unint64_t v38;
  WTF::JSONImpl::ObjectBase *v39;
  int v40;
  unsigned int v41;
  int v42;
  WTF::JSONImpl::ObjectBase *v44;
  int v45;
  uint64_t v46;
  const WTF::StringImpl *v47;
  WTF::AtomStringImpl *v48;
  const WTF::String *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned __int16 v56;
  BOOL v57;
  uint64_t v58;
  const WTF::StringImpl *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  const WTF::StringImpl *v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  char *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::JSONImpl::ObjectBase *v155;
  uint64_t v156;
  const WTF::StringImpl *v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int Boolean;
  _BOOL8 v166;
  WTF::JSONImpl::ObjectBase *v167;
  uint64_t v168;
  const WTF::StringImpl *v169;
  uint64_t Integer;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl **v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::JSONImpl::ObjectBase **v242;
  uint64_t (***v243)();
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  int v249;
  BOOL v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF *v253;
  uint64_t v254;
  WTF::StringImpl *v255;

  v5 = WTF::fastMalloc((WTF *)0x10);
  v6 = off_1E3595218;
  *(_QWORD *)v5 = off_1E3595218;
  v254 = 0;
  v255 = 0;
  v253 = 0;
  v7 = *a2;
  if (!*a2)
  {
    v178 = 0;
    v166 = 0;
    goto LABEL_83;
  }
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "condition";
  *(_DWORD *)(v8 + 16) = 4;
  v252 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getString(v7, &v252, v9, &v247);
  v255 = v247;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = *a2;
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x700000002;
  *(_QWORD *)(v18 + 8) = "actions";
  *(_DWORD *)(v18 + 16) = 4;
  v247 = (WTF::StringImpl *)v18;
  WTF::JSONImpl::ObjectBase::getArray(v17, &v247, v19, &v252);
  v242 = a2;
  v243 = (uint64_t (***)())v5;
  if (*(_DWORD *)v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
  }
  else
  {
    *(_DWORD *)v18 -= 2;
  }
  v27 = v252;
  if (!v252 || (v28 = *((unsigned int *)v252 + 7), !(_DWORD)v28))
  {
LABEL_70:
    v155 = *v242;
    v156 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v156 = 0xC00000002;
    *(_QWORD *)(v156 + 8) = "autoContinue";
    *(_DWORD *)(v156 + 16) = 4;
    v247 = (WTF::StringImpl *)v156;
    Boolean = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v155, &v247, v157);
    if (Boolean <= 0x100)
      LOBYTE(Boolean) = 0;
    v166 = Boolean != 0;
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v156, v158, v159, v160, v161, v162, v163, v164);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
    v5 = (uint64_t)v243;
    v167 = *v242;
    v168 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v168 = 0xB00000002;
    *(_QWORD *)(v168 + 8) = "ignoreCount";
    *(_DWORD *)(v168 + 16) = 4;
    v247 = (WTF::StringImpl *)v168;
    Integer = WTF::JSONImpl::ObjectBase::getInteger(v167, &v247, v169);
    if ((Integer & 0xFF00000000) != 0)
      v178 = (int)Integer;
    else
      v178 = 0;
    if (*(_DWORD *)v168 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v168, v171, v172, v173, v174, v175, v176, v177);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
      if (v27)
      {
LABEL_79:
        if (*(_DWORD *)v27 == 1)
          WTF::JSONImpl::Value::operator delete(v27, v171, v172, v173, v174, v175, v176, v177);
        else
          --*(_DWORD *)v27;
      }
    }
    else
    {
      *(_DWORD *)v168 -= 2;
      if (v27)
        goto LABEL_79;
    }
    v6 = *v243;
LABEL_83:
    ((void (*)(uint64_t, WTF::StringImpl **, WTF **, _BOOL8, uint64_t))v6[2])(v5, &v255, &v253, v166, v178);
    v37 = HIDWORD(v254);
    v36 = v253;
    goto LABEL_84;
  }
  if (v28 >= 0xAAAAAAB)
  {
    __break(0xC471u);
LABEL_117:
    JUMPOUT(0x1986B1E20);
  }
  v36 = (WTF *)WTF::fastMalloc((WTF *)(24 * v28));
  v37 = 0;
  v38 = 0;
  LODWORD(v254) = 24 * (int)v28 / 0x18u;
  v253 = v36;
  while (1)
  {
    if (v38 >= *((unsigned int *)v27 + 7))
    {
      __break(0xC471u);
      goto LABEL_117;
    }
    v39 = *(WTF::JSONImpl::ObjectBase **)(*((_QWORD *)v27 + 2) + 8 * v38);
    v40 = *(_DWORD *)v39;
    v41 = *((_DWORD *)v39 + 1);
    v42 = *(_DWORD *)v39 + 1;
    *(_DWORD *)v39 = v42;
    if (v41 < 5 || v41 == 6)
    {
      v44 = 0;
    }
    else
    {
      if (v41 != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1986B1E40);
      }
      v42 = v40 + 2;
      *(_DWORD *)v39 = v40 + 2;
      v44 = v39;
    }
    v45 = v42 - 1;
    if (v45)
      *(_DWORD *)v39 = v45;
    else
      WTF::JSONImpl::Value::operator delete(v39, v29, v30, v31, v32, v33, v34, v35);
    if (!v44)
      break;
    v46 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v46 = 0x400000002;
    *(_QWORD *)(v46 + 8) = "type";
    *(_DWORD *)(v46 + 16) = 4;
    v247 = (WTF::StringImpl *)v46;
    WTF::JSONImpl::ObjectBase::getString(v44, &v247, v47, &v251);
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v48, (uint64_t)v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
    v55 = v251;
    if (v251)
    {
      v56 = Inspector::breakpointActionTypeForString(a1, (WTF::String *)&v251, v49);
      v57 = v56 > 0xFFu;
      if (v56 > 0xFFu)
      {
        LOBYTE(v247) = v56;
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v58 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v58 = 0x400000002;
        *(_QWORD *)(v58 + 8) = "data";
        *(_DWORD *)(v58 + 16) = 4;
        v245 = (WTF::StringImpl *)v58;
        WTF::JSONImpl::ObjectBase::getString(v44, &v245, v59, &v246);
        v67 = v248;
        v248 = v246;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::~StringImpl(v67, v60, v61, v62, v63, v64, v65, v66);
            WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
          }
          else
          {
            *(_DWORD *)v67 -= 2;
          }
        }
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
          WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
        v68 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v68 = 0x200000002;
        *(_QWORD *)(v68 + 8) = "id";
        *(_DWORD *)(v68 + 16) = 4;
        v246 = (WTF::StringImpl *)v68;
        v70 = WTF::JSONImpl::ObjectBase::getInteger(v44, &v246, v69);
        if ((v70 & 0xFF00000000) != 0)
          v78 = v70;
        else
          v78 = 0;
        v249 = v78;
        if (*(_DWORD *)v68 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v68, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v68 -= 2;
        }
        v79 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v79 = 0x1200000002;
        *(_QWORD *)(v79 + 8) = "emulateUserGesture";
        *(_DWORD *)(v79 + 16) = 4;
        v246 = (WTF::StringImpl *)v79;
        v81 = (unsigned __int16)WTF::JSONImpl::ObjectBase::getBoolean(v44, &v246, v80);
        if (v81 <= 0x100)
          LOBYTE(v81) = 0;
        v250 = v81 != 0;
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v79, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
        if (v37 == (_DWORD)v254)
        {
          v82 = WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v253, v37 + 1, (unint64_t)&v247);
          v83 = HIDWORD(v254);
          v36 = v253;
          v84 = (char *)v253 + 24 * HIDWORD(v254);
          *v84 = *(_BYTE *)v82;
          v85 = *(_QWORD *)(v82 + 8);
          *(_QWORD *)(v82 + 8) = 0;
          *((_QWORD *)v84 + 1) = v85;
          LODWORD(v85) = *(_DWORD *)(v82 + 16);
          v84[20] = *(_BYTE *)(v82 + 20);
          *((_DWORD *)v84 + 4) = v85;
        }
        else
        {
          v88 = (char *)v36 + 24 * v37;
          *v88 = (char)v247;
          v89 = v248;
          v248 = 0;
          *((_QWORD *)v88 + 1) = v89;
          LODWORD(v89) = v249;
          v88[20] = v250;
          *((_DWORD *)v88 + 4) = (_DWORD)v89;
          v83 = HIDWORD(v254);
        }
        v37 = v83 + 1;
        HIDWORD(v254) = v83 + 1;
        v90 = v248;
        v248 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
          {
            WTF::StringImpl::~StringImpl(v90, v29, v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
          }
          else
          {
            *(_DWORD *)v90 -= 2;
          }
        }
        v55 = v251;
        if (!v251)
        {
          v57 = 1;
          goto LABEL_53;
        }
      }
      else
      {
        *a3 = 0;
      }
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
    }
    else
    {
      v86 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v86 = 0x2600000002;
      *(_QWORD *)(v86 + 8) = "Missing type for item in given actions";
      *(_DWORD *)(v86 + 16) = 4;
      v87 = *a1;
      *a1 = (WTF::StringImpl *)v86;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      v57 = 0;
      *a3 = 0;
    }
LABEL_53:
    if (*(_DWORD *)v44 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v44, v29, v30, v31, v32, v33, v34, v35);
      if (!v57)
      {
LABEL_105:
        v5 = (uint64_t)v243;
        goto LABEL_106;
      }
    }
    else
    {
      --*(_DWORD *)v44;
      if (!v57)
        goto LABEL_105;
    }
    if (v28 == ++v38)
      goto LABEL_70;
  }
  v216 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v216 = 0x2B00000002;
  *(_QWORD *)(v216 + 8) = "Unexpected non-object item in given actions";
  *(_DWORD *)(v216 + 16) = 4;
  v217 = *a1;
  *a1 = (WTF::StringImpl *)v216;
  v5 = (uint64_t)v243;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
    {
      WTF::StringImpl::~StringImpl(v217, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v217 -= 2;
    }
  }
  *a3 = 0;
LABEL_106:
  if (*(_DWORD *)v27 == 1)
    WTF::JSONImpl::Value::operator delete(v27, v29, v30, v31, v32, v33, v34, v35);
  else
    --*(_DWORD *)v27;
LABEL_84:
  if (v37)
  {
    v179 = 24 * v37;
    v180 = (WTF::StringImpl **)((char *)v36 + 8);
    do
    {
      v181 = *v180;
      *v180 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
        {
          WTF::StringImpl::~StringImpl(v181, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v181 -= 2;
        }
      }
      v180 += 3;
      v179 -= 24;
    }
    while (v179);
    v36 = v253;
  }
  if (v36)
  {
    v253 = 0;
    LODWORD(v254) = 0;
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  v190 = v255;
  v255 = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Debugger";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594718;
  *(_QWORD *)v4 = 0x800000002;
  *(_QWORD *)a1 = off_1E3594530;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = &unk_1E3594820;
  *(_QWORD *)(a1 + 32) = &unk_1E3594860;
  v5 = a2[2];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 40) = v6;
  Inspector::DebuggerBackendDispatcher::create((Inspector::DebuggerBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 16), &v9);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  *(_QWORD *)(a1 + 64) = a2[1];
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 247) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v7 = *(_DWORD *)(a1 + 156);
  if (v7 != 302)
    *(_DWORD *)(a1 + 168) = v7;
  *(_DWORD *)(a1 + 156) = 97;
  *(_QWORD *)(a1 + 160) = 0;
  return a1;
}

void Inspector::InspectorDebuggerAgent::clearPauseDetails(Inspector::InspectorDebuggerAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  v9 = *((_DWORD *)this + 39);
  if (v9 != 302)
  {
    *((_DWORD *)this + 42) = v9;
    v10 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v11 = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::JSONImpl::Value::operator delete(v11, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v11;
    }
  }
  *((_DWORD *)this + 39) = 97;
  v12 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::JSONImpl::Value::operator delete(v12, a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v12;
  }
}

void Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(Inspector::InspectorDebuggerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;
  WTF *v11;
  WTF *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Inspector::AsyncStackTrace **v16;
  Inspector::AsyncStackTrace *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::Debugger::Script *v63;
  _DWORD *v64;
  unint64_t v65;

  *(_QWORD *)this = off_1E3594530;
  *((_QWORD *)this + 2) = &unk_1E3594718;
  *((_QWORD *)this + 3) = &unk_1E3594820;
  *((_QWORD *)this + 4) = &unk_1E3594860;
  v9 = *((_DWORD *)this + 61);
  if (v9)
    WTF::VectorDestructor<true,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::destruct(*((char **)this + 29), (char *)(*((_QWORD *)this + 29) + 48 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 29);
  if (v10)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v11)
    WTF::RefCounted<JSC::Breakpoint>::deref(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v12 = (WTF *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
    WTF::RefCounted<JSC::Breakpoint>::deref(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 24);
  if (v13)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 23);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (Inspector::AsyncStackTrace **)(v14 + 16);
      do
      {
        if (*((_DWORD *)v16 - 4) != -1)
        {
          v17 = *v16;
          *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              Inspector::AsyncStackTrace::~AsyncStackTrace(v17);
              WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
        }
        v16 += 3;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v26;
  }
  v27 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::JSONImpl::Value::operator delete(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v27;
  }
  v28 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v28)
    WTF::RefCounted<JSC::Breakpoint>::deref(v28, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v29 = *((_QWORD *)this + 16);
  if (v29)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, a2, a3, a4, a5, a6, a7, a8);
  v30 = *((_QWORD *)this + 15);
  if (v30)
  {
    v31 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v31)
    {
      v32 = (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v30 + 8);
      do
      {
        if (*((_QWORD *)v32 - 1) != -1)
        {
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint(v32, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          v33 = (WTF::StringImpl *)*((_QWORD *)v32 - 1);
          *((_QWORD *)v32 - 1) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::~StringImpl(v33, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
            }
            else
            {
              *(_DWORD *)v33 -= 2;
            }
          }
        }
        v32 = (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)((char *)v32 + 80);
        --v31;
      }
      while (v31);
    }
    WTF::fastFree(v30 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v42 = *((_QWORD *)this + 14);
  if (v42)
  {
    v43 = (uint64_t *)(v42 - 16);
    v44 = *(_QWORD *)(((v42 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v45 = *(uint64_t **)(v42 - 8);
    if (v45)
    {
      v46 = *v43;
      *v45 = *v43;
      *(_QWORD *)(v46 + 8) = v45;
      *v43 = 0;
      v43[1] = 0;
    }
    *v43 = *(_QWORD *)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;
    *((_QWORD *)this + 14) = 0;
  }
  v47 = *((_QWORD *)this + 12);
  if (v47)
    WTF::fastFree(v47 - 16, a2, a3, a4, a5, a6, a7, a8);
  v48 = *((unsigned int *)this + 23);
  if ((_DWORD)v48)
  {
    v49 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    v50 = 16 * v48;
    do
    {
      v51 = *v49;
      *v49 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      v49 += 2;
      v50 -= 16;
    }
    while (v50);
  }
  v60 = *((_QWORD *)this + 10);
  if (v60)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v60, a2, a3, a4, a5, a6, a7, a8);
  }
  v61 = *((_QWORD *)this + 9);
  if (v61)
  {
    v62 = *(unsigned int *)(v61 - 4);
    if ((_DWORD)v62)
    {
      v63 = (JSC::Debugger::Script *)(v61 + 8);
      do
      {
        if (*((_DWORD *)v63 - 2) != -1)
          JSC::Debugger::Script::~Script(v63, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        v63 = (JSC::Debugger::Script *)((char *)v63 + 72);
        --v62;
      }
      while (v62);
    }
    WTF::fastFree(v61 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v64 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v64)
  {
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  v65 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v65)
    WTF::fastFree(v65, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t Inspector::InspectorDebuggerAgent::willDestroyFrontendAndBackend(uint64_t a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 424))(a1, a2 == 0);
  return result;
}

void Inspector::InspectorDebuggerAgent::internalEnable(Inspector::InspectorDebuggerAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  StringView v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  _DWORD *v61;
  _BYTE v62[24];
  char *v63;
  StringView v64;
  StringView v65;

  *((_BYTE *)this + 248) = 1;
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v9[25] = (uint64_t)this + 24;
  v10 = (char *)this + 32;
  v11 = v9 + 24;
  v12 = v9[24];
  if (!v12)
  {
    v63 = v10;
    WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v11, (uint64_t *)&v63, a4, a5, a6, a7, a8, (uint64_t)v62);
LABEL_5:
    (*(void (**)(uint64_t *))(*v9 + 24))(v9);
    goto LABEL_6;
  }
  v13 = *(_DWORD *)(v12 - 12);
  v63 = v10;
  WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v11, (uint64_t *)&v63, a4, a5, a6, a7, a8, (uint64_t)v62);
  if (!v13)
    goto LABEL_5;
LABEL_6:
  v19 = *((_QWORD *)this + 12);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 12);
    if ((_DWORD)v20)
    {
      if (v20 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v21 = WTF::fastMalloc((WTF *)(8 * v20));
      v29 = v21;
      v30 = *((_QWORD *)this + 12);
      if (v30 && *(_DWORD *)(v30 - 12))
      {
        v31 = *(unsigned int *)(v30 - 4);
        if ((_DWORD)v31)
        {
          v32 = 8 * v31;
          v33 = (uint64_t *)*((_QWORD *)this + 12);
          while ((unint64_t)(*v33 + 1) <= 1)
          {
            ++v33;
            v32 -= 8;
            if (!v32)
              goto LABEL_26;
          }
        }
        else
        {
          v33 = (uint64_t *)*((_QWORD *)this + 12);
        }
        v34 = (uint64_t *)(v30 + 8 * v31);
        if (v33 != v34)
        {
          v35 = 0;
          v36 = *v33;
          v37 = 1;
LABEL_19:
          v38 = v37;
          *(_QWORD *)(v21 + 8 * v35++) = v36;
          while (++v33 != v34)
          {
            v36 = *v33;
            if ((unint64_t)(*v33 + 1) > 1)
            {
              ++v37;
              if (v33 != v34)
                goto LABEL_19;
              break;
            }
          }
          if (v35)
          {
            v39 = 8 * v38;
            v40 = (uint64_t *)v21;
            do
            {
              v41 = *v40++;
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
              v39 -= 8;
            }
            while (v39);
          }
        }
      }
LABEL_26:
      WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    v44 = (_DWORD *)(v42 + 72 * v43);
    if (*(_DWORD *)(v42 - 12))
    {
      v45 = (_DWORD *)*((_QWORD *)this + 9);
      if ((_DWORD)v43)
      {
        v46 = 72 * v43;
        v45 = (_DWORD *)*((_QWORD *)this + 9);
        while ((*v45 + 1) <= 1)
        {
          v45 += 18;
          v46 -= 72;
          if (!v46)
          {
            v45 = v44;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_34;
    }
    v45 = (_DWORD *)(v42 + 72 * v43);
  }
  else
  {
    v45 = 0;
    LODWORD(v43) = 0;
  }
  v44 = (_DWORD *)(v42 + 72 * v43);
  if (v42)
  {
LABEL_34:
    v47 = (_DWORD *)(v42 + 72 * *(unsigned int *)(v42 - 4));
    goto LABEL_39;
  }
  v47 = 0;
LABEL_39:
  if (v47 != v45)
  {
    do
    {
      v49 = (uint64_t *)(v45 + 6);
      v48 = *((_QWORD *)v45 + 3);
      if (!v48)
        goto LABEL_59;
      LODWORD(v64.m_characters) = *(_DWORD *)(v48 + 4);
      HIDWORD(v64.m_characters) = (*(_DWORD *)(v48 + 16) >> 2) & 1;
      *(_QWORD *)&v64.m_length = "__InjectedScript_";
      v15.m_characters = (void *)0x100000011;
      if (!WTF::startsWith(*(int8x16_t **)(v48 + 8), v64, v15))
        goto LABEL_59;
      v50 = *v49;
      if (*v49
        && (LODWORD(v65.m_characters) = *(_DWORD *)(v50 + 4),
            HIDWORD(v65.m_characters) = (*(_DWORD *)(v50 + 16) >> 2) & 1,
            *(_QWORD *)&v65.m_length = ".js",
            v15.m_characters = (void *)0x100000003,
            WTF::endsWith(*(WTF **)(v50 + 8), v65, v15)))
      {
        v51 = *((_BYTE *)this + 250) == 0;
        v52 = v51 << 32;
      }
      else
      {
LABEL_59:
        if ((Inspector::InspectorDebuggerAgent::shouldBlackboxURL(this, (const WTF::String *)(v45 + 6), v14, (uint64_t)v15.m_characters, *(uint64_t *)&v15.m_length, v16, v17, v18) & 1) != 0|| Inspector::InspectorDebuggerAgent::shouldBlackboxURL(this, (const WTF::String *)(v45 + 2), v53, v54, v55, v56, v57, v58))
        {
          v51 = 0;
          v52 = 0x100000000;
        }
        else
        {
          v52 = 0;
          v51 = 0;
        }
      }
      v60 = *v45;
      v59 = v45 + 18;
      JSC::Debugger::setBlackboxType(*((_QWORD *)this + 7), v60, v51 | v52);
      v61 = v44;
      if (v59 != v44)
      {
        v61 = v59;
        while ((*v61 + 1) <= 1)
        {
          v61 += 18;
          if (v61 == v44)
          {
            v61 = v44;
            break;
          }
        }
      }
      v45 = v61;
    }
    while (v61 != v47);
  }
}

uint64_t Inspector::InspectorDebuggerAgent::shouldBlackboxURL(Inspector::InspectorDebuggerAgent *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v8;
  uint64_t result;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  JSC::Yarr::BytecodePattern *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  size_t v37;
  WTF *v38;

  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v10 = *((unsigned int *)this + 23);
      if ((_DWORD)v10)
      {
        v12 = (char *)*((_QWORD *)this + 10);
        v13 = 16 * v10 - 16;
        while (1)
        {
          Inspector::ContentSearchUtilities::createRegularExpressionForSearchString((const WTF::String *)v12, v12[8], v12[9] == 0, a4, a5, a6, a7, a8, (uint64_t *)&v38);
          v17 = *(_QWORD *)a2;
          if (*(_QWORD *)a2)
          {
            v18 = *(unsigned int *)(v17 + 16);
            v19 = *(void **)(v17 + 8);
            v17 = *(unsigned int *)(v17 + 4);
            v20 = (v18 >> 2) & 1;
          }
          else
          {
            v19 = 0;
            v20 = 1;
          }
          v23 = JSC::Yarr::RegularExpression::match((uint64_t *)&v38, v19, v17 | (v20 << 32), 0, 0, v14, v15, v16);
          v8 = v23 != -1;
          v24 = v38;
          v38 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              v26 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v24 + 3);
              *((_QWORD *)v24 + 3) = 0;
              if (v26)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v26, v21, v22, a4, a5, a6, a7, a8);
                WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
              }
              v35 = (_QWORD *)*((_QWORD *)v24 + 1);
              if (v35)
              {
                v36 = (void *)v35[5];
                v37 = v35[6];
                v35[5] = 0;
                v35[6] = 0;
                v35[4] = 0;
                result = munmap(v36, v37);
                if ((_DWORD)result == -1)
                {
                  __break(0xC471u);
                  return result;
                }
              }
              WTF::fastFree((unint64_t)v24, v21, v22, a4, a5, a6, a7, a8);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          if (v23 == -1)
          {
            v12 += 16;
            v25 = v13;
            v13 -= 16;
            if (v25)
              continue;
          }
          return v8;
        }
      }
    }
  }
  return 0;
}

uint64_t Inspector::InspectorDebuggerAgent::internalDisable(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  WTF::AtomStringImpl *v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _WORD *v49;
  __int16 v50;

  v9 = this;
  v10 = *(_QWORD *)(this + 96);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 12);
    if ((_DWORD)v11)
    {
      if (v11 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v12 = WTF::fastMalloc((WTF *)(8 * v11));
      v20 = v12;
      v21 = *(_QWORD *)(v9 + 96);
      if (v21 && *(_DWORD *)(v21 - 12))
      {
        v22 = *(unsigned int *)(v21 - 4);
        if ((_DWORD)v22)
        {
          v23 = 8 * v22;
          v24 = *(uint64_t **)(v9 + 96);
          while ((unint64_t)(*v24 + 1) <= 1)
          {
            ++v24;
            v23 -= 8;
            if (!v23)
              goto LABEL_21;
          }
        }
        else
        {
          v24 = *(uint64_t **)(v9 + 96);
        }
        v25 = (uint64_t *)(v21 + 8 * v22);
        if (v24 != v25)
        {
          v26 = 0;
          v27 = *v24;
          v28 = 1;
LABEL_14:
          v29 = v28;
          *(_QWORD *)(v12 + 8 * v26++) = v27;
          while (++v24 != v25)
          {
            v27 = *v24;
            if ((unint64_t)(*v24 + 1) > 1)
            {
              ++v28;
              if (v24 != v25)
                goto LABEL_14;
              break;
            }
          }
          if (v26)
          {
            v30 = 8 * v29;
            v31 = (uint64_t *)v12;
            do
            {
              v32 = *v31++;
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
              v30 -= 8;
            }
            while (v30);
          }
        }
      }
LABEL_21:
      WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  v33 = *(_QWORD **)(v9 + 56);
  v33[25] = 0;
  JSC::Debugger::removeObserver(v33, (JSC::Debugger::Observer *)(v9 + 32), a2, a4, a5, a6, a7, a8);
  Inspector::InspectorDebuggerAgent::clearInspectorBreakpointState((Inspector::InspectorDebuggerAgent *)v9, v34, v35, v36, v37, v38, v39, v40, v41);
  if ((a2 & 1) == 0)
  {
    v49 = *(_WORD **)(v9 + 56);
    v50 = v49[24];
    if ((v50 & 0x40) != 0)
    {
      v49[24] = v50 & 0xFFBF;
      (*(void (**)(_WORD *))(*(_QWORD *)v49 + 40))(v49);
    }
  }
  this = Inspector::InspectorDebuggerAgent::clearAsyncStackTraceData((Inspector::InspectorDebuggerAgent *)v9, v42, v43, v44, v45, v46, v47, v48);
  *(_BYTE *)(v9 + 248) = 0;
  return this;
}

void Inspector::InspectorDebuggerAgent::clearInspectorBreakpointState(Inspector::InspectorDebuggerAgent *this, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  char v102;
  WTF::StringImpl *v103;

  v10 = *((_QWORD *)this + 16);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (_QWORD *)(v10 + 24 * v11);
    if (*(_DWORD *)(v10 - 12))
    {
      v13 = (_QWORD *)*((_QWORD *)this + 16);
      if ((_DWORD)v11)
      {
        v14 = 24 * v11;
        v13 = (_QWORD *)*((_QWORD *)this + 16);
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 3;
          v14 -= 24;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v13 = (_QWORD *)(v10 + 24 * v11);
  }
  else
  {
    v13 = 0;
    LODWORD(v11) = 0;
  }
  v12 = (_QWORD *)(v10 + 24 * v11);
  if (!v10)
  {
    v15 = 0;
    goto LABEL_15;
  }
LABEL_8:
  v15 = (_QWORD *)(v10 + 24 * *(unsigned int *)(v10 - 4));
  v16 = *(unsigned int *)(v10 - 12);
  if (!(_DWORD)v16)
  {
LABEL_15:
    v17 = 0;
    goto LABEL_16;
  }
  if (v16 >> 29)
  {
    __break(0xC471u);
    return;
  }
  v17 = WTF::fastMalloc((WTF *)(8 * v16));
LABEL_16:
  if (v15 != v13)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = v19;
      v21 = (_DWORD *)*v13;
      if (*v13)
        *v21 += 2;
      *(_QWORD *)(v17 + 8 * v18) = v21;
      v22 = v13 + 3;
      v13 = v12;
      if (v22 != v12)
      {
        v13 = v22;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 3;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
      ++v18;
      v19 = v20 + 1;
    }
    while (v13 != v15);
    if (v18)
    {
      v23 = 8 * v20;
      v24 = (WTF::StringImpl **)v17;
      do
      {
        Inspector::InspectorDebuggerAgent::removeBreakpoint(this, v24, a3, a4, a5, a6, a7, a8, &v101, a9);
        if (v102)
        {
          v25 = v101;
          v101 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
        }
        ++v24;
        v23 -= 8;
      }
      while (v23);
      v34 = 8 * v20;
      v35 = (WTF::StringImpl **)v17;
      do
      {
        v36 = *v35;
        *v35 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        ++v35;
        v34 -= 8;
      }
      while (v34);
    }
  }
  if (v17)
    WTF::fastFree(v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v45 = *((_QWORD *)this + 15);
  if (v45)
  {
    *((_QWORD *)this + 15) = 0;
    v46 = *(unsigned int *)(v45 - 4);
    if ((_DWORD)v46)
    {
      v47 = (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v45 + 8);
      do
      {
        if (*((_QWORD *)v47 - 1) != -1)
        {
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint(v47, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v48 = (WTF::StringImpl *)*((_QWORD *)v47 - 1);
          *((_QWORD *)v47 - 1) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
        }
        v47 = (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)((char *)v47 + 80);
        --v46;
      }
      while (v46);
    }
    WTF::fastFree(v45 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v57 = (WTF::AtomStringImpl *)*((_QWORD *)this + 18);
  if (v57)
  {
    JSC::Debugger::removeBreakpoint(*((_QWORD **)this + 7), (uint64_t)v57, (uint64_t)a3, a4, a5, a6, a7, a8);
    v58 = (WTF *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v58)
      WTF::RefCounted<JSC::Breakpoint>::deref(v58, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v59 = (WTF *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v59)
    WTF::RefCounted<JSC::Breakpoint>::deref(v59, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
  v60 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v60)
    WTF::RefCounted<JSC::Breakpoint>::deref(v60, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_36))
  {
    goto LABEL_65;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_36);
LABEL_65:
  if ((byte_1ECF58871 & 1) != 0)
  {
    v62 = qword_1ECF58878;
    v63 = dword_1ECF58884;
    v64 = qword_1ECF58878 + 8 * dword_1ECF58884;
    v65 = 0;
    v66 = (unint64_t *)v64;
    if (!dword_1ECF58884)
      goto LABEL_100;
    v67 = qword_1ECF58878 + 8 * dword_1ECF58884;
    while (1)
    {
      v68 = *(_QWORD *)v62;
      v69 = *(uint64_t **)(*(_QWORD *)v62 + 8);
      if (v69)
      {
        v70 = *v69;
        if (*v69)
        {
          if ((v69[1] & 3) == 0)
          {
            if ((v70 & 8) != 0)
              v74 = (_QWORD *)(v70 - 16);
            else
              v74 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFC000 | 8);
            if (*v74 != *(_QWORD *)(*((_QWORD *)this + 7) + 16))
              goto LABEL_81;
            v75 = *((unsigned int *)this + 61);
            if (!(_DWORD)v75)
              goto LABEL_81;
            v76 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)*((_QWORD *)this + 29);
            v77 = 48 * v75;
            while (2)
            {
              v78 = *(WTF::StringImpl **)(**(_QWORD **)(*(_QWORD *)v62 + 8) + 64);
              if (v78)
                *(_DWORD *)v78 += 2;
              v103 = v78;
              v79 = Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(v76, &v103, a3, a4, a5, a6, a7, a8);
              v80 = v103;
              v103 = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 != 2)
                {
                  *(_DWORD *)v80 -= 2;
                  goto LABEL_94;
                }
                WTF::StringImpl::~StringImpl(v80, v57, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
                if (!v79)
                {
LABEL_96:
                  v76 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)((char *)v76 + 48);
                  v77 -= 48;
                  if (!v77)
                    goto LABEL_81;
                  continue;
                }
              }
              else
              {
LABEL_94:
                if (!v79)
                  goto LABEL_96;
              }
              break;
            }
            v68 = *(_QWORD *)v62;
            v81 = *(_QWORD *)(*(_QWORD *)v62 + 64) - 1;
            *(_QWORD *)(*(_QWORD *)v62 + 64) = v81;
            if (!v81)
              goto LABEL_71;
            goto LABEL_96;
          }
        }
      }
LABEL_71:
      v71 = v62;
      if (v67 == qword_1ECF58878 + 8 * dword_1ECF58884)
        goto LABEL_76;
      if (v66 == (unint64_t *)v62)
        break;
      WTF::VectorMover<false,WTF::Box<Inspector::ReplacedThunk>>::moveOverlapping(v66, v62, v67, a4, a5, a6, a7, a8);
      v67 += v62 - (_QWORD)v66;
      v68 = *(_QWORD *)v62;
      *(_QWORD *)v62 = 0;
      v66 = (unint64_t *)(v62 + 8);
      if (v68)
        goto LABEL_77;
LABEL_80:
      ++v65;
LABEL_81:
      v62 += 8;
      if (v62 >= v64)
      {
        v62 = qword_1ECF58878;
        v63 = dword_1ECF58884;
        v64 = v67;
        goto LABEL_100;
      }
    }
    v71 = v67;
LABEL_76:
    *(_QWORD *)v62 = 0;
    v66 = (unint64_t *)(v62 + 8);
    v67 = v71;
    do
    {
LABEL_77:
      v72 = __ldaxr((unsigned int *)v68);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, (unsigned int *)v68));
    if (!v73)
    {
      atomic_store(1u, (unsigned int *)v68);
      Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v68 + 8), (uint64_t)v57, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v68, v90, v91, v92, v93, v94, v95, v96);
    }
    goto LABEL_80;
  }
  v63 = 0;
  v62 = 0;
  v64 = 0;
  v66 = 0;
  v65 = 0;
  *(_QWORD *)&dword_1ECF58880 = 0;
  qword_1ECF58878 = 0;
  byte_1ECF58871 = 1;
LABEL_100:
  v97 = (unint64_t *)(v62 + 8 * v63);
  if (v66 != v97)
  {
    WTF::VectorMover<false,WTF::Box<Inspector::ReplacedThunk>>::moveOverlapping(v66, (uint64_t)v97, v64, a4, a5, a6, a7, a8);
    v63 = dword_1ECF58884;
  }
  dword_1ECF58884 = v63 - v65;
  v98 = __ldxr((unsigned __int8 *)&_MergedGlobals_36);
  if (v98 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_36))
      goto LABEL_107;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_36, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_107:
  if (*((_DWORD *)this + 60))
  {
    v99 = *((_DWORD *)this + 61);
    if (v99)
    {
      WTF::VectorDestructor<true,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::destruct(*((char **)this + 29), (char *)(*((_QWORD *)this + 29) + 48 * v99), (uint64_t)a3, a4, a5, a6, a7, a8);
      *((_DWORD *)this + 61) = 0;
    }
    v100 = *((_QWORD *)this + 29);
    if (v100)
    {
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
      WTF::fastFree(v100, v97, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  Inspector::InspectorDebuggerAgent::clearDebuggerBreakpointState(this, a9, (uint64_t)v97, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t Inspector::InspectorDebuggerAgent::clearAsyncStackTraceData(Inspector::InspectorDebuggerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  Inspector::AsyncStackTrace **v11;
  Inspector::AsyncStackTrace *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 23) = 0;
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (Inspector::AsyncStackTrace **)(v9 + 16);
      do
      {
        if (*((_DWORD *)v11 - 4) != -1)
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              Inspector::AsyncStackTrace::~AsyncStackTrace(v12);
              WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
        }
        v11 += 3;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_DWORD *)this + 50))
  {
    if (*((_DWORD *)this + 51))
      *((_DWORD *)this + 51) = 0;
    v21 = *((_QWORD *)this + 24);
    if (v21)
    {
      *((_QWORD *)this + 24) = 0;
      *((_DWORD *)this + 50) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return (*(uint64_t (**)(Inspector::InspectorDebuggerAgent *))(*(_QWORD *)this + 464))(this);
}

uint64_t Inspector::InspectorDebuggerAgent::enable@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;

  if ((*(unsigned int (**)(Inspector::InspectorDebuggerAgent *))(*(_QWORD *)this + 48))(this))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x1F00000002;
    *(_QWORD *)(result + 8) = "Debugger domain already enabled";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a2 = result;
    v5 = 1;
  }
  else
  {
    result = (*(uint64_t (**)(Inspector::InspectorDebuggerAgent *))(*(_QWORD *)this + 416))(this);
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::enable@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t result;
  char v5;

  v3 = (char *)this - 16;
  if ((*(unsigned int (**)(char *))(*((_QWORD *)this - 2) + 48))((char *)this - 16))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x1F00000002;
    *(_QWORD *)(result + 8) = "Debugger domain already enabled";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a2 = result;
    v5 = 1;
  }
  else
  {
    result = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 416))(v3);
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t Inspector::InspectorDebuggerAgent::disable@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(Inspector::InspectorDebuggerAgent *, _QWORD))(*(_QWORD *)this + 424))(this, 0);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::disable@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this - 2) + 424))((char *)this - 16, 0);
  *a2 = 0;
  a2[8] = 0;
  return result;
}

uint64_t Inspector::InspectorDebuggerAgent::breakpointsActive(Inspector::InspectorDebuggerAgent *this)
{
  return (*(unsigned __int16 *)(*((_QWORD *)this + 7) + 48) >> 6) & 1;
}

uint64_t Inspector::InspectorDebuggerAgent::setAsyncStackTraceDepth@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v10;

  if (*(_DWORD *)(this + 208) != (_DWORD)a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      this = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)this = 0x1900000002;
      *(_QWORD *)(this + 8) = "Unexpected negative depth";
      *(_DWORD *)(this + 16) = 4;
      *(_QWORD *)a9 = this;
      v10 = 1;
      goto LABEL_6;
    }
    *(_DWORD *)(this + 208) = (_DWORD)a2;
    if (!(_DWORD)a2)
      this = Inspector::InspectorDebuggerAgent::clearAsyncStackTraceData((Inspector::InspectorDebuggerAgent *)this, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = 0;
  *(_BYTE *)a9 = 0;
LABEL_6:
  *(_BYTE *)(a9 + 8) = v10;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setAsyncStackTraceDepth@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v10;

  if (*(_DWORD *)(this + 192) != (_DWORD)a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      this = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)this = 0x1900000002;
      *(_QWORD *)(this + 8) = "Unexpected negative depth";
      *(_DWORD *)(this + 16) = 4;
      *(_QWORD *)a9 = this;
      v10 = 1;
      goto LABEL_6;
    }
    *(_DWORD *)(this + 192) = (_DWORD)a2;
    if (!(_DWORD)a2)
      this = Inspector::InspectorDebuggerAgent::clearAsyncStackTraceData((Inspector::InspectorDebuggerAgent *)(this - 16), a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = 0;
  *(_BYTE *)a9 = 0;
LABEL_6:
  *(_BYTE *)(a9 + 8) = v10;
  return this;
}

_WORD *Inspector::InspectorDebuggerAgent::setBreakpointsActive@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  _WORD *result;
  __int16 v5;
  __int16 v6;

  result = (_WORD *)*((_QWORD *)this + 7);
  v5 = result[24];
  if (((((v5 & 0x40) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 64;
    else
      v6 = 0;
    result[24] = v5 & 0xFFBF | v6;
    result = (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)result + 40))(result);
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

_WORD *`non-virtual thunk to'Inspector::InspectorDebuggerAgent::setBreakpointsActive@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  _WORD *result;
  __int16 v5;
  __int16 v6;

  result = (_WORD *)*((_QWORD *)this + 5);
  v5 = result[24];
  if (((((v5 & 0x40) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v6 = 64;
    else
      v6 = 0;
    result[24] = v5 & 0xFFBF | v6;
    result = (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)result + 40))(result);
  }
  *a3 = 0;
  a3[8] = 0;
  return result;
}

uint64_t Inspector::InspectorDebuggerAgent::isPaused(Inspector::InspectorDebuggerAgent *this)
{
  return (*(unsigned __int16 *)(*((_QWORD *)this + 7) + 48) >> 5) & 1;
}

uint64_t Inspector::InspectorDebuggerAgent::setSuppressAllPauses(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(*(_QWORD *)(this + 56) + 48) = *(_WORD *)(*(_QWORD *)(this + 56) + 48) & 0xFEFF | v2;
  return this;
}

void Inspector::InspectorDebuggerAgent::updatePauseReasonAndData(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;

  v9 = (int)a2;
  v11 = *(_DWORD *)(a1 + 156);
  if (v11 != 302)
  {
    *(_DWORD *)(a1 + 168) = v11;
    v12 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    v13 = *(WTF **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::JSONImpl::Value::operator delete(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v13;
    }
  }
  *(_DWORD *)(a1 + 156) = v9;
  v14 = *a3;
  *a3 = 0;
  v15 = *(WTF **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::JSONImpl::Value::operator delete(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v15;
  }
}

void Inspector::InspectorDebuggerAgent::buildBreakpointPauseReason(Inspector::InspectorDebuggerAgent *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  _BYTE v50[24];

  v4 = *((_QWORD *)this + 16);
  if (!v4)
  {
    v7 = 0;
    LODWORD(v5) = 0;
LABEL_10:
    v6 = v4 + 24 * v5;
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 24 * v5;
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = v4 + 24 * v5;
    goto LABEL_10;
  }
  v7 = *((_QWORD *)this + 16);
  if ((_DWORD)v5)
  {
    v8 = 24 * v5;
    v7 = *((_QWORD *)this + 16);
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 24;
      v8 -= 24;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4)
    v4 += 24 * *(unsigned int *)(v4 - 4);
  if (v4 == v7)
  {
LABEL_24:
    *a3 = 0;
    return;
  }
  while (1)
  {
    v9 = *(unsigned int *)(v7 + 20);
    if ((_DWORD)v9)
      break;
LABEL_18:
    v12 = v7 + 24;
    v7 = v6;
    if (v12 != v6)
    {
      v7 = v12;
      while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v7 == v4)
      goto LABEL_24;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = 8 * v9;
  while (*(_QWORD *)(*(_QWORD *)v10 + 8) != a2)
  {
    v10 += 8;
    v11 -= 8;
    if (!v11)
      goto LABEL_18;
  }
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v13 = 0x500000001;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0xC00000002;
  *(_QWORD *)(v14 + 8) = "breakpointId";
  *(_DWORD *)(v14 + 16) = 4;
  v48 = (WTF::StringImpl *)v14;
  v15 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v15 = 0x400000001;
  v21 = *(_DWORD **)v7;
  *((_QWORD *)v15 + 1) = *(_QWORD *)v7;
  if (v21)
    *v21 += 2;
  v49 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), (WTF::AtomStringImpl *)&v48, (const WTF::StringImpl *)&v49, v16, v17, v18, v19, v20, (uint64_t)v50);
  if (v50[16])
  {
    v29 = (uint64_t *)(v13 + 24);
    v30 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(v13 + 32))
    {
      v45 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v48);
      v30 = *(unsigned int *)(v13 + 36);
      v46 = *(_QWORD *)(v13 + 24);
      v47 = *v45;
      if (*v45)
        *v47 += 2;
      *(_QWORD *)(v46 + 8 * v30) = v47;
    }
    else
    {
      v31 = *v29;
      v32 = v48;
      if (v48)
        *(_DWORD *)v48 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(v13 + 36) = v30 + 1;
  }
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete(v33, v22, v23, v24, v25, v26, v27, v28);
    else
      --*(_DWORD *)v33;
  }
  v34 = v48;
  v48 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = 0;
  v36 = *(_DWORD *)(v13 + 4);
  if (v36 >= 5 && v36 != 6)
  {
    if (v36 != 5)
    {
      __break(0xC471u);
      return;
    }
    ++*(_DWORD *)v13;
    v35 = v13;
  }
  *a3 = v35;
  if (*(_DWORD *)v13 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v13, v22, v23, v24, v25, v26, v27, v28);
  else
    --*(_DWORD *)v13;
}

void Inspector::InspectorDebuggerAgent::buildExceptionPauseReason(uint64_t a1@<X1>, uint64_t a2@<X2>, WTF **a3@<X8>)
{
  _QWORD *v5;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  unsigned int v17;
  WTF *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;

  if (!a1)
    goto LABEL_16;
  v5 = *(_QWORD **)(a2 + 24);
  if (!v5 || !*v5)
    goto LABEL_16;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "backtrace";
  *(_DWORD *)(v7 + 16) = 4;
  v28 = (WTF::StringImpl *)v7;
  Inspector::InjectedScript::wrapObject(a2, a1, (const WTF::String *)&v28, 0, &v29);
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = v29;
  if (v29)
  {
    v17 = *((_DWORD *)v29 + 1);
    if (v17 < 5 || v17 == 6)
    {
      v19 = 0;
    }
    else
    {
      if (v17 != 5)
      {
        __break(0xC471u);
        return;
      }
      ++*(_DWORD *)v29;
      v19 = v16;
    }
    *a3 = v19;
    v29 = 0;
    if (*(_DWORD *)v16 == 1)
      WTF::JSONImpl::Value::operator delete(v16, v8, v9, v10, v11, v12, v13, v14);
    else
      --*(_DWORD *)v16;
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
}

void Inspector::InspectorDebuggerAgent::handleConsoleAssert(Inspector::InspectorDebuggerAgent *this, const WTF::String *a2)
{
  WTF::AtomStringImpl *v4;
  JSC::Wasm::NameSection *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF *v29;
  int v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD **v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  WTF *v54[2];
  char v55;

  if ((*(_WORD *)(*((_QWORD *)this + 7) + 48) & 0x40) == 0 || !*((_QWORD *)this + 27))
    return;
  v11 = WTF::fastMalloc((WTF *)0x28);
  v12 = 0x500000001;
  *(_QWORD *)v11 = 0x500000001;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  if (!*(_QWORD *)a2)
  {
    v27 = 1;
    v28 = 2;
LABEL_22:
    *(_DWORD *)v11 = v28;
    goto LABEL_23;
  }
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x700000002;
  *(_QWORD *)(v13 + 8) = "message";
  *(_DWORD *)(v13 + 16) = 4;
  v52 = (WTF::StringImpl *)v13;
  v14 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = 0x400000001;
  v20 = *(_DWORD **)a2;
  *((_QWORD *)v14 + 1) = *(_QWORD *)a2;
  if (v20)
    *v20 += 2;
  v53 = v14;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v11 + 16), (WTF::AtomStringImpl *)&v52, (const WTF::StringImpl *)&v53, v15, v16, v17, v18, v19, (uint64_t)v54);
  if (v55)
  {
    v21 = (uint64_t *)(v11 + 24);
    v22 = *(unsigned int *)(v11 + 36);
    if ((_DWORD)v22 == *(_DWORD *)(v11 + 32))
    {
      v49 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v52);
      v22 = *(unsigned int *)(v11 + 36);
      v50 = *(_QWORD *)(v11 + 24);
      v51 = *v49;
      if (*v49)
        *v51 += 2;
      *(_QWORD *)(v50 + 8 * v22) = v51;
    }
    else
    {
      v23 = *v21;
      v24 = v52;
      if (v52)
        *(_DWORD *)v52 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *(_DWORD *)(v11 + 36) = v22 + 1;
  }
  v25 = v53;
  v53 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
    else
      --*(_DWORD *)v25;
  }
  v26 = v52;
  v52 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (*(_DWORD *)(v11 + 4) != 5)
  {
    __break(0xC471u);
    return;
  }
  v27 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v28 = v27 + 1;
  if (v27 != -1)
    goto LABEL_22;
  WTF::JSONImpl::Value::operator delete((WTF *)v11, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
  v27 = *(_DWORD *)v11 - 1;
LABEL_23:
  if (v27)
    *(_DWORD *)v11 = v27;
  else
    WTF::JSONImpl::Value::operator delete((WTF *)v11, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
  v29 = (WTF *)*((_QWORD *)this + 27);
  if (v29)
    ++*(_DWORD *)v29;
  v54[0] = v29;
  v30 = *((_DWORD *)this + 39);
  if (v30 != 302)
  {
    *((_DWORD *)this + 42) = v30;
    v31 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v32 = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v31;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::JSONImpl::Value::operator delete(v32, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
      else
        --*(_DWORD *)v32;
    }
  }
  *((_DWORD *)this + 39) = 116;
  v33 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v11;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete(v33, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
    else
      --*(_DWORD *)v33;
  }
  JSC::Debugger::breakProgram(*((_QWORD *)this + 7), (WTF::AtomStringImpl *)v54, v5, v6, v7, v8, v9, v10, *(double *)&v12);
  if (v54[0])
    WTF::RefCounted<JSC::Breakpoint>::deref(v54[0], v34, v35, v36, v37, v38, v39, v40);
}

void Inspector::InspectorDebuggerAgent::breakProgram(uint64_t a1, WTF::AtomStringImpl *a2, JSC::Wasm::NameSection *a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v11;
  int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;

  v11 = (int)a2;
  v13 = *(_DWORD *)(a1 + 156);
  if (v13 != 302)
  {
    *(_DWORD *)(a1 + 168) = v13;
    v14 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    v15 = *(WTF **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::JSONImpl::Value::operator delete(v15, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v15;
    }
  }
  *(_DWORD *)(a1 + 156) = v11;
  v16 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v17 = *(WTF **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::JSONImpl::Value::operator delete(v17, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v17;
  }
  JSC::Debugger::breakProgram(*(_QWORD *)(a1 + 56), a4, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
}

uint64_t Inspector::InspectorDebuggerAgent::asyncCallIdentifier(uint64_t result)
{
  return result;
}

void Inspector::InspectorDebuggerAgent::didScheduleAsyncCall(uint64_t a1, JSC::VM **this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::JSGlobalObject *v9;
  char v11;
  int v13;
  Inspector::ScriptCallStack *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  Inspector::AsyncStackTrace *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  Inspector::AsyncStackTrace *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Inspector::AsyncStackTrace *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Inspector::ScriptCallStack *v78;

  v9 = (JSC::JSGlobalObject *)*(int *)(a1 + 208);
  if ((_DWORD)v9 && (*(_WORD *)(*(_QWORD *)(a1 + 56) + 48) & 0x40) != 0)
  {
    v11 = a5;
    v13 = a3;
    Inspector::createScriptCallStack(this, v9, a3, a4, a5, a6, a7, a8, (uint64_t *)&v78, a9);
    v14 = v78;
    if (!*((_DWORD *)v78 + 5))
    {
      v78 = 0;
      goto LABEL_8;
    }
    v15 = *(unsigned int *)(a1 + 204);
    if (!(_DWORD)v15
      || ((v16 = *(_QWORD *)(a1 + 184),
           v17 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v16, *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16 * v15 - 16), *(_QWORD *)(*(_QWORD *)(a1 + 192) + 16 * v15 - 8)), !v16)? (v18 = 0): (v18 = (int *)(v16 + 24 * *(unsigned int *)(v16 - 4))), v18 == v17))
    {
      v19 = 0;
    }
    else
    {
      v19 = (Inspector::AsyncStackTrace *)*((_QWORD *)v17 + 2);
      if (v19)
        ++*(_DWORD *)v19;
    }
    v20 = WTF::fastMalloc((WTF *)0x20);
    v26 = v20;
    *(_DWORD *)v20 = 1;
    v27 = (uint64_t)v78;
    v78 = 0;
    *(_QWORD *)(v20 + 8) = v27;
    if (v19)
    {
      ++*(_DWORD *)v19;
      *(_DWORD *)(v20 + 24) = 0;
      ++*((_DWORD *)v19 + 6);
      *(_QWORD *)(v20 + 16) = v19;
      *(_WORD *)(v20 + 28) = 0;
      *(_BYTE *)(v20 + 30) = v11;
      if (*(_DWORD *)v19 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v19);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    else
    {
      *(_QWORD *)(v20 + 22) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      *(_BYTE *)(v20 + 30) = v11;
    }
    v30 = *(_QWORD *)(a1 + 184);
    v29 = (uint64_t *)(a1 + 184);
    v28 = v30;
    if (v30
      || (WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::rehash(v29, 8uLL, 0, v21, v22, v23, v24, v25), (v28 = *v29) != 0))
    {
      v31 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
    v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
    v34 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
    v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
    v37 = v31 & ((0xD7862706ELL
                * (unint64_t)(277951225 * (v33 ^ HIWORD(v33))
                                   + 95187966 * ((v36 >> 31) ^ v36))) >> 4);
    v38 = v28 + 24 * v37;
    v39 = *(_DWORD *)v38;
    v40 = *(_QWORD *)(v38 + 8);
    if (*(_DWORD *)v38)
      v41 = 0;
    else
      v41 = v40 == 0;
    if (!v41)
    {
      v42 = 0;
      v43 = 1;
      while (v39 != v13 || v40 != a4)
      {
        if (v39 == -1)
          v42 = (_QWORD *)v38;
        v37 = (v37 + v43) & v31;
        v38 = v28 + 24 * v37;
        v39 = *(_DWORD *)v38;
        v40 = *(_QWORD *)(v38 + 8);
        ++v43;
        if (*(_DWORD *)v38)
          v44 = 0;
        else
          v44 = v40 == 0;
        if (v44)
        {
          if (v42)
          {
            *v42 = 0;
            v42[1] = 0;
            v42[2] = 0;
            --*(_DWORD *)(*v29 - 16);
            v38 = (uint64_t)v42;
          }
          goto LABEL_36;
        }
      }
      v53 = *(Inspector::AsyncStackTrace **)(v38 + 16);
      *(_QWORD *)(v38 + 16) = v26;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
        {
          Inspector::AsyncStackTrace::~AsyncStackTrace(v53);
          WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
        }
        else
        {
          --*(_DWORD *)v53;
        }
      }
LABEL_56:
      v14 = v78;
      v78 = 0;
      if (!v14)
        return;
LABEL_8:
      WTF::RefCounted<Inspector::ScriptCallStack>::deref(v14);
      return;
    }
LABEL_36:
    *(_DWORD *)v38 = v13;
    v45 = *(Inspector::AsyncStackTrace **)(v38 + 16);
    *(_QWORD *)(v38 + 8) = a4;
    *(_QWORD *)(v38 + 16) = v26;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v45);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        --*(_DWORD *)v45;
      }
    }
    v46 = *v29;
    if (*v29)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v29;
    if (*v29)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        goto LABEL_56;
    }
    else
    {
      if (3 * v51 > 4 * v50)
        goto LABEL_56;
      if (!(_DWORD)v51)
      {
        v52 = 8;
        goto LABEL_55;
      }
    }
    v52 = ((_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51)));
LABEL_55:
    WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::rehash(v29, v52, v38, v21, v22, v23, v24, v25);
    goto LABEL_56;
  }
}

void Inspector::InspectorDebuggerAgent::didCancelAsyncCall(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (*(_DWORD *)(a1 + 208))
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = *(_QWORD *)(a1 + 184);
    v8 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v7, a2, a3);
    v9 = v7 ? v7 + 24 * *(unsigned int *)(v7 - 4) : 0;
    if ((int *)v9 != v8)
    {
      Inspector::AsyncStackTrace::didCancelAsyncCall(*((Inspector::AsyncStackTrace **)v8 + 2));
      v10 = *(unsigned int *)(a1 + 204);
      if ((_DWORD)v10)
      {
        v11 = (_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
        while (*((_DWORD *)v11 - 2) != a2 || *v11 != a3)
        {
          v11 += 2;
          if (!--v10)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::remove(v6, a2, a3);
      }
    }
  }
}

void WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::remove(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  Inspector::AsyncStackTrace *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  v5 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(*a1, a2, a3);
  if (v4)
  {
    v11 = (int *)(v4 + 24 * *(unsigned int *)(v4 - 4));
    if (v11 == v5)
      return;
  }
  else
  {
    if (!v5)
      return;
    v11 = 0;
  }
  if (v11 != v5)
  {
    *v5 = -1;
    v12 = (Inspector::AsyncStackTrace *)*((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v12);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    ++*(_DWORD *)(*a1 - 16);
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 12) - 1;
    else
      v14 = -1;
    *(_DWORD *)(v13 - 12) = v14;
    v15 = *a1;
    if (*a1)
    {
      v16 = 6 * *(_DWORD *)(v15 - 12);
      v17 = *(_DWORD *)(v15 - 4);
      if (v16 < v17 && v17 >= 9)
        WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::rehash(a1, v17 >> 1, 0, v6, v7, v8, v9, v10);
    }
  }
}

_QWORD *Inspector::InspectorDebuggerAgent::willDispatchAsyncCall(_QWORD *result, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::AsyncStackTrace *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;

  v3 = *((int *)result + 52);
  if ((_DWORD)v3)
  {
    v4 = result;
    *(_QWORD *)&v11 = a2;
    *((_QWORD *)&v11 + 1) = a3;
    v5 = result[23];
    result = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v5, a2, a3);
    v6 = v5 ? v5 + 24 * *(unsigned int *)(v5 - 4) : 0;
    if ((_QWORD *)v6 != result)
    {
      v7 = (Inspector::AsyncStackTrace *)result[2];
      *((_BYTE *)v7 + 28) = 1;
      Inspector::AsyncStackTrace::truncate(v7, v3);
      result = v4 + 48;
      v8 = v4[51];
      if ((_DWORD)v8 == v4[50])
      {
        result = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v8 + 1, (unint64_t)&v11);
        v8 = v4[51];
        v9 = (char *)*((_QWORD *)v4 + 24);
        v10 = *(_OWORD *)result;
      }
      else
      {
        v9 = (char *)*result;
        v10 = v11;
      }
      *(_OWORD *)&v9[16 * v8] = v10;
      ++v4[51];
    }
  }
  return result;
}

void Inspector::InspectorDebuggerAgent::didDispatchAsyncCall(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;

  if (*(_DWORD *)(a1 + 208) && *(_DWORD *)(a1 + 204))
  {
    v6 = *(_QWORD *)(a1 + 184);
    v7 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v6, a2, a3);
    v8 = v7;
    v9 = v6 ? v6 + 24 * *(unsigned int *)(v6 - 4) : 0;
    if ((int *)v9 != v7)
    {
      Inspector::AsyncStackTrace::didDispatchAsyncCall(*((Inspector::AsyncStackTrace **)v7 + 2));
      v10 = 0;
      v11 = *(unsigned int *)(a1 + 204);
      v12 = 16 * v11;
      while (1)
      {
        v13 = v10 - 16;
        if (!(v12 + v10))
          break;
        v14 = *(_QWORD *)(a1 + 192);
        v15 = v14 + v12 + v10;
        v16 = *(_DWORD *)(v15 - 16);
        v17 = *(_QWORD *)(v15 - 8);
        v18 = v16 == a2 && v17 == a3;
        v10 = v13;
        if (v18)
        {
          memmove((void *)(v14 + 16 * v11 + v13), (const void *)(v14 + 16 * v11 + v13 + 16), -16 - v13);
          --*(_DWORD *)(a1 + 204);
          break;
        }
      }
      if (*(_BYTE *)(*((_QWORD *)v8 + 2) + 28))
        WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 184), a2, a3);
    }
  }
}

uint64_t Inspector::InspectorDebuggerAgent::currentParentStackTrace(Inspector::InspectorDebuggerAgent *this)
{
  uint64_t v1;
  __int128 v3;

  v1 = *((unsigned int *)this + 51);
  if (!(_DWORD)v1)
    return 0;
  v3 = *(_OWORD *)(*((_QWORD *)this + 24) + 16 * v1 - 16);
  return WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>((uint64_t *)this + 23, (int *)&v3);
}

void Inspector::InspectorDebuggerAgent::setBreakpointByUrl(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, int *a5@<X4>, WTF::JSONImpl::ObjectBase **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  BOOL v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int i;
  int v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int j;
  unsigned int v39;
  WTF **v40;
  WTF *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  char v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int v68;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  unsigned int **v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *__src;
  unsigned int *v113;
  uint64_t v114;
  void **v115;
  WTF *v116;
  const WTF::StringImpl *v117;
  WTF::StringImpl *v118[9];
  char v119;
  WTF::StringImpl *v120;
  BOOL v121;
  unsigned int *v122[2];

  v8 = *a3;
  if ((*a3 == 0) == (*a4 == 0))
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x2800000002;
    *(_QWORD *)(v30 + 8) = "Either url or urlRegex must be specified";
    *(_DWORD *)(v30 + 16) = 4;
    *(_QWORD *)a7 = v30;
    *(_DWORD *)(a7 + 16) = 1;
    return;
  }
  v11 = *a4 != 0;
  v120 = 0;
  if (v8)
    v12 = a3;
  else
    v12 = a4;
  if (*((_BYTE *)a5 + 4))
    v13 = *a5;
  else
    v13 = 0;
  v121 = v11;
  LODWORD(v117) = a2;
  LODWORD(v116) = v13;
  v14 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v14 = off_1E35951F0;
  *(_QWORD *)(v14 + 8) = v12;
  *(_QWORD *)(v14 + 16) = &v121;
  *(_QWORD *)(v14 + 24) = &v117;
  *(_QWORD *)(v14 + 32) = &v116;
  v122[0] = (unsigned int *)v14;
  Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(v118, &v120, a6, v122);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v119)
  {
    v31 = v120;
    if (v120)
      *(_DWORD *)v120 += 2;
    *(_QWORD *)a7 = v31;
    *(_DWORD *)(a7 + 16) = 1;
    goto LABEL_118;
  }
  v23 = (uint64_t *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 120);
  if (v22)
  {
    v24 = *(_DWORD *)(v22 - 8);
    v25 = *((_DWORD *)v118[0] + 4);
    if (v25 < 0x100)
      v26 = WTF::StringImpl::hashSlowCase(v118[0]);
    else
      v26 = v25 >> 8;
    for (i = 0; ; v26 = i + v28)
    {
      v28 = v26 & v24;
      v29 = *(WTF **)(v22 + 80 * (v26 & v24));
      if (v29 != (WTF *)-1)
      {
        if (!v29)
        {
          if (!v119)
            goto LABEL_125;
          v32 = *v23;
          if (!*v23)
            break;
LABEL_24:
          v33 = *(_DWORD *)(v32 - 8);
          goto LABEL_28;
        }
        if (WTF::equal(v29, v118[0], v16))
        {
          v34 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v34 = 0x2D00000002;
          *(_QWORD *)(v34 + 8) = "Breakpoint for given location already exists.";
          *(_DWORD *)(v34 + 16) = 4;
          *(_QWORD *)a7 = v34;
          *(_DWORD *)(a7 + 16) = 1;
          if (!v119)
          {
LABEL_118:
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
              {
                WTF::StringImpl::~StringImpl(v120, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
              }
              else
              {
                *(_DWORD *)v120 -= 2;
              }
            }
            return;
          }
LABEL_117:
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v118, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
          goto LABEL_118;
        }
      }
      ++i;
    }
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(a1 + 120), 8u);
  v32 = *v23;
  if (*v23)
    goto LABEL_24;
  v33 = 0;
LABEL_28:
  v35 = *((_DWORD *)v118[0] + 4);
  v114 = a7;
  if (v35 < 0x100)
    v36 = WTF::StringImpl::hashSlowCase(v118[0]);
  else
    v36 = v35 >> 8;
  v37 = 0;
  for (j = 1; ; ++j)
  {
    v39 = v36 & v33;
    v40 = (WTF **)(v32 + 80 * (v36 & v33));
    v41 = *v40;
    if (*v40 == (WTF *)-1)
    {
      v37 = v32 + 80 * v39;
      goto LABEL_36;
    }
    if (!v41)
      break;
    if (WTF::equal(v41, v118[0], v16))
    {
      Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::operator=(v32 + 80 * v39 + 8, (uint64_t)v118, (uint64_t)v16, v17, v18, v19, v20, v21);
      goto LABEL_55;
    }
LABEL_36:
    v36 = j + v39;
  }
  if (v37)
  {
    *(_DWORD *)(v37 + 28) = 0;
    *(_DWORD *)(v37 + 32) = 0;
    *(_QWORD *)(v37 + 72) = 0;
    *(_QWORD *)(v37 + 48) = 0;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 40) = 0;
    *(_BYTE *)(v37 + 64) = 0;
    *(_QWORD *)(v37 + 8) = 0;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)v37 = 0;
    *(_BYTE *)(v37 + 24) = 0;
    --*(_DWORD *)(*v23 - 16);
    v40 = (WTF **)v37;
  }
  v42 = v118[0];
  if (v118[0])
    *(_DWORD *)v118[0] += 2;
  *v40 = v42;
  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::operator=((uint64_t)(v40 + 1), (uint64_t)v118, (uint64_t)v16, v17, v18, v19, v20, v21);
  v43 = *v23;
  if (*v23)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v45 = *v23;
  if (*v23)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47)
    {
LABEL_50:
      v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
      goto LABEL_54;
    }
  }
  else if (3 * v48 <= 4 * v47)
  {
    if ((_DWORD)v48)
      goto LABEL_50;
    v49 = 8;
LABEL_54:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(a1 + 120), v49);
  }
LABEL_55:
  v50 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v50 = 0x600000001;
  *(_QWORD *)(v50 + 16) = 0;
  v115 = (void **)(v50 + 16);
  *(_QWORD *)(v50 + 24) = 0;
  v51 = *(_QWORD *)(a1 + 72);
  if (!v51)
  {
    v54 = 0;
    LODWORD(v52) = 0;
LABEL_64:
    v53 = v51 + 72 * v52;
    goto LABEL_65;
  }
  v52 = *(unsigned int *)(v51 - 4);
  v53 = v51 + 72 * v52;
  if (!*(_DWORD *)(v51 - 12))
  {
    v54 = v51 + 72 * v52;
    goto LABEL_64;
  }
  v54 = *(_QWORD *)(a1 + 72);
  if ((_DWORD)v52)
  {
    v55 = 72 * v52;
    v54 = *(_QWORD *)(a1 + 72);
    while ((*(_DWORD *)v54 + 1) <= 1)
    {
      v54 += 72;
      v55 -= 72;
      if (!v55)
      {
        v54 = v53;
        break;
      }
    }
  }
LABEL_65:
  if (v51)
    v56 = v51 + 72 * *(unsigned int *)(v51 - 4);
  else
    v56 = 0;
  if (v56 == v54)
  {
LABEL_113:
    if (!v119)
      goto LABEL_125;
    v103 = v118[0];
    if (v118[0])
      *(_DWORD *)v118[0] += 2;
    *(_QWORD *)v114 = v103;
    *(_QWORD *)(v114 + 8) = v50;
    *(_DWORD *)(v114 + 16) = 0;
    goto LABEL_117;
  }
  while (1)
  {
    if ((v57 = *(const WTF::StringImpl **)(v54 + 24)) != 0 && *((_DWORD *)v57 + 1)
      || (v57 = *(const WTF::StringImpl **)(v54 + 8)) != 0)
    {
      v58 = 0;
      *(_DWORD *)v57 += 2;
    }
    else
    {
      v58 = 1;
    }
    v117 = v57;
    if (!v119)
      break;
    if (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::matchesScriptURL((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v118, &v117, v16))
    {
      if (!v119)
        break;
      v59 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v59 + 1;
      Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::createDebuggerBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v118, v59, *(_DWORD *)v54, (uint64_t *)&v116);
      v67 = v116;
      v68 = *((_DWORD *)v116 + 5);
      if (v68 >= *(_DWORD *)(v54 + 48) && *(_DWORD *)(v54 + 56) >= v68)
      {
        if (JSC::Debugger::resolveBreakpoint(*(JSC::Debugger **)(a1 + 56), (uint64_t)v116, *(JSC::SourceProvider **)(v54 + 40)))
        {
          JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v122, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), v61, v62, v63, v64, v65, v66, v70);
          JSC::Debugger::setBreakpoint(*(_QWORD **)(a1 + 56), (uint64_t)v67, v71, v72, v73, v74, v75, v76);
          v78 = v77;
          JSC::JSLockHolder::~JSLockHolder(v122, v79, v80, v81, v82, v83, v84, v85);
          if (v78)
          {
            if (!v119)
              break;
            Inspector::InspectorDebuggerAgent::didSetBreakpoint(a1, v118, v67, v62, v63, v64, v65, v66);
            Inspector::buildDebuggerLocation((Inspector::Protocol::Debugger::Location **)v122, v67);
            v86 = v122[0];
            v87 = *(unsigned int *)(v50 + 28);
            if ((_DWORD)v87 == *(_DWORD *)(v50 + 24))
            {
              v113 = v122[0];
              v88 = v50;
              v89 = v87 + (v87 >> 2);
              if (v89 >= 0x10)
                v90 = v89 + 1;
              else
                v90 = 16;
              if (v90 <= v87 + 1)
                v91 = v87 + 1;
              else
                v91 = v90;
              if (v91 >> 29)
                goto LABEL_126;
              __src = *v115;
              v92 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
              *(_DWORD *)(v88 + 24) = v91;
              v50 = v88;
              *(_QWORD *)(v88 + 16) = v92;
              memcpy(v92, __src, 8 * v87);
              if (__src)
              {
                if (*v115 == __src)
                {
                  *(_QWORD *)(v88 + 16) = 0;
                  *(_DWORD *)(v88 + 24) = 0;
                }
                WTF::fastFree((unint64_t)__src, v60, v61, v62, v63, v64, v65, v66);
              }
              v87 = *(unsigned int *)(v88 + 28);
              v93 = (unsigned int **)(*(_QWORD *)(v88 + 16) + 8 * v87);
              v86 = v113;
            }
            else
            {
              v93 = (unsigned int **)((char *)*v115 + 8 * v87);
            }
            *v93 = v86;
            *(_DWORD *)(v50 + 28) = v87 + 1;
          }
        }
      }
      WTF::RefCounted<JSC::Breakpoint>::deref(v67, (WTF::AtomStringImpl *)v60, v61, v62, v63, v64, v65, v66);
    }
    v117 = 0;
    if ((v58 & 1) == 0)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
    v94 = v54 + 72;
    v54 = v53;
    if (v94 != v53)
    {
      v54 = v94;
      while ((*(_DWORD *)v54 + 1) <= 1)
      {
        v54 += 72;
        if (v54 == v53)
        {
          v54 = v53;
          break;
        }
      }
    }
    if (v54 == v56)
      goto LABEL_113;
  }
LABEL_125:
  __break(1u);
LABEL_126:
  __break(0xC471u);
}

uint64_t Inspector::InspectorDebuggerAgent::resolveBreakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;

  v3 = *(_DWORD *)(a3 + 20);
  if (v3 >= *(_DWORD *)(a2 + 40) && *(_DWORD *)(a2 + 48) >= v3)
    return JSC::Debugger::resolveBreakpoint(*(JSC::Debugger **)(a1 + 56), a3, *(JSC::SourceProvider **)(a2 + 32));
  else
    return 0;
}

uint64_t Inspector::InspectorDebuggerAgent::setBreakpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v27;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v27, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), a3, a4, a5, a6, a7, a8, a9);
  JSC::Debugger::setBreakpoint(*(_QWORD **)(a1 + 56), a2, v11, v12, v13, v14, v15, v16);
  v18 = v17;
  JSC::JSLockHolder::~JSLockHolder(&v27, v19, v20, v21, v22, v23, v24, v25);
  return v18;
}

void Inspector::InspectorDebuggerAgent::didSetBreakpoint(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  int i;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF ***v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  WTF *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const WTF::StringImpl **v47;

  v10 = (uint64_t *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 128);
  if (v11
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(a1 + 128), 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *((_DWORD *)*a2 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v14 = v13 >> 8;
  v15 = 0;
  for (i = 1; ; ++i)
  {
    v17 = v14 & v12;
    v18 = (WTF::StringImpl **)(v11 + 24 * (v14 & v12));
    v19 = *v18;
    if (*v18 == (WTF::StringImpl *)-1)
    {
      v15 = (WTF::StringImpl **)(v11 + 24 * v17);
      goto LABEL_12;
    }
    if (!v19)
      break;
    if (WTF::equal(v19, *a2, a3))
      goto LABEL_38;
LABEL_12:
    v14 = i + v17;
  }
  if (v15)
  {
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    --*(_DWORD *)(*v10 - 16);
    v18 = v15;
  }
  v20 = *a2;
  if (*a2)
    *(_DWORD *)v20 += 2;
  *v18 = v20;
  v21 = (WTF ***)(v18 + 1);
  v22 = *((unsigned int *)v18 + 5);
  if ((_DWORD)v22)
  {
    v23 = *v21;
    v24 = 8 * v22;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
        WTF::RefCounted<JSC::Breakpoint>::deref(v25, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v26 = (unint64_t)*v21;
  if (*v21)
  {
    v18[1] = 0;
    *((_DWORD *)v18 + 4) = 0;
    WTF::fastFree(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  *v21 = 0;
  v18[2] = 0;
  v27 = *v10;
  if (*v10)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v10;
  if (*v10)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
    {
LABEL_33:
      v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
      goto LABEL_37;
    }
  }
  else if (3 * v32 <= 4 * v31)
  {
    if ((_DWORD)v32)
      goto LABEL_33;
    v33 = 8;
LABEL_37:
    v18 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v10, v33, (uint64_t)v18, a4, a5, a6, a7, a8);
  }
LABEL_38:
  v34 = *((unsigned int *)v18 + 5);
  if ((_DWORD)v34 != *((_DWORD *)v18 + 4))
  {
    v47 = (const WTF::StringImpl **)((char *)v18[1] + 8 * v34);
    goto LABEL_52;
  }
  v35 = v34 + (v34 >> 2);
  if (v35 >= 0x10)
    v36 = v35 + 1;
  else
    v36 = 16;
  if (v36 <= v34 + 1)
    v37 = v34 + 1;
  else
    v37 = v36;
  if (v37 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v38 = v18[1];
    v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v37));
    *((_DWORD *)v18 + 4) = v37;
    v18[1] = v39;
    memcpy(v39, v38, 8 * v34);
    if (v38)
    {
      if (v18[1] == v38)
      {
        v18[1] = 0;
        *((_DWORD *)v18 + 4) = 0;
      }
      WTF::fastFree((unint64_t)v38, v40, v41, v42, v43, v44, v45, v46);
    }
    v34 = *((unsigned int *)v18 + 5);
    v47 = (const WTF::StringImpl **)((char *)v18[1] + 8 * v34);
LABEL_52:
    ++*(_DWORD *)a3;
    *v47 = a3;
    *((_DWORD *)v18 + 5) = v34 + 1;
  }
}

void Inspector::buildDebuggerLocation(Inspector::Protocol::Debugger::Location **a1, _DWORD *a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int *v9;
  _BYTE *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Inspector::Protocol::Debugger::Location *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  int *v35;
  WTF *v36[4];

  v36[3] = *(WTF **)MEMORY[0x1E0C80C00];
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  v5 = 0;
  *(_QWORD *)v4 = 0x500000001;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v36[0] = v4;
  v6 = a2[4];
  do
  {
    v7 = (v6 % 0xA) | 0x30;
    *((_BYTE *)&v36[2] + v5-- + 7) = (v6 % 0xA) | 0x30;
    v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  if (v5 + 14 >= 15)
    __break(1u);
  if (v5)
  {
    if ((unint64_t)-v5 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v9 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v5));
    v10 = v9 + 5;
    *v9 = 2;
    v9[1] = -(int)v5;
    *((_QWORD *)v9 + 1) = v9 + 5;
    v9[4] = 4;
    v35 = v9;
    if (v5 == -1)
      *v10 = v7;
    else
      memcpy(v10, (char *)&v36[3] + v5, -v5);
  }
  else
  {
    v9 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v35 = &WTF::StringImpl::s_emptyAtomString;
  }
  Inspector::Protocol::Console::CallFrame::Builder<3>::setScriptId((uint64_t *)v36, &v35);
  Inspector::Protocol::Console::CallFrame::Builder<7>::setLineNumber((uint64_t *)v36, a2[5]);
  v18 = v36[0];
  v36[0] = 0;
  *a1 = v18;
  if (*v9 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    v34 = v36[0];
    v36[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::JSONImpl::Value::operator delete(v34, v27, v28, v29, v30, v31, v32, v33);
      else
        --*(_DWORD *)v34;
    }
  }
  else
  {
    *v9 -= 2;
  }
  Inspector::Protocol::Debugger::Location::setColumnNumber(v18, a2[6]);
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setBreakpointByUrl(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, int *a5@<X4>, WTF::JSONImpl::ObjectBase **a6@<X5>, uint64_t a7@<X8>)
{
  Inspector::InspectorDebuggerAgent::setBreakpointByUrl(a1 - 16, a2, a3, a4, a5, a6, a7);
}

void Inspector::InspectorDebuggerAgent::setBreakpoint(uint64_t a1@<X0>, WTF::String **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, unsigned int *a4@<X5>, uint64_t a5@<X8>)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  JSC::SourceProvider **v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned int *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const WTF::StringImpl *v77;
  WTF::StringImpl *v78[9];
  char v79;
  unsigned int v80;
  unsigned int v81[2];
  WTF::StringImpl *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;

  *(_QWORD *)v81 = 0;
  v82 = 0;
  v80 = 0;
  if (!Inspector::parseLocation(&v82, *a2, (const WTF::JSONImpl::Object *)&v81[1], v81, &v80, a4))
  {
LABEL_23:
    v65 = v82;
    if (v82)
      *(_DWORD *)v82 += 2;
    *(_QWORD *)a5 = v65;
    goto LABEL_27;
  }
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = v81[1];
    v18 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
    v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
    v20 = (v19 ^ HIWORD(v19)) & v16;
    v21 = (JSC::SourceProvider **)(v15 + 72 * v20);
    v22 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 != v81[1])
    {
      v23 = 1;
      while (v22)
      {
        v20 = (v20 + v23) & v16;
        v21 = (JSC::SourceProvider **)(v15 + 72 * v20);
        v22 = *(_DWORD *)v21;
        ++v23;
        if (*(_DWORD *)v21 == v81[1])
          goto LABEL_9;
      }
      v21 = (JSC::SourceProvider **)(v15 + 72 * *(unsigned int *)(v15 - 4));
    }
LABEL_9:
    if (v21 != (JSC::SourceProvider **)(v15 + 72 * *(unsigned int *)(v15 - 4)))
    {
      LODWORD(v77) = v81[1];
      v83 = v80;
      v84 = v81[0];
      v24 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v24 = off_1E35951C8;
      *(_QWORD *)(v24 + 8) = &v77;
      *(_QWORD *)(v24 + 16) = &v84;
      *(_QWORD *)(v24 + 24) = &v83;
      v85 = (unsigned int *)v24;
      Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(v78, &v82, a3, &v85);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      if (v79)
      {
        v25 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v25 + 1;
        Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::createDebuggerBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v78, v25, v17, (uint64_t *)&v77);
        v26 = v77;
        v27 = *((_DWORD *)v77 + 5);
        v28 = v27 >= *((_DWORD *)v21 + 12) && *((_DWORD *)v21 + 14) >= v27;
        if (v28 && (JSC::Debugger::resolveBreakpoint(*(JSC::Debugger **)(a1 + 56), (uint64_t)v77, v21[5]) & 1) != 0)
        {
          JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v85, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), v29, v30, v31, v32, v33, v34, v35);
          JSC::Debugger::setBreakpoint(*(_QWORD **)(a1 + 56), (uint64_t)v26, v36, v37, v38, v39, v40, v41);
          v43 = v42;
          JSC::JSLockHolder::~JSLockHolder(&v85, v44, v45, v46, v47, v48, v49, v50);
          if ((v43 & 1) != 0)
          {
            if (!v79
              || (Inspector::InspectorDebuggerAgent::didSetBreakpoint(a1, v78, v26, v51, v52, v53, v54, v55), !v79))
            {
              __break(1u);
              return;
            }
            Inspector::buildDebuggerLocation((Inspector::Protocol::Debugger::Location **)&v85, v26);
            v63 = v78[0];
            if (v78[0])
              *(_DWORD *)v78[0] += 2;
            v64 = v85;
            *(_QWORD *)a5 = v63;
            *(_QWORD *)(a5 + 8) = v64;
            *(_DWORD *)(a5 + 16) = 0;
            goto LABEL_35;
          }
          v75 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v75 = 0x2C00000002;
          v76 = "Breakpoint for given location already exists";
        }
        else
        {
          v75 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v75 = 0x1C00000002;
          v76 = "Could not resolve breakpoint";
        }
        *(_QWORD *)(v75 + 8) = v76;
        *(_DWORD *)(v75 + 16) = 4;
        *(_QWORD *)a5 = v75;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_35:
        WTF::RefCounted<JSC::Breakpoint>::deref(v26, v56, v57, v58, v59, v60, v61, v62);
        if (v79)
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v78, v8, v9, v10, v11, v12, v13, v14);
        goto LABEL_28;
      }
      goto LABEL_23;
    }
  }
  v66 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v66 = 0x2D00000002;
  *(_QWORD *)(v66 + 8) = "Missing script for scriptId in given location";
  *(_DWORD *)(v66 + 16) = 4;
  *(_QWORD *)a5 = v66;
LABEL_27:
  *(_DWORD *)(a5 + 16) = 1;
LABEL_28:
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
}

BOOL Inspector::parseLocation(WTF::StringImpl **this, WTF::String *a2, const WTF::JSONImpl::Object *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Integer;
  uint64_t v21;
  const WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int16 *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  const WTF::StringImpl *v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  unsigned __int16 *v113;
  int v114;
  uint64_t v115;
  BOOL v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v123;
  char v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  uint64_t v128;
  BOOL v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;

  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0xA00000002;
  *(_QWORD *)(v11 + 8) = "lineNumber";
  *(_DWORD *)(v11 + 16) = 4;
  v137 = (WTF::StringImpl *)v11;
  Integer = WTF::JSONImpl::ObjectBase::getInteger(a2, &v137, v12);
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  if ((Integer & 0xFF00000000) != 0)
  {
    *a4 = Integer;
    v21 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v21 = 0x800000002;
    *(_QWORD *)(v21 + 8) = "scriptId";
    *(_DWORD *)(v21 + 16) = 4;
    v136 = (WTF::StringImpl *)v21;
    WTF::JSONImpl::ObjectBase::getString(a2, &v136, v22, &v137);
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
    v30 = v137;
    v31 = v137 != 0;
    if (v137)
    {
      v32 = *((_QWORD *)v137 + 1);
      v33 = *((unsigned int *)v137 + 1);
      if (v32)
        v34 = v33 == 0;
      else
        v34 = 1;
      v35 = v34;
      if ((*((_BYTE *)v137 + 16) & 4) != 0)
      {
        if ((v35 & 1) == 0)
        {
          v74 = 0;
          while (1)
          {
            v75 = *(unsigned __int8 *)(v32 + v74);
            if ((v75 - 9) >= 5 && v75 != 32)
              break;
            if (v33 == ++v74)
              goto LABEL_31;
          }
          if (v75 == 43)
          {
            if (v33 - 1 == v74)
              goto LABEL_31;
            v76 = ~v74 + v33;
            v77 = (unsigned __int8 *)(v32 + v74 + 1);
            v75 = *v77;
          }
          else
          {
            v77 = (unsigned __int8 *)(v32 + v74);
            v76 = v33 - v74;
          }
          if ((v75 - 48) <= 9)
          {
            v123 = 0;
            v124 = 0;
            v125 = v76 - 1;
            v126 = v77 + 1;
            do
            {
              v127 = v75 - 48;
              v128 = 10 * v123;
              if ((v128 & 0xFFFFFFFF00000000) == 0)
                v123 *= 10;
              v129 = __CFADD__(v123, v127);
              v130 = v123 + v127;
              v131 = v129;
              if (!v129)
                v123 = v130;
              if ((v128 & 0xFFFFFFFF00000000) != 0)
                v132 = 1;
              else
                v132 = v131;
              if (v132)
                v124 = 1;
              if (!v125)
                break;
              v133 = *v126++;
              v75 = v133;
              v134 = v133 - 48;
              --v125;
            }
            while ((v133 - 48) <= 9 && v134 < 0xA);
            if (!v124)
            {
              v60 = v123 & 0xFFFFFF00;
              v59 = v123;
              goto LABEL_102;
            }
          }
        }
      }
      else if ((v35 & 1) == 0)
      {
        v36 = 0;
        v37 = 2 * v33;
        while (1)
        {
          v38 = *(unsigned __int16 *)(v32 + v36);
          if ((v38 - 9) >= 5 && v38 != 32)
            break;
          --v33;
          v36 += 2;
          if (v37 == v36)
            goto LABEL_31;
        }
        if (v38 == 43)
        {
          if (v37 - 2 == v36)
            goto LABEL_31;
          --v33;
          v39 = (unsigned __int16 *)(v32 + v36 + 2);
          v38 = *v39;
        }
        else
        {
          v39 = (unsigned __int16 *)(v32 + v36);
        }
        if ((v38 - 48) <= 9)
        {
          v59 = 0;
          v111 = 0;
          v112 = v33 - 1;
          v113 = v39 + 1;
          do
          {
            v114 = v38 - 48;
            v115 = 10 * v59;
            if ((v115 & 0xFFFFFFFF00000000) == 0)
              v59 *= 10;
            v116 = __CFADD__(v59, v114);
            v117 = v59 + v114;
            v118 = v116;
            if (!v116)
              v59 = v117;
            if ((v115 & 0xFFFFFFFF00000000) != 0)
              v119 = 1;
            else
              v119 = v118;
            if (v119)
              v111 = 1;
            if (!v112)
              break;
            v120 = *v113++;
            v38 = v120;
            v121 = v120 - 48;
            --v112;
          }
          while ((v120 - 48) <= 9 && v121 < 0xA);
          if (!v111)
          {
            v60 = v59 & 0xFFFFFF00;
            v59 = v59;
LABEL_102:
            v58 = 0x100000000;
            goto LABEL_32;
          }
        }
      }
LABEL_31:
      v58 = 0;
      v59 = 0;
      v60 = 0;
LABEL_32:
      v61 = v58 | v60 | v59;
      if (v61 <= 0x100000000)
        LODWORD(v61) = 0;
      *(_DWORD *)a3 = v61;
      v62 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v62 = 0xC00000002;
      *(_QWORD *)(v62 + 8) = "columnNumber";
      *(_DWORD *)(v62 + 16) = 4;
      v136 = (WTF::StringImpl *)v62;
      v64 = WTF::JSONImpl::ObjectBase::getInteger(a2, &v136, v63);
      if ((v64 & 0xFF00000000) != 0)
        v65 = v64;
      else
        v65 = 0;
      *a5 = v65;
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v62, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
      if (*(_DWORD *)v30 != 2)
      {
        *(_DWORD *)v30 -= 2;
        return v31;
      }
      v57 = v30;
LABEL_53:
      WTF::StringImpl::~StringImpl(v57, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
      return v31;
    }
    *(_DWORD *)a3 = 0;
    v56 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v56 = 0x3000000002;
    *(_QWORD *)(v56 + 8) = "Unexepcted non-string scriptId in given location";
    *(_DWORD *)(v56 + 16) = 4;
    v57 = *this;
    *this = (WTF::StringImpl *)v56;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        goto LABEL_53;
      *(_DWORD *)v57 -= 2;
    }
  }
  else
  {
    v47 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v47 = 0x3300000002;
    *(_QWORD *)(v47 + 8) = "Unexpected non-integer lineNumber in given location";
    *(_DWORD *)(v47 + 16) = 4;
    v48 = *this;
    *this = (WTF::StringImpl *)v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    v31 = 0;
    *(_DWORD *)a3 = 0;
  }
  return v31;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setBreakpoint(uint64_t a1@<X0>, WTF::String **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, unsigned int *a4@<X5>, uint64_t a5@<X8>)
{
  Inspector::InspectorDebuggerAgent::setBreakpoint(a1 - 16, a2, a3, a4, a5);
}

void Inspector::InspectorDebuggerAgent::removeBreakpoint(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>)
{
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int i;
  int v18;
  WTF **v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int j;
  int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF **v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF **v94;
  WTF *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF **v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t StatusReg;
  WTF::StringImpl *v118[3];

  v118[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v12 = (uint64_t *)((char *)this + 120);
  v13 = *((_QWORD *)this + 15);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = *((_DWORD *)*a2 + 4);
    if (v15 < 0x100)
      v16 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v16 = v15 >> 8;
    for (i = 0; ; v16 = i + v18)
    {
      v18 = v16 & v14;
      v19 = (WTF **)(v13 + 80 * (v16 & v14));
      v20 = *v19;
      if (*v19 != (WTF *)-1)
      {
        if (!v20)
        {
          v21 = *v12;
          if (!*v12)
            goto LABEL_29;
          v22 = *(_DWORD *)(v21 - 4);
          v19 = (WTF **)(v21 + 80 * v22);
          goto LABEL_13;
        }
        if (WTF::equal(v20, *a2, a3))
          break;
      }
      ++i;
    }
    v21 = *v12;
    if (!*v12)
      goto LABEL_14;
    v22 = *(_DWORD *)(v21 - 4);
LABEL_13:
    v21 += 80 * v22;
    if ((WTF **)v21 == v19)
      goto LABEL_29;
LABEL_14:
    if ((WTF **)v21 != v19)
    {
      v23 = *v19;
      *v19 = (WTF *)-1;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
        }
        else
        {
          *(_DWORD *)v23 -= 2;
        }
      }
      Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v19 + 1), (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      ++*(_DWORD *)(*v12 - 16);
      v24 = *v12;
      if (*v12)
        v25 = *(_DWORD *)(v24 - 12) - 1;
      else
        v25 = -1;
      *(_DWORD *)(v24 - 12) = v25;
      v26 = *v12;
      if (*v12)
      {
        v27 = 6 * *(_DWORD *)(v26 - 12);
        v28 = *(_DWORD *)(v26 - 4);
        v29 = v27 < v28 && v28 >= 9;
        if (v29)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v12, v28 >> 1);
      }
    }
  }
LABEL_29:
  v30 = (uint64_t *)((char *)this + 128);
  v31 = *((_QWORD *)this + 16);
  if (!v31)
  {
LABEL_136:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  v32 = *(_DWORD *)(v31 - 8);
  v33 = *((_DWORD *)*a2 + 4);
  if (v33 < 0x100)
    v34 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v34 = v33 >> 8;
  for (j = 0; ; v34 = j + v36)
  {
    v36 = v34 & v32;
    v37 = v31 + 24 * (v34 & v32);
    v38 = *(WTF **)v37;
    if (*(_QWORD *)v37 == -1)
      goto LABEL_36;
    if (!v38)
    {
      v39 = *v30;
      if (*v30)
      {
        v40 = *(_DWORD *)(v39 - 4);
        v37 = v39 + 24 * v40;
        goto LABEL_41;
      }
      goto LABEL_136;
    }
    if (WTF::equal(v38, *a2, a3))
      break;
LABEL_36:
    ++j;
  }
  v39 = *v30;
  if (*v30)
  {
    v40 = *(_DWORD *)(v39 - 4);
LABEL_41:
    v39 += 24 * v40;
  }
  if (v39 == v37)
    goto LABEL_136;
  v41 = *(_QWORD *)(v37 + 8);
  v42 = *(unsigned int *)(v37 + 20);
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  v43 = *v30;
  if (!*v30 || (v43 += 24 * *(unsigned int *)(v43 - 4), v43 != v37))
  {
    if (v43 != v37)
    {
      v44 = *(WTF::StringImpl **)v37;
      *(_QWORD *)v37 = -1;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
        {
          WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v44 -= 2;
        }
      }
      v45 = *(unsigned int *)(v37 + 20);
      v46 = *(WTF ***)(v37 + 8);
      if ((_DWORD)v45)
      {
        v47 = 8 * v45;
        do
        {
          v48 = *v46;
          *v46 = 0;
          if (v48)
            WTF::RefCounted<JSC::Breakpoint>::deref(v48, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          ++v46;
          v47 -= 8;
        }
        while (v47);
        v46 = *(WTF ***)(v37 + 8);
      }
      if (v46)
      {
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 16) = 0;
        WTF::fastFree((unint64_t)v46, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      ++*(_DWORD *)(*v30 - 16);
      v49 = *v30;
      if (*v30)
        v50 = *(_DWORD *)(v49 - 12) - 1;
      else
        v50 = -1;
      *(_DWORD *)(v49 - 12) = v50;
      v51 = *v30;
      if (*v30)
      {
        v52 = 6 * *(_DWORD *)(v51 - 12);
        v53 = *(_DWORD *)(v51 - 4);
        if (v52 < v53 && v53 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v30, v53 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  if (!(_DWORD)v42)
  {
LABEL_134:
    if (v41)
      WTF::fastFree(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_136;
  }
  v112 = v42;
  v113 = (WTF **)v41;
  v114 = (uint64_t *)(v41 + 8 * v42);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v115 = (uint64_t *)v41;
    v55 = *(_DWORD *)(*(_QWORD *)v41 + 52);
    if (v55)
      break;
LABEL_129:
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v118, *(JSC::VM **)(*((_QWORD *)this + 7) + 16), (uint64_t)a3, a4, a5, a6, a7, a8, a10);
    v41 = (unint64_t)(v115 + 1);
    JSC::Debugger::removeBreakpoint(*((_QWORD **)this + 7), *v115, v80, v81, v82, v83, v84, v85);
    JSC::JSLockHolder::~JSLockHolder((unsigned int **)v118, v86, v87, v88, v89, v90, v91, v92);
    if (v115 + 1 == v114)
    {
      v41 = (unint64_t)v113;
      v93 = 8 * v112;
      v94 = v113;
      do
      {
        v95 = *v94;
        *v94 = 0;
        if (v95)
          WTF::RefCounted<JSC::Breakpoint>::deref(v95, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        ++v94;
        v93 -= 8;
      }
      while (v93);
      goto LABEL_134;
    }
  }
  v56 = *(_QWORD *)(*(_QWORD *)v41 + 40);
  v57 = v56 + 24 * v55;
  while (2)
  {
    v58 = *(_DWORD *)(v56 + 16);
    if ((v58 & 0x80000000) != 0)
    {
      v79 = -v58;
      v59 = 1;
      do
      {
        ++v59;
        v29 = v79 >= 0xA;
        v79 /= 0xAu;
      }
      while (v29);
    }
    else
    {
      v59 = 0;
      v60 = *(_DWORD *)(v56 + 16);
      do
      {
        ++v59;
        v61 = v60 > 9;
        v60 /= 0xAu;
      }
      while (v61);
    }
    if ((v59 & 0x80000000) == 0)
    {
      v62 = (v59 + 18);
      if (!__OFADD__(v59, 18))
      {
        v63 = *((_QWORD *)this + 8);
        WTF::tryFastCompactMalloc((WTF *)(v62 + 20), v118);
        v65 = (unint64_t)v118[0];
        if (v118[0])
        {
          *(_DWORD *)v118[0] = 2;
          *(_DWORD *)(v65 + 4) = v62;
          *(_QWORD *)(v65 + 8) = v65 + 20;
          *(_DWORD *)(v65 + 16) = 4;
          *(_WORD *)(v65 + 36) = 11630;
          a10 = *(double *)"breakpoint-action-";
          *(_OWORD *)(v65 + 20) = *(_OWORD *)"breakpoint-action-";
          v66 = 0;
          if ((v58 & 0x80000000) != 0)
          {
            v77 = -v58;
            do
            {
              *((_BYTE *)&v118[1] + v66-- + 4) = (v77 % 0xA) | 0x30;
              v61 = v77 > 9;
              v77 /= 0xAu;
            }
            while (v61);
            v78 = v66 + 12;
            v64 = (char *)&v118[1] + v66 + 4;
            *v64 = 45;
            if (v66 + 14 <= 14)
            {
              if (v78 <= 12)
                v78 = 12;
              v67 = v78 - v66 - 11;
LABEL_82:
              memcpy((void *)(v65 + 38), v64, v67);
            }
          }
          else
          {
            do
            {
              *((_BYTE *)&v118[1] + v66-- + 4) = (v58 % 0xA) | 0x30;
              v61 = v58 > 9;
              v58 /= 0xAu;
            }
            while (v61);
            if (v66 + 14 <= 13)
            {
              v64 = (char *)&v118[1] + v66 + 5;
              v67 = -v66;
              goto LABEL_82;
            }
          }
          v118[0] = (WTF::StringImpl *)v65;
          v68 = *(_DWORD **)(v63 + 8);
          if (v68)
          {
            v69 = *(v68 - 1);
            v70 = &v68[12 * v69];
            if (*(v68 - 3))
            {
              v71 = v68;
              if ((_DWORD)v69)
              {
                v72 = 48 * v69;
                v71 = v68;
                while ((*v71 + 1) <= 1)
                {
                  v71 += 12;
                  v72 -= 48;
                  if (!v72)
                  {
                    v71 = v70;
                    break;
                  }
                }
              }
LABEL_90:
              v73 = &v68[12 * *(v68 - 1)];
              goto LABEL_95;
            }
            v71 = &v68[12 * v69];
          }
          else
          {
            v71 = 0;
            LODWORD(v69) = 0;
          }
          v70 = &v68[12 * v69];
          if (v68)
            goto LABEL_90;
          v73 = 0;
LABEL_95:
          if (v73 != v71)
          {
            do
            {
              Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v71 + 2), (const WTF::String *)v118);
              v74 = v71 + 12;
              v71 = v70;
              if (v74 != v70)
              {
                v71 = v74;
                while ((*v71 + 1) <= 1)
                {
                  v71 += 12;
                  if (v71 == v70)
                  {
                    v71 = v70;
                    break;
                  }
                }
              }
            }
            while (v71 != v73);
            v65 = (unint64_t)v118[0];
          }
          v118[0] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 != 2)
            {
              *(_DWORD *)v65 -= 2;
              goto LABEL_106;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v65, (WTF::AtomStringImpl *)v64, (uint64_t)a3, a4, a5, a6, a7, a8);
            v75 = *(_QWORD *)(StatusReg + 752);
            if (v75)
            {
              if (v65 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v65 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v65)) & 1) == 0)
              {
                if (v65 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v65 >> 24)
                {
                  a4 = 0;
                }
                else
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v65 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v65) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_111;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v75, v65, 1, a4, a5, a6, a7, a8);
              }
              else
              {
LABEL_111:
                v76 = *(unsigned int *)(v75 + 8000);
                if (v76 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v75, v65, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v75 + 8 * v76) = v65 | 0x5000000000000;
                  *(_DWORD *)(v75 + 8000) = v76 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v65, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_106:
          v56 += 24;
          if (v56 == v57)
            goto LABEL_129;
          continue;
        }
      }
    }
    break;
  }
  v118[0] = 0;
  __break(0xC471u);
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::removeBreakpoint(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>)
{
  Inspector::InspectorDebuggerAgent::removeBreakpoint((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Inspector::InspectorDebuggerAgent::addSymbolicBreakpoint(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, _BYTE *a6@<X8>)
{
  void *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  BOOL v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  char *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  _BYTE *v47;
  WTF *v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF **v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  WTF::StringImpl *v62;
  JSC::Yarr::BytecodePattern *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  WTF *v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int ***v113;
  uint64_t v114;
  unsigned int ***v115;
  uint64_t v116;
  unsigned int ***v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  int v125;
  char *v126;
  int v127;
  unsigned int ***v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  int v140;
  char *v141;
  int v142;
  int v143;
  _BYTE *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  WTF *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  JSC::Yarr::BytecodePattern *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  void *v184;
  size_t v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  WTF::StringImpl *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  size_t v198;
  unsigned int ***v199;
  uint64_t v200;
  WTF::StringImpl **v201;
  WTF::StringImpl *v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  JSC::MarkedSpace *v211;
  uint64_t v212;
  _BYTE *v213;
  _QWORD *v214;
  unsigned int *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl **v217;
  WTF *v218;
  WTF::StringImpl **v219;
  WTF *v220;
  unsigned __int8 v221;
  WTF *v222;
  WTF::StringImpl *v223;
  _QWORD v224[2];

  v223 = 0;
  Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v223, a5, &v222);
  v18 = v222;
  if (!v222)
  {
    v27 = v223;
    if (v223)
      *(_DWORD *)v223 += 2;
    *(_QWORD *)a6 = v27;
    a6[8] = 1;
    goto LABEL_150;
  }
  LOWORD(v217) = 1;
  v221 = 0;
  v218 = 0;
  v219 = 0;
  LOBYTE(v220) = 0;
  v19 = *a2;
  if (*a2)
    *(_DWORD *)v19 += 2;
  v216 = v19;
  if (a3[1])
    LOBYTE(v217) = *a3;
  if (a4[1])
    BYTE1(v217) = *a4;
  v222 = 0;
  v218 = v18;
  v20 = (uint64_t *)(a1 + 232);
  if (!*(_DWORD *)(a1 + 244))
  {
    LODWORD(v26) = 0;
LABEL_23:
    v28 = v26;
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 240))
    {
      v29 = WTF::Vector<Inspector::InspectorDebuggerAgent::SymbolicBreakpoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 232, v26 + 1, (unint64_t)&v216);
      v30 = v29;
      v31 = *(_DWORD *)(a1 + 244);
      v32 = *(_QWORD *)(a1 + 232);
      v33 = *(_DWORD **)v29;
      if (*(_QWORD *)v29)
        *v33 += 2;
      *(_QWORD *)(v32 + 48 * v31) = v33;
      v34 = v32 + 48 * v31;
      *(_WORD *)(v34 + 8) = *((_WORD *)v29 + 4);
      v35 = (_QWORD *)(v34 + 16);
      v36 = (_DWORD *)*((_QWORD *)v29 + 2);
      if (v36)
        ++*v36;
      *v35 = v36;
      v37 = v32 + 48 * v31;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v37 + 24), (uint64_t *)v29 + 3);
      *(_BYTE *)(v37 + 32) = 0;
      v46 = v37 + 32;
      *(_BYTE *)(v46 + 8) = 0;
      v47 = (_BYTE *)(v46 + 8);
      if (!v30[40])
        goto LABEL_32;
      v48 = (WTF *)*((_QWORD *)v30 + 4);
      if (!v48)
      {
LABEL_31:
        *(_QWORD *)v46 = v48;
        *v47 = 1;
LABEL_32:
        v49 = v221;
        ++*(_DWORD *)(a1 + 244);
        if (v49)
        {
          v50 = v220;
          v220 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              v63 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v50 + 3);
              *((_QWORD *)v50 + 3) = 0;
              if (v63)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v63, v38, v39, v40, v41, v42, v43, v44);
                WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
              }
              v72 = (_QWORD *)*((_QWORD *)v50 + 1);
              if (v72)
              {
                v184 = (void *)v72[5];
                v185 = v72[6];
                v72[5] = 0;
                v72[6] = 0;
                v72[4] = 0;
                if (munmap(v184, v185) == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986B6570);
                }
              }
              WTF::fastFree((unint64_t)v50, v38, v39, v40, v41, v42, v43, v44);
            }
            else
            {
              --*(_DWORD *)v50;
            }
          }
        }
LABEL_58:
        v73 = (uint64_t)v219;
        if (v219)
        {
          v186 = *((unsigned int *)v219 - 1);
          if ((_DWORD)v186)
          {
            v187 = v219;
            do
            {
              v188 = *v187;
              if (*v187 != (WTF::StringImpl *)-1)
              {
                *v187 = 0;
                if (v188)
                {
                  if (*(_DWORD *)v188 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v188, (WTF::AtomStringImpl *)v38, v39, v40, v41, v42, v43, v44);
                    WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
                  }
                  else
                  {
                    *(_DWORD *)v188 -= 2;
                  }
                }
              }
              ++v187;
              --v186;
            }
            while (v186);
          }
          WTF::fastFree(v73 - 16, v38, v39, v40, v41, v42, v43, v44);
        }
        v74 = v218;
        v218 = 0;
        if (v74)
          WTF::RefCounted<JSC::Breakpoint>::deref(v74, (WTF::AtomStringImpl *)v38, v39, v40, v41, v42, v43, v44);
        v75 = v216;
        v216 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, (WTF::AtomStringImpl *)v38, v39, v40, v41, v42, v43, v44);
            WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
        v76 = *(_DWORD *)(a1 + 244);
        if (!v76)
        {
          __break(0xC471u);
          JUMPOUT(0x1986B668CLL);
        }
        v77 = *(_QWORD *)(a1 + 232) + 48 * v76 - 48;
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v215, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), v39, v40, v41, v42, v43, v44, v45);
        v78 = *(_QWORD *)(a1 + 56);
        v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v79 = off_1E3595240;
        v79[1] = v77;
        v214 = v79;
        v80 = *(_QWORD *)(v78 + 16) + 192;
        v224[0] = v78;
        v224[1] = &v214;
        v216 = (WTF::StringImpl *)WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::forEachRegisteredCodeBlock(WTF::Function<void ()(JSC::CodeBlock *)> const&)::$_0>::implFunction;
        v217 = &v216;
        v218 = (WTF *)v224;
        JSC::Heap::forEachCodeBlockImpl(v80, (uint64_t)&v216, v81, v82, v83, v84, v85, v86);
        v94 = v214;
        v214 = 0;
        if (v94)
          (*(void (**)(_QWORD *))(*v94 + 8))(v94);
        JSC::JSLockHolder::~JSLockHolder(&v215, v87, v88, v89, v90, v91, v92, v93);
        v102 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
        v103 = *(_DWORD *)(v102 + 916) + 1;
        *(_BYTE *)(v102 + 93444) = 1;
        *(_DWORD *)(v102 + 916) = v103;
        v216 = 0;
        v217 = 0;
        if (__ldaxr((unsigned __int8 *)&_MergedGlobals_36))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_36))
        {
          goto LABEL_71;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_36);
LABEL_71:
        if ((byte_1ECF58871 & 1) == 0)
        {
          *(_QWORD *)&dword_1ECF58880 = 0;
          qword_1ECF58878 = 0;
          byte_1ECF58871 = 1;
        }
        v211 = (JSC::MarkedSpace *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 352);
        JSC::MarkedSpace::willStartIterating(v211, v95, v96, v97, v98, v99, v100, v101);
        v112 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
        v113 = *(unsigned int ****)(v112 + 456);
        v212 = v102;
        v213 = a6;
        if (v113)
        {
          v114 = *((unsigned int *)v113 - 1);
          v115 = &v113[v114];
          if (*((_DWORD *)v113 - 3))
          {
            if ((_DWORD)v114)
            {
              v116 = 8 * v114;
              while ((unint64_t)*v113 + 1 <= 1)
              {
                ++v113;
                v116 -= 8;
                if (!v116)
                {
                  v113 = v115;
                  break;
                }
              }
            }
            v117 = v115;
LABEL_81:
            while (v113 != v115)
            {
              v118 = **v113;
              v119 = v118[1];
              if (v119 <= 0x3FF)
              {
                if (*((unsigned __int8 *)v118 + 9) >= 2u)
                {
                  do
                  {
                    JSC::MarkedBlock::Handle::isLive((uint64_t)v118, *((_QWORD *)v118 + 11) + 16 * v119, v106, v107, v108, v109, v110, v111);
                    v119 += *v118;
                  }
                  while (v119 <= 0x3FF);
                }
                else
                {
                  do
                  {
                    v120 = *((_QWORD *)v118 + 11) + 16 * v119;
                    if (JSC::MarkedBlock::Handle::isLive((uint64_t)v118, v120, v106, v107, v108, v109, v110, v111))
                    {
                      v121 = *(_BYTE *)(v120 + 5) == 8 ? v120 : 0;
                      v224[0] = v121;
                      if (v121)
                      {
                        if (dword_1ECF58884)
                        {
                          v122 = 0;
                          while (1)
                          {
                            v123 = *(_QWORD *)(qword_1ECF58878 + 8 * v122);
                            if (v123)
                            {
                              v124 = *(uint64_t **)(v123 + 8);
                              if (v124)
                              {
                                if ((v124[1] & 3) != 0)
                                  v124 = 0;
                                else
                                  v124 = (uint64_t *)*v124;
                              }
                              if (v124 == (uint64_t *)v121)
                                break;
                            }
                            if (dword_1ECF58884 == ++v122)
                              goto LABEL_99;
                          }
                          if (v122 >= dword_1ECF58884)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1986B667CLL);
                          }
                          ++*(_QWORD *)(v123 + 64);
                        }
                        else
                        {
LABEL_99:
                          v125 = HIDWORD(v217);
                          if (HIDWORD(v217) == (_DWORD)v217)
                          {
                            v126 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v216, HIDWORD(v217) + 1, (unint64_t)v224);
                            v127 = HIDWORD(v217) + 1;
                            *((_QWORD *)v216 + HIDWORD(v217)) = *(_QWORD *)v126;
                            HIDWORD(v217) = v127;
                          }
                          else
                          {
                            *((_QWORD *)v216 + HIDWORD(v217)) = v121;
                            HIDWORD(v217) = v125 + 1;
                          }
                        }
                      }
                    }
                    v119 += *v118;
                  }
                  while (v119 <= 0x3FF);
                }
              }
              v128 = v113 + 1;
              v113 = v117;
              if (v128 != v117)
              {
                v113 = v128;
                while ((unint64_t)*v113 + 1 <= 1)
                {
                  if (++v113 == v117)
                  {
                    v113 = v117;
                    break;
                  }
                }
              }
            }
            v129 = *(unsigned int *)(v112 + 388);
            if ((_DWORD)v129)
            {
              v130 = *(uint64_t **)(v112 + 376);
              v131 = &v130[v129];
              do
              {
                v132 = *v130;
                if (((*(_BYTE *)(*v130 + 33) & 1) != 0 || (*(_BYTE *)(v132 + 32) & 1) != 0)
                  && *(unsigned __int16 *)(v132 + 34) <= 0x1FFu)
                {
                  v133 = v132 + 112;
                  v134 = *(unsigned __int8 *)(v132 + 117);
                  v135 = v134 == 8;
                  v136 = v134 == 8 ? v133 : 0;
                  v224[0] = v136;
                  if (v135)
                  {
                    if (dword_1ECF58884)
                    {
                      v137 = 0;
                      while (1)
                      {
                        v138 = *(_QWORD *)(qword_1ECF58878 + 8 * v137);
                        if (v138)
                        {
                          v139 = *(uint64_t **)(v138 + 8);
                          if (v139)
                          {
                            if ((v139[1] & 3) != 0)
                              v139 = 0;
                            else
                              v139 = (uint64_t *)*v139;
                          }
                          if (v139 == (uint64_t *)v136)
                            break;
                        }
                        if (dword_1ECF58884 == ++v137)
                          goto LABEL_133;
                      }
                      if (v137 >= dword_1ECF58884)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1986B6684);
                      }
                      ++*(_QWORD *)(v138 + 64);
                    }
                    else
                    {
LABEL_133:
                      v140 = HIDWORD(v217);
                      if (HIDWORD(v217) == (_DWORD)v217)
                      {
                        v141 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v216, HIDWORD(v217) + 1, (unint64_t)v224);
                        v142 = HIDWORD(v217) + 1;
                        *((_QWORD *)v216 + HIDWORD(v217)) = *(_QWORD *)v141;
                        HIDWORD(v217) = v142;
                      }
                      else
                      {
                        *((_QWORD *)v216 + HIDWORD(v217)) = v136;
                        HIDWORD(v217) = v140 + 1;
                      }
                    }
                  }
                }
                ++v130;
              }
              while (v130 != v131);
            }
            JSC::MarkedSpace::didFinishIterating(v211, v105, v106, v107, v108, v109, v110, v111);
            v143 = __ldxr((unsigned __int8 *)&_MergedGlobals_36);
            if (v143 == 1)
            {
              v144 = v213;
              if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_36))
                goto LABEL_144;
            }
            else
            {
              __clrex();
              v144 = v213;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_36, 0, (uint64_t)v12, v13, v14, v15, v16, v17);
LABEL_144:
            v145 = v216;
            if (HIDWORD(v217))
            {
              v146 = 8 * HIDWORD(v217);
              v147 = v216;
              do
              {
                v148 = *(_QWORD *)v147;
                v147 = (WTF::StringImpl *)((char *)v147 + 8);
                Inspector::InspectorDebuggerAgent::didCreateNativeExecutable((Inspector::InspectorDebuggerAgent *)a1, v148, v12, v13, v14, v15, v16, v17);
                v146 -= 8;
              }
              while (v146);
            }
            if (v145)
              WTF::fastFree((unint64_t)v145, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
            --*(_DWORD *)(v212 + 916);
            *v144 = 0;
            v144[8] = 0;
            goto LABEL_150;
          }
          v199 = &v113[v114];
        }
        else
        {
          v115 = 0;
          v199 = 0;
          v114 = 0;
        }
        v117 = &v113[v114];
        v113 = v199;
        goto LABEL_81;
      }
    }
    else
    {
      v51 = *v20;
      v52 = (WTF::StringImpl **)(*v20 + 48 * v28);
      v53 = v216;
      if (v216)
        *(_DWORD *)v216 += 2;
      *v52 = v53;
      v54 = v51 + 48 * v28;
      *(_WORD *)(v54 + 8) = (_WORD)v217;
      v55 = (WTF **)(v54 + 16);
      v56 = v218;
      if (v218)
        ++*(_DWORD *)v218;
      *v55 = v56;
      v57 = v51 + 48 * v28;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v57 + 24), (uint64_t *)&v219);
      *(_BYTE *)(v57 + 32) = 0;
      v46 = v57 + 32;
      *(_BYTE *)(v46 + 8) = 0;
      v47 = (_BYTE *)(v46 + 8);
      if (!v221)
      {
        ++*(_DWORD *)(a1 + 244);
        goto LABEL_58;
      }
      v48 = v220;
      if (!v220)
        goto LABEL_31;
    }
    ++*(_DWORD *)v48;
    goto LABEL_31;
  }
  v21 = 0;
  v22 = 0;
  while (1)
  {
    v23 = *v20;
    v24 = *(WTF::StringImpl **)(*v20 + v21);
    if (v24 == v216 || (v24 ? (v25 = v216 == 0) : (v25 = 1), !v25 && WTF::equal(v24, v216, v12)))
    {
      if (__PAIR64__(*(unsigned __int8 *)(v23 + v21 + 9), *(unsigned __int8 *)(v23 + v21 + 8)) == __PAIR64__(BYTE1(v217), v217))break;
    }
    ++v22;
    v26 = *(unsigned int *)(a1 + 244);
    v21 += 48;
    if (v22 >= v26)
      goto LABEL_23;
  }
  v58 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v58 = 0x5B00000002;
  *(_QWORD *)(v58 + 8) = "Symbolic breakpoint for given symbol, given caseSensitive, and given isRegex already exists";
  *(_DWORD *)(v58 + 16) = 4;
  *(_QWORD *)a6 = v58;
  a6[8] = 1;
  if (v221)
  {
    v59 = v220;
    v220 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
      {
        v174 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v59 + 3);
        *((_QWORD *)v59 + 3) = 0;
        if (v174)
        {
          JSC::Yarr::BytecodePattern::~BytecodePattern(v174, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
        }
        v183 = (_QWORD *)*((_QWORD *)v59 + 1);
        if (v183)
        {
          v197 = (void *)v183[5];
          v198 = v183[6];
          v183[5] = 0;
          v183[6] = 0;
          v183[4] = 0;
          if (munmap(v197, v198) == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986B65E8);
          }
        }
        WTF::fastFree((unint64_t)v59, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      }
      else
      {
        --*(_DWORD *)v59;
      }
    }
  }
  v60 = (uint64_t)v219;
  if (v219)
  {
    v200 = *((unsigned int *)v219 - 1);
    if ((_DWORD)v200)
    {
      v201 = v219;
      do
      {
        v202 = *v201;
        if (*v201 != (WTF::StringImpl *)-1)
        {
          *v201 = 0;
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
            {
              WTF::StringImpl::~StringImpl(v202, (WTF::AtomStringImpl *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
              WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
            }
            else
            {
              *(_DWORD *)v202 -= 2;
            }
          }
        }
        ++v201;
        --v200;
      }
      while (v200);
    }
    WTF::fastFree(v60 - 16, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  }
  v61 = v218;
  v218 = 0;
  if (v61)
    WTF::RefCounted<JSC::Breakpoint>::deref(v61, (WTF::AtomStringImpl *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  v62 = v216;
  v216 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, (WTF::AtomStringImpl *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
LABEL_150:
  v149 = v222;
  v222 = 0;
  if (v149)
    WTF::RefCounted<JSC::Breakpoint>::deref(v149, (WTF::AtomStringImpl *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
    {
      WTF::StringImpl::~StringImpl(v223, (WTF::AtomStringImpl *)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v223 -= 2;
    }
  }
}

void Inspector::InspectorDebuggerAgent::didCreateNativeExecutable(Inspector::InspectorDebuggerAgent *this, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *v14;
  uint64_t v15;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t v69[4];
  char v70;
  unint64_t v71;
  const WTF::StringImpl *v72;

  if (BYTE1(dword_1ECF4C240))
  {
    v9 = *((unsigned int *)this + 61);
    if ((_DWORD)v9)
    {
      v11 = *(const WTF::StringImpl **)(a2 + 64);
      if (v11)
      {
        v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
        *(_DWORD *)v11 += 2;
        v72 = v11;
        if (!*((_DWORD *)v11 + 1))
        {
          v72 = 0;
LABEL_47:
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
          return;
        }
        v13 = 0;
        v14 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)*((_QWORD *)this + 29);
        v15 = 48 * v9;
        do
        {
          v13 += Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(v14, &v72, a3, a4, a5, a6, a7, a8);
          v14 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)((char *)v14 + 48);
          v15 -= 48;
        }
        while (v15);
        if (!v13)
        {
LABEL_46:
          v11 = v72;
          v72 = 0;
          if (!v11)
            return;
          goto LABEL_47;
        }
        if (__ldaxr((unsigned __int8 *)&_MergedGlobals_36))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_36))
        {
          goto LABEL_13;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_36);
LABEL_13:
        v17 = &unk_1ECF58000;
        if ((byte_1ECF58871 & 1) != 0)
        {
          if (dword_1ECF58884)
          {
            v18 = 0;
            while (1)
            {
              v19 = *(_QWORD *)(qword_1ECF58878 + 8 * v18);
              if (v19)
              {
                v20 = *(_QWORD *)(v19 + 8);
                if (v20)
                {
                  if ((*(_BYTE *)(v20 + 8) & 3) == 0 && *(_QWORD *)v20 == a2)
                    break;
                }
              }
              if (dword_1ECF58884 == ++v18)
                goto LABEL_21;
            }
            if (v18 >= dword_1ECF58884)
            {
              __break(0xC471u);
              return;
            }
            *(_QWORD *)(v19 + 64) += v13;
LABEL_41:
            v37 = __ldxr((unsigned __int8 *)&_MergedGlobals_36);
            if (v37 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_36))
                goto LABEL_46;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_36, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_46;
          }
        }
        else
        {
          *(_QWORD *)&dword_1ECF58880 = 0;
          qword_1ECF58878 = 0;
          byte_1ECF58871 = 1;
        }
LABEL_21:
        v21 = WTF::fastMalloc((WTF *)0x48);
        *(_DWORD *)v21 = 1;
        *(_OWORD *)(v21 + 8) = 0u;
        v22 = (uint64_t **)(v21 + 8);
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        v71 = v21;
        v23 = (a2 - 112) | 1;
        if ((a2 & 8) == 0)
          v23 = a2 & 0xFFFFFFFFFFFFC000;
        if ((v23 & 1) != 0)
          v24 = (_QWORD *)(v23 + 47);
        else
          v24 = (_QWORD *)(*(_QWORD *)v23 + 32);
        v25 = (uint64_t *)v24[2];
        if (!v25)
        {
          while (1)
          {
            v46 = (_QWORD *)v24[3];
            if (!v46)
              break;
            v24[3] = v46[2];
            v25 = (uint64_t *)v46[4];
            v46[3] = 257;
            v46[4] = 0;
            if (v25)
              goto LABEL_26;
          }
          v67 = v21;
          v68 = (uint64_t **)(v21 + 8);
          v66 = v23;
          v54 = v24;
          v55 = v24[6];
          if (!v24[1])
          {
            v56 = *(_QWORD **)(v55 + 488);
            *v24 = v55 + 480;
            v24[1] = v56;
            *v56 = v24;
            *(_QWORD *)(v55 + 488) = v24;
          }
          *(_QWORD *)(v55 + 1072) += 1024;
          v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
          JSC::WeakBlock::WeakBlock((uint64_t)v57, v66);
          JSC::Heap::didAllocate((JSC::Heap *)(v54[6] + 192), 0x400uLL, v58, v59, v60, v61, v62, v63);
          v24 = v54;
          v64 = v54 + 4;
          v65 = v54[5];
          if (v65)
            v64 = (_QWORD *)(v65 + 16);
          *v64 = v57;
          v54[5] = v57;
          v57[1] = v65;
          v57[2] = 0;
          v25 = (uint64_t *)v57[4];
          v57[3] = 257;
          v57[4] = 0;
          v21 = v67;
          v22 = v68;
          v17 = (_DWORD *)&unk_1ECF58000;
        }
LABEL_26:
        v24[2] = *v25;
        *v25 = a2;
        v25[1] = 0;
        v25[2] = 0;
        v26 = *v22;
        *v22 = v25;
        if (v26)
          v26[1] = 3;
        *(_QWORD *)(v21 + 64) = v13;
        v69[0] = a2;
        v69[1] = v12;
        v69[2] = (uint64_t)&v70;
        v69[3] = (uint64_t)&v71;
        v27 = Inspector::InspectorDebuggerAgent::didCreateNativeExecutable(JSC::NativeExecutable &)::$_1::operator()(v69, 0);
        v28 = Inspector::InspectorDebuggerAgent::didCreateNativeExecutable(JSC::NativeExecutable &)::$_1::operator()(v69, 1);
        if ((v27 & 1) == 0 && !v28)
        {
LABEL_37:
          v34 = v71;
          v71 = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr((unsigned int *)v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)v34));
            if (!v36)
            {
              atomic_store(1u, (unsigned int *)v34);
              Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v34 + 8), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v34, v47, v48, v49, v50, v51, v52, v53);
            }
          }
          goto LABEL_41;
        }
        if ((byte_1ECF58871 & 1) != 0)
        {
          v29 = dword_1ECF58884;
          if (dword_1ECF58884 != dword_1ECF58880)
          {
            v33 = v71;
            v71 = 0;
            *(_QWORD *)(qword_1ECF58878 + 8 * dword_1ECF58884) = v33;
            goto LABEL_36;
          }
        }
        else
        {
          v29 = 0;
          *(_QWORD *)&dword_1ECF58880 = 0;
          qword_1ECF58878 = 0;
          byte_1ECF58871 = 1;
        }
        v30 = (uint64_t *)WTF::Vector<WTF::Box<Inspector::ReplacedThunk>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 1, (unint64_t)&v71);
        v29 = dword_1ECF58884;
        v31 = qword_1ECF58878;
        v32 = *v30;
        *v30 = 0;
        *(_QWORD *)(v31 + 8 * v29) = v32;
LABEL_36:
        v17[545] = v29 + 1;
        goto LABEL_37;
      }
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::addSymbolicBreakpoint(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, WTF::JSONImpl::ObjectBase **a5@<X4>, _BYTE *a6@<X8>)
{
  Inspector::InspectorDebuggerAgent::addSymbolicBreakpoint(a1 - 16, a2, a3, a4, a5, a6);
}

void Inspector::InspectorDebuggerAgent::removeSymbolicBreakpoint(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>)
{
  WTF::StringImpl *v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  char *v18;
  unint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Yarr::BytecodePattern *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  size_t v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  WTF::AtomStringImpl *v78;
  const WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unint64_t *v87;
  _BYTE *v88;
  char v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD *v102;
  WTF::StringImpl *v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  WTF *v123;
  WTF::StringImpl **v124;
  WTF *v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  JSC::Yarr::BytecodePattern *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  void *v145;
  size_t v146;
  uint64_t v147;
  WTF::StringImpl **v148;
  WTF::StringImpl *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v160;
  unsigned int *v161;
  WTF::StringImpl *v162;
  __int16 v163;
  WTF *v164;
  WTF::StringImpl **v165;
  WTF *v166;
  char v167;
  _QWORD v168[2];
  WTF::StringImpl *v169[3];

  v163 = 1;
  v167 = 0;
  v164 = 0;
  v165 = 0;
  LOBYTE(v166) = 0;
  v11 = *a2;
  if (*a2)
    *(_DWORD *)v11 += 2;
  v162 = v11;
  if (*((_BYTE *)a3 + 1))
  {
    v12 = *(unsigned __int8 *)a3;
    LOBYTE(v163) = *(_BYTE *)a3;
  }
  else
  {
    v12 = 1;
  }
  if (a4[1])
  {
    v13 = *a4;
    HIBYTE(v163) = *a4;
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 232);
  v15 = *(_DWORD *)(a1 + 244);
  v16 = v14 + 48 * v15;
  if (v15)
  {
    v17 = 0;
    v18 = (char *)(v14 + 48 * v15);
    v19 = (unint64_t)v18;
    do
    {
      v20 = *(WTF **)v14;
      v21 = v162;
      if (*(WTF::StringImpl **)v14 == v162
        || (v20 ? (v22 = v162 == 0) : (v22 = 1), !v22 && WTF::equal(v20, v162, a3)))
      {
        if (*(unsigned __int8 *)(v14 + 8) == v12 && *(unsigned __int8 *)(v14 + 9) == v13)
        {
          v23 = v14;
          if (v19 != *(_QWORD *)(a1 + 232) + 48 * *(unsigned int *)(a1 + 244))
          {
            if (v18 == (char *)v14)
            {
              v23 = v19;
            }
            else
            {
              WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::moveOverlapping(v18, (char *)v14, v19, (uint64_t)a4, a5, a6, a7, a8);
              v23 = v19 + v14 - (_QWORD)v18;
            }
          }
          if (*(_BYTE *)(v14 + 40))
          {
            v24 = *(_QWORD *)(v14 + 32);
            *(_QWORD *)(v14 + 32) = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
              {
                v36 = *(JSC::Yarr::BytecodePattern **)(v24 + 24);
                *(_QWORD *)(v24 + 24) = 0;
                if (v36)
                {
                  JSC::Yarr::BytecodePattern::~BytecodePattern(v36, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
                }
                v45 = *(_QWORD **)(v24 + 8);
                if (v45)
                {
                  v46 = (void *)v45[5];
                  v47 = v45[6];
                  v45[5] = 0;
                  v45[6] = 0;
                  v45[4] = 0;
                  if (munmap(v46, v47) == -1)
                  {
                    __break(0xC471u);
                    goto LABEL_133;
                  }
                }
                WTF::fastFree(v24, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              }
              else
              {
                --*(_DWORD *)v24;
              }
            }
          }
          v25 = *(_QWORD *)(v14 + 24);
          if (v25)
          {
            v48 = *(unsigned int *)(v25 - 4);
            if ((_DWORD)v48)
            {
              v49 = *(WTF::StringImpl ***)(v14 + 24);
              do
              {
                v50 = *v49;
                if (*v49 != (WTF::StringImpl *)-1)
                {
                  *v49 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                    {
                      v158 = v48;
                      WTF::StringImpl::~StringImpl(v50, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
                      v48 = v158;
                    }
                    else
                    {
                      *(_DWORD *)v50 -= 2;
                    }
                  }
                }
                ++v49;
                --v48;
              }
              while (v48);
            }
            WTF::fastFree(v25 - 16, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          v26 = *(WTF **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v26)
            WTF::RefCounted<JSC::Breakpoint>::deref(v26, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v27 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::~StringImpl(v27, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            }
            else
            {
              *(_DWORD *)v27 -= 2;
            }
          }
          v18 = (char *)(v14 + 48);
          ++v17;
          v19 = v23;
        }
      }
      v14 += 48;
    }
    while (v14 < v16);
    v14 = *(_QWORD *)(a1 + 232);
    v59 = *(_DWORD *)(a1 + 244);
    v15 = v59;
    v16 = v19;
  }
  else
  {
    v59 = 0;
    v17 = 0;
    v18 = *(char **)(a1 + 232);
  }
  v60 = (char *)(v14 + 48 * v59);
  if (v18 != v60)
  {
    WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::moveOverlapping(v18, v60, v16, (uint64_t)a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 244);
  }
  *(_DWORD *)(a1 + 244) = v15 - v17;
  if (v17)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v161, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a10);
    v61 = *(_QWORD *)(a1 + 56);
    v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v62 = off_1E3595268;
    v62[1] = &v162;
    v160 = v62;
    v63 = *(_QWORD *)(v61 + 16) + 192;
    v168[0] = v61;
    v168[1] = &v160;
    v169[0] = (WTF::StringImpl *)WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::forEachRegisteredCodeBlock(WTF::Function<void ()(JSC::CodeBlock *)> const&)::$_0>::implFunction;
    v169[1] = (WTF::StringImpl *)v169;
    v169[2] = (WTF::StringImpl *)v168;
    JSC::Heap::forEachCodeBlockImpl(v63, (uint64_t)v169, v64, v65, v66, v67, v68, v69);
    v77 = v160;
    v160 = 0;
    if (v77)
      (*(void (**)(_QWORD *))(*v77 + 8))(v77);
    JSC::JSLockHolder::~JSLockHolder(&v161, v70, v71, v72, v73, v74, v75, v76);
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_36))
    {
      goto LABEL_64;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_36);
LABEL_64:
    if ((byte_1ECF58871 & 1) != 0)
    {
      v90 = qword_1ECF58878;
      v91 = dword_1ECF58884;
      v92 = qword_1ECF58878 + 8 * dword_1ECF58884;
      v93 = 0;
      if (dword_1ECF58884)
      {
        v94 = (unint64_t *)(qword_1ECF58878 + 8 * dword_1ECF58884);
        v95 = (unint64_t)v94;
        while (1)
        {
          v96 = *(_QWORD *)v90;
          v97 = *(uint64_t **)(*(_QWORD *)v90 + 8);
          if (!v97)
            goto LABEL_70;
          v98 = *v97;
          if (!*v97 || (v97[1] & 3) != 0)
            goto LABEL_70;
          v102 = (_QWORD *)(v98 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v98 & 8) != 0)
            v102 = (_QWORD *)(v98 - 16);
          if (*v102 != *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16))
            goto LABEL_80;
          v103 = *(WTF::StringImpl **)(v98 + 64);
          if (v103)
            *(_DWORD *)v103 += 2;
          v169[0] = v103;
          v104 = Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches((Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)&v162, v169, v79, v80, v81, v82, v83, v84);
          v105 = v169[0];
          v169[0] = 0;
          if (!v105)
            goto LABEL_90;
          if (*(_DWORD *)v105 != 2)
            break;
          WTF::StringImpl::~StringImpl(v105, v78, (uint64_t)v79, v80, v81, v82, v83, v84);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
          if (!v104)
            goto LABEL_80;
LABEL_91:
          v96 = *(_QWORD *)v90;
          v106 = *(_QWORD *)(*(_QWORD *)v90 + 64) - 1;
          *(_QWORD *)(*(_QWORD *)v90 + 64) = v106;
          if (v106)
            goto LABEL_80;
LABEL_70:
          v99 = v90;
          if (v95 == qword_1ECF58878 + 8 * dword_1ECF58884)
            goto LABEL_75;
          if (v94 == (unint64_t *)v90)
          {
            v99 = v95;
LABEL_75:
            *(_QWORD *)v90 = 0;
            v94 = (unint64_t *)(v90 + 8);
            v95 = v99;
            do
            {
LABEL_76:
              v100 = __ldaxr((unsigned int *)v96);
              v101 = v100 - 1;
            }
            while (__stlxr(v101, (unsigned int *)v96));
            if (!v101)
            {
              atomic_store(1u, (unsigned int *)v96);
              Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v96 + 8), (uint64_t)v78, (uint64_t)v79, v80, v81, v82, v83, v84);
              WTF::fastFree(v96, v115, v116, v117, v118, v119, v120, v121);
            }
            goto LABEL_79;
          }
          WTF::VectorMover<false,WTF::Box<Inspector::ReplacedThunk>>::moveOverlapping(v94, v90, v95, v80, v81, v82, v83, v84);
          v95 += v90 - (_QWORD)v94;
          v96 = *(_QWORD *)v90;
          *(_QWORD *)v90 = 0;
          v94 = (unint64_t *)(v90 + 8);
          if (v96)
            goto LABEL_76;
LABEL_79:
          ++v93;
LABEL_80:
          v90 += 8;
          if (v90 >= v92)
          {
            v90 = qword_1ECF58878;
            v91 = dword_1ECF58884;
            v92 = v95;
            goto LABEL_96;
          }
        }
        *(_DWORD *)v105 -= 2;
LABEL_90:
        if (!v104)
          goto LABEL_80;
        goto LABEL_91;
      }
      v94 = (unint64_t *)qword_1ECF58878;
    }
    else
    {
      v91 = 0;
      v90 = 0;
      v92 = 0;
      v94 = 0;
      v93 = 0;
      *(_QWORD *)&dword_1ECF58880 = 0;
      qword_1ECF58878 = 0;
      byte_1ECF58871 = 1;
    }
LABEL_96:
    v87 = (unint64_t *)(v90 + 8 * v91);
    if (v94 != v87)
    {
      WTF::VectorMover<false,WTF::Box<Inspector::ReplacedThunk>>::moveOverlapping(v94, (uint64_t)v87, v92, v80, v81, v82, v83, v84);
      v91 = dword_1ECF58884;
    }
    dword_1ECF58884 = v91 - v93;
    v122 = __ldxr((unsigned __int8 *)&_MergedGlobals_36);
    if (v122 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_36))
        goto LABEL_103;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_36, 0, (uint64_t)v79, v80, v81, v82, v83, v84);
LABEL_103:
    v89 = 0;
    v88 = a9;
    *a9 = 0;
    goto LABEL_104;
  }
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x5400000002;
  *(_QWORD *)(v86 + 8) = "Missing symbolic breakpoint for given symbol, given caseSensitive, and given isRegex";
  *(_DWORD *)(v86 + 16) = 4;
  v88 = a9;
  *(_QWORD *)a9 = v86;
  v89 = 1;
LABEL_104:
  v88[8] = v89;
  if (v167)
  {
    v123 = v166;
    v166 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 1)
      {
        v135 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v123 + 3);
        *((_QWORD *)v123 + 3) = 0;
        if (v135)
        {
          JSC::Yarr::BytecodePattern::~BytecodePattern(v135, v87, (uint64_t)v79, v80, v81, v82, v83, v84);
          WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
        }
        v144 = (_QWORD *)*((_QWORD *)v123 + 1);
        if (v144)
        {
          v145 = (void *)v144[5];
          v146 = v144[6];
          v144[5] = 0;
          v144[6] = 0;
          v144[4] = 0;
          if (munmap(v145, v146) == -1)
          {
            __break(0xC471u);
LABEL_133:
            JUMPOUT(0x1986B70F0);
          }
        }
        WTF::fastFree((unint64_t)v123, v87, (uint64_t)v79, v80, v81, v82, v83, v84);
      }
      else
      {
        --*(_DWORD *)v123;
      }
    }
  }
  v124 = v165;
  if (v165)
  {
    v147 = *((unsigned int *)v165 - 1);
    if ((_DWORD)v147)
    {
      v148 = v165;
      do
      {
        v149 = *v148;
        if (*v148 != (WTF::StringImpl *)-1)
        {
          *v148 = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 2)
            {
              WTF::StringImpl::~StringImpl(v149, (WTF::AtomStringImpl *)v87, (uint64_t)v79, v80, v81, v82, v83, v84);
              WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
            }
            else
            {
              *(_DWORD *)v149 -= 2;
            }
          }
        }
        ++v148;
        --v147;
      }
      while (v147);
    }
    WTF::fastFree((unint64_t)(v124 - 2), v87, (uint64_t)v79, v80, v81, v82, v83, v84);
  }
  v125 = v164;
  v164 = 0;
  if (v125)
    WTF::RefCounted<JSC::Breakpoint>::deref(v125, (WTF::AtomStringImpl *)v87, (uint64_t)v79, v80, v81, v82, v83, v84);
  v126 = v162;
  v162 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, (WTF::AtomStringImpl *)v87, (uint64_t)v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::removeSymbolicBreakpoint(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>)
{
  Inspector::InspectorDebuggerAgent::removeSymbolicBreakpoint(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Inspector::InspectorDebuggerAgent::continueUntilNextRunLoop(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _QWORD *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;
  _QWORD *v43;

  if (!*((_QWORD *)this + 13))
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v20 + 8) = "Must be paused";
    *(_DWORD *)(v20 + 16) = 4;
    *(_QWORD *)a9 = v20;
    *(_BYTE *)(a9 + 8) = 1;
    *(_QWORD *)v20 = 0xE00000002;
    return;
  }
  Inspector::InspectorDebuggerAgent::resume(this, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v41);
  if (!v42)
  {
    *((_BYTE *)this + 249) = 1;
    if (!*((_BYTE *)this + 254))
    {
      *((_BYTE *)this + 254) = 1;
      v21 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v31 = v22;
      *v22 = off_1E35952B8;
      v22[1] = this;
      v43 = v22;
      if (*(_QWORD *)(v21 + 90568))
      {
        v40 = *(unsigned int *)(v21 + 93476);
        if ((_DWORD)v40 != *(_DWORD *)(v21 + 93472))
        {
          *(_QWORD *)(*(_QWORD *)(v21 + 93464) + 8 * v40) = v22;
          *(_DWORD *)(v21 + 93476) = v40 + 1;
          *(_BYTE *)(v21 + 56) |= 0x20u;
          goto LABEL_11;
        }
        WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v21 + 93464, (unint64_t)&v43);
        v31 = v43;
        *(_BYTE *)(v21 + 56) |= 0x20u;
        v43 = 0;
        if (!v31)
          goto LABEL_11;
      }
      else
      {
        Inspector::InspectorDebuggerAgent::didBecomeIdle(this, v23, v24, v25, v26, v27, v28, v29, v30);
        v43 = 0;
      }
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    }
LABEL_11:
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 8) = 0;
    return;
  }
  v18 = v41;
  if (v41)
  {
    v19 = *(_DWORD *)v41;
    *(_DWORD *)v41 += 2;
    *(_QWORD *)a9 = v18;
    *(_BYTE *)(a9 + 8) = 1;
    if (v19)
    {
      *(_DWORD *)v18 = v19;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
  }
  else
  {
    *(_QWORD *)a9 = 0;
    *(_BYTE *)(a9 + 8) = 1;
  }
}

BOOL Inspector::InspectorDebuggerAgent::assertPaused(Inspector::InspectorDebuggerAgent *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0xE00000002;
    *(_QWORD *)(v11 + 8) = "Must be paused";
    *(_DWORD *)(v11 + 16) = 4;
    v12 = *a2;
    *a2 = (WTF::StringImpl *)v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  return v2 != 0;
}

void Inspector::InspectorDebuggerAgent::resume(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  char v15;
  uint64_t v16;

  if (!*((_QWORD *)this + 13))
  {
    if (!*((_BYTE *)this + 251))
    {
      v16 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v16 = 0x2200000002;
      *(_QWORD *)(v16 + 8) = "Must be paused or waiting to pause";
      *(_DWORD *)(v16 + 16) = 4;
      *(_QWORD *)a9 = v16;
      v15 = 1;
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  if (*((_BYTE *)this + 251))
  {
LABEL_5:
    *((_BYTE *)this + 251) = 0;
    v11 = *((_DWORD *)this + 39);
    if (v11 != 302)
    {
      *((_DWORD *)this + 42) = v11;
      v12 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      v13 = (WTF *)*((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::JSONImpl::Value::operator delete(v13, a2, a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v13;
      }
    }
    *((_DWORD *)this + 39) = 97;
    v14 = (WTF *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::JSONImpl::Value::operator delete(v14, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v14;
    }
    *(_WORD *)(*((_QWORD *)this + 7) + 48) &= ~2u;
    *((_BYTE *)this + 249) = 0;
  }
  JSC::Debugger::continueProgram(*((JSC::Debugger **)this + 7), a2, a3, a4, a5, a6, a7, a8);
  v15 = 0;
  *((_DWORD *)this + 38) = 2;
  *(_BYTE *)a9 = 0;
LABEL_14:
  *(_BYTE *)(a9 + 8) = v15;
}

uint64_t Inspector::InspectorDebuggerAgent::registerIdleHandler(uint64_t this)
{
  Inspector::InspectorDebuggerAgent *v1;
  uint64_t v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(this + 254))
  {
    v1 = (Inspector::InspectorDebuggerAgent *)this;
    *(_BYTE *)(this + 254) = 1;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 56) + 16);
    this = WTF::fastMalloc((WTF *)0x10);
    v11 = this;
    *(_QWORD *)this = off_1E35952B8;
    *(_QWORD *)(this + 8) = v1;
    v13 = this;
    if (!*(_QWORD *)(v2 + 90568))
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(v1, v3, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = *(unsigned int *)(v2 + 93476);
    if ((_DWORD)v12 != *(_DWORD *)(v2 + 93472))
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 93464) + 8 * v12) = this;
      *(_DWORD *)(v2 + 93476) = v12 + 1;
      *(_BYTE *)(v2 + 56) |= 0x20u;
      return this;
    }
    this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v2 + 93464, (unint64_t)&v13);
    v11 = v13;
    *(_BYTE *)(v2 + 56) |= 0x20u;
    v13 = 0;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::continueUntilNextRunLoop(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::continueUntilNextRunLoop((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

void Inspector::InspectorDebuggerAgent::continueToLocation(uint64_t a1@<X0>, WTF::String **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  JSC::SourceProvider **v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  unsigned int v48;
  BOOL v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  unsigned int *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  WTF::JSONImpl::ObjectBase *v98;
  _BYTE v99[72];
  char v100;
  unsigned int v101;
  unsigned int v102[2];
  WTF::StringImpl *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;

  v103 = 0;
  if (!*(_QWORD *)(a1 + 104))
  {
    v36 = (WTF::StringImpl *)WTF::fastCompactMalloc((WTF *)0x20);
    *((_QWORD *)v36 + 1) = "Must be paused";
    *((_DWORD *)v36 + 4) = 4;
    *(_QWORD *)v36 = 0xE00000004;
    *(_QWORD *)a9 = v36;
    *(_BYTE *)(a9 + 8) = 1;
    v37 = 2;
    goto LABEL_37;
  }
  v12 = *(_QWORD *)(a1 + 144);
  if (v12)
  {
    JSC::Debugger::removeBreakpoint(*(_QWORD **)(a1 + 56), v12, a3, a4, a5, (uint64_t)a6, a7, a8);
    v19 = *(WTF **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (v19)
      WTF::RefCounted<JSC::Breakpoint>::deref(v19, v13, v14, v15, v16, (uint64_t)a6, v17, v18);
  }
  *(_QWORD *)v102 = 0;
  v101 = 0;
  if (!Inspector::parseLocation(&v103, *a2, (const WTF::JSONImpl::Object *)&v102[1], v102, &v101, a6))
  {
LABEL_30:
    v78 = v103;
    if (v103)
      *(_DWORD *)v103 += 2;
    *(_QWORD *)a9 = v78;
    goto LABEL_34;
  }
  v27 = *(_QWORD *)(a1 + 72);
  if (v27)
  {
    v28 = *(_DWORD *)(v27 - 8);
    v29 = v102[1];
    v30 = 9 * ((v29 + ~(v29 << 15)) ^ ((v29 + ~(v29 << 15)) >> 10));
    v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
    v32 = (v31 ^ HIWORD(v31)) & v28;
    v33 = (JSC::SourceProvider **)(v27 + 72 * v32);
    v34 = *(_DWORD *)v33;
    if (*(_DWORD *)v33 != v102[1])
    {
      v35 = 1;
      while (v34)
      {
        v32 = (v32 + v35) & v28;
        v33 = (JSC::SourceProvider **)(v27 + 72 * v32);
        v34 = *(_DWORD *)v33;
        ++v35;
        if (*(_DWORD *)v33 == v102[1])
          goto LABEL_14;
      }
      v33 = (JSC::SourceProvider **)(v27 + 72 * *(unsigned int *)(v27 - 4));
    }
LABEL_14:
    if (v33 != (JSC::SourceProvider **)(v27 + 72 * *(unsigned int *)(v27 - 4)))
    {
      v98 = 0;
      v105 = v102[0];
      v106 = v102[1];
      v104 = v101;
      v38 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v38 = off_1E35951C8;
      *(_QWORD *)(v38 + 8) = &v106;
      *(_QWORD *)(v38 + 16) = &v105;
      *(_QWORD *)(v38 + 24) = &v104;
      v107 = (unsigned int *)v38;
      Inspector::parseBreakpointOptions<std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>(v99, &v103, &v98, &v107);
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      if (v100)
      {
        v39 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v39 + 1;
        Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::createDebuggerBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v99, v39, v29, (uint64_t *)&v98);
        v47 = v98;
        v48 = *((_DWORD *)v98 + 5);
        v49 = v48 >= *((_DWORD *)v33 + 12) && *((_DWORD *)v33 + 14) >= v48;
        if (v49 && (JSC::Debugger::resolveBreakpoint(*(JSC::Debugger **)(a1 + 56), (uint64_t)v98, v33[5]) & 1) != 0)
        {
          JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v107, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), v41, v42, v43, v44, v45, v46, v50);
          JSC::Debugger::setBreakpoint(*(_QWORD **)(a1 + 56), (uint64_t)v47, v51, v52, v53, v54, v55, v56);
          v58 = v57;
          JSC::JSLockHolder::~JSLockHolder(&v107, v59, v60, v61, v62, v63, v64, v65);
          if ((v58 & 1) != 0)
          {
            v73 = *(WTF **)(a1 + 144);
            *(_QWORD *)(a1 + 144) = v47;
            if (v73)
              WTF::RefCounted<JSC::Breakpoint>::deref(v73, v66, v67, v68, v69, v70, v71, v72);
            *(_DWORD *)(a1 + 152) = 1;
            if (*(_BYTE *)(a1 + 254))
              goto LABEL_29;
            *(_BYTE *)(a1 + 254) = 1;
            v74 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
            v75 = WTF::fastMalloc((WTF *)0x10);
            v77 = (unsigned int *)v75;
            *(_QWORD *)v75 = off_1E35952B8;
            *(_QWORD *)(v75 + 8) = a1;
            v107 = (unsigned int *)v75;
            if (*(_QWORD *)(v74 + 90568))
            {
              v97 = *(unsigned int *)(v74 + 93476);
              if ((_DWORD)v97 != *(_DWORD *)(v74 + 93472))
              {
                *(_QWORD *)(*(_QWORD *)(v74 + 93464) + 8 * v97) = v75;
                *(_DWORD *)(v74 + 93476) = v97 + 1;
                *(_BYTE *)(v74 + 56) |= 0x20u;
                goto LABEL_29;
              }
              WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v74 + 93464, (unint64_t)&v107);
              v77 = v107;
              *(_BYTE *)(v74 + 56) |= 0x20u;
              v107 = 0;
              if (!v77)
                goto LABEL_29;
            }
            else
            {
              Inspector::InspectorDebuggerAgent::didBecomeIdle((Inspector::InspectorDebuggerAgent *)a1, v66, v67, v68, v69, v70, v71, v72, v76);
              v107 = 0;
            }
            (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
LABEL_29:
            JSC::Debugger::continueProgram(*(JSC::Debugger **)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
            *(_BYTE *)a9 = 0;
            *(_BYTE *)(a9 + 8) = 0;
            goto LABEL_42;
          }
          JSC::Debugger::continueProgram(*(JSC::Debugger **)(a1 + 56), v66, v67, v68, v69, v70, v71, v72);
          Inspector::DebuggerFrontendDispatcher::resumed(*(Inspector::DebuggerFrontendDispatcher **)(a1 + 40));
          v96 = 0;
          *(_BYTE *)a9 = 0;
        }
        else
        {
          JSC::Debugger::continueProgram(*(JSC::Debugger **)(a1 + 56), v40, v41, v42, v43, v44, v45, v46);
          Inspector::DebuggerFrontendDispatcher::resumed(*(Inspector::DebuggerFrontendDispatcher **)(a1 + 40));
          v88 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v88 = 0x1C00000002;
          *(_QWORD *)(v88 + 8) = "Could not resolve breakpoint";
          *(_DWORD *)(v88 + 16) = 4;
          *(_QWORD *)a9 = v88;
          v96 = 1;
        }
        *(_BYTE *)(a9 + 8) = v96;
        WTF::RefCounted<JSC::Breakpoint>::deref(v47, v89, v90, v91, v92, v93, v94, v95);
LABEL_42:
        if (v100)
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v99, v20, v21, v22, v23, v24, v25, v26);
        goto LABEL_35;
      }
      goto LABEL_30;
    }
  }
  JSC::Debugger::continueProgram(*(JSC::Debugger **)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
  Inspector::DebuggerFrontendDispatcher::resumed(*(Inspector::DebuggerFrontendDispatcher **)(a1 + 40));
  v79 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v79 = 0x2D00000002;
  *(_QWORD *)(v79 + 8) = "Missing script for scriptId in given location";
  *(_DWORD *)(v79 + 16) = 4;
  *(_QWORD *)a9 = v79;
LABEL_34:
  *(_BYTE *)(a9 + 8) = 1;
LABEL_35:
  v36 = v103;
  if (!v103)
    return;
  v37 = *(_DWORD *)v103 - 2;
  if (*(_DWORD *)v103 == 2)
  {
    WTF::StringImpl::~StringImpl(v103, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    return;
  }
LABEL_37:
  *(_DWORD *)v36 = v37;
}

uint64_t Inspector::InspectorDebuggerAgent::willStepAndMayBecomeIdle(uint64_t this)
{
  Inspector::InspectorDebuggerAgent *v1;
  uint64_t v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(this + 152) = 1;
  if (!*(_BYTE *)(this + 254))
  {
    v1 = (Inspector::InspectorDebuggerAgent *)this;
    *(_BYTE *)(this + 254) = 1;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 56) + 16);
    this = WTF::fastMalloc((WTF *)0x10);
    v11 = this;
    *(_QWORD *)this = off_1E35952B8;
    *(_QWORD *)(this + 8) = v1;
    v13 = this;
    if (!*(_QWORD *)(v2 + 90568))
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(v1, v3, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = *(unsigned int *)(v2 + 93476);
    if ((_DWORD)v12 != *(_DWORD *)(v2 + 93472))
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 93464) + 8 * v12) = this;
      *(_DWORD *)(v2 + 93476) = v12 + 1;
      *(_BYTE *)(v2 + 56) |= 0x20u;
      return this;
    }
    this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v2 + 93464, (unint64_t)&v13);
    v11 = v13;
    *(_BYTE *)(v2 + 56) |= 0x20u;
    v13 = 0;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::continueToLocation(uint64_t a1@<X0>, WTF::String **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::continueToLocation(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Inspector::InspectorDebuggerAgent::searchInContent@<X0>(WTF::String *a1@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int *v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  int v65;
  uint64_t result;
  uint64_t v67;

  v7 = *a3;
  if (!*a3)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
LABEL_41:
    v32 = 0;
    v11 = 0;
    v33 = 0;
    if (!v8 || !v9)
      goto LABEL_75;
    v34 = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v8 + v34);
      if ((v35 - 9) >= 5 && v35 != 32)
        break;
      if (v9 == ++v34)
        goto LABEL_74;
    }
    if (v35 == 43)
    {
      if (v9 - 1 == v34)
      {
LABEL_74:
        v11 = 0;
        v32 = 0;
        v33 = 0;
LABEL_75:
        v14 = v33 | v32;
        goto LABEL_76;
      }
      v36 = ~v34 + v9;
      v37 = (unsigned __int8 *)(v8 + v34 + 1);
      v35 = *v37;
    }
    else
    {
      v37 = (unsigned __int8 *)(v8 + v34);
      v36 = v9 - v34;
    }
    if ((v35 - 48) <= 9)
    {
      v38 = 0;
      v39 = 0;
      v40 = v36 - 1;
      v41 = v37 + 1;
      do
      {
        v42 = v35 - 48;
        v43 = 10 * v38;
        if ((v43 & 0xFFFFFFFF00000000) == 0)
          v38 *= 10;
        v44 = __CFADD__(v38, v42);
        v45 = v38 + v42;
        v46 = v44;
        if (!v44)
          v38 = v45;
        if ((v43 & 0xFFFFFFFF00000000) != 0)
          v47 = 1;
        else
          v47 = v46;
        if (v47)
          v39 = 1;
        if (!v40)
          break;
        v48 = *v41++;
        v35 = v48;
        v49 = v48 - 48;
        --v40;
      }
      while ((v48 - 48) <= 9 && v49 < 0xA);
      if (!v39)
      {
        v33 = v38 & 0xFFFFFF00;
        v32 = v38;
        v11 = 0x100000000;
        goto LABEL_75;
      }
    }
    goto LABEL_74;
  }
  if (v8)
    v10 = (_DWORD)v9 == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_8;
  v15 = 0;
  v16 = 2 * v9;
  while (1)
  {
    v17 = *(unsigned __int16 *)(v8 + v15);
    if ((v17 - 9) >= 5 && v17 != 32)
      break;
    --v9;
    v15 += 2;
    if (v16 == v15)
      goto LABEL_8;
  }
  if (v17 == 43)
  {
    if (v16 - 2 == v15)
      goto LABEL_8;
    --v9;
    v18 = (unsigned __int16 *)(v8 + v15 + 2);
    v17 = *v18;
  }
  else
  {
    v18 = (unsigned __int16 *)(v8 + v15);
  }
  if ((v17 - 48) <= 9)
  {
    v19 = 0;
    v20 = 0;
    v21 = v9 - 1;
    v22 = v18 + 1;
    do
    {
      v23 = v17 - 48;
      v24 = 10 * v19;
      if ((v24 & 0xFFFFFFFF00000000) == 0)
        v19 *= 10;
      v25 = __CFADD__(v19, v23);
      v26 = v19 + v23;
      v27 = v25;
      if (!v25)
        v19 = v26;
      if ((v24 & 0xFFFFFFFF00000000) != 0)
        v28 = 1;
      else
        v28 = v27;
      if (v28)
        v20 = 1;
      if (!v21)
        break;
      v29 = *v22++;
      v17 = v29;
      v30 = v29 - 48;
      --v21;
    }
    while ((v29 - 48) <= 9 && v30 < 0xA);
    if (!v20)
    {
      v13 = v19 & 0xFFFFFF00;
      v12 = v19;
      v11 = 0x100000000;
      goto LABEL_9;
    }
  }
LABEL_8:
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_9:
  v14 = v13 | v12;
LABEL_76:
  v51 = v11 | v14;
  v52 = 0;
  if (v51 > 0x100000000)
    v52 = v51;
  v53 = *(_QWORD *)(a2 + 72);
  if (!v53)
    goto LABEL_99;
  v54 = *(_DWORD *)(v53 - 8);
  v55 = 9 * ((~(v52 << 15) + v52) ^ ((~(v52 << 15) + v52) >> 10));
  v56 = (v55 ^ (v55 >> 6)) + ~((v55 ^ (v55 >> 6)) << 11);
  v57 = v54 & (v56 ^ HIWORD(v56));
  v58 = (int *)(v53 + 72 * v57);
  v59 = *v58;
  if (*v58 != v52)
  {
    v60 = 1;
    while (v59)
    {
      v57 = (v57 + v60) & v54;
      v58 = (int *)(v53 + 72 * v57);
      v59 = *v58;
      ++v60;
      if (*v58 == v52)
        goto LABEL_85;
    }
    v58 = (int *)(v53 + 72 * *(unsigned int *)(v53 - 4));
  }
LABEL_85:
  if (v58 == (int *)(v53 + 72 * *(unsigned int *)(v53 - 4)))
  {
LABEL_99:
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x2100000002;
    *(_QWORD *)(result + 8) = "Missing script for given scriptId";
    *(_DWORD *)(result + 16) = 4;
    v65 = 1;
  }
  else
  {
    if (a4[1])
      v61 = *a4 == 0;
    else
      v61 = 1;
    v62 = !v61;
    if (a5[1])
      v63 = *a5 == 0;
    else
      v63 = 1;
    v64 = !v63;
    Inspector::ContentSearchUtilities::searchInTextByLines((Inspector::ContentSearchUtilities *)(v58 + 4), a1, (const WTF::String *)v62, v64, &v67);
    v65 = 0;
    result = v67;
  }
  *(_QWORD *)a6 = result;
  *(_DWORD *)(a6 + 8) = v65;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::searchInContent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::String *a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  return Inspector::InspectorDebuggerAgent::searchInContent(a3, a1 - 16, a2, a4, a5, a6);
}

uint64_t Inspector::InspectorDebuggerAgent::getScriptSource@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int *v55;
  int v56;
  int v57;
  uint64_t result;
  int v59;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_41;
  }
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 4);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
LABEL_41:
    v29 = 0;
    v8 = 0;
    v30 = 0;
    if (!v5 || !v6)
      goto LABEL_75;
    v31 = 0;
    while (1)
    {
      v32 = *(unsigned __int8 *)(v5 + v31);
      if ((v32 - 9) >= 5 && v32 != 32)
        break;
      if (v6 == ++v31)
        goto LABEL_74;
    }
    if (v32 == 43)
    {
      if (v6 - 1 == v31)
      {
LABEL_74:
        v8 = 0;
        v29 = 0;
        v30 = 0;
LABEL_75:
        v11 = v30 | v29;
        goto LABEL_76;
      }
      v33 = ~v31 + v6;
      v34 = (unsigned __int8 *)(v5 + v31 + 1);
      v32 = *v34;
    }
    else
    {
      v34 = (unsigned __int8 *)(v5 + v31);
      v33 = v6 - v31;
    }
    if ((v32 - 48) <= 9)
    {
      v35 = 0;
      v36 = 0;
      v37 = v33 - 1;
      v38 = v34 + 1;
      do
      {
        v39 = v32 - 48;
        v40 = 10 * v35;
        if ((v40 & 0xFFFFFFFF00000000) == 0)
          v35 *= 10;
        v41 = __CFADD__(v35, v39);
        v42 = v35 + v39;
        v43 = v41;
        if (!v41)
          v35 = v42;
        if ((v40 & 0xFFFFFFFF00000000) != 0)
          v44 = 1;
        else
          v44 = v43;
        if (v44)
          v36 = 1;
        if (!v37)
          break;
        v45 = *v38++;
        v32 = v45;
        v46 = v45 - 48;
        --v37;
      }
      while ((v45 - 48) <= 9 && v46 < 0xA);
      if (!v36)
      {
        v30 = v35 & 0xFFFFFF00;
        v29 = v35;
        v8 = 0x100000000;
        goto LABEL_75;
      }
    }
    goto LABEL_74;
  }
  if (v5)
    v7 = (_DWORD)v6 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_8;
  v12 = 0;
  v13 = 2 * v6;
  while (1)
  {
    v14 = *(unsigned __int16 *)(v5 + v12);
    if ((v14 - 9) >= 5 && v14 != 32)
      break;
    --v6;
    v12 += 2;
    if (v13 == v12)
      goto LABEL_8;
  }
  if (v14 == 43)
  {
    if (v13 - 2 == v12)
      goto LABEL_8;
    --v6;
    v15 = (unsigned __int16 *)(v5 + v12 + 2);
    v14 = *v15;
  }
  else
  {
    v15 = (unsigned __int16 *)(v5 + v12);
  }
  if ((v14 - 48) <= 9)
  {
    v16 = 0;
    v17 = 0;
    v18 = v6 - 1;
    v19 = v15 + 1;
    do
    {
      v20 = v14 - 48;
      v21 = 10 * v16;
      if ((v21 & 0xFFFFFFFF00000000) == 0)
        v16 *= 10;
      v22 = __CFADD__(v16, v20);
      v23 = v16 + v20;
      v24 = v22;
      if (!v22)
        v16 = v23;
      if ((v21 & 0xFFFFFFFF00000000) != 0)
        v25 = 1;
      else
        v25 = v24;
      if (v25)
        v17 = 1;
      if (!v18)
        break;
      v26 = *v19++;
      v14 = v26;
      v27 = v26 - 48;
      --v18;
    }
    while ((v26 - 48) <= 9 && v27 < 0xA);
    if (!v17)
    {
      v10 = v16 & 0xFFFFFF00;
      v9 = v16;
      v8 = 0x100000000;
      goto LABEL_9;
    }
  }
LABEL_8:
  v8 = 0;
  v9 = 0;
  v10 = 0;
LABEL_9:
  v11 = v10 | v9;
LABEL_76:
  v48 = v8 | v11;
  v49 = 0;
  if (v48 > 0x100000000)
    v49 = v48;
  v50 = *((_QWORD *)this + 9);
  if (!v50)
    goto LABEL_88;
  v51 = *(_DWORD *)(v50 - 8);
  v52 = 9 * ((~(v49 << 15) + v49) ^ ((~(v49 << 15) + v49) >> 10));
  v53 = (v52 ^ (v52 >> 6)) + ~((v52 ^ (v52 >> 6)) << 11);
  v54 = v51 & (v53 ^ HIWORD(v53));
  v55 = (int *)(v50 + 72 * v54);
  v56 = *v55;
  if (*v55 != v49)
  {
    v57 = 1;
    while (v56)
    {
      v54 = (v54 + v57) & v51;
      v55 = (int *)(v50 + 72 * v54);
      v56 = *v55;
      ++v57;
      if (*v55 == v49)
        goto LABEL_85;
    }
    v55 = (int *)(v50 + 72 * *(unsigned int *)(v50 - 4));
  }
LABEL_85:
  if (v55 == (int *)(v50 + 72 * *(unsigned int *)(v50 - 4)))
  {
LABEL_88:
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x2100000002;
    *(_QWORD *)(result + 8) = "Missing script for given scriptId";
    *(_DWORD *)(result + 16) = 4;
    v59 = 1;
  }
  else
  {
    result = *((_QWORD *)v55 + 2);
    v59 = 0;
    if (result)
      *(_DWORD *)result += 2;
  }
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v59;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::getScriptSource@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  return Inspector::InspectorDebuggerAgent::getScriptSource((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3);
}

void Inspector::InspectorDebuggerAgent::getFunctionDetails(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF *v37;
  void (**v38)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v39;
  _QWORD *v40;
  WTF::StringImpl *v41;

  v41 = 0;
  Inspector::InjectedScriptManager::injectedScriptForObjectId(this[8], a2, &v38);
  if (v40 && *v40)
  {
    v37 = 0;
    Inspector::InjectedScript::getFunctionDetails((uint64_t)&v38, &v41, a2, &v37);
    v12 = v37;
    if (v37)
    {
      v13 = 0;
    }
    else
    {
      v12 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      v13 = 1;
    }
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  else
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v14 = 0x2C00000002;
    *(_QWORD *)(v14 + 8) = "Missing injected script for given functionId";
    *(_DWORD *)(v14 + 16) = 4;
    *(_QWORD *)a3 = v14;
    *(_DWORD *)(a3 + 8) = 1;
  }
  v38 = &off_1E3591350;
  if (v40)
  {
    v33 = v40 - 2;
    v34 = *(_QWORD *)(((unint64_t)(v40 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v35 = (uint64_t *)*(v40 - 1);
    if (v35)
    {
      v36 = *v33;
      *v35 = *v33;
      *(_QWORD *)(v36 + 8) = v35;
      *v33 = 0;
      v33[1] = 0;
    }
    *v33 = *(_QWORD *)(v34 + 40);
    *(_QWORD *)(v34 + 40) = v33;
    v40 = 0;
  }
  v15 = v39;
  v39 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = v41;
  v41 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::getFunctionDetails(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InspectorDebuggerAgent::getFunctionDetails(this - 2, a2, a3);
}

void Inspector::InspectorDebuggerAgent::getBreakpointLocations(uint64_t a1@<X0>, WTF::String **a2@<X1>, WTF::String **a3@<X2>, unsigned int *a4@<X5>, uint64_t a5@<X8>)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  int v36;
  int v37;
  _QWORD *v38;
  JSC::Debugger *v39;
  JSC::SourceProvider *v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  _BOOL4 v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int v58[2];
  int v59;
  unsigned int v60;
  unsigned int v61[2];
  WTF::StringImpl *v62;
  _QWORD *v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;

  *(_QWORD *)v61 = 0;
  v62 = 0;
  v60 = 0;
  if (Inspector::parseLocation(&v62, *a2, (const WTF::JSONImpl::Object *)&v61[1], v61, &v60, a4))
  {
    v59 = 0;
    *(_QWORD *)v58 = 0;
    if (Inspector::parseLocation(&v62, *a3, (const WTF::JSONImpl::Object *)&v59, &v58[1], v58, v12))
    {
      v15 = v61[1];
      if (v61[1] == v59)
      {
        v16 = v58[1];
        v17 = v61[0];
        if (v58[1] >= v61[0])
        {
          if (v61[0] == v58[1] && v58[0] < v60)
          {
            v18 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v18 = 0x4B00000002;
            v19 = "Cannot have columnNumber of given end be before columnNumber of given start";
          }
          else
          {
            v30 = *(_QWORD *)(a1 + 72);
            if (v30)
            {
              v31 = *(_DWORD *)(v30 - 8);
              v32 = 9 * ((v61[1] + ~(v61[1] << 15)) ^ ((v61[1] + ~(v61[1] << 15)) >> 10));
              v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
              v34 = v31 & (v33 ^ HIWORD(v33));
              v35 = (int *)(v30 + 72 * v34);
              v36 = *v35;
              if (*v35 != v61[1])
              {
                v37 = 1;
                while (v36)
                {
                  v34 = (v34 + v37) & v31;
                  v35 = (int *)(v30 + 72 * v34);
                  v36 = *v35;
                  ++v37;
                  if (*v35 == v61[1])
                    goto LABEL_31;
                }
                v35 = (int *)(v30 + 72 * *(unsigned int *)(v30 - 4));
              }
LABEL_31:
              if (v35 != (int *)(v30 + 72 * *(unsigned int *)(v30 - 4)))
              {
                v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v38 = 0x600000001;
                v38[2] = 0;
                v38[3] = 0;
                v57 = v38;
                v39 = *(JSC::Debugger **)(a1 + 56);
                v40 = (JSC::SourceProvider *)*((_QWORD *)v35 + 5);
                v41 = v60;
                v42 = v58[0];
                v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v43 = off_1E3595290;
                v43[1] = &v61[1];
                v43[2] = &v57;
                v67 = v16;
                v68 = v41;
                v44 = *((_DWORD *)v40 + 27);
                v45 = *((_DWORD *)v40 + 26) + 1;
                v65 = v45;
                v66 = v42;
                v64 = v44;
                if (v41)
                  v46 = v45 == v17;
                else
                  v46 = 0;
                v47 = v46;
                v48 = v44 != 0;
                if ((v47 & v48) != 0)
                  v49 = v44;
                else
                  v49 = 0;
                v50 = v41 - v49;
                if (v42)
                  v51 = v45 == v16;
                else
                  v51 = 0;
                v52 = v51;
                if ((v52 & v48) == 0)
                  v44 = 0;
                v53 = v42 - v44;
                JSC::Debugger::debuggerParseData(v39, v15, v40);
                v55 = v54;
                v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
                *v56 = &off_1E358BF00;
                v56[1] = v43;
                v56[2] = &v65;
                v56[3] = &v68;
                v56[4] = &v67;
                v56[5] = &v66;
                v56[6] = &v64;
                v63 = v56;
                JSC::DebuggerPausePositions::forEachBreakpointLocation(v55, v17 + 1, v50, v16 + 1, v53, &v63);
                (*(void (**)(_QWORD *))(*v56 + 8))(v56);
                *(_QWORD *)a5 = v57;
                *(_DWORD *)(a5 + 8) = 0;
                goto LABEL_15;
              }
            }
            v18 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v18 = 0x2A00000002;
            v19 = "Missing script for scriptId in given start";
          }
        }
        else
        {
          v18 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v18 = 0x4700000002;
          v19 = "Cannot have lineNumber of given end be before lineNumber of given start";
        }
      }
      else
      {
        v18 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v18 = 0x3500000002;
        v19 = "Must have same scriptId for given start and given end";
      }
      *(_QWORD *)(v18 + 8) = v19;
      *(_DWORD *)(v18 + 16) = 4;
      *(_QWORD *)a5 = v18;
    }
    else
    {
      v21 = v62;
      if (v62)
        *(_DWORD *)v62 += 2;
      *(_QWORD *)a5 = v21;
    }
    *(_DWORD *)(a5 + 8) = 1;
LABEL_15:
    v20 = v62;
    goto LABEL_16;
  }
  v20 = v62;
  if (v62)
    *(_DWORD *)v62 += 2;
  *(_QWORD *)a5 = v20;
  *(_DWORD *)(a5 + 8) = 1;
LABEL_16:
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v8, v9, v10, v11, (uint64_t)v12, v13, v14);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::getBreakpointLocations(uint64_t a1@<X0>, WTF::String **a2@<X1>, WTF::String **a3@<X2>, unsigned int *a4@<X5>, uint64_t a5@<X8>)
{
  Inspector::InspectorDebuggerAgent::getBreakpointLocations(a1 - 16, a2, a3, a4, a5);
}

void Inspector::InspectorDebuggerAgent::schedulePauseAtNextOpportunity(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];

  if (!*(_BYTE *)(a1 + 251))
  {
    v10 = (int)a2;
    *(_BYTE *)(a1 + 251) = 1;
    v12 = *(_DWORD *)(a1 + 156);
    if (v12 != 302)
    {
      *(_DWORD *)(a1 + 168) = v12;
      v13 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = 0;
      v14 = *(WTF **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::JSONImpl::Value::operator delete(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v14;
      }
    }
    *(_DWORD *)(a1 + 156) = v10;
    v15 = *a3;
    *a3 = 0;
    v16 = *(WTF **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::JSONImpl::Value::operator delete(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v16;
    }
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v33, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_WORD *)(v24 + 48);
    *(_WORD *)(v24 + 48) = v25 | 2;
    if ((v25 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v24 + 16) + 192), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      *(_WORD *)(v24 + 48) |= 0x200u;
      v34 = v24;
      v35 = 1;
      v26 = *(_QWORD *)(v24 + 16) + 192;
      v36[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v36[1] = v36;
      v36[2] = &v34;
      JSC::Heap::forEachCodeBlockImpl(v26, (uint64_t)v36, v27, v28, v29, v30, v31, v32);
    }
    JSC::JSLockHolder::~JSLockHolder(&v33, v17, v18, v19, v20, v21, v22, v23);
  }
}

void Inspector::InspectorDebuggerAgent::cancelPauseAtNextOpportunity(Inspector::InspectorDebuggerAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;

  if (*((_BYTE *)this + 251))
  {
    *((_BYTE *)this + 251) = 0;
    v9 = *((_DWORD *)this + 39);
    if (v9 != 302)
    {
      *((_DWORD *)this + 42) = v9;
      v10 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      v11 = (WTF *)*((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          WTF::JSONImpl::Value::operator delete(v11, a2, a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v11;
      }
    }
    *((_DWORD *)this + 39) = 97;
    v12 = (WTF *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, a2, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v12;
    }
    *(_WORD *)(*((_QWORD *)this + 7) + 48) &= ~2u;
    *((_BYTE *)this + 249) = 0;
  }
}

BOOL Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];

  v10 = a3;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v35, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 112);
  if (!v21)
  {
    ++*a2;
    *(_QWORD *)(v20 + 112) = a2;
    if ((*(_WORD *)(v20 + 48) & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v20 + 16) + 192), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
      *(_WORD *)(v20 + 48) |= 0x200u;
      v36 = v20;
      v37 = 1;
      v22 = *(_QWORD *)(v20 + 16) + 192;
      v38[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v38[1] = v38;
      v38[2] = &v36;
      JSC::Heap::forEachCodeBlockImpl(v22, (uint64_t)v38, v23, v24, v25, v26, v27, v28);
    }
    v29 = *(_DWORD *)(a1 + 156);
    if (v29 != 302)
    {
      *(_DWORD *)(a1 + 168) = v29;
      v30 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = 0;
      v31 = *(WTF **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::JSONImpl::Value::operator delete(v31, v13, v14, v15, v16, v17, v18, v19);
        else
          --*(_DWORD *)v31;
      }
    }
    *(_DWORD *)(a1 + 156) = v10;
    v32 = *a4;
    *a4 = 0;
    v33 = *(WTF **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v32;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::JSONImpl::Value::operator delete(v33, v13, v14, v15, v16, v17, v18, v19);
      else
        --*(_DWORD *)v33;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v35, v13, v14, v15, v16, v17, v18, v19);
  return v21 == 0;
}

BOOL Inspector::InspectorDebuggerAgent::cancelPauseForSpecialBreakpoint(uint64_t a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF *v10;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(WTF **)(v9 + 112);
  if (v10 == this)
  {
    *(_QWORD *)(v9 + 112) = 0;
    WTF::RefCounted<JSC::Breakpoint>::deref(this, this, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 156);
    if (v19 != 302)
    {
      *(_DWORD *)(a1 + 168) = v19;
      v20 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = 0;
      v21 = *(WTF **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::JSONImpl::Value::operator delete(v21, v12, v13, v14, v15, v16, v17, v18);
        else
          --*(_DWORD *)v21;
      }
    }
    *(_DWORD *)(a1 + 156) = 97;
    v22 = *(WTF **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::JSONImpl::Value::operator delete(v22, v12, v13, v14, v15, v16, v17, v18);
      else
        --*(_DWORD *)v22;
    }
  }
  return v10 == this;
}

void Inspector::InspectorDebuggerAgent::pause(Inspector::InspectorDebuggerAgent *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _BYTE *a7@<X8>, double a8@<D0>)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;

  v16 = 0;
  Inspector::InspectorDebuggerAgent::schedulePauseAtNextOpportunity((uint64_t)this, (WTF::AtomStringImpl *)0x12D, (uint64_t *)&v16, a2, a3, a4, a5, a6, a8);
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::JSONImpl::Value::operator delete(v16, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v16;
  }
  *a7 = 0;
  a7[8] = 0;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::pause(Inspector::InspectorDebuggerAgent *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _BYTE *a7@<X8>, double a8@<D0>)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;

  v16 = 0;
  Inspector::InspectorDebuggerAgent::schedulePauseAtNextOpportunity((uint64_t)this - 16, (WTF::AtomStringImpl *)0x12D, (uint64_t *)&v16, a2, a3, a4, a5, a6, a8);
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::JSONImpl::Value::operator delete(v16, v9, v10, v11, v12, v13, v14, v15);
    else
      --*(_DWORD *)v16;
  }
  *a7 = 0;
  a7[8] = 0;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::resume(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::resume((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

double Inspector::InspectorDebuggerAgent::stepNext@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double result@<D0>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];

  if (!*((_QWORD *)this + 13))
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v24 + 8) = "Must be paused";
    *(_DWORD *)(v24 + 16) = 4;
    *(_QWORD *)a9 = v24;
    *(_BYTE *)(a9 + 8) = 1;
    *(_QWORD *)&result = 0xE00000002;
    *(_QWORD *)v24 = 0xE00000002;
    return result;
  }
  *((_DWORD *)this + 38) = 1;
  if (!*((_BYTE *)this + 254))
  {
    *((_BYTE *)this + 254) = 1;
    v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v14 = v13;
    *v13 = off_1E35952B8;
    v13[1] = this;
    v28[0] = v13;
    if (*(_QWORD *)(v12 + 90568))
    {
      v25 = *(unsigned int *)(v12 + 93476);
      if ((_DWORD)v25 != *(_DWORD *)(v12 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v12 + 93464) + 8 * v25) = v13;
        *(_DWORD *)(v12 + 93476) = v25 + 1;
        *(_BYTE *)(v12 + 56) |= 0x20u;
        goto LABEL_6;
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v12 + 93464, (unint64_t)v28);
      v14 = (_QWORD *)v28[0];
      *(_BYTE *)(v12 + 56) |= 0x20u;
      v28[0] = 0;
      if (!v14)
        goto LABEL_6;
    }
    else
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(this, a2, a3, a4, a5, a6, a7, a8, result);
      v28[0] = 0;
    }
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
LABEL_6:
  v15 = *((_QWORD *)this + 7);
  v16 = *(_WORD *)(v15 + 48);
  if ((v16 & 0x20) != 0)
  {
    *(_QWORD *)(v15 + 64) = *(_QWORD *)(v15 + 72);
    *(_WORD *)(v15 + 48) = v16 | 4;
    if ((v16 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v15 + 16) + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(v15 + 48) |= 0x200u;
      v26 = v15;
      v27 = 1;
      v17 = *(_QWORD *)(v15 + 16) + 192;
      v28[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v28[1] = v28;
      v28[2] = &v26;
      JSC::Heap::forEachCodeBlockImpl(v17, (uint64_t)v28, v18, v19, v20, v21, v22, v23);
    }
    *(_BYTE *)(v15 + 8) = 1;
  }
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorDebuggerAgent::stepNext@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  return Inspector::InspectorDebuggerAgent::stepNext((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

double Inspector::InspectorDebuggerAgent::stepOver@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double result@<D0>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];

  if (!*((_QWORD *)this + 13))
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v24 + 8) = "Must be paused";
    *(_DWORD *)(v24 + 16) = 4;
    *(_QWORD *)a9 = v24;
    *(_BYTE *)(a9 + 8) = 1;
    *(_QWORD *)&result = 0xE00000002;
    *(_QWORD *)v24 = 0xE00000002;
    return result;
  }
  *((_DWORD *)this + 38) = 1;
  if (!*((_BYTE *)this + 254))
  {
    *((_BYTE *)this + 254) = 1;
    v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v14 = v13;
    *v13 = off_1E35952B8;
    v13[1] = this;
    v28[0] = v13;
    if (*(_QWORD *)(v12 + 90568))
    {
      v25 = *(unsigned int *)(v12 + 93476);
      if ((_DWORD)v25 != *(_DWORD *)(v12 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v12 + 93464) + 8 * v25) = v13;
        *(_DWORD *)(v12 + 93476) = v25 + 1;
        *(_BYTE *)(v12 + 56) |= 0x20u;
        goto LABEL_6;
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v12 + 93464, (unint64_t)v28);
      v14 = (_QWORD *)v28[0];
      *(_BYTE *)(v12 + 56) |= 0x20u;
      v28[0] = 0;
      if (!v14)
        goto LABEL_6;
    }
    else
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(this, a2, a3, a4, a5, a6, a7, a8, result);
      v28[0] = 0;
    }
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
LABEL_6:
  v15 = *((_QWORD *)this + 7);
  v16 = *(_WORD *)(v15 + 48);
  if ((v16 & 0x20) != 0)
  {
    *(_QWORD *)(v15 + 64) = *(_QWORD *)(v15 + 72);
    if ((v16 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v15 + 16) + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(v15 + 48) |= 0x200u;
      v26 = v15;
      v27 = 1;
      v17 = *(_QWORD *)(v15 + 16) + 192;
      v28[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v28[1] = v28;
      v28[2] = &v26;
      JSC::Heap::forEachCodeBlockImpl(v17, (uint64_t)v28, v18, v19, v20, v21, v22, v23);
    }
    *(_BYTE *)(v15 + 8) = 1;
  }
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorDebuggerAgent::stepOver@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  return Inspector::InspectorDebuggerAgent::stepOver((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

double Inspector::InspectorDebuggerAgent::stepInto@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double result@<D0>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];

  if (!*((_QWORD *)this + 13))
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v24 + 8) = "Must be paused";
    *(_DWORD *)(v24 + 16) = 4;
    *(_QWORD *)a9 = v24;
    *(_BYTE *)(a9 + 8) = 1;
    *(_QWORD *)&result = 0xE00000002;
    *(_QWORD *)v24 = 0xE00000002;
    return result;
  }
  *((_DWORD *)this + 38) = 1;
  if (!*((_BYTE *)this + 254))
  {
    *((_BYTE *)this + 254) = 1;
    v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v14 = v13;
    *v13 = off_1E35952B8;
    v13[1] = this;
    v28[0] = v13;
    if (*(_QWORD *)(v12 + 90568))
    {
      v25 = *(unsigned int *)(v12 + 93476);
      if ((_DWORD)v25 != *(_DWORD *)(v12 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v12 + 93464) + 8 * v25) = v13;
        *(_DWORD *)(v12 + 93476) = v25 + 1;
        *(_BYTE *)(v12 + 56) |= 0x20u;
        goto LABEL_6;
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v12 + 93464, (unint64_t)v28);
      v14 = (_QWORD *)v28[0];
      *(_BYTE *)(v12 + 56) |= 0x20u;
      v28[0] = 0;
      if (!v14)
        goto LABEL_6;
    }
    else
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(this, a2, a3, a4, a5, a6, a7, a8, result);
      v28[0] = 0;
    }
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
LABEL_6:
  v15 = *((_QWORD *)this + 7);
  v16 = *(_WORD *)(v15 + 48);
  if ((v16 & 0x20) != 0)
  {
    *(_WORD *)(v15 + 48) = v16 | 2;
    if ((v16 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v15 + 16) + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(v15 + 48) |= 0x200u;
      v26 = v15;
      v27 = 1;
      v17 = *(_QWORD *)(v15 + 16) + 192;
      v28[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v28[1] = v28;
      v28[2] = &v26;
      JSC::Heap::forEachCodeBlockImpl(v17, (uint64_t)v28, v18, v19, v20, v21, v22, v23);
    }
    *(_BYTE *)(v15 + 8) = 1;
  }
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorDebuggerAgent::stepInto@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  return Inspector::InspectorDebuggerAgent::stepInto((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

double Inspector::InspectorDebuggerAgent::stepOut@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double result@<D0>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];

  if (!*((_QWORD *)this + 13))
  {
    v26 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v26 + 8) = "Must be paused";
    *(_DWORD *)(v26 + 16) = 4;
    *(_QWORD *)a9 = v26;
    *(_BYTE *)(a9 + 8) = 1;
    *(_QWORD *)&result = 0xE00000002;
    *(_QWORD *)v26 = 0xE00000002;
    return result;
  }
  *((_DWORD *)this + 38) = 1;
  if (!*((_BYTE *)this + 254))
  {
    *((_BYTE *)this + 254) = 1;
    v12 = *(_QWORD *)(*((_QWORD *)this + 7) + 16);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v14 = v13;
    *v13 = off_1E35952B8;
    v13[1] = this;
    v30[0] = v13;
    if (*(_QWORD *)(v12 + 90568))
    {
      v27 = *(unsigned int *)(v12 + 93476);
      if ((_DWORD)v27 != *(_DWORD *)(v12 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v12 + 93464) + 8 * v27) = v13;
        *(_DWORD *)(v12 + 93476) = v27 + 1;
        *(_BYTE *)(v12 + 56) |= 0x20u;
        goto LABEL_6;
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v12 + 93464, (unint64_t)v30);
      v14 = (_QWORD *)v30[0];
      *(_BYTE *)(v12 + 56) |= 0x20u;
      v30[0] = 0;
      if (!v14)
        goto LABEL_6;
    }
    else
    {
      Inspector::InspectorDebuggerAgent::didBecomeIdle(this, a2, a3, a4, a5, a6, a7, a8, result);
      v30[0] = 0;
    }
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
LABEL_6:
  v15 = *((_QWORD *)this + 7);
  v16 = *(_WORD *)(v15 + 48);
  if ((v16 & 0x20) != 0)
  {
    v17 = *(_QWORD **)(v15 + 72);
    if (v17)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 48);
      v17 = (_QWORD *)*v17;
      if (v17 == (_QWORD *)v18)
      {
        v17 = *(_QWORD **)(vmEntryRecord(v18) + 8);
        v16 = *(_WORD *)(v15 + 48);
      }
    }
    *(_QWORD *)(v15 + 64) = v17;
    *(_WORD *)(v15 + 48) = v16 | 8;
    if ((v16 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(v15 + 16) + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(v15 + 48) |= 0x200u;
      v28 = v15;
      v29 = 1;
      v19 = *(_QWORD *)(v15 + 16) + 192;
      v30[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v30[1] = v30;
      v30[2] = &v28;
      JSC::Heap::forEachCodeBlockImpl(v19, (uint64_t)v30, v20, v21, v22, v23, v24, v25);
    }
    *(_BYTE *)(v15 + 8) = 1;
  }
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  return result;
}

double `non-virtual thunk to'Inspector::InspectorDebuggerAgent::stepOut@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  return Inspector::InspectorDebuggerAgent::stepOut((Inspector::InspectorDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Inspector::InspectorDebuggerAgent::didBecomeIdle(Inspector::InspectorDebuggerAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  *((_BYTE *)this + 254) = 0;
  if (*((_DWORD *)this + 38) == 1)
  {
    if (*((_BYTE *)this + 251))
    {
      *((_BYTE *)this + 251) = 0;
      v10 = *((_DWORD *)this + 39);
      if (v10 != 302)
      {
        *((_DWORD *)this + 42) = v10;
        v11 = *((_QWORD *)this + 20);
        *((_QWORD *)this + 20) = 0;
        v12 = (WTF *)*((_QWORD *)this + 22);
        *((_QWORD *)this + 22) = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            WTF::JSONImpl::Value::operator delete(v12, a2, a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v12;
        }
      }
      *((_DWORD *)this + 39) = 97;
      v13 = (WTF *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::JSONImpl::Value::operator delete(v13, a2, a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v13;
      }
      *(_WORD *)(*((_QWORD *)this + 7) + 48) &= ~2u;
      *((_BYTE *)this + 249) = 0;
    }
    JSC::Debugger::continueProgram(*((JSC::Debugger **)this + 7), a2, a3, a4, a5, a6, a7, a8);
    Inspector::DebuggerFrontendDispatcher::resumed(*((Inspector::DebuggerFrontendDispatcher **)this + 5));
  }
  *((_DWORD *)this + 38) = 0;
  if (*((_BYTE *)this + 249))
  {
    v21 = 0;
    Inspector::InspectorDebuggerAgent::schedulePauseAtNextOpportunity((uint64_t)this, (WTF::AtomStringImpl *)0x12D, (uint64_t *)&v21, a4, a5, a6, a7, a8, a9);
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::JSONImpl::Value::operator delete(v21, v14, v15, v16, v17, v18, v19, v20);
      else
        --*(_DWORD *)v21;
    }
  }
}

void Inspector::InspectorDebuggerAgent::setPauseOnDebuggerStatements(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl *v34;

  v34 = 0;
  if ((a2 & 1) != 0)
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v34, a3, &v33);
    v18 = v33;
    if (v33)
    {
      v19 = *(_QWORD *)(a1 + 56);
      v33 = 0;
      v20 = *(WTF **)(v19 + 168);
      *(_QWORD *)(v19 + 168) = v18;
      if (v20)
      {
        WTF::RefCounted<JSC::Breakpoint>::deref(v20, v11, v12, v13, v14, v15, v16, v17);
        v21 = v33;
        *a9 = 0;
        a9[8] = 0;
        v33 = 0;
        if (v21)
          WTF::RefCounted<JSC::Breakpoint>::deref(v21, v11, v12, v13, v14, v15, v16, v17);
      }
      else
      {
        *a9 = 0;
        a9[8] = 0;
      }
    }
    else
    {
      v24 = v34;
      if (v34)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)a9 = v24;
      a9[8] = 1;
    }
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(WTF **)(v22 + 168);
    *(_QWORD *)(v22 + 168) = 0;
    if (v23)
      WTF::RefCounted<JSC::Breakpoint>::deref(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setPauseOnDebuggerStatements(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::setPauseOnDebuggerStatements(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

void Inspector::InspectorDebuggerAgent::setPauseOnExceptions(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int *v32;
  WTF::StringImpl *v33;
  uint64_t v34[2];

  v33 = 0;
  if (WTF::equalInternal<unsigned char>(*a2, (unint64_t)"all", 3))
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v33, a3, v34);
    v15 = v34[0];
    if (v34[0])
    {
      v16 = 0;
      goto LABEL_13;
    }
LABEL_6:
    v17 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    *(_QWORD *)a4 = v17;
    *(_BYTE *)(a4 + 8) = 1;
    if (v17)
      goto LABEL_18;
    return;
  }
  if (WTF::equalInternal<unsigned char>(*a2, (unint64_t)"uncaught", 8))
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v33, a3, v34);
    v16 = v34[0];
    if (!v34[0])
      goto LABEL_6;
  }
  else
  {
    if (!WTF::equalInternal<unsigned char>(*a2, (unint64_t)"none", 4))
    {
      v30 = (WTF::StringImpl *)*a2;
      if (*a2)
        *(_DWORD *)v30 += 2;
      v31 = v30;
      v34[0] = (uint64_t)"Unknown state: ";
      v34[1] = 16;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v34, (uint64_t *)&v31, &v32);
      if (!v32)
      {
        __break(0xC471u);
        return;
      }
      *(_QWORD *)a4 = v32;
      *(_BYTE *)(a4 + 8) = 1;
      v17 = v31;
      v31 = 0;
      v32 = 0;
      if (v17)
        goto LABEL_18;
      return;
    }
    v16 = 0;
  }
  v15 = 0;
LABEL_13:
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(WTF **)(v18 + 152);
  *(_QWORD *)(v18 + 152) = v15;
  if (v19)
    WTF::RefCounted<JSC::Breakpoint>::deref(v19, v8, v9, v10, v11, v12, v13, v14);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(WTF **)(v20 + 160);
  *(_QWORD *)(v20 + 160) = v16;
  if (v21)
    WTF::RefCounted<JSC::Breakpoint>::deref(v21, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  v17 = v33;
  if (v33)
  {
LABEL_18:
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setPauseOnExceptions(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  Inspector::InspectorDebuggerAgent::setPauseOnExceptions(a1 - 16, a2, a3, a4);
}

void Inspector::InspectorDebuggerAgent::setPauseOnAssertions(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;

  v32 = 0;
  if ((a2 & 1) != 0)
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v32, a3, &v31);
    v18 = v31;
    if (v31)
    {
      v31 = 0;
      v19 = *(WTF **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v18;
      if (v19)
      {
        WTF::RefCounted<JSC::Breakpoint>::deref(v19, v11, v12, v13, v14, v15, v16, v17);
        v20 = v31;
        *a9 = 0;
        a9[8] = 0;
        v31 = 0;
        if (v20)
          WTF::RefCounted<JSC::Breakpoint>::deref(v20, v11, v12, v13, v14, v15, v16, v17);
      }
      else
      {
        *a9 = 0;
        a9[8] = 0;
      }
    }
    else
    {
      v22 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)a9 = v22;
      a9[8] = 1;
    }
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  else
  {
    v21 = *(WTF **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v21)
      WTF::RefCounted<JSC::Breakpoint>::deref(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setPauseOnAssertions(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::setPauseOnAssertions(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

void Inspector::InspectorDebuggerAgent::setPauseOnMicrotasks(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;

  v32 = 0;
  if ((a2 & 1) != 0)
  {
    Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(&v32, a3, &v31);
    v18 = v31;
    if (v31)
    {
      v31 = 0;
      v19 = *(WTF **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v18;
      if (v19)
      {
        WTF::RefCounted<JSC::Breakpoint>::deref(v19, v11, v12, v13, v14, v15, v16, v17);
        v20 = v31;
        *a9 = 0;
        a9[8] = 0;
        v31 = 0;
        if (v20)
          WTF::RefCounted<JSC::Breakpoint>::deref(v20, v11, v12, v13, v14, v15, v16, v17);
      }
      else
      {
        *a9 = 0;
        a9[8] = 0;
      }
    }
    else
    {
      v22 = v32;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)a9 = v22;
      a9[8] = 1;
    }
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  else
  {
    v21 = *(WTF **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    if (v21)
      WTF::RefCounted<JSC::Breakpoint>::deref(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *a9 = 0;
    a9[8] = 0;
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setPauseOnMicrotasks(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  Inspector::InspectorDebuggerAgent::setPauseOnMicrotasks(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

void Inspector::InspectorDebuggerAgent::evaluateOnCallFrame(uint64_t a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10)
{
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void (**v40)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v41;
  _QWORD *v42;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 64), a2, &v40);
  if (v42 && *v42)
  {
    Inspector::InspectorDebuggerAgent::evaluateOnCallFrame((_QWORD *)a1, (uint64_t)&v40, a2, a3, a4, a5, a6, a7, a9, a8, a10);
  }
  else
  {
    v26 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v26 = 0x2D00000002;
    *(_QWORD *)(v26 + 8) = "Missing injected script for given callFrameId";
    *(_DWORD *)(v26 + 16) = 4;
    *(_QWORD *)a9 = v26;
    *(_DWORD *)(a9 + 24) = 1;
  }
  v40 = &off_1E3591350;
  if (v42)
  {
    v36 = v42 - 2;
    v37 = *(_QWORD *)(((unint64_t)(v42 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v38 = (uint64_t *)*(v42 - 1);
    if (v38)
    {
      v39 = *v36;
      *v38 = *v36;
      *(_QWORD *)(v39 + 8) = v38;
      *v36 = 0;
      v36[1] = 0;
    }
    *v36 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)(v37 + 40) = v36;
    v42 = 0;
  }
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
}

void Inspector::InspectorDebuggerAgent::evaluateOnCallFrame(_QWORD *a1@<X0>, uint64_t a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, const WTF::String *a5@<X4>, _BYTE *a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, _BYTE *a11)
{
  const WTF::String *v14;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  char v34;
  BOOL v35;
  char v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF *v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  WTF *v65;
  WTF::StringImpl *v66;

  v66 = 0;
  if (!a1[13])
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v25 + 8) = "Must be paused";
    *(_DWORD *)(v25 + 16) = 4;
    *(_QWORD *)v25 = 0xE00000004;
    *(_QWORD *)a9 = v25;
    *(_DWORD *)(a9 + 24) = 1;
    v26 = 2;
LABEL_57:
    *(_DWORD *)v25 = v26;
    return;
  }
  v14 = a5;
  v16 = a3;
  v17 = a2;
  v19 = a1[7];
  if (a7[1])
    v20 = *a7 == 0;
  else
    v20 = 1;
  v21 = !v20;
  if (v20)
  {
    v62 = 0;
    v24 = 0;
  }
  else
  {
    v59 = v21;
    v61 = *(_QWORD *)(v19 + 152);
    if (v61)
      *(_QWORD *)(v19 + 152) = 0;
    v62 = *(_QWORD *)(v19 + 160);
    if (v62)
      *(_QWORD *)(v19 + 160) = 0;
    (*(void (**)(_QWORD *))(*a1 + 440))(a1);
    v14 = a5;
    v17 = a2;
    v24 = v61;
    v16 = a3;
    v21 = v59;
  }
  v27 = 0;
  v65 = 0;
  v64 = 0;
  LOBYTE(v63) = 0;
  BYTE4(v63) = 0;
  v28 = (uint64_t *)a1[14];
  if (v28)
    v27 = *v28;
  if (a6[1])
    v29 = *a6 == 0;
  else
    v29 = 1;
  v30 = !v29;
  if (a8[1])
    v31 = *a8 == 0;
  else
    v31 = 1;
  v32 = !v31;
  if (a10[1])
    v33 = *a10 == 0;
  else
    v33 = 1;
  v34 = !v33;
  if (a11[1])
    v35 = *a11 == 0;
  else
    v35 = 1;
  v36 = !v35;
  Inspector::InjectedScript::evaluateOnCallFrame(v17, (WTF::AtomStringImpl *)&v66, v27, v16, a4, v14, v30, v32, v34, v36, &v65, (uint64_t)&v64, (uint64_t)&v63);
  if (v21)
    (*(void (**)(_QWORD *))(*a1 + 448))(a1);
  if (v65)
  {
    v44 = 0;
    v45 = v64;
    v47 = v62;
    v46 = v63;
    *(_QWORD *)a9 = v65;
    *(_WORD *)(a9 + 8) = v45;
    *(_QWORD *)(a9 + 12) = v46;
  }
  else
  {
    v48 = v66;
    v47 = v62;
    if (v66)
      *(_DWORD *)v66 += 2;
    *(_QWORD *)a9 = v48;
    v44 = 1;
  }
  *(_DWORD *)(a9 + 24) = v44;
  if (v24)
  {
    v49 = *(WTF **)(v19 + 152);
    *(_QWORD *)(v19 + 152) = v24;
    if (v49)
      WTF::RefCounted<JSC::Breakpoint>::deref(v49, v37, v38, v39, v40, v41, v42, v43);
  }
  if (v47)
  {
    v50 = *(WTF **)(v19 + 160);
    *(_QWORD *)(v19 + 160) = v47;
    if (v50)
      WTF::RefCounted<JSC::Breakpoint>::deref(v50, v37, v38, v39, v40, v41, v42, v43);
  }
  v25 = (uint64_t)v66;
  v66 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 - 2;
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      return;
    }
    goto LABEL_57;
  }
}

